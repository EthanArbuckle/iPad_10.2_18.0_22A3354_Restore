void sub_19C9544C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  void *v66;
  int v67;
  uint64_t v68;

  if (SLOBYTE(STACK[0x39F]) < 0)
  {
    operator delete((void *)STACK[0x388]);
    if ((v67 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x3A0]);
      if (*(char *)(v68 - 169) < 0)
        operator delete(*(void **)(v68 - 192));
      CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)(v68 - 160));
      CoreML::Specification::NeuralNetwork::~NeuralNetwork((CoreML::Specification::NeuralNetwork *)&a53);
      CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)&a66);
      CoreML::Specification::NeuralNetwork::~NeuralNetwork((CoreML::Specification::NeuralNetwork *)&a42);
      _Unwind_Resume(a1);
    }
  }
  else if (!v67)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v66);
  goto LABEL_6;
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = *(_QWORD *)(result + 16) + 8;
    do
    {
      v3 = *(_QWORD *)v2;
      if (*(char *)(*(_QWORD *)v2 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

std::string *CoreML::Specification::NeuralNetworkLayer::add_input(uint64_t a1, std::string *__str)
{
  google::protobuf::Arena **v4;
  int *v5;
  int v6;
  int v7;
  std::string *Aligned;
  google::protobuf::Arena *v9;
  google::protobuf::Arena **v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (google::protobuf::Arena **)(a1 + 16);
  v5 = *(int **)(a1 + 32);
  if (!v5)
  {
    v6 = *(_DWORD *)(a1 + 24);
    v7 = *(_DWORD *)(a1 + 28);
LABEL_6:
    if (v6 <= v7)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), v7 - v6 + 1);
      v5 = *(int **)(a1 + 32);
    }
    v7 = *v5;
    goto LABEL_9;
  }
  v6 = *(_DWORD *)(a1 + 24);
  v7 = *v5;
  if (v6 < *v5)
  {
    *(_DWORD *)(a1 + 24) = v6 + 1;
    Aligned = *(std::string **)&v5[2 * v6 + 2];
    return std::string::operator=(Aligned, __str);
  }
  if (v7 == *(_DWORD *)(a1 + 28))
    goto LABEL_6;
LABEL_9:
  *v5 = v7 + 1;
  v9 = *v4;
  if (*v4)
  {
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
    v10 = google::protobuf::Arena::AllocateAligned(v9, 0, 24);
    *v10 = (google::protobuf::Arena *)Aligned;
    v10[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
    v11 = (unint64_t *)((char *)v9 + 32);
    do
      v12 = __ldxr(v11);
    while (__stxr((unint64_t)v10, v11));
    v10[2] = (google::protobuf::Arena *)v12;
  }
  else
  {
    Aligned = (std::string *)operator new();
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
  }
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v14 + 1;
  *(_QWORD *)(v13 + 8 * v14 + 8) = Aligned;
  return std::string::operator=(Aligned, __str);
}

double EspressoConverter::computeMaxShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  double result;

  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = 0x100000001;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 20) = -1;
  if (a3 != a2)
  {
    v3 = (a3 - a2) >> 6;
    if (v3 <= 1)
      v3 = 1;
    v4 = (int *)(a2 + 4);
    v5 = 1;
    v6 = 1;
    v7 = 1;
    while (1)
    {
      v8 = v4[1];
      if (v8 < 0)
        break;
      if (v5 >= 1 && v8 > v5)
        goto LABEL_10;
LABEL_11:
      v9 = *v4;
      if (*v4 < 0)
      {
        v9 = -1;
LABEL_16:
        *(_DWORD *)(a1 + 4) = v9;
        v6 = v9;
        goto LABEL_17;
      }
      if (v6 >= 1 && v9 > v6)
        goto LABEL_16;
LABEL_17:
      v10 = *(v4 - 1);
      if (v10 < 0)
      {
        v10 = -1;
      }
      else if (v7 < 1 || v10 <= v7)
      {
        goto LABEL_23;
      }
      *(_DWORD *)a1 = v10;
      v7 = v10;
LABEL_23:
      v4 += 16;
      if (!--v3)
        goto LABEL_24;
    }
    v8 = -1;
LABEL_10:
    *(_DWORD *)(a1 + 8) = v8;
    v5 = v8;
    goto LABEL_11;
  }
LABEL_24:
  result = NAN;
  *(_QWORD *)(a1 + 12) = -1;
  return result;
}

void EspressoConverter::copyWeightsToDataBlob(EspressoConverter *this, _QWORD *a2, size_t __n)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  const void *v18;
  std::runtime_error *exception;
  std::string __src;

  v6 = a2[5];
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
    v8 = *(_QWORD *)(v6 + 8);
  else
    v8 = *(unsigned __int8 *)(v6 + 23);
  v9 = a2[6];
  if (*(char *)(v9 + 23) < 0)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = *(unsigned __int8 *)(v9 + 23);
  v11 = *((_DWORD *)a2 + 4);
  v12 = a2[7];
  if (*(char *)(v12 + 23) < 0)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = *(unsigned __int8 *)(v12 + 23);
  if (v11 <= 0)
    v14 = 1;
  else
    v14 = 2;
  if (v8)
    v15 = v14;
  else
    v15 = v11 > 0;
  if (v10)
    ++v15;
  if (v13)
    ++v15;
  if (v15 > 1)
    goto LABEL_34;
  if (v11 <= 0 && v15)
  {
    if ((v7 & 0x80) != 0)
      v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      EspressoConverter::readHalfPrecisionWeightsFromByteStream((uint64_t)&__src, (void **)v6);
      v16 = (void *)__src.__r_.__value_.__r.__words[0];
      memcpy(this, __src.__r_.__value_.__l.__data_, __n);
      if (v16)
        operator delete(v16);
      return;
    }
LABEL_34:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__src, "Failed to copy empty or invalid weights to kernel");
    std::runtime_error::runtime_error(exception, &__src);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!v15)
    goto LABEL_34;
  v17 = a2[3];
  if (v17)
    v18 = (const void *)(v17 + 8);
  else
    v18 = 0;
  memcpy(this, v18, __n);
}

void sub_19C9552B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

vImage_Error EspressoConverter::readHalfPrecisionWeightsFromByteStream(uint64_t a1, void **a2)
{
  size_t v4;
  void *v5;
  vImage_Error result;
  std::runtime_error *exception;
  std::string v8;
  vImage_Buffer dest;
  vImage_Buffer src;

  if (*((char *)a2 + 23) >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  std::vector<float>::resize((char **)a1, v4 >> 1);
  src.width = v4 >> 1;
  src.rowBytes = v4;
  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = *a2;
  src.data = v5;
  src.height = 1;
  dest.width = v4 >> 1;
  dest.rowBytes = 2 * v4;
  dest.data = *(void **)a1;
  dest.height = 1;
  result = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  if (result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v8, "Error converting float16 biases");
    std::runtime_error::runtime_error(exception, &v8);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_19C9553D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v16;
  void *v17;
  int v18;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      if (v16)
      {
        *(_QWORD *)(v15 + 8) = v16;
        operator delete(v16);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t EspressoConverter::CoreMLToEspressoRNNActivation(EspressoConverter *this, const CoreML::Specification::ActivationParams *a2)
{
  int v2;
  uint64_t result;
  std::runtime_error *exception;
  std::string v5;

  v2 = (int)this;
  result = 0;
  if (v2 > 24)
  {
    if ((v2 - 40) <= 0x1F)
    {
      if (v2 == 40)
        return 2;
      if (v2 == 41)
        return 3;
      if (((1 << (v2 - 40)) & 0xC0100400) != 0)
        goto LABEL_22;
    }
    if (v2 == 31)
    {
      return 4;
    }
    else if (v2 == 25)
    {
      goto LABEL_22;
    }
  }
  else if (v2 <= 9)
  {
    if (v2 == 5)
    {
      return 6;
    }
    else if (!v2)
    {
      goto LABEL_22;
    }
  }
  else
  {
    if (v2 == 10)
      return 1;
    if (v2 == 15 || v2 == 20)
    {
LABEL_22:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v5, "Unsupported recurrent non-linearity type.");
      std::runtime_error::runtime_error(exception, &v5);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return result;
}

void sub_19C955554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void EspressoConverter::getInputAndOutputNames(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  __int128 **v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 **v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  BOOL v41;
  unsigned int v43;
  BOOL v44;
  std::runtime_error *exception;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  BOOL v55;
  unsigned __int8 *v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  std::runtime_error *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _BOOL4 v71;
  _QWORD *v72;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  std::runtime_error *v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  std::runtime_error *v96;
  _QWORD v97[3];
  std::string v98;
  std::string v99;
  std::string v100;

  v8 = *(__int128 **)(a1 + 112);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v98.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v9;
  }
  v10 = *(_QWORD *)(a1 + 56);
  if (v10)
    v11 = (__int128 **)(v10 + 8);
  else
    v11 = 0;
  v12 = *(int *)(a1 + 48);
  if ((_DWORD)v12)
  {
    v13 = a2[1];
    v14 = 8 * v12;
    do
    {
      v15 = *v11;
      if (v13 >= a2[2])
      {
        v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v15);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v15);
        v13 += 24;
      }
      a2[1] = v13;
      ++v11;
      v14 -= 8;
    }
    while (v14);
  }
  memset(v97, 0, sizeof(v97));
  v16 = *(_QWORD *)(a1 + 32);
  if (v16)
    v17 = (__int128 **)(v16 + 8);
  else
    v17 = 0;
  v18 = *(int *)(a1 + 24);
  if ((_DWORD)v18)
  {
    v19 = a3[1];
    v20 = 8 * v18;
    do
    {
      v21 = *v17;
      if (v19 >= a3[2])
      {
        v19 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v21);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v21);
        v19 += 24;
      }
      a3[1] = v19;
      ++v17;
      v20 -= 8;
    }
    while (v20);
  }
  else
  {
    v19 = a3[1];
  }
  v22 = *a3;
  v23 = v19 - *a3;
  v24 = -1431655765 * (v23 >> 3);
  v26 = (unsigned __int8 *)*a2;
  v25 = (unsigned __int8 *)a2[1];
  v27 = &v25[-*a2];
  v28 = -1431655765 * ((unint64_t)v27 >> 3);
  v29 = *(_DWORD *)(a1 + 140);
  if (v29 <= 869)
  {
    if (v29 <= 499)
    {
      if (v29 <= 244)
      {
        if (v29 <= 164)
        {
          if ((v29 - 100) <= 0x3C)
          {
            if (((1 << (v29 - 100)) & 0x1004010040100000) != 0)
              goto LABEL_183;
            if (v29 == 100)
              goto LABEL_90;
          }
          if (!v29)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::string::basic_string[abi:ne180100]<0>(&v100, "Validate number of inputs and outputs: Unknown layer type");
            std::runtime_error::runtime_error(exception, &v100);
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          goto LABEL_224;
        }
        v34 = (v29 - 165);
        if (v34 <= 0x37)
        {
          if (((1 << (v29 + 91)) & 0x80600800008421) != 0)
            goto LABEL_183;
          if (v34 == 25)
            goto LABEL_90;
          if (v34 == 47)
            goto LABEL_162;
        }
        if ((v29 - 230) < 2)
        {
          v35 = v24 < 1;
          goto LABEL_220;
        }
        if (v29 != 240)
          goto LABEL_224;
        goto LABEL_219;
      }
      if (v29 > 299)
      {
        if (v29 > 399)
        {
          if (v29 > 419)
          {
            if (v29 != 420)
            {
              if (v29 != 430 || (v24 - 6) < 0xFFFFFFFB || v28 < 1 || v28 > 5)
                goto LABEL_224;
              goto LABEL_189;
            }
            if ((v24 - 4) >= 0xFFFFFFFD && v28 >= 1 && v28 <= 3)
              goto LABEL_189;
          }
          else if (v29 == 400 || v29 == 410)
          {
            v49 = (v24 - 3) < 0xFFFFFFFE || v28 < 1;
            if (!v49 && v28 <= 2)
              goto LABEL_189;
          }
          goto LABEL_224;
        }
        v36 = (v29 - 300);
        if (v36 > 0x32)
          goto LABEL_224;
        if (((1 << v36) & 0x4210000000403) != 0)
          goto LABEL_183;
        if (v36 != 20)
        {
          if (v36 != 30)
            goto LABEL_224;
          goto LABEL_127;
        }
        goto LABEL_219;
      }
      if (v29 <= 269)
      {
        if ((v29 - 260) >= 2)
        {
          if (v29 != 245 && v29 != 250)
            goto LABEL_224;
          goto LABEL_183;
        }
        goto LABEL_219;
      }
      if (v29 == 270)
        goto LABEL_162;
      if (v29 != 280)
      {
        if (v29 != 290)
          goto LABEL_224;
        goto LABEL_149;
      }
    }
    else
    {
      if (v29 <= 769)
      {
        if (v29 > 699)
        {
          v43 = v29 - 700;
          if (v43 > 0x3C || ((1 << v43) & 0x1084010840108401) == 0)
            goto LABEL_224;
          goto LABEL_183;
        }
        if (v29 <= 619)
        {
          if (v29 <= 604)
          {
            if (v29 == 500)
            {
              if (v24 < 1 || v28 <= 0)
                goto LABEL_224;
              goto LABEL_189;
            }
            if (v29 != 600)
              goto LABEL_224;
            goto LABEL_183;
          }
          if (v29 == 605)
          {
            if (v24 != 1)
              goto LABEL_224;
          }
          else if (v29 != 615 || v24 > 1)
          {
            goto LABEL_224;
          }
          if (!v28)
            goto LABEL_189;
        }
        else
        {
          v33 = (v29 - 635);
          if (v33 <= 0x32)
          {
            if (((1 << (v29 - 123)) & 0x4200842000000) != 0)
              goto LABEL_183;
            if (v29 == 635)
            {
LABEL_149:
              if (v28 != 1)
                goto LABEL_224;
              goto LABEL_189;
            }
            if (v33 == 5)
            {
              if ((v24 - 4) < 0xFFFFFFFD)
                goto LABEL_224;
              goto LABEL_149;
            }
          }
          if ((v29 == 620 || v29 == 625) && !(v24 | v28))
            goto LABEL_189;
        }
        goto LABEL_224;
      }
      v40 = v29 - 2;
      if ((v29 - 770) > 0x3E)
        goto LABEL_131;
      if (((1 << v40) & 0x5284200000000000) != 0)
        goto LABEL_90;
      if (((1 << v40) & 0x2100421) == 0)
      {
LABEL_131:
        v48 = v29 - 840;
        if (v48 > 0x19)
          goto LABEL_224;
        if (((1 << v48) & 0x2008021) != 0)
          goto LABEL_162;
        if (v48 != 10)
          goto LABEL_224;
      }
    }
LABEL_183:
    v44 = v24 == 1;
LABEL_184:
    if (v44 && v28 == 1)
      goto LABEL_189;
    goto LABEL_224;
  }
  if (v29 <= 1109)
  {
    if (v29 > 964)
    {
      if (v29 <= 999)
      {
        if (v29 > 979)
        {
          if (v29 != 980)
          {
            if (v29 != 985 && v29 != 995)
              goto LABEL_224;
            goto LABEL_183;
          }
          goto LABEL_219;
        }
        if (v29 == 965)
          goto LABEL_162;
        if (v29 != 975)
          goto LABEL_224;
LABEL_127:
        if (v24 != 1 || v28 < 1)
          goto LABEL_224;
        goto LABEL_189;
      }
      v46 = (v29 - 1005);
      if (v46 > 0x3C)
      {
LABEL_114:
        v47 = (v29 - 1070);
        if (v47 <= 0x23)
        {
          if (((1 << (v29 - 46)) & 0x800100400) != 0)
            goto LABEL_183;
          if (((1 << (v29 - 46)) & 0x8001) != 0)
            goto LABEL_149;
          if (v47 == 30)
            goto LABEL_162;
        }
        if (v29 != 1000)
          goto LABEL_224;
        v41 = __CFADD__(v24 - 8, 6);
LABEL_91:
        if (v41 && v28 == 1)
          goto LABEL_189;
        goto LABEL_224;
      }
      if (((1 << (v29 + 19)) & 0x1000000800108001) != 0)
        goto LABEL_183;
      if (v46 != 10)
      {
        if (v46 == 40)
          goto LABEL_90;
        goto LABEL_114;
      }
      if ((v24 - 3) >= 0xFFFFFFFE && v28 == 2)
        goto LABEL_189;
LABEL_224:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v100);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v100.__r_.__value_.__r.__words[2], (uint64_t)"Invalid number of inputs (", 26);
      v74 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)") and outputs (", 15);
      v75 = (_QWORD *)std::ostream::operator<<();
      v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)") to layer: '", 13);
      v77 = *(_QWORD *)(a1 + 112);
      v78 = *(char *)(v77 + 23);
      if (v78 >= 0)
        v79 = *(_QWORD *)(a1 + 112);
      else
        v79 = *(_QWORD *)v77;
      if (v78 >= 0)
        v80 = *(unsigned __int8 *)(v77 + 23);
      else
        v80 = *(_QWORD *)(v77 + 8);
      v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, v79, v80);
      v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"'. ", 3);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v82);
      v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v83, &v99);
      __cxa_throw(v83, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (v29 > 939)
    {
      switch(v29)
      {
        case 945:
        case 954:
          goto LABEL_105;
        case 946:
        case 947:
        case 948:
        case 949:
        case 951:
        case 953:
          goto LABEL_224;
        case 950:
          goto LABEL_183;
        case 952:
          goto LABEL_162;
        default:
          if (v29 == 940)
            goto LABEL_162;
          if (v29 == 960)
            goto LABEL_183;
          goto LABEL_224;
      }
    }
    v39 = (v29 - 870);
    if (v39 > 0x3C)
      goto LABEL_86;
    if (((1 << (v29 - 102)) & 0x1000000842108421) != 0)
      goto LABEL_162;
    if (v39 == 50)
      goto LABEL_90;
    if (v39 != 55)
    {
LABEL_86:
      if (v29 != 935)
        goto LABEL_224;
LABEL_105:
      v44 = v24 == 3;
      goto LABEL_184;
    }
LABEL_219:
    v35 = v24 < 2;
LABEL_220:
    if (!v35 && v28 == 1)
      goto LABEL_189;
    goto LABEL_224;
  }
  if (v29 <= 1314)
  {
    if ((v29 - 1250) <= 0x3F && ((1 << (v29 + 30)) & 0x8000210842108421) != 0)
      goto LABEL_183;
    v37 = (v29 - 1110);
    if (v37 <= 0x3C)
    {
      if (((1 << (v29 - 86)) & 0x1000010040108400) != 0)
        goto LABEL_183;
      if (((1 << (v29 - 86)) & 0x802000001) != 0)
        goto LABEL_162;
      if (v37 == 45)
        goto LABEL_90;
    }
    v38 = v29 - 1175;
    if (v38 > 0x37)
      goto LABEL_224;
    if (((1 << v38) & 0x80200802008020) != 0)
      goto LABEL_183;
    if (((1 << v38) & 0x10000100001) == 0)
      goto LABEL_224;
    goto LABEL_149;
  }
  v30 = v29 + 86;
  if ((v29 - 1450) > 0x15)
    goto LABEL_31;
  if (((1 << v30) & 0x218C00) != 0)
    goto LABEL_183;
  if (((1 << v30) & 0x21) != 0)
  {
LABEL_90:
    v41 = __CFADD__(v24 - 3, 2);
    goto LABEL_91;
  }
  if (v29 == 1470)
  {
LABEL_162:
    v44 = v24 == 2;
    goto LABEL_184;
  }
LABEL_31:
  v31 = (v29 - 1315);
  if (v31 <= 0x23)
  {
    if (((1 << (v29 - 35)) & 0x800000421) == 0)
    {
      if (v31 != 15)
        goto LABEL_34;
      goto LABEL_105;
    }
    goto LABEL_183;
  }
LABEL_34:
  if (v29 != 1400)
    goto LABEL_224;
  if ((v24 - 6) < 0xFFFFFFFC || v28 != 4)
    goto LABEL_224;
LABEL_189:
  v55 = v25 == v26 && v19 == v22;
  if (!v55 && (unsigned __int8 *)v23 == v27)
  {
    if (v19 == v22)
    {
LABEL_198:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v100);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v100.__r_.__value_.__r.__words[2], (uint64_t)"Layer name: '", 13);
      v58 = *(_QWORD *)(a1 + 112);
      v59 = *(char *)(v58 + 23);
      if (v59 >= 0)
        v60 = *(_QWORD *)(a1 + 112);
      else
        v60 = *(_QWORD *)v58;
      if (v59 >= 0)
        v61 = *(unsigned __int8 *)(v58 + 23);
      else
        v61 = *(_QWORD *)(v58 + 8);
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, v60, v61);
      v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"'. Input and output data blob names cannot be the same.", 55);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v63);
      v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v64, &v99);
      __cxa_throw(v64, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v56 = (unsigned __int8 *)v22;
    while (std::equal_to<std::string>::operator()[abi:ne180100](v56, v26))
    {
      v56 += 24;
      v26 += 24;
      if (v56 == (unsigned __int8 *)v19)
        goto LABEL_198;
    }
  }
  if (v19 != v22)
  {
    v67 = *(_QWORD **)(a4 + 8);
    v65 = (_QWORD *)(a4 + 8);
    v66 = v67;
    v68 = (_QWORD *)v22;
    while (1)
    {
      if (!v66)
        goto LABEL_239;
      v69 = v65;
      v70 = v66;
      do
      {
        v71 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v70 + 4, v68);
        v72 = v70 + 1;
        if (!v71)
        {
          v72 = v70;
          v69 = v70;
        }
        v70 = (_QWORD *)*v72;
      }
      while (*v72);
      if (v69 == v65 || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v68, v69 + 4))
        break;
      v68 += 3;
      if (v68 == (_QWORD *)v19)
        goto LABEL_215;
    }
    v22 = (uint64_t)v68;
LABEL_239:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v100);
    v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v100.__r_.__value_.__r.__words[2], (uint64_t)"Input '", 7);
    v85 = *(char *)(v22 + 23);
    if (v85 >= 0)
      v86 = v22;
    else
      v86 = *(_QWORD *)v22;
    if (v85 >= 0)
      v87 = *(unsigned __int8 *)(v22 + 23);
    else
      v87 = *(_QWORD *)(v22 + 8);
    v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, v86, v87);
    v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"' of layer '", 12);
    v90 = *(_QWORD *)(a1 + 112);
    v91 = *(char *)(v90 + 23);
    if (v91 >= 0)
      v92 = *(_QWORD *)(a1 + 112);
    else
      v92 = *(_QWORD *)v90;
    if (v91 >= 0)
      v93 = *(unsigned __int8 *)(v90 + 23);
    else
      v93 = *(_QWORD *)(v90 + 8);
    v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, v92, v93);
    v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"' not found in any of the outputs of the preceeding layers.", 59);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v95);
    v96 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v96, &v99);
    __cxa_throw(v96, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_215:
  v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
}

void sub_19C956090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  int v32;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((v32 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a26);
      __p = &a10;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (a18 < 0)
        operator delete(a13);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v31);
  goto LABEL_6;
}

unint64_t EspressoConverter::getWeightParamSize(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
    v3 = *(_QWORD *)(v1 + 8);
  else
    v3 = *(unsigned __int8 *)(v1 + 23);
  v4 = *(_QWORD *)(a1 + 48);
  if (*(char *)(v4 + 23) < 0)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = *(_DWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 56);
  if (*(char *)(v7 + 23) < 0)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = *(unsigned __int8 *)(v7 + 23);
  if (v6 <= 0)
    v9 = 1;
  else
    v9 = 2;
  if (v3)
    v10 = v9;
  else
    v10 = v6 > 0;
  if (v5)
    ++v10;
  if (v8)
    ++v10;
  if (v10 > 1)
    return 0;
  if (v6 <= 0 && v10)
  {
    if ((v2 & 0x80) != 0)
    {
      v2 = *(_QWORD *)(v1 + 8);
      if (!v2)
        return 0;
    }
    else if (!*(_BYTE *)(v1 + 23))
    {
      return 0;
    }
    return v2 >> 1;
  }
  else if (v10)
  {
    return v6;
  }
  else
  {
    return 0;
  }
}

uint64_t EspressoConverter::getWeightParamSizeInBytes(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _BOOL4 v15;
  _BOOL4 v16;
  uint64_t v17;
  BOOL v18;

  v2 = a1[5];
  result = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
    v4 = *(_QWORD *)(v2 + 8);
  else
    v4 = *(unsigned __int8 *)(v2 + 23);
  v5 = a1[6];
  v6 = *(unsigned __int8 *)(v5 + 23);
  if (*(char *)(v5 + 23) < 0)
    v7 = *(_QWORD *)(v5 + 8);
  else
    v7 = *(unsigned __int8 *)(v5 + 23);
  v8 = *((_DWORD *)a1 + 4);
  v9 = a1[7];
  v10 = *(unsigned __int8 *)(v9 + 23);
  if (*(char *)(v9 + 23) < 0)
    v11 = *(_QWORD *)(v9 + 8);
  else
    v11 = *(unsigned __int8 *)(v9 + 23);
  if (v8 <= 0)
    v12 = 1;
  else
    v12 = 2;
  if (v4)
    v13 = v12;
  else
    v13 = v8 > 0;
  if (v7)
    ++v13;
  if (v11)
    ++v13;
  if (v13 > 1)
    return 0;
  if (v8 <= 0 && v13)
  {
    if ((result & 0x80) != 0)
    {
      result = *(_QWORD *)(v2 + 8);
      if (!result)
        goto LABEL_32;
    }
    else if (!*(_BYTE *)(v2 + 23))
    {
LABEL_32:
      if ((v6 & 0x80) != 0)
      {
        v17 = a1[8];
        v15 = v17 != 0;
        v18 = a1 == &CoreML::Specification::_WeightParams_default_instance_;
        v16 = a1 != &CoreML::Specification::_WeightParams_default_instance_;
        if (v18)
          goto LABEL_41;
        v6 = *(_QWORD *)(v5 + 8);
        if (!v6 || !v17)
          goto LABEL_41;
      }
      else
      {
        v14 = a1[8];
        v15 = v14 != 0;
        v18 = a1 == &CoreML::Specification::_WeightParams_default_instance_;
        v16 = a1 != &CoreML::Specification::_WeightParams_default_instance_;
        if (v18 || !(_DWORD)v6 || !v14)
        {
LABEL_41:
          if ((v10 & 0x80) != 0)
          {
            v10 = *(_QWORD *)(v9 + 8);
            v18 = v10 == 0;
          }
          else
          {
            v18 = (_DWORD)v10 == 0;
          }
          if (v18)
            v16 = 0;
          if (v16 && v15)
            return v10;
          return 0;
        }
      }
      return v6;
    }
  }
  else if (v13)
  {
    return (4 * v8);
  }
  else
  {
    return 0;
  }
  return result;
}

double EspressoConverter::readFloatFromWeightParams(EspressoConverter *this, const CoreML::Specification::WeightParams *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  const void *v17;
  double result;
  std::string::size_type v19;
  void *exception;
  std::runtime_error *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::runtime_error *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string v31;
  std::string v32;
  std::string v33;

  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = *(unsigned __int8 *)(v6 + 23);
  v8 = *((_QWORD *)a2 + 6);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
    v10 = *(_QWORD *)(v8 + 8);
  else
    v10 = *(unsigned __int8 *)(v8 + 23);
  v11 = *((_DWORD *)a2 + 4);
  v12 = *((_QWORD *)a2 + 7);
  if (*(char *)(v12 + 23) < 0)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = *(unsigned __int8 *)(v12 + 23);
  if (v11 <= 0)
    v14 = 1;
  else
    v14 = 2;
  if (v7)
    v15 = v14;
  else
    v15 = v11 > 0;
  if (v10)
    ++v15;
  if (v13)
    ++v15;
  if (v15 > 1)
  {
LABEL_41:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
LABEL_42:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Unrecognizable weight parameter type.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v11 <= 0 && v15)
  {
    if ((*(_BYTE *)(v6 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v6 + 8))
        goto LABEL_25;
    }
    else if (*(_BYTE *)(v6 + 23))
    {
LABEL_25:
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      EspressoConverter::readHalfPrecisionWeightsFromByteStream((uint64_t)&v33, (void **)v6);
LABEL_40:
      v19 = v33.__r_.__value_.__r.__words[2];
      result = *(double *)&v33.__r_.__value_.__l.__data_;
      *(_OWORD *)this = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
      *((_QWORD *)this + 2) = v19;
      return result;
    }
    if ((v9 & 0x80) != 0)
      v9 = *(_QWORD *)(v8 + 8);
    if (a2 != (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_
      && v9
      && *((_QWORD *)a2 + 8))
    {
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      if (!CoreML::hasSufficientBytesInQuantizedWeightParam((uint64_t *)a2, a3))
      {
        v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, a3);
        v27 = std::string::insert(&v31, 0, "Unable to read ");
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        v29 = std::string::append(&v32, "quantized weight elements from byte stream.");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v26, &v33);
        __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      CoreML::dequantizeWeightParamSpec((CoreML *)&v33, a2, a3);
      goto LABEL_40;
    }
    goto LABEL_41;
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (!v15)
    goto LABEL_42;
  if ((int)EspressoConverter::getWeightParamSize((uint64_t)a2) != a3)
  {
    v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v31, a3);
    v22 = std::string::insert(&v31, 0, "Unable to read ");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v32, "weight elements.");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v21, &v33);
    __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::vector<float>::resize((char **)this, a3);
  v16 = *((_QWORD *)a2 + 3);
  if (v16)
    v17 = (const void *)(v16 + 8);
  else
    v17 = 0;
  memcpy(*(void **)this, v17, 4 * a3);
  return result;
}

void sub_19C956670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void EspressoConverter::splitElementwiseLayer(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void **v5;
  __int128 *v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  std::string *v12;
  const std::string::value_type *v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  __int128 v18;
  std::string v20;
  std::string v21;
  std::string __p;
  std::string v23;
  std::string __str;
  std::string v25;
  std::string v26;
  std::string v27;

  v5 = (void **)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = (__int128 *)*a2;
  if (*(char *)(*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    v6 = (__int128 *)*a2;
  }
  else
  {
    v7 = *v6;
    v27.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v7;
  }
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - (_QWORD)v6) >> 3) - 1;
  if (v8 >= 2)
  {
    v9 = 1;
    v10 = 24;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string const&,0>(&v25, (__int128 *)&v27, (__int128 *)((char *)v6 + v10));
      if (*(char *)(a3 + 23) >= 0)
        v11 = *(unsigned __int8 *)(a3 + 23);
      else
        v11 = *(_QWORD *)(a3 + 8);
      std::string::basic_string[abi:ne180100]((uint64_t)&v20, v11 + 5);
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v20;
      else
        v12 = (std::string *)v20.__r_.__value_.__r.__words[0];
      if (v11)
      {
        if (*(char *)(a3 + 23) >= 0)
          v13 = (const std::string::value_type *)a3;
        else
          v13 = *(const std::string::value_type **)a3;
        memmove(v12, v13, v11);
      }
      strcpy((char *)v12 + v11, "_tmp_");
      std::to_string(&v23, v9);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v23;
      else
        v14 = (std::string *)v23.__r_.__value_.__r.__words[0];
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      else
        size = v23.__r_.__value_.__l.__size_;
      v5 = (void **)a1;
      v16 = std::string::append(&v20, (const std::string::value_type *)v14, size);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      else
        v20 = v25;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v21, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
      else
        v21 = v26;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        __p = __str;
      std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::push_back[abi:ne180100]((void **)a1, (__int128 *)&v20);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      std::string::operator=(&v27, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      ++v9;
      v6 = (__int128 *)*a2;
      v8 = -1 - 0x5555555555555555 * ((uint64_t)(a2[1] - *a2) >> 3);
      v10 += 24;
    }
    while (v9 < v8);
  }
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string const&,0>(&v25, (__int128 *)&v27, (__int128 *)((char *)v6 + 24 * v8));
  v20 = v25;
  memset(&v25, 0, sizeof(v25));
  v18 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  memset(&v26, 0, sizeof(v26));
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v18;
  v21.__r_.__value_.__r.__words[2] = v26.__r_.__value_.__r.__words[2];
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::push_back[abi:ne180100](v5, (__int128 *)&v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_19C956AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36)
{
  uint64_t v36;

  std::pair<std::string,std::string>::~pair((uint64_t)&a11);
  std::pair<std::string,std::string>::~pair((uint64_t)&a36);
  if (*(char *)(v36 - 89) < 0)
    operator delete(*(void **)(v36 - 112));
  a11 = a10;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string const&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_19C956C18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::push_back[abi:ne180100](void **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    v10 = 0x8E38E38E38E38E39 * ((v4 - (_BYTE *)*a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0x38E38E38E38E38ELL)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v12 = 0x8E38E38E38E38E39 * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x1C71C71C71C71C7)
      v13 = 0x38E38E38E38E38ELL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 > 0x38E38E38E38E38ELL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(72 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[72 * v10];
    *((_QWORD *)v15 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v15 = *a2;
    v16 = &v14[72 * v13];
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v17 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_OWORD *)(v15 + 24) = v17;
    *((_QWORD *)v15 + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)v15 + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)v15 + 3) = a2[3];
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    v9 = v15 + 72;
    v18 = (char *)*a1;
    v19 = (char *)a1[1];
    if (v19 == *a1)
    {
      *a1 = v15;
      a1[1] = v9;
      a1[2] = v16;
    }
    else
    {
      do
      {
        v20 = *(_OWORD *)(v19 - 72);
        *((_QWORD *)v15 - 7) = *((_QWORD *)v19 - 7);
        *(_OWORD *)(v15 - 72) = v20;
        *((_QWORD *)v19 - 8) = 0;
        *((_QWORD *)v19 - 7) = 0;
        *((_QWORD *)v19 - 9) = 0;
        v21 = *((_OWORD *)v19 - 3);
        *((_QWORD *)v15 - 4) = *((_QWORD *)v19 - 4);
        *((_OWORD *)v15 - 3) = v21;
        *((_QWORD *)v19 - 5) = 0;
        *((_QWORD *)v19 - 4) = 0;
        *((_QWORD *)v19 - 6) = 0;
        v22 = *(_OWORD *)(v19 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v19 - 1);
        *(_OWORD *)(v15 - 24) = v22;
        v15 -= 72;
        *((_QWORD *)v19 - 2) = 0;
        *((_QWORD *)v19 - 1) = 0;
        *((_QWORD *)v19 - 3) = 0;
        v19 -= 72;
      }
      while (v19 != v18);
      v19 = (char *)*a1;
      v23 = (uint64_t)a1[1];
      *a1 = v15;
      a1[1] = v9;
      a1[2] = v16;
      while ((char *)v23 != v19)
      {
        v23 -= 72;
        std::allocator<std::pair<std::pair<std::string,std::string>,std::string>>::destroy[abi:ne180100](v23);
      }
    }
    if (v19)
      operator delete(v19);
  }
  else
  {
    v6 = *a2;
    *((_QWORD *)v4 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v7 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v4 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v8 = a2[3];
    *((_QWORD *)v4 + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)v4 + 3) = v8;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    v9 = v4 + 72;
  }
  a1[1] = v9;
}

uint64_t std::pair<std::pair<std::string,std::string>,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t EspressoConverter::validateCommonNeuralNetworkLayerUtils(EspressoConverter *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  std::runtime_error *v12;
  _QWORD *v13;
  std::runtime_error *exception;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  std::runtime_error *v28;
  std::string v29;
  _QWORD v30[2];
  _QWORD v31[11];
  char v32;
  uint64_t v33;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v30);
  v3 = *((_QWORD *)this + 14);
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v3 + 23))
      goto LABEL_3;
LABEL_16:
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Invalid network: Layer name missing.", 36);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v13);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v29);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!*(_QWORD *)(v3 + 8))
    goto LABEL_16;
LABEL_3:
  if (!*((_DWORD *)this + 6))
  {
    v4 = *((_DWORD *)this + 35);
    if (v4 > 1174)
    {
      v15 = v4 - 1175;
      v16 = v15 > 0x28;
      v17 = (1 << v15) & 0x10000100001;
      if (v16 || v17 == 0)
      {
LABEL_8:
        v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Invalid network: Expected at least one input for layer: '", 57);
        v6 = *((_QWORD *)this + 14);
        v7 = *(char *)(v6 + 23);
        if (v7 >= 0)
          v8 = *((_QWORD *)this + 14);
        else
          v8 = *(_QWORD *)v6;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(v6 + 23);
        else
          v9 = *(_QWORD *)(v6 + 8);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v8, v9);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"'.", 2);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
        v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v12, &v29);
        __cxa_throw(v12, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    else if (v4 != 290 && v4 != 1070 && v4 != 1085)
    {
      goto LABEL_8;
    }
  }
  if (!*((_DWORD *)this + 12))
  {
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Invalid network: Expected at least one output for layer: '", 58);
    v22 = *((_QWORD *)this + 14);
    v23 = *(char *)(v22 + 23);
    if (v23 >= 0)
      v24 = *((_QWORD *)this + 14);
    else
      v24 = *(_QWORD *)v22;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(v22 + 23);
    else
      v25 = *(_QWORD *)(v22 + 8);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v24, v25);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"'.", 2);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v27);
    v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v28, &v29);
    __cxa_throw(v28, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v30[0] = *MEMORY[0x1E0DE4F50];
  v19 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v31[0] = v19;
  v31[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v32 < 0)
    operator delete((void *)v31[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AD61C4](&v33);
}

void sub_19C957134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t EspressoConverter::validateEqualInputShapes(uint64_t result, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v10;
  int v11;
  BOOL v12;
  BOOL v13;
  int v14;
  BOOL v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  std::runtime_error *exception;
  std::string v27;
  _BYTE v28[16];
  _QWORD v29[33];

  if (a2 != a3)
  {
    v4 = a2[3];
    v3 = a2[4];
    v6 = a2[1];
    v5 = a2[2];
    v7 = *a2;
    do
    {
      v8 = a2[3];
      v10 = v8 == v4 || v8 == -1 || v4 == -1;
      if (!v10
        || ((v11 = a2[4], v11 != v3) ? (v12 = v11 == -1) : (v12 = 1),
            !v12 ? (v13 = v3 == -1) : (v13 = 1),
            !v13
         || ((v14 = a2[2], v14 != v5) ? (v15 = v14 == -1) : (v15 = 1),
             !v15 ? (v16 = v5 == -1) : (v16 = 1),
             !v16 || (v17 = a2[1], v17 != v6) && v17 != -1 && v6 != -1 || *a2 != v7 && *a2 != -1 && v7 != -1)))
      {
        v18 = result;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Input shapes must be equal for layer: '", 39);
        v20 = *(_QWORD *)(v18 + 112);
        v21 = *(char *)(v20 + 23);
        if (v21 >= 0)
          v22 = *(_QWORD *)(v18 + 112);
        else
          v22 = *(_QWORD *)v20;
        if (v21 >= 0)
          v23 = *(unsigned __int8 *)(v20 + 23);
        else
          v23 = *(_QWORD *)(v20 + 8);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v22, v23);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"'.", 2);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v25);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v27);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      a2 += 16;
    }
    while (a2 != a3);
  }
  return result;
}

void sub_19C9572EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

BOOL LayerTranslator::addGRU(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::GRULayerParams *v7;
  const CoreML::Specification::ActivationParams *v8;
  unsigned int v13;
  unsigned int v14;
  int v15;
  const CoreML::Specification::ActivationParams *v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *p_str;
  std::string *v20;
  uint64_t **v21;
  char *v22;
  uint64_t **v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  std::string::size_type v28;
  void *p_p;
  std::string *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  _BOOL8 v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t **v115;
  const CoreML::Specification::GRULayerParams *v116;
  int v117;
  std::string *v118;
  std::string *i;
  uint64_t v120;
  char *v121;
  char *j;
  char *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  _QWORD *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  std::runtime_error *v138;
  _QWORD *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  std::runtime_error *v146;
  std::runtime_error *exception;
  std::string *v148;
  __int128 v149;
  std::string *v150;
  __int128 v151;
  std::string *v152;
  std::string::size_type size;
  std::string *v154;
  __int128 v155;
  std::runtime_error *v156;
  std::string *v157;
  __int128 v158;
  std::string *v159;
  __int128 v160;
  std::string *v161;
  std::string::size_type v162;
  std::string *v163;
  __int128 v164;
  void *v165;
  void *v166;
  void *v167;
  uint64_t v168[2];
  uint64_t v169[2];
  uint64_t v170[2];
  uint64_t v171[2];
  uint64_t v172[2];
  uint64_t v173[2];
  uint64_t v174[2];
  uint64_t v175[2];
  void *v176;
  std::__shared_weak_count *v177;
  std::string v178;
  std::string v179;
  std::string v180;
  std::string v181;
  void *__p;
  std::__shared_weak_count *v183;
  char v184;
  void *v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  unint64_t v200;
  int v201;
  __int128 v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  __int16 v210;
  _BYTE v211[24];
  int v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t *v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  unsigned __int8 v225;
  unsigned __int8 v226;
  char v227;
  std::string *v228;
  std::string *v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  std::string v234;
  std::string *v235;
  std::string v236;
  std::string __str;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  _BYTE v241[32];
  uint64_t v242;
  void *v243[3];
  std::string v244;
  int v245;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v234, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v234.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v5;
  }
  v232 = 0;
  v231 = 0;
  v233 = 0;
  v229 = 0;
  v228 = 0;
  v230 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v231, (uint64_t *)&v228, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 410)
  {
    v7 = (const CoreML::Specification::GRULayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::GRULayerParams *)&CoreML::Specification::_GRULayerParams_default_instance_;
  }
  CoreML::Specification::GRULayerParams::GRULayerParams((CoreML::Specification::GRULayerParams *)v211, v7);
  __asm { FMOV            V8.2S, #1.0 }
  v191 = _D8;
  v193 = _D8;
  v190 = 2;
  v192 = 0;
  v195 = _D8;
  v197 = _D8;
  v194 = 0;
  v196 = 2;
  v199 = _D8;
  v200 = 512;
  v198 = 0;
  v201 = 1065353216;
  v202 = xmmword_19CAE7980;
  v204 = 0x100000000;
  v205 = 1065353216;
  v203 = 1112014848;
  v206 = 1065353216;
  v207 = 0;
  v210 = 0;
  v208 = 1;
  v188 = 2;
  v189 = _D8;
  v209 = v225;
  v13 = v224;
  if ((int)v224 < 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v236, v13);
    v148 = std::string::insert(&v236, 0, "output size = ");
    v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
    *(_QWORD *)&v241[16] = *((_QWORD *)&v148->__r_.__value_.__l + 2);
    *(_OWORD *)v241 = v149;
    v148->__r_.__value_.__l.__size_ = 0;
    v148->__r_.__value_.__r.__words[2] = 0;
    v148->__r_.__value_.__r.__words[0] = 0;
    v150 = std::string::append((std::string *)v241, " not allowed in layer ");
    v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
    v244.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v151;
    v150->__r_.__value_.__l.__size_ = 0;
    v150->__r_.__value_.__r.__words[2] = 0;
    v150->__r_.__value_.__r.__words[0] = 0;
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v152 = &v234;
    else
      v152 = (std::string *)v234.__r_.__value_.__r.__words[0];
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v234.__r_.__value_.__r.__words[2]);
    else
      size = v234.__r_.__value_.__l.__size_;
    v154 = std::string::append(&v244, (const std::string::value_type *)v152, size);
    v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v155;
    v154->__r_.__value_.__l.__size_ = 0;
    v154->__r_.__value_.__r.__words[2] = 0;
    v154->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__str);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v14 = v223;
  if ((int)v223 <= 0)
  {
    v156 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v236, v14);
    v157 = std::string::insert(&v236, 0, "input size = ");
    v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
    *(_QWORD *)&v241[16] = *((_QWORD *)&v157->__r_.__value_.__l + 2);
    *(_OWORD *)v241 = v158;
    v157->__r_.__value_.__l.__size_ = 0;
    v157->__r_.__value_.__r.__words[2] = 0;
    v157->__r_.__value_.__r.__words[0] = 0;
    v159 = std::string::append((std::string *)v241, " not allowed in layer ");
    v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
    v244.__r_.__value_.__r.__words[2] = v159->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v160;
    v159->__r_.__value_.__l.__size_ = 0;
    v159->__r_.__value_.__r.__words[2] = 0;
    v159->__r_.__value_.__r.__words[0] = 0;
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v161 = &v234;
    else
      v161 = (std::string *)v234.__r_.__value_.__r.__words[0];
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v162 = HIBYTE(v234.__r_.__value_.__r.__words[2]);
    else
      v162 = v234.__r_.__value_.__l.__size_;
    v163 = std::string::append(&v244, (const std::string::value_type *)v161, v162);
    v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v164;
    v163->__r_.__value_.__l.__size_ = 0;
    v163->__r_.__value_.__r.__words[2] = 0;
    v163->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v156, &__str);
    __cxa_throw(v156, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v200 = __PAIR64__(v223, v224);
  if (0xAAAAAAAAAAAAAAABLL * ((v232 - v231) >> 3) >= 3)
  {
    v165 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v165, "Recurrent layer: too many output blobs.");
    goto LABEL_311;
  }
  if (v232 - v231 != 48)
  {
    v165 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v165, "Recurrent layer: too few output blobs.");
LABEL_311:
    __cxa_throw(v165, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v229 - (char *)v228) >> 3) >= 3)
  {
    v166 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v166, "Recurrent layer: too many input blobs.");
    __cxa_throw(v166, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v15 = v226;
  if (!v226)
    DWORD2(v202) = 0;
  if (v212 != 2)
  {
    v167 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v167, "GRU layer: must provide 2 activations");
    __cxa_throw(v167, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v190 = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(*(_QWORD *)(v213 + 8) + 28), v8);
  v191 = _D8;
  HIDWORD(v188) = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(*(_QWORD *)(v213 + 16) + 28), v16);
  v189 = _D8;
  if (v227)
  {
    v17 = v228;
    if ((v228->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(v228->__r_.__value_.__r.__words[2]);
    else
      v18 = v228->__r_.__value_.__l.__size_;
    p_str = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v18 + 11);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v18)
    {
      if ((v17->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = v17;
      else
        v20 = (std::string *)v17->__r_.__value_.__r.__words[0];
      memmove(p_str, v20, v18);
    }
    strcpy((char *)p_str + v18, "_prereverse");
    memset(&v244, 0, sizeof(v244));
    v244.__r_.__value_.__l.__size_ = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v244, (__int128 *)&__str);
    v21 = (uint64_t **)*((_QWORD *)this + 1);
    v236.__r_.__value_.__r.__words[0] = (std::string::size_type)v228;
    v22 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, v228, (__int128 **)&v236);
    v23 = (uint64_t **)*((_QWORD *)this + 1);
    v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23, &__str, (__int128 **)&v236);
    v25 = *(_OWORD *)(v22 + 56);
    v26 = *(_OWORD *)(v22 + 72);
    *((_QWORD *)v24 + 11) = *((_QWORD *)v22 + 11);
    *(_OWORD *)(v24 + 72) = v26;
    *(_OWORD *)(v24 + 56) = v25;
    if (v24 != v22)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v24 + 96, *((char **)v22 + 12), *((_QWORD *)v22 + 13), (uint64_t)(*((_QWORD *)v22 + 13) - *((_QWORD *)v22 + 12)) >> 2);
    memset(v241, 0, 24);
    *(_QWORD *)&v241[8] = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v241, (__int128 *)v228);
    v27 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v236, "sequence_reverse");
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(v234.__r_.__value_.__r.__words[2]);
    else
      v28 = v234.__r_.__value_.__l.__size_;
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v28 + 11);
    if (v184 < 0)
      p_p = __p;
    if (v28)
    {
      if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v234;
      else
        v30 = (std::string *)v234.__r_.__value_.__r.__words[0];
      memmove(p_p, v30, v28);
    }
    strcpy((char *)p_p + v28, "_prereverse");
    memset(&v181, 0, sizeof(v181));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v181, *(__int128 **)v241, *(__int128 **)&v241[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v241[8] - *(_QWORD *)v241) >> 3));
    memset(&v180, 0, sizeof(v180));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v180, (__int128 *)v244.__r_.__value_.__l.__data_, (__int128 *)v244.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v244.__r_.__value_.__l.__size_ - v244.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add<Espresso::sequence_reverse_params>((uint64_t *)&v185, v27, (uint64_t)&v236, (uint64_t)&__p, (uint64_t)&v187, (__int128 *)v181.__r_.__value_.__l.__data_, (__int128 *)v181.__r_.__value_.__l.__size_, (__int128 **)&v180);
    v235 = &v180;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v235);
    v235 = &v181;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v235);
    if (v184 < 0)
      operator delete(__p);
    if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v236.__r_.__value_.__l.__data_);
    std::string::operator=(v228, &__str);
    v31 = (std::__shared_weak_count *)v186;
    if (v186)
    {
      v32 = (unint64_t *)(v186 + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v236.__r_.__value_.__r.__words[0] = (std::string::size_type)v241;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
    *(_QWORD *)v241 = &v244;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v241);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v34 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__str, "rnn_arch");
  memset(&v179, 0, sizeof(v179));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v179, (__int128 *)v228, (__int128 *)v229, 0xAAAAAAAAAAAAAAABLL * (((char *)v229 - (char *)v228) >> 3));
  memset(&v178, 0, sizeof(v178));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v178, (__int128 *)v231, (__int128 *)v232, 0xAAAAAAAAAAAAAAABLL * ((v232 - v231) >> 3));
  Espresso::sequential_builder::add<Espresso::rnn_arch_params>((uint64_t *)&__p, v34, (uint64_t)&__str, (uint64_t)&v234, (uint64_t)&v188, (__int128 *)v179.__r_.__value_.__l.__data_, (__int128 *)v179.__r_.__value_.__l.__size_, (__int128 **)&v178);
  v244.__r_.__value_.__r.__words[0] = (std::string::size_type)&v178;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v244);
  v244.__r_.__value_.__r.__words[0] = (std::string::size_type)&v179;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v244);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v35 = __p;
  v36 = v183;
  v185 = __p;
  v186 = (uint64_t)v183;
  if (v183)
  {
    p_shared_owners = (unint64_t *)&v183->__shared_owners_;
    do
      v38 = __ldxr(p_shared_owners);
    while (__stxr(v38 + 1, p_shared_owners));
    v177 = v36;
    if (v214)
      v39 = v214;
    else
      v39 = &CoreML::Specification::_WeightParams_default_instance_;
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
  }
  else
  {
    if (v214)
      v39 = v214;
    else
      v39 = &CoreML::Specification::_WeightParams_default_instance_;
    v177 = 0;
  }
  v176 = v35;
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v244, "W_z");
  EspressoConverter::setRecurrentWeightBlob((uint64_t)v39, (uint64_t *)&v176, v14, v13, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v244.__r_.__value_.__l.__data_);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v36)
  {
    v41 = (unint64_t *)&v36->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v215)
    v43 = v215;
  else
    v43 = &CoreML::Specification::_WeightParams_default_instance_;
  v44 = (std::__shared_weak_count *)v186;
  v175[0] = (uint64_t)v185;
  v175[1] = v186;
  if (v186)
  {
    v45 = (unint64_t *)(v186 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v244, "W_r");
  EspressoConverter::setRecurrentWeightBlob((uint64_t)v43, v175, v14, v13, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v244.__r_.__value_.__l.__data_);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v44)
  {
    v47 = (unint64_t *)&v44->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v216)
    v49 = v216;
  else
    v49 = &CoreML::Specification::_WeightParams_default_instance_;
  v50 = (std::__shared_weak_count *)v186;
  v174[0] = (uint64_t)v185;
  v174[1] = v186;
  if (v186)
  {
    v51 = (unint64_t *)(v186 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v244, "W_o");
  EspressoConverter::setRecurrentWeightBlob((uint64_t)v49, v174, v14, v13, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v244.__r_.__value_.__l.__data_);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v50)
  {
    v53 = (unint64_t *)&v50->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v217)
    v55 = v217;
  else
    v55 = &CoreML::Specification::_WeightParams_default_instance_;
  v56 = (std::__shared_weak_count *)v186;
  v173[0] = (uint64_t)v185;
  v173[1] = v186;
  if (v186)
  {
    v57 = (unint64_t *)(v186 + 8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v244, "R_z");
  EspressoConverter::setRecurrentWeightBlob((uint64_t)v55, v173, v13, v13, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v244.__r_.__value_.__l.__data_);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v56)
  {
    v59 = (unint64_t *)&v56->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v218)
    v61 = v218;
  else
    v61 = &CoreML::Specification::_WeightParams_default_instance_;
  v62 = (std::__shared_weak_count *)v186;
  v172[0] = (uint64_t)v185;
  v172[1] = v186;
  if (v186)
  {
    v63 = (unint64_t *)(v186 + 8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v244, "R_r");
  EspressoConverter::setRecurrentWeightBlob((uint64_t)v61, v172, v13, v13, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v244.__r_.__value_.__l.__data_);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v62)
  {
    v65 = (unint64_t *)&v62->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v219)
    v67 = v219;
  else
    v67 = &CoreML::Specification::_WeightParams_default_instance_;
  v68 = (std::__shared_weak_count *)v186;
  v171[0] = (uint64_t)v185;
  v171[1] = v186;
  if (v186)
  {
    v69 = (unint64_t *)(v186 + 8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v244, "R_o");
  EspressoConverter::setRecurrentWeightBlob((uint64_t)v67, v171, v13, v13, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v244.__r_.__value_.__l.__data_);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v68)
      goto LABEL_147;
  }
  else if (!v68)
  {
    goto LABEL_147;
  }
  v72 = (unint64_t *)&v68->__shared_owners_;
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v73 - 1, v72));
  if (!v73)
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
    if (!v15)
      goto LABEL_194;
    goto LABEL_148;
  }
LABEL_147:
  if (!v15)
    goto LABEL_194;
LABEL_148:
  if (v220)
    v74 = v220;
  else
    v74 = &CoreML::Specification::_WeightParams_default_instance_;
  v75 = (std::__shared_weak_count *)v186;
  v170[0] = (uint64_t)v185;
  v170[1] = v186;
  if (v186)
  {
    v76 = (unint64_t *)(v186 + 8);
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v244, "B_z");
  EspressoConverter::setRecurrentBiasBlob((uint64_t)v74, v170, v13, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&v244);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v75)
  {
    v78 = (unint64_t *)&v75->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (v221)
    v80 = v221;
  else
    v80 = &CoreML::Specification::_WeightParams_default_instance_;
  v81 = (std::__shared_weak_count *)v186;
  v169[0] = (uint64_t)v185;
  v169[1] = v186;
  if (v186)
  {
    v82 = (unint64_t *)(v186 + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v244, "B_r");
  EspressoConverter::setRecurrentBiasBlob((uint64_t)v80, v169, v13, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&v244);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v81)
  {
    v84 = (unint64_t *)&v81->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (v222)
    v86 = v222;
  else
    v86 = &CoreML::Specification::_WeightParams_default_instance_;
  v87 = (std::__shared_weak_count *)v186;
  v168[0] = (uint64_t)v185;
  v168[1] = v186;
  if (v186)
  {
    v88 = (unint64_t *)(v186 + 8);
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v244, "B_o");
  EspressoConverter::setRecurrentBiasBlob((uint64_t)v86, v168, v13, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&v244);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v87)
  {
    v90 = (unint64_t *)&v87->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
LABEL_194:
  if (v214)
    v92 = v214;
  else
    v92 = &CoreML::Specification::_WeightParams_default_instance_;
  v93 = v92[5];
  if (*(char *)(v93 + 23) < 0)
    v94 = *(_QWORD *)(v93 + 8);
  else
    v94 = *(unsigned __int8 *)(v93 + 23);
  v95 = v92[6];
  if (*(char *)(v95 + 23) < 0)
    v96 = *(_QWORD *)(v95 + 8);
  else
    v96 = *(unsigned __int8 *)(v95 + 23);
  v97 = *((_DWORD *)v92 + 4);
  v98 = v92[7];
  if (*(char *)(v98 + 23) < 0)
    v99 = *(_QWORD *)(v98 + 8);
  else
    v99 = *(unsigned __int8 *)(v98 + 23);
  if (v97 <= 0)
    v100 = 1;
  else
    v100 = 2;
  if (v94)
    v101 = v100;
  else
    v101 = v97 > 0;
  if (v96)
    ++v101;
  if (v99)
    ++v101;
  if (v97 > 0 || v101 != 1)
    goto LABEL_225;
  if ((*(_BYTE *)(v93 + 23) & 0x80) != 0)
  {
    if (*(_QWORD *)(v93 + 8))
      goto LABEL_223;
  }
  else if (*(_BYTE *)(v93 + 23))
  {
LABEL_223:
    v103 = 1;
    goto LABEL_252;
  }
LABEL_225:
  if (v217)
    v104 = v217;
  else
    v104 = &CoreML::Specification::_WeightParams_default_instance_;
  v105 = v104[5];
  v106 = *(unsigned __int8 *)(v105 + 23);
  if (*(char *)(v105 + 23) < 0)
    v107 = *(_QWORD *)(v105 + 8);
  else
    v107 = *(unsigned __int8 *)(v105 + 23);
  v108 = v104[6];
  if (*(char *)(v108 + 23) < 0)
    v109 = *(_QWORD *)(v108 + 8);
  else
    v109 = *(unsigned __int8 *)(v108 + 23);
  v110 = *((_DWORD *)v104 + 4);
  v111 = v104[7];
  if (*(char *)(v111 + 23) < 0)
    v112 = *(_QWORD *)(v111 + 8);
  else
    v112 = *(unsigned __int8 *)(v111 + 23);
  v103 = 0;
  if (v110 <= 0)
    v113 = 1;
  else
    v113 = 2;
  if (v107)
    v114 = v113;
  else
    v114 = v110 > 0;
  if (v109)
    ++v114;
  if (v112)
    ++v114;
  if (v110 <= 0 && v114 == 1)
  {
    if ((v106 & 0x80) != 0)
      v106 = *(_QWORD *)(v105 + 8);
    v103 = v106 != 0;
  }
LABEL_252:
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v231);
  }
  else
  {
    v115 = (uint64_t **)*((_QWORD *)this + 1);
    if (*((_DWORD *)a2 + 35) == 410)
    {
      v116 = (const CoreML::Specification::GRULayerParams *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v71);
      v116 = (const CoreML::Specification::GRULayerParams *)&CoreML::Specification::_GRULayerParams_default_instance_;
    }
    CoreML::Specification::GRULayerParams::GRULayerParams((CoreML::Specification::GRULayerParams *)&v244, v116);
    v117 = v245;
    v118 = v228;
    for (i = v229; v118 != i; ++v118)
    {
      v120 = std::map<std::string,std::string>::at((uint64_t)v115, v118);
      *(_OWORD *)v241 = *(_OWORD *)v120;
      *(_OWORD *)&v241[16] = *(_OWORD *)(v120 + 16);
      v242 = *(_QWORD *)(v120 + 32);
      memset(v243, 0, sizeof(v243));
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v243, *(const void **)(v120 + 40), *(_QWORD *)(v120 + 48), (uint64_t)(*(_QWORD *)(v120 + 48) - *(_QWORD *)(v120 + 40)) >> 2);
      if (*(_DWORD *)&v241[4] != -1 && *(_DWORD *)&v241[4] != 1)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
        v139 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str.__r_.__value_.__r.__words[2], (uint64_t)"GRU layer: '", 12);
        v140 = *((_QWORD *)a2 + 14);
        v141 = *(char *)(v140 + 23);
        if (v141 >= 0)
          v142 = *((_QWORD *)a2 + 14);
        else
          v142 = *(_QWORD *)v140;
        if (v141 >= 0)
          v143 = *(unsigned __int8 *)(v140 + 23);
        else
          v143 = *(_QWORD *)(v140 + 8);
        v144 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, v142, v143);
        v145 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)"': height dimension of the input blob must be 1.", 48);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v145);
        v146 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v146, &v236);
        __cxa_throw(v146, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (*(_DWORD *)v241 != -1 && *(_DWORD *)v241 != 1)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
        v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str.__r_.__value_.__r.__words[2], (uint64_t)"GRU layer: '", 12);
        v132 = *((_QWORD *)a2 + 14);
        v133 = *(char *)(v132 + 23);
        if (v133 >= 0)
          v134 = *((_QWORD *)a2 + 14);
        else
          v134 = *(_QWORD *)v132;
        if (v133 >= 0)
          v135 = *(unsigned __int8 *)(v132 + 23);
        else
          v135 = *(_QWORD *)(v132 + 8);
        v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, v134, v135);
        v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"': width dimension of the input blob must be 1.", 47);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v137);
        v138 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v138, &v236);
        __cxa_throw(v138, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (v243[0])
        operator delete(v243[0]);
    }
    v121 = v231;
    for (j = v232; v121 != j; v121 += 24)
    {
      __str.__r_.__value_.__r.__words[0] = 0x100000001;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 4) = -1;
      LODWORD(__str.__r_.__value_.__r.__words[1]) = v117;
      HIDWORD(__str.__r_.__value_.__r.__words[2]) = -1;
      v238 = 0u;
      v239 = 0u;
      v240 = 0;
      EspressoConverter::validateShape((int *)&__str, *((_QWORD *)a2 + 14), (uint64_t)v231);
      *(_QWORD *)v241 = v121;
      v123 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v115, v121, (__int128 **)v241);
      *((_QWORD *)v123 + 7) = 0x100000001;
      *((_DWORD *)v123 + 16) = v117;
      *(_QWORD *)(v123 + 68) = -1;
      *((_DWORD *)v123 + 19) = -1;
      *((_QWORD *)v123 + 10) = 0;
      *((_QWORD *)v123 + 11) = 0;
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v123 + 96, 0, 0, 0);
    }
    CoreML::Specification::GRULayerParams::~GRULayerParams((CoreML::Specification::GRULayerParams *)&v244);
  }
  v124 = (std::__shared_weak_count *)v186;
  if (v186)
  {
    v125 = (unint64_t *)(v186 + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v183;
  if (v183)
  {
    v128 = (unint64_t *)&v183->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  CoreML::Specification::GRULayerParams::~GRULayerParams((CoreML::Specification::GRULayerParams *)v211);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v228;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v231;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v234.__r_.__value_.__l.__data_);
  return v103;
}

void sub_19C9586F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  void *v66;
  int v67;
  uint64_t v68;

  if (SLOBYTE(STACK[0x2BF]) < 0)
  {
    operator delete((void *)STACK[0x2A8]);
    if ((v67 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x2C0]);
      if (STACK[0x408])
        operator delete((void *)STACK[0x408]);
      CoreML::Specification::GRULayerParams::~GRULayerParams((CoreML::Specification::GRULayerParams *)(v68 - 256));
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
      CoreML::Specification::GRULayerParams::~GRULayerParams((CoreML::Specification::GRULayerParams *)&a66);
      a46 = (uint64_t)&STACK[0x250];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
      a46 = (uint64_t)&STACK[0x268];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
      if (SLOBYTE(STACK[0x297]) < 0)
        operator delete((void *)STACK[0x280]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v67)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v66);
  goto LABEL_6;
}

void Espresso::sequential_builder::add<Espresso::sequence_reverse_params>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C958DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::rnn_arch_params>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C95901C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addBias(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  CoreML::Specification::WeightParams *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string::size_type size;
  _BYTE *v16;
  std::string *v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  __int128 *v22;
  _QWORD *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  std::string *v46;
  __int128 v47;
  __int128 *v48;
  _QWORD *v49;
  uint64_t **v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  char *v57;
  uint64_t *v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  __int128 v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _BOOL8 v75;
  int v76;
  int v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  void *v91;
  void *exception;
  void *v93;
  void *v94;
  std::string v95;
  std::string v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  _QWORD v99[3];
  char v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string v108;
  std::string v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  __int128 v112;
  std::string::size_type v113;
  __int128 *v114;
  __int128 *v115;
  uint64_t v116;
  __int128 *v117;
  std::string *v118;
  unint64_t v119;
  __int128 v120;
  unint64_t v121;
  void (**v122)(CoreML::Specification::BiasLayerParams *__hidden);
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t *v126;
  int v127;
  char *v128;
  std::string *v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  std::string v134;
  _OWORD v135[2];
  uint64_t v136;
  void *__p;
  void *v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  _QWORD v145[3];
  _BYTE v146[32];
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v134.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v5;
  }
  v131 = 0;
  v132 = 0;
  v133 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v131, (uint64_t *)&v128, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 250)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_BiasLayerParams_default_instance_;
  }
  v124 = 0;
  v125 = 0;
  v122 = &off_1E3D4EF48;
  v123 = 0;
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v124, v8);
    memcpy(v125 + 1, (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v124) = *((_DWORD *)v7 + 4);
  }
  v127 = 0;
  v9 = v7[1];
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v123, v9 & 0xFFFFFFFFFFFFFFFELL);
  v10 = 0;
  if (v7 != &CoreML::Specification::_BiasLayerParams_default_instance_ && v7[5])
  {
    v10 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v10, (const CoreML::Specification::WeightParams *)v7[5]);
  }
  v126 = (uint64_t *)v10;
  v120 = xmmword_19CB39920;
  v121 = 0xFFFFFFFF00000001;
  if ((_DWORD)v124 == 1)
  {
    v11 = v125;
    v12 = 1;
    v13 = 1;
  }
  else
  {
    if ((_DWORD)v124 != 3)
    {
      if ((_DWORD)v124)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](exception, "Bias Layer: shape must be of size 1 or 3");
      }
      else
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](exception, "Bias Layer: shape cannot be of size 0");
      }
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v11 = v125;
    v12 = v125[2];
    v13 = v125[3];
  }
  v14 = v11[1];
  *(_QWORD *)((char *)&v120 + 4) = __PAIR64__(v14, v12);
  LODWORD(v120) = v13;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v114 = 0;
  v115 = 0;
  v116 = 0;
  if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v134.__r_.__value_.__r.__words[2]);
  else
    size = v134.__r_.__value_.__l.__size_;
  v16 = v146;
  std::string::basic_string[abi:ne180100]((uint64_t)v146, size + 1);
  if (v146[23] < 0)
    v16 = *(_BYTE **)v146;
  if (size)
  {
    if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v134;
    else
      v17 = (std::string *)v134.__r_.__value_.__r.__words[0];
    memmove(v16, v17, size);
  }
  *(_WORD *)&v16[size] = 95;
  v18 = std::string::append((std::string *)v146, "constant_in");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v113 = v18->__r_.__value_.__r.__words[2];
  v112 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((v146[23] & 0x80000000) != 0)
    operator delete(*(void **)v146);
  v20 = v118;
  if ((unint64_t)v118 >= v119)
  {
    v22 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v117, &v112);
  }
  else
  {
    if (SHIBYTE(v113) < 0)
    {
      std::string::__init_copy_ctor_external(v118, (const std::string::value_type *)v112, *((std::string::size_type *)&v112 + 1));
    }
    else
    {
      v21 = v112;
      v118->__r_.__value_.__r.__words[2] = v113;
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
    }
    v22 = (__int128 *)&v20[1];
  }
  v118 = (std::string *)v22;
  v23 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(v146, "load_constant");
  memset(&v109, 0, sizeof(v109));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v109, v114, v115, 0xAAAAAAAAAAAAAAABLL * (((char *)v115 - (char *)v114) >> 3));
  memset(&v108, 0, sizeof(v108));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v108, v117, (__int128 *)v118, 0xAAAAAAAAAAAAAAABLL * (((char *)v118 - (char *)v117) >> 3));
  Espresso::sequential_builder::add<Espresso::load_constant_params>(&v110, v23, (uint64_t)v146, (uint64_t)&v112, (uint64_t)&v120, (__int128 *)v109.__r_.__value_.__l.__data_, (__int128 *)v109.__r_.__value_.__l.__size_, (__int128 **)&v108);
  *(_QWORD *)&v140 = &v108;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
  *(_QWORD *)&v140 = &v109;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
  if ((v146[23] & 0x80000000) != 0)
    operator delete(*(void **)v146);
  v106 = v110;
  v107 = v111;
  if (v111)
  {
    p_shared_owners = (unint64_t *)&v111->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v104, v120, SDWORD1(v120), SDWORD2(v120), SHIDWORD(v120));
  if (v126)
    v26 = v126;
  else
    v26 = &CoreML::Specification::_WeightParams_default_instance_;
  v27 = v26[5];
  if (*(char *)(v27 + 23) < 0)
    v28 = *(_QWORD *)(v27 + 8);
  else
    v28 = *(unsigned __int8 *)(v27 + 23);
  v29 = v26[6];
  v30 = *(unsigned __int8 *)(v29 + 23);
  if (*(char *)(v29 + 23) < 0)
    v31 = *(_QWORD *)(v29 + 8);
  else
    v31 = *(unsigned __int8 *)(v29 + 23);
  v32 = *((_DWORD *)v26 + 4);
  v33 = v26[7];
  if (*(char *)(v33 + 23) < 0)
    v34 = *(_QWORD *)(v33 + 8);
  else
    v34 = *(unsigned __int8 *)(v33 + 23);
  v35 = v13 * v12 * v14;
  if (v32 <= 0)
    v36 = 1;
  else
    v36 = 2;
  if (v28)
    v37 = v36;
  else
    v37 = v32 > 0;
  if (v31)
    ++v37;
  if (v34)
    ++v37;
  if (v32 > 0 || v37 != 1)
    goto LABEL_81;
  if ((*(_BYTE *)(v27 + 23) & 0x80) != 0)
  {
    if (!*(_QWORD *)(v27 + 8))
      goto LABEL_72;
LABEL_81:
    if (v35 != (int)EspressoConverter::getWeightParamSize((uint64_t)v26))
    {
      v93 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](v93, "Bias Layer: bias size does not match provided shape");
      __cxa_throw(v93, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v40 = v104;
    EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v104 + 24), v26, 4 * v35);
    goto LABEL_83;
  }
  if (*(_BYTE *)(v27 + 23))
    goto LABEL_81;
LABEL_72:
  if ((v30 & 0x80) != 0)
    v30 = *(_QWORD *)(v29 + 8);
  if (v26 == &CoreML::Specification::_WeightParams_default_instance_)
    goto LABEL_81;
  if (!v30 || v26[8] == 0)
    goto LABEL_81;
  EspressoConverter::readFloatFromWeightParams((EspressoConverter *)v146, (const CoreML::Specification::WeightParams *)v26, v35);
  v40 = v104;
  v41 = *(void **)v146;
  memcpy(*(void **)(v104 + 24), *(const void **)v146, 4 * v35);
  if (v41)
    operator delete(v41);
LABEL_83:
  v102 = v40;
  v103 = v105;
  if (v105)
  {
    v42 = (unint64_t *)&v105->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  Espresso::generic_load_constant_kernel::set_constant_blob();
  if (v103)
  {
    v44 = &v103->__shared_owners_;
    do
      v45 = __ldaxr((unint64_t *)v44);
    while (__stlxr(v45 - 1, (unint64_t *)v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v46 = v129;
  if ((char *)v129 - v128 != 24 || v132 - v131 != 24)
  {
    v91 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v91, "Bias Layer: Must accept exactly 1 input and produce 1 output");
    __cxa_throw(v91, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if ((unint64_t)v129 >= v130)
  {
    v48 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v128, &v112);
  }
  else
  {
    if (SHIBYTE(v113) < 0)
    {
      std::string::__init_copy_ctor_external(v129, (const std::string::value_type *)v112, *((std::string::size_type *)&v112 + 1));
    }
    else
    {
      v47 = v112;
      v129->__r_.__value_.__r.__words[2] = v113;
      *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
    }
    v48 = (__int128 *)&v46[1];
  }
  v129 = (std::string *)v48;
  v99[2] = 897988541;
  v100 = 0;
  v101 = 0;
  v99[0] = 0;
  v99[1] = 1065353216;
  v49 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(v146, "elementwise");
  memset(&v96, 0, sizeof(v96));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v96, (__int128 *)v128, (__int128 *)v129, 0xAAAAAAAAAAAAAAABLL * (((char *)v129 - v128) >> 3));
  memset(&v95, 0, sizeof(v95));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v95, (__int128 *)v131, (__int128 *)v132, 0xAAAAAAAAAAAAAAABLL * ((v132 - v131) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v97, v49, (uint64_t)v146, (uint64_t)&v134, (uint64_t)v99, (__int128 *)v96.__r_.__value_.__l.__data_, (__int128 *)v96.__r_.__value_.__l.__size_, (__int128 **)&v95);
  *(_QWORD *)&v140 = &v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
  *(_QWORD *)&v140 = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
  if ((v146[23] & 0x80000000) != 0)
    operator delete(*(void **)v146);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v131);
  }
  else
  {
    v50 = (uint64_t **)*((_QWORD *)this + 1);
    v51 = std::map<std::string,std::string>::at((uint64_t)v50, v128);
    *(_OWORD *)v146 = *(_OWORD *)v51;
    *(_OWORD *)&v146[16] = *(_OWORD *)(v51 + 16);
    v147 = *(_QWORD *)(v51 + 32);
    v148 = 0;
    v149 = 0;
    v150 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v148, *(const void **)(v51 + 40), *(_QWORD *)(v51 + 48), (uint64_t)(*(_QWORD *)(v51 + 48) - *(_QWORD *)(v51 + 40)) >> 2);
    std::vector<Espresso::layer_shape>::vector(v145);
    v52 = v145[0];
    *(_OWORD *)v145[0] = *(_OWORD *)v146;
    *(_OWORD *)(v52 + 16) = *(_OWORD *)&v146[16];
    *(_QWORD *)(v52 + 32) = v147;
    v53 = v148;
    v54 = v149;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v52 + 40), v148, v149, (v149 - (uint64_t)v148) >> 2);
    v55 = v145[0];
    v56 = *(_OWORD *)&v146[16];
    *(_OWORD *)(v145[0] + 64) = *(_OWORD *)v146;
    *(_OWORD *)(v55 + 80) = v56;
    *(_QWORD *)(v55 + 96) = v147;
    v57 = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v55 + 104), v53, v54, (v54 - (uint64_t)v53) >> 2);
    if (*((_DWORD *)a2 + 35) == 250)
    {
      v58 = (uint64_t *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v57);
      v58 = &CoreML::Specification::_BiasLayerParams_default_instance_;
    }
    v59 = *((_DWORD *)v58 + 4);
    if (v59 == 3)
    {
      v61 = (_QWORD *)v58[3];
      v60 = v145[0];
      *(_DWORD *)(v145[0] + 72) = v61[1];
      *(_DWORD *)(v60 + 68) = v61[2];
      *(_DWORD *)(v60 + 64) = v61[3];
    }
    else
    {
      if (v59 != 1)
      {
        v94 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v94, "Bias Layer: shape must be of size 1 or 3");
        __cxa_throw(v94, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v60 = v145[0];
      *(_DWORD *)(v145[0] + 72) = *(_QWORD *)(v58[3] + 8);
      *(_QWORD *)(v60 + 64) = 0x100000001;
    }
    EspressoConverter::computeMaxShape((uint64_t)&v140, v60, v145[1]);
    v135[0] = v140;
    v135[1] = v141;
    v62 = v143;
    v136 = v142;
    __p = 0;
    v139 = 0;
    v138 = 0;
    v63 = v144;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v143, v144, (v144 - (uint64_t)v143) >> 2);
    EspressoConverter::validateShape((int *)v135, *((_QWORD *)a2 + 14), (uint64_t)v131);
    if (__p)
    {
      v138 = __p;
      operator delete(__p);
    }
    v151 = v131;
    v64 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v50, v131, (__int128 **)&v151);
    v65 = v141;
    *(_OWORD *)(v64 + 56) = v140;
    *(_OWORD *)(v64 + 72) = v65;
    *((_QWORD *)v64 + 11) = v142;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v64 + 96, v62, v63, (v63 - (uint64_t)v62) >> 2);
    if (v62)
      operator delete(v62);
    *(_QWORD *)&v140 = v145;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
    if (v53)
      operator delete(v53);
  }
  if (v126)
    v66 = v126;
  else
    v66 = &CoreML::Specification::_WeightParams_default_instance_;
  v67 = v66[5];
  v68 = *(unsigned __int8 *)(v67 + 23);
  if (*(char *)(v67 + 23) < 0)
    v69 = *(_QWORD *)(v67 + 8);
  else
    v69 = *(unsigned __int8 *)(v67 + 23);
  v70 = v66[6];
  if (*(char *)(v70 + 23) < 0)
    v71 = *(_QWORD *)(v70 + 8);
  else
    v71 = *(unsigned __int8 *)(v70 + 23);
  v72 = *((_DWORD *)v66 + 4);
  v73 = v66[7];
  if (*(char *)(v73 + 23) < 0)
    v74 = *(_QWORD *)(v73 + 8);
  else
    v74 = *(unsigned __int8 *)(v73 + 23);
  v75 = 0;
  if (v72 <= 0)
    v76 = 1;
  else
    v76 = 2;
  if (v69)
    v77 = v76;
  else
    v77 = v72 > 0;
  if (v71)
    ++v77;
  if (v74)
    ++v77;
  if (v72 <= 0 && v77 == 1)
  {
    if ((v68 & 0x80) != 0)
      v68 = *(_QWORD *)(v67 + 8);
    v75 = v68 != 0;
  }
  v78 = v98;
  if (v98)
  {
    v79 = (unint64_t *)&v98->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v105;
  if (v105)
  {
    v82 = (unint64_t *)&v105->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v107;
  if (v107)
  {
    v85 = (unint64_t *)&v107->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v111;
  if (v111)
  {
    v88 = (unint64_t *)&v111->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (SHIBYTE(v113) < 0)
    operator delete((void *)v112);
  *(_QWORD *)v146 = &v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v146);
  *(_QWORD *)v146 = &v117;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v146);
  CoreML::Specification::BiasLayerParams::~BiasLayerParams((CoreML::Specification::BiasLayerParams *)&v122);
  *(_QWORD *)v146 = &v128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v146);
  *(_QWORD *)v146 = &v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v146);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  return v75;
}

void sub_19C959C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a65;
  void *a68;
  char a72;
  void *v72;
  void *v73;
  uint64_t v74;

  __cxa_free_exception(v73);
  *(_QWORD *)(v74 - 248) = v74 - 184;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v74 - 248));
  if (v72)
    operator delete(v72);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  if (a44 < 0)
    operator delete(__p);
  *(_QWORD *)(v74 - 248) = &a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v74 - 248));
  *(_QWORD *)(v74 - 248) = &a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v74 - 248));
  CoreML::Specification::BiasLayerParams::~BiasLayerParams((CoreML::Specification::BiasLayerParams *)&a55);
  *(_QWORD *)(v74 - 248) = &a62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v74 - 248));
  *(_QWORD *)(v74 - 248) = &a65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v74 - 248));
  if (a72 < 0)
    operator delete(a68);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<Espresso::layer_shape>::vector(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = (char *)operator new(0x80uLL);
  v3 = 0;
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 128;
  do
  {
    v4 = &v2[v3];
    *((_QWORD *)v4 + 7) = 0;
    *(_OWORD *)(v4 + 40) = 0uLL;
    *(_OWORD *)(v4 + 24) = 0uLL;
    *(_OWORD *)v4 = xmmword_19CB39920;
    v3 += 64;
    *((_QWORD *)v4 + 2) = 0xFFFFFFFF00000001;
  }
  while (v3 != 128);
  a1[1] = v2 + 128;
  return a1;
}

void sub_19C959F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void LayerTranslator::addUpsample(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::UpsampleLayerParams *v7;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t v22;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v23;
  const CoreML::Specification::UpsampleLayerParams *v24;
  void *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::runtime_error *exception;
  std::string *v38;
  __int128 v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  std::runtime_error *v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  std::runtime_error *v53;
  std::runtime_error *v54;
  std::string *v55;
  __int128 v56;
  std::string v57;
  std::string v58;
  void *__p[2];
  char v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  std::string v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[16];
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  __int128 *v80;
  __int128 *v81;
  uint64_t v82;
  __int128 *v83;
  __int128 *v84;
  uint64_t v85;
  std::string v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE v99[32];
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  std::string *v106;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v86.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v5;
  }
  v84 = 0;
  v83 = 0;
  v85 = 0;
  v81 = 0;
  v80 = 0;
  v82 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v83, (uint64_t *)&v80, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 210)
  {
    v7 = (const CoreML::Specification::UpsampleLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::UpsampleLayerParams *)&CoreML::Specification::_UpsampleLayerParams_default_instance_;
  }
  CoreML::Specification::UpsampleLayerParams::UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)v73, v7);
  v64 = xmmword_19CB39980;
  v65 = 0x100000000;
  v66 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v67 = _D0;
  v68 = 1;
  v70 = 0;
  v71 = 0;
  v69 = 0;
  v72 = _D0;
  if (v74 == 2)
  {
    if (v76)
      goto LABEL_70;
    v13 = *(_QWORD *)(v75 + 16);
    DWORD2(v64) = *(_QWORD *)(v75 + 8);
    DWORD1(v64) = v13;
  }
  else
  {
    if (v74)
      goto LABEL_70;
    if (v76 != 2)
    {
      if (!v76)
      {
        *(_QWORD *)((char *)&v64 + 4) = 0x100000001;
        goto LABEL_17;
      }
LABEL_70:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v38 = std::string::append((std::string *)v99, " , Only one of scalingFactor and fractionalScalingFactor can be set, and if set, must be of size 2.");
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v63);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (v78 != 1 || !v79)
    {
      v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v55 = std::string::append((std::string *)v99, " , Fractional scaling only compatible with align_corners=true or align_corners=false bilinear mode.");
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v54, &v63);
      __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v66 = 1;
    HIDWORD(v67) = *(_DWORD *)(v77 + 8);
    LODWORD(v67) = *(_DWORD *)(v77 + 12);
  }
LABEL_17:
  if (v78 >= 2)
  {
    if (v78 == 0x7FFFFFFF || v78 == 0x80000000)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v63);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63.__r_.__value_.__r.__words[2], (uint64_t)"Upsample layer: '", 17);
      v41 = *((_QWORD *)a2 + 14);
      v42 = *(char *)(v41 + 23);
      if (v42 >= 0)
        v43 = *((_QWORD *)a2 + 14);
      else
        v43 = *(_QWORD *)v41;
      if (v42 >= 0)
        v44 = *(unsigned __int8 *)(v41 + 23);
      else
        v44 = *(_QWORD *)(v41 + 8);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v43, v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"': unknown value for parameter 'mode'.", 38);
      v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v46, (const std::string *)v99);
      __cxa_throw(v46, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    HIDWORD(v64) = v78;
  }
  if (v79 <= 0)
  {
    if (!v79)
    {
      HIDWORD(v65) = 1;
      goto LABEL_31;
    }
    v14 = 0x80000000;
  }
  else
  {
    if (v79 == 1)
    {
      v65 = 1;
      goto LABEL_31;
    }
    if (v79 == 2)
    {
      v65 = 0;
      goto LABEL_31;
    }
    v14 = 0x7FFFFFFF;
  }
  if (v79 == v14)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v63);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63.__r_.__value_.__r.__words[2], (uint64_t)"Upsample layer: '", 17);
    v48 = *((_QWORD *)a2 + 14);
    v49 = *(char *)(v48 + 23);
    if (v49 >= 0)
      v50 = *((_QWORD *)a2 + 14);
    else
      v50 = *(_QWORD *)v48;
    if (v49 >= 0)
      v51 = *(unsigned __int8 *)(v48 + 23);
    else
      v51 = *(_QWORD *)(v48 + 8);
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v50, v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"': unknown value for parameter 'linearupsamplemode'.", 52);
    v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v53, (const std::string *)v99);
    __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_31:
  v15 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "upsample");
  memset(&v58, 0, sizeof(v58));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v58, v80, v81, 0xAAAAAAAAAAAAAAABLL * (((char *)v81 - (char *)v80) >> 3));
  memset(&v57, 0, sizeof(v57));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v57, v83, v84, 0xAAAAAAAAAAAAAAABLL * (((char *)v84 - (char *)v83) >> 3));
  *(_QWORD *)&v94 = 0;
  v93 = 0uLL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v93, (__int128 *)v58.__r_.__value_.__l.__data_, (__int128 *)v58.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58.__r_.__value_.__l.__size_ - v58.__r_.__value_.__r.__words[0]) >> 3));
  v87 = 0uLL;
  *(_QWORD *)&v88 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v87, (__int128 *)v57.__r_.__value_.__l.__data_, (__int128 *)v57.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57.__r_.__value_.__l.__size_ - v57.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v63.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v15[14] + 8))(*(_QWORD *)(v15[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v104 = v61;
  v105 = v62;
  if (v62)
  {
    p_shared_owners = (unint64_t *)&v62->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(&v63, 0, sizeof(v63));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v63, (__int128 *)v93, *((__int128 **)&v93 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v93 + 1) - v93) >> 3));
  memset(v99, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v99, (__int128 *)v87, *((__int128 **)&v87 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v87 + 1) - v87) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v106 = (std::string *)v99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
  v106 = &v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
  v18 = v105;
  if (v105)
  {
    v19 = (unint64_t *)&v105->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (*v15)
    Espresso::sequential_builder::add_shape_from_kernel();
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (v60 < 0)
    operator delete(__p[0]);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v83);
  }
  else
  {
    v21 = (uint64_t **)*((_QWORD *)this + 1);
    v22 = std::map<std::string,std::string>::at((uint64_t)v21, v80);
    *(_OWORD *)v99 = *(_OWORD *)v22;
    *(_OWORD *)&v99[16] = *(_OWORD *)(v22 + 16);
    v100 = *(_QWORD *)(v22 + 32);
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v23 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v101, *(const void **)(v22 + 40), *(_QWORD *)(v22 + 48), (uint64_t)(*(_QWORD *)(v22 + 48)- *(_QWORD *)(v22 + 40)) >> 2);
    if (*((_DWORD *)a2 + 35) == 210)
    {
      v24 = (const CoreML::Specification::UpsampleLayerParams *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v23);
      v24 = (const CoreML::Specification::UpsampleLayerParams *)&CoreML::Specification::_UpsampleLayerParams_default_instance_;
    }
    CoreML::Specification::UpsampleLayerParams::UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)&v63, v24);
    v93 = *(_OWORD *)v99;
    v94 = *(_OWORD *)&v99[16];
    v25 = v101;
    v95 = v100;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v96, v101, v102, (v102 - (uint64_t)v101) >> 2);
    if (v66)
    {
      v26 = vcvtms_s32_f32(*(float *)&v67 * (float)*(int *)v99);
      v27 = *(_DWORD *)&v99[4];
      v28 = vcvtms_s32_f32(*((float *)&v67 + 1) * (float)*(int *)&v99[4]);
    }
    else
    {
      v26 = DWORD1(v64) * *(_DWORD *)v99;
      v27 = *(_DWORD *)&v99[4];
      v28 = DWORD2(v64) * *(_DWORD *)&v99[4];
    }
    if (v27 == -1)
      v29 = -1;
    else
      v29 = v28;
    *(_QWORD *)&v93 = __PAIR64__(v29, v26);
    if (*(_DWORD *)v99 == -1)
      LODWORD(v93) = -1;
    v87 = v93;
    v88 = v94;
    v30 = v96;
    v89 = v95;
    v90 = 0;
    v92 = 0;
    v91 = 0;
    v31 = v97;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v90, v96, v97, (v97 - (uint64_t)v96) >> 2);
    EspressoConverter::validateShape((int *)&v87, *((_QWORD *)a2 + 14), (uint64_t)v83);
    if (v90)
    {
      v91 = v90;
      operator delete(v90);
    }
    __p[0] = v83;
    v32 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, v83, (__int128 **)__p);
    v33 = v94;
    *(_OWORD *)(v32 + 56) = v93;
    *(_OWORD *)(v32 + 72) = v33;
    *((_QWORD *)v32 + 11) = v95;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v32 + 96, v30, v31, (v31 - (uint64_t)v30) >> 2);
    if (v30)
      operator delete(v30);
    CoreML::Specification::UpsampleLayerParams::~UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)&v63);
    if (v25)
      operator delete(v25);
  }
  v34 = v62;
  if (v62)
  {
    v35 = (unint64_t *)&v62->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  CoreML::Specification::UpsampleLayerParams::~UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)v73);
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
}

void sub_19C95A7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  void *v66;
  int v67;
  uint64_t v68;

  if (*(char *)(v68 - 137) < 0)
  {
    operator delete(*(void **)(v68 - 160));
    if ((v67 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
      CoreML::Specification::UpsampleLayerParams::~UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)&a66);
      a66 = (uint64_t)&STACK[0x210];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a66);
      a66 = (uint64_t)&STACK[0x228];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a66);
      if (SLOBYTE(STACK[0x257]) < 0)
        operator delete((void *)STACK[0x240]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v67)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v66);
  goto LABEL_6;
}

BOOL LayerTranslator::addEmbeddingND(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  CoreML::Specification::WeightParams *v9;
  CoreML::Specification::WeightParams *v10;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v35;
  unint64_t v37;
  int WeightParamSizeInBytes;
  std::string *v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int WeightParamSize;
  uint64_t *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v73;
  std::string::size_type v75;
  void *v76;
  int v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  _BOOL8 v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::runtime_error *exception;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  __int128 v111;
  std::string *v112;
  std::string::size_type size;
  std::string *v114;
  __int128 v115;
  std::runtime_error *v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  __int128 v120;
  std::string *v121;
  std::string::size_type v122;
  std::string *v123;
  __int128 v124;
  int v125;
  std::runtime_error *v126;
  std::string *v127;
  __int128 v128;
  std::string *v129;
  __int128 v130;
  std::string *v131;
  std::string::size_type v132;
  std::string *v133;
  __int128 v134;
  std::string *v135;
  __int128 v136;
  std::string *v137;
  std::string::size_type v138;
  std::string *v139;
  __int128 v140;
  std::string *v141;
  __int128 v142;
  std::string *v143;
  std::string::size_type v144;
  std::string *v145;
  __int128 v146;
  int v147;
  std::runtime_error *v148;
  std::string *v149;
  __int128 v150;
  std::string *v151;
  __int128 v152;
  std::string *v153;
  std::string::size_type v154;
  std::string *v155;
  __int128 v156;
  std::string *v157;
  __int128 v158;
  std::string *v159;
  std::string::size_type v160;
  std::string *v161;
  __int128 v162;
  std::runtime_error *v163;
  std::string *v164;
  __int128 v165;
  std::string *v166;
  std::string::size_type v167;
  std::string *v168;
  __int128 v169;
  std::string *v170;
  __int128 v171;
  std::runtime_error *v172;
  std::string *v173;
  __int128 v174;
  std::string *v175;
  std::string::size_type v176;
  std::string *v177;
  __int128 v178;
  std::string *v179;
  __int128 v180;
  std::string::size_type v181;
  std::string::size_type v182;
  uint64_t v183[2];
  __int128 v184;
  std::string v185;
  std::string v186;
  std::string v187;
  std::string v188;
  std::string v189;
  std::string v190;
  std::string v191;
  uint64_t v192;
  uint64_t v193;
  std::string v194;
  std::string v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  _BYTE v198[28];
  uint64_t v199;
  int v200;
  char v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  std::string v210;
  std::string __p;
  std::string v212;
  void (**v213)(CoreML::Specification::EmbeddingNDLayerParams *__hidden);
  uint64_t v214;
  uint64_t *v215;
  uint64_t *v216;
  __int128 v217;
  unsigned __int8 v218;
  int v219;
  __int128 *v220;
  __int128 *v221;
  uint64_t v222;
  __int128 *v223;
  __int128 *v224;
  uint64_t v225;
  std::string v226;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v226, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v226.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v5;
  }
  v223 = 0;
  v224 = 0;
  v225 = 0;
  v220 = 0;
  v221 = 0;
  v222 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v223, (uint64_t *)&v220, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1040)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_EmbeddingNDLayerParams_default_instance_;
  }
  v213 = &off_1E3D538E8;
  v214 = 0;
  v219 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v214, v8 & 0xFFFFFFFFFFFFFFFELL);
  if (v7 == &CoreML::Specification::_EmbeddingNDLayerParams_default_instance_)
  {
    v10 = 0;
    v215 = 0;
  }
  else
  {
    if (v7[2])
    {
      v9 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v9, (const CoreML::Specification::WeightParams *)v7[2]);
    }
    else
    {
      v9 = 0;
    }
    v215 = (uint64_t *)v9;
    if (v7[3])
    {
      v10 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v10, (const CoreML::Specification::WeightParams *)v7[3]);
    }
    else
    {
      v10 = 0;
    }
  }
  v216 = (uint64_t *)v10;
  v11 = *((_BYTE *)v7 + 48);
  v217 = *((_OWORD *)v7 + 2);
  v218 = v11;
  v12 = *((_QWORD *)&v217 + 1);
  if (!*((_QWORD *)&v217 + 1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v210, *((unint64_t *)&v217 + 1));
    v108 = std::string::insert(&v210, 0, "embedding size = ");
    v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v109;
    v108->__r_.__value_.__l.__size_ = 0;
    v108->__r_.__value_.__r.__words[2] = 0;
    v108->__r_.__value_.__r.__words[0] = 0;
    v110 = std::string::append(&__p, " not allowed in layer ");
    v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
    v212.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v111;
    v110->__r_.__value_.__l.__size_ = 0;
    v110->__r_.__value_.__r.__words[2] = 0;
    v110->__r_.__value_.__r.__words[0] = 0;
    if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v112 = &v226;
    else
      v112 = (std::string *)v226.__r_.__value_.__r.__words[0];
    if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v226.__r_.__value_.__r.__words[2]);
    else
      size = v226.__r_.__value_.__l.__size_;
    v114 = std::string::append(&v212, (const std::string::value_type *)v112, size);
    v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
    *(_QWORD *)&v198[16] = *((_QWORD *)&v114->__r_.__value_.__l + 2);
    *(_OWORD *)v198 = v115;
    v114->__r_.__value_.__l.__size_ = 0;
    v114->__r_.__value_.__r.__words[2] = 0;
    v114->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v198);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v13 = v217;
  if (!(_QWORD)v217)
  {
    v116 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v210, v217);
    v117 = std::string::insert(&v210, 0, "vocab size = ");
    v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v118;
    v117->__r_.__value_.__l.__size_ = 0;
    v117->__r_.__value_.__r.__words[2] = 0;
    v117->__r_.__value_.__r.__words[0] = 0;
    v119 = std::string::append(&__p, " not allowed in layer ");
    v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
    v212.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v120;
    v119->__r_.__value_.__l.__size_ = 0;
    v119->__r_.__value_.__r.__words[2] = 0;
    v119->__r_.__value_.__r.__words[0] = 0;
    if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v121 = &v226;
    else
      v121 = (std::string *)v226.__r_.__value_.__r.__words[0];
    if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v122 = HIBYTE(v226.__r_.__value_.__r.__words[2]);
    else
      v122 = v226.__r_.__value_.__l.__size_;
    v123 = std::string::append(&v212, (const std::string::value_type *)v121, v122);
    v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
    *(_QWORD *)&v198[16] = *((_QWORD *)&v123->__r_.__value_.__l + 2);
    *(_OWORD *)v198 = v124;
    v123->__r_.__value_.__l.__size_ = 0;
    v123->__r_.__value_.__r.__words[2] = 0;
    v123->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v116, (const std::string *)v198);
    __cxa_throw(v116, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v203 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  v204 = _D0;
  v209 = 0;
  *(_DWORD *)&v198[16] = 0;
  *(_QWORD *)&v198[20] = _D0;
  v205 = 0;
  v202 = 0;
  v206 = 0;
  v208 = 0;
  v207 = 0;
  v199 = 0x100000000;
  *(_QWORD *)v198 = __PAIR64__(v217, DWORD2(v217));
  v200 = 0;
  *(_QWORD *)&v198[8] = v218;
  v201 = 1;
  v18 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v212, "inner_product");
  memset(&v195, 0, sizeof(v195));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v195, v220, v221, 0xAAAAAAAAAAAAAAABLL * (((char *)v221 - (char *)v220) >> 3));
  memset(&v194, 0, sizeof(v194));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v194, v223, v224, 0xAAAAAAAAAAAAAAABLL * (((char *)v224 - (char *)v223) >> 3));
  Espresso::sequential_builder::add<Espresso::inner_product_uniforms>(&v196, v18, (uint64_t)&v212, (uint64_t)&v226, (uint64_t)v198, (__int128 *)v195.__r_.__value_.__l.__data_, (__int128 *)v195.__r_.__value_.__l.__size_, (__int128 **)&v194);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
  v19 = v196;
  v192 = v196;
  v193 = (uint64_t)v197;
  if (v197)
  {
    p_shared_owners = (unint64_t *)&v197->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v215)
    v22 = v215;
  else
    v22 = &CoreML::Specification::_WeightParams_default_instance_;
  v23 = v22[5];
  if (*(char *)(v23 + 23) < 0)
    v24 = *(_QWORD *)(v23 + 8);
  else
    v24 = *(unsigned __int8 *)(v23 + 23);
  v25 = v22[6];
  v26 = *(unsigned __int8 *)(v25 + 23);
  if (*(char *)(v25 + 23) < 0)
    v27 = *(_QWORD *)(v25 + 8);
  else
    v27 = *(unsigned __int8 *)(v25 + 23);
  v28 = *((_QWORD *)&v217 + 1) * v217;
  v29 = *((_DWORD *)v22 + 4);
  v30 = v22[7];
  if (*(char *)(v30 + 23) < 0)
    v31 = *(_QWORD *)(v30 + 8);
  else
    v31 = *(unsigned __int8 *)(v30 + 23);
  if (v29 <= 0)
    v32 = 1;
  else
    v32 = 2;
  if (v24)
    v33 = v32;
  else
    v33 = v29 > 0;
  if (v27)
    ++v33;
  if (v31)
    ++v33;
  if (v29 > 0 || v33 != 1)
    goto LABEL_87;
  if ((*(_BYTE *)(v23 + 23) & 0x80) != 0)
  {
    if (!*(_QWORD *)(v23 + 8))
      goto LABEL_55;
LABEL_87:
    WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)v22);
    if (v28 != WeightParamSize)
    {
      v125 = WeightParamSize;
      v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v187, v125);
      v127 = std::string::insert(&v187, 0, "Size of weights = ");
      v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
      v188.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v128;
      v127->__r_.__value_.__l.__size_ = 0;
      v127->__r_.__value_.__r.__words[2] = 0;
      v127->__r_.__value_.__r.__words[0] = 0;
      v129 = std::string::append(&v188, " is not equal to size of the product of input dims and output channels = ");
      v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
      v189.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v130;
      v129->__r_.__value_.__l.__size_ = 0;
      v129->__r_.__value_.__r.__words[2] = 0;
      v129->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v186, v217);
      if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v131 = &v186;
      else
        v131 = (std::string *)v186.__r_.__value_.__r.__words[0];
      if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v132 = HIBYTE(v186.__r_.__value_.__r.__words[2]);
      else
        v132 = v186.__r_.__value_.__l.__size_;
      v133 = std::string::append(&v189, (const std::string::value_type *)v131, v132);
      v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
      v190.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v134;
      v133->__r_.__value_.__l.__size_ = 0;
      v133->__r_.__value_.__r.__words[2] = 0;
      v133->__r_.__value_.__r.__words[0] = 0;
      v135 = std::string::append(&v190, ",");
      v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
      v191.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v136;
      v135->__r_.__value_.__l.__size_ = 0;
      v135->__r_.__value_.__r.__words[2] = 0;
      v135->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v185, *((unint64_t *)&v217 + 1));
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v137 = &v185;
      else
        v137 = (std::string *)v185.__r_.__value_.__r.__words[0];
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v138 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
      else
        v138 = v185.__r_.__value_.__l.__size_;
      v139 = std::string::append(&v191, (const std::string::value_type *)v137, v138);
      v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
      v210.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v140;
      v139->__r_.__value_.__l.__size_ = 0;
      v139->__r_.__value_.__r.__words[2] = 0;
      v139->__r_.__value_.__r.__words[0] = 0;
      v141 = std::string::append(&v210, " in layer ");
      v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v142;
      v141->__r_.__value_.__l.__size_ = 0;
      v141->__r_.__value_.__r.__words[2] = 0;
      v141->__r_.__value_.__r.__words[0] = 0;
      if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v143 = &v226;
      else
        v143 = (std::string *)v226.__r_.__value_.__r.__words[0];
      if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v144 = HIBYTE(v226.__r_.__value_.__r.__words[2]);
      else
        v144 = v226.__r_.__value_.__l.__size_;
      v145 = std::string::append(&__p, (const std::string::value_type *)v143, v144);
      v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
      v212.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v146;
      v145->__r_.__value_.__l.__size_ = 0;
      v145->__r_.__value_.__r.__words[2] = 0;
      v145->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v126, &v212);
      __cxa_throw(v126, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v19 + 424))(&v212, v19);
    if (v215)
      v52 = v215;
    else
      v52 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v212.__r_.__value_.__r.__words[0] + 16), v52, 4 * (*(_DWORD *)&v198[4] * *(_DWORD *)v198));
    v184 = *(_OWORD *)&v212.__r_.__value_.__l.__data_;
    if (v212.__r_.__value_.__l.__size_)
    {
      v53 = (unint64_t *)(v212.__r_.__value_.__l.__size_ + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v19 + 400))(v19, &v184);
    v55 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
    if (*((_QWORD *)&v184 + 1))
    {
      v56 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = (std::__shared_weak_count *)v212.__r_.__value_.__l.__size_;
    if (v212.__r_.__value_.__l.__size_)
    {
      v59 = (unint64_t *)(v212.__r_.__value_.__l.__size_ + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    goto LABEL_104;
  }
  if (*(_BYTE *)(v23 + 23))
    goto LABEL_87;
LABEL_55:
  if ((v26 & 0x80) != 0)
    v26 = *(_QWORD *)(v25 + 8);
  if (v22 == &CoreML::Specification::_WeightParams_default_instance_)
    goto LABEL_87;
  v35 = v22[8];
  if (!v26 || v35 == 0)
    goto LABEL_87;
  v37 = *(_QWORD *)(v35 + 16);
  WeightParamSizeInBytes = EspressoConverter::getWeightParamSizeInBytes(v22);
  if (!CoreML::hasSufficientBytesInQuantizedWeightParam(v22, v13 * v12))
  {
    v163 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v164 = std::string::append(&v191, "' has insufficient bytes for ");
    v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
    v210.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v165;
    v164->__r_.__value_.__l.__size_ = 0;
    v164->__r_.__value_.__r.__words[2] = 0;
    v164->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v190, v28);
    if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v166 = &v190;
    else
      v166 = (std::string *)v190.__r_.__value_.__r.__words[0];
    if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v167 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
    else
      v167 = v190.__r_.__value_.__l.__size_;
    v168 = std::string::append(&v210, (const std::string::value_type *)v166, v167);
    v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v168->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v169;
    v168->__r_.__value_.__l.__size_ = 0;
    v168->__r_.__value_.__r.__words[2] = 0;
    v168->__r_.__value_.__r.__words[0] = 0;
    v170 = std::string::append(&__p, "units in weight");
    v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
    v212.__r_.__value_.__r.__words[2] = v170->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v171;
    v170->__r_.__value_.__l.__size_ = 0;
    v170->__r_.__value_.__r.__words[2] = 0;
    v170->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v163, &v212);
    __cxa_throw(v163, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CoreML::copySpecArrayStringToVector(&v212, (char *)v25, WeightParamSizeInBytes);
  std::to_string(&v210, v37);
  v39 = std::string::insert(&v210, 0, "W_U");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  *(_OWORD *)&v210.__r_.__value_.__l.__data_ = 0uLL;
  (*(void (**)(uint64_t, std::string *, std::string *, std::string::size_type, _QWORD, _QWORD))(*(_QWORD *)v19 + 168))(v19, &v210, &__p, v212.__r_.__value_.__r.__words[0], WeightParamSizeInBytes, 0);
  v41 = (std::__shared_weak_count *)v210.__r_.__value_.__l.__size_;
  if (v210.__r_.__value_.__l.__size_)
  {
    v42 = (unint64_t *)(v210.__r_.__value_.__l.__size_ + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v215)
    v44 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v215;
  else
    v44 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)&CoreML::Specification::_WeightParams_default_instance_;
  v45 = (std::__shared_weak_count *)v193;
  v183[0] = v192;
  v183[1] = v193;
  if (v193)
  {
    v46 = (unint64_t *)(v193 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = *(unsigned int *)v198;
  std::string::basic_string[abi:ne180100]<0>(&v210, (char *)&unk_19CB39696);
  CoreML::setQuantizationParams(v44, v183, v48, (const void **)&v210.__r_.__value_.__l.__data_);
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  if (v45)
  {
    v49 = (unint64_t *)&v45->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v212.__r_.__value_.__r.__words[0])
  {
    v212.__r_.__value_.__l.__size_ = v212.__r_.__value_.__r.__words[0];
    operator delete(v212.__r_.__value_.__l.__data_);
  }
LABEL_104:
  if (!v218)
    goto LABEL_161;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v187, 4 * *(_DWORD *)v198, 1, 1, 1);
  if (v216)
    v61 = v216;
  else
    v61 = &CoreML::Specification::_WeightParams_default_instance_;
  v62 = v61[5];
  if (*(char *)(v62 + 23) < 0)
    v63 = *(_QWORD *)(v62 + 8);
  else
    v63 = *(unsigned __int8 *)(v62 + 23);
  v64 = v61[6];
  v65 = *(unsigned __int8 *)(v64 + 23);
  if (*(char *)(v64 + 23) < 0)
    v66 = *(_QWORD *)(v64 + 8);
  else
    v66 = *(unsigned __int8 *)(v64 + 23);
  v67 = *((_DWORD *)v61 + 4);
  v68 = v61[7];
  if (*(char *)(v68 + 23) < 0)
    v69 = *(_QWORD *)(v68 + 8);
  else
    v69 = *(unsigned __int8 *)(v68 + 23);
  if (v67 <= 0)
    v70 = 1;
  else
    v70 = 2;
  if (v63)
    v71 = v70;
  else
    v71 = v67 > 0;
  if (v66)
    ++v71;
  if (v69)
    ++v71;
  if (v67 > 0 || v71 != 1)
    goto LABEL_146;
  if ((*(_BYTE *)(v62 + 23) & 0x80) != 0)
  {
    if (*(_QWORD *)(v62 + 8))
      goto LABEL_146;
  }
  else if (*(_BYTE *)(v62 + 23))
  {
    goto LABEL_146;
  }
  if ((v65 & 0x80) != 0)
    v65 = *(_QWORD *)(v64 + 8);
  if (v61 != &CoreML::Specification::_WeightParams_default_instance_)
  {
    v73 = v61[8];
    if (v65 && v73 != 0)
    {
      if ((int)EspressoConverter::getWeightParamSizeInBytes(v61) > (*(_QWORD *)(v73 + 16) * v12 + 7) >> 3)
      {
        v172 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v173 = std::string::append(&v191, "' has insufficient bytes for ");
        v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
        v210.__r_.__value_.__r.__words[2] = v173->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v174;
        v173->__r_.__value_.__l.__size_ = 0;
        v173->__r_.__value_.__r.__words[2] = 0;
        v173->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v190, v28);
        if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v175 = &v190;
        else
          v175 = (std::string *)v190.__r_.__value_.__r.__words[0];
        if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v176 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
        else
          v176 = v190.__r_.__value_.__l.__size_;
        v177 = std::string::append(&v210, (const std::string::value_type *)v175, v176);
        v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v178;
        v177->__r_.__value_.__l.__size_ = 0;
        v177->__r_.__value_.__r.__words[2] = 0;
        v177->__r_.__value_.__r.__words[0] = 0;
        v179 = std::string::append(&__p, "units in bias");
        v180 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
        v212.__r_.__value_.__r.__words[2] = v179->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v180;
        v179->__r_.__value_.__l.__size_ = 0;
        v179->__r_.__value_.__r.__words[2] = 0;
        v179->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v172, &v212);
        __cxa_throw(v172, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      CoreML::dequantizeWeightParamSpec((CoreML *)&v212, (const CoreML::Specification::WeightParams *)v61, v12);
      v75 = v187.__r_.__value_.__r.__words[0];
      v76 = (void *)v212.__r_.__value_.__r.__words[0];
      memcpy(*(void **)(v187.__r_.__value_.__r.__words[0] + 16), v212.__r_.__value_.__l.__data_, 4 * v12);
      if (v76)
        operator delete(v76);
      goto LABEL_148;
    }
  }
LABEL_146:
  v77 = EspressoConverter::getWeightParamSize((uint64_t)v61);
  if (v12 != v77)
  {
    v147 = v77;
    v148 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v189, v147);
    v149 = std::string::insert(&v189, 0, "Size of bias = ");
    v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
    v190.__r_.__value_.__r.__words[2] = v149->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v150;
    v149->__r_.__value_.__l.__size_ = 0;
    v149->__r_.__value_.__r.__words[2] = 0;
    v149->__r_.__value_.__r.__words[0] = 0;
    v151 = std::string::append(&v190, " is not equal to the output dims = ");
    v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
    v191.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v152;
    v151->__r_.__value_.__l.__size_ = 0;
    v151->__r_.__value_.__r.__words[2] = 0;
    v151->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v188, *((unint64_t *)&v217 + 1));
    if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v153 = &v188;
    else
      v153 = (std::string *)v188.__r_.__value_.__r.__words[0];
    if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v154 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
    else
      v154 = v188.__r_.__value_.__l.__size_;
    v155 = std::string::append(&v191, (const std::string::value_type *)v153, v154);
    v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
    v210.__r_.__value_.__r.__words[2] = v155->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v156;
    v155->__r_.__value_.__l.__size_ = 0;
    v155->__r_.__value_.__r.__words[2] = 0;
    v155->__r_.__value_.__r.__words[0] = 0;
    v157 = std::string::append(&v210, " in layer ");
    v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v158;
    v157->__r_.__value_.__l.__size_ = 0;
    v157->__r_.__value_.__r.__words[2] = 0;
    v157->__r_.__value_.__r.__words[0] = 0;
    if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v159 = &v226;
    else
      v159 = (std::string *)v226.__r_.__value_.__r.__words[0];
    if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v160 = HIBYTE(v226.__r_.__value_.__r.__words[2]);
    else
      v160 = v226.__r_.__value_.__l.__size_;
    v161 = std::string::append(&__p, (const std::string::value_type *)v159, v160);
    v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
    v212.__r_.__value_.__r.__words[2] = v161->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v162;
    v161->__r_.__value_.__l.__size_ = 0;
    v161->__r_.__value_.__r.__words[2] = 0;
    v161->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v148, &v212);
    __cxa_throw(v148, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v75 = v187.__r_.__value_.__r.__words[0];
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v187.__r_.__value_.__r.__words[0] + 16), v61, 4 * *(unsigned int *)v198);
LABEL_148:
  v78 = v192;
  v181 = v75;
  v182 = v187.__r_.__value_.__l.__size_;
  if (v187.__r_.__value_.__l.__size_)
  {
    v79 = (unint64_t *)(v187.__r_.__value_.__l.__size_ + 8);
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
  }
  (*(void (**)(uint64_t, std::string::size_type *))(*(_QWORD *)v78 + 392))(v78, &v181);
  v81 = (std::__shared_weak_count *)v182;
  if (v182)
  {
    v82 = (unint64_t *)(v182 + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = (std::__shared_weak_count *)v187.__r_.__value_.__l.__size_;
  if (v187.__r_.__value_.__l.__size_)
  {
    v85 = (unint64_t *)(v187.__r_.__value_.__l.__size_ + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
LABEL_161:
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v223);
  if (v215)
    v87 = v215;
  else
    v87 = &CoreML::Specification::_WeightParams_default_instance_;
  v88 = v87[5];
  v89 = *(unsigned __int8 *)(v88 + 23);
  if (*(char *)(v88 + 23) < 0)
    v90 = *(_QWORD *)(v88 + 8);
  else
    v90 = *(unsigned __int8 *)(v88 + 23);
  v91 = v87[6];
  if (*(char *)(v91 + 23) < 0)
    v92 = *(_QWORD *)(v91 + 8);
  else
    v92 = *(unsigned __int8 *)(v91 + 23);
  v93 = *((_DWORD *)v87 + 4);
  v94 = v87[7];
  if (*(char *)(v94 + 23) < 0)
    v95 = *(_QWORD *)(v94 + 8);
  else
    v95 = *(unsigned __int8 *)(v94 + 23);
  if (v93 <= 0)
    v96 = 1;
  else
    v96 = 2;
  if (v90)
    v97 = v96;
  else
    v97 = v93 > 0;
  if (v92)
    ++v97;
  if (v95)
    ++v97;
  if (v93 <= 0 && v97 == 1)
  {
    if ((v89 & 0x80) != 0)
      v89 = *(_QWORD *)(v88 + 8);
    v99 = v89 != 0;
  }
  else
  {
    v99 = 0;
  }
  v100 = (std::__shared_weak_count *)v193;
  if (v193)
  {
    v101 = (unint64_t *)(v193 + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v197;
  if (v197)
  {
    v104 = (unint64_t *)&v197->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  CoreML::Specification::EmbeddingNDLayerParams::~EmbeddingNDLayerParams((CoreML::Specification::EmbeddingNDLayerParams *)&v213);
  *(_QWORD *)v198 = &v220;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v198);
  *(_QWORD *)v198 = &v223;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v198);
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v226.__r_.__value_.__l.__data_);
  return v99;
}

void sub_19C95BA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,char a62,uint64_t a63)
{
  char a70;
  void *a72;
  void *a73;
  char a74;
  void *v74;
  int v75;
  uint64_t v76;

  if (*(char *)(v76 - 233) < 0)
    operator delete(*(void **)(v76 - 256));
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (a74 < 0)
    operator delete(a73);
  if (a21 < 0)
    operator delete(a16);
  if (a60 < 0)
    operator delete(a55);
  if (a53 < 0)
    operator delete(a48);
  if (a27 < 0)
    operator delete(a22);
  if (a46 < 0)
    operator delete(a41);
  if (a39 < 0)
    operator delete(a34);
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v75 & 1) == 0)
    {
LABEL_24:
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a70);
      CoreML::Specification::EmbeddingNDLayerParams::~EmbeddingNDLayerParams((CoreML::Specification::EmbeddingNDLayerParams *)(v76 - 232));
      a72 = (void *)(v76 - 176);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
      a72 = (void *)(v76 - 152);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
      if (*(char *)(v76 - 105) < 0)
        operator delete(*(void **)(v76 - 128));
      _Unwind_Resume(a1);
    }
  }
  else if (!v75)
  {
    goto LABEL_24;
  }
  __cxa_free_exception(v74);
  goto LABEL_24;
}

void sub_19C95BF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  unint64_t v46;
  uint64_t v47;

  STACK[0x200] = v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
  STACK[0x200] = (unint64_t)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
  if (*(char *)(v47 - 233) < 0)
    operator delete(*(void **)(v47 - 256));
  JUMPOUT(0x19C95BF18);
}

void sub_19C95BF9C()
{
  JUMPOUT(0x19C95BF18);
}

void LayerTranslator::addReorganizeData(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::ReorganizeDataLayerParams *v7;
  uint64_t *v8;
  unsigned int v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v18;
  const CoreML::Specification::ReorganizeDataLayerParams *v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  std::runtime_error *v28;
  void *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  std::runtime_error *exception;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  std::runtime_error *v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  std::runtime_error *v64;
  std::string v65;
  std::string v66;
  void *__p[2];
  char v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  int v71;
  uint64_t v72;
  void (**v73)(CoreML::Specification::ReorganizeDataLayerParams *__hidden);
  uint64_t v74;
  uint64_t v75;
  int v76;
  __int128 *v77;
  __int128 *v78;
  uint64_t v79;
  __int128 *v80;
  __int128 *v81;
  uint64_t v82;
  std::string v83;
  _BYTE v84[32];
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  std::string v95;
  int v96;
  _BYTE v97[32];
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  void **v104;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v83.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v5;
  }
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v80, (uint64_t *)&v77, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 345)
  {
    v7 = (const CoreML::Specification::ReorganizeDataLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::ReorganizeDataLayerParams *)&CoreML::Specification::_ReorganizeDataLayerParams_default_instance_;
  }
  CoreML::Specification::ReorganizeDataLayerParams::ReorganizeDataLayerParams((CoreML::Specification::ReorganizeDataLayerParams *)&v73, v7);
  v72 = 0;
  v71 = v75;
  if (v76 <= 1)
  {
    if (v76 != 1)
    {
      v9 = 0x80000000;
      goto LABEL_15;
    }
    v8 = &v72;
LABEL_13:
    *(_DWORD *)v8 = 1;
    goto LABEL_16;
  }
  if (v76 == 2)
  {
    v8 = (uint64_t *)((char *)&v72 + 4);
    LODWORD(v72) = 1;
    goto LABEL_13;
  }
  v9 = 0x7FFFFFFF;
LABEL_15:
  if (v76 == v9)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v89);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Reorganize Data layer: '", 24);
    v43 = *((_QWORD *)a2 + 14);
    v44 = *(char *)(v43 + 23);
    if (v44 >= 0)
      v45 = *((_QWORD *)a2 + 14);
    else
      v45 = *(_QWORD *)v43;
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(v43 + 23);
    else
      v46 = *(_QWORD *)(v43 + 8);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v45, v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"' unknown value for parameter 'mode'.", 37);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, (const std::string *)v97);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_16:
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_depth");
  memset(&v66, 0, sizeof(v66));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v66, v77, v78, 0xAAAAAAAAAAAAAAABLL * (((char *)v78 - (char *)v77) >> 3));
  memset(&v65, 0, sizeof(v65));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v65, v80, v81, 0xAAAAAAAAAAAAAAABLL * (((char *)v81 - (char *)v80) >> 3));
  memset(v84, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v84, (__int128 *)v66.__r_.__value_.__l.__data_, (__int128 *)v66.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66.__r_.__value_.__l.__size_ - v66.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v95, 0, sizeof(v95));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v95, (__int128 *)v65.__r_.__value_.__l.__data_, (__int128 *)v65.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65.__r_.__value_.__l.__size_ - v65.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v89) = (***(uint64_t (****)(_QWORD))(v10[14] + 8))(*(_QWORD *)(v10[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v102 = v69;
  v103 = v70;
  if (v70)
  {
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v89 = 0uLL;
  *(_QWORD *)&v90 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v89, *(__int128 **)v84, *(__int128 **)&v84[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v84[8] - *(_QWORD *)v84) >> 3));
  memset(v97, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v97, (__int128 *)v95.__r_.__value_.__l.__data_, (__int128 *)v95.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95.__r_.__value_.__l.__size_ - v95.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v104 = (void **)v97;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v104);
  v104 = (void **)&v89;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v104);
  v13 = v103;
  if (v103)
  {
    v14 = (unint64_t *)&v103->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (*v10)
    Espresso::sequential_builder::add_shape_from_kernel();
  *(_QWORD *)&v89 = &v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  *(_QWORD *)&v89 = v84;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  *(_QWORD *)&v89 = &v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  *(_QWORD *)&v89 = &v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  if (v68 < 0)
    operator delete(__p[0]);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v80);
  }
  else
  {
    v16 = (uint64_t **)*((_QWORD *)this + 1);
    v17 = std::map<std::string,std::string>::at((uint64_t)v16, v77);
    *(_OWORD *)v97 = *(_OWORD *)v17;
    *(_OWORD *)&v97[16] = *(_OWORD *)(v17 + 16);
    v98 = *(_QWORD *)(v17 + 32);
    v99 = 0;
    v100 = 0;
    v101 = 0;
    v18 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v99, *(const void **)(v17 + 40), *(_QWORD *)(v17 + 48), (uint64_t)(*(_QWORD *)(v17 + 48)- *(_QWORD *)(v17 + 40)) >> 2);
    if (*((_DWORD *)a2 + 35) == 345)
    {
      v19 = (const CoreML::Specification::ReorganizeDataLayerParams *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v18);
      v19 = (const CoreML::Specification::ReorganizeDataLayerParams *)&CoreML::Specification::_ReorganizeDataLayerParams_default_instance_;
    }
    CoreML::Specification::ReorganizeDataLayerParams::ReorganizeDataLayerParams((CoreML::Specification::ReorganizeDataLayerParams *)&v95, v19);
    v20 = v95.__r_.__value_.__r.__words[2];
    if (v96)
    {
      if (*(_DWORD *)&v97[8] != -1
        && *(_DWORD *)&v97[8] % (LODWORD(v95.__r_.__value_.__r.__words[2]) * LODWORD(v95.__r_.__value_.__r.__words[2])))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v89);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Reorganize data layer: '", 24);
        v22 = *((_QWORD *)a2 + 14);
        v23 = *(char *)(v22 + 23);
        if (v23 >= 0)
          v24 = *((_QWORD *)a2 + 14);
        else
          v24 = *(_QWORD *)v22;
        if (v23 >= 0)
          v25 = *(unsigned __int8 *)(v22 + 23);
        else
          v25 = *(_QWORD *)(v22 + 8);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v24, v25);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"': 'blockSize' square must divide channel dimension of the input.", 65);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v27);
        v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v28, (const std::string *)v84);
        __cxa_throw(v28, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    else
    {
      if (*(_DWORD *)&v97[4] != -1 && *(_DWORD *)&v97[4] % SLODWORD(v95.__r_.__value_.__r.__words[2]))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v89);
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Reorganize data layer: '", 24);
        v50 = *((_QWORD *)a2 + 14);
        v51 = *(char *)(v50 + 23);
        if (v51 >= 0)
          v52 = *((_QWORD *)a2 + 14);
        else
          v52 = *(_QWORD *)v50;
        if (v51 >= 0)
          v53 = *(unsigned __int8 *)(v50 + 23);
        else
          v53 = *(_QWORD *)(v50 + 8);
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, v52, v53);
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"': 'blockSize' must divide height dimension of the input.", 57);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v55);
        v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v56, (const std::string *)v84);
        __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (*(_DWORD *)v97 != -1 && *(_DWORD *)v97 % SLODWORD(v95.__r_.__value_.__r.__words[2]))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v89);
        v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Reorganize data layer: '", 24);
        v58 = *((_QWORD *)a2 + 14);
        v59 = *(char *)(v58 + 23);
        if (v59 >= 0)
          v60 = *((_QWORD *)a2 + 14);
        else
          v60 = *(_QWORD *)v58;
        if (v59 >= 0)
          v61 = *(unsigned __int8 *)(v58 + 23);
        else
          v61 = *(_QWORD *)(v58 + 8);
        v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, v60, v61);
        v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"': 'blockSize' must divide width dimension of the input.", 56);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v63);
        v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v64, (const std::string *)v84);
        __cxa_throw(v64, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    v89 = *(_OWORD *)v97;
    v90 = *(_OWORD *)&v97[16];
    v29 = v99;
    v91 = v98;
    v92 = 0;
    v93 = 0;
    v94 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v92, v99, v100, (v100 - (uint64_t)v99) >> 2);
    v30 = v20 * v20;
    if (v96)
    {
      v31 = *(_DWORD *)&v97[4] * v20;
      v32 = *(_DWORD *)v97 * v20;
      v33 = *(_DWORD *)&v97[8] / v30;
    }
    else
    {
      v33 = *(_DWORD *)&v97[8] * v30;
      v31 = *(_DWORD *)&v97[4] / v20;
      v32 = *(_DWORD *)v97 / v20;
    }
    *(_QWORD *)((char *)&v89 + 4) = __PAIR64__(v33, v31);
    LODWORD(v89) = v32;
    if (*(_DWORD *)&v97[8] == -1)
      DWORD2(v89) = -1;
    if (*(_DWORD *)&v97[4] == -1)
      DWORD1(v89) = -1;
    if (*(_DWORD *)v97 == -1)
      LODWORD(v89) = -1;
    *(_OWORD *)v84 = v89;
    *(_OWORD *)&v84[16] = v90;
    v34 = v92;
    v85 = v91;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v35 = v93;
    v36 = (v93 - (uint64_t)v92) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v86, v92, v93, v36);
    EspressoConverter::validateShape((int *)v84, *((_QWORD *)a2 + 14), (uint64_t)v80);
    if (v86)
    {
      v87 = v86;
      operator delete(v86);
    }
    __p[0] = v80;
    v37 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, v80, (__int128 **)__p);
    v38 = v90;
    *(_OWORD *)(v37 + 56) = v89;
    *(_OWORD *)(v37 + 72) = v38;
    *((_QWORD *)v37 + 11) = v91;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v37 + 96, v34, v35, v36);
    if (v34)
      operator delete(v34);
    v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E3D551D8;
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)&v95.__r_.__value_.__l.__size_);
    if (v29)
      operator delete(v29);
  }
  v39 = v70;
  if (v70)
  {
    v40 = (unint64_t *)&v70->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v73 = &off_1E3D551D8;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v74);
  *(_QWORD *)&v89 = &v77;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  *(_QWORD *)&v89 = &v80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
}

void sub_19C95C83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,char a54)
{
  void *v54;
  int v55;
  uint64_t v56;
  void *v58;

  if (a48 < 0)
  {
    operator delete(__p);
    if ((v55 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a54);
      *(_QWORD *)(v56 - 192) = &off_1E3D551D8;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)(v56 - 184));
      v58 = *(void **)(v56 - 120);
      if (v58)
        operator delete(v58);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
      a26 = (char *)&off_1E3D551D8;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a27);
      a26 = &a30;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
      a26 = &a33;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
      if (a41 < 0)
        operator delete(a36);
      _Unwind_Resume(a1);
    }
  }
  else if (!v55)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v54);
  goto LABEL_6;
}

void LayerTranslator::addTile(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  unint64_t *inited;
  uint64_t *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  _QWORD *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  unsigned int v24;
  uint64_t *v25;
  std::string v26;
  std::string v27;
  void *__p;
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  __int128 *v37;
  __int128 *v38;
  uint64_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::string *v50;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v43, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v43.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v5;
  }
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v40, (uint64_t *)&v37, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 920)
  {
    v7 = a2[16];
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    v7 = &CoreML::Specification::_TileLayerParams_default_instance_;
  }
  v8 = *((_DWORD *)v7 + 4);
  if ((int)v8 <= 0)
  {
    v32 = 1;
LABEL_15:
    v33 = 1;
LABEL_16:
    v34 = 1;
LABEL_17:
    v11 = 1;
    v35 = 1;
    goto LABEL_18;
  }
  if (*((_DWORD *)a2 + 35) == 920)
  {
    v9 = a2[16];
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    v9 = &CoreML::Specification::_TileLayerParams_default_instance_;
  }
  v32 = *(_QWORD *)(v9[3] + 8 * (v8 - 1) + 8);
  if (v8 < 2)
    goto LABEL_15;
  if (*((_DWORD *)a2 + 35) == 920)
  {
    v10 = a2[16];
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    v10 = &CoreML::Specification::_TileLayerParams_default_instance_;
  }
  v33 = *(_QWORD *)(v10[3] + 8 * (v8 - 2) + 8);
  if (v8 < 3)
    goto LABEL_16;
  if (*((_DWORD *)a2 + 35) == 920)
  {
    v21 = a2[16];
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    v21 = &CoreML::Specification::_TileLayerParams_default_instance_;
  }
  v34 = *(_QWORD *)(v21[3] + 8 * (v8 - 3) + 8);
  if (v8 < 4)
    goto LABEL_17;
  if (*((_DWORD *)a2 + 35) == 920)
  {
    v22 = a2[16];
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    v22 = &CoreML::Specification::_TileLayerParams_default_instance_;
  }
  v35 = *(_QWORD *)(v22[3] + 8 * (v8 - 4) + 8);
  v23 = v8 >= 5;
  v24 = v8 - 5;
  if (v23)
  {
    if (*((_DWORD *)a2 + 35) == 920)
    {
      v25 = a2[16];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v25 = &CoreML::Specification::_TileLayerParams_default_instance_;
    }
    v11 = *(_DWORD *)(v25[3] + 8 * v24 + 8);
  }
  else
  {
    v11 = 1;
  }
LABEL_18:
  v36 = v11;
  v12 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "tile");
  memset(&v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v27, v37, v38, 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)v37) >> 3));
  memset(&v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v26, v40, v41, 0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (char *)v40) >> 3));
  memset(&v45, 0, sizeof(v45));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v45, (__int128 *)v27.__r_.__value_.__l.__data_, (__int128 *)v27.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27.__r_.__value_.__l.__size_ - v27.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v44, 0, sizeof(v44));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v44, (__int128 *)v26.__r_.__value_.__l.__data_, (__int128 *)v26.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26.__r_.__value_.__l.__size_ - v26.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v47.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v12[14] + 8))(*(_QWORD *)(v12[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v48 = v30;
  v49 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  memset(&v47, 0, sizeof(v47));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v47, (__int128 *)v45.__r_.__value_.__l.__data_, (__int128 *)v45.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45.__r_.__value_.__l.__size_ - v45.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v46, 0, sizeof(v46));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v46, (__int128 *)v44.__r_.__value_.__l.__data_, (__int128 *)v44.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44.__r_.__value_.__l.__size_ - v44.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v50 = &v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  v50 = &v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  v15 = v49;
  if (v49)
  {
    v16 = (unint64_t *)&v49->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*v12)
    Espresso::sequential_builder::add_shape_from_kernel();
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  v18 = v31;
  if (v31)
  {
    v19 = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  if (v29 < 0)
    operator delete(__p);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v40);
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
}

void sub_19C95CF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  a15 = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  a26 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (a37 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void LayerTranslator::addMinBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[3];
  char v17;
  int v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[2] = (void **)897988541;
  v18 = 0;
  v19 = 0;
  v16[0] = (void **)22;
  v16[1] = (void **)1065353216;
  v17 = 1;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C95D1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addUpperTriangular(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  int v8;
  int v9;
  BOOL v10;
  BOOL v11;
  int v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::string v17;
  std::string v18;
  void *__p[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  _DWORD v23[3];
  BOOL v24;
  int v25;
  void **v26;
  __int128 *v27;
  uint64_t v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  std::string v32;
  std::string *v33;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v32.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v29, (uint64_t *)&v26, *((_QWORD *)this + 1));
  v25 = 0;
  if (*((_DWORD *)a2 + 35) == 1325)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_UpperTriangularLayerParams_default_instance_;
  }
  v8 = *((_DWORD *)v7 + 4);
  v9 = v8 - 1;
  v10 = v8 <= 0;
  v11 = v8 > 0;
  if (v8 <= 0)
    v12 = -v8;
  else
    v12 = -1;
  if (v10)
    v9 = -1;
  v24 = v11;
  v23[0] = v12;
  v23[1] = v9;
  v23[2] = 1;
  v13 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "matrix_band_part");
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, (__int128 *)v26, v27, 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, v29, v30, 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v29) >> 3));
  Espresso::sequential_builder::add<Espresso::matrix_band_part_params_t>(&v21, v13, (uint64_t)__p, (uint64_t)&v32, (uint64_t)v23, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, (__int128 **)&v17);
  v14 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v33 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  v33 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  if (v20 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v29);
  __p[0] = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v26 = (void **)&v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v26);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_19C95D480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v27 - 40) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  *(_QWORD *)(v27 - 40) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  if (a20 < 0)
    operator delete(__p);
  __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v27 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::matrix_band_part_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C95D700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addCopy(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  void *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  std::string v23;
  std::string v24;
  int v25;
  void *__p;
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 *v33;
  __int128 *v34;
  uint64_t v35;
  std::string v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  void *v40[3];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  std::string v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  void **v56;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v36.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v5;
  }
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v33, (uint64_t *)&v30, *((_QWORD *)this + 1));
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "copy");
  v25 = 0;
  memset(&v24, 0, sizeof(v24));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  memset(&v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
  *(_QWORD *)&v38 = 0;
  v37 = 0uLL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v37, (__int128 *)v24.__r_.__value_.__l.__data_, (__int128 *)v24.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24.__r_.__value_.__l.__size_ - v24.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v53, 0, sizeof(v53));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v53, (__int128 *)v23.__r_.__value_.__l.__data_, (__int128 *)v23.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23.__r_.__value_.__l.__size_ - v23.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v47) = (***(uint64_t (****)(_QWORD))(v6[14] + 8))(*(_QWORD *)(v6[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v54 = v28;
  v55 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v47 = 0uLL;
  *(_QWORD *)&v48 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v47, (__int128 *)v37, *((__int128 **)&v37 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3));
  v41 = 0uLL;
  *(_QWORD *)&v42 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v41, (__int128 *)v53.__r_.__value_.__l.__data_, (__int128 *)v53.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53.__r_.__value_.__l.__size_ - v53.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v56 = (void **)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v56);
  v56 = (void **)&v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v56);
  v9 = v55;
  if (v55)
  {
    v10 = (unint64_t *)&v55->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (*v6)
    Espresso::sequential_builder::add_shape_from_kernel();
  *(_QWORD *)&v47 = &v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  *(_QWORD *)&v47 = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  v12 = v29;
  if (v29)
  {
    v13 = (unint64_t *)&v29->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)&v47 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  *(_QWORD *)&v47 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  if (v27 < 0)
    operator delete(__p);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v33);
  }
  else
  {
    v15 = (uint64_t **)*((_QWORD *)this + 1);
    v16 = std::map<std::string,std::string>::at((uint64_t)v15, v30);
    v47 = *(_OWORD *)v16;
    v48 = *(_OWORD *)(v16 + 16);
    v49 = *(_QWORD *)(v16 + 32);
    v50 = 0;
    v51 = 0;
    v52 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v50, *(const void **)(v16 + 40), *(_QWORD *)(v16 + 48), (uint64_t)(*(_QWORD *)(v16 + 48) - *(_QWORD *)(v16 + 40)) >> 2);
    v41 = v47;
    v42 = v48;
    v17 = v50;
    v43 = v49;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v44, v50, v51, (v51 - (uint64_t)v50) >> 2);
    v37 = v41;
    v38 = v42;
    v18 = v44;
    v39 = v43;
    memset(v40, 0, sizeof(v40));
    v19 = v45;
    v20 = (v45 - (uint64_t)v44) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v40, v44, v45, v20);
    EspressoConverter::validateShape((int *)&v37, *((_QWORD *)a2 + 14), (uint64_t)v33);
    if (v40[0])
      operator delete(v40[0]);
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
    v21 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, v33, (__int128 **)&v53);
    v22 = v42;
    *(_OWORD *)(v21 + 56) = v41;
    *(_OWORD *)(v21 + 72) = v22;
    *((_QWORD *)v21 + 11) = v43;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v21 + 96, v18, v19, v20);
    if (v18)
      operator delete(v18);
    if (v17)
      operator delete(v17);
  }
  *(_QWORD *)&v47 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  *(_QWORD *)&v47 = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void sub_19C95DBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char **a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p)
{
  void *v42;
  void *v43;

  if (__p)
  {
    operator delete(__p);
    if (!v43)
    {
LABEL_3:
      if (!v42)
      {
LABEL_8:
        a16 = &a24;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
        a24 = &a27;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
        if (a35 < 0)
          operator delete(a30);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v42);
      goto LABEL_8;
    }
  }
  else if (!v43)
  {
    goto LABEL_3;
  }
  operator delete(v43);
  if (!v42)
    goto LABEL_8;
  goto LABEL_7;
}

void LayerTranslator::addSoftmaxND(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  void *__p;
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  int v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 *v27;
  __int128 *v28;
  uint64_t v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::string *v37;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v30.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v5;
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v27, (uint64_t *)&v24, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 950)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_SoftmaxNDLayerParams_default_instance_;
  }
  v23 = v7[2];
  v8 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "softmax_nd");
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, v24, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v24) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
  memset(&v32, 0, sizeof(v32));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v31, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v34.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v8[14] + 8))(*(_QWORD *)(v8[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v35 = v21;
  v36 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  memset(&v34, 0, sizeof(v34));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v34, (__int128 *)v32.__r_.__value_.__l.__data_, (__int128 *)v32.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v33, 0, sizeof(v33));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v33, (__int128 *)v31.__r_.__value_.__l.__data_, (__int128 *)v31.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31.__r_.__value_.__l.__size_ - v31.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v37 = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v37 = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v11 = v36;
  if (v36)
  {
    v12 = (unint64_t *)&v36->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (*v8)
    Espresso::sequential_builder::add_shape_from_kernel();
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (v20 < 0)
    operator delete(__p);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v27);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_19C95E08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  uint64_t v36;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  *(_QWORD *)(v36 - 56) = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = v36 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  if (a20 < 0)
    operator delete(__p);
  __p = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a24 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(a1);
}

void LayerTranslator::addMatrixBandPart(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  unint64_t *inited;
  int v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string v14;
  std::string v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _DWORD v20[3];
  char v21;
  int v22;
  void **v23;
  __int128 *v24;
  uint64_t v25;
  __int128 *v26;
  __int128 *v27;
  uint64_t v28;
  std::string v29;
  std::string *v30;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v29.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v5;
  }
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v26, (uint64_t *)&v23, *((_QWORD *)this + 1));
  v22 = 0;
  v20[2] = 1;
  v21 = 0;
  if (*((_DWORD *)a2 + 35) == 1315)
  {
    v7 = a2[16];
    v20[0] = v7[2];
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v9 = *((_DWORD *)a2 + 35);
    v20[0] = qword_1ED0057B8;
    if (v9 == 1315)
    {
      v7 = a2[16];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v7 = &CoreML::Specification::_MatrixBandPartLayerParams_default_instance_;
    }
  }
  v20[1] = v7[3];
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "matrix_band_part");
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (__int128 *)v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, v26, v27, 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 3));
  Espresso::sequential_builder::add<Espresso::matrix_band_part_params_t>(&v18, v10, (uint64_t)__p, (uint64_t)&v29, (uint64_t)v20, (__int128 *)v15.__r_.__value_.__l.__data_, (__int128 *)v15.__r_.__value_.__l.__size_, (__int128 **)&v14);
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v30 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  v30 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (v17 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v26);
  __p[0] = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v23 = (void **)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v23);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_19C95E3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v27 - 40) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  *(_QWORD *)(v27 - 40) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  if (a20 < 0)
    operator delete(__p);
  __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v27 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addAdd(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  std::string *v11;
  std::string *v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  __int128 *v16;
  std::string *v17;
  __int128 v18;
  __int128 *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::string *v25;
  std::string::size_type size;
  std::string *v27;
  __int128 v28;
  unint64_t *p_shared_owners;
  uint64_t **v30;
  __int128 *v31;
  __int128 *v32;
  __int128 *v33;
  std::string *v34;
  __int128 *v35;
  void **v36;
  char *v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  const CoreML::Specification::NeuralNetworkLayer *v41;
  std::string v42;
  std::string v43;
  std::string v44;
  void *v45[2];
  std::string::size_type v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  std::string v49;
  std::string v50;
  void *__p[2];
  char v52;
  void (**v53)(CoreML::Specification::AddLayerParams *__hidden);
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  __int128 *v59;
  __int128 *v60;
  uint64_t v61;
  std::string *v62;
  __int128 *v63;
  uint64_t v64;
  std::string v65;
  std::string *v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  void *v70[4];
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  void **v75;
  std::string *v76;
  unint64_t v77;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v65, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v65.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v5;
  }
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v62, (uint64_t *)&v59, *((_QWORD *)this + 1));
  EspressoConverter::splitElementwiseLayer((uint64_t)&v57, &v59, (uint64_t)v62);
  v41 = (const CoreML::Specification::NeuralNetworkLayer *)a2;
  if (*((_DWORD *)a2 + 35) == 230)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_AddLayerParams_default_instance_;
  }
  v53 = &off_1E3D4E660;
  v54 = 0;
  v56 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v54, v8 & 0xFFFFFFFFFFFFFFFELL);
  v55 = *((_DWORD *)v7 + 4);
  v9 = v57;
  if (v58 != v57)
  {
    for (i = 0; i < 0x8E38E38E38E38E39 * ((v58 - v57) >> 3); ++i)
    {
      *(_QWORD *)&v72 = 897988541;
      BYTE8(v72) = 0;
      *(_QWORD *)((char *)&v74 + 4) = 0;
      *(_QWORD *)&v71 = 0;
      *((_QWORD *)&v71 + 1) = 1065353216;
      v67 = 0uLL;
      *(_QWORD *)&v68 = 0;
      v75 = 0;
      v76 = 0;
      v77 = 0;
      if ((char *)v60 - (char *)v59 == 24)
      {
        DWORD2(v71) = v55;
        *((_QWORD *)&v67 + 1) = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v67, v59);
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v75, v62, v63, 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)v62) >> 3));
      }
      else
      {
        v11 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v67, (__int128 *)(v9 + 72 * i));
        v12 = v11;
        *((_QWORD *)&v67 + 1) = v11;
        v13 = (__int128 *)(v57 + 72 * i + 24);
        if ((unint64_t)v11 >= (unint64_t)v68)
        {
          v15 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v67, v13);
        }
        else
        {
          if (*(char *)(v57 + 72 * i + 47) < 0)
          {
            std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v13, *(_QWORD *)(v57 + 72 * i + 32));
          }
          else
          {
            v14 = *v13;
            v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v57 + 72 * i + 40);
            *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
          }
          v15 = (uint64_t)&v12[1];
        }
        *((_QWORD *)&v67 + 1) = v15;
        v16 = (__int128 *)(v57 + 72 * i + 48);
        v17 = v76;
        if ((unint64_t)v76 >= v77)
        {
          v19 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v75, v16);
        }
        else
        {
          if (*(char *)(v57 + 72 * i + 71) < 0)
          {
            std::string::__init_copy_ctor_external(v76, *(const std::string::value_type **)v16, *(_QWORD *)(v57 + 72 * i + 56));
          }
          else
          {
            v18 = *v16;
            v76->__r_.__value_.__r.__words[2] = *(_QWORD *)(v57 + 72 * i + 64);
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
          }
          v19 = (__int128 *)&v17[1];
        }
        v76 = (std::string *)v19;
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v60 - (char *)v59) >> 3) > 2)
      {
        v24 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
        std::to_string(&v44, i);
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v65;
        else
          v25 = (std::string *)v65.__r_.__value_.__r.__words[0];
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
        else
          size = v65.__r_.__value_.__l.__size_;
        v27 = std::string::insert(&v44, 0, (const std::string::value_type *)v25, size);
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v46 = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)v45 = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        memset(&v43, 0, sizeof(v43));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v43, (__int128 *)v67, *((__int128 **)&v67 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v67 + 1) - v67) >> 3));
        memset(&v42, 0, sizeof(v42));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v42, (__int128 *)v75, (__int128 *)v76, 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (char *)v75) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v47, v24, (uint64_t)__p, (uint64_t)v45, (uint64_t)&v71, (__int128 *)v43.__r_.__value_.__l.__data_, (__int128 *)v43.__r_.__value_.__l.__size_, (__int128 **)&v42);
        v66 = &v42;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
        v66 = &v43;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
        if (SHIBYTE(v46) < 0)
          operator delete(v45[0]);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        if (v52 < 0)
          operator delete(__p[0]);
        v21 = v48;
        if (!v48)
          goto LABEL_50;
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
      }
      else
      {
        v20 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
        memset(&v50, 0, sizeof(v50));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v50, (__int128 *)v67, *((__int128 **)&v67 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v67 + 1) - v67) >> 3));
        memset(&v49, 0, sizeof(v49));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v49, (__int128 *)v75, (__int128 *)v76, 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (char *)v75) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)v45, v20, (uint64_t)__p, (uint64_t)&v65, (uint64_t)&v71, (__int128 *)v50.__r_.__value_.__l.__data_, (__int128 *)v50.__r_.__value_.__l.__size_, (__int128 **)&v49);
        v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
        v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
        if (v52 < 0)
          operator delete(__p[0]);
        v21 = (std::__shared_weak_count *)v45[1];
        if (!v45[1])
          goto LABEL_50;
        v22 = (unint64_t *)((char *)v45[1] + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
      }
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
LABEL_50:
      __p[0] = &v75;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v75 = (void **)&v67;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v75);
      v9 = v57;
    }
  }
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v62);
  }
  else
  {
    v30 = (uint64_t **)*((_QWORD *)this + 1);
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v32 = v59;
    v31 = v60;
    if (v59 == v60)
    {
      v35 = 0;
      v36 = 0;
    }
    else
    {
      do
      {
        v33 = (__int128 *)std::map<std::string,std::string>::at((uint64_t)v30, v32);
        v34 = v76;
        if ((unint64_t)v76 >= v77)
        {
          v35 = (__int128 *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v75, v33);
        }
        else
        {
          std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v75, v33);
          v35 = (__int128 *)&v34[2].__r_.__value_.__r.__words[2];
        }
        v76 = (std::string *)v35;
        v32 = (__int128 *)((char *)v32 + 24);
      }
      while (v32 != v31);
      v36 = v75;
    }
    EspressoConverter::computeMaxShape((uint64_t)&v71, (uint64_t)v36, (uint64_t)v35);
    v67 = v71;
    v68 = v72;
    v37 = (char *)v74;
    v69 = v73;
    memset(v70, 0, 24);
    v38 = *((_QWORD *)&v74 + 1);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v70, (const void *)v74, *((uint64_t *)&v74 + 1), (uint64_t)(*((_QWORD *)&v74 + 1) - v74) >> 2);
    EspressoConverter::validateShape((int *)&v67, *((_QWORD *)v41 + 14), (uint64_t)v62);
    if (v70[0])
      operator delete(v70[0]);
    __p[0] = v62;
    v39 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v30, v62, (__int128 **)__p);
    v40 = v72;
    *(_OWORD *)(v39 + 56) = v71;
    *(_OWORD *)(v39 + 72) = v40;
    *((_QWORD *)v39 + 11) = v73;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v39 + 96, v37, v38, (v38 - (uint64_t)v37) >> 2);
    if (v37)
      operator delete(v37);
    *(_QWORD *)&v71 = &v75;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  }
  v53 = &off_1E3D4E660;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v54);
  *(_QWORD *)&v71 = &v57;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  *(_QWORD *)&v71 = &v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  *(_QWORD *)&v71 = &v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
}

void sub_19C95EAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p)
{
  void *v59;
  uint64_t v60;

  if (__p)
    operator delete(__p);
  if (v59)
    operator delete(v59);
  *(_QWORD *)(v60 - 200) = v60 - 136;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 200));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(a11);
  *(_QWORD *)(v60 - 200) = &a38;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 200));
  *(_QWORD *)(v60 - 200) = &a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 200));
  *(_QWORD *)(v60 - 200) = &a44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 200));
  if (a52 < 0)
    operator delete(a47);
  _Unwind_Resume(a1);
}

void LayerTranslator::addTranspose(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  int v8;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *inited;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  int v14;
  uint64_t *v15;
  int32x2_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::string v21;
  std::string v22;
  void *__p[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  _QWORD v27[2];
  int v28;
  void **v29;
  __int128 *v30;
  uint64_t v31;
  __int128 *v32;
  __int128 *v33;
  uint64_t v34;
  std::string v35;
  std::string *v36;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v35.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v5;
  }
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v32, (uint64_t *)&v29, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 985)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_TransposeLayerParams_default_instance_;
  }
  v8 = *((_DWORD *)v7 + 4);
  inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)operator new(0x14uLL);
  v10 = inited;
  v11 = 0;
  v12 = 5 - v8;
  do
  {
    *(_DWORD *)((char *)inited + v11) = 0;
    v11 += 4;
  }
  while (v11 != 20);
  for (i = 0; i != 5; ++i)
  {
    if (i >= v12)
    {
      if (*((_DWORD *)a2 + 35) == 985)
      {
        v15 = a2[16];
      }
      else
      {
        inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
        v15 = &CoreML::Specification::_TransposeLayerParams_default_instance_;
      }
      v14 = v12 + *(_QWORD *)(v15[3] + 8 - 8 * v12 + 8 * i);
    }
    else
    {
      v14 = i;
    }
    *((_DWORD *)v10 + i) = v14;
  }
  v16 = vrev64_s32(vsub_s32((int32x2_t)0x400000004, *(int32x2_t *)((char *)v10 + 4)));
  v27[0] = vrev64_s32(vsub_s32((int32x2_t)0x400000004, *(int32x2_t *)((char *)v10 + 12)));
  v27[1] = v16;
  v28 = 4 - *(_DWORD *)v10;
  v17 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
  memset(&v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, (__int128 *)v29, v30, 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v29) >> 3));
  memset(&v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, v32, v33, 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - (char *)v32) >> 3));
  Espresso::sequential_builder::add<Espresso::transpose_params_t>(&v25, v17, (uint64_t)__p, (uint64_t)&v35, (uint64_t)v27, (__int128 *)v22.__r_.__value_.__l.__data_, (__int128 *)v22.__r_.__value_.__l.__size_, (__int128 **)&v21);
  v18 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v36 = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  v36 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  if (v24 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v32);
  operator delete(v10);
  __p[0] = &v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v29 = (void **)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v29);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
}

void sub_19C95EF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v29 - 89) < 0)
    operator delete(*(void **)(v29 - 112));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::transpose_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C95F1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void EspressoConverter::setRecurrentWeightBlob(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, const void **a5, const void **a6)
{
  int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int WeightParamSizeInBytes;
  uint64_t v26;
  size_t v27;
  std::string *v28;
  const void *v29;
  std::string *v30;
  std::string::size_type size;
  std::string *v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  size_t v42;
  std::string *v43;
  const void *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::string::size_type v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::runtime_error *v58;
  std::runtime_error *exception;
  uint64_t v60[2];
  std::string v61;
  std::string v62;
  void *__p[2];
  std::string::size_type v64;
  std::string v65;

  v9 = a3;
  v12 = *(_QWORD *)(a1 + 40);
  if (*(char *)(v12 + 23) < 0)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = *(unsigned __int8 *)(v12 + 23);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0)
    v16 = *(_QWORD *)(v14 + 8);
  else
    v16 = *(unsigned __int8 *)(v14 + 23);
  v17 = *(_DWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 56);
  if (*(char *)(v18 + 23) < 0)
    v19 = *(_QWORD *)(v18 + 8);
  else
    v19 = *(unsigned __int8 *)(v18 + 23);
  if (v17 <= 0)
    v20 = 1;
  else
    v20 = 2;
  if (v13)
    v21 = v20;
  else
    v21 = v17 > 0;
  if (v16)
    ++v21;
  if (v19)
    ++v21;
  if (v17 > 0 || v21 != 1)
    goto LABEL_81;
  if ((*(_BYTE *)(v12 + 23) & 0x80) != 0)
  {
    if (*(_QWORD *)(v12 + 8))
      goto LABEL_81;
  }
  else if (*(_BYTE *)(v12 + 23))
  {
    goto LABEL_81;
  }
  if ((v15 & 0x80) != 0)
    v15 = *(_QWORD *)(v14 + 8);
  if ((uint64_t *)a1 != &CoreML::Specification::_WeightParams_default_instance_)
  {
    if (v15)
    {
      v22 = *(_QWORD *)(a1 + 64);
      if (v22)
      {
        v23 = a4 * a3;
        v24 = *(_QWORD *)(v22 + 16);
        WeightParamSizeInBytes = EspressoConverter::getWeightParamSizeInBytes((uint64_t *)a1);
        if (!CoreML::hasSufficientBytesInQuantizedWeightParam((uint64_t *)a1, v23))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v65.__r_.__value_.__l.__data_, a5, " layer : insufficient units in quantized weight byte stream");
          std::runtime_error::runtime_error(exception, &v65);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v26 = WeightParamSizeInBytes;
        CoreML::copySpecArrayStringToVector(&v65, (char *)v14, WeightParamSizeInBytes);
        if (*((char *)a6 + 23) >= 0)
          v27 = *((unsigned __int8 *)a6 + 23);
        else
          v27 = (size_t)a6[1];
        v28 = &v62;
        std::string::basic_string[abi:ne180100]((uint64_t)&v62, v27 + 2);
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v28 = (std::string *)v62.__r_.__value_.__r.__words[0];
        if (v27)
        {
          if (*((char *)a6 + 23) >= 0)
            v29 = a6;
          else
            v29 = *a6;
          memmove(v28, v29, v27);
        }
        strcpy((char *)v28 + v27, "_U");
        std::to_string(&v61, v24);
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v61;
        else
          v30 = (std::string *)v61.__r_.__value_.__r.__words[0];
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
        else
          size = v61.__r_.__value_.__l.__size_;
        v32 = std::string::append(&v62, (const std::string::value_type *)v30, size);
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v64 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v61.__r_.__value_.__l.__data_);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        v34 = *a2;
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = 0uLL;
        (*(void (**)(uint64_t, std::string *, void **, std::string::size_type, uint64_t, _QWORD))(*(_QWORD *)v34 + 168))(v34, &v62, __p, v65.__r_.__value_.__r.__words[0], v26, 0);
        v35 = (std::__shared_weak_count *)v62.__r_.__value_.__l.__size_;
        if (v62.__r_.__value_.__l.__size_)
        {
          v36 = (unint64_t *)(v62.__r_.__value_.__l.__size_ + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v38 = *a2;
        v39 = (std::__shared_weak_count *)a2[1];
        v60[0] = v38;
        v60[1] = (uint64_t)v39;
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
        }
        if (*((char *)a6 + 23) >= 0)
          v42 = *((unsigned __int8 *)a6 + 23);
        else
          v42 = (size_t)a6[1];
        v43 = &v62;
        std::string::basic_string[abi:ne180100]((uint64_t)&v62, v42 + 1);
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v43 = (std::string *)v62.__r_.__value_.__r.__words[0];
        if (v42)
        {
          if (*((char *)a6 + 23) >= 0)
            v44 = a6;
          else
            v44 = *a6;
          memmove(v43, v44, v42);
        }
        *(_WORD *)((char *)&v43->__r_.__value_.__l.__data_ + v42) = 95;
        CoreML::setQuantizationParams((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)a1, v60, a4, (const void **)&v62.__r_.__value_.__l.__data_);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        if (v39)
        {
          v45 = (unint64_t *)&v39->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        if (SHIBYTE(v64) < 0)
          operator delete(__p[0]);
        if (v65.__r_.__value_.__r.__words[0])
        {
          v65.__r_.__value_.__l.__size_ = v65.__r_.__value_.__r.__words[0];
          operator delete(v65.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
  }
LABEL_81:
  v47 = a4 * a3;
  if (a4 * a3 != (int)EspressoConverter::getWeightParamSize(a1))
  {
    v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v65.__r_.__value_.__l.__data_, a5, " layer: weight size incorrect");
    std::runtime_error::runtime_error(v58, &v65);
    __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v65, v9, a4, 1, 1);
  v48 = v65.__r_.__value_.__r.__words[0];
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v65.__r_.__value_.__r.__words[0] + 24), (_QWORD *)a1, 4 * v47);
  v49 = 0;
  v50 = *a2;
  __p[0] = 0;
  __p[1] = 0;
  v51 = *(int *)(v48 + 8);
  do
  {
    v51 *= *(int *)(v48 + 12 + v49);
    v49 += 4;
  }
  while (v49 != 12);
  (*(void (**)(uint64_t, void **, const void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v50 + 168))(v50, __p, a6, *(_QWORD *)(v48 + 24), 4 * v51, 0);
  v52 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v53 = (unint64_t *)((char *)__p[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)v65.__r_.__value_.__l.__size_;
  if (v65.__r_.__value_.__l.__size_)
  {
    v56 = (unint64_t *)(v65.__r_.__value_.__l.__size_ + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_19C95F744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  int v35;

  if (a34 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

void EspressoConverter::setFourRecurrentWeightBlobs(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, unint64_t a7, const void **a8, const void **a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  BOOL v78;
  uint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  int WeightParamSizeInBytes;
  unint64_t v86;
  char *v87;
  void *v88;
  const void **v89;
  const void **v90;
  const void **v91;
  const void **v92;
  size_t v93;
  std::string *v94;
  const void *v95;
  std::string *v96;
  std::string::size_type size;
  std::string *v98;
  __int128 v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t *v104;
  int v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t *v113;
  int WeightParamSize;
  unint64_t v115;
  int v116;
  std::string::size_type v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  char v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  size_t v131;
  std::string *v132;
  const void *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v142;
  uint64_t *v143;
  uint64_t *v144;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v145;
  uint64_t *v146;
  uint64_t *v147;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t v151;
  size_t v152;
  void *p_p;
  const void *v154;
  std::__shared_weak_count *v155;
  unint64_t *p_shared_owners;
  unint64_t v157;
  uint64_t v158;
  size_t v159;
  void *v160;
  const void *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t *v169;
  std::runtime_error *exception;
  std::runtime_error *v171;
  std::runtime_error *v172;
  std::runtime_error *v173;
  std::runtime_error *v174;
  std::runtime_error *v175;
  uint64_t *v176;
  uint64_t *v179;
  uint64_t *v180;
  void *__p;
  std::__shared_weak_count *v182;
  char v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  std::string v190;
  std::string v191;
  char *v192;
  std::__shared_weak_count *v193;
  std::string v194;

  v16 = a1[5];
  if (*(char *)(v16 + 23) < 0)
    v17 = *(_QWORD *)(v16 + 8);
  else
    v17 = *(unsigned __int8 *)(v16 + 23);
  v18 = a1[6];
  v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0)
    v20 = *(_QWORD *)(v18 + 8);
  else
    v20 = *(unsigned __int8 *)(v18 + 23);
  v21 = *((_DWORD *)a1 + 4);
  v22 = a1[7];
  v23 = *(unsigned __int8 *)(v22 + 23);
  if (*(char *)(v22 + 23) < 0)
    v24 = *(_QWORD *)(v22 + 8);
  else
    v24 = *(unsigned __int8 *)(v22 + 23);
  if (v21 <= 0)
    v25 = 1;
  else
    v25 = 2;
  if (v17)
    v26 = v25;
  else
    v26 = v21 > 0;
  if (v20)
    ++v26;
  if (v24)
    v27 = v26 + 1;
  else
    v27 = v26;
  if (v27 > 1)
  {
    v28 = 4;
    goto LABEL_49;
  }
  if (v27)
    v28 = 0;
  else
    v28 = 5;
  if (v21 <= 0 && v27)
  {
    if ((*(_BYTE *)(v16 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v16 + 8))
        goto LABEL_30;
    }
    else if (*(_BYTE *)(v16 + 23))
    {
LABEL_30:
      v28 = 1;
      goto LABEL_49;
    }
    if ((v19 & 0x80) != 0)
      v19 = *(_QWORD *)(v18 + 8);
    v29 = a1[8];
    if (a1 != &CoreML::Specification::_WeightParams_default_instance_ && v19 && v29)
    {
      v28 = 2;
    }
    else
    {
      if ((v23 & 0x80) != 0)
        v23 = *(_QWORD *)(v22 + 8);
      if (v29)
        v30 = v23 == 0;
      else
        v30 = 1;
      if (v30 || a1 == &CoreML::Specification::_WeightParams_default_instance_)
        v28 = 5;
      else
        v28 = 3;
    }
  }
LABEL_49:
  v32 = a2[5];
  if (*(char *)(v32 + 23) < 0)
    v33 = *(_QWORD *)(v32 + 8);
  else
    v33 = *(unsigned __int8 *)(v32 + 23);
  v34 = a2[6];
  v35 = *(unsigned __int8 *)(v34 + 23);
  if (*(char *)(v34 + 23) < 0)
    v36 = *(_QWORD *)(v34 + 8);
  else
    v36 = *(unsigned __int8 *)(v34 + 23);
  v37 = *((_DWORD *)a2 + 4);
  v38 = a2[7];
  v39 = *(unsigned __int8 *)(v38 + 23);
  if (*(char *)(v38 + 23) < 0)
    v40 = *(_QWORD *)(v38 + 8);
  else
    v40 = *(unsigned __int8 *)(v38 + 23);
  if (v37 <= 0)
    v41 = 1;
  else
    v41 = 2;
  if (v33)
    v42 = v41;
  else
    v42 = v37 > 0;
  if (v36)
    ++v42;
  if (v40)
    v43 = v42 + 1;
  else
    v43 = v42;
  if (v43 > 1)
  {
    v44 = 4;
    goto LABEL_97;
  }
  if (v43)
    v44 = 0;
  else
    v44 = 5;
  if (v37 <= 0 && v43)
  {
    if ((*(_BYTE *)(v32 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v32 + 8))
        goto LABEL_78;
    }
    else if (*(_BYTE *)(v32 + 23))
    {
LABEL_78:
      v44 = 1;
      goto LABEL_97;
    }
    if ((v35 & 0x80) != 0)
      v35 = *(_QWORD *)(v34 + 8);
    v45 = a2[8];
    if (a2 != &CoreML::Specification::_WeightParams_default_instance_ && v35 && v45)
    {
      v44 = 2;
    }
    else
    {
      if ((v39 & 0x80) != 0)
        v39 = *(_QWORD *)(v38 + 8);
      if (v45)
        v46 = v39 == 0;
      else
        v46 = 1;
      if (v46 || a2 == &CoreML::Specification::_WeightParams_default_instance_)
        v44 = 5;
      else
        v44 = 3;
    }
  }
LABEL_97:
  if (v28 != v44)
    goto LABEL_371;
  v48 = a3[5];
  if (*(char *)(v48 + 23) < 0)
    v49 = *(_QWORD *)(v48 + 8);
  else
    v49 = *(unsigned __int8 *)(v48 + 23);
  v50 = a3[6];
  v51 = *(unsigned __int8 *)(v50 + 23);
  if (*(char *)(v50 + 23) < 0)
    v52 = *(_QWORD *)(v50 + 8);
  else
    v52 = *(unsigned __int8 *)(v50 + 23);
  v53 = *((_DWORD *)a3 + 4);
  v54 = a3[7];
  v55 = *(unsigned __int8 *)(v54 + 23);
  if (*(char *)(v54 + 23) < 0)
    v56 = *(_QWORD *)(v54 + 8);
  else
    v56 = *(unsigned __int8 *)(v54 + 23);
  if (v53 <= 0)
    v57 = 1;
  else
    v57 = 2;
  if (v49)
    v58 = v57;
  else
    v58 = v53 > 0;
  if (v52)
    ++v58;
  if (v56)
    v59 = v58 + 1;
  else
    v59 = v58;
  if (v59 > 1)
  {
    v60 = 4;
    goto LABEL_146;
  }
  if (v59)
    v60 = 0;
  else
    v60 = 5;
  if (v53 <= 0 && v59)
  {
    if ((*(_BYTE *)(v48 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v48 + 8))
        goto LABEL_127;
    }
    else if (*(_BYTE *)(v48 + 23))
    {
LABEL_127:
      v60 = 1;
      goto LABEL_146;
    }
    if ((v51 & 0x80) != 0)
      v51 = *(_QWORD *)(v50 + 8);
    v61 = a3[8];
    if (a3 != &CoreML::Specification::_WeightParams_default_instance_ && v51 && v61)
    {
      v60 = 2;
    }
    else
    {
      if ((v55 & 0x80) != 0)
        v55 = *(_QWORD *)(v54 + 8);
      if (v61)
        v62 = v55 == 0;
      else
        v62 = 1;
      if (v62 || a3 == &CoreML::Specification::_WeightParams_default_instance_)
        v60 = 5;
      else
        v60 = 3;
    }
  }
LABEL_146:
  if (v28 != v60)
    goto LABEL_371;
  v64 = a4[5];
  if (*(char *)(v64 + 23) < 0)
    v65 = *(_QWORD *)(v64 + 8);
  else
    v65 = *(unsigned __int8 *)(v64 + 23);
  v66 = a4[6];
  v67 = *(unsigned __int8 *)(v66 + 23);
  if (*(char *)(v66 + 23) < 0)
    v68 = *(_QWORD *)(v66 + 8);
  else
    v68 = *(unsigned __int8 *)(v66 + 23);
  v69 = *((_DWORD *)a4 + 4);
  v70 = a4[7];
  v71 = *(unsigned __int8 *)(v70 + 23);
  if (*(char *)(v70 + 23) < 0)
    v72 = *(_QWORD *)(v70 + 8);
  else
    v72 = *(unsigned __int8 *)(v70 + 23);
  if (v69 <= 0)
    v73 = 1;
  else
    v73 = 2;
  if (v65)
    v74 = v73;
  else
    v74 = v69 > 0;
  if (v68)
    ++v74;
  if (v72)
    v75 = v74 + 1;
  else
    v75 = v74;
  if (v75 > 1)
  {
    v76 = 4;
    goto LABEL_195;
  }
  if (v75)
    v76 = 0;
  else
    v76 = 5;
  if (v69 <= 0 && v75)
  {
    if ((*(_BYTE *)(v64 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v64 + 8))
        goto LABEL_176;
    }
    else if (*(_BYTE *)(v64 + 23))
    {
LABEL_176:
      v76 = 1;
      goto LABEL_195;
    }
    if ((v67 & 0x80) != 0)
      v67 = *(_QWORD *)(v66 + 8);
    v77 = a4[8];
    if (a4 != &CoreML::Specification::_WeightParams_default_instance_ && v67 && v77)
    {
      v76 = 2;
    }
    else
    {
      if ((v71 & 0x80) != 0)
        v71 = *(_QWORD *)(v70 + 8);
      if (v77)
        v78 = v71 == 0;
      else
        v78 = 1;
      if (v78 || a4 == &CoreML::Specification::_WeightParams_default_instance_)
        v76 = 5;
      else
        v76 = 3;
    }
  }
LABEL_195:
  if (v28 != v76)
  {
LABEL_371:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v194.__r_.__value_.__l.__data_, a8, " layer : all the weight matrices must have same type");
    std::runtime_error::runtime_error(exception, &v194);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v28 == 2)
  {
    v80 = (uint64_t *)a1[8];
    if (!v80)
      v80 = &CoreML::Specification::_QuantizationParams_default_instance_;
    v81 = v80[2];
    v82 = (uint64_t *)a2[8];
    if (!v82)
      v82 = &CoreML::Specification::_QuantizationParams_default_instance_;
    if (v81 != v82[2])
      goto LABEL_373;
    v83 = (uint64_t *)a3[8];
    if (!v83)
      v83 = &CoreML::Specification::_QuantizationParams_default_instance_;
    if (v81 != v83[2])
      goto LABEL_373;
    v84 = (uint64_t *)a4[8];
    if (!v84)
      v84 = &CoreML::Specification::_QuantizationParams_default_instance_;
    if (v81 != v84[2])
    {
LABEL_373:
      v172 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v194.__r_.__value_.__l.__data_, a8, " layer : all the weight matrices must have same quantization level");
      std::runtime_error::runtime_error(v172, &v194);
      __cxa_throw(v172, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    WeightParamSizeInBytes = EspressoConverter::getWeightParamSizeInBytes(a1);
    v179 = a2;
    if (WeightParamSizeInBytes != EspressoConverter::getWeightParamSizeInBytes(a2)
      || WeightParamSizeInBytes != EspressoConverter::getWeightParamSizeInBytes(a3)
      || WeightParamSizeInBytes != EspressoConverter::getWeightParamSizeInBytes(a4))
    {
      v173 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v194.__r_.__value_.__l.__data_, a8, " layer : all quantized weight matrices must have same number of bytes");
      std::runtime_error::runtime_error(v173, &v194);
      __cxa_throw(v173, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v180 = a3;
    v176 = a5;
    if (!CoreML::hasSufficientBytesInQuantizedWeightParam(a1, a7 * a6))
    {
      v175 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v194.__r_.__value_.__l.__data_, a8, " layer : insufficient units in quantized weight byte stream");
      std::runtime_error::runtime_error(v175, &v194);
      __cxa_throw(v175, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v86 = (v81 * a7 * a6 + 7) >> 3;
    v87 = (char *)operator new(0x58uLL);
    *((_QWORD *)v87 + 1) = 0;
    *((_QWORD *)v87 + 2) = 0;
    *(_QWORD *)v87 = &off_1E3D5C058;
    *((_QWORD *)v87 + 3) = &off_1E3D5B4C8;
    *(_OWORD *)(v87 + 56) = 0u;
    *(_OWORD *)(v87 + 72) = 0u;
    *((_DWORD *)v87 + 8) = 4 * v86;
    v88 = (void *)Espresso::kern_alloc((Espresso *)(4 * (int)v86));
    *((_QWORD *)v87 + 5) = v88;
    v87[48] = 1;
    v192 = v87 + 24;
    v193 = (std::__shared_weak_count *)v87;
    v89 = (const void **)a1[6];
    if (*((char *)v89 + 23) < 0)
      v89 = (const void **)*v89;
    memcpy(v88, v89, WeightParamSizeInBytes);
    v90 = (const void **)a2[6];
    if (*((char *)v90 + 23) < 0)
      v90 = (const void **)*v90;
    memcpy((void *)(*((_QWORD *)v87 + 5) + v86), v90, WeightParamSizeInBytes);
    v91 = (const void **)v180[6];
    if (*((char *)v91 + 23) < 0)
      v91 = (const void **)*v91;
    memcpy((void *)(*((_QWORD *)v87 + 5) + 2 * v86), v91, WeightParamSizeInBytes);
    v92 = (const void **)a4[6];
    if (*((char *)v92 + 23) < 0)
      v92 = (const void **)*v92;
    memcpy((void *)(*((_QWORD *)v87 + 5) + 3 * v86), v92, WeightParamSizeInBytes);
    if (*((char *)a9 + 23) >= 0)
      v93 = *((unsigned __int8 *)a9 + 23);
    else
      v93 = (size_t)a9[1];
    v94 = &v191;
    std::string::basic_string[abi:ne180100]((uint64_t)&v191, v93 + 2);
    if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v94 = (std::string *)v191.__r_.__value_.__r.__words[0];
    if (v93)
    {
      if (*((char *)a9 + 23) >= 0)
        v95 = a9;
      else
        v95 = *a9;
      memmove(v94, v95, v93);
    }
    strcpy((char *)v94 + v93, "_U");
    std::to_string(&v190, v81);
    if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v96 = &v190;
    else
      v96 = (std::string *)v190.__r_.__value_.__r.__words[0];
    if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v190.__r_.__value_.__r.__words[2]);
    else
      size = v190.__r_.__value_.__l.__size_;
    v98 = std::string::append(&v191, (const std::string::value_type *)v96, size);
    v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
    v194.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v99;
    v98->__r_.__value_.__l.__size_ = 0;
    v98->__r_.__value_.__r.__words[2] = 0;
    v98->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v190.__r_.__value_.__l.__data_);
    if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v191.__r_.__value_.__l.__data_);
    v100 = *a5;
    *(_OWORD *)&v191.__r_.__value_.__l.__data_ = 0uLL;
    (*(void (**)(uint64_t, std::string *, std::string *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v100 + 168))(v100, &v191, &v194, *((_QWORD *)v87 + 5), *((int *)v87 + 8), 0);
    v101 = (std::__shared_weak_count *)v191.__r_.__value_.__l.__size_;
    if (v191.__r_.__value_.__l.__size_)
    {
      v102 = (unint64_t *)(v191.__r_.__value_.__l.__size_ + 8);
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v104 = (uint64_t *)a1[8];
    if (!v104)
      v104 = &CoreML::Specification::_QuantizationParams_default_instance_;
    v105 = *((_DWORD *)v104 + 9);
    v106 = (uint64_t *)v179[8];
    if (!v106)
      v106 = &CoreML::Specification::_QuantizationParams_default_instance_;
    if ((v105 == 101) != (*((_DWORD *)v106 + 9) == 101))
      goto LABEL_375;
    v107 = (uint64_t *)v180[8];
    if (!v107)
      v107 = &CoreML::Specification::_QuantizationParams_default_instance_;
    if ((v105 == 101) != (*((_DWORD *)v107 + 9) == 101))
      goto LABEL_375;
    v108 = (uint64_t *)a4[8];
    if (!v108)
      v108 = &CoreML::Specification::_QuantizationParams_default_instance_;
    if ((v105 == 101) != (*((_DWORD *)v108 + 9) == 101))
    {
LABEL_375:
      v174 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v191.__r_.__value_.__l.__data_, a8, " layer : all weight matrices must have either linear quantization or LUT");
      std::runtime_error::runtime_error(v174, &v191);
      __cxa_throw(v174, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (v105 == 101)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v188, 4 * a7, 1, 1, 1);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v186, 4 * a7, 1, 1, 1);
      LODWORD(v190.__r_.__value_.__l.__data_) = 1065353216;
      std::vector<float>::vector(&v191, a7, &v190);
      LODWORD(__p) = 0;
      v109 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<float>::vector(&v190, a7, &__p);
      v110 = (uint64_t *)a1[8];
      if (!v110)
        v110 = &CoreML::Specification::_QuantizationParams_default_instance_;
      if (*((_DWORD *)v110 + 9) == 101)
      {
        v111 = (uint64_t *)v110[3];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v109);
        v111 = &CoreML::Specification::_LinearQuantizationParams_default_instance_;
      }
      CoreML::setLinearQuantizationScaleBias((uint64_t)v111, (uint64_t)&v191, (uint64_t)&v190, a7);
      v140 = v188;
      memcpy(*(void **)(v188 + 16), v191.__r_.__value_.__l.__data_, 4 * a7);
      v141 = v186;
      v142 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)memcpy(*(void **)(v186 + 16), v190.__r_.__value_.__l.__data_, 4 * a7);
      v143 = (uint64_t *)v179[8];
      if (!v143)
        v143 = &CoreML::Specification::_QuantizationParams_default_instance_;
      if (*((_DWORD *)v143 + 9) == 101)
      {
        v144 = (uint64_t *)v143[3];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v142);
        v144 = &CoreML::Specification::_LinearQuantizationParams_default_instance_;
      }
      CoreML::setLinearQuantizationScaleBias((uint64_t)v144, (uint64_t)&v191, (uint64_t)&v190, a7);
      memcpy((void *)(*(_QWORD *)(v140 + 16) + 4 * a7), v191.__r_.__value_.__l.__data_, 4 * a7);
      v145 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)memcpy((void *)(*(_QWORD *)(v141 + 16) + 4 * a7), v190.__r_.__value_.__l.__data_, 4 * a7);
      v146 = (uint64_t *)v180[8];
      if (!v146)
        v146 = &CoreML::Specification::_QuantizationParams_default_instance_;
      if (*((_DWORD *)v146 + 9) == 101)
      {
        v147 = (uint64_t *)v146[3];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v145);
        v147 = &CoreML::Specification::_LinearQuantizationParams_default_instance_;
      }
      CoreML::setLinearQuantizationScaleBias((uint64_t)v147, (uint64_t)&v191, (uint64_t)&v190, a7);
      memcpy((void *)(*(_QWORD *)(v140 + 16) + 8 * a7), v191.__r_.__value_.__l.__data_, 4 * a7);
      v148 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)memcpy((void *)(*(_QWORD *)(v141 + 16) + 8 * a7), v190.__r_.__value_.__l.__data_, 4 * a7);
      v149 = (uint64_t *)a4[8];
      if (!v149)
        v149 = &CoreML::Specification::_QuantizationParams_default_instance_;
      if (*((_DWORD *)v149 + 9) == 101)
      {
        v150 = (uint64_t *)v149[3];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v148);
        v150 = &CoreML::Specification::_LinearQuantizationParams_default_instance_;
      }
      CoreML::setLinearQuantizationScaleBias((uint64_t)v150, (uint64_t)&v191, (uint64_t)&v190, a7);
      memcpy((void *)(*(_QWORD *)(v140 + 16) + 12 * a7), v191.__r_.__value_.__l.__data_, 4 * a7);
      memcpy((void *)(*(_QWORD *)(v141 + 16) + 12 * a7), v190.__r_.__value_.__l.__data_, 4 * a7);
      v151 = *a5;
      v184 = 0;
      v185 = 0;
      if (*((char *)a9 + 23) >= 0)
        v152 = *((unsigned __int8 *)a9 + 23);
      else
        v152 = (size_t)a9[1];
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v152 + 14);
      if (v183 < 0)
        p_p = __p;
      if (v152)
      {
        if (*((char *)a9 + 23) >= 0)
          v154 = a9;
        else
          v154 = *a9;
        memmove(p_p, v154, v152);
      }
      strcpy((char *)p_p + v152, "_per_ch_qscale");
      (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v151 + 168))(v151, &v184, &__p, *(_QWORD *)(v140 + 16), 4 * *(int *)(v140 + 8), 0);
      if (v183 < 0)
        operator delete(__p);
      v155 = v185;
      if (v185)
      {
        p_shared_owners = (unint64_t *)&v185->__shared_owners_;
        do
          v157 = __ldaxr(p_shared_owners);
        while (__stlxr(v157 - 1, p_shared_owners));
        if (!v157)
        {
          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
          std::__shared_weak_count::__release_weak(v155);
        }
      }
      v158 = *v176;
      v184 = 0;
      v185 = 0;
      if (*((char *)a9 + 23) >= 0)
        v159 = *((unsigned __int8 *)a9 + 23);
      else
        v159 = (size_t)a9[1];
      v160 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v159 + 13);
      if (v183 < 0)
        v160 = __p;
      if (v159)
      {
        if (*((char *)a9 + 23) >= 0)
          v161 = a9;
        else
          v161 = *a9;
        memmove(v160, v161, v159);
      }
      strcpy((char *)v160 + v159, "_per_ch_qbias");
      (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v158 + 168))(v158, &v184, &__p, *(_QWORD *)(v186 + 16), 4 * *(int *)(v186 + 8), 0);
      if (v183 < 0)
        operator delete(__p);
      v162 = v185;
      if (v185)
      {
        v163 = (unint64_t *)&v185->__shared_owners_;
        do
          v164 = __ldaxr(v163);
        while (__stlxr(v164 - 1, v163));
        if (!v164)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
      }
      if (v190.__r_.__value_.__r.__words[0])
      {
        v190.__r_.__value_.__l.__size_ = v190.__r_.__value_.__r.__words[0];
        operator delete(v190.__r_.__value_.__l.__data_);
      }
      if (v191.__r_.__value_.__r.__words[0])
      {
        v191.__r_.__value_.__l.__size_ = v191.__r_.__value_.__r.__words[0];
        operator delete(v191.__r_.__value_.__l.__data_);
      }
      v165 = v187;
      if (v187)
      {
        v166 = (unint64_t *)&v187->__shared_owners_;
        do
          v167 = __ldaxr(v166);
        while (__stlxr(v167 - 1, v166));
        if (!v167)
        {
          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
          std::__shared_weak_count::__release_weak(v165);
        }
      }
      v137 = v189;
      if (v189)
      {
        v168 = (unint64_t *)&v189->__shared_owners_;
        do
          v139 = __ldaxr(v168);
        while (__stlxr(v139 - 1, v168));
        goto LABEL_361;
      }
    }
    else
    {
      v127 = v81 - 1;
      v128 = 2 << (v81 - 1);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__p, 4 * v128, 1, 1, 1);
      memset(&v191, 0, sizeof(v191));
      CoreML::setLUTQuantizationParams(a1, (uint64_t)&v191);
      v129 = __p;
      memcpy(*((void **)__p + 2), v191.__r_.__value_.__l.__data_, 8 << (v81 - 1));
      CoreML::setLUTQuantizationParams(v179, (uint64_t)&v191);
      memcpy((void *)(v129[2] + 4 * v128), v191.__r_.__value_.__l.__data_, 8 << (v81 - 1));
      CoreML::setLUTQuantizationParams(v180, (uint64_t)&v191);
      memcpy((void *)(v129[2] + 4 * (4 << v127)), v191.__r_.__value_.__l.__data_, 8 << v127);
      CoreML::setLUTQuantizationParams(a4, (uint64_t)&v191);
      memcpy((void *)(v129[2] + 12 * v128), v191.__r_.__value_.__l.__data_, 8 << (v81 - 1));
      v130 = *a5;
      v188 = 0;
      v189 = 0;
      if (*((char *)a9 + 23) >= 0)
        v131 = *((unsigned __int8 *)a9 + 23);
      else
        v131 = (size_t)a9[1];
      v132 = &v190;
      std::string::basic_string[abi:ne180100]((uint64_t)&v190, v131 + 15);
      if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v132 = (std::string *)v190.__r_.__value_.__r.__words[0];
      if (v131)
      {
        if (*((char *)a9 + 23) >= 0)
          v133 = a9;
        else
          v133 = *a9;
        memmove(v132, v133, v131);
      }
      strcpy((char *)v132 + v131, "_lut_to_float32");
      (*(void (**)(uint64_t, uint64_t *, std::string *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v130 + 168))(v130, &v188, &v190, v129[2], 32 << v127, 0);
      if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v190.__r_.__value_.__l.__data_);
      v134 = v189;
      if (v189)
      {
        v135 = (unint64_t *)&v189->__shared_owners_;
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
      if (v191.__r_.__value_.__r.__words[0])
        operator delete(v191.__r_.__value_.__l.__data_);
      v137 = v182;
      if (v182)
      {
        v138 = (unint64_t *)&v182->__shared_owners_;
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
LABEL_361:
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
    }
    if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v194.__r_.__value_.__l.__data_);
    v124 = v193;
    if (v193)
    {
      v169 = (unint64_t *)&v193->__shared_owners_;
      do
        v126 = __ldaxr(v169);
      while (__stlxr(v126 - 1, v169));
LABEL_368:
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
      return;
    }
    return;
  }
  v113 = a2;
  WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)a1);
  v115 = a7 * a6;
  if (WeightParamSize != (_DWORD)a7 * (_DWORD)a6
    || (v116 = WeightParamSize, EspressoConverter::getWeightParamSize((uint64_t)v113) != WeightParamSize)
    || EspressoConverter::getWeightParamSize((uint64_t)a3) != v116
    || EspressoConverter::getWeightParamSize((uint64_t)a4) != v116)
  {
    v171 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v194.__r_.__value_.__l.__data_, a8, " layer: weight matrix size incorrect");
    std::runtime_error::runtime_error(v171, &v194);
    __cxa_throw(v171, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v194, a6, 4 * a7, 1, 1);
  v117 = v194.__r_.__value_.__r.__words[0];
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v194.__r_.__value_.__r.__words[0] + 24), a1, 4 * v115);
  EspressoConverter::copyWeightsToDataBlob((EspressoConverter *)(*(_QWORD *)(v117 + 24) + 4 * v115), v113, 4 * v115);
  EspressoConverter::copyWeightsToDataBlob((EspressoConverter *)(*(_QWORD *)(v117 + 24) + 8 * v115), a3, 4 * v115);
  EspressoConverter::copyWeightsToDataBlob((EspressoConverter *)(*(_QWORD *)(v117 + 24) + 12 * v115), a4, 4 * v115);
  v118 = 0;
  v119 = *a5;
  *(_OWORD *)&v191.__r_.__value_.__l.__data_ = 0uLL;
  v120 = *(int *)(v117 + 8);
  do
  {
    v120 *= *(int *)(v117 + 12 + v118);
    v118 += 4;
  }
  while (v118 != 12);
  (*(void (**)(uint64_t, std::string *, const void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v119 + 168))(v119, &v191, a9, *(_QWORD *)(v117 + 24), 4 * v120, 0);
  v121 = (std::__shared_weak_count *)v191.__r_.__value_.__l.__size_;
  if (v191.__r_.__value_.__l.__size_)
  {
    v122 = (unint64_t *)(v191.__r_.__value_.__l.__size_ + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = (std::__shared_weak_count *)v194.__r_.__value_.__l.__size_;
  if (v194.__r_.__value_.__l.__size_)
  {
    v125 = (unint64_t *)(v194.__r_.__value_.__l.__size_ + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    goto LABEL_368;
  }
}

void sub_19C960A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  if (*(char *)(v39 - 89) < 0)
    operator delete(*(void **)(v39 - 112));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v39 - 128);
  _Unwind_Resume(a1);
}

void Espresso::blob<char,1>::~blob(uint64_t a1, void *a2)
{
  Espresso *v3;

  *(_QWORD *)a1 = &off_1E3D5B4C8;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(Espresso **)(a1 + 16);
    if (v3)
      Espresso::kern_dealloc(v3, a2);
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 32);
  Espresso::blob_rtti_root::~blob_rtti_root((Espresso::blob_rtti_root *)a1);
}

{
  Espresso *v3;

  *(_QWORD *)a1 = &off_1E3D5B4C8;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(Espresso **)(a1 + 16);
    if (v3)
      Espresso::kern_dealloc(v3, a2);
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 32);
  Espresso::blob_rtti_root::~blob_rtti_root((Espresso::blob_rtti_root *)a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_emplace<Espresso::blob<char,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<char,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C058;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<char,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void EspressoConverter::setRecurrentBiasBlob(uint64_t a1, uint64_t *a2, unint64_t a3, const void **a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  std::runtime_error *exception;
  std::runtime_error *v33;
  std::string __src;
  uint64_t v35;
  std::__shared_weak_count *v36;

  v10 = *(_QWORD *)(a1 + 40);
  if (*(char *)(v10 + 23) < 0)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = *(unsigned __int8 *)(v10 + 23);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(unsigned __int8 *)(v12 + 23);
  if (*(char *)(v12 + 23) < 0)
    v14 = *(_QWORD *)(v12 + 8);
  else
    v14 = *(unsigned __int8 *)(v12 + 23);
  v15 = *(_DWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 56);
  if (*(char *)(v16 + 23) < 0)
    v17 = *(_QWORD *)(v16 + 8);
  else
    v17 = *(unsigned __int8 *)(v16 + 23);
  if (v15 <= 0)
    v18 = 1;
  else
    v18 = 2;
  if (v11)
    v19 = v18;
  else
    v19 = v15 > 0;
  if (v14)
    ++v19;
  if (v17)
    ++v19;
  if (v15 > 0 || v19 != 1)
    goto LABEL_24;
  if ((*(_BYTE *)(v10 + 23) & 0x80) != 0)
  {
    if (*(_QWORD *)(v10 + 8))
      goto LABEL_24;
  }
  else if (*(_BYTE *)(v10 + 23))
  {
LABEL_24:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v35, 1, 1, a3, 1);
LABEL_25:
    if (EspressoConverter::getWeightParamSize(a1) != (_DWORD)a3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&__src.__r_.__value_.__l.__data_, a4, " layer: bias size incorrect");
      std::runtime_error::runtime_error(exception, &__src);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v20 = v35;
    EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v35 + 24), (_QWORD *)a1, 4 * a3);
    goto LABEL_27;
  }
  if ((v13 & 0x80) != 0)
    v13 = *(_QWORD *)(v12 + 8);
  v30 = *(_QWORD *)(a1 + 64);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v35, 1, 1, a3, 1);
  if ((uint64_t *)a1 == &CoreML::Specification::_WeightParams_default_instance_ || !v13 || !v30)
    goto LABEL_25;
  if (!CoreML::hasSufficientBytesInQuantizedWeightParam((uint64_t *)a1, a3))
  {
    v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&__src.__r_.__value_.__l.__data_, a4, " layer: insufficient units in quantized bias byte stream");
    std::runtime_error::runtime_error(v33, &__src);
    __cxa_throw(v33, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CoreML::dequantizeWeightParamSpec((CoreML *)&__src, (const CoreML::Specification::WeightParams *)a1, a3);
  v20 = v35;
  v31 = (void *)__src.__r_.__value_.__r.__words[0];
  memcpy(*(void **)(v35 + 24), __src.__r_.__value_.__l.__data_, 4 * a3);
  if (v31)
    operator delete(v31);
LABEL_27:
  v21 = 0;
  v22 = *a2;
  *(_OWORD *)&__src.__r_.__value_.__l.__data_ = 0uLL;
  v23 = *(int *)(v20 + 8);
  do
  {
    v23 *= *(int *)(v20 + 12 + v21);
    v21 += 4;
  }
  while (v21 != 12);
  (*(void (**)(uint64_t, std::string *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v22 + 168))(v22, &__src, a5, *(_QWORD *)(v20 + 24), 4 * v23, 0);
  size = (std::__shared_weak_count *)__src.__r_.__value_.__l.__size_;
  if (__src.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(__src.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v27 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_19C9610A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void EspressoConverter::setRecurrentBiasBlobToExternalPtr(uint64_t a1, void *a2, unint64_t a3, const void **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  void *v18;
  std::runtime_error *v19;
  std::runtime_error *exception;
  std::string __src;

  v8 = *(_QWORD *)(a1 + 40);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(unsigned __int8 *)(v10 + 23);
  if (*(char *)(v10 + 23) < 0)
    v12 = *(_QWORD *)(v10 + 8);
  else
    v12 = *(unsigned __int8 *)(v10 + 23);
  v13 = *(_DWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 56);
  if (*(char *)(v14 + 23) < 0)
    v15 = *(_QWORD *)(v14 + 8);
  else
    v15 = *(unsigned __int8 *)(v14 + 23);
  if (v13 <= 0)
    v16 = 1;
  else
    v16 = 2;
  if (v9)
    v17 = v16;
  else
    v17 = v13 > 0;
  if (v12)
    ++v17;
  if (v15)
    ++v17;
  if (v13 > 0 || v17 != 1)
    goto LABEL_34;
  if ((*(_BYTE *)(v8 + 23) & 0x80) != 0)
  {
    if (*(_QWORD *)(v8 + 8))
      goto LABEL_34;
  }
  else if (*(_BYTE *)(v8 + 23))
  {
    goto LABEL_34;
  }
  if ((v11 & 0x80) != 0)
    v11 = *(_QWORD *)(v10 + 8);
  if ((uint64_t *)a1 != &CoreML::Specification::_WeightParams_default_instance_ && v11 && *(_QWORD *)(a1 + 64))
  {
    if (!CoreML::hasSufficientBytesInQuantizedWeightParam((uint64_t *)a1, a3))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&__src.__r_.__value_.__l.__data_, a4, " layer: insufficient units in quantized bias byte stream");
      std::runtime_error::runtime_error(exception, &__src);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    CoreML::dequantizeWeightParamSpec((CoreML *)&__src, (const CoreML::Specification::WeightParams *)a1, a3);
    v18 = (void *)__src.__r_.__value_.__r.__words[0];
    memcpy(a2, __src.__r_.__value_.__l.__data_, 4 * a3);
    if (v18)
      operator delete(v18);
    return;
  }
LABEL_34:
  if (EspressoConverter::getWeightParamSize(a1) != (_DWORD)a3)
  {
    v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&__src.__r_.__value_.__l.__data_, a4, " layer: bias size incorrect");
    std::runtime_error::runtime_error(v19, &__src);
    __cxa_throw(v19, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  EspressoConverter::copyWeightsToDataBlob((EspressoConverter *)a2, (_QWORD *)a1, 4 * a3);
}

void sub_19C961320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

void LayerTranslator::addReshape(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::ReshapeLayerParams *v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t **v16;
  uint64_t v17;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v18;
  const CoreML::Specification::ReshapeLayerParams *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  std::runtime_error *v30;
  void *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  void *exception;
  std::string v41;
  std::string v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int16 v48;
  int v49;
  _BYTE v50[16];
  int v51;
  _QWORD *v52;
  int v53;
  __int128 *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 *v57;
  __int128 *v58;
  uint64_t v59;
  std::string v60;
  _OWORD v61[2];
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  __int128 __p;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[16];
  int v73;
  _DWORD *v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 *v81;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v60.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v5;
  }
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v57, (uint64_t *)&v54, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 300)
  {
    v7 = (const CoreML::Specification::ReshapeLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::ReshapeLayerParams *)&CoreML::Specification::_ReshapeLayerParams_default_instance_;
  }
  CoreML::Specification::ReshapeLayerParams::ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)v50, v7);
  v45 = 0;
  v46 = 0;
  v47 = xmmword_19CB39990;
  v48 = 1;
  v49 = 1;
  if (v53 == 1)
    DWORD2(v47) = 1;
  if (v51 == 3)
  {
    v8 = 0;
    v9 = v52 + 1;
    v10 = v52 + 2;
    v11 = v52 + 3;
  }
  else
  {
    if (v51 != 4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](exception, "Reshape Layer: target shape must of length 3 or 4");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v8 = *((_DWORD *)v52 + 2);
    v9 = v52 + 2;
    v10 = v52 + 3;
    v11 = v52 + 4;
  }
  v12 = *v11;
  v13 = *v10;
  v14 = *v9;
  LODWORD(v47) = v8;
  v46 = v14;
  v45 = __PAIR64__(v13, v12);
  v15 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "reshape");
  memset(&v42, 0, sizeof(v42));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v42, v54, v55, 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v54) >> 3));
  memset(&v41, 0, sizeof(v41));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v41, v57, v58, 0xAAAAAAAAAAAAAAABLL * (((char *)v58 - (char *)v57) >> 3));
  Espresso::sequential_builder::add<Espresso::reshape_params>(&v43, v15, (uint64_t)&__p, (uint64_t)&v60, (uint64_t)&v45, (__int128 *)v42.__r_.__value_.__l.__data_, (__int128 *)v42.__r_.__value_.__l.__size_, (__int128 **)&v41);
  *(_QWORD *)&v75 = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  *(_QWORD *)&v75 = &v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  if (SBYTE7(v67) < 0)
    operator delete((void *)__p);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v57);
  }
  else
  {
    v16 = (uint64_t **)*((_QWORD *)this + 1);
    v17 = std::map<std::string,std::string>::at((uint64_t)v16, v54);
    v75 = *(_OWORD *)v17;
    v76 = *(_OWORD *)(v17 + 16);
    v77 = *(_QWORD *)(v17 + 32);
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v18 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v78, *(const void **)(v17 + 40), *(_QWORD *)(v17 + 48), (uint64_t)(*(_QWORD *)(v17 + 48)- *(_QWORD *)(v17 + 40)) >> 2);
    if (*((_DWORD *)a2 + 35) == 300)
    {
      v19 = (const CoreML::Specification::ReshapeLayerParams *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v18);
      v19 = (const CoreML::Specification::ReshapeLayerParams *)&CoreML::Specification::_ReshapeLayerParams_default_instance_;
    }
    CoreML::Specification::ReshapeLayerParams::ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)v72, v19);
    if (v73 == 3)
    {
      v20 = v74[2];
      v21 = v74[4];
      v22 = v74[6];
      if (DWORD2(v75) != -1
        && DWORD1(v75) != -1
        && (_DWORD)v75 != -1
        && v21 * v20 * v22 != DWORD1(v75) * DWORD2(v75) * (_DWORD)v75)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Reshape layer: '", 16);
        v24 = *((_QWORD *)a2 + 14);
        v25 = *(char *)(v24 + 23);
        if (v25 >= 0)
          v26 = *((_QWORD *)a2 + 14);
        else
          v26 = *(_QWORD *)v24;
        if (v25 >= 0)
          v27 = *(unsigned __int8 *)(v24 + 23);
        else
          v27 = *(_QWORD *)(v24 + 8);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v26, v27);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"': product of new shape must equal the product of input blob dimensions.", 72);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v29);
        v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v30, (const std::string *)v61);
        __cxa_throw(v30, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    else
    {
      v20 = v74[4];
      v21 = v74[6];
      v22 = v74[8];
    }
    __p = v75;
    v67 = v76;
    v31 = v78;
    v68 = v77;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v69, v78, v79, (v79 - (uint64_t)v78) >> 2);
    *(_QWORD *)((char *)&__p + 4) = __PAIR64__(v20, v21);
    LODWORD(__p) = v22;
    v61[0] = __p;
    v61[1] = v67;
    v32 = v69;
    v62 = v68;
    v63 = 0;
    v33 = v70;
    v34 = (v70 - (uint64_t)v69) >> 2;
    v64 = 0;
    v65 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v63, v69, v70, v34);
    EspressoConverter::validateShape((int *)v61, *((_QWORD *)a2 + 14), (uint64_t)v57);
    if (v63)
    {
      v64 = v63;
      operator delete(v63);
    }
    v81 = v57;
    v35 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, v57, &v81);
    v36 = v67;
    *(_OWORD *)(v35 + 56) = __p;
    *(_OWORD *)(v35 + 72) = v36;
    *((_QWORD *)v35 + 11) = v68;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v35 + 96, v32, v33, v34);
    if (v32)
      operator delete(v32);
    CoreML::Specification::ReshapeLayerParams::~ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)v72);
    if (v31)
      operator delete(v31);
  }
  v37 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  CoreML::Specification::ReshapeLayerParams::~ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)v50);
  *(_QWORD *)&__p = &v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(_QWORD *)&__p = &v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
}

void sub_19C961870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,char *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  void *v58;
  int v59;
  uint64_t v60;
  void *v62;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((v59 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a53);
      CoreML::Specification::ReshapeLayerParams::~ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)(v60 - 192));
      v62 = *(void **)(v60 - 104);
      if (v62)
        operator delete(v62);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
      CoreML::Specification::ReshapeLayerParams::~ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)&a23);
      a53 = &a29;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
      a53 = &a32;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
      if (a40 < 0)
        operator delete(a35);
      _Unwind_Resume(a1);
    }
  }
  else if (!v59)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v58);
  goto LABEL_6;
}

void Espresso::sequential_builder::add<Espresso::reshape_params>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C961BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addMin(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t i;
  std::string *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  __int128 *v13;
  std::string *v14;
  __int128 v15;
  __int128 *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  unint64_t *p_shared_owners;
  uint64_t **v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 *v31;
  std::string *v32;
  __int128 *v33;
  int *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  const CoreML::Specification::NeuralNetworkLayer *v39;
  std::string v40;
  std::string v41;
  std::string v42;
  void *v43[2];
  std::string::size_type v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::string v47;
  std::string v48;
  void *__p[2];
  char v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  __int128 *v54;
  uint64_t v55;
  std::string *v56;
  __int128 *v57;
  uint64_t v58;
  std::string v59;
  std::string *v60;
  __int128 v61;
  __int128 v62;
  void *v63;
  void *v64[3];
  __int128 v65;
  __int128 v66;
  void *v67;
  __int128 v68;
  uint64_t v69;
  void **v70;
  std::string *v71;
  unint64_t v72;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v59.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v5;
  }
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v56, (uint64_t *)&v53, *((_QWORD *)this + 1));
  v39 = a2;
  EspressoConverter::splitElementwiseLayer((uint64_t)&v51, &v53, (uint64_t)v56);
  v6 = v51;
  if (v52 != v51)
  {
    for (i = 0; i < 0x8E38E38E38E38E39 * ((v52 - v51) >> 3); ++i)
    {
      *(_QWORD *)&v66 = 897988541;
      BYTE8(v66) = 0;
      *(_QWORD *)((char *)&v68 + 4) = 0;
      *(_QWORD *)&v65 = 22;
      *((_QWORD *)&v65 + 1) = 1065353216;
      v61 = 0uLL;
      *(_QWORD *)&v62 = 0;
      v70 = 0;
      v71 = 0;
      v72 = 0;
      if ((char *)v54 - (char *)v53 == 24)
      {
        *((_QWORD *)&v61 + 1) = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v61, v53);
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v70, v56, v57, 0xAAAAAAAAAAAAAAABLL * (((char *)v57 - (char *)v56) >> 3));
      }
      else
      {
        v8 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v61, (__int128 *)(v6 + 72 * i));
        v9 = v8;
        *((_QWORD *)&v61 + 1) = v8;
        v10 = (__int128 *)(v51 + 72 * i + 24);
        if ((unint64_t)v8 >= (unint64_t)v62)
        {
          v12 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v61, v10);
        }
        else
        {
          if (*(char *)(v51 + 72 * i + 47) < 0)
          {
            std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v10, *(_QWORD *)(v51 + 72 * i + 32));
          }
          else
          {
            v11 = *v10;
            v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(v51 + 72 * i + 40);
            *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v11;
          }
          v12 = (uint64_t)&v9[1];
        }
        *((_QWORD *)&v61 + 1) = v12;
        v13 = (__int128 *)(v51 + 72 * i + 48);
        v14 = v71;
        if ((unint64_t)v71 >= v72)
        {
          v16 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v70, v13);
        }
        else
        {
          if (*(char *)(v51 + 72 * i + 71) < 0)
          {
            std::string::__init_copy_ctor_external(v71, *(const std::string::value_type **)v13, *(_QWORD *)(v51 + 72 * i + 56));
          }
          else
          {
            v15 = *v13;
            v71->__r_.__value_.__r.__words[2] = *(_QWORD *)(v51 + 72 * i + 64);
            *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
          }
          v16 = (__int128 *)&v14[1];
        }
        v71 = (std::string *)v16;
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (char *)v53) >> 3) > 2)
      {
        v21 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
        std::to_string(&v42, i);
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &v59;
        else
          v22 = (std::string *)v59.__r_.__value_.__r.__words[0];
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
        else
          size = v59.__r_.__value_.__l.__size_;
        v24 = std::string::insert(&v42, 0, (const std::string::value_type *)v22, size);
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v44 = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)v43 = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        memset(&v41, 0, sizeof(v41));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v41, (__int128 *)v61, *((__int128 **)&v61 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v61 + 1) - v61) >> 3));
        memset(&v40, 0, sizeof(v40));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v40, (__int128 *)v70, (__int128 *)v71, 0xAAAAAAAAAAAAAAABLL * (((char *)v71 - (char *)v70) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v45, v21, (uint64_t)__p, (uint64_t)v43, (uint64_t)&v65, (__int128 *)v41.__r_.__value_.__l.__data_, (__int128 *)v41.__r_.__value_.__l.__size_, (__int128 **)&v40);
        v60 = &v40;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
        v60 = &v41;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
        if (SHIBYTE(v44) < 0)
          operator delete(v43[0]);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (v50 < 0)
          operator delete(__p[0]);
        v18 = v46;
        if (!v46)
          goto LABEL_45;
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
      }
      else
      {
        v17 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
        memset(&v48, 0, sizeof(v48));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v48, (__int128 *)v61, *((__int128 **)&v61 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v61 + 1) - v61) >> 3));
        memset(&v47, 0, sizeof(v47));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v47, (__int128 *)v70, (__int128 *)v71, 0xAAAAAAAAAAAAAAABLL * (((char *)v71 - (char *)v70) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)v43, v17, (uint64_t)__p, (uint64_t)&v59, (uint64_t)&v65, (__int128 *)v48.__r_.__value_.__l.__data_, (__int128 *)v48.__r_.__value_.__l.__size_, (__int128 **)&v47);
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
        if (v50 < 0)
          operator delete(__p[0]);
        v18 = (std::__shared_weak_count *)v43[1];
        if (!v43[1])
          goto LABEL_45;
        v19 = (unint64_t *)((char *)v43[1] + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
      }
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
LABEL_45:
      __p[0] = &v70;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v70 = (void **)&v61;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v70);
      v6 = v51;
    }
  }
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v56);
  }
  else
  {
    v27 = (uint64_t **)*((_QWORD *)this + 1);
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v29 = v53;
    v28 = v54;
    if (v53 == v54)
    {
      v33 = 0;
      v34 = 0;
      v30 = (uint64_t)v39;
    }
    else
    {
      v30 = (uint64_t)v39;
      do
      {
        v31 = (__int128 *)std::map<std::string,std::string>::at((uint64_t)v27, v29);
        v32 = v71;
        if ((unint64_t)v71 >= v72)
        {
          v33 = (__int128 *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v70, v31);
        }
        else
        {
          std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v70, v31);
          v33 = (__int128 *)&v32[2].__r_.__value_.__r.__words[2];
        }
        v71 = (std::string *)v33;
        v29 = (__int128 *)((char *)v29 + 24);
      }
      while (v29 != v28);
      v34 = (int *)v70;
    }
    EspressoConverter::validateEqualInputShapes(v30, v34, (int *)v33);
    v65 = *(_OWORD *)v70;
    v66 = *((_OWORD *)v70 + 1);
    v67 = v70[4];
    v68 = 0uLL;
    v69 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v68, v70[5], (uint64_t)v70[6], ((_BYTE *)v70[6] - (_BYTE *)v70[5]) >> 2);
    v61 = v65;
    v62 = v66;
    v35 = (char *)v68;
    v63 = v67;
    memset(v64, 0, sizeof(v64));
    v36 = *((_QWORD *)&v68 + 1);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v64, (const void *)v68, *((uint64_t *)&v68 + 1), (uint64_t)(*((_QWORD *)&v68 + 1) - v68) >> 2);
    EspressoConverter::validateShape((int *)&v61, *(_QWORD *)(v30 + 112), (uint64_t)v56);
    if (v64[0])
      operator delete(v64[0]);
    __p[0] = v56;
    v37 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, v56, (__int128 **)__p);
    v38 = v66;
    *(_OWORD *)(v37 + 56) = v65;
    *(_OWORD *)(v37 + 72) = v38;
    *((_QWORD *)v37 + 11) = v67;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v37 + 96, v35, v36, (v36 - (uint64_t)v35) >> 2);
    if (v35)
      operator delete(v35);
    *(_QWORD *)&v65 = &v70;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  }
  *(_QWORD *)&v65 = &v51;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  *(_QWORD *)&v65 = &v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  *(_QWORD *)&v65 = &v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
}

void sub_19C96227C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p)
{
  void *v55;
  uint64_t v56;

  if (__p)
    operator delete(__p);
  if (v55)
    operator delete(v55);
  *(_QWORD *)(v56 - 208) = v56 - 136;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 208));
  *(_QWORD *)(v56 - 208) = &a34;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 208));
  *(_QWORD *)(v56 - 208) = &a37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 208));
  *(_QWORD *)(v56 - 208) = &a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 208));
  if (a48 < 0)
    operator delete(a43);
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addUniLSTM(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::UniDirectionalLSTMLayerParams *v7;
  const CoreML::Specification::LSTMParams *v8;
  const CoreML::Specification::ActivationParams *v9;
  uint64_t *v14;
  unsigned int v15;
  int v16;
  float v17;
  float v18;
  const CoreML::Specification::ActivationParams *v19;
  const CoreML::Specification::ActivationParams *v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *p_str;
  std::string *v24;
  uint64_t **v25;
  char *v26;
  uint64_t **v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  std::string::size_type v32;
  void *p_p;
  std::string *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  std::string::size_type v61;
  void *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  std::string::size_type v83;
  void *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  _BOOL8 v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  uint64_t **v124;
  const CoreML::Specification::UniDirectionalLSTMLayerParams *v125;
  int v126;
  std::string *v127;
  std::string *i;
  uint64_t v129;
  char *v130;
  char *v131;
  char *j;
  char *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  _QWORD *v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  std::runtime_error *v148;
  _QWORD *v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  std::runtime_error *v156;
  std::runtime_error *exception;
  std::string *v158;
  __int128 v159;
  std::string *v160;
  __int128 v161;
  std::string *v162;
  std::string::size_type size;
  std::string *v164;
  __int128 v165;
  std::runtime_error *v166;
  std::string *v167;
  __int128 v168;
  std::string *v169;
  __int128 v170;
  std::string *v171;
  std::string::size_type v172;
  std::string *v173;
  __int128 v174;
  void *v175;
  void *v176;
  void *v177;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v178;
  unsigned int __val;
  uint64_t v180[2];
  uint64_t v181[2];
  std::string v182;
  std::string v183;
  std::string v184;
  std::string v185;
  void *__p;
  std::__shared_weak_count *v187;
  char v188;
  void *v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  unint64_t v204;
  int v205;
  __int128 v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int16 v214;
  void (**v215)(CoreML::Specification::LSTMParams *__hidden);
  uint64_t v216;
  float v217;
  unsigned __int8 v218;
  unsigned __int8 v219;
  char v220;
  char v221;
  char v222;
  _BYTE v223[24];
  int v224;
  _QWORD *v225;
  const CoreML::Specification::LSTMParams *v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  std::string *v231;
  std::string *v232;
  uint64_t v233;
  char *v234;
  char *v235;
  uint64_t v236;
  std::string v237;
  std::string *v238;
  std::string v239;
  std::string __str;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  __int128 v244;
  std::string v245;
  __int128 v246;
  uint64_t v247;
  std::string v248;
  int v249;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v237, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v237.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v5;
  }
  v235 = 0;
  v234 = 0;
  v236 = 0;
  v231 = 0;
  v232 = 0;
  v233 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v234, (uint64_t *)&v231, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 420)
  {
    v7 = (const CoreML::Specification::UniDirectionalLSTMLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::UniDirectionalLSTMLayerParams *)&CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_;
  }
  CoreML::Specification::UniDirectionalLSTMLayerParams::UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)v223, v7);
  if (v226)
    v8 = v226;
  else
    v8 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
  CoreML::Specification::LSTMParams::LSTMParams((CoreML::Specification::LSTMParams *)&v215, v8);
  v178 = this;
  __asm { FMOV            V8.2S, #1.0 }
  v193 = _D8;
  if (_ZF)
    v14 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
  else
    v14 = v227;
  v195 = _D8;
  v197 = _D8;
  v194 = 2;
  v196 = 0;
  v199 = _D8;
  v201 = _D8;
  v198 = 0;
  v200 = 2;
  v203 = _D8;
  v204 = 512;
  v202 = 0;
  v205 = 1065353216;
  v206 = xmmword_19CAE7980;
  v208 = 0x100000000;
  v209 = 1065353216;
  v207 = 1112014848;
  v210 = 1065353216;
  v211 = 0;
  v214 = 0;
  v212 = 1;
  v192 = 0;
  v213 = v218;
  __val = v229;
  if ((int)v229 < 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v239, __val);
    v158 = std::string::insert(&v239, 0, "output size = ");
    v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
    v245.__r_.__value_.__r.__words[0] = v158->__r_.__value_.__r.__words[2];
    v244 = v159;
    v158->__r_.__value_.__l.__size_ = 0;
    v158->__r_.__value_.__r.__words[2] = 0;
    v158->__r_.__value_.__r.__words[0] = 0;
    v160 = std::string::append((std::string *)&v244, " not allowed in layer ");
    v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
    v248.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v161;
    v160->__r_.__value_.__l.__size_ = 0;
    v160->__r_.__value_.__r.__words[2] = 0;
    v160->__r_.__value_.__r.__words[0] = 0;
    if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v162 = &v237;
    else
      v162 = (std::string *)v237.__r_.__value_.__r.__words[0];
    if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v237.__r_.__value_.__r.__words[2]);
    else
      size = v237.__r_.__value_.__l.__size_;
    v164 = std::string::append(&v248, (const std::string::value_type *)v162, size);
    v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v165;
    v164->__r_.__value_.__l.__size_ = 0;
    v164->__r_.__value_.__r.__words[2] = 0;
    v164->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__str);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v15 = v228;
  if ((int)v228 <= 0)
  {
    v166 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v239, v15);
    v167 = std::string::insert(&v239, 0, "input size = ");
    v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
    v245.__r_.__value_.__r.__words[0] = v167->__r_.__value_.__r.__words[2];
    v244 = v168;
    v167->__r_.__value_.__l.__size_ = 0;
    v167->__r_.__value_.__r.__words[2] = 0;
    v167->__r_.__value_.__r.__words[0] = 0;
    v169 = std::string::append((std::string *)&v244, " not allowed in layer ");
    v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
    v248.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v170;
    v169->__r_.__value_.__l.__size_ = 0;
    v169->__r_.__value_.__r.__words[2] = 0;
    v169->__r_.__value_.__r.__words[0] = 0;
    if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v171 = &v237;
    else
      v171 = (std::string *)v237.__r_.__value_.__r.__words[0];
    if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v172 = HIBYTE(v237.__r_.__value_.__r.__words[2]);
    else
      v172 = v237.__r_.__value_.__l.__size_;
    v173 = std::string::append(&v248, (const std::string::value_type *)v171, v172);
    v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v173->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v174;
    v173->__r_.__value_.__l.__size_ = 0;
    v173->__r_.__value_.__r.__words[2] = 0;
    v173->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v166, &__str);
    __cxa_throw(v166, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v204 = __PAIR64__(v228, v229);
  if (0xAAAAAAAAAAAAAAABLL * ((v235 - v234) >> 3) >= 4)
  {
    v175 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v175, "Recurrent layer: too many output blobs.");
    goto LABEL_300;
  }
  if (v235 - v234 != 72)
  {
    v175 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v175, "Recurrent layer: too few output blobs.");
LABEL_300:
    __cxa_throw(v175, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v232 - (char *)v231) >> 3) >= 4)
  {
    v176 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v176, "Recurrent layer: too many input blobs.");
    __cxa_throw(v176, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v16 = v219;
  if (!v219)
    DWORD2(v206) = 0;
  v17 = 1.0;
  if (!v220)
    v17 = 0.0;
  v205 = LODWORD(v17);
  if (v221)
    LODWORD(v206) = 1;
  if (v222)
    LODWORD(v208) = 1;
  v18 = v217;
  if (v217 < 0.00001)
    v18 = 50.0;
  v207 = LODWORD(v18);
  if (v224 != 3)
  {
    v177 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v177, "LSTM layer: must provide 3 activations");
    __cxa_throw(v177, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v194 = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v225[1] + 28), v9);
  v195 = _D8;
  v196 = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v225[2] + 28), v19);
  v197 = _D8;
  HIDWORD(v192) = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v225[3] + 28), v20);
  v193 = _D8;
  if (v230)
  {
    v21 = v231;
    if ((v231->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = HIBYTE(v231->__r_.__value_.__r.__words[2]);
    else
      v22 = v231->__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v22 + 11);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v22)
    {
      if ((v21->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = v21;
      else
        v24 = (std::string *)v21->__r_.__value_.__r.__words[0];
      memmove(p_str, v24, v22);
    }
    strcpy((char *)p_str + v22, "_prereverse");
    memset(&v248, 0, sizeof(v248));
    v248.__r_.__value_.__l.__size_ = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v248, (__int128 *)&__str);
    v25 = (uint64_t **)*((_QWORD *)v178 + 1);
    v239.__r_.__value_.__r.__words[0] = (std::string::size_type)v231;
    v26 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, v231, (__int128 **)&v239);
    v27 = (uint64_t **)*((_QWORD *)v178 + 1);
    v239.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    v28 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, &__str, (__int128 **)&v239);
    v29 = *(_OWORD *)(v26 + 56);
    v30 = *(_OWORD *)(v26 + 72);
    *((_QWORD *)v28 + 11) = *((_QWORD *)v26 + 11);
    *(_OWORD *)(v28 + 72) = v30;
    *(_OWORD *)(v28 + 56) = v29;
    if (v28 != v26)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v28 + 96, *((char **)v26 + 12), *((_QWORD *)v26 + 13), (uint64_t)(*((_QWORD *)v26 + 13) - *((_QWORD *)v26 + 12)) >> 2);
    v244 = 0uLL;
    v245.__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)&v244 + 1) = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v244, (__int128 *)v231);
    v31 = *(_QWORD **)v178;
    std::string::basic_string[abi:ne180100]<0>(&v239, "sequence_reverse");
    if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = HIBYTE(v237.__r_.__value_.__r.__words[2]);
    else
      v32 = v237.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v32 + 11);
    if (v188 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v32)
    {
      if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v237;
      else
        v34 = (std::string *)v237.__r_.__value_.__r.__words[0];
      memmove(p_p, v34, v32);
    }
    strcpy((char *)p_p + v32, "_prereverse");
    memset(&v185, 0, sizeof(v185));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v185, (__int128 *)v244, *((__int128 **)&v244 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v244 + 1) - v244) >> 3));
    memset(&v184, 0, sizeof(v184));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v184, (__int128 *)v248.__r_.__value_.__l.__data_, (__int128 *)v248.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v248.__r_.__value_.__l.__size_ - v248.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add<Espresso::sequence_reverse_params>((uint64_t *)&v189, v31, (uint64_t)&v239, (uint64_t)&__p, (uint64_t)&v191, (__int128 *)v185.__r_.__value_.__l.__data_, (__int128 *)v185.__r_.__value_.__l.__size_, (__int128 **)&v184);
    v238 = &v184;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
    v238 = &v185;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
    if (v188 < 0)
      operator delete(__p);
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v239.__r_.__value_.__l.__data_);
    std::string::operator=(v231, &__str);
    v35 = (std::__shared_weak_count *)v190;
    if (v190)
    {
      v36 = (unint64_t *)(v190 + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v239.__r_.__value_.__r.__words[0] = (std::string::size_type)&v244;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v239);
    *(_QWORD *)&v244 = &v248;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v244);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v38 = *(_QWORD **)v178;
  std::string::basic_string[abi:ne180100]<0>(&__str, "rnn_arch");
  memset(&v183, 0, sizeof(v183));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v183, (__int128 *)v231, (__int128 *)v232, 0xAAAAAAAAAAAAAAABLL * (((char *)v232 - (char *)v231) >> 3));
  memset(&v182, 0, sizeof(v182));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v182, (__int128 *)v234, (__int128 *)v235, 0xAAAAAAAAAAAAAAABLL * ((v235 - v234) >> 3));
  Espresso::sequential_builder::add<Espresso::rnn_arch_params>((uint64_t *)&__p, v38, (uint64_t)&__str, (uint64_t)&v237, (uint64_t)&v192, (__int128 *)v183.__r_.__value_.__l.__data_, (__int128 *)v183.__r_.__value_.__l.__size_, (__int128 **)&v182);
  v248.__r_.__value_.__r.__words[0] = (std::string::size_type)&v182;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v248);
  v248.__r_.__value_.__r.__words[0] = (std::string::size_type)&v183;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v248);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v39 = __p;
  v40 = v187;
  v189 = __p;
  v190 = (uint64_t)v187;
  if (v187)
  {
    p_shared_owners = (unint64_t *)&v187->__shared_owners_;
    do
      v42 = __ldxr(p_shared_owners);
    while (__stxr(v42 + 1, p_shared_owners));
  }
  if (v14[2])
    v43 = (uint64_t *)v14[2];
  else
    v43 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v14[3])
    v44 = (uint64_t *)v14[3];
  else
    v44 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v14[5])
    v45 = (uint64_t *)v14[5];
  else
    v45 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v14[4])
    v46 = (uint64_t *)v14[4];
  else
    v46 = &CoreML::Specification::_WeightParams_default_instance_;
  v181[0] = (uint64_t)v39;
  v181[1] = (uint64_t)v40;
  if (v40)
  {
    v47 = (unint64_t *)&v40->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
  std::string::basic_string[abi:ne180100]<0>(&v248, "W_x");
  EspressoConverter::setFourRecurrentWeightBlobs(v43, v44, v45, v46, v181, v15, __val, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v248.__r_.__value_.__l.__data_);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v40)
  {
    v49 = (unint64_t *)&v40->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v14[6])
    v51 = (uint64_t *)v14[6];
  else
    v51 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v14[7])
    v52 = (uint64_t *)v14[7];
  else
    v52 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v14[9])
    v53 = (uint64_t *)v14[9];
  else
    v53 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v14[8])
    v54 = (uint64_t *)v14[8];
  else
    v54 = &CoreML::Specification::_WeightParams_default_instance_;
  v55 = (std::__shared_weak_count *)v190;
  v180[0] = (uint64_t)v189;
  v180[1] = v190;
  if (v190)
  {
    v56 = (unint64_t *)(v190 + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
  std::string::basic_string[abi:ne180100]<0>(&v248, "W_h");
  EspressoConverter::setFourRecurrentWeightBlobs(v51, v52, v53, v54, v180, __val, __val, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v248.__r_.__value_.__l.__data_);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v55)
  {
    v58 = (unint64_t *)&v55->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v16)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v248, 1, 1, 4 * __val, 1);
    v60 = (uint64_t *)v14[10];
    v61 = v248.__r_.__value_.__r.__words[0];
    v62 = *(void **)(v248.__r_.__value_.__r.__words[0] + 24);
    std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
    if (v60)
      v63 = v60;
    else
      v63 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v63, v62, __val, (const void **)&__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v64 = (uint64_t *)v14[11];
    v65 = *(_QWORD *)(v61 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
    if (v64)
      v66 = v64;
    else
      v66 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v66, (void *)(v65 + 4 * __val), __val, (const void **)&__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v67 = (uint64_t *)v14[13];
    v68 = *(_QWORD *)(v61 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
    if (v67)
      v69 = v67;
    else
      v69 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v69, (void *)(v68 + 8 * __val), __val, (const void **)&__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v70 = (uint64_t *)v14[12];
    v71 = *(_QWORD *)(v61 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
    if (v70)
      v72 = v70;
    else
      v72 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v72, (void *)(v71 + 4 * (int)(3 * __val)), __val, (const void **)&__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v73 = (uint64_t)v189;
    v244 = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&__str, "b");
    v74 = 0;
    v75 = *(int *)(v61 + 8);
    do
    {
      v75 *= *(int *)(v61 + 12 + v74);
      v74 += 4;
    }
    while (v74 != 12);
    (*(void (**)(uint64_t, __int128 *, std::string *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v73 + 168))(v73, &v244, &__str, *(_QWORD *)(v61 + 24), 4 * v75, 0);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v76 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
    if (*((_QWORD *)&v244 + 1))
    {
      v77 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v79 = (std::__shared_weak_count *)v248.__r_.__value_.__l.__size_;
    if (v248.__r_.__value_.__l.__size_)
    {
      v80 = (unint64_t *)(v248.__r_.__value_.__l.__size_ + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
  }
  if (v221)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v248, 1, 1, 3 * __val, 1);
    v82 = (uint64_t *)v14[14];
    v83 = v248.__r_.__value_.__r.__words[0];
    v84 = *(void **)(v248.__r_.__value_.__r.__words[0] + 24);
    std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
    if (v82)
      v85 = v82;
    else
      v85 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v85, v84, __val, (const void **)&__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v86 = (uint64_t *)v14[15];
    v87 = *(_QWORD *)(v83 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
    if (v86)
      v88 = v86;
    else
      v88 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v88, (void *)(v87 + 4 * __val), __val, (const void **)&__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v89 = (uint64_t *)v14[16];
    v90 = *(_QWORD *)(v83 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
    if (v89)
      v91 = v89;
    else
      v91 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v91, (void *)(v90 + 8 * __val), __val, (const void **)&__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v92 = (uint64_t)v189;
    v244 = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&__str, "p");
    v93 = 0;
    v94 = *(int *)(v83 + 8);
    do
    {
      v94 *= *(int *)(v83 + 12 + v93);
      v93 += 4;
    }
    while (v93 != 12);
    (*(void (**)(uint64_t, __int128 *, std::string *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v92 + 168))(v92, &v244, &__str, *(_QWORD *)(v83 + 24), 4 * v94, 0);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v95 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
    if (*((_QWORD *)&v244 + 1))
    {
      v96 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    v98 = (std::__shared_weak_count *)v248.__r_.__value_.__l.__size_;
    if (v248.__r_.__value_.__l.__size_)
    {
      v99 = (unint64_t *)(v248.__r_.__value_.__l.__size_ + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
  }
  if (v14[10])
    v101 = (uint64_t *)v14[10];
  else
    v101 = &CoreML::Specification::_WeightParams_default_instance_;
  v102 = v101[5];
  if (*(char *)(v102 + 23) < 0)
    v103 = *(_QWORD *)(v102 + 8);
  else
    v103 = *(unsigned __int8 *)(v102 + 23);
  v104 = v101[6];
  if (*(char *)(v104 + 23) < 0)
    v105 = *(_QWORD *)(v104 + 8);
  else
    v105 = *(unsigned __int8 *)(v104 + 23);
  v106 = *((_DWORD *)v101 + 4);
  v107 = v101[7];
  if (*(char *)(v107 + 23) < 0)
    v108 = *(_QWORD *)(v107 + 8);
  else
    v108 = *(unsigned __int8 *)(v107 + 23);
  if (v106 <= 0)
    v109 = 1;
  else
    v109 = 2;
  if (v103)
    v110 = v109;
  else
    v110 = v106 > 0;
  if (v105)
    ++v110;
  if (v108)
    ++v110;
  _ZF = v106 <= 0 && v110 == 1;
  if (!_ZF)
    goto LABEL_214;
  if ((*(_BYTE *)(v102 + 23) & 0x80) != 0)
  {
    if (*(_QWORD *)(v102 + 8))
      goto LABEL_212;
  }
  else if (*(_BYTE *)(v102 + 23))
  {
LABEL_212:
    v112 = 1;
    goto LABEL_241;
  }
LABEL_214:
  if (v14[6])
    v113 = (uint64_t *)v14[6];
  else
    v113 = &CoreML::Specification::_WeightParams_default_instance_;
  v114 = v113[5];
  v115 = *(unsigned __int8 *)(v114 + 23);
  if (*(char *)(v114 + 23) < 0)
    v116 = *(_QWORD *)(v114 + 8);
  else
    v116 = *(unsigned __int8 *)(v114 + 23);
  v117 = v113[6];
  if (*(char *)(v117 + 23) < 0)
    v118 = *(_QWORD *)(v117 + 8);
  else
    v118 = *(unsigned __int8 *)(v117 + 23);
  v119 = *((_DWORD *)v113 + 4);
  v120 = v113[7];
  if (*(char *)(v120 + 23) < 0)
    v121 = *(_QWORD *)(v120 + 8);
  else
    v121 = *(unsigned __int8 *)(v120 + 23);
  v112 = 0;
  if (v119 <= 0)
    v122 = 1;
  else
    v122 = 2;
  if (v116)
    v123 = v122;
  else
    v123 = v119 > 0;
  if (v118)
    ++v123;
  if (v121)
    ++v123;
  if (v119 <= 0 && v123 == 1)
  {
    if ((v115 & 0x80) != 0)
      v115 = *(_QWORD *)(v114 + 8);
    v112 = v115 != 0;
  }
LABEL_241:
  if (**((_BYTE **)v178 + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)v178, (uint64_t *)&v234);
  }
  else
  {
    v124 = (uint64_t **)*((_QWORD *)v178 + 1);
    if (*((_DWORD *)a2 + 35) == 420)
    {
      v125 = (const CoreML::Specification::UniDirectionalLSTMLayerParams *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v178);
      v125 = (const CoreML::Specification::UniDirectionalLSTMLayerParams *)&CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_;
    }
    CoreML::Specification::UniDirectionalLSTMLayerParams::UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)&v248, v125);
    v126 = v249;
    v127 = v231;
    for (i = v232; v127 != i; ++v127)
    {
      v247 = 0;
      *(_OWORD *)&v245.__r_.__value_.__r.__words[1] = 0u;
      v246 = 0u;
      v244 = xmmword_19CB39920;
      v245.__r_.__value_.__r.__words[0] = 0xFFFFFFFF00000001;
      v129 = std::map<std::string,std::string>::at((uint64_t)v124, v127);
      v244 = *(_OWORD *)v129;
      *(_OWORD *)&v245.__r_.__value_.__l.__data_ = *(_OWORD *)(v129 + 16);
      v130 = *(char **)(v129 + 40);
      v245.__r_.__value_.__r.__words[2] = *(_QWORD *)(v129 + 32);
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v246, v130, *(_QWORD *)(v129 + 48), (uint64_t)(*(_QWORD *)(v129 + 48) - (_QWORD)v130) >> 2);
      if (DWORD1(v244) != -1 && DWORD1(v244) != 1)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
        v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str.__r_.__value_.__r.__words[2], (uint64_t)"LSTM layer: '", 13);
        v150 = *((_QWORD *)a2 + 14);
        v151 = *(char *)(v150 + 23);
        if (v151 >= 0)
          v152 = *((_QWORD *)a2 + 14);
        else
          v152 = *(_QWORD *)v150;
        if (v151 >= 0)
          v153 = *(unsigned __int8 *)(v150 + 23);
        else
          v153 = *(_QWORD *)(v150 + 8);
        v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, v152, v153);
        v155 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)"': height dimension of the input blob must be 1.", 48);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v155);
        v156 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v156, &v239);
        __cxa_throw(v156, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if ((_DWORD)v244 != -1 && (_DWORD)v244 != 1)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
        v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str.__r_.__value_.__r.__words[2], (uint64_t)"LSTM layer: '", 13);
        v142 = *((_QWORD *)a2 + 14);
        v143 = *(char *)(v142 + 23);
        if (v143 >= 0)
          v144 = *((_QWORD *)a2 + 14);
        else
          v144 = *(_QWORD *)v142;
        if (v143 >= 0)
          v145 = *(unsigned __int8 *)(v142 + 23);
        else
          v145 = *(_QWORD *)(v142 + 8);
        v146 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, v144, v145);
        v147 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)"': width dimension of the input blob must be 1.", 47);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v147);
        v148 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v148, &v239);
        __cxa_throw(v148, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if ((_QWORD)v246)
        operator delete((void *)v246);
    }
    v131 = v234;
    for (j = v235; v131 != j; v131 += 24)
    {
      __str.__r_.__value_.__r.__words[0] = 0x100000001;
      LODWORD(__str.__r_.__value_.__r.__words[1]) = v126;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 4) = -1;
      HIDWORD(__str.__r_.__value_.__r.__words[2]) = -1;
      v241 = 0u;
      v242 = 0u;
      v243 = 0;
      EspressoConverter::validateShape((int *)&__str, *((_QWORD *)a2 + 14), (uint64_t)v234);
      *(_QWORD *)&v244 = v131;
      v133 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v124, v131, (__int128 **)&v244);
      *((_QWORD *)v133 + 7) = 0x100000001;
      *((_DWORD *)v133 + 16) = v126;
      *(_QWORD *)(v133 + 68) = -1;
      *((_DWORD *)v133 + 19) = -1;
      *((_QWORD *)v133 + 10) = 0;
      *((_QWORD *)v133 + 11) = 0;
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v133 + 96, 0, 0, 0);
    }
    CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)&v248);
  }
  v134 = (std::__shared_weak_count *)v190;
  if (v190)
  {
    v135 = (unint64_t *)(v190 + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v187;
  if (v187)
  {
    v138 = (unint64_t *)&v187->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v215 = &off_1E3D4CC40;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v216);
  CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)v223);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v231;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v234;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  return v112;
}

void sub_19C9637B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a71;
  void *v71;
  int v72;
  uint64_t v73;
  void *v75;

  if (SLOBYTE(STACK[0x25F]) < 0)
  {
    operator delete((void *)STACK[0x248]);
    if ((v72 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x260]);
      v75 = *(void **)(v73 - 216);
      if (v75)
        operator delete(v75);
      CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)(v73 - 192));
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
      a57 = (uint64_t)&off_1E3D4CC40;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a58);
      CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)&a61);
      a37 = (uint64_t)&a71;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
      a37 = (uint64_t)&STACK[0x208];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
      if (SLOBYTE(STACK[0x237]) < 0)
        operator delete((void *)STACK[0x220]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v72)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v71);
  goto LABEL_6;
}

void sub_19C963AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,unint64_t *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void (**a57)(CoreML::Specification::LSTMParams *__hidden this),uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  uint64_t v71;
  void *v73;

  v73 = *(void **)(v71 - 216);
  if (v73)
    operator delete(v73);
  CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)(v71 - 192));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](&a34);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](&a31);
  a57 = &off_1E3D4CC40;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a58);
  CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)&a61);
  a37 = (unint64_t *)&a71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a37);
  a37 = &STACK[0x208];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a37);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  _Unwind_Resume(a1);
}

void sub_19C963AF4()
{
  JUMPOUT(0x19C963B20);
}

void sub_19C963B00(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_19C963B0C()
{
  __cxa_end_catch();
  JUMPOUT(0x19C963B14);
}

void LayerTranslator::addWhereNonZero(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::string v15;
  std::string v16;
  void *__p;
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::string *v34;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v27.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v5;
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v24, (uint64_t *)&v21, *((_QWORD *)this + 1));
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "nonzero");
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v21, v22, 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v21) >> 3));
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v24, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v24) >> 3));
  memset(&v29, 0, sizeof(v29));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v29, (__int128 *)v16.__r_.__value_.__l.__data_, (__int128 *)v16.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16.__r_.__value_.__l.__size_ - v16.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v28, 0, sizeof(v28));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v28, (__int128 *)v15.__r_.__value_.__l.__data_, (__int128 *)v15.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15.__r_.__value_.__l.__size_ - v15.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v31.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v6[14] + 8))(*(_QWORD *)(v6[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v32 = v19;
  v33 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  memset(&v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v31, (__int128 *)v29.__r_.__value_.__l.__data_, (__int128 *)v29.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29.__r_.__value_.__l.__size_ - v29.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v30, 0, sizeof(v30));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v30, (__int128 *)v28.__r_.__value_.__l.__data_, (__int128 *)v28.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28.__r_.__value_.__l.__size_ - v28.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v34 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v9 = v33;
  if (v33)
  {
    v10 = (unint64_t *)&v33->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (*v6)
    Espresso::sequential_builder::add_shape_from_kernel();
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  v12 = v20;
  if (v20)
  {
    v13 = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  if (v18 < 0)
    operator delete(__p);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v24);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_19C963EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  uint64_t v36;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  *(_QWORD *)(v36 - 56) = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = v36 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  if (a20 < 0)
    operator delete(__p);
  __p = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a24 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(a1);
}

void LayerTranslator::addCustomLayer(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v3;
  __int128 v4;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v5;
  _QWORD *v6;
  __int128 *v7;
  __int128 v8;
  std::string *v9;
  id v10;
  void *v11;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v12;
  _QWORD **v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  void *v21;
  void *v22;
  std::string *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  std::runtime_error *exception;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type size;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  uint64_t v36;
  id v37;
  _QWORD *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v44;
  int *v45;
  std::vector<int>::size_type v46;
  unint64_t *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  unint64_t i;
  std::string *inited;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t j;
  int v69;
  uint64_t k;
  void *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t **v75;
  char *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  void *v84;
  void *v86;
  std::string v87;
  std::string v88;
  __int128 v89;
  std::string v90;
  std::string v91;
  void *v92[2];
  _QWORD v93[4];
  int v94;
  std::string v95;
  __int128 *v96;
  __int128 *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  std::string v102;
  std::string v103;
  __int128 v104;
  void *v105[3];
  std::string v106;
  std::string v107;
  std::string v108;
  std::string *v109;
  const __CFString *v110;
  _QWORD v111[4];

  v111[1] = *MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v3 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    v102.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v4;
  }
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v99, (uint64_t *)&v96, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 500)
  {
    v6 = (_QWORD *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v5);
    v6 = &CoreML::Specification::_CustomLayerParams_default_instance_;
  }
  v7 = (__int128 *)v6[9];
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v8 = *v7;
    v95.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v8;
  }
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v95;
  else
    v9 = (std::string *)v95.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D1F4D8], "registerBrickClass:", NSClassFromString(CFSTR("MLCustomLayerWrapper")));
  memset(v93, 0, sizeof(v93));
  *(_OWORD *)v92 = 0u;
  MEMORY[0x1A1AD5EAC](v92, "MLCustomLayerWrapper");
  v10 = objc_alloc(MEMORY[0x1E0C99E08]);
  v110 = CFSTR("engineName");
  v111[0] = v84;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v111, &v110, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v86 = (void *)objc_msgSend(v10, "initWithDictionary:", v11);

  if (*((_DWORD *)a2 + 35) == 500)
  {
    v13 = (_QWORD **)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v12);
    v13 = (_QWORD **)&CoreML::Specification::_CustomLayerParams_default_instance_;
  }
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v108, v13[8]);
  while (v108.__r_.__value_.__r.__words[0])
  {
    v14 = *(__int128 **)(v108.__r_.__value_.__r.__words[0] + 24);
    if (*((char *)v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
    }
    else
    {
      v15 = *v14;
      v103.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v15;
    }
    *(_QWORD *)&v104 = &off_1E3D577D8;
    *((_QWORD *)&v104 + 1) = 0;
    LODWORD(v105[1]) = 0;
    v16 = *((_QWORD *)v14 + 4);
    if ((v16 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&v104 + 1, v16 & 0xFFFFFFFFFFFFFFFELL);
    HIDWORD(v105[1]) = 0;
    v17 = *((_DWORD *)v14 + 13);
    if (v17 <= 29)
    {
      if (v17 == 10)
      {
        v22 = (void *)*((_QWORD *)v14 + 5);
        CoreML::Specification::CustomLayerParams_CustomLayerParamValue::clear_value((uint64_t)&v104);
        HIDWORD(v105[1]) = 10;
        v105[0] = v22;
      }
      else if (v17 == 20)
      {
        v19 = *((_QWORD *)v14 + 5);
        CoreML::Specification::CustomLayerParams_CustomLayerParamValue::clear_value((uint64_t)&v104);
        HIDWORD(v105[1]) = 20;
        v105[0] = &google::protobuf::internal::fixed_address_empty_string;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v105, v19);
      }
    }
    else
    {
      switch(v17)
      {
        case 30:
          v20 = *((_DWORD *)v14 + 10);
          CoreML::Specification::CustomLayerParams_CustomLayerParamValue::clear_value((uint64_t)&v104);
          HIDWORD(v105[1]) = 30;
          LODWORD(v105[0]) = v20;
          break;
        case 40:
          v21 = (void *)*((_QWORD *)v14 + 5);
          CoreML::Specification::CustomLayerParams_CustomLayerParamValue::clear_value((uint64_t)&v104);
          HIDWORD(v105[1]) = 40;
          v105[0] = v21;
          break;
        case 50:
          v18 = *((_BYTE *)v14 + 40);
          CoreML::Specification::CustomLayerParams_CustomLayerParamValue::clear_value((uint64_t)&v104);
          HIDWORD(v105[1]) = 50;
          LOBYTE(v105[0]) = v18;
          break;
      }
    }
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v103;
    else
      v23 = (std::string *)v103.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = 0;
    if (SHIDWORD(v105[1]) > 29)
    {
      switch(HIDWORD(v105[1]))
      {
        case 0x1E:
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", LODWORD(v105[0]));
          v26 = objc_claimAutoreleasedReturnValue();
          break;
        case 0x28:
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v105[0]);
          v26 = objc_claimAutoreleasedReturnValue();
          break;
        case 0x32:
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", LOBYTE(v105[0]));
          v26 = objc_claimAutoreleasedReturnValue();
          break;
        default:
          goto LABEL_49;
      }
      goto LABEL_48;
    }
    switch(HIDWORD(v105[1]))
    {
      case 0xA:
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)v105);
        v26 = objc_claimAutoreleasedReturnValue();
        goto LABEL_48;
      case 0x14:
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:");
        v26 = objc_claimAutoreleasedReturnValue();
LABEL_48:
        v25 = (void *)v26;
        break;
      case 0:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v28 = std::string::append(&v90, ", parameter key ");
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v103;
        else
          v30 = (std::string *)v103.__r_.__value_.__r.__words[0];
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
        else
          size = v103.__r_.__value_.__l.__size_;
        v32 = std::string::append(&v91, (const std::string::value_type *)v30, size);
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v106.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        v34 = std::string::append(&v106, " has no value.");
        v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v107.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v107);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
LABEL_49:
    objc_msgSend(v86, "setValue:forKey:", v25, v24);

    google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::~MapPair((uint64_t)&v103);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++((unsigned __int8 **)&v108);
  }
  if (**((_BYTE **)this + 2))
    objc_msgSend(v86, "setValue:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("_internal_NDMode"));
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v86, 0, 0);
  v36 = objc_claimAutoreleasedReturnValue();
  v37 = objc_retainAutorelease((id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v36, 4));
  std::string::basic_string[abi:ne180100]<0>(&v103, (char *)objc_msgSend(v37, "UTF8String"));
  if (SHIBYTE(v93[3]) < 0)
    operator delete((void *)v93[1]);
  *(std::string *)&v93[1] = v103;
  v94 = -1431655765 * ((unint64_t)(v100 - v99) >> 3);
  v38 = *(_QWORD **)this;
  v83 = (void *)v36;
  std::string::basic_string[abi:ne180100]<0>(&v91, "brick");
  memset(&v88, 0, sizeof(v88));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v88, v96, v97, 0xAAAAAAAAAAAAAAABLL * (((char *)v97 - (char *)v96) >> 3));
  memset(&v87, 0, sizeof(v87));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v87, (__int128 *)v99, (__int128 *)v100, 0xAAAAAAAAAAAAAAABLL * ((v100 - v99) >> 3));
  memset(&v107, 0, sizeof(v107));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v107, (__int128 *)v88.__r_.__value_.__l.__data_, (__int128 *)v88.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88.__r_.__value_.__l.__size_ - v88.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v106, 0, sizeof(v106));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v106, (__int128 *)v87.__r_.__value_.__l.__data_, (__int128 *)v87.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87.__r_.__value_.__l.__size_ - v87.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v103.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v38[14] + 8))(*(_QWORD *)(v38[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v89;
  if (*((_QWORD *)&v89 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  memset(&v103, 0, sizeof(v103));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v103, (__int128 *)v107.__r_.__value_.__l.__data_, (__int128 *)v107.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107.__r_.__value_.__l.__size_ - v107.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v108, 0, sizeof(v108));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v108, (__int128 *)v106.__r_.__value_.__l.__data_, (__int128 *)v106.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106.__r_.__value_.__l.__size_ - v106.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v109 = &v108;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
  v109 = &v103;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
  v41 = (std::__shared_weak_count *)v90.__r_.__value_.__l.__size_;
  if (v90.__r_.__value_.__l.__size_)
  {
    v42 = (unint64_t *)(v90.__r_.__value_.__l.__size_ + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (*v38)
    Espresso::sequential_builder::add_shape_from_kernel();
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v107;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (*((_DWORD *)a2 + 35) == 500)
  {
    v45 = (int *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v44);
    v45 = (int *)&CoreML::Specification::_CustomLayerParams_default_instance_;
  }
  v46 = v45[6];
  *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v89;
  if (*((_QWORD *)&v89 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  std::vector<unsigned char>::vector(&v108, 4uLL);
  *v108.__r_.__value_.__l.__data_ = BYTE3(v46);
  *(_BYTE *)(v108.__r_.__value_.__r.__words[0] + 1) = BYTE2(v46);
  *(_BYTE *)(v108.__r_.__value_.__r.__words[0] + 2) = BYTE1(v46);
  *(_BYTE *)(v108.__r_.__value_.__r.__words[0] + 3) = v46;
  std::vector<int>::vector((std::vector<int> *)&v107, v46);
  if ((_DWORD)v46)
  {
    if ((v46 & 0x80000000) != 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v49 = operator new(8 * v46);
    bzero(v49, 8 * v46);
    v50 = 0;
    for (i = 0; i != v46; ++i)
    {
      inited = std::to_string(&v103, i);
      v53 = *((_DWORD *)a2 + 35);
      if (v53 == 500)
      {
        v54 = (_QWORD *)*((_QWORD *)a2 + 16);
      }
      else
      {
        inited = (std::string *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v53 = *((_DWORD *)a2 + 35);
        v54 = &CoreML::Specification::_CustomLayerParams_default_instance_;
      }
      v55 = v50 >> 32;
      if (*(int *)(*(_QWORD *)(v54[4] + (v50 >> 29) + 8) + 16) < 1)
      {
        if (v53 == 500)
        {
          v57 = (_QWORD *)*((_QWORD *)a2 + 16);
        }
        else
        {
          inited = (std::string *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v57 = &CoreML::Specification::_CustomLayerParams_default_instance_;
        }
        v61 = *(_QWORD *)(*(_QWORD *)(v57[4] + 8 * v55 + 8) + 40);
        if (*(char *)(v61 + 23) < 0)
          v62 = *(_QWORD *)(v61 + 8);
        else
          v62 = *(unsigned __int8 *)(v61 + 23);
        v63 = *((_DWORD *)a2 + 35);
        if (v62)
        {
          if (v63 == 500)
          {
            v64 = (_QWORD *)*((_QWORD *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            v64 = &CoreML::Specification::_CustomLayerParams_default_instance_;
          }
          v60 = *(uint64_t **)(*(_QWORD *)(v64[4] + 8 * v55 + 8) + 40);
        }
        else
        {
          if (v63 == 500)
          {
            v65 = (_QWORD *)*((_QWORD *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            v65 = &CoreML::Specification::_CustomLayerParams_default_instance_;
          }
          v60 = *(uint64_t **)(*(_QWORD *)(v65[4] + 8 * v55 + 8) + 48);
        }
        if (*((char *)v60 + 23) < 0)
        {
          v67 = v60;
          v60 = (uint64_t *)*v60;
          v66 = v67[1];
        }
        else
        {
          LODWORD(v66) = *((unsigned __int8 *)v60 + 23);
        }
        *(_DWORD *)(v107.__r_.__value_.__r.__words[0] + 4 * i) = v66;
      }
      else
      {
        if (v53 == 500)
        {
          v56 = (_QWORD *)*((_QWORD *)a2 + 16);
        }
        else
        {
          inited = (std::string *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v56 = &CoreML::Specification::_CustomLayerParams_default_instance_;
        }
        *(_DWORD *)(v107.__r_.__value_.__r.__words[0] + 4 * i) = 4
                                                               * *(_DWORD *)(*(_QWORD *)(v56[4] + 8 * v55 + 8) + 16);
        if (*((_DWORD *)a2 + 35) == 500)
        {
          v58 = (_QWORD *)*((_QWORD *)a2 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v58 = &CoreML::Specification::_CustomLayerParams_default_instance_;
        }
        v59 = *(_QWORD *)(*(_QWORD *)(v58[4] + 8 * v55 + 8) + 24);
        if (v59)
          v60 = (uint64_t *)(v59 + 8);
        else
          v60 = 0;
      }
      *((_QWORD *)v49 + i) = v60;
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v103.__r_.__value_.__l.__data_);
      v50 += 0x100000000;
    }
    for (j = 0; j != v46; ++j)
    {
      v69 = *(_DWORD *)(v107.__r_.__value_.__r.__words[0] + 4 * j);
      std::vector<unsigned char>::vector(&v103, 4uLL);
      *v103.__r_.__value_.__l.__data_ = HIBYTE(v69);
      *(_BYTE *)(v103.__r_.__value_.__r.__words[0] + 1) = BYTE2(v69);
      *(_BYTE *)(v103.__r_.__value_.__r.__words[0] + 2) = BYTE1(v69);
      *(_BYTE *)(v103.__r_.__value_.__r.__words[0] + 3) = v69;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)&v108, (char *)v108.__r_.__value_.__l.__size_, v103.__r_.__value_.__l.__data_, (char *)v103.__r_.__value_.__l.__size_, v103.__r_.__value_.__l.__size_ - v103.__r_.__value_.__r.__words[0]);
      if (v103.__r_.__value_.__r.__words[0])
      {
        v103.__r_.__value_.__l.__size_ = v103.__r_.__value_.__r.__words[0];
        operator delete(v103.__r_.__value_.__l.__data_);
      }
    }
    for (k = 0; k != v46; ++k)
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)&v108, (char *)v108.__r_.__value_.__l.__size_, *((char **)v49 + k), (char *)(*((_QWORD *)v49 + k) + *(int *)(v107.__r_.__value_.__r.__words[0] + 4 * k)), *(int *)(v107.__r_.__value_.__r.__words[0] + 4 * k));
  }
  else
  {
    v49 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v106, "MLCustomLayerWeights");
  v71 = v83;
  Espresso::brick_kernel::set_weight_blob();
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v99);
  }
  else
  {
    v72 = v99;
    if (v100 != v99)
    {
      v73 = 0;
      v74 = 0;
      v75 = (uint64_t **)*((_QWORD *)this + 1);
      do
      {
        memset(&v103, 255, sizeof(v103));
        v104 = 0u;
        memset(v105, 0, sizeof(v105));
        EspressoConverter::validateShape((int *)&v103, *((_QWORD *)a2 + 14), (uint64_t)&v72[v73]);
        if (v105[0])
        {
          v105[1] = v105[0];
          operator delete(v105[0]);
        }
        v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99[v73];
        v76 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v75, &v99[v73], (__int128 **)&v90);
        *((_QWORD *)v76 + 7) = -1;
        *((_QWORD *)v76 + 8) = -1;
        *((_QWORD *)v76 + 9) = -1;
        *((_QWORD *)v76 + 10) = 0;
        *((_QWORD *)v76 + 11) = 0;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v76 + 96, 0, 0, 0);
        v72 = v99;
        ++v74;
        v73 += 24;
      }
      while (v74 < 0xAAAAAAAAAAAAAAABLL * ((v100 - v99) >> 3));
    }
    v71 = v83;
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  if (v49)
    operator delete(v49);
  if (v107.__r_.__value_.__r.__words[0])
  {
    v107.__r_.__value_.__l.__size_ = v107.__r_.__value_.__r.__words[0];
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  if (v108.__r_.__value_.__r.__words[0])
  {
    v108.__r_.__value_.__l.__size_ = v108.__r_.__value_.__r.__words[0];
    operator delete(v108.__r_.__value_.__l.__data_);
  }
  v77 = (std::__shared_weak_count *)v91.__r_.__value_.__l.__size_;
  if (v91.__r_.__value_.__l.__size_)
  {
    v78 = (unint64_t *)(v91.__r_.__value_.__l.__size_ + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
  if (*((_QWORD *)&v89 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }

  if (SHIBYTE(v93[3]) < 0)
    operator delete((void *)v93[1]);
  if (SHIBYTE(v93[0]) < 0)
    operator delete(v92[0]);

  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
}

void sub_19C964D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,char a63)
{
  int v63;
  void *v64;
  void *v65;
  uint64_t v66;

  if (*(char *)(v66 - 169) < 0)
    operator delete(*(void **)(v66 - 192));
  if (*(char *)(v66 - 201) < 0)
    operator delete(*(void **)(v66 - 224));
  if (a33 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v63 & 1) == 0)
    {
LABEL_12:

      google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::~MapPair((uint64_t)&a63);
      std::pair<std::string,std::string>::~pair((uint64_t)&a35);

      if (a48 < 0)
        operator delete(a43);
      a35 = &a50;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
      a35 = &a53;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
      if (a61 < 0)
        operator delete(a56);
      _Unwind_Resume(a1);
    }
  }
  else if (!v63)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v65);
  goto LABEL_12;
}

void sub_19C964DA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;

  if (v25)
    operator delete(v25);
  v27 = *(void **)(v26 - 192);
  if (v27)
  {
    *(_QWORD *)(v26 - 184) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(v26 - 168);
  if (v28)
  {
    *(_QWORD *)(v26 - 160) = v28;
    operator delete(v28);
  }
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  JUMPOUT(0x19C964FF8);
}

void sub_19C964DAC()
{
  JUMPOUT(0x19C964FE0);
}

void sub_19C964DB8()
{
  JUMPOUT(0x19C964FF0);
}

void sub_19C964DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v52;

  *(_QWORD *)(v52 - 144) = v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 144));
  *(_QWORD *)(v52 - 144) = &a51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 144));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  JUMPOUT(0x19C964DFCLL);
}

void sub_19C964E08()
{
  JUMPOUT(0x19C964ED4);
}

void sub_19C964E10()
{
  JUMPOUT(0x19C964EE4);
}

void sub_19C964E18()
{
  JUMPOUT(0x19C964EF4);
}

void sub_19C964E20()
{
  JUMPOUT(0x19C964F04);
}

void sub_19C964E28()
{
  JUMPOUT(0x19C964F14);
}

void sub_19C964E34()
{
  void *v0;

  JUMPOUT(0x19C965050);
}

void sub_19C964E44(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_19C964E5C()
{
  __cxa_end_catch();
  JUMPOUT(0x19C965058);
}

void sub_19C964E68(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_19C964E78()
{
  JUMPOUT(0x19C965058);
}

void sub_19C964E80()
{
  JUMPOUT(0x19C965060);
}

void sub_19C964E88()
{
  JUMPOUT(0x19C965070);
}

void sub_19C964E94()
{
  JUMPOUT(0x19C964FD0);
}

void sub_19C964EA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  if (a27 < 0)
    operator delete(__p);
  __cxa_free_exception(v27);
  JUMPOUT(0x19C96503CLL);
}

void sub_19C964F1C()
{
  JUMPOUT(0x19C965000);
}

void sub_19C964F24()
{
  JUMPOUT(0x19C965004);
}

void sub_19C964F2C()
{
  JUMPOUT(0x19C965050);
}

void sub_19C964F48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x19C964F84);
}

void sub_19C964F60()
{
  JUMPOUT(0x19C965048);
}

void sub_19C964F6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0)
    operator delete(__p);
  JUMPOUT(0x19C964FC8);
}

void sub_19C964F80()
{
  uint64_t v0;
  uint64_t v1;

  if (*(char *)(v1 - 201) < 0)
    operator delete(*(void **)(v1 - 224));
  if (!v0)
    JUMPOUT(0x19C964FD0);
  JUMPOUT(0x19C964FC8);
}

void sub_19C964FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (a51)
    JUMPOUT(0x19C964FB8);
  JUMPOUT(0x19C964FC8);
}

void sub_19C96500C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t *v56;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v56);
  if (a56 < 0)
    operator delete(__p);
  JUMPOUT(0x19C965048);
}

void sub_19C96502C()
{
  JUMPOUT(0x19C965040);
}

void sub_19C965034()
{
  void *v0;

  JUMPOUT(0x19C96503CLL);
}

uint64_t google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::~MapPair(uint64_t a1)
{
  CoreML::Specification::CustomLayerParams_CustomLayerParamValue::~CustomLayerParams_CustomLayerParamValue((CoreML::Specification::CustomLayerParams_CustomLayerParamValue *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void LayerTranslator::addLowerTriangular(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  int v8;
  unsigned int v9;
  int v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::string v15;
  std::string v16;
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  _DWORD v21[3];
  char v22;
  int v23;
  void **v24;
  __int128 *v25;
  uint64_t v26;
  __int128 *v27;
  __int128 *v28;
  uint64_t v29;
  std::string v30;
  std::string *v31;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v30.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v5;
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v27, (uint64_t *)&v24, *((_QWORD *)this + 1));
  v23 = 0;
  if (*((_DWORD *)a2 + 35) == 1320)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_LowerTriangularLayerParams_default_instance_;
  }
  v8 = *((_DWORD *)v7 + 4);
  v9 = v8 >> 31;
  v10 = ~(v8 & (v8 >> 31));
  if (v8 < 0)
    v8 = -1;
  v22 = v9;
  v21[0] = v10;
  v21[1] = v8;
  v21[2] = 1;
  v11 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "matrix_band_part");
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, (__int128 *)v24, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v24) >> 3));
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
  Espresso::sequential_builder::add<Espresso::matrix_band_part_params_t>(&v19, v11, (uint64_t)__p, (uint64_t)&v30, (uint64_t)v21, (__int128 *)v16.__r_.__value_.__l.__data_, (__int128 *)v16.__r_.__value_.__l.__size_, (__int128 **)&v15);
  v12 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v31 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  v31 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  if (v18 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v27);
  __p[0] = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v24 = (void **)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v24);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_19C9652E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v27 - 40) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  *(_QWORD *)(v27 - 40) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  if (a20 < 0)
    operator delete(__p);
  __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v27 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addScatterND(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  std::runtime_error *exception;
  std::string v21;
  std::string v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::string v25;
  void *__p[2];
  uint64_t v27;
  void (**v28)(CoreML::Specification::ScatterNDLayerParams *__hidden);
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  __int16 v34;
  __int128 *v35;
  __int128 *v36;
  uint64_t v37;
  __int128 *v38;
  __int128 *v39;
  uint64_t v40;
  std::string v41;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v41.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v5;
  }
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v38, (uint64_t *)&v35, *((_QWORD *)this + 1));
  v33 = 0;
  v34 = 257;
  v32 = 1;
  if (*((_DWORD *)a2 + 35) == 945)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_ScatterNDLayerParams_default_instance_;
  }
  v28 = &off_1E3D52B40;
  v29 = 0;
  v31 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v29, v8 & 0xFFFFFFFFFFFFFFFELL);
  v9 = *((_DWORD *)v7 + 4);
  v30 = v9;
  if (v9 >= 7)
  {
    if (v9 == 0x80000000 || v9 == 0x7FFFFFFF)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"ScatterND layer: '", 18);
      v15 = *((_QWORD *)a2 + 14);
      v16 = *(char *)(v15 + 23);
      if (v16 >= 0)
        v17 = *((_QWORD *)a2 + 14);
      else
        v17 = *(_QWORD *)v15;
      if (v16 >= 0)
        v18 = *(unsigned __int8 *)(v15 + 23);
      else
        v18 = *(_QWORD *)(v15 + 8);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v17, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"': unknown value for parameter 'mode'.", 38);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &v25);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    v33 = v9;
  }
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter_nd");
  memset(&v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, v35, v36, 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v35) >> 3));
  memset(&v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, v38, v39, 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)v38) >> 3));
  Espresso::sequential_builder::add<Espresso::scatter_nd_params_t>(&v23, v10, (uint64_t)__p, (uint64_t)&v41, (uint64_t)&v32, (__int128 *)v22.__r_.__value_.__l.__data_, (__int128 *)v22.__r_.__value_.__l.__size_, (__int128 **)&v21);
  v11 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v38);
  v28 = &off_1E3D52B40;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v29);
  __p[0] = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
}

void sub_19C965654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t *v29;
  void *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v32 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a24);
      *(_QWORD *)(v33 - 168) = v31;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v29);
      a24 = (void *)(v33 - 128);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
      a24 = (void *)(v33 - 104);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
      if (*(char *)(v33 - 57) < 0)
        operator delete(*(void **)(v33 - 80));
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

BOOL LayerTranslator::addLoadConstant(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  std::vector<std::string>::const_iterator v6;
  std::vector<std::string>::const_iterator v7;
  std::vector<std::string>::iterator v8;
  const CoreML::Specification::LoadConstantLayerParams *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v29;
  void **p_begin;
  int WeightParamSize;
  unint64_t *v32;
  unint64_t v33;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t **v37;
  const CoreML::Specification::LoadConstantLayerParams *v38;
  int v39;
  int v40;
  int v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  _BOOL8 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void *exception;
  void *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  std::string v73;
  std::string v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  __int128 v77;
  unint64_t v78;
  _BYTE v79[16];
  int v80;
  _QWORD *v81;
  uint64_t *v82;
  std::vector<std::string> v83;
  __int128 *v84;
  __int128 *v85;
  uint64_t v86;
  std::string v87;
  std::vector<std::string> *v88;
  int v89;
  uint64_t v90;
  int v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  void **v95[3];
  _DWORD *v96;
  __int128 *v97;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v87.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v5;
  }
  v84 = 0;
  v85 = 0;
  v86 = 0;
  memset(&v83, 0, sizeof(v83));
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v84, (uint64_t *)&v83, *((_QWORD *)this + 1));
  v6.__i_ = v83.__begin_;
  v7.__i_ = v83.__end_;
  v8.__i_ = std::vector<std::string>::erase(&v83, v6, v7).__i_;
  if (*((_DWORD *)a2 + 35) == 290)
  {
    v9 = (const CoreML::Specification::LoadConstantLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v8.__i_);
    v9 = (const CoreML::Specification::LoadConstantLayerParams *)&CoreML::Specification::_LoadConstantLayerParams_default_instance_;
  }
  CoreML::Specification::LoadConstantLayerParams::LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)v79, v9);
  v77 = xmmword_19CB39920;
  v78 = 0xFFFFFFFF00000001;
  if (v80 != 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Load Constant: shape must be of size 3");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = v81[1];
  v11 = v81[2];
  v12 = v81[3];
  DWORD2(v77) = v10;
  *(_QWORD *)&v77 = __PAIR64__(v11, v12);
  v13 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v88, "load_constant");
  memset(&v74, 0, sizeof(v74));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v74, (__int128 *)v83.__begin_, (__int128 *)v83.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v83.__end_ - (char *)v83.__begin_) >> 3));
  memset(&v73, 0, sizeof(v73));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v73, v84, v85, 0xAAAAAAAAAAAAAAABLL * (((char *)v85 - (char *)v84) >> 3));
  Espresso::sequential_builder::add<Espresso::load_constant_params>(&v75, v13, (uint64_t)&v88, (uint64_t)&v87, (uint64_t)&v77, (__int128 *)v74.__r_.__value_.__l.__data_, (__int128 *)v74.__r_.__value_.__l.__size_, (__int128 **)&v73);
  v95[0] = (void **)&v73;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v95);
  v95[0] = (void **)&v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v95);
  if (SHIBYTE(v91) < 0)
    operator delete(v88);
  v71 = v75;
  v72 = v76;
  if (v76)
  {
    p_shared_owners = (unint64_t *)&v76->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v69, v77, SDWORD1(v77), SDWORD2(v77), SHIDWORD(v77));
  if (v82)
    v16 = v82;
  else
    v16 = &CoreML::Specification::_WeightParams_default_instance_;
  v17 = v16[5];
  if (*(char *)(v17 + 23) < 0)
    v18 = *(_QWORD *)(v17 + 8);
  else
    v18 = *(unsigned __int8 *)(v17 + 23);
  v19 = v16[6];
  v20 = *(unsigned __int8 *)(v19 + 23);
  if (*(char *)(v19 + 23) < 0)
    v21 = *(_QWORD *)(v19 + 8);
  else
    v21 = *(unsigned __int8 *)(v19 + 23);
  v22 = *((_DWORD *)v16 + 4);
  v23 = v16[7];
  if (*(char *)(v23 + 23) < 0)
    v24 = *(_QWORD *)(v23 + 8);
  else
    v24 = *(unsigned __int8 *)(v23 + 23);
  if (v22 <= 0)
    v25 = 1;
  else
    v25 = 2;
  if (v18)
    v26 = v25;
  else
    v26 = v22 > 0;
  if (v21)
    ++v26;
  if (v24)
    ++v26;
  if (v22 > 0 || v26 != 1)
    goto LABEL_53;
  if ((*(_BYTE *)(v17 + 23) & 0x80) != 0)
  {
    if (!*(_QWORD *)(v17 + 8))
      goto LABEL_44;
LABEL_53:
    WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)v16);
    if (WeightParamSize != DWORD1(v77) * DWORD2(v77) * (_DWORD)v77)
    {
      v67 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](v67, "Load Constant: data size does not match provided shape");
      __cxa_throw(v67, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v69 + 24), v16, 4 * HIDWORD(v77) * WeightParamSize);
    goto LABEL_55;
  }
  if (*(_BYTE *)(v17 + 23))
    goto LABEL_53;
LABEL_44:
  if ((v20 & 0x80) != 0)
    v20 = *(_QWORD *)(v19 + 8);
  if (v16 == &CoreML::Specification::_WeightParams_default_instance_)
    goto LABEL_53;
  if (!v20 || v16[8] == 0)
    goto LABEL_53;
  v29 = v11 * v10 * v12;
  EspressoConverter::readFloatFromWeightParams((EspressoConverter *)&v88, (const CoreML::Specification::WeightParams *)v16, v29);
  p_begin = (void **)&v88->__begin_;
  memcpy(*(void **)(v69 + 24), v88, 4 * v29);
  if (p_begin)
    operator delete(p_begin);
LABEL_55:
  v68 = v70;
  if (v70)
  {
    v32 = (unint64_t *)&v70->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)Espresso::generic_load_constant_kernel::set_constant_blob();
  if (v68)
  {
    v35 = (unint64_t *)&v68->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v84);
  }
  else
  {
    v37 = (uint64_t **)*((_QWORD *)this + 1);
    if (*((_DWORD *)a2 + 35) == 290)
    {
      v38 = (const CoreML::Specification::LoadConstantLayerParams *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v34);
      v38 = (const CoreML::Specification::LoadConstantLayerParams *)&CoreML::Specification::_LoadConstantLayerParams_default_instance_;
    }
    CoreML::Specification::LoadConstantLayerParams::LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)v95, v38);
    v40 = v96[4];
    v41 = v96[2];
    LODWORD(v88) = v96[6];
    v39 = (int)v88;
    HIDWORD(v88) = v40;
    v90 = -1;
    v89 = v41;
    v91 = -1;
    v92 = 0u;
    v93 = 0u;
    v94 = 0;
    EspressoConverter::validateShape((int *)&v88, *((_QWORD *)a2 + 14), (uint64_t)v84);
    v97 = v84;
    v42 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37, v84, &v97);
    *((_DWORD *)v42 + 14) = v39;
    *((_DWORD *)v42 + 15) = v40;
    *((_DWORD *)v42 + 16) = v41;
    *(_QWORD *)(v42 + 68) = -1;
    *((_DWORD *)v42 + 19) = -1;
    *((_QWORD *)v42 + 10) = 0;
    *((_QWORD *)v42 + 11) = 0;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v42 + 96, 0, 0, 0);
    CoreML::Specification::LoadConstantLayerParams::~LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)v95);
  }
  if (v82)
    v43 = v82;
  else
    v43 = &CoreML::Specification::_WeightParams_default_instance_;
  v44 = v43[5];
  v45 = *(unsigned __int8 *)(v44 + 23);
  if (*(char *)(v44 + 23) < 0)
    v46 = *(_QWORD *)(v44 + 8);
  else
    v46 = *(unsigned __int8 *)(v44 + 23);
  v47 = v43[6];
  if (*(char *)(v47 + 23) < 0)
    v48 = *(_QWORD *)(v47 + 8);
  else
    v48 = *(unsigned __int8 *)(v47 + 23);
  v49 = *((_DWORD *)v43 + 4);
  v50 = v43[7];
  if (*(char *)(v50 + 23) < 0)
    v51 = *(_QWORD *)(v50 + 8);
  else
    v51 = *(unsigned __int8 *)(v50 + 23);
  if (v49 <= 0)
    v52 = 1;
  else
    v52 = 2;
  if (v46)
    v53 = v52;
  else
    v53 = v49 > 0;
  if (v48)
    ++v53;
  if (v51)
    ++v53;
  if (v49 <= 0 && v53 == 1)
  {
    if ((v45 & 0x80) != 0)
      v45 = *(_QWORD *)(v44 + 8);
    v55 = v45 != 0;
  }
  else
  {
    v55 = 0;
  }
  v56 = v70;
  if (v70)
  {
    v57 = (unint64_t *)&v70->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v72;
  if (v72)
  {
    v60 = (unint64_t *)&v72->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v76;
  if (v76)
  {
    v63 = (unint64_t *)&v76->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  CoreML::Specification::LoadConstantLayerParams::~LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)v79);
  v88 = &v83;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  v88 = (std::vector<std::string> *)&v84;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  return v55;
}

void sub_19C965DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  CoreML::Specification::LoadConstantLayerParams::~LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)&a26);
  a26 = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  a26 = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (a44 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::vector<std::string>::iterator std::vector<std::string>::erase(std::vector<std::string> *this, std::vector<std::string>::const_iterator __first, std::vector<std::string>::const_iterator __last)
{
  std::__wrap_iter<const std::string *>::iterator_type i;
  std::string *v4;
  const std::string *end;
  int64_t v7;
  _BYTE *v8;
  __int128 v9;

  if (__first.__i_ != __last.__i_)
  {
    i = __last.__i_;
    v4 = (std::string *)__first.__i_;
    end = this->__end_;
    if (__last.__i_ != end)
    {
      v7 = 8 * (((char *)__last.__i_ - (char *)__first.__i_) >> 3);
      do
      {
        if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
          operator delete(v4->__r_.__value_.__l.__data_);
        v8 = (char *)v4 + v7;
        v9 = *(_OWORD *)((char *)&v4->__r_.__value_.__l.__data_ + v7);
        v4->__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[(unint64_t)v7 / 8 + 2];
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v9;
        ++v4;
        v8[23] = 0;
        *v8 = 0;
      }
      while ((std::string *)((char *)v4 + v7) != end);
      i = this->__end_;
    }
    while (i != v4)
    {
      if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(i[-1].__r_.__value_.__l.__data_);
      --i;
    }
    this->__end_ = v4;
  }
  return (std::vector<std::string>::iterator)this;
}

void LayerTranslator::addL2Norm(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  float v9;
  _QWORD *v10;
  uint64_t **v11;
  uint64_t v12;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::string v21;
  std::string v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  int v25;
  uint64_t v26;
  void (**v27)(CoreML::Specification::L2NormalizeLayerParams *__hidden);
  uint64_t v28;
  float v29;
  int v30;
  __int128 *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 *v34;
  __int128 *v35;
  uint64_t v36;
  std::string v37;
  _OWORD v38[2];
  uint64_t v39;
  void *__p;
  void *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v37.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v5;
  }
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v34, (uint64_t *)&v31, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 170)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_L2NormalizeLayerParams_default_instance_;
  }
  v27 = &off_1E3D53B48;
  v28 = 0;
  v30 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v28, v8 & 0xFFFFFFFFFFFFFFFELL);
  v9 = *((float *)v7 + 4);
  v29 = v9;
  v25 = 897988541;
  v26 = 0x200000003;
  if (v9 != 0.0)
    v25 = LODWORD(v9);
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v49, "l2_normalize");
  memset(&v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, v31, v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v31) >> 3));
  memset(&v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, v34, v35, 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (char *)v34) >> 3));
  Espresso::sequential_builder::add<Espresso::l2_norm_params>(&v23, v10, (uint64_t)&v49, (uint64_t)&v37, (uint64_t)&v25, (__int128 *)v22.__r_.__value_.__l.__data_, (__int128 *)v22.__r_.__value_.__l.__size_, (__int128 **)&v21);
  *(_QWORD *)&v43 = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  *(_QWORD *)&v43 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  if (SBYTE7(v50) < 0)
    operator delete((void *)v49);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v34);
  }
  else
  {
    v11 = (uint64_t **)*((_QWORD *)this + 1);
    v12 = std::map<std::string,std::string>::at((uint64_t)v11, v31);
    v49 = *(_OWORD *)v12;
    v50 = *(_OWORD *)(v12 + 16);
    v51 = *(_QWORD *)(v12 + 32);
    v52 = 0;
    v53 = 0;
    v54 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v52, *(const void **)(v12 + 40), *(_QWORD *)(v12 + 48), (uint64_t)(*(_QWORD *)(v12 + 48) - *(_QWORD *)(v12 + 40)) >> 2);
    v43 = v49;
    v44 = v50;
    v13 = v52;
    v45 = v51;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v46, v52, v53, (v53 - (uint64_t)v52) >> 2);
    v38[0] = v43;
    v38[1] = v44;
    v14 = v46;
    v39 = v45;
    __p = 0;
    v41 = 0;
    v42 = 0;
    v15 = v47;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v46, v47, (v47 - (uint64_t)v46) >> 2);
    EspressoConverter::validateShape((int *)v38, *((_QWORD *)a2 + 14), (uint64_t)v34);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    v55 = v34;
    v16 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, v34, &v55);
    v17 = v44;
    *(_OWORD *)(v16 + 56) = v43;
    *(_OWORD *)(v16 + 72) = v17;
    *((_QWORD *)v16 + 11) = v45;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v16 + 96, v14, v15, (v15 - (uint64_t)v14) >> 2);
    if (v14)
      operator delete(v14);
    if (v13)
      operator delete(v13);
  }
  v18 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v27 = &off_1E3D53B48;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v28);
  *(_QWORD *)&v49 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  *(_QWORD *)&v49 = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
}

void sub_19C9662F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p)
{
  uint64_t *v41;
  void *v42;
  void *v43;
  uint64_t v44;

  if (__p)
  {
    operator delete(__p);
    if (!v43)
    {
LABEL_3:
      if (!v42)
      {
LABEL_8:
        std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
        google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v41);
        *(_QWORD *)(v44 - 224) = &a23;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 224));
        *(_QWORD *)(v44 - 224) = &a26;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 224));
        if (a34 < 0)
          operator delete(a29);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v42);
      goto LABEL_8;
    }
  }
  else if (!v43)
  {
    goto LABEL_3;
  }
  operator delete(v43);
  if (!v42)
    goto LABEL_8;
  goto LABEL_7;
}

void Espresso::sequential_builder::add<Espresso::l2_norm_params>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C9665F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addGetShape(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::string v15;
  std::string v16;
  void *__p;
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::string *v35;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v28.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v5;
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v25, (uint64_t *)&v22, *((_QWORD *)this + 1));
  v21 = 0x1FFFFFFFFLL;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "get_shape");
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v25, v26, 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v25) >> 3));
  memset(&v30, 0, sizeof(v30));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v30, (__int128 *)v16.__r_.__value_.__l.__data_, (__int128 *)v16.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16.__r_.__value_.__l.__size_ - v16.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v29, 0, sizeof(v29));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v29, (__int128 *)v15.__r_.__value_.__l.__data_, (__int128 *)v15.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15.__r_.__value_.__l.__size_ - v15.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v32.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v6[14] + 8))(*(_QWORD *)(v6[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v33 = v19;
  v34 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  memset(&v32, 0, sizeof(v32));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, (__int128 *)v30.__r_.__value_.__l.__data_, (__int128 *)v30.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30.__r_.__value_.__l.__size_ - v30.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v31, (__int128 *)v29.__r_.__value_.__l.__data_, (__int128 *)v29.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29.__r_.__value_.__l.__size_ - v29.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v35 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  v35 = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  v9 = v34;
  if (v34)
  {
    v10 = (unint64_t *)&v34->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (*v6)
    Espresso::sequential_builder::add_shape_from_kernel();
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v12 = v20;
  if (v20)
  {
    v13 = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (v18 < 0)
    operator delete(__p);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v25);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void sub_19C9669A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  uint64_t v36;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  *(_QWORD *)(v36 - 56) = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = v36 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  if (a20 < 0)
    operator delete(__p);
  __p = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a24 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addBiLSTM(LayerTranslator *this, const CoreML::Specification::BiDirectionalLSTMLayerParams **a2)
{
  const CoreML::Specification::BiDirectionalLSTMLayerParams *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::BiDirectionalLSTMLayerParams *v7;
  const CoreML::Specification::LSTMParams *v8;
  const CoreML::Specification::ActivationParams *v9;
  _QWORD *v10;
  unsigned int v15;
  int v16;
  float v17;
  float v18;
  const CoreML::Specification::ActivationParams *v19;
  const CoreML::Specification::ActivationParams *v20;
  const CoreML::Specification::ActivationParams *v21;
  const CoreML::Specification::ActivationParams *v22;
  const CoreML::Specification::ActivationParams *v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t *v65;
  std::string::size_type v66;
  void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  void *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  LayerTranslator *v110;
  uint64_t *v111;
  std::string::size_type v112;
  void *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  void *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  _BOOL8 v181;
  uint64_t **v182;
  const CoreML::Specification::BiDirectionalLSTMLayerParams *v183;
  int v184;
  char *v185;
  char *i;
  uint64_t v187;
  char *v188;
  char *v189;
  int v190;
  char *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  _QWORD *v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  std::runtime_error *v217;
  _QWORD *v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  _QWORD *v224;
  std::runtime_error *v225;
  void *exception;
  std::runtime_error *v227;
  std::string *v228;
  __int128 v229;
  std::string *v230;
  __int128 v231;
  std::string *v232;
  std::string::size_type size;
  std::string *v234;
  __int128 v235;
  std::runtime_error *v236;
  std::string *v237;
  __int128 v238;
  std::string *v239;
  __int128 v240;
  std::string *v241;
  std::string::size_type v242;
  std::string *v243;
  __int128 v244;
  void *v245;
  void *v246;
  void *v247;
  int v248;
  LayerTranslator *v249;
  unsigned int __val;
  _QWORD *v251;
  const CoreML::Specification::NeuralNetworkLayer *v252;
  uint64_t v253[2];
  uint64_t v254[2];
  uint64_t v255[2];
  uint64_t v256[2];
  uint64_t v257;
  uint64_t v258;
  std::string v259;
  std::string v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  unint64_t v275;
  int v276;
  __int128 v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  int v285;
  __int16 v286;
  void (**v287)(CoreML::Specification::LSTMParams *__hidden);
  uint64_t v288;
  float v289;
  unsigned __int8 v290;
  unsigned __int8 v291;
  char v292;
  char v293;
  char v294;
  _BYTE v295[24];
  int v296;
  _QWORD *v297;
  int v298;
  int v299;
  uint64_t v300;
  const CoreML::Specification::LSTMParams *v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  char *v307;
  char *v308;
  uint64_t v309;
  std::string v310;
  std::string v311;
  std::string __p;
  __int128 v313;
  __int128 v314;
  uint64_t v315;
  _BYTE v316[32];
  uint64_t v317;
  void *v318[3];
  std::string v319;
  int v320;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v310, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v310.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v310.__r_.__value_.__l.__data_ = v5;
  }
  v308 = 0;
  v307 = 0;
  v309 = 0;
  v305 = 0;
  v304 = 0;
  v306 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v307, (uint64_t *)&v304, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 430)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::BiDirectionalLSTMLayerParams *)&CoreML::Specification::_BiDirectionalLSTMLayerParams_default_instance_;
  }
  CoreML::Specification::BiDirectionalLSTMLayerParams::BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)v295, v7);
  if (v301)
    v8 = v301;
  else
    v8 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
  CoreML::Specification::LSTMParams::LSTMParams((CoreML::Specification::LSTMParams *)&v287, v8);
  v252 = (const CoreML::Specification::NeuralNetworkLayer *)a2;
  if (v299 != 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Bi dir LSTM layer: must have two weight params");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *(_QWORD **)(v300 + 8);
  v251 = *(_QWORD **)(v300 + 16);
  __asm { FMOV            V8.2S, #1.0 }
  v264 = _D8;
  v266 = _D8;
  v268 = _D8;
  v265 = 2;
  v267 = 0;
  v270 = _D8;
  v272 = _D8;
  v269 = 0;
  v271 = 2;
  v274 = _D8;
  v275 = 512;
  v273 = 0;
  v276 = 1065353216;
  v277 = xmmword_19CAE7980;
  v279 = 0x100000000;
  v280 = 1065353216;
  v278 = 1112014848;
  v281 = 1065353216;
  v282 = 0;
  v286 = 0;
  v283 = 1;
  v263 = 0;
  v285 = 1;
  v284 = v290;
  __val = v303;
  if ((int)v303 <= 0)
  {
    v227 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v311, __val);
    v228 = std::string::insert(&v311, 0, "output size = ");
    v229 = *(_OWORD *)&v228->__r_.__value_.__l.__data_;
    *(_QWORD *)&v316[16] = *((_QWORD *)&v228->__r_.__value_.__l + 2);
    *(_OWORD *)v316 = v229;
    v228->__r_.__value_.__l.__size_ = 0;
    v228->__r_.__value_.__r.__words[2] = 0;
    v228->__r_.__value_.__r.__words[0] = 0;
    v230 = std::string::append((std::string *)v316, " not allowed in layer ");
    v231 = *(_OWORD *)&v230->__r_.__value_.__l.__data_;
    v319.__r_.__value_.__r.__words[2] = v230->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v319.__r_.__value_.__l.__data_ = v231;
    v230->__r_.__value_.__l.__size_ = 0;
    v230->__r_.__value_.__r.__words[2] = 0;
    v230->__r_.__value_.__r.__words[0] = 0;
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v232 = &v310;
    else
      v232 = (std::string *)v310.__r_.__value_.__r.__words[0];
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v310.__r_.__value_.__r.__words[2]);
    else
      size = v310.__r_.__value_.__l.__size_;
    v234 = std::string::append(&v319, (const std::string::value_type *)v232, size);
    v235 = *(_OWORD *)&v234->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v234->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v235;
    v234->__r_.__value_.__l.__size_ = 0;
    v234->__r_.__value_.__r.__words[2] = 0;
    v234->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v227, &__p);
    __cxa_throw(v227, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v15 = v302;
  if ((int)v302 <= 0)
  {
    v236 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v311, v15);
    v237 = std::string::insert(&v311, 0, "input size = ");
    v238 = *(_OWORD *)&v237->__r_.__value_.__l.__data_;
    *(_QWORD *)&v316[16] = *((_QWORD *)&v237->__r_.__value_.__l + 2);
    *(_OWORD *)v316 = v238;
    v237->__r_.__value_.__l.__size_ = 0;
    v237->__r_.__value_.__r.__words[2] = 0;
    v237->__r_.__value_.__r.__words[0] = 0;
    v239 = std::string::append((std::string *)v316, " not allowed in layer ");
    v240 = *(_OWORD *)&v239->__r_.__value_.__l.__data_;
    v319.__r_.__value_.__r.__words[2] = v239->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v319.__r_.__value_.__l.__data_ = v240;
    v239->__r_.__value_.__l.__size_ = 0;
    v239->__r_.__value_.__r.__words[2] = 0;
    v239->__r_.__value_.__r.__words[0] = 0;
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v241 = &v310;
    else
      v241 = (std::string *)v310.__r_.__value_.__r.__words[0];
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v242 = HIBYTE(v310.__r_.__value_.__r.__words[2]);
    else
      v242 = v310.__r_.__value_.__l.__size_;
    v243 = std::string::append(&v319, (const std::string::value_type *)v241, v242);
    v244 = *(_OWORD *)&v243->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v243->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v244;
    v243->__r_.__value_.__l.__size_ = 0;
    v243->__r_.__value_.__r.__words[2] = 0;
    v243->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v236, &__p);
    __cxa_throw(v236, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v275 = __PAIR64__(v302, v303);
  if (0xAAAAAAAAAAAAAAABLL * ((v308 - v307) >> 3) >= 6)
  {
    v245 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v245, "Recurrent layer: too many output blobs.");
    goto LABEL_432;
  }
  if (v308 - v307 != 120)
  {
    v245 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v245, "Recurrent layer: too few output blobs.");
LABEL_432:
    __cxa_throw(v245, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v305 - v304) >> 3) >= 6)
  {
    v246 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v246, "Recurrent layer: too many input blobs.");
    __cxa_throw(v246, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v16 = v291;
  if (!v291)
    DWORD2(v277) = 0;
  v17 = 1.0;
  if (!v292)
    v17 = 0.0;
  v276 = LODWORD(v17);
  if (v293)
    LODWORD(v277) = 1;
  if (v294)
    LODWORD(v279) = 1;
  v18 = v289;
  if (v289 < 0.00001)
    v18 = 50.0;
  v278 = LODWORD(v18);
  if (v296 != 3)
  {
    v247 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v247, "Bi dir LSTM layer (forward lstm): must provide 3 activations");
    goto LABEL_436;
  }
  v265 = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v297[1] + 28), v9);
  v266 = _D8;
  v267 = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v297[2] + 28), v19);
  v268 = _D8;
  HIDWORD(v263) = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v297[3] + 28), v20);
  v264 = _D8;
  if (v298 != 3)
  {
    v247 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v247, "Bi dir LSTM layer (backward lstm): must provide 3 activations");
LABEL_436:
    __cxa_throw(v247, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v271 = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v297[1] + 28), v21);
  v272 = _D8;
  v248 = v16;
  v273 = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v297[2] + 28), v22);
  v274 = _D8;
  v269 = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v297[3] + 28), v23);
  v270 = _D8;
  v249 = this;
  v24 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "rnn_arch");
  memset(&v260, 0, sizeof(v260));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v260, (__int128 *)v304, (__int128 *)v305, 0xAAAAAAAAAAAAAAABLL * ((v305 - v304) >> 3));
  memset(&v259, 0, sizeof(v259));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v259, (__int128 *)v307, (__int128 *)v308, 0xAAAAAAAAAAAAAAABLL * ((v308 - v307) >> 3));
  Espresso::sequential_builder::add<Espresso::rnn_arch_params>(&v261, v24, (uint64_t)&__p, (uint64_t)&v310, (uint64_t)&v263, (__int128 *)v260.__r_.__value_.__l.__data_, (__int128 *)v260.__r_.__value_.__l.__size_, (__int128 **)&v259);
  v319.__r_.__value_.__r.__words[0] = (std::string::size_type)&v259;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v319);
  v319.__r_.__value_.__r.__words[0] = (std::string::size_type)&v260;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v319);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v25 = v261;
  v26 = v262;
  v257 = v261;
  v258 = (uint64_t)v262;
  if (v262)
  {
    p_shared_owners = (unint64_t *)&v262->__shared_owners_;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
  }
  if (v10[2])
    v29 = (uint64_t *)v10[2];
  else
    v29 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v10[3])
    v30 = (uint64_t *)v10[3];
  else
    v30 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v10[5])
    v31 = (uint64_t *)v10[5];
  else
    v31 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v10[4])
    v32 = (uint64_t *)v10[4];
  else
    v32 = &CoreML::Specification::_WeightParams_default_instance_;
  v256[0] = v25;
  v256[1] = (uint64_t)v26;
  if (v26)
  {
    v33 = (unint64_t *)&v26->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Uni-directional LSTM");
  std::string::basic_string[abi:ne180100]<0>(&v319, "W_x");
  EspressoConverter::setFourRecurrentWeightBlobs(v29, v30, v31, v32, v256, v15, __val, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)&v319.__r_.__value_.__l.__data_);
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v319.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v26)
  {
    v35 = (unint64_t *)&v26->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v251[2])
    v37 = (uint64_t *)v251[2];
  else
    v37 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v251[3])
    v38 = (uint64_t *)v251[3];
  else
    v38 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v251[5])
    v39 = (uint64_t *)v251[5];
  else
    v39 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v251[4])
    v40 = (uint64_t *)v251[4];
  else
    v40 = &CoreML::Specification::_WeightParams_default_instance_;
  v41 = (std::__shared_weak_count *)v258;
  v255[0] = v257;
  v255[1] = v258;
  if (v258)
  {
    v42 = (unint64_t *)(v258 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Uni-directional LSTM");
  std::string::basic_string[abi:ne180100]<0>(&v319, "W_x_reverse");
  EspressoConverter::setFourRecurrentWeightBlobs(v37, v38, v39, v40, v255, v15, __val, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)&v319.__r_.__value_.__l.__data_);
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v319.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v41)
  {
    v44 = (unint64_t *)&v41->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v10[6])
    v46 = (uint64_t *)v10[6];
  else
    v46 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v10[7])
    v47 = (uint64_t *)v10[7];
  else
    v47 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v10[9])
    v48 = (uint64_t *)v10[9];
  else
    v48 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v10[8])
    v49 = (uint64_t *)v10[8];
  else
    v49 = &CoreML::Specification::_WeightParams_default_instance_;
  v50 = (std::__shared_weak_count *)v258;
  v254[0] = v257;
  v254[1] = v258;
  if (v258)
  {
    v51 = (unint64_t *)(v258 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Uni-directional LSTM");
  std::string::basic_string[abi:ne180100]<0>(&v319, "W_h");
  EspressoConverter::setFourRecurrentWeightBlobs(v46, v47, v48, v49, v254, __val, __val, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)&v319.__r_.__value_.__l.__data_);
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v319.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v50)
  {
    v53 = (unint64_t *)&v50->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v251[6])
    v55 = (uint64_t *)v251[6];
  else
    v55 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v251[7])
    v56 = (uint64_t *)v251[7];
  else
    v56 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v251[9])
    v57 = (uint64_t *)v251[9];
  else
    v57 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v251[8])
    v58 = (uint64_t *)v251[8];
  else
    v58 = &CoreML::Specification::_WeightParams_default_instance_;
  v59 = (std::__shared_weak_count *)v258;
  v253[0] = v257;
  v253[1] = v258;
  if (v258)
  {
    v60 = (unint64_t *)(v258 + 8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Uni-directional LSTM");
  std::string::basic_string[abi:ne180100]<0>(&v319, "W_h_reverse");
  EspressoConverter::setFourRecurrentWeightBlobs(v55, v56, v57, v58, v253, __val, __val, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)&v319.__r_.__value_.__l.__data_);
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v319.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v59)
  {
    v63 = (unint64_t *)&v59->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v248)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v319, 1, 1, 4 * __val, 1);
    v65 = (uint64_t *)v10[10];
    v66 = v319.__r_.__value_.__r.__words[0];
    v67 = *(void **)(v319.__r_.__value_.__r.__words[0] + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v65)
      v68 = v65;
    else
      v68 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v68, v67, __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v69 = (uint64_t *)v10[11];
    v70 = *(_QWORD *)(v66 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v69)
      v71 = v69;
    else
      v71 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v71, (void *)(v70 + 4 * __val), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v72 = (uint64_t *)v10[13];
    v73 = *(_QWORD *)(v66 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    v74 = 2 * __val;
    if (v72)
      v75 = v72;
    else
      v75 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v75, (void *)(v73 + 4 * v74), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v76 = (uint64_t *)v10[12];
    v77 = *(_QWORD *)(v66 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v76)
      v78 = v76;
    else
      v78 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v78, (void *)(v77 + 4 * (int)(3 * __val)), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v79 = v257;
    *(_OWORD *)v316 = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&__p, "b");
    v80 = 0;
    v81 = *(int *)(v66 + 8);
    do
    {
      v81 *= *(int *)(v66 + 12 + v80);
      v80 += 4;
    }
    while (v80 != 12);
    (*(void (**)(uint64_t, _BYTE *, std::string *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v79 + 168))(v79, v316, &__p, *(_QWORD *)(v66 + 24), 4 * v81, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v82 = *(std::__shared_weak_count **)&v316[8];
    if (*(_QWORD *)&v316[8])
    {
      v83 = (unint64_t *)(*(_QWORD *)&v316[8] + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(v316, 1, 1, 4 * __val, 1);
    v85 = (uint64_t *)v251[10];
    v86 = *(_QWORD *)v316;
    v87 = *(void **)(*(_QWORD *)v316 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v85)
      v88 = v85;
    else
      v88 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v88, v87, __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v89 = (uint64_t *)v251[11];
    v90 = *(_QWORD *)(v86 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v89)
      v91 = v89;
    else
      v91 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v91, (void *)(v90 + 4 * __val), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v92 = (uint64_t *)v251[13];
    v93 = *(_QWORD *)(v86 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v92)
      v94 = v92;
    else
      v94 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v94, (void *)(v93 + 4 * v74), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v95 = (uint64_t *)v251[12];
    v96 = *(_QWORD *)(v86 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v95)
      v97 = v95;
    else
      v97 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v97, (void *)(v96 + 4 * (int)(3 * __val)), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v98 = v257;
    *(_OWORD *)&v311.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&__p, "b_reverse");
    v99 = 0;
    v100 = *(int *)(v86 + 8);
    do
    {
      v100 *= *(int *)(v86 + 12 + v99);
      v99 += 4;
    }
    while (v99 != 12);
    v62 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)(*(uint64_t (**)(uint64_t, std::string *, std::string *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v98 + 168))(v98, &v311, &__p, *(_QWORD *)(v86 + 24), 4 * v100, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v101 = (std::__shared_weak_count *)v311.__r_.__value_.__l.__size_;
    if (v311.__r_.__value_.__l.__size_)
    {
      v102 = (unint64_t *)(v311.__r_.__value_.__l.__size_ + 8);
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v104 = *(std::__shared_weak_count **)&v316[8];
    if (*(_QWORD *)&v316[8])
    {
      v105 = (unint64_t *)(*(_QWORD *)&v316[8] + 8);
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    v107 = (std::__shared_weak_count *)v319.__r_.__value_.__l.__size_;
    if (v319.__r_.__value_.__l.__size_)
    {
      v108 = (unint64_t *)(v319.__r_.__value_.__l.__size_ + 8);
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
  }
  v110 = v249;
  if (v293)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v319, 1, 1, 3 * __val, 1);
    v111 = (uint64_t *)v10[14];
    v112 = v319.__r_.__value_.__r.__words[0];
    v113 = *(void **)(v319.__r_.__value_.__r.__words[0] + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v111)
      v114 = v111;
    else
      v114 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v114, v113, __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v115 = (uint64_t *)v10[15];
    v116 = *(_QWORD *)(v112 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v115)
      v117 = v115;
    else
      v117 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v117, (void *)(v116 + 4 * __val), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v118 = (uint64_t *)v10[16];
    v119 = *(_QWORD *)(v112 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    v120 = 2 * __val;
    if (v118)
      v121 = v118;
    else
      v121 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v121, (void *)(v119 + 4 * v120), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v122 = v257;
    *(_OWORD *)v316 = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&__p, "p");
    v123 = 0;
    v124 = *(int *)(v112 + 8);
    do
    {
      v124 *= *(int *)(v112 + 12 + v123);
      v123 += 4;
    }
    while (v123 != 12);
    (*(void (**)(uint64_t, _BYTE *, std::string *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v122 + 168))(v122, v316, &__p, *(_QWORD *)(v112 + 24), 4 * v124, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v125 = *(std::__shared_weak_count **)&v316[8];
    if (*(_QWORD *)&v316[8])
    {
      v126 = (unint64_t *)(*(_QWORD *)&v316[8] + 8);
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(v316, 1, 1, 3 * __val, 1);
    v128 = (uint64_t *)v251[14];
    v129 = *(_QWORD *)v316;
    v130 = *(void **)(*(_QWORD *)v316 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v128)
      v131 = v128;
    else
      v131 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v131, v130, __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v132 = (uint64_t *)v251[15];
    v133 = *(_QWORD *)(v129 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v132)
      v134 = v132;
    else
      v134 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v134, (void *)(v133 + 4 * __val), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v135 = (uint64_t *)v251[16];
    v136 = *(_QWORD *)(v129 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v135)
      v137 = v135;
    else
      v137 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v137, (void *)(v136 + 4 * v120), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v138 = v257;
    *(_OWORD *)&v311.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&__p, "p_reverse");
    v139 = 0;
    v140 = *(int *)(v129 + 8);
    do
    {
      v140 *= *(int *)(v129 + 12 + v139);
      v139 += 4;
    }
    while (v139 != 12);
    v62 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)(*(uint64_t (**)(uint64_t, std::string *, std::string *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v138 + 168))(v138, &v311, &__p, *(_QWORD *)(v129 + 24), 4 * v140, 0);
    v110 = v249;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v141 = (std::__shared_weak_count *)v311.__r_.__value_.__l.__size_;
    if (v311.__r_.__value_.__l.__size_)
    {
      v142 = (unint64_t *)(v311.__r_.__value_.__l.__size_ + 8);
      do
        v143 = __ldaxr(v142);
      while (__stlxr(v143 - 1, v142));
      if (!v143)
      {
        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
        std::__shared_weak_count::__release_weak(v141);
      }
    }
    v144 = *(std::__shared_weak_count **)&v316[8];
    if (*(_QWORD *)&v316[8])
    {
      v145 = (unint64_t *)(*(_QWORD *)&v316[8] + 8);
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
    v147 = (std::__shared_weak_count *)v319.__r_.__value_.__l.__size_;
    if (v319.__r_.__value_.__l.__size_)
    {
      v148 = (unint64_t *)(v319.__r_.__value_.__l.__size_ + 8);
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
  }
  if (v10[2])
    v150 = (uint64_t *)v10[2];
  else
    v150 = &CoreML::Specification::_WeightParams_default_instance_;
  v151 = v150[5];
  if (*(char *)(v151 + 23) < 0)
    v152 = *(_QWORD *)(v151 + 8);
  else
    v152 = *(unsigned __int8 *)(v151 + 23);
  v153 = v150[6];
  if (*(char *)(v153 + 23) < 0)
    v154 = *(_QWORD *)(v153 + 8);
  else
    v154 = *(unsigned __int8 *)(v153 + 23);
  v155 = *((_DWORD *)v150 + 4);
  v156 = v150[7];
  if (*(char *)(v156 + 23) < 0)
    v157 = *(_QWORD *)(v156 + 8);
  else
    v157 = *(unsigned __int8 *)(v156 + 23);
  if (v155 <= 0)
    v158 = 1;
  else
    v158 = 2;
  if (v152)
    v159 = v158;
  else
    v159 = v155 > 0;
  if (v154)
    ++v159;
  if (v157)
    ++v159;
  if (v155 <= 0 && v159 == 1)
  {
    if ((*(_BYTE *)(v151 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v151 + 8))
        goto LABEL_342;
    }
    else if (*(_BYTE *)(v151 + 23))
    {
      goto LABEL_342;
    }
  }
  if (v10[6])
    v161 = (uint64_t *)v10[6];
  else
    v161 = &CoreML::Specification::_WeightParams_default_instance_;
  v162 = v161[5];
  if (*(char *)(v162 + 23) < 0)
    v163 = *(_QWORD *)(v162 + 8);
  else
    v163 = *(unsigned __int8 *)(v162 + 23);
  v164 = v161[6];
  if (*(char *)(v164 + 23) < 0)
    v165 = *(_QWORD *)(v164 + 8);
  else
    v165 = *(unsigned __int8 *)(v164 + 23);
  v166 = *((_DWORD *)v161 + 4);
  v167 = v161[7];
  if (*(char *)(v167 + 23) < 0)
    v168 = *(_QWORD *)(v167 + 8);
  else
    v168 = *(unsigned __int8 *)(v167 + 23);
  if (v166 <= 0)
    v169 = 1;
  else
    v169 = 2;
  if (v163)
    v170 = v169;
  else
    v170 = v166 > 0;
  if (v165)
    ++v170;
  if (v168)
    ++v170;
  if (v166 <= 0 && v170 == 1)
  {
    if ((*(_BYTE *)(v162 + 23) & 0x80) != 0)
    {
      if (!*(_QWORD *)(v162 + 8))
        goto LABEL_316;
    }
    else if (!*(_BYTE *)(v162 + 23))
    {
      goto LABEL_316;
    }
LABEL_342:
    v181 = 1;
    goto LABEL_343;
  }
LABEL_316:
  if (v251[2])
    v171 = (uint64_t *)v251[2];
  else
    v171 = &CoreML::Specification::_WeightParams_default_instance_;
  v172 = v171[5];
  if (*(char *)(v172 + 23) < 0)
    v173 = *(_QWORD *)(v172 + 8);
  else
    v173 = *(unsigned __int8 *)(v172 + 23);
  v174 = v171[6];
  if (*(char *)(v174 + 23) < 0)
    v175 = *(_QWORD *)(v174 + 8);
  else
    v175 = *(unsigned __int8 *)(v174 + 23);
  v176 = *((_DWORD *)v171 + 4);
  v177 = v171[7];
  if (*(char *)(v177 + 23) < 0)
    v178 = *(_QWORD *)(v177 + 8);
  else
    v178 = *(unsigned __int8 *)(v177 + 23);
  if (v176 <= 0)
    v179 = 1;
  else
    v179 = 2;
  if (v173)
    v180 = v179;
  else
    v180 = v176 > 0;
  if (v175)
    ++v180;
  if (v178)
    ++v180;
  if (v176 <= 0 && v180 == 1)
  {
    if ((*(_BYTE *)(v172 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v172 + 8))
        goto LABEL_342;
    }
    else if (*(_BYTE *)(v172 + 23))
    {
      goto LABEL_342;
    }
  }
  if (v251[6])
    v199 = (uint64_t *)v251[6];
  else
    v199 = &CoreML::Specification::_WeightParams_default_instance_;
  v200 = v199[5];
  v201 = *(unsigned __int8 *)(v200 + 23);
  if (*(char *)(v200 + 23) < 0)
    v202 = *(_QWORD *)(v200 + 8);
  else
    v202 = *(unsigned __int8 *)(v200 + 23);
  v203 = v199[6];
  if (*(char *)(v203 + 23) < 0)
    v204 = *(_QWORD *)(v203 + 8);
  else
    v204 = *(unsigned __int8 *)(v203 + 23);
  v205 = *((_DWORD *)v199 + 4);
  v206 = v199[7];
  if (*(char *)(v206 + 23) < 0)
    v207 = *(_QWORD *)(v206 + 8);
  else
    v207 = *(unsigned __int8 *)(v206 + 23);
  v181 = 0;
  if (v205 <= 0)
    v208 = 1;
  else
    v208 = 2;
  if (v202)
    v209 = v208;
  else
    v209 = v205 > 0;
  if (v204)
    ++v209;
  if (v207)
    ++v209;
  if (v205 <= 0 && v209 == 1)
  {
    if ((v201 & 0x80) != 0)
      v201 = *(_QWORD *)(v200 + 8);
    v181 = v201 != 0;
  }
LABEL_343:
  if (**((_BYTE **)v110 + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)v110, (uint64_t *)&v307);
  }
  else
  {
    v182 = (uint64_t **)*((_QWORD *)v110 + 1);
    if (*((_DWORD *)v252 + 35) == 430)
    {
      v183 = (const CoreML::Specification::BiDirectionalLSTMLayerParams *)*((_QWORD *)v252 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v62);
      v183 = (const CoreML::Specification::BiDirectionalLSTMLayerParams *)&CoreML::Specification::_BiDirectionalLSTMLayerParams_default_instance_;
    }
    CoreML::Specification::BiDirectionalLSTMLayerParams::BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)&v319, v183);
    v184 = v320;
    v185 = v304;
    for (i = v305; v185 != i; v185 += 24)
    {
      v187 = std::map<std::string,std::string>::at((uint64_t)v182, v185);
      *(_OWORD *)v316 = *(_OWORD *)v187;
      *(_OWORD *)&v316[16] = *(_OWORD *)(v187 + 16);
      v317 = *(_QWORD *)(v187 + 32);
      memset(v318, 0, sizeof(v318));
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v318, *(const void **)(v187 + 40), *(_QWORD *)(v187 + 48), (uint64_t)(*(_QWORD *)(v187 + 48) - *(_QWORD *)(v187 + 40)) >> 2);
      if (*(_DWORD *)&v316[4] != -1 && *(_DWORD *)&v316[4] != 1)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
        v218 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"BLSTM layer: '", 14);
        v219 = *((_QWORD *)v252 + 14);
        v220 = *(char *)(v219 + 23);
        if (v220 >= 0)
          v221 = *((_QWORD *)v252 + 14);
        else
          v221 = *(_QWORD *)v219;
        if (v220 >= 0)
          v222 = *(unsigned __int8 *)(v219 + 23);
        else
          v222 = *(_QWORD *)(v219 + 8);
        v223 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v218, v221, v222);
        v224 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"': height dimension of the input blob must be 1.", 48);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v224);
        v225 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v225, &v311);
        __cxa_throw(v225, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (*(_DWORD *)v316 != -1 && *(_DWORD *)v316 != 1)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
        v210 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"BLSTM layer: '", 14);
        v211 = *((_QWORD *)v252 + 14);
        v212 = *(char *)(v211 + 23);
        if (v212 >= 0)
          v213 = *((_QWORD *)v252 + 14);
        else
          v213 = *(_QWORD *)v211;
        if (v212 >= 0)
          v214 = *(unsigned __int8 *)(v211 + 23);
        else
          v214 = *(_QWORD *)(v211 + 8);
        v215 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, v213, v214);
        v216 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v215, (uint64_t)"': width dimension of the input blob must be 1.", 47);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v216);
        v217 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v217, &v311);
        __cxa_throw(v217, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (v318[0])
        operator delete(v318[0]);
    }
    v188 = v307;
    v189 = v308;
    if (v307 != v308)
    {
      v190 = 2 * v184;
      do
      {
        __p.__r_.__value_.__r.__words[0] = 0x100000001;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 4) = -1;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = v190;
        HIDWORD(__p.__r_.__value_.__r.__words[2]) = -1;
        v313 = 0u;
        v314 = 0u;
        v315 = 0;
        EspressoConverter::validateShape((int *)&__p, *((_QWORD *)v252 + 14), (uint64_t)v307);
        *(_QWORD *)v316 = v188;
        v191 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v182, v188, (__int128 **)v316);
        *((_QWORD *)v191 + 7) = 0x100000001;
        *((_DWORD *)v191 + 16) = v190;
        *(_QWORD *)(v191 + 68) = -1;
        *((_DWORD *)v191 + 19) = -1;
        *((_QWORD *)v191 + 10) = 0;
        *((_QWORD *)v191 + 11) = 0;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v191 + 96, 0, 0, 0);
        v188 += 24;
      }
      while (v188 != v189);
    }
    CoreML::Specification::BiDirectionalLSTMLayerParams::~BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)&v319);
  }
  v192 = (std::__shared_weak_count *)v258;
  if (v258)
  {
    v193 = (unint64_t *)(v258 + 8);
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v195 = v262;
  if (v262)
  {
    v196 = (unint64_t *)&v262->__shared_owners_;
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  v287 = &off_1E3D4CC40;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v288);
  CoreML::Specification::BiDirectionalLSTMLayerParams::~BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)v295);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v304;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v307;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  return v181;
}

void sub_19C968368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  void *v58;
  int v59;
  uint64_t v60;

  if (SLOBYTE(STACK[0x25F]) < 0)
  {
    operator delete((void *)STACK[0x248]);
    if ((v59 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x260]);
      if (STACK[0x3A8])
        operator delete((void *)STACK[0x3A8]);
      CoreML::Specification::BiDirectionalLSTMLayerParams::~BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)(v60 - 240));
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
      a54 = (uint64_t)&off_1E3D4CC40;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a55);
      CoreML::Specification::BiDirectionalLSTMLayerParams::~BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)&a58);
      a34 = (uint64_t)&STACK[0x200];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
      a34 = (uint64_t)&STACK[0x218];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
      if (SLOBYTE(STACK[0x247]) < 0)
        operator delete((void *)STACK[0x230]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v59)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v58);
  goto LABEL_6;
}

BOOL LayerTranslator::addSimpleRecurrent(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::SimpleRecurrentLayerParams *v7;
  const CoreML::Specification::ActivationParams *v8;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t *v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *p_str;
  std::string *v20;
  uint64_t **v21;
  char *v22;
  uint64_t **v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  std::string::size_type v28;
  void *p_p;
  std::string *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  _BOOL8 v68;
  uint64_t **v69;
  const CoreML::Specification::SimpleRecurrentLayerParams *v70;
  int v71;
  std::string *v72;
  std::string *i;
  uint64_t v74;
  char *v75;
  char *j;
  char *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  std::runtime_error *v92;
  _QWORD *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  std::runtime_error *v100;
  std::runtime_error *exception;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  std::string::size_type size;
  std::string *v108;
  __int128 v109;
  std::runtime_error *v110;
  std::string *v111;
  __int128 v112;
  std::string *v113;
  __int128 v114;
  std::string *v115;
  std::string::size_type v116;
  std::string *v117;
  __int128 v118;
  void *v119;
  void *v120;
  uint64_t v121[2];
  uint64_t v122[2];
  void *v123;
  std::__shared_weak_count *v124;
  std::string v125;
  std::string v126;
  std::string v127;
  std::string v128;
  void *__p;
  std::__shared_weak_count *v130;
  char v131;
  void *v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  __int128 v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int16 v157;
  _BYTE v158[16];
  uint64_t *v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int8 v165;
  unsigned __int8 v166;
  char v167;
  std::string *v168;
  std::string *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  std::string v174;
  std::string *v175;
  std::string v176;
  std::string __str;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  _BYTE v181[32];
  uint64_t v182;
  void *v183[3];
  std::string v184;
  int v185;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v174.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v5;
  }
  v171 = 0;
  v172 = 0;
  v173 = 0;
  v168 = 0;
  v169 = 0;
  v170 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v171, (uint64_t *)&v168, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 400)
  {
    v7 = (const CoreML::Specification::SimpleRecurrentLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::SimpleRecurrentLayerParams *)&CoreML::Specification::_SimpleRecurrentLayerParams_default_instance_;
  }
  CoreML::Specification::SimpleRecurrentLayerParams::SimpleRecurrentLayerParams((CoreML::Specification::SimpleRecurrentLayerParams *)v158, v7);
  __asm { FMOV            V8.2S, #1.0 }
  v138 = _D8;
  v140 = _D8;
  v137 = 2;
  v139 = 0;
  v142 = _D8;
  v144 = _D8;
  v141 = 0;
  v143 = 2;
  v146 = _D8;
  v147 = 512;
  v145 = 0;
  v148 = 1065353216;
  v149 = xmmword_19CAE7980;
  v151 = 0x100000000;
  v152 = 1065353216;
  v150 = 1112014848;
  v153 = 1065353216;
  v154 = 0;
  v157 = 0;
  v155 = 1;
  v135 = 1;
  v136 = _D8;
  v156 = v165;
  v13 = v164;
  if ((int)v164 < 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v176, v13);
    v102 = std::string::insert(&v176, 0, "output size = ");
    v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
    *(_QWORD *)&v181[16] = *((_QWORD *)&v102->__r_.__value_.__l + 2);
    *(_OWORD *)v181 = v103;
    v102->__r_.__value_.__l.__size_ = 0;
    v102->__r_.__value_.__r.__words[2] = 0;
    v102->__r_.__value_.__r.__words[0] = 0;
    v104 = std::string::append((std::string *)v181, " not allowed in layer ");
    v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
    v184.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v105;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v106 = &v174;
    else
      v106 = (std::string *)v174.__r_.__value_.__r.__words[0];
    if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v174.__r_.__value_.__r.__words[2]);
    else
      size = v174.__r_.__value_.__l.__size_;
    v108 = std::string::append(&v184, (const std::string::value_type *)v106, size);
    v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v109;
    v108->__r_.__value_.__l.__size_ = 0;
    v108->__r_.__value_.__r.__words[2] = 0;
    v108->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__str);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v14 = v163;
  if ((int)v163 <= 0)
  {
    v110 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v176, v14);
    v111 = std::string::insert(&v176, 0, "input size = ");
    v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
    *(_QWORD *)&v181[16] = *((_QWORD *)&v111->__r_.__value_.__l + 2);
    *(_OWORD *)v181 = v112;
    v111->__r_.__value_.__l.__size_ = 0;
    v111->__r_.__value_.__r.__words[2] = 0;
    v111->__r_.__value_.__r.__words[0] = 0;
    v113 = std::string::append((std::string *)v181, " not allowed in layer ");
    v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
    v184.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v114;
    v113->__r_.__value_.__l.__size_ = 0;
    v113->__r_.__value_.__r.__words[2] = 0;
    v113->__r_.__value_.__r.__words[0] = 0;
    if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v115 = &v174;
    else
      v115 = (std::string *)v174.__r_.__value_.__r.__words[0];
    if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v116 = HIBYTE(v174.__r_.__value_.__r.__words[2]);
    else
      v116 = v174.__r_.__value_.__l.__size_;
    v117 = std::string::append(&v184, (const std::string::value_type *)v115, v116);
    v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v118;
    v117->__r_.__value_.__l.__size_ = 0;
    v117->__r_.__value_.__r.__words[2] = 0;
    v117->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v110, &__str);
    __cxa_throw(v110, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v147 = __PAIR64__(v163, v164);
  if (0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3) >= 3)
  {
    v119 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v119, "Recurrent layer: too many output blobs.");
    goto LABEL_195;
  }
  if (v172 - v171 != 48)
  {
    v119 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v119, "Recurrent layer: too few output blobs.");
LABEL_195:
    __cxa_throw(v119, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v169 - (char *)v168) >> 3) >= 3)
  {
    v120 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v120, "Recurrent layer: too many input blobs.");
    goto LABEL_198;
  }
  if ((char *)v169 - (char *)v168 != 48)
  {
    v120 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v120, "Recurrent layer: too few input blobs.");
LABEL_198:
    __cxa_throw(v120, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v15 = v166;
  if (!v166)
    DWORD2(v149) = 0;
  v16 = v159;
  if (!v159)
    v16 = &CoreML::Specification::_ActivationParams_default_instance_;
  HIDWORD(v135) = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*((unsigned int *)v16 + 7), v8);
  v136 = _D8;
  if (v167)
  {
    v17 = v168;
    if ((v168->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(v168->__r_.__value_.__r.__words[2]);
    else
      v18 = v168->__r_.__value_.__l.__size_;
    p_str = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v18 + 11);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v18)
    {
      if ((v17->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = v17;
      else
        v20 = (std::string *)v17->__r_.__value_.__r.__words[0];
      memmove(p_str, v20, v18);
    }
    strcpy((char *)p_str + v18, "_prereverse");
    memset(&v184, 0, sizeof(v184));
    v184.__r_.__value_.__l.__size_ = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v184, (__int128 *)&__str);
    v21 = (uint64_t **)*((_QWORD *)this + 1);
    v176.__r_.__value_.__r.__words[0] = (std::string::size_type)v168;
    v22 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, v168, (__int128 **)&v176);
    v23 = (uint64_t **)*((_QWORD *)this + 1);
    v176.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23, &__str, (__int128 **)&v176);
    v25 = *(_OWORD *)(v22 + 56);
    v26 = *(_OWORD *)(v22 + 72);
    *((_QWORD *)v24 + 11) = *((_QWORD *)v22 + 11);
    *(_OWORD *)(v24 + 72) = v26;
    *(_OWORD *)(v24 + 56) = v25;
    if (v24 != v22)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v24 + 96, *((char **)v22 + 12), *((_QWORD *)v22 + 13), (uint64_t)(*((_QWORD *)v22 + 13) - *((_QWORD *)v22 + 12)) >> 2);
    memset(v181, 0, 24);
    *(_QWORD *)&v181[8] = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v181, (__int128 *)v168);
    v27 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v176, "sequence_reverse");
    if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(v174.__r_.__value_.__r.__words[2]);
    else
      v28 = v174.__r_.__value_.__l.__size_;
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v28 + 11);
    if (v131 < 0)
      p_p = __p;
    if (v28)
    {
      if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v174;
      else
        v30 = (std::string *)v174.__r_.__value_.__r.__words[0];
      memmove(p_p, v30, v28);
    }
    strcpy((char *)p_p + v28, "_prereverse");
    memset(&v128, 0, sizeof(v128));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v128, *(__int128 **)v181, *(__int128 **)&v181[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v181[8] - *(_QWORD *)v181) >> 3));
    memset(&v127, 0, sizeof(v127));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v127, (__int128 *)v184.__r_.__value_.__l.__data_, (__int128 *)v184.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v184.__r_.__value_.__l.__size_ - v184.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add<Espresso::sequence_reverse_params>((uint64_t *)&v132, v27, (uint64_t)&v176, (uint64_t)&__p, (uint64_t)&v134, (__int128 *)v128.__r_.__value_.__l.__data_, (__int128 *)v128.__r_.__value_.__l.__size_, (__int128 **)&v127);
    v175 = &v127;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v175);
    v175 = &v128;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v175);
    if (v131 < 0)
      operator delete(__p);
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v176.__r_.__value_.__l.__data_);
    std::string::operator=(v168, &__str);
    v31 = (std::__shared_weak_count *)v133;
    if (v133)
    {
      v32 = (unint64_t *)(v133 + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v176.__r_.__value_.__r.__words[0] = (std::string::size_type)v181;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
    *(_QWORD *)v181 = &v184;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v181);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v34 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__str, "rnn_arch");
  memset(&v126, 0, sizeof(v126));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v126, (__int128 *)v168, (__int128 *)v169, 0xAAAAAAAAAAAAAAABLL * (((char *)v169 - (char *)v168) >> 3));
  memset(&v125, 0, sizeof(v125));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v125, (__int128 *)v171, (__int128 *)v172, 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3));
  Espresso::sequential_builder::add<Espresso::rnn_arch_params>((uint64_t *)&__p, v34, (uint64_t)&__str, (uint64_t)&v174, (uint64_t)&v135, (__int128 *)v126.__r_.__value_.__l.__data_, (__int128 *)v126.__r_.__value_.__l.__size_, (__int128 **)&v125);
  v184.__r_.__value_.__r.__words[0] = (std::string::size_type)&v125;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v184);
  v184.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v184);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v35 = __p;
  v36 = v130;
  v132 = __p;
  v133 = (uint64_t)v130;
  if (v130)
  {
    p_shared_owners = (unint64_t *)&v130->__shared_owners_;
    do
      v38 = __ldxr(p_shared_owners);
    while (__stxr(v38 + 1, p_shared_owners));
    v124 = v36;
    if (v160)
      v39 = v160;
    else
      v39 = &CoreML::Specification::_WeightParams_default_instance_;
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
  }
  else
  {
    if (v160)
      v39 = v160;
    else
      v39 = &CoreML::Specification::_WeightParams_default_instance_;
    v124 = 0;
  }
  v123 = v35;
  std::string::basic_string[abi:ne180100]<0>(&__str, "SimpleRecurrent");
  std::string::basic_string[abi:ne180100]<0>(&v184, "W_x");
  EspressoConverter::setRecurrentWeightBlob((uint64_t)v39, (uint64_t *)&v123, v14, v13, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v184.__r_.__value_.__l.__data_);
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v184.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v36)
  {
    v41 = (unint64_t *)&v36->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v161)
    v43 = v161;
  else
    v43 = &CoreML::Specification::_WeightParams_default_instance_;
  v44 = (std::__shared_weak_count *)v133;
  v122[0] = (uint64_t)v132;
  v122[1] = v133;
  if (v133)
  {
    v45 = (unint64_t *)(v133 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "SimpleRecurrent");
  std::string::basic_string[abi:ne180100]<0>(&v184, "W_h");
  EspressoConverter::setRecurrentWeightBlob((uint64_t)v43, v122, v13, v13, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v184.__r_.__value_.__l.__data_);
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v184.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v44)
      goto LABEL_89;
  }
  else if (!v44)
  {
    goto LABEL_89;
  }
  v48 = (unint64_t *)&v44->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
    if (!v15)
      goto LABEL_106;
    goto LABEL_90;
  }
LABEL_89:
  if (!v15)
    goto LABEL_106;
LABEL_90:
  if (v162)
    v50 = v162;
  else
    v50 = &CoreML::Specification::_WeightParams_default_instance_;
  v51 = (std::__shared_weak_count *)v133;
  v121[0] = (uint64_t)v132;
  v121[1] = v133;
  if (v133)
  {
    v52 = (unint64_t *)(v133 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "SimpleRecurrent");
  std::string::basic_string[abi:ne180100]<0>(&v184, "b");
  EspressoConverter::setRecurrentBiasBlob((uint64_t)v50, v121, v13, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&v184);
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v184.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v51)
  {
    v54 = (unint64_t *)&v51->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
LABEL_106:
  if (v161)
    v56 = v161;
  else
    v56 = &CoreML::Specification::_WeightParams_default_instance_;
  v57 = v56[5];
  v58 = *(unsigned __int8 *)(v57 + 23);
  if (*(char *)(v57 + 23) < 0)
    v59 = *(_QWORD *)(v57 + 8);
  else
    v59 = *(unsigned __int8 *)(v57 + 23);
  v60 = v56[6];
  if (*(char *)(v60 + 23) < 0)
    v61 = *(_QWORD *)(v60 + 8);
  else
    v61 = *(unsigned __int8 *)(v60 + 23);
  v62 = *((_DWORD *)v56 + 4);
  v63 = v56[7];
  if (*(char *)(v63 + 23) < 0)
    v64 = *(_QWORD *)(v63 + 8);
  else
    v64 = *(unsigned __int8 *)(v63 + 23);
  if (v62 <= 0)
    v65 = 1;
  else
    v65 = 2;
  if (v59)
    v66 = v65;
  else
    v66 = v62 > 0;
  if (v61)
    ++v66;
  if (v64)
    ++v66;
  if (v62 <= 0 && v66 == 1)
  {
    if ((v58 & 0x80) != 0)
      v58 = *(_QWORD *)(v57 + 8);
    v68 = v58 != 0;
  }
  else
  {
    v68 = 0;
  }
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v171);
  }
  else
  {
    v69 = (uint64_t **)*((_QWORD *)this + 1);
    if (*((_DWORD *)a2 + 35) == 400)
    {
      v70 = (const CoreML::Specification::SimpleRecurrentLayerParams *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v47);
      v70 = (const CoreML::Specification::SimpleRecurrentLayerParams *)&CoreML::Specification::_SimpleRecurrentLayerParams_default_instance_;
    }
    CoreML::Specification::SimpleRecurrentLayerParams::SimpleRecurrentLayerParams((CoreML::Specification::SimpleRecurrentLayerParams *)&v184, v70);
    v71 = v185;
    v72 = v168;
    for (i = v169; v72 != i; ++v72)
    {
      v74 = std::map<std::string,std::string>::at((uint64_t)v69, v72);
      *(_OWORD *)v181 = *(_OWORD *)v74;
      *(_OWORD *)&v181[16] = *(_OWORD *)(v74 + 16);
      v182 = *(_QWORD *)(v74 + 32);
      memset(v183, 0, sizeof(v183));
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v183, *(const void **)(v74 + 40), *(_QWORD *)(v74 + 48), (uint64_t)(*(_QWORD *)(v74 + 48) - *(_QWORD *)(v74 + 40)) >> 2);
      if (*(_DWORD *)&v181[4] != -1 && *(_DWORD *)&v181[4] != 1)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
        v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str.__r_.__value_.__r.__words[2], (uint64_t)"Recurrent layer: '", 18);
        v94 = *((_QWORD *)a2 + 14);
        v95 = *(char *)(v94 + 23);
        if (v95 >= 0)
          v96 = *((_QWORD *)a2 + 14);
        else
          v96 = *(_QWORD *)v94;
        if (v95 >= 0)
          v97 = *(unsigned __int8 *)(v94 + 23);
        else
          v97 = *(_QWORD *)(v94 + 8);
        v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, v96, v97);
        v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"': height dimension of the input blob must be 1.", 48);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v99);
        v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v100, &v176);
        __cxa_throw(v100, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (*(_DWORD *)v181 != -1 && *(_DWORD *)v181 != 1)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
        v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str.__r_.__value_.__r.__words[2], (uint64_t)"Recurrent layer: '", 18);
        v86 = *((_QWORD *)a2 + 14);
        v87 = *(char *)(v86 + 23);
        if (v87 >= 0)
          v88 = *((_QWORD *)a2 + 14);
        else
          v88 = *(_QWORD *)v86;
        if (v87 >= 0)
          v89 = *(unsigned __int8 *)(v86 + 23);
        else
          v89 = *(_QWORD *)(v86 + 8);
        v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, v88, v89);
        v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"': width dimension of the input blob must be 1.", 47);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v91);
        v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v92, &v176);
        __cxa_throw(v92, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (v183[0])
        operator delete(v183[0]);
    }
    v75 = v171;
    for (j = v172; v75 != j; v75 += 24)
    {
      __str.__r_.__value_.__r.__words[0] = 0x100000001;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 4) = -1;
      LODWORD(__str.__r_.__value_.__r.__words[1]) = v71;
      HIDWORD(__str.__r_.__value_.__r.__words[2]) = -1;
      v178 = 0u;
      v179 = 0u;
      v180 = 0;
      EspressoConverter::validateShape((int *)&__str, *((_QWORD *)a2 + 14), (uint64_t)v171);
      *(_QWORD *)v181 = v75;
      v77 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v69, v75, (__int128 **)v181);
      *((_QWORD *)v77 + 7) = 0x100000001;
      *((_DWORD *)v77 + 16) = v71;
      *(_QWORD *)(v77 + 68) = -1;
      *((_DWORD *)v77 + 19) = -1;
      *((_QWORD *)v77 + 10) = 0;
      *((_QWORD *)v77 + 11) = 0;
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v77 + 96, 0, 0, 0);
    }
    CoreML::Specification::SimpleRecurrentLayerParams::~SimpleRecurrentLayerParams((CoreML::Specification::SimpleRecurrentLayerParams *)&v184);
  }
  v78 = (std::__shared_weak_count *)v133;
  if (v133)
  {
    v79 = (unint64_t *)(v133 + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v130;
  if (v130)
  {
    v82 = (unint64_t *)&v130->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  CoreML::Specification::SimpleRecurrentLayerParams::~SimpleRecurrentLayerParams((CoreML::Specification::SimpleRecurrentLayerParams *)v158);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v174.__r_.__value_.__l.__data_);
  return v68;
}

void sub_19C969604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a66;
  void *a69;
  char a72;
  void *v72;
  int v73;
  uint64_t v74;
  void *v76;

  if (SLOBYTE(STACK[0x21F]) < 0)
  {
    operator delete((void *)STACK[0x208]);
    if ((v73 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x220]);
      v76 = *(void **)(v74 - 216);
      if (v76)
        operator delete(v76);
      CoreML::Specification::SimpleRecurrentLayerParams::~SimpleRecurrentLayerParams((CoreML::Specification::SimpleRecurrentLayerParams *)(v74 - 192));
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
      CoreML::Specification::SimpleRecurrentLayerParams::~SimpleRecurrentLayerParams((CoreML::Specification::SimpleRecurrentLayerParams *)&a54);
      a34 = (uint64_t)&a63;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
      a34 = (uint64_t)&a66;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
      if (a72 < 0)
        operator delete(a69);
      _Unwind_Resume(a1);
    }
  }
  else if (!v73)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v72);
  goto LABEL_6;
}

void LayerTranslator::addUnaryFunction(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  float v10;
  int v11;
  int v12;
  float v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 *v18;
  size_t v19;
  std::string *v20;
  __int128 *v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  char *v27;
  char v28;
  std::__split_buffer<std::string>::pointer begin;
  std::string *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  std::string *v34;
  std::string *v35;
  __int128 *v36;
  size_t v37;
  std::string *v38;
  __int128 *v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  std::string::size_type v45;
  char v46;
  std::string::size_type v47;
  std::string::size_type v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  std::string *v52;
  std::string *v53;
  _QWORD *v54;
  std::string::size_type v55;
  std::string *v56;
  std::string *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  _QWORD *v61;
  std::string::size_type v62;
  std::string *v63;
  std::string *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t **v72;
  uint64_t v73;
  void *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  __int128 v79;
  std::string v80;
  std::string v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  std::string v84;
  std::string v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  std::string v88;
  std::string v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  uint64_t v99;
  float v100;
  int v101;
  char v102;
  uint64_t v103;
  void (**v104)(CoreML::Specification::UnaryFunctionLayerParams *__hidden);
  uint64_t v105;
  __int128 v106;
  float v107;
  int v108;
  __int128 *v109;
  __int128 *v110;
  uint64_t v111;
  __int128 *v112;
  __int128 *v113;
  uint64_t v114;
  std::string v115;
  std::__split_buffer<std::string> v116;
  void *__p[3];
  std::__split_buffer<std::string> v118;
  __int128 v119;
  uint64_t v120;
  std::__split_buffer<std::string> __v;
  __int128 v122;
  uint64_t v123;
  std::string v124;
  void **v125[3];

  v125[2] = *(void ***)MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v115.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v5;
  }
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v112, (uint64_t *)&v109, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 220)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_UnaryFunctionLayerParams_default_instance_;
  }
  v104 = &off_1E3D54DB0;
  v105 = 0;
  v108 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v105, v8 & 0xFFFFFFFFFFFFFFFELL);
  v9 = *((_OWORD *)v7 + 1);
  v107 = *((float *)v7 + 8);
  v106 = v9;
  v98 = 0;
  v99 = 1065353216;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v10 = *((float *)&v9 + 2);
  if (*((float *)&v106 + 2) == 0.0)
    v10 = 0.000001;
  v100 = v10;
  switch((int)v106)
  {
    case 0:
      v11 = 11;
      goto LABEL_21;
    case 1:
      v11 = 12;
      goto LABEL_21;
    case 2:
      v11 = 10;
      goto LABEL_21;
    case 3:
      v12 = 13;
      goto LABEL_17;
    case 4:
      v11 = 27;
      goto LABEL_21;
    case 5:
      v11 = 26;
      goto LABEL_21;
    case 6:
      v11 = 24;
LABEL_21:
      LODWORD(v98) = v11;
      break;
    case 7:
      v12 = 25;
LABEL_17:
      LODWORD(v98) = v12;
      LODWORD(v99) = DWORD1(v106);
      break;
    default:
      break;
  }
  if (fabsf(v107) >= 0.00001)
    v13 = v107;
  else
    v13 = 1.0;
  if (fabsf(*((float *)&v106 + 3)) >= 0.00001 || fabsf(v13 + -1.0) >= 0.00001)
  {
    memset(&v116, 0, 24);
    v18 = v109;
    if (*((char *)v109 + 23) >= 0)
      v19 = *((unsigned __int8 *)v109 + 23);
    else
      v19 = *((_QWORD *)v109 + 1);
    v20 = &v93;
    std::string::basic_string[abi:ne180100]((uint64_t)&v93, v19 + 1);
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v20 = (std::string *)v93.__r_.__value_.__r.__words[0];
    if (v19)
    {
      if (*((char *)v18 + 23) >= 0)
        v21 = v18;
      else
        v21 = *(__int128 **)v18;
      memmove(v20, v21, v19);
    }
    *(_WORD *)((char *)&v20->__r_.__value_.__l.__data_ + v19) = 95;
    std::to_string(&v92, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v92;
    else
      v22 = (std::string *)v92.__r_.__value_.__r.__words[0];
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v92.__r_.__value_.__r.__words[2]);
    else
      size = v92.__r_.__value_.__l.__size_;
    v24 = std::string::append(&v93, (const std::string::value_type *)v22, size);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v118.__end_ = (std::__split_buffer<std::string>::pointer)v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v118.__first_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append((std::string *)&v118, "_post_scale");
    v27 = (char *)v26->__r_.__value_.__r.__words[0];
    v124.__r_.__value_.__r.__words[0] = v26->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v124.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
    v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    begin = v116.__begin_;
    if (v116.__begin_ >= v116.__end_)
    {
      v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v116.__begin_ - (char *)v116.__first_) >> 3);
      v32 = v31 + 1;
      if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v116.__end_ - (char *)v116.__first_) >> 3) > v32)
        v32 = 0x5555555555555556 * (((char *)v116.__end_ - (char *)v116.__first_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v116.__end_ - (char *)v116.__first_) >> 3) >= 0x555555555555555)
        v33 = 0xAAAAAAAAAAAAAAALL;
      else
        v33 = v32;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v116.__end_;
      if (v33)
        v34 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v116.__end_, v33);
      else
        v34 = 0;
      v35 = v34 + v31;
      __v.__first_ = v34;
      __v.__begin_ = v35;
      __v.__end_cap_.__value_ = &v34[v33];
      v35->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
      v35->__r_.__value_.__l.__size_ = v124.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v124.__r_.__value_.__r.__words + 7);
      *((_BYTE *)&v35->__r_.__value_.__s + 23) = v28;
      v124.__r_.__value_.__r.__words[0] = 0;
      *(std::string::size_type *)((char *)v124.__r_.__value_.__r.__words + 7) = 0;
      __v.__end_ = v35 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v116, &__v);
      v30 = v116.__begin_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      v116.__begin_->__r_.__value_.__l.__data_ = v27;
      begin->__r_.__value_.__l.__size_ = v124.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&begin->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v124.__r_.__value_.__r.__words + 7);
      *((_BYTE *)&begin->__r_.__value_.__s + 23) = v28;
      v30 = begin + 1;
    }
    v116.__begin_ = v30;
    if (SHIBYTE(v118.__end_) < 0)
      operator delete(v118.__first_);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    memset(&v93, 0, sizeof(v93));
    v36 = v109;
    if (*((char *)v109 + 23) >= 0)
      v37 = *((unsigned __int8 *)v109 + 23);
    else
      v37 = *((_QWORD *)v109 + 1);
    v38 = &v92;
    std::string::basic_string[abi:ne180100]((uint64_t)&v92, v37 + 1);
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v38 = (std::string *)v92.__r_.__value_.__r.__words[0];
    if (v37)
    {
      if (*((char *)v36 + 23) >= 0)
        v39 = v36;
      else
        v39 = *(__int128 **)v36;
      memmove(v38, v39, v37);
    }
    *(_WORD *)((char *)&v38->__r_.__value_.__l.__data_ + v37) = 95;
    std::to_string(&v124, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = &v124;
    else
      v40 = (std::string *)v124.__r_.__value_.__r.__words[0];
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
    else
      v41 = v124.__r_.__value_.__l.__size_;
    v42 = std::string::append(&v92, (const std::string::value_type *)v40, v41);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v118.__end_ = (std::__split_buffer<std::string>::pointer)v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v118.__first_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    v44 = std::string::append((std::string *)&v118, "_post_scale_shift");
    v45 = v44->__r_.__value_.__r.__words[0];
    v125[0] = (void **)v44->__r_.__value_.__l.__size_;
    *(void ***)((char *)v125 + 7) = *(void ***)((char *)&v44->__r_.__value_.__r.__words[1] + 7);
    v46 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v47 = v93.__r_.__value_.__l.__size_;
    if (v93.__r_.__value_.__l.__size_ >= v93.__r_.__value_.__r.__words[2])
    {
      v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93.__r_.__value_.__l.__size_ - v93.__r_.__value_.__r.__words[0]) >> 3);
      v50 = v49 + 1;
      if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v93.__r_.__value_.__r.__words[2] - v93.__r_.__value_.__r.__words[0]) >> 3) > v50)
        v50 = 0x5555555555555556
            * ((uint64_t)(v93.__r_.__value_.__r.__words[2] - v93.__r_.__value_.__r.__words[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93.__r_.__value_.__r.__words[2] - v93.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
        v51 = 0xAAAAAAAAAAAAAAALL;
      else
        v51 = v50;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v93.__r_.__value_.__r.__words[2];
      if (v51)
        v52 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v93.__r_.__value_.__r.__words[2], v51);
      else
        v52 = 0;
      v53 = v52 + v49;
      __v.__first_ = v52;
      __v.__begin_ = v53;
      __v.__end_cap_.__value_ = &v52[v51];
      v53->__r_.__value_.__r.__words[0] = v45;
      v53->__r_.__value_.__l.__size_ = (std::string::size_type)v125[0];
      *(std::string::size_type *)((char *)&v53->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v125 + 7);
      *((_BYTE *)&v53->__r_.__value_.__s + 23) = v46;
      memset(v125, 0, 15);
      __v.__end_ = v53 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v93, &__v);
      v48 = v93.__r_.__value_.__l.__size_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      *(_QWORD *)v93.__r_.__value_.__l.__size_ = v45;
      *(void ***)(v47 + 8) = v125[0];
      *(void ***)(v47 + 15) = *(void ***)((char *)v125 + 7);
      *(_BYTE *)(v47 + 23) = v46;
      v48 = v47 + 24;
    }
    v93.__r_.__value_.__l.__size_ = v48;
    if (SHIBYTE(v118.__end_) < 0)
      operator delete(v118.__first_);
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v124.__r_.__value_.__l.__data_);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__begin_ + 4) = (std::__split_buffer<std::string>::pointer)0x358637BD00000000;
    HIDWORD(__v.__end_) = 0;
    LOBYTE(__v.__end_cap_.__value_) = 0;
    *(_QWORD *)((char *)&v122 + 4) = 0;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)1;
    *(float *)&__v.__begin_ = v13;
    v54 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v118, "elementwise");
    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
    else
      v55 = v115.__r_.__value_.__l.__size_;
    v56 = &v92;
    std::string::basic_string[abi:ne180100]((uint64_t)&v92, v55 + 6);
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v56 = (std::string *)v92.__r_.__value_.__r.__words[0];
    if (v55)
    {
      if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = &v115;
      else
        v57 = (std::string *)v115.__r_.__value_.__r.__words[0];
      memmove(v56, v57, v55);
    }
    strcpy((char *)v56 + v55, "_scale");
    memset(&v89, 0, sizeof(v89));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v89, v109, v110, 0xAAAAAAAAAAAAAAABLL * (((char *)v110 - (char *)v109) >> 3));
    memset(&v88, 0, sizeof(v88));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v88, (__int128 *)v116.__first_, (__int128 *)v116.__begin_, 0xAAAAAAAAAAAAAAABLL * (((char *)v116.__begin_ - (char *)v116.__first_) >> 3));
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v90, v54, (uint64_t)&v118, (uint64_t)&v92, (uint64_t)&__v, (__int128 *)v89.__r_.__value_.__l.__data_, (__int128 *)v89.__r_.__value_.__l.__size_, (__int128 **)&v88);
    v58 = v91;
    if (v91)
    {
      p_shared_owners = (unint64_t *)&v91->__shared_owners_;
      do
        v60 = __ldaxr(p_shared_owners);
      while (__stlxr(v60 - 1, p_shared_owners));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
    v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    if (SHIBYTE(v118.__end_) < 0)
      operator delete(v118.__first_);
    *(std::__split_buffer<std::string>::pointer *)((char *)&v118.__begin_ + 4) = (std::__split_buffer<std::string>::pointer)0x358637BD00000000;
    HIDWORD(v118.__end_) = 0;
    LOBYTE(v118.__end_cap_.__value_) = 0;
    *(_QWORD *)((char *)&v119 + 4) = 0;
    v118.__first_ = 0;
    LODWORD(v118.__begin_) = HIDWORD(v106);
    v61 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v92, "elementwise");
    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v62 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
    else
      v62 = v115.__r_.__value_.__l.__size_;
    v63 = &v124;
    std::string::basic_string[abi:ne180100]((uint64_t)&v124, v62 + 6);
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v63 = (std::string *)v124.__r_.__value_.__r.__words[0];
    if (v62)
    {
      if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = &v115;
      else
        v64 = (std::string *)v115.__r_.__value_.__r.__words[0];
      memmove(v63, v64, v62);
    }
    strcpy((char *)v63 + v62, "_shift");
    memset(&v85, 0, sizeof(v85));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v85, (__int128 *)v116.__first_, (__int128 *)v116.__begin_, 0xAAAAAAAAAAAAAAABLL * (((char *)v116.__begin_ - (char *)v116.__first_) >> 3));
    memset(&v84, 0, sizeof(v84));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v84, (__int128 *)v93.__r_.__value_.__l.__data_, (__int128 *)v93.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93.__r_.__value_.__l.__size_ - v93.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v86, v61, (uint64_t)&v92, (uint64_t)&v124, (uint64_t)&v118, (__int128 *)v85.__r_.__value_.__l.__data_, (__int128 *)v85.__r_.__value_.__l.__size_, (__int128 **)&v84);
    v65 = v87;
    if (v87)
    {
      v66 = (unint64_t *)&v87->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    v125[0] = (void **)&v84;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v125);
    v125[0] = (void **)&v85;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v125);
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v124.__r_.__value_.__l.__data_);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    v68 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v92, "elementwise");
    memset(&v81, 0, sizeof(v81));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v81, (__int128 *)v93.__r_.__value_.__l.__data_, (__int128 *)v93.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93.__r_.__value_.__l.__size_ - v93.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v80, 0, sizeof(v80));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v80, v112, v113, 0xAAAAAAAAAAAAAAABLL * (((char *)v113 - (char *)v112) >> 3));
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v82, v68, (uint64_t)&v92, (uint64_t)&v115, (uint64_t)&v98, (__int128 *)v81.__r_.__value_.__l.__data_, (__int128 *)v81.__r_.__value_.__l.__size_, (__int128 **)&v80);
    v69 = v83;
    if (v83)
    {
      v70 = (unint64_t *)&v83->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
    v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    __v.__first_ = &v93;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v116;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
  else
  {
    v14 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&__v, "elementwise");
    memset(&v95, 0, sizeof(v95));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v95, v109, v110, 0xAAAAAAAAAAAAAAABLL * (((char *)v110 - (char *)v109) >> 3));
    memset(&v94, 0, sizeof(v94));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v94, v112, v113, 0xAAAAAAAAAAAAAAABLL * (((char *)v113 - (char *)v112) >> 3));
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v96, v14, (uint64_t)&__v, (uint64_t)&v115, (uint64_t)&v98, (__int128 *)v95.__r_.__value_.__l.__data_, (__int128 *)v95.__r_.__value_.__l.__size_, (__int128 **)&v94);
    v15 = v97;
    if (v97)
    {
      v16 = (unint64_t *)&v97->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v118.__first_ = &v94;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    v118.__first_ = &v95;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
  }
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v112);
  }
  else
  {
    v72 = (uint64_t **)*((_QWORD *)this + 1);
    v73 = std::map<std::string,std::string>::at((uint64_t)v72, v109);
    __v = *(std::__split_buffer<std::string> *)v73;
    v122 = 0uLL;
    v123 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v122, *(const void **)(v73 + 40), *(_QWORD *)(v73 + 48), (uint64_t)(*(_QWORD *)(v73 + 48) - *(_QWORD *)(v73 + 40)) >> 2);
    v118 = __v;
    v74 = (void *)v122;
    v119 = 0uLL;
    v120 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v119, (const void *)v122, *((uint64_t *)&v122 + 1), (uint64_t)(*((_QWORD *)&v122 + 1) - v122) >> 2);
    v116 = v118;
    v75 = (char *)v119;
    memset(__p, 0, sizeof(__p));
    v76 = *((_QWORD *)&v119 + 1);
    v77 = (uint64_t)(*((_QWORD *)&v119 + 1) - v119) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, (const void *)v119, *((uint64_t *)&v119 + 1), v77);
    EspressoConverter::validateShape((int *)&v116, *((_QWORD *)a2 + 14), (uint64_t)v112);
    if (__p[0])
      operator delete(__p[0]);
    v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
    v78 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v72, v112, (__int128 **)&v93);
    v79 = *(_OWORD *)&v118.__end_;
    *(_OWORD *)(v78 + 56) = *(_OWORD *)&v118.__first_;
    *(_OWORD *)(v78 + 72) = v79;
    *((_QWORD *)v78 + 11) = v118.__end_cap_.__value_;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v78 + 96, v75, v76, v77);
    if (v75)
      operator delete(v75);
    if (v74)
      operator delete(v74);
  }
  v104 = &off_1E3D54DB0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v105);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v109;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
}

void sub_19C96A628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  void *__p;
  char a70;
  uint64_t *v70;
  unint64_t v71;
  uint64_t v72;

  STACK[0x220] = v71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&a42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  if (*(char *)(v72 - 185) < 0)
    operator delete(*(void **)(v72 - 208));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v70);
  STACK[0x220] = (unint64_t)&a59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&a62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  if (a70 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CoreML::copySpecArrayStringToVector(_QWORD *result, char *a2, size_t __sz)
{
  char *v3;
  _QWORD *v5;
  char *v6;
  char *v7;

  if (a2[23] >= 0)
    v3 = a2;
  else
    v3 = *(char **)a2;
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  if (__sz)
  {
    v5 = result;
    if ((__sz & 0x8000000000000000) != 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(__sz);
    *v5 = v6;
    v7 = &v6[__sz];
    v5[2] = &v6[__sz];
    result = memmove(v6, v3, __sz);
    v5[1] = v7;
  }
  return result;
}

void sub_19C96A968(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::dequantizeWeightParamSpec(CoreML *this, const CoreML::Specification::WeightParams *a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  uint64_t *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  void *v42;
  float *v43;
  float v44;
  float v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  float *v49;
  float *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  void *exception;
  void *v60;
  __int128 v61;
  uint64_t v62;
  void *v63[2];
  uint64_t v64;
  void *__p;
  _BYTE *v66;
  void (**v67)(CoreML::Specification::LinearQuantizationParams *__hidden);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;

  v6 = (uint64_t *)*((_QWORD *)a2 + 8);
  if (!v6)
    v6 = &CoreML::Specification::_QuantizationParams_default_instance_;
  v7 = *((unsigned int *)v6 + 4);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  v8 = *((_DWORD *)v6 + 9);
  if (v8 != 102)
  {
    if (v8 != 101)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](exception, "Unrecognizable quantization parameters");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v9 = v6[3];
    v69 = 0;
    v70 = 0;
    v67 = &off_1E3D54B50;
    v68 = 0;
    v10 = *(_DWORD *)(v9 + 16);
    if (v10)
    {
      google::protobuf::RepeatedField<float>::Reserve((unsigned int *)&v69, v10);
      memcpy((void *)(v70 + 8), (const void *)(*(_QWORD *)(v9 + 24) + 8), 4 * *(int *)(v9 + 16));
      LODWORD(v69) = *(_DWORD *)(v9 + 16);
    }
    v71 = 0;
    v72 = 0;
    v11 = *(_DWORD *)(v9 + 40);
    if (v11)
    {
      google::protobuf::RepeatedField<float>::Reserve((unsigned int *)&v71, v11);
      memcpy((void *)(v72 + 8), (const void *)(*(_QWORD *)(v9 + 48) + 8), 4 * *(int *)(v9 + 40));
      v12 = *(_DWORD *)(v9 + 40);
      LODWORD(v71) = v12;
    }
    else
    {
      v12 = 0;
    }
    v73 = 0;
    v31 = *(_QWORD *)(v9 + 8);
    if ((v31 & 1) != 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v68, v31 & 0xFFFFFFFFFFFFFFFELL);
      v12 = v71;
    }
    v32 = v69;
    LODWORD(v63[0]) = 0;
    std::vector<float>::vector(&__p, (int)v69, v63);
    if (v32)
    {
      v33 = 0;
      v34 = v70;
      v35 = __p;
      do
      {
        v35[v33] = *(_DWORD *)(v34 + 4 * (int)v33 + 8);
        ++v33;
      }
      while (v32 != (_DWORD)v33);
    }
    LODWORD(v61) = 0;
    std::vector<float>::vector(v63, (int)v71, &v61);
    if (v12)
    {
      v36 = 0;
      v37 = v72;
      v38 = v63[0];
      do
      {
        v38[v36] = *(_DWORD *)(v37 + 4 * (int)v36 + 8);
        ++v36;
      }
      while (v12 != (_DWORD)v36);
    }
    v39 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
    v74 = 0;
    std::vector<float>::vector(&v61, a3, &v74);
    if ((v39[23] & 0x80u) == 0)
      v40 = v39;
    else
      v40 = *(unsigned __int8 **)v39;
    if (v7 == 8)
    {
      if (a3 <= 1)
        v41 = 1;
      else
        v41 = a3;
      v42 = v63[0];
      if (!a3)
      {
        v58 = v62;
        *(_OWORD *)this = v61;
        *((_QWORD *)this + 2) = v58;
LABEL_61:
        v63[1] = v42;
        operator delete(v42);
LABEL_62:
        if (__p)
        {
          v66 = __p;
          operator delete(__p);
        }
        CoreML::Specification::LinearQuantizationParams::~LinearQuantizationParams((CoreML::Specification::LinearQuantizationParams *)&v67);
        return;
      }
      v43 = (float *)v61;
      v44 = *(float *)__p;
      v45 = *(float *)v63[0];
      do
      {
        v46 = *v40++;
        *v43++ = v45 + (float)(v44 * (float)v46);
        --v41;
      }
      while (v41);
    }
    else if (a3)
    {
      v47 = 0;
      v48 = 0;
      v49 = (float *)__p;
      v50 = (float *)v63[0];
      v51 = 8 - v7;
      v52 = v61;
      do
      {
        v53 = v47 >> 3;
        v54 = v47 & 7;
        v55 = *(unsigned __int8 **)v39;
        if ((v39[23] & 0x80u) == 0)
          v55 = v39;
        v56 = (v55[v53] << v54) >> v51;
        if (v51 <= v54)
          v56 |= v55[v53 + 1] >> (v51 - v54 + 8);
        *(float *)(v52 + 4 * v48) = v50[v48 / a3] + (float)((float)v56 * v49[v48 / a3]);
        ++v48;
        v47 += v7;
      }
      while (a3 != v48);
    }
    v42 = v63[0];
    v57 = v62;
    *(_OWORD *)this = v61;
    *((_QWORD *)this + 2) = v57;
    if (!v42)
      goto LABEL_62;
    goto LABEL_61;
  }
  CoreML::Specification::LookUpTableQuantizationParams::LookUpTableQuantizationParams((CoreML::Specification::LookUpTableQuantizationParams *)&v67, (const CoreML::Specification::LookUpTableQuantizationParams *)v6[3]);
  v13 = v69;
  std::vector<float>::vector(&__p, v69);
  if ((int)v13 >= 1)
  {
    v14 = __p;
    v15 = (int *)(v70 + 8);
    do
    {
      v16 = *v15++;
      *v14++ = v16;
      --v13;
    }
    while (v13);
  }
  v17 = (uint64_t *)*((_QWORD *)a2 + 6);
  LODWORD(v61) = 0;
  std::vector<float>::vector(v63, a3, &v61);
  v18 = __p;
  if (2 << (v7 - 1) != (v66 - (_BYTE *)__p) >> 2)
  {
    v60 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v60, "Lookup table size incorrect.");
    __cxa_throw(v60, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v7 == 8)
  {
    if (a3)
    {
      v19 = 0;
      v20 = v63[0];
      do
      {
        if (*((char *)v17 + 23) >= 0)
          v21 = v17;
        else
          v21 = (uint64_t *)*v17;
        v20[v19] = v18[*((unsigned __int8 *)v21 + v19)];
        ++v19;
      }
      while (a3 != v19);
    }
  }
  else if (a3)
  {
    v22 = 0;
    v23 = 8 - v7;
    v24 = v63[0];
    do
    {
      v25 = v22 >> 3;
      v26 = v22 & 7;
      v27 = (uint64_t *)*v17;
      if (*((char *)v17 + 23) >= 0)
        v27 = v17;
      v28 = (*((unsigned __int8 *)v27 + v25) << v26) >> v23;
      if (v23 <= v26)
        v28 |= *((unsigned __int8 *)v27 + v25 + 1) >> (v23 - v26 + 8);
      *v24++ = v18[v28];
      v22 += v7;
      --a3;
    }
    while (a3);
  }
  v29 = __p;
  v30 = v64;
  *(_OWORD *)this = *(_OWORD *)v63;
  *((_QWORD *)this + 2) = v30;
  if (v29)
  {
    v66 = v29;
    operator delete(v29);
  }
  CoreML::Specification::LookUpTableQuantizationParams::~LookUpTableQuantizationParams((CoreML::Specification::LookUpTableQuantizationParams *)&v67);
}

void sub_19C96AE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  CoreML::Specification::LookUpTableQuantizationParams::~LookUpTableQuantizationParams((CoreML::Specification::LookUpTableQuantizationParams *)&a20);
  _Unwind_Resume(a1);
}

void CoreML::setLUTQuantizationParams(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  _BYTE v14[24];
  uint64_t v15;

  v2 = a1[8];
  v3 = a1 == &CoreML::Specification::_WeightParams_default_instance_ || v2 == 0;
  if (!v3 && *(_DWORD *)(v2 + 36) == 102)
  {
    CoreML::Specification::LookUpTableQuantizationParams::LookUpTableQuantizationParams((CoreML::Specification::LookUpTableQuantizationParams *)v14, *(const CoreML::Specification::LookUpTableQuantizationParams **)(v2 + 24));
    v6 = (uint64_t *)a1[8];
    if (!v6)
      v6 = &CoreML::Specification::_QuantizationParams_default_instance_;
    v7 = *((_DWORD *)v6 + 4) - 1;
    v8 = 2 << (*((_BYTE *)v6 + 16) - 1);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v13 = 0;
    std::vector<float>::resize((char **)a2, v8, &v13);
    if (v7 <= 0x1E)
    {
      v9 = 0;
      v10 = v15;
      v11 = *(char **)a2;
      if (v8 <= 1)
        v12 = 1;
      else
        v12 = v8;
      do
      {
        *(_DWORD *)v11 = *(_DWORD *)(v10 + (v9 >> 30) + 8);
        v11 += 4;
        v9 += 0x100000000;
        --v12;
      }
      while (v12);
    }
    CoreML::Specification::LookUpTableQuantizationParams::~LookUpTableQuantizationParams((CoreML::Specification::LookUpTableQuantizationParams *)v14);
  }
}

void sub_19C96B000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CoreML::Specification::LookUpTableQuantizationParams::~LookUpTableQuantizationParams((CoreML::Specification::LookUpTableQuantizationParams *)va);
  _Unwind_Resume(a1);
}

float CoreML::setLinearQuantizationScaleBias(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  float result;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *exception;
  int v22;
  int v23;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v23 = 1065353216;
  std::vector<float>::resize((char **)a2, a4, &v23);
  if (*(_DWORD *)(a1 + 16) == 1)
  {
    if (a4)
    {
      v8 = 0;
      v9 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v10 = *(char **)a2;
      do
        *(_DWORD *)&v10[4 * v8++] = v9;
      while (a4 > v8);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 40) != a4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](exception, "Unrecognizable linear quantization scale parameter length.");
LABEL_23:
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (a4)
    {
      v11 = 0;
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(char **)a2;
      do
      {
        *(_DWORD *)&v13[4 * v11] = *(_DWORD *)(v12 + 4 * (int)v11 + 8);
        ++v11;
      }
      while (a4 > v11);
    }
  }
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v22 = 0;
  std::vector<float>::resize((char **)a3, a4, &v22);
  v15 = *(_DWORD *)(a1 + 40);
  if (!v15)
    return result;
  if (*(_DWORD *)(a1 + 16) != v15)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Quantization bias should have the same length as scale if it exists\n");
    goto LABEL_23;
  }
  if (v15 == 1)
  {
    if (a4)
    {
      v16 = 0;
      result = *(float *)(*(_QWORD *)(a1 + 48) + 8);
      v17 = *(char **)a3;
      do
        *(float *)&v17[4 * v16++] = result;
      while (a4 > v16);
    }
  }
  else if (a4)
  {
    v18 = 0;
    v19 = *(_QWORD *)(a1 + 48);
    v20 = *(char **)a3;
    do
    {
      result = *(float *)(v19 + 4 * (int)v18 + 8);
      *(float *)&v20[4 * v18++] = result;
    }
    while (a4 > v18);
  }
  return result;
}

void sub_19C96B1A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void CoreML::setQuantizationParams(CoreML::Specification::protobuf_NeuralNetwork_2eproto *a1, uint64_t *a2, unint64_t a3, const void **a4)
{
  uint64_t *v7;
  int v8;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v10;
  uint64_t *v11;
  uint64_t *v12;
  const CoreML::Specification::LookUpTableQuantizationParams *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  void **v18;
  const void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  size_t v25;
  void **v26;
  const void *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  size_t v33;
  void **v34;
  const void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39[5];
  void *__p[2];
  char v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *v44;
  void *v45;
  uint64_t v46;

  v7 = (uint64_t *)*((_QWORD *)a1 + 8);
  if (!v7)
    v7 = &CoreML::Specification::_QuantizationParams_default_instance_;
  v8 = *((_DWORD *)v7 + 9);
  if (v8 == 101)
  {
    LODWORD(v44) = 1065353216;
    std::vector<float>::vector(v39, a3, &v44);
    LODWORD(__p[0]) = 0;
    v10 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<float>::vector(&v44, a3, __p);
    v11 = (uint64_t *)*((_QWORD *)a1 + 8);
    if (!v11)
      v11 = &CoreML::Specification::_QuantizationParams_default_instance_;
    if (*((_DWORD *)v11 + 9) == 101)
    {
      v12 = (uint64_t *)v11[3];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v10);
      v12 = &CoreML::Specification::_LinearQuantizationParams_default_instance_;
    }
    CoreML::setLinearQuantizationScaleBias((uint64_t)v12, (uint64_t)v39, (uint64_t)&v44, a3);
    v24 = *a2;
    v42 = 0;
    v43 = 0;
    if (*((char *)a4 + 23) >= 0)
      v25 = *((unsigned __int8 *)a4 + 23);
    else
      v25 = (size_t)a4[1];
    v26 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v25 + 13);
    if (v41 < 0)
      v26 = (void **)__p[0];
    if (v25)
    {
      if (*((char *)a4 + 23) >= 0)
        v27 = a4;
      else
        v27 = *a4;
      memmove(v26, v27, v25);
    }
    strcpy((char *)v26 + v25, "per_ch_qscale");
    v28 = 4 * a3;
    (*(void (**)(uint64_t, uint64_t *, void **, void *, uint64_t, _QWORD))(*(_QWORD *)v24 + 168))(v24, &v42, __p, v39[0], v28, 0);
    if (v41 < 0)
      operator delete(__p[0]);
    v29 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = *a2;
    v42 = 0;
    v43 = 0;
    if (*((char *)a4 + 23) >= 0)
      v33 = *((unsigned __int8 *)a4 + 23);
    else
      v33 = (size_t)a4[1];
    v34 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v33 + 12);
    if (v41 < 0)
      v34 = (void **)__p[0];
    if (v33)
    {
      if (*((char *)a4 + 23) >= 0)
        v35 = a4;
      else
        v35 = *a4;
      memmove(v34, v35, v33);
    }
    strcpy((char *)v34 + v33, "per_ch_qbias");
    (*(void (**)(uint64_t, uint64_t *, void **, void *, uint64_t, _QWORD))(*(_QWORD *)v32 + 168))(v32, &v42, __p, v44, v28, 0);
    if (v41 < 0)
      operator delete(__p[0]);
    v36 = v43;
    if (v43)
    {
      v37 = (unint64_t *)&v43->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    v23 = v39[0];
    if (v39[0])
    {
      v39[1] = v39[0];
LABEL_71:
      operator delete(v23);
    }
  }
  else
  {
    v44 = 0;
    v45 = 0;
    v46 = 0;
    if (v8 == 102)
    {
      v13 = (const CoreML::Specification::LookUpTableQuantizationParams *)v7[3];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(a1);
      v13 = (const CoreML::Specification::LookUpTableQuantizationParams *)&CoreML::Specification::_LookUpTableQuantizationParams_default_instance_;
    }
    CoreML::Specification::LookUpTableQuantizationParams::LookUpTableQuantizationParams((CoreML::Specification::LookUpTableQuantizationParams *)v39, v13);
    v14 = (uint64_t *)*((_QWORD *)a1 + 8);
    if (!v14)
      v14 = &CoreML::Specification::_QuantizationParams_default_instance_;
    v15 = v14[2];
    CoreML::setLUTQuantizationParams((uint64_t *)a1, (uint64_t)&v44);
    v16 = *a2;
    v42 = 0;
    v43 = 0;
    if (*((char *)a4 + 23) >= 0)
      v17 = *((unsigned __int8 *)a4 + 23);
    else
      v17 = (size_t)a4[1];
    v18 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v17 + 14);
    if (v41 < 0)
      v18 = (void **)__p[0];
    if (v17)
    {
      if (*((char *)a4 + 23) >= 0)
        v19 = a4;
      else
        v19 = *a4;
      memmove(v18, v19, v17);
    }
    strcpy((char *)v18 + v17, "lut_to_float32");
    (*(void (**)(uint64_t, uint64_t *, void **, void *, uint64_t, _QWORD))(*(_QWORD *)v16 + 168))(v16, &v42, __p, v44, 4 * (2 << (v15 - 1)), 0);
    if (v41 < 0)
      operator delete(__p[0]);
    v20 = v43;
    if (v43)
    {
      v21 = (unint64_t *)&v43->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    CoreML::Specification::LookUpTableQuantizationParams::~LookUpTableQuantizationParams((CoreML::Specification::LookUpTableQuantizationParams *)v39);
    v23 = v44;
    if (v44)
      goto LABEL_71;
  }
}

void sub_19C96B5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;
  void *v23;

  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  v23 = *(void **)(v21 - 72);
  if (v23)
  {
    *(_QWORD *)(v21 - 64) = v23;
    operator delete(v23);
  }
  if (a10)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void LayerTranslator::addStack(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  void *__p;
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  int v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 *v27;
  __int128 *v28;
  uint64_t v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::string *v37;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v30.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v5;
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v27, (uint64_t *)&v24, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 925)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_StackLayerParams_default_instance_;
  }
  v23 = v7[2];
  v8 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "stack_nd");
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, v24, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v24) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
  memset(&v32, 0, sizeof(v32));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v31, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v34.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v8[14] + 8))(*(_QWORD *)(v8[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v35 = v21;
  v36 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  memset(&v34, 0, sizeof(v34));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v34, (__int128 *)v32.__r_.__value_.__l.__data_, (__int128 *)v32.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v33, 0, sizeof(v33));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v33, (__int128 *)v31.__r_.__value_.__l.__data_, (__int128 *)v31.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31.__r_.__value_.__l.__size_ - v31.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v37 = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v37 = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v11 = v36;
  if (v36)
  {
    v12 = (unint64_t *)&v36->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (*v8)
    Espresso::sequential_builder::add_shape_from_kernel();
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (v20 < 0)
    operator delete(__p);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v27);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_19C96B9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  uint64_t v36;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  *(_QWORD *)(v36 - 56) = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = v36 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  if (a20 < 0)
    operator delete(__p);
  __p = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a24 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(a1);
}

void LayerTranslator::addMVN(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  _QWORD *v12;
  uint64_t **v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string v23;
  std::string v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  _DWORD v27[2];
  int v28;
  void (**v29)(CoreML::Specification::MeanVarianceNormalizeLayerParams *__hidden);
  uint64_t v30[2];
  int v31;
  __int128 *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 *v35;
  __int128 *v36;
  uint64_t v37;
  std::string v38;
  _OWORD v39[2];
  uint64_t v40;
  void *__p;
  void *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v38.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  }
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v35, (uint64_t *)&v32, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 165)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_MeanVarianceNormalizeLayerParams_default_instance_;
  }
  v29 = &off_1E3D56E58;
  v30[0] = 0;
  v31 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v30, v8 & 0xFFFFFFFFFFFFFFFELL);
  v9 = v7[2];
  v30[1] = v9;
  if ((v9 & 0xFF00) != 0)
    v10 = 1;
  else
    v10 = 2;
  v27[1] = v10;
  v28 = 2;
  v11 = *((float *)&v9 + 1);
  if (!(_BYTE)v9)
    v28 = 1;
  if (*((float *)&v9 + 1) == 0.0)
    v11 = 0.000001;
  *(float *)v27 = v11;
  v12 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v50, "l2_normalize");
  memset(&v24, 0, sizeof(v24));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, v32, v33, 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - (char *)v32) >> 3));
  memset(&v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, v35, v36, 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v35) >> 3));
  Espresso::sequential_builder::add<Espresso::l2_norm_params>(&v25, v12, (uint64_t)&v50, (uint64_t)&v38, (uint64_t)v27, (__int128 *)v24.__r_.__value_.__l.__data_, (__int128 *)v24.__r_.__value_.__l.__size_, (__int128 **)&v23);
  *(_QWORD *)&v44 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  *(_QWORD *)&v44 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  if (SBYTE7(v51) < 0)
    operator delete((void *)v50);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v35);
  }
  else
  {
    v13 = (uint64_t **)*((_QWORD *)this + 1);
    v14 = std::map<std::string,std::string>::at((uint64_t)v13, v32);
    v50 = *(_OWORD *)v14;
    v51 = *(_OWORD *)(v14 + 16);
    v52 = *(_QWORD *)(v14 + 32);
    v53 = 0;
    v54 = 0;
    v55 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v53, *(const void **)(v14 + 40), *(_QWORD *)(v14 + 48), (uint64_t)(*(_QWORD *)(v14 + 48) - *(_QWORD *)(v14 + 40)) >> 2);
    v44 = v50;
    v45 = v51;
    v15 = v53;
    v46 = v52;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v47, v53, v54, (v54 - (uint64_t)v53) >> 2);
    v39[0] = v44;
    v39[1] = v45;
    v16 = v47;
    v40 = v46;
    __p = 0;
    v42 = 0;
    v43 = 0;
    v17 = v48;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v47, v48, (v48 - (uint64_t)v47) >> 2);
    EspressoConverter::validateShape((int *)v39, *((_QWORD *)a2 + 14), (uint64_t)v35);
    if (__p)
    {
      v42 = __p;
      operator delete(__p);
    }
    v56 = v35;
    v18 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, v35, &v56);
    v19 = v45;
    *(_OWORD *)(v18 + 56) = v44;
    *(_OWORD *)(v18 + 72) = v19;
    *((_QWORD *)v18 + 11) = v46;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v18 + 96, v16, v17, (v17 - (uint64_t)v16) >> 2);
    if (v16)
      operator delete(v16);
    if (v15)
      operator delete(v15);
  }
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v29 = &off_1E3D56E58;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v30);
  *(_QWORD *)&v50 = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  *(_QWORD *)&v50 = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_19C96BE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p)
{
  uint64_t *v41;
  void *v42;
  void *v43;
  uint64_t v44;

  if (__p)
  {
    operator delete(__p);
    if (!v43)
    {
LABEL_3:
      if (!v42)
      {
LABEL_8:
        std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
        google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v41);
        *(_QWORD *)(v44 - 224) = &a23;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 224));
        *(_QWORD *)(v44 - 224) = &a26;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 224));
        if (a34 < 0)
          operator delete(a29);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v42);
      goto LABEL_8;
    }
  }
  else if (!v43)
  {
    goto LABEL_3;
  }
  operator delete(v43);
  if (!v42)
    goto LABEL_8;
  goto LABEL_7;
}

void LayerTranslator::addRound(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[3];
  char v17;
  int v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[2] = (void **)897988541;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v16[0] = (void **)37;
  v16[1] = (void **)1065353216;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C96C13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addOneHot(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  unint64_t *inited;
  int v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  int v20;
  unint64_t *v21;
  int v22;
  std::string v23;
  std::string v24;
  void *__p;
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  __int128 *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  std::string *v46;

  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v39.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v5;
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v36, (uint64_t *)&v33, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1450)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    v29 = v7[2];
LABEL_8:
    v30 = *((_DWORD *)v7 + 8);
LABEL_9:
    v31 = *((_DWORD *)v7 + 9);
    goto LABEL_10;
  }
  inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
  v9 = *((_DWORD *)a2 + 35);
  v29 = qword_1ED003958;
  if (v9 == 1450)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    goto LABEL_8;
  }
  v19 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
  v20 = *((_DWORD *)a2 + 35);
  v30 = dword_1ED003968;
  if (v20 == 1450)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    goto LABEL_9;
  }
  v21 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v19);
  v22 = *((_DWORD *)a2 + 35);
  v31 = dword_1ED00396C;
  if (v22 == 1450)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v21);
    v7 = &CoreML::Specification::_OneHotLayerParams_default_instance_;
  }
LABEL_10:
  v32 = v7[3];
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "one_hot");
  memset(&v24, 0, sizeof(v24));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
  memset(&v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, v36, v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3));
  memset(&v41, 0, sizeof(v41));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v41, (__int128 *)v24.__r_.__value_.__l.__data_, (__int128 *)v24.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24.__r_.__value_.__l.__size_ - v24.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v40, 0, sizeof(v40));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v40, (__int128 *)v23.__r_.__value_.__l.__data_, (__int128 *)v23.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23.__r_.__value_.__l.__size_ - v23.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v43.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v10[14] + 8))(*(_QWORD *)(v10[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v44 = v27;
  v45 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  memset(&v43, 0, sizeof(v43));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v43, (__int128 *)v41.__r_.__value_.__l.__data_, (__int128 *)v41.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41.__r_.__value_.__l.__size_ - v41.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v42, 0, sizeof(v42));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v42, (__int128 *)v40.__r_.__value_.__l.__data_, (__int128 *)v40.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40.__r_.__value_.__l.__size_ - v40.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v46 = &v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  v46 = &v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  v13 = v45;
  if (v45)
  {
    v14 = (unint64_t *)&v45->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (*v10)
    Espresso::sequential_builder::add_shape_from_kernel();
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  v16 = v28;
  if (v28)
  {
    v17 = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  if (v26 < 0)
    operator delete(__p);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v36);
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
}

void sub_19C96C594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  *(_QWORD *)(v37 - 56) = v37 - 168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  *(_QWORD *)(v37 - 56) = v37 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  *(_QWORD *)(v37 - 56) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  *(_QWORD *)(v37 - 56) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  if (a21 < 0)
    operator delete(__p);
  __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

void LayerTranslator::addLoopContinueBreak(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::string::size_type size;
  void **v8;
  std::string *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  std::string::size_type v15;
  void **v16;
  std::string *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 *v21[3];
  _QWORD v22[3];
  uint64_t v23;
  std::__shared_weak_count *v24;
  __int128 *v25[3];
  void *v26[3];
  void *__p[2];
  char v28;
  void *v29[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  int v33;
  std::string v34;
  __int128 **v35;

  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v34.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v5;
  }
  if (*((_DWORD *)a2 + 35) == 620)
  {
    v33 = *(_DWORD *)(*((_QWORD *)this + 2) + 8);
    v6 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(v29, "cf_jump");
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    else
      size = v34.__r_.__value_.__l.__size_;
    v8 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 6);
    if (v28 < 0)
      v8 = (void **)__p[0];
    if (size)
    {
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v34;
      else
        v9 = (std::string *)v34.__r_.__value_.__r.__words[0];
      memmove(v8, v9, size);
    }
    strcpy((char *)v8 + size, "_break");
    memset(v26, 0, sizeof(v26));
    memset(v25, 0, sizeof(v25));
    Espresso::sequential_builder::add<Espresso::cf_jump_params_t>(&v31, v6, (uint64_t)v29, (uint64_t)__p, (uint64_t)&v33, 0, 0, v25);
    v10 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v35 = v25;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    v13 = v26;
  }
  else
  {
    v33 = *(_DWORD *)(*((_QWORD *)this + 2) + 8) + 1;
    v14 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(v29, "cf_jump");
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    else
      v15 = v34.__r_.__value_.__l.__size_;
    v16 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v15 + 9);
    if (v28 < 0)
      v16 = (void **)__p[0];
    if (v15)
    {
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v34;
      else
        v17 = (std::string *)v34.__r_.__value_.__r.__words[0];
      memmove(v16, v17, v15);
    }
    strcpy((char *)v16 + v15, "_continue");
    memset(v22, 0, sizeof(v22));
    memset(v21, 0, sizeof(v21));
    Espresso::sequential_builder::add<Espresso::cf_jump_params_t>(&v23, v14, (uint64_t)v29, (uint64_t)__p, (uint64_t)&v33, 0, 0, v21);
    v18 = v24;
    if (v24)
    {
      v19 = (unint64_t *)&v24->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v35 = v21;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    v13 = (void **)v22;
  }
  v35 = (__int128 **)v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (v28 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
}

void sub_19C96C970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v30 - 40) = v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 40));
  *(_QWORD *)(v30 - 40) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 40));
  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v30 - 89) < 0)
    operator delete(*(void **)(v30 - 112));
  if (*(char *)(v30 - 41) < 0)
    operator delete(*(void **)(v30 - 64));
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addBatchedMatMul(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v8;
  uint64_t *v9;
  unint64_t *inited;
  int v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  CoreML::Specification::WeightParams *v23;
  CoreML::Specification::WeightParams *v24;
  unint64_t *v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  std::string::size_type size;
  __int128 *v31;
  std::string *v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  std::string::size_type v37;
  __int128 *v38;
  std::string *v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  int v44;
  std::string::size_type v45;
  __int128 *v46;
  std::string *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  __int128 *v52;
  std::string *v53;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  __int128 v57;
  std::string::size_type v58;
  __int128 *v59;
  std::string *v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  std::string::size_type v64;
  int v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t i;
  BOOL v75;
  _QWORD *v76;
  _QWORD *v77;
  std::string::size_type v78;
  void **v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  int v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  _QWORD *v101;
  __int128 v102;
  uint64_t j;
  unint64_t *v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  unsigned int v108;
  uint64_t *v109;
  size_t WeightParamSizeInBytes;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  std::string *v118;
  __int128 v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  int WeightParamSize;
  uint64_t *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v151;
  void *v152;
  int v153;
  uint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  void **v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  void *exception;
  std::runtime_error *v193;
  std::runtime_error *v194;
  std::string *v195;
  __int128 v196;
  unint64_t v197;
  std::runtime_error *v198;
  std::runtime_error *v199;
  unint64_t v200;
  std::runtime_error *v201;
  std::runtime_error *v202;
  unint64_t v203;
  std::string::size_type __sz;
  std::string::value_type *v205;
  std::string::value_type *v206;
  std::string::value_type *__s;
  unint64_t v208;
  int v209;
  int v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  uint64_t v213[2];
  __int128 v214;
  std::string v215;
  __int128 *v216;
  __int128 *v217;
  __int128 *v218;
  std::string v219;
  __int128 v220;
  std::string v221;
  std::string v222;
  std::string *v223;
  std::string *v224;
  std::string *v225;
  __int128 *v226;
  __int128 *v227;
  char *v228;
  __int128 v229;
  unsigned __int128 v230;
  std::string *v231;
  std::string *v232;
  __int128 *v233;
  std::string v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  _DWORD v237[2];
  __int128 v238;
  std::string::size_type v239;
  _DWORD v240[2];
  _DWORD v241[2];
  __int128 v242;
  std::string::size_type v243;
  std::string v244;
  uint64_t *v245;
  __int128 v246;
  int v247;
  int v248;
  std::string v249;
  std::string v250;
  void *__p[2];
  char v252;
  __int128 v253;
  __int128 *v254;
  __int128 *v255;
  uint64_t v256;
  __int128 *v257;
  __int128 *v258;
  uint64_t v259;
  std::string v260;
  __int128 **v261;
  uint64_t v262;
  std::string v263;
  std::string v264;
  _BYTE v265[28];
  float v266;
  __int128 v267;
  std::string v268;
  _BYTE v269[12];
  int v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;

  v277 = *MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v260, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v260.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v5;
  }
  v258 = 0;
  v257 = 0;
  v259 = 0;
  v255 = 0;
  v254 = 0;
  v256 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v257, (uint64_t *)&v254, *((_QWORD *)this + 1));
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v255 - (char *)v254) >> 3) >= 2)
  {
    v219.__r_.__value_.__s.__data_[0] = 0;
    if (*((_DWORD *)a2 + 35) == 1045)
    {
      v7 = a2[16];
      v219.__r_.__value_.__s.__data_[1] = *((_BYTE *)v7 + 48);
    }
    else
    {
      inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
      v11 = *((_DWORD *)a2 + 35);
      v219.__r_.__value_.__s.__data_[1] = dword_1ED0054A0;
      if (v11 != 1045)
      {
        v25 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v26 = *((_DWORD *)a2 + 35);
        v219.__r_.__value_.__s.__data_[2] = BYTE1(dword_1ED0054A0);
        if (v26 == 1045)
        {
          v7 = a2[16];
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v25);
          v7 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
        }
        goto LABEL_12;
      }
      v7 = a2[16];
    }
    v219.__r_.__value_.__s.__data_[2] = *((_BYTE *)v7 + 49);
LABEL_12:
    if (*((_BYTE *)v7 + 51))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](exception, "int8 dynamic quantization not valid with >1 input");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v12 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(__p, "batch_matmul");
    memset(&v250, 0, sizeof(v250));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v250, v254, v255, 0xAAAAAAAAAAAAAAABLL * (((char *)v255 - (char *)v254) >> 3));
    memset(&v249, 0, sizeof(v249));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v249, v257, v258, 0xAAAAAAAAAAAAAAABLL * (((char *)v258 - (char *)v257) >> 3));
    memset(&v263, 0, sizeof(v263));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v263, (__int128 *)v250.__r_.__value_.__l.__data_, (__int128 *)v250.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v250.__r_.__value_.__l.__size_ - v250.__r_.__value_.__r.__words[0]) >> 3));
    memset(v265, 0, 24);
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v265, (__int128 *)v249.__r_.__value_.__l.__data_, (__int128 *)v249.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v249.__r_.__value_.__l.__size_ - v249.__r_.__value_.__r.__words[0]) >> 3));
    LODWORD(v267) = (***(uint64_t (****)(_QWORD))(v12[14] + 8))(*(_QWORD *)(v12[14] + 8));
    Espresso::abstract_engine_factory::make_kernel_priv();
    v242 = v253;
    if (*((_QWORD *)&v253 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v267 = 0uLL;
    v268.__r_.__value_.__r.__words[0] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v267, (__int128 *)v263.__r_.__value_.__l.__data_, (__int128 *)v263.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v263.__r_.__value_.__l.__size_ - v263.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v244, 0, sizeof(v244));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v244, *(__int128 **)v265, *(__int128 **)&v265[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v265[8] - *(_QWORD *)v265) >> 3));
    Espresso::sequential_builder::add_kernel_dbg();
    *(_QWORD *)&v238 = &v244;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
    *(_QWORD *)&v238 = &v267;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
    if (*((_QWORD *)&v242 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (*v12)
      Espresso::sequential_builder::add_shape_from_kernel();
    *(_QWORD *)&v267 = v265;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v267);
    *(_QWORD *)&v267 = &v263;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v267);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
    if (*((_QWORD *)&v253 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    *(_QWORD *)&v267 = &v249;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v267);
    *(_QWORD *)&v267 = &v250;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v267);
    if (v252 < 0)
      operator delete(__p[0]);
    v21 = 0;
    goto LABEL_448;
  }
  v8 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
  if (*((_DWORD *)a2 + 35) == 1045)
  {
    v9 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v8);
    v9 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
  }
  v244.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E3D548F0;
  v244.__r_.__value_.__l.__size_ = 0;
  v248 = 0;
  v22 = v9[1];
  if ((v22 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&v244.__r_.__value_.__l.__size_, v22 & 0xFFFFFFFFFFFFFFFELL);
  if (v9 == &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_)
  {
    v24 = 0;
    v244.__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    if (v9[2])
    {
      v23 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v23, (const CoreML::Specification::WeightParams *)v9[2]);
    }
    else
    {
      v23 = 0;
    }
    v244.__r_.__value_.__r.__words[2] = (std::string::size_type)v23;
    if (v9[3])
    {
      v24 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v24, (const CoreML::Specification::WeightParams *)v9[3]);
    }
    else
    {
      v24 = 0;
    }
  }
  v245 = (uint64_t *)v24;
  v27 = *((_DWORD *)v9 + 12);
  v246 = *((_OWORD *)v9 + 2);
  v247 = v27;
  v28 = *((_QWORD *)&v246 + 1);
  v29 = v246;
  if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v260.__r_.__value_.__r.__words[2]);
  else
    size = v260.__r_.__value_.__l.__size_;
  v31 = &v267;
  std::string::basic_string[abi:ne180100]((uint64_t)&v267, size + 18);
  if (v268.__r_.__value_.__s.__data_[7] < 0)
    v31 = (__int128 *)v267;
  if (size)
  {
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v260;
    else
      v32 = (std::string *)v260.__r_.__value_.__r.__words[0];
    memmove(v31, v32, size);
  }
  strcpy((char *)v31 + size, "_dynamic_quantize_");
  std::to_string(&v263, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v263;
  else
    v33 = (std::string *)v263.__r_.__value_.__r.__words[0];
  if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = HIBYTE(v263.__r_.__value_.__r.__words[2]);
  else
    v34 = v263.__r_.__value_.__l.__size_;
  v35 = std::string::append((std::string *)&v267, (const std::string::value_type *)v33, v34);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v243 = v35->__r_.__value_.__r.__words[2];
  v242 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  if (v268.__r_.__value_.__s.__data_[7] < 0)
    operator delete((void *)v267);
  if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
  else
    v37 = v260.__r_.__value_.__l.__size_;
  v38 = &v267;
  std::string::basic_string[abi:ne180100]((uint64_t)&v267, v37 + 24);
  if (v268.__r_.__value_.__s.__data_[7] < 0)
    v38 = (__int128 *)v267;
  if (v37)
  {
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = &v260;
    else
      v39 = (std::string *)v260.__r_.__value_.__r.__words[0];
    memmove(v38, v39, v37);
  }
  strcpy((char *)v38 + v37, "_post_quantization_blob_");
  std::to_string(&v263, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &v263;
  else
    v40 = (std::string *)v263.__r_.__value_.__r.__words[0];
  if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = HIBYTE(v263.__r_.__value_.__r.__words[2]);
  else
    v41 = v263.__r_.__value_.__l.__size_;
  v42 = std::string::append((std::string *)&v267, (const std::string::value_type *)v40, v41);
  v43 = v42->__r_.__value_.__l.__size_;
  __s = (std::string::value_type *)v42->__r_.__value_.__r.__words[0];
  v241[0] = v42->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v241 + 3) = *(_DWORD *)((char *)&v42->__r_.__value_.__r.__words[2] + 3);
  v44 = SHIBYTE(v42->__r_.__value_.__r.__words[2]);
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  if (v268.__r_.__value_.__s.__data_[7] < 0)
    operator delete((void *)v267);
  if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
  else
    v45 = v260.__r_.__value_.__l.__size_;
  v46 = &v267;
  std::string::basic_string[abi:ne180100]((uint64_t)&v267, v45 + 31);
  if (v268.__r_.__value_.__s.__data_[7] < 0)
    v46 = (__int128 *)v267;
  if (v45)
  {
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = &v260;
    else
      v47 = (std::string *)v260.__r_.__value_.__r.__words[0];
    memmove(v46, v47, v45);
  }
  strcpy((char *)v46 + v45, "_activation_quantization_scale_");
  std::to_string(&v263, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = &v263;
  else
    v48 = (std::string *)v263.__r_.__value_.__r.__words[0];
  if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = HIBYTE(v263.__r_.__value_.__r.__words[2]);
  else
    v49 = v263.__r_.__value_.__l.__size_;
  v50 = std::string::append((std::string *)&v267, (const std::string::value_type *)v48, v49);
  v206 = (std::string::value_type *)v50->__r_.__value_.__r.__words[0];
  __sz = v50->__r_.__value_.__l.__size_;
  v240[0] = v50->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v240 + 3) = *(_DWORD *)((char *)&v50->__r_.__value_.__r.__words[2] + 3);
  v210 = SHIBYTE(v50->__r_.__value_.__r.__words[2]);
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  if (v268.__r_.__value_.__s.__data_[7] < 0)
    operator delete((void *)v267);
  if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
  else
    v51 = v260.__r_.__value_.__l.__size_;
  v52 = &v267;
  std::string::basic_string[abi:ne180100]((uint64_t)&v267, v51 + 20);
  if (v268.__r_.__value_.__s.__data_[7] < 0)
    v52 = (__int128 *)v267;
  if (v51)
  {
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &v260;
    else
      v53 = (std::string *)v260.__r_.__value_.__r.__words[0];
    memmove(v52, v53, v51);
  }
  strcpy((char *)v52 + v51, "_dynamic_dequantize_");
  std::to_string(&v263, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = &v263;
  else
    v54 = (std::string *)v263.__r_.__value_.__r.__words[0];
  if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = HIBYTE(v263.__r_.__value_.__r.__words[2]);
  else
    v55 = v263.__r_.__value_.__l.__size_;
  v56 = std::string::append((std::string *)&v267, (const std::string::value_type *)v54, v55);
  v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v239 = v56->__r_.__value_.__r.__words[2];
  v238 = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  if (v268.__r_.__value_.__s.__data_[7] < 0)
    operator delete((void *)v267);
  if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v58 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
  else
    v58 = v260.__r_.__value_.__l.__size_;
  v59 = &v267;
  std::string::basic_string[abi:ne180100]((uint64_t)&v267, v58 + 25);
  if (v268.__r_.__value_.__s.__data_[7] < 0)
    v59 = (__int128 *)v267;
  if (v58)
  {
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = &v260;
    else
      v60 = (std::string *)v260.__r_.__value_.__r.__words[0];
    memmove(v59, v60, v58);
  }
  strcpy((char *)v59 + v58, "_pre_dequantization_blob_");
  std::to_string(&v263, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  v208 = v28;
  if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v61 = &v263;
  else
    v61 = (std::string *)v263.__r_.__value_.__r.__words[0];
  if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v62 = HIBYTE(v263.__r_.__value_.__r.__words[2]);
  else
    v62 = v263.__r_.__value_.__l.__size_;
  v63 = std::string::append((std::string *)&v267, (const std::string::value_type *)v61, v62);
  v64 = v63->__r_.__value_.__l.__size_;
  v205 = (std::string::value_type *)v63->__r_.__value_.__r.__words[0];
  v237[0] = v63->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v237 + 3) = *(_DWORD *)((char *)&v63->__r_.__value_.__r.__words[2] + 3);
  v209 = SHIBYTE(v63->__r_.__value_.__r.__words[2]);
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  if (v268.__r_.__value_.__s.__data_[7] < 0)
    operator delete((void *)v267);
  v65 = HIBYTE(v247);
  if (HIBYTE(v247))
  {
    v219.__r_.__value_.__r.__words[0] = 0x1FFFFFFFFLL;
    v66 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v263, "dynamic_quantize");
    memset(&v234, 0, sizeof(v234));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v234, v254, v255, 0xAAAAAAAAAAAAAAABLL * (((char *)v255 - (char *)v254) >> 3));
    if (v44 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v267, __s, v43);
    }
    else
    {
      *(_QWORD *)&v267 = __s;
      *((_QWORD *)&v267 + 1) = v43;
      LODWORD(v268.__r_.__value_.__l.__data_) = v241[0];
      *(_DWORD *)((char *)v268.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)v241 + 3);
      v268.__r_.__value_.__s.__data_[7] = v44;
    }
    if (v210 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v268.__r_.__value_.__r.__words[1], v206, __sz);
    }
    else
    {
      v268.__r_.__value_.__l.__size_ = (std::string::size_type)v206;
      v268.__r_.__value_.__r.__words[2] = __sz;
      *(_DWORD *)v269 = v240[0];
      *(_DWORD *)&v269[3] = *(_DWORD *)((char *)v240 + 3);
      v269[7] = v210;
    }
    v231 = 0;
    v232 = 0;
    v233 = 0;
    *(_QWORD *)v265 = &v231;
    v265[8] = 0;
    v231 = (std::string *)operator new(0x30uLL);
    v232 = v231;
    v233 = (__int128 *)&v231[2];
    v232 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v233, &v267, (__int128 *)&v269[8], v231);
    Espresso::sequential_builder::add<Espresso::dynamic_quantize_params_t>(&v235, v66, (uint64_t)&v263, (uint64_t)&v242, (uint64_t)&v219, (__int128 *)v234.__r_.__value_.__l.__data_, (__int128 *)v234.__r_.__value_.__l.__size_, (__int128 **)&v231);
    v67 = v236;
    if (v236)
    {
      p_shared_owners = (unint64_t *)&v236->__shared_owners_;
      do
        v69 = __ldaxr(p_shared_owners);
      while (__stlxr(v69 - 1, p_shared_owners));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    *(_QWORD *)v265 = &v231;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v265);
    for (i = 0; i != -6; i -= 3)
    {
      if ((char)v269[i * 8 + 7] < 0)
        operator delete((void *)v268.__r_.__value_.__r.__words[i + 1]);
    }
    *(_QWORD *)&v267 = &v234;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v267);
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v263.__r_.__value_.__l.__data_);
    v65 = HIBYTE(v247);
  }
  v269[0] = 0;
  v270 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  v271 = _D0;
  v276 = 0;
  LODWORD(v268.__r_.__value_.__l.__data_) = 0;
  *(_OWORD *)((char *)v268.__r_.__value_.__r.__words + 4) = _D0;
  v272 = 0;
  *(_QWORD *)&v269[4] = 0;
  v273 = 0;
  v275 = 0;
  v274 = 0;
  *(_QWORD *)&v267 = __PAIR64__(v29, v28);
  HIDWORD(v268.__r_.__value_.__r.__words[2]) = 0;
  *((_QWORD *)&v267 + 1) = BYTE2(v247);
  if (v65)
    HIDWORD(v268.__r_.__value_.__r.__words[2]) = 5;
  v75 = *((_DWORD *)a2 + 18) != 1 || *(int *)(a2[10][1] + 36) >= 4;
  v269[0] = v75;
  v230 = 0uLL;
  v229 = 0uLL;
  v203 = v29;
  if (v65)
  {
    v76 = *(_QWORD **)this;
    if (v44 < 0)
    {
      std::string::__init_copy_ctor_external(&v263, __s, v43);
    }
    else
    {
      v263.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
      v263.__r_.__value_.__l.__size_ = v43;
      LODWORD(v263.__r_.__value_.__r.__words[2]) = v241[0];
      *(_DWORD *)((char *)&v263.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v241 + 3);
      *((_BYTE *)&v263.__r_.__value_.__s + 23) = v44;
    }
    v226 = 0;
    v227 = 0;
    v228 = 0;
    *(_QWORD *)v265 = &v226;
    v265[8] = 0;
    v226 = (__int128 *)operator new(0x18uLL);
    v227 = v226;
    v228 = (char *)v226 + 24;
    v227 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v228, (__int128 *)&v263, (__int128 *)&v264, (std::string *)v226);
    if (v209 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v265, v205, v64);
    }
    else
    {
      *(_QWORD *)v265 = v205;
      *(_QWORD *)&v265[8] = v64;
      *(_DWORD *)&v265[16] = v237[0];
      *(_DWORD *)&v265[19] = *(_DWORD *)((char *)v237 + 3);
      v265[23] = v209;
    }
    v223 = 0;
    v224 = 0;
    v225 = 0;
    v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v223;
    v219.__r_.__value_.__s.__data_[8] = 0;
    v223 = (std::string *)operator new(0x18uLL);
    v224 = v223;
    v225 = v223 + 1;
    v224 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v225, (__int128 *)v265, (__int128 *)&v265[24], v223);
    Espresso::sequential_builder::add<Espresso::inner_product_uniforms>((uint64_t *)&v261, v76, (uint64_t)__p, (uint64_t)&v260, (uint64_t)&v267, v226, v227, (__int128 **)&v223);
    v79 = (void **)v261;
    v78 = v262;
    v262 = 0;
    v261 = 0;
    *(_QWORD *)&v230 = v79;
    *((_QWORD *)&v230 + 1) = v78;
    v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v223;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
    if ((v265[23] & 0x80000000) != 0)
      operator delete(*(void **)v265);
    *(_QWORD *)v265 = &v226;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v265);
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v263.__r_.__value_.__l.__data_);
  }
  else
  {
    v77 = *(_QWORD **)this;
    memset(&v222, 0, sizeof(v222));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v222, v254, v255, 0xAAAAAAAAAAAAAAABLL * (((char *)v255 - (char *)v254) >> 3));
    memset(&v221, 0, sizeof(v221));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v221, v257, v258, 0xAAAAAAAAAAAAAAABLL * (((char *)v258 - (char *)v257) >> 3));
    Espresso::sequential_builder::add<Espresso::inner_product_uniforms>((uint64_t *)&v263, v77, (uint64_t)__p, (uint64_t)&v260, (uint64_t)&v267, (__int128 *)v222.__r_.__value_.__l.__data_, (__int128 *)v222.__r_.__value_.__l.__size_, (__int128 **)&v221);
    v78 = v263.__r_.__value_.__l.__size_;
    v79 = (void **)v263.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v263.__r_.__value_.__l.__data_ = 0uLL;
    v230 = __PAIR128__(v78, (unint64_t)v79);
    *(_QWORD *)v265 = &v221;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v265);
    *(_QWORD *)v265 = &v222;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v265);
  }
  v80 = (uint64_t *)v244.__r_.__value_.__r.__words[2];
  if (!v244.__r_.__value_.__r.__words[2])
    v80 = &CoreML::Specification::_WeightParams_default_instance_;
  v81 = v80[5];
  v82 = *(unsigned __int8 *)(v81 + 23);
  if (*(char *)(v81 + 23) < 0)
    v83 = *(_QWORD *)(v81 + 8);
  else
    v83 = *(unsigned __int8 *)(v81 + 23);
  v84 = v80[6];
  v85 = *(unsigned __int8 *)(v84 + 23);
  if (*(char *)(v84 + 23) < 0)
    v86 = *(_QWORD *)(v84 + 8);
  else
    v86 = *(unsigned __int8 *)(v84 + 23);
  v87 = *((_DWORD *)v80 + 4);
  v88 = v80[7];
  v89 = *(unsigned __int8 *)(v88 + 23);
  if (*(char *)(v88 + 23) < 0)
    v90 = *(unint64_t **)(v88 + 8);
  else
    v90 = (unint64_t *)*(unsigned __int8 *)(v88 + 23);
  if (v87 <= 0)
    v91 = 1;
  else
    v91 = 2;
  if (v83)
    v92 = v91;
  else
    v92 = v87 > 0;
  if (v86)
    ++v92;
  if (v90)
    ++v92;
  if (v92 <= 1)
  {
    if (v92)
      v93 = 0;
    else
      v93 = 5;
    if (v87 <= 0 && v92)
    {
      if ((v82 & 0x80) != 0)
        v82 = *(_QWORD *)(v81 + 8);
      if (v82)
      {
        v93 = 1;
      }
      else
      {
        if ((v85 & 0x80) != 0)
          v85 = *(_QWORD *)(v84 + 8);
        v94 = v80[8];
        if (v80 != &CoreML::Specification::_WeightParams_default_instance_ && v85 && v94)
        {
          v93 = 2;
        }
        else
        {
          if ((v89 & 0x80) != 0)
            v89 = *(_QWORD *)(v88 + 8);
          if (v94)
            _ZF = v89 == 0;
          else
            _ZF = 1;
          if (_ZF || v80 == &CoreML::Specification::_WeightParams_default_instance_)
            v93 = 5;
          else
            v93 = 3;
        }
      }
    }
  }
  else
  {
    v93 = 4;
  }
  if (HIBYTE(v247))
  {
    *(_QWORD *)&v265[12] = 1065353216;
    *(_QWORD *)v265 = 0xFFFFFFFFLL;
    v266 = 1.0;
    *(_DWORD *)&v265[8] = 0;
    *(_QWORD *)&v265[20] = 0x100000000;
    if (v93 != 3)
    {
      v193 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      batchedMatMulIncorrectWeightType(&v263, v93, (uint64_t)&v260);
      std::runtime_error::runtime_error(v193, &v263);
      __cxa_throw(v193, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (*((_DWORD *)a2 + 35) == 1045)
    {
      v97 = a2[16];
    }
    else
    {
      v90 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v90);
      v97 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
    }
    v98 = (uint64_t *)v97[2];
    if (!v98)
      v98 = &CoreML::Specification::_WeightParams_default_instance_;
    v99 = (uint64_t *)v98[8];
    if (!v99)
      v99 = &CoreML::Specification::_QuantizationParams_default_instance_;
    if (*((_DWORD *)v99 + 9) == 101)
    {
      v100 = (uint64_t *)v99[3];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v90);
      v100 = &CoreML::Specification::_LinearQuantizationParams_default_instance_;
    }
    v266 = 1.0 / *(float *)(v100[3] + 8);
    v101 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v219, "dynamic_dequantize");
    if (v209 < 0)
    {
      std::string::__init_copy_ctor_external(&v263, v205, v64);
    }
    else
    {
      v263.__r_.__value_.__r.__words[0] = (std::string::size_type)v205;
      v263.__r_.__value_.__l.__size_ = v64;
      LODWORD(v263.__r_.__value_.__r.__words[2]) = v237[0];
      *(_DWORD *)((char *)&v263.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v237 + 3);
      *((_BYTE *)&v263.__r_.__value_.__s + 23) = v209;
    }
    if (v210 < 0)
    {
      std::string::__init_copy_ctor_external(&v264, v206, __sz);
    }
    else
    {
      v264.__r_.__value_.__r.__words[0] = (std::string::size_type)v206;
      v264.__r_.__value_.__l.__size_ = __sz;
      LODWORD(v264.__r_.__value_.__r.__words[2]) = v240[0];
      *(_DWORD *)((char *)&v264.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v240 + 3);
      *((_BYTE *)&v264.__r_.__value_.__s + 23) = v210;
    }
    v216 = 0;
    v217 = 0;
    v218 = 0;
    v261 = &v216;
    LOBYTE(v262) = 0;
    v216 = (__int128 *)operator new(0x30uLL);
    v217 = v216;
    v218 = v216 + 3;
    v217 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v218, (__int128 *)&v263, (__int128 *)v265, (std::string *)v216);
    memset(&v215, 0, sizeof(v215));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v215, v257, v258, 0xAAAAAAAAAAAAAAABLL * (((char *)v258 - (char *)v257) >> 3));
    Espresso::sequential_builder::add<Espresso::dynamic_dequantize_params_t>((uint64_t *)&v220, v101, (uint64_t)&v219, (uint64_t)&v238, (uint64_t)v265, v216, v217, (__int128 **)&v215);
    v102 = v220;
    v220 = 0uLL;
    v229 = v102;
    v261 = (__int128 **)&v215;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v261);
    v261 = &v216;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v261);
    for (j = 0; j != -6; j -= 3)
    {
      if (SHIBYTE(v264.__r_.__value_.__r.__words[j + 2]) < 0)
        operator delete(*(void **)((char *)&v263 + j * 8 + 24));
    }
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
  }
  v261 = (__int128 **)v79;
  v262 = v78;
  if (v78)
  {
    v104 = (unint64_t *)(v78 + 8);
    do
      v105 = __ldxr(v104);
    while (__stxr(v105 + 1, v104));
  }
  if (HIBYTE(v247))
  {
    v106 = (uint64_t *)v244.__r_.__value_.__r.__words[2];
    std::string::basic_string[abi:ne180100]<0>(v265, "BatchedMatMul");
    if (v106)
      v107 = v106;
    else
      v107 = &CoreML::Specification::_WeightParams_default_instance_;
    CoreML::validateInt8Requirements((CoreML::Result *)&v263, (uint64_t)v107, (uint64_t)v265);
    v108 = (uint64_t)v263.__r_.__value_.__l.__data_ & 0xFFFFFFEF;
    if (v264.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v263.__r_.__value_.__l.__size_);
    if ((v265[23] & 0x80000000) != 0)
      operator delete(*(void **)v265);
    if (v108)
    {
      v194 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v195 = std::string::append((std::string *)v265, " does not satisfy int8 quantization requirements.");
      v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
      v263.__r_.__value_.__r.__words[2] = v195->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v263.__r_.__value_.__l.__data_ = v196;
      v195->__r_.__value_.__l.__size_ = 0;
      v195->__r_.__value_.__r.__words[2] = 0;
      v195->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v194, &v263);
      __cxa_throw(v194, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (v244.__r_.__value_.__r.__words[2])
      v109 = (uint64_t *)v244.__r_.__value_.__r.__words[2];
    else
      v109 = &CoreML::Specification::_WeightParams_default_instance_;
    WeightParamSizeInBytes = (int)EspressoConverter::getWeightParamSizeInBytes(v109);
    CoreML::copySpecArrayStringToVector(&v263, (char *)v109[7], WeightParamSizeInBytes);
    std::string::basic_string[abi:ne180100]<0>(v265, "W_int8");
    *(_OWORD *)&v219.__r_.__value_.__l.__data_ = 0uLL;
    (*((void (**)(void **, std::string *, _BYTE *, std::string::size_type, size_t, _QWORD))*v79 + 21))(v79, &v219, v265, v263.__r_.__value_.__r.__words[0], WeightParamSizeInBytes, 0);
    v111 = (std::__shared_weak_count *)v219.__r_.__value_.__l.__size_;
    if (!v219.__r_.__value_.__l.__size_)
      goto LABEL_301;
    v112 = (unint64_t *)(v219.__r_.__value_.__l.__size_ + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
LABEL_299:
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
LABEL_301:
    if ((v265[23] & 0x80000000) != 0)
      operator delete(*(void **)v265);
    if (v263.__r_.__value_.__r.__words[0])
    {
      v263.__r_.__value_.__l.__size_ = v263.__r_.__value_.__r.__words[0];
      operator delete(v263.__r_.__value_.__l.__data_);
    }
    goto LABEL_305;
  }
  if (v244.__r_.__value_.__r.__words[2])
    v114 = (uint64_t *)v244.__r_.__value_.__r.__words[2];
  else
    v114 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v93 == 2)
  {
    v115 = (uint64_t *)v114[8];
    if (!v115)
      v115 = &CoreML::Specification::_QuantizationParams_default_instance_;
    v116 = v115[2];
    v117 = (int)EspressoConverter::getWeightParamSizeInBytes(v114);
    if (!CoreML::hasSufficientBytesInQuantizedWeightParam(v114, v28 * v203))
    {
      v199 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      batchedMatMulQuantizedWeightArraySizeErrorString(&v263, v117, v203, v28, v116, (uint64_t)&v260);
      std::runtime_error::runtime_error(v199, &v263);
      __cxa_throw(v199, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    CoreML::copySpecArrayStringToVector(&v263, (char *)v114[6], v117);
    std::to_string(&v219, v116);
    v118 = std::string::insert(&v219, 0, "W_U");
    v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
    *(_QWORD *)&v265[16] = *((_QWORD *)&v118->__r_.__value_.__l + 2);
    *(_OWORD *)v265 = v119;
    v118->__r_.__value_.__l.__size_ = 0;
    v118->__r_.__value_.__r.__words[2] = 0;
    v118->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
    *(_OWORD *)&v219.__r_.__value_.__l.__data_ = 0uLL;
    (*((void (**)(void **, std::string *, _BYTE *, std::string::size_type, unint64_t, _QWORD))*v79 + 21))(v79, &v219, v265, v263.__r_.__value_.__r.__words[0], v117, 0);
    v120 = (std::__shared_weak_count *)v219.__r_.__value_.__l.__size_;
    if (v219.__r_.__value_.__l.__size_)
    {
      v121 = (unint64_t *)(v219.__r_.__value_.__l.__size_ + 8);
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    if (v244.__r_.__value_.__r.__words[2])
      v123 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v244.__r_.__value_.__r.__words[2];
    else
      v123 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)&CoreML::Specification::_WeightParams_default_instance_;
    v111 = (std::__shared_weak_count *)v262;
    v213[0] = (uint64_t)v261;
    v213[1] = v262;
    if (v262)
    {
      v124 = (unint64_t *)(v262 + 8);
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
    }
    v126 = v267;
    std::string::basic_string[abi:ne180100]<0>(&v219, (char *)&unk_19CB39696);
    CoreML::setQuantizationParams(v123, v213, v126, (const void **)&v219.__r_.__value_.__l.__data_);
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
    if (!v111)
      goto LABEL_301;
    v127 = (unint64_t *)&v111->__shared_owners_;
    do
      v113 = __ldaxr(v127);
    while (__stlxr(v113 - 1, v127));
    goto LABEL_299;
  }
  WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)v114);
  if (v28 * v203 != WeightParamSize)
  {
    v200 = WeightParamSize;
    v201 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    batchedMatMulWeightArraySizeErrorString(&v263, v200, v203, v28, (uint64_t)&v260);
    std::runtime_error::runtime_error(v201, &v263);
    __cxa_throw(v201, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  (*((void (**)(std::string *__return_ptr, void **))*v79 + 53))(&v263, v79);
  if (v244.__r_.__value_.__r.__words[2])
    v141 = (uint64_t *)v244.__r_.__value_.__r.__words[2];
  else
    v141 = &CoreML::Specification::_WeightParams_default_instance_;
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v263.__r_.__value_.__r.__words[0] + 16), v141, 4 * (DWORD1(v267) * v267));
  v214 = *(_OWORD *)&v263.__r_.__value_.__l.__data_;
  if (v263.__r_.__value_.__l.__size_)
  {
    v142 = (unint64_t *)(v263.__r_.__value_.__l.__size_ + 8);
    do
      v143 = __ldxr(v142);
    while (__stxr(v143 + 1, v142));
  }
  (*((void (**)(void **, __int128 *))*v79 + 50))(v79, &v214);
  v144 = (std::__shared_weak_count *)*((_QWORD *)&v214 + 1);
  if (*((_QWORD *)&v214 + 1))
  {
    v145 = (unint64_t *)(*((_QWORD *)&v214 + 1) + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = (std::__shared_weak_count *)v263.__r_.__value_.__l.__size_;
  if (v263.__r_.__value_.__l.__size_)
  {
    v148 = (unint64_t *)(v263.__r_.__value_.__l.__size_ + 8);
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
LABEL_305:
  if (!BYTE2(v247))
    goto LABEL_394;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(v265, 4 * v267, 1, 1, 1);
  if (v245)
    v128 = v245;
  else
    v128 = &CoreML::Specification::_WeightParams_default_instance_;
  v129 = v128[5];
  if (*(char *)(v129 + 23) < 0)
    v130 = *(_QWORD *)(v129 + 8);
  else
    v130 = *(unsigned __int8 *)(v129 + 23);
  v131 = v128[6];
  v132 = *(unsigned __int8 *)(v131 + 23);
  if (*(char *)(v131 + 23) < 0)
    v133 = *(_QWORD *)(v131 + 8);
  else
    v133 = *(unsigned __int8 *)(v131 + 23);
  v134 = *((_DWORD *)v128 + 4);
  v135 = v128[7];
  if (*(char *)(v135 + 23) < 0)
    v136 = *(_QWORD *)(v135 + 8);
  else
    v136 = *(unsigned __int8 *)(v135 + 23);
  if (v134 <= 0)
    v137 = 1;
  else
    v137 = 2;
  if (v130)
    v138 = v137;
  else
    v138 = v134 > 0;
  if (v133)
    ++v138;
  if (v136)
    ++v138;
  if (v134 > 0 || v138 != 1)
    goto LABEL_364;
  if ((*(_BYTE *)(v129 + 23) & 0x80) != 0)
  {
    if (!*(_QWORD *)(v129 + 8))
      goto LABEL_354;
LABEL_364:
    v153 = EspressoConverter::getWeightParamSize((uint64_t)v128);
    if (v208 != v153)
    {
      v197 = v153;
      v198 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      batchedMatMulBiasArraySizeErrorString(&v263, v197, v208, (uint64_t)&v260);
      std::runtime_error::runtime_error(v198, &v263);
      __cxa_throw(v198, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v151 = *(_QWORD *)v265;
    EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(*(_QWORD *)v265 + 16), v128, 4 * v267);
    goto LABEL_366;
  }
  if (*(_BYTE *)(v129 + 23))
    goto LABEL_364;
LABEL_354:
  if ((v132 & 0x80) != 0)
    v132 = *(_QWORD *)(v131 + 8);
  if (v128 == &CoreML::Specification::_WeightParams_default_instance_)
    goto LABEL_364;
  if (!v132 || v128[8] == 0)
    goto LABEL_364;
  if (!CoreML::hasSufficientBytesInQuantizedWeightParam(v128, v208))
  {
    v202 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v202, &v263);
    __cxa_throw(v202, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CoreML::dequantizeWeightParamSpec((CoreML *)&v263, (const CoreML::Specification::WeightParams *)v128, v208);
  v151 = *(_QWORD *)v265;
  v152 = (void *)v263.__r_.__value_.__r.__words[0];
  memcpy(*(void **)(*(_QWORD *)v265 + 16), v263.__r_.__value_.__l.__data_, 4 * v208);
  if (v152)
    operator delete(v152);
LABEL_366:
  if (HIBYTE(v247))
  {
    v154 = v229;
    *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v229;
    if (*((_QWORD *)&v229 + 1))
    {
      v155 = (unint64_t *)(*((_QWORD *)&v229 + 1) + 8);
      do
        v156 = __ldxr(v155);
      while (__stxr(v156 + 1, v155));
    }
    std::string::basic_string[abi:ne180100]<0>(&v263, "biases");
    v220 = 0uLL;
    (*(void (**)(uint64_t, __int128 *, std::string *, _QWORD, unint64_t, _QWORD))(*(_QWORD *)v154
                                                                                                 + 168))(v154, &v220, &v263, *(_QWORD *)(v151 + 16), 4 * v208, 0);
    v157 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
    if (*((_QWORD *)&v220 + 1))
    {
      v158 = (unint64_t *)(*((_QWORD *)&v220 + 1) + 8);
      do
        v159 = __ldaxr(v158);
      while (__stlxr(v159 - 1, v158));
      if (!v159)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v263.__r_.__value_.__l.__data_);
    v160 = (std::__shared_weak_count *)v219.__r_.__value_.__l.__size_;
    if (!v219.__r_.__value_.__l.__size_)
      goto LABEL_389;
    v161 = (unint64_t *)(v219.__r_.__value_.__l.__size_ + 8);
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
  }
  else
  {
    v163 = (void **)v261;
    v211 = v151;
    v212 = *(std::__shared_weak_count **)&v265[8];
    if (*(_QWORD *)&v265[8])
    {
      v164 = (unint64_t *)(*(_QWORD *)&v265[8] + 8);
      do
        v165 = __ldxr(v164);
      while (__stxr(v165 + 1, v164));
    }
    (*((void (**)(void **, uint64_t *))*v163 + 49))(v163, &v211);
    v160 = v212;
    if (!v212)
      goto LABEL_389;
    v166 = (unint64_t *)&v212->__shared_owners_;
    do
      v162 = __ldaxr(v166);
    while (__stlxr(v162 - 1, v166));
  }
  if (!v162)
  {
    ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
    std::__shared_weak_count::__release_weak(v160);
  }
LABEL_389:
  v167 = *(std::__shared_weak_count **)&v265[8];
  if (*(_QWORD *)&v265[8])
  {
    v168 = (unint64_t *)(*(_QWORD *)&v265[8] + 8);
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
LABEL_394:
  if (v244.__r_.__value_.__r.__words[2])
    v170 = (uint64_t *)v244.__r_.__value_.__r.__words[2];
  else
    v170 = &CoreML::Specification::_WeightParams_default_instance_;
  v171 = v170[5];
  v172 = *(unsigned __int8 *)(v171 + 23);
  if (*(char *)(v171 + 23) < 0)
    v173 = *(_QWORD *)(v171 + 8);
  else
    v173 = *(unsigned __int8 *)(v171 + 23);
  v174 = v170[6];
  if (*(char *)(v174 + 23) < 0)
    v175 = *(_QWORD *)(v174 + 8);
  else
    v175 = *(unsigned __int8 *)(v174 + 23);
  v176 = *((_DWORD *)v170 + 4);
  v177 = v170[7];
  if (*(char *)(v177 + 23) < 0)
    v178 = *(_QWORD *)(v177 + 8);
  else
    v178 = *(unsigned __int8 *)(v177 + 23);
  if (v176 <= 0)
    v179 = 1;
  else
    v179 = 2;
  if (v173)
    v180 = v179;
  else
    v180 = v176 > 0;
  if (v175)
    ++v180;
  if (v178)
    ++v180;
  if (v176 <= 0 && v180 == 1)
  {
    if ((v172 & 0x80) != 0)
      v172 = *(_QWORD *)(v171 + 8);
    v21 = v172 != 0;
  }
  else
  {
    v21 = 0;
  }
  v182 = (std::__shared_weak_count *)v262;
  if (v262)
  {
    v183 = (unint64_t *)(v262 + 8);
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = (std::__shared_weak_count *)*((_QWORD *)&v229 + 1);
  if (*((_QWORD *)&v229 + 1))
  {
    v186 = (unint64_t *)(*((_QWORD *)&v229 + 1) + 8);
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
  if (*((_QWORD *)&v230 + 1))
  {
    v189 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  if (v209 < 0)
    operator delete(v205);
  if ((SHIBYTE(v239) & 0x80000000) == 0)
  {
    if ((v210 & 0x80000000) == 0)
      goto LABEL_443;
LABEL_452:
    operator delete(v206);
    if ((v44 & 0x80000000) == 0)
      goto LABEL_444;
LABEL_453:
    operator delete(__s);
    goto LABEL_444;
  }
  operator delete((void *)v238);
  if (v210 < 0)
    goto LABEL_452;
LABEL_443:
  if (v44 < 0)
    goto LABEL_453;
LABEL_444:
  if (SHIBYTE(v243) < 0)
    operator delete((void *)v242);
  CoreML::Specification::BatchedMatMulLayerParams::~BatchedMatMulLayerParams((CoreML::Specification::BatchedMatMulLayerParams *)&v244);
  if (v252 < 0)
    operator delete(__p[0]);
LABEL_448:
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v257);
  *(_QWORD *)&v267 = &v254;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v267);
  *(_QWORD *)&v267 = &v257;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v267);
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v260.__r_.__value_.__l.__data_);
  return v21;
}

void sub_19C96E690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, int a15, int a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  void *a72;
  char a73;
  char a74;
  void *v74;
  int v75;

  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
    operator delete((void *)STACK[0x2E0]);
    if ((v75 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x310]);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2D0]);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
      if (a18 < 0)
        operator delete(a12);
      if (a68 < 0)
        operator delete(a63);
      if (a19 < 0)
        operator delete(a13);
      if (a16 < 0)
        operator delete(a14);
      if (a73 < 0)
        operator delete(a72);
      CoreML::Specification::BatchedMatMulLayerParams::~BatchedMatMulLayerParams((CoreML::Specification::BatchedMatMulLayerParams *)&a74);
      if (SLOBYTE(STACK[0x26F]) < 0)
        operator delete((void *)STACK[0x258]);
      STACK[0x258] = (unint64_t)&STACK[0x280];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x258]);
      STACK[0x280] = (unint64_t)&STACK[0x298];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
      if (SLOBYTE(STACK[0x2C7]) < 0)
        operator delete((void *)STACK[0x2B0]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v75)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v74);
  goto LABEL_6;
}

void Espresso::sequential_builder::add<Espresso::dynamic_quantize_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C96EF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void batchedMatMulIncorrectWeightType(std::string *a1, int __val, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string v13;
  std::string v14;
  std::string v15;

  std::to_string(&v13, __val);
  v5 = std::string::insert(&v13, 0, "Incorrect weight type ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v14, " in layer ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = *(char *)(a3 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a3;
  else
    v10 = *(const std::string::value_type **)a3;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 23);
  else
    v11 = *(_QWORD *)(a3 + 8);
  v12 = std::string::append(&v15, v10, v11);
  *a1 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_19C96F0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void Espresso::sequential_builder::add<Espresso::dynamic_dequantize_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C96F324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void CoreML::validateInt8Requirements(CoreML::Result *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  int v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  int v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  int v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  std::string v63;
  std::string v64;
  std::string v65;
  __int128 v66;
  std::string::size_type v67;

  v5 = *(_QWORD *)(a2 + 40);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0)
    v9 = *(_QWORD *)(v7 + 8);
  else
    v9 = *(unsigned __int8 *)(v7 + 23);
  v10 = *(_DWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
    v13 = *(_QWORD *)(v11 + 8);
  else
    v13 = *(unsigned __int8 *)(v11 + 23);
  if (v10 <= 0)
    v14 = 1;
  else
    v14 = 2;
  if (v6)
    v15 = v14;
  else
    v15 = v10 > 0;
  if (v9)
    ++v15;
  if (v13)
    ++v15;
  if (v10 > 0 || v15 != 1)
    goto LABEL_47;
  if ((*(_BYTE *)(v5 + 23) & 0x80) != 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_26;
LABEL_47:
    std::operator+<char>();
    v27 = std::string::append(&v63, "' of type '");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = *(char *)(a3 + 23);
    if (v29 >= 0)
      v30 = (const std::string::value_type *)a3;
    else
      v30 = *(const std::string::value_type **)a3;
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(a3 + 23);
    else
      v31 = *(_QWORD *)(a3 + 8);
    v32 = std::string::append(&v64, v30, v31);
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v65, " :                            when flag 'int8DynamicQuantize' is set to true, weights must be stored in the int8 format.");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v67 = v34->__r_.__value_.__r.__words[2];
    v66 = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)this = 13;
    std::operator+<char>();
    goto LABEL_54;
  }
  if (*(_BYTE *)(v5 + 23))
    goto LABEL_47;
LABEL_26:
  if ((v8 & 0x80) != 0)
    v8 = *(_QWORD *)(v7 + 8);
  v16 = *(_QWORD *)(a2 + 64);
  if ((uint64_t *)a2 != &CoreML::Specification::_WeightParams_default_instance_ && v8 && v16)
    goto LABEL_47;
  if ((v12 & 0x80) != 0)
    v12 = *(_QWORD *)(v11 + 8);
  if ((uint64_t *)a2 == &CoreML::Specification::_WeightParams_default_instance_ || !v12 || !v16)
    goto LABEL_47;
  if (*(_QWORD *)(v16 + 16) == 8)
  {
    if (*(_DWORD *)(v16 + 36) == 101)
    {
      v17 = *(_QWORD *)(v16 + 24);
      if (*(_DWORD *)(v17 + 16) == 1)
      {
        if (!*(_DWORD *)(v17 + 40))
        {
          CoreML::Result::Result(this);
          return;
        }
        std::operator+<char>();
        v18 = std::string::append(&v63, "' of type '");
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        v20 = *(char *)(a3 + 23);
        if (v20 >= 0)
          v21 = (const std::string::value_type *)a3;
        else
          v21 = *(const std::string::value_type **)a3;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(a3 + 23);
        else
          v22 = *(_QWORD *)(a3 + 8);
        v23 = std::string::append(&v64, v21, v22);
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v65.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v65, " :                           Linear quantization bias must be empty when flag 'int8DynamicQuantize' is set to true.");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v67 = v25->__r_.__value_.__r.__words[2];
        v66 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)this = 13;
        std::operator+<char>();
      }
      else
      {
        std::operator+<char>();
        v54 = std::string::append(&v63, "' of type '");
        v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        v56 = *(char *)(a3 + 23);
        if (v56 >= 0)
          v57 = (const std::string::value_type *)a3;
        else
          v57 = *(const std::string::value_type **)a3;
        if (v56 >= 0)
          v58 = *(unsigned __int8 *)(a3 + 23);
        else
          v58 = *(_QWORD *)(a3 + 8);
        v59 = std::string::append(&v64, v57, v58);
        v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
        v65.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v60;
        v59->__r_.__value_.__l.__size_ = 0;
        v59->__r_.__value_.__r.__words[2] = 0;
        v59->__r_.__value_.__r.__words[0] = 0;
        v61 = std::string::append(&v65, " :                           Linear quantization scale must be size 1 when flag 'int8DynamicQuantize' is set to true.");
        v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v67 = v61->__r_.__value_.__r.__words[2];
        v66 = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)this = 13;
        std::operator+<char>();
      }
    }
    else
    {
      std::operator+<char>();
      v45 = std::string::append(&v63, "' of type '");
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      v47 = *(char *)(a3 + 23);
      if (v47 >= 0)
        v48 = (const std::string::value_type *)a3;
      else
        v48 = *(const std::string::value_type **)a3;
      if (v47 >= 0)
        v49 = *(unsigned __int8 *)(a3 + 23);
      else
        v49 = *(_QWORD *)(a3 + 8);
      v50 = std::string::append(&v64, v48, v49);
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      v52 = std::string::append(&v65, " :                           Linear quantization must be used when flag 'int8DynamicQuantize' is set to true.");
      v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v67 = v52->__r_.__value_.__r.__words[2];
      v66 = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)this = 13;
      std::operator+<char>();
    }
  }
  else
  {
    std::operator+<char>();
    v36 = std::string::append(&v63, "' of type '");
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = *(char *)(a3 + 23);
    if (v38 >= 0)
      v39 = (const std::string::value_type *)a3;
    else
      v39 = *(const std::string::value_type **)a3;
    if (v38 >= 0)
      v40 = *(unsigned __int8 *)(a3 + 23);
    else
      v40 = *(_QWORD *)(a3 + 8);
    v41 = std::string::append(&v64, v39, v40);
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    v43 = std::string::append(&v65, " :                           Number of bits must equal 8 when flag 'int8DynamicQuantize' is set to true.");
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v67 = v43->__r_.__value_.__r.__words[2];
    v66 = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)this = 13;
    std::operator+<char>();
  }
LABEL_54:
  if (SHIBYTE(v67) < 0)
    operator delete((void *)v66);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
}

void sub_19C96F8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void batchedMatMulWeightArraySizeErrorString(std::string *a1, unint64_t __val, unint64_t a3, unint64_t a4, uint64_t a5)
{
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;

  std::to_string(&v31, __val);
  v9 = std::string::insert(&v31, 0, "Size of weights = ");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v32, " is not equal to size of the product of the first and second dimensions provided as layer parameters = ");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v30, a3);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v30;
  else
    v13 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  else
    size = v30.__r_.__value_.__l.__size_;
  v15 = std::string::append(&v33, (const std::string::value_type *)v13, size);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v34, ",");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v29, a4);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v29;
  else
    v19 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  else
    v20 = v29.__r_.__value_.__l.__size_;
  v21 = std::string::append(&v35, (const std::string::value_type *)v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v36, " in Batched-MatMul layer ");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = *(char *)(a5 + 23);
  if (v25 >= 0)
    v26 = (const std::string::value_type *)a5;
  else
    v26 = *(const std::string::value_type **)a5;
  if (v25 >= 0)
    v27 = *(unsigned __int8 *)(a5 + 23);
  else
    v27 = *(_QWORD *)(a5 + 8);
  v28 = std::string::append(&v37, v26, v27);
  *a1 = *v28;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_19C96FBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (*(char *)(v47 - 57) < 0)
    operator delete(*(void **)(v47 - 80));
  if (*(char *)(v47 - 89) < 0)
    operator delete(*(void **)(v47 - 112));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v47 - 121) < 0)
    operator delete(*(void **)(v47 - 144));
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void batchedMatMulQuantizedWeightArraySizeErrorString(std::string *a1, unint64_t __val, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *p_p;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  int v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string __p;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;

  std::to_string(&v40, __val);
  v11 = std::string::insert(&v40, 0, "Size of quantized weights (in bytes) = ");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v41, " is smaller than the total bytes required for the product of the first and second dimensions provided as layer parameters = ");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v39, a3);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v39;
  else
    v15 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    size = v39.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v42, (const std::string::value_type *)v15, size);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v43, ",");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v38, a4);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &v38;
  else
    v21 = (std::string *)v38.__r_.__value_.__r.__words[0];
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  else
    v22 = v38.__r_.__value_.__l.__size_;
  v23 = std::string::append(&v44, (const std::string::value_type *)v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v45, "for ");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v28 = __p.__r_.__value_.__l.__size_;
  v29 = std::string::append(&v46, (const std::string::value_type *)p_p, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v47, "-bit quantization in Batched-MatMul layer ");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = *(char *)(a6 + 23);
  if (v33 >= 0)
    v34 = (const std::string::value_type *)a6;
  else
    v34 = *(const std::string::value_type **)a6;
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a6 + 23);
  else
    v35 = *(_QWORD *)(a6 + 8);
  v36 = std::string::append(&v48, v34, v35);
  *a1 = *v36;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
}

void sub_19C96FFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (*(char *)(v59 - 73) < 0)
    operator delete(*(void **)(v59 - 96));
  if (*(char *)(v59 - 105) < 0)
    operator delete(*(void **)(v59 - 128));
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v59 - 137) < 0)
    operator delete(*(void **)(v59 - 160));
  if (*(char *)(v59 - 169) < 0)
    operator delete(*(void **)(v59 - 192));
  if (a20 < 0)
    operator delete(a15);
  if (a59 < 0)
    operator delete(a54);
  if (a52 < 0)
    operator delete(a47);
  if (a26 < 0)
    operator delete(a21);
  if (a45 < 0)
    operator delete(a40);
  if (a38 < 0)
    operator delete(a33);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void sub_19C9700B8()
{
  JUMPOUT(0x19C970080);
}

void sub_19C9700C0()
{
  JUMPOUT(0x19C970090);
}

void sub_19C9700C8()
{
  JUMPOUT(0x19C9700A0);
}

void batchedMatMulBiasArraySizeErrorString(std::string *a1, unint64_t __val, unint64_t a3, uint64_t a4)
{
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *p_p;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string __p;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;

  std::to_string(&v22, __val);
  v7 = std::string::insert(&v22, 0, "Size of bias = ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v23, " is not equal to the second dimension of the matrix = ");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v13 = std::string::append(&v24, (const std::string::value_type *)p_p, size);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v25, " in Batched-MatMul layer ");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = *(char *)(a4 + 23);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)a4;
  else
    v18 = *(const std::string::value_type **)a4;
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a4 + 23);
  else
    v19 = *(_QWORD *)(a4 + 8);
  v20 = std::string::append(&v26, v18, v19);
  *a1 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_19C97026C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (*(char *)(v33 - 73) < 0)
    operator delete(*(void **)(v33 - 96));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void LayerTranslator::addRankPreservingReshape(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  unint64_t *inited;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::runtime_error *exception;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  std::string v27;
  std::string v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::string v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  std::string __p;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 *v39;
  __int128 *v40;
  uint64_t v41;
  std::string v42;
  void **v43[2];

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v42, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v42.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v5;
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v39, (uint64_t *)&v36, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1150)
  {
    v7 = a2[16];
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    v7 = &CoreML::Specification::_RankPreservingReshapeLayerParams_default_instance_;
  }
  v8 = *((_DWORD *)v7 + 4);
  if (v8 >= 6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v23 = std::string::append(&__p, "': input/output rank greater than 5 not supported currently");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v31);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v32 = 0;
  v33 = 257;
  v34 = 1;
  memset(&v31, 0, 20);
  HIDWORD(v31.__r_.__value_.__r.__words[2]) = v8;
  v9 = (v8 - 1);
  if (v8 >= 1)
  {
    v10 = 0;
    v11 = (v8 - 4);
    v12 = (v8 - 5);
    v25 = (v8 - 3);
    v26 = (v8 - 2);
    do
    {
      if (!v10)
      {
        if (*((_DWORD *)a2 + 35) == 1150)
        {
          v13 = a2[16];
        }
        else
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v13 = &CoreML::Specification::_RankPreservingReshapeLayerParams_default_instance_;
        }
        LODWORD(v31.__r_.__value_.__l.__data_) = *(_QWORD *)(v13[3] + 8 * v9 + 8);
      }
      if (!(v9 - v26 + v10))
      {
        if (*((_DWORD *)a2 + 35) == 1150)
        {
          v14 = a2[16];
        }
        else
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v14 = &CoreML::Specification::_RankPreservingReshapeLayerParams_default_instance_;
        }
        HIDWORD(v31.__r_.__value_.__r.__words[0]) = *(_QWORD *)(v14[3] + 8 * v26 + 8);
      }
      if (!(v9 - v25 + v10))
      {
        if (*((_DWORD *)a2 + 35) == 1150)
        {
          v15 = a2[16];
        }
        else
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v15 = &CoreML::Specification::_RankPreservingReshapeLayerParams_default_instance_;
        }
        LODWORD(v31.__r_.__value_.__r.__words[1]) = *(_QWORD *)(v15[3] + 8 * v25 + 8);
      }
      if (!(v9 - v11 + v10))
      {
        if (*((_DWORD *)a2 + 35) == 1150)
        {
          v16 = a2[16];
        }
        else
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v16 = &CoreML::Specification::_RankPreservingReshapeLayerParams_default_instance_;
        }
        HIDWORD(v31.__r_.__value_.__r.__words[1]) = *(_QWORD *)(v16[3] + 8 * v11 + 8);
      }
      if (!(v9 - v12 + v10))
      {
        if (*((_DWORD *)a2 + 35) == 1150)
        {
          v17 = a2[16];
        }
        else
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v17 = &CoreML::Specification::_RankPreservingReshapeLayerParams_default_instance_;
        }
        LODWORD(v31.__r_.__value_.__r.__words[2]) = *(_QWORD *)(v17[3] + 8 * v12 + 8);
      }
      --v10;
    }
    while (v9 + v10 + 1 > 0);
  }
  v18 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "reshape");
  memset(&v28, 0, sizeof(v28));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v28, v36, v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3));
  memset(&v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v27, v39, v40, 0xAAAAAAAAAAAAAAABLL * (((char *)v40 - (char *)v39) >> 3));
  Espresso::sequential_builder::add<Espresso::reshape_params>(&v29, v18, (uint64_t)&__p, (uint64_t)&v42, (uint64_t)&v31, (__int128 *)v28.__r_.__value_.__l.__data_, (__int128 *)v28.__r_.__value_.__l.__size_, (__int128 **)&v27);
  v19 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v43[0] = (void **)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v43);
  v43[0] = (void **)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v43);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v39);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
}

void sub_19C9706E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  void *v35;
  int v36;
  uint64_t v37;

  if (a26 < 0)
    operator delete(__p);
  if (a34 < 0)
  {
    operator delete(a29);
    if ((v36 & 1) == 0)
    {
LABEL_8:
      __p = &a35;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p = (char *)(v37 - 152);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (*(char *)(v37 - 105) < 0)
        operator delete(*(void **)(v37 - 128));
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

void LayerTranslator::addReduceL1(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  std::string *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t **v10;
  char *v11;
  const void *v12;
  uint64_t v13;
  _BOOL4 v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int *v38;
  int v39;
  int v40;
  BOOL v42;
  _BOOL4 v43;
  _BOOL4 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  unint64_t i;
  std::string::size_type v49;
  size_t v50;
  std::string *v51;
  const void *v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type v56;
  char v57;
  std::string::size_type v58;
  std::string *v59;
  std::string *v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  std::string::size_type v64;
  char v65;
  std::string::size_type v66;
  size_t v67;
  std::string *v68;
  const void *v69;
  std::string::size_type v70;
  std::string *v71;
  std::string *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::string::size_type size;
  std::string *v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  std::string *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  char *v92;
  int v93;
  int v94;
  _QWORD *v95;
  __int128 v96;
  void *__p[3];
  void (**v98)(CoreML::Specification::ReduceL1LayerParams *__hidden);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int16 v102;
  int v103;
  std::string __str;
  std::string v105;
  std::string v106;
  __int128 *v107;
  __int128 *v108;
  uint64_t v109;
  __int128 *v110;
  __int128 *v111;
  uint64_t v112;
  std::string v113;
  std::string v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _BYTE v124[25];
  int v125;
  __int128 *v126;
  __int128 *v127;
  char *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  std::string *v135;
  std::string v136;
  uint64_t v137;
  std::string v138;
  uint64_t v139;
  std::string v140;
  __int128 v141;

  *(_QWORD *)&v141 = *MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v113, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v113.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v5;
  }
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v110, (uint64_t *)&v107, *((_QWORD *)this + 1));
  v95 = *(_QWORD **)this;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v106, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  else
    v106 = v113;
  memset(&v105, 0, sizeof(v105));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, v107, v108, 0xAAAAAAAAAAAAAAABLL * (((char *)v108 - (char *)v107) >> 3));
  memset(&__str, 0, sizeof(__str));
  v6 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v110, v111, 0xAAAAAAAAAAAAAAABLL * (((char *)v111 - (char *)v110) >> 3));
  if (*((_DWORD *)a2 + 35) == 1250)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v6);
    v7 = &CoreML::Specification::_ReduceL1LayerParams_default_instance_;
  }
  v100 = 0;
  v101 = 0;
  v98 = &off_1E3D52258;
  v99 = 0;
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v100, v8);
    memcpy((void *)(v101 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v100) = *((_DWORD *)v7 + 4);
  }
  v103 = 0;
  v9 = v7[1];
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v99, v9 & 0xFFFFFFFFFFFFFFFELL);
  v102 = *((_WORD *)v7 + 18);
  v10 = (uint64_t **)*((_QWORD *)this + 1);
  v134.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
  v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v107, (__int128 **)&v134);
  v96 = *(_OWORD *)(v11 + 72);
  v12 = (const void *)*((_QWORD *)v11 + 12);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v12, *((_QWORD *)v11 + 13), (uint64_t)(*((_QWORD *)v11 + 13) - (_QWORD)v12) >> 2);
  v92 = (char *)this;
  v93 = v102;
  v13 = v100;
  v94 = HIBYTE(v102);
  v14 = HIBYTE(v102) != 0;
  if ((int)v100 >= 1)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = *(_DWORD *)(v101 + 8 * v18 + 8);
      if (v19 < 0)
      {
        if ((unint64_t)v16 >= v17)
        {
          v27 = v16 - v15;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v17 - (_QWORD)v15) >> 1 > v28)
            v28 = (uint64_t)(v17 - (_QWORD)v15) >> 1;
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v28;
          if (v24)
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          else
            v25 = 0;
          v29 = (_DWORD *)(v24 + 4 * v27);
          *v29 = v19;
          v26 = v29 + 1;
          while (v16 != v15)
          {
            v31 = *--v16;
            *--v29 = v31;
          }
          goto LABEL_49;
        }
      }
      else
      {
        v20 = DWORD1(v96);
        if ((_DWORD)v96 == 1)
          v21 = 4;
        else
          v21 = 5;
        if (DWORD1(v96) == -1)
          v20 = v21;
        v19 -= v20;
        if ((unint64_t)v16 >= v17)
        {
          v22 = v16 - v15;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v17 - (_QWORD)v15) >> 1 > v23)
            v23 = (uint64_t)(v17 - (_QWORD)v15) >> 1;
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          if (v24)
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          else
            v25 = 0;
          v29 = (_DWORD *)(v24 + 4 * v22);
          *v29 = v19;
          v26 = v29 + 1;
          while (v16 != v15)
          {
            v30 = *--v16;
            *--v29 = v30;
          }
LABEL_49:
          v17 = v24 + 4 * v25;
          if (v15)
            operator delete(v15);
          v15 = v29;
          goto LABEL_52;
        }
      }
      *v16 = v19;
      v26 = v16 + 1;
LABEL_52:
      ++v18;
      v16 = v26;
      if (v18 == v13)
        goto LABEL_55;
    }
  }
  v15 = 0;
  v26 = 0;
LABEL_55:
  std::__sort<std::__less<int,int> &,int *>();
  v32 = v26 - v15;
  v33 = DWORD1(v96);
  if ((_DWORD)v96 == 1)
    v34 = 4;
  else
    v34 = 5;
  if (DWORD1(v96) == -1)
    v33 = v34;
  if (!v94 && v33 == (_DWORD)v32)
  {
    if (v26 == v15)
    {
      v14 = 1;
    }
    else
    {
      if (v32 <= 1)
        v35 = 1;
      else
        v35 = v26 - v15;
      v36 = v35 - 1;
      v37 = -(int)v32;
      v38 = v15;
      do
      {
        v40 = *v38++;
        v39 = v40;
        v42 = v36-- != 0;
        v14 = v37 == v39;
        if (v37 != v39)
          break;
        ++v37;
      }
      while (v42);
    }
  }
  if (v32 == 3)
  {
    if (*v15 == -3 && v15[1] == -2)
    {
      v44 = 0;
      v43 = v15[2] == -1;
      goto LABEL_82;
    }
  }
  else if (v32 == 2 && *v15 == -2)
  {
    v43 = 0;
    v44 = v15[1] == -1;
    goto LABEL_82;
  }
  v44 = 0;
  v43 = 0;
LABEL_82:
  if (*(char *)(v105.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)v105.__r_.__value_.__l.__data_, *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v45 = *(_OWORD *)v105.__r_.__value_.__l.__data_;
    v134.__r_.__value_.__r.__words[2] = *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v45;
  }
  if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)__str.__r_.__value_.__l.__data_, *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v46 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
    v133.__r_.__value_.__r.__words[2] = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v46;
  }
  if (v14 || v44 || v43)
  {
    *((_QWORD *)&v117 + 1) = 0x100000007;
    v118 = 0uLL;
    *(_QWORD *)&v119 = 0xFFFFFFFF00000000;
    *(_QWORD *)&v117 = 0x358637BD00000008;
    BYTE8(v119) = 0;
    if (v14 || v44)
    {
      if (v14)
        v47 = 31;
      else
        v47 = 3;
      DWORD2(v117) = v47;
    }
    memset(&v132, 0, sizeof(v132));
    std::string::operator=(&v133, (const std::string *)__str.__r_.__value_.__l.__data_);
    if (v93)
    {
      std::string::operator=(&v132, &v106);
    }
    else
    {
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
      else
        size = v133.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v131, size + 11);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v131;
      else
        v77 = (std::string *)v131.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = &v133;
        else
          v78 = (std::string *)v133.__r_.__value_.__r.__words[0];
        memmove(v77, v78, size);
      }
      strcpy((char *)v77 + size, "_presqueeze");
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v133.__r_.__value_.__l.__data_);
      v133 = v131;
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        v79 = v106.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v131, v79 + 11);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v131;
      else
        v80 = (std::string *)v131.__r_.__value_.__r.__words[0];
      if (v79)
      {
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = &v106;
        else
          v81 = (std::string *)v106.__r_.__value_.__r.__words[0];
        memmove(v80, v81, v79);
      }
      strcpy((char *)v80 + v79, "_presqueeze");
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
      v132 = v131;
    }
    std::string::basic_string[abi:ne180100]<0>(&v131, "reduce");
    memset(&v140, 0, sizeof(v140));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v140, (__int128 *)v105.__r_.__value_.__l.__data_, (__int128 *)v105.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v105.__r_.__value_.__l.__size_ - v105.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v138, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
    else
      v138 = v133;
    v127 = 0;
    v126 = 0;
    v128 = 0;
    v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
    v136.__r_.__value_.__s.__data_[8] = 0;
    v126 = (__int128 *)operator new(0x18uLL);
    v127 = v126;
    v128 = (char *)v126 + 24;
    v127 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v128, (__int128 *)&v138, (__int128 *)&v139, (std::string *)v126);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v129, v95, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v117, (__int128 *)v140.__r_.__value_.__l.__data_, (__int128 *)v140.__r_.__value_.__l.__size_, &v126);
    v82 = v130;
    if (v130)
    {
      p_shared_owners = (unint64_t *)&v130->__shared_owners_;
      do
        v84 = __ldaxr(p_shared_owners);
      while (__stlxr(v84 - 1, p_shared_owners));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v138.__r_.__value_.__l.__data_);
    v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v131.__r_.__value_.__l.__data_);
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v132.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((int)v13 < 1)
    {
      if (v93)
        goto LABEL_262;
      v123 = 0u;
      memset(v124, 0, sizeof(v124));
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v125 = 1;
      DWORD1(v117) = v13;
      goto LABEL_248;
    }
    for (i = 0; i != v13; ++i)
    {
      *((_QWORD *)&v117 + 1) = 0x100000007;
      v118 = 0uLL;
      LODWORD(v119) = 0;
      *(_QWORD *)&v117 = 0x358637BD00000008;
      BYTE8(v119) = 1;
      DWORD1(v119) = *(_QWORD *)(v101 + 8 * i + 8);
      memset(&v132, 0, sizeof(v132));
      if (i >= (v13 - 1))
      {
        if (v93)
        {
          std::string::operator=(&v133, (const std::string *)__str.__r_.__value_.__l.__data_);
          std::string::operator=(&v132, &v106);
        }
        else
        {
          v66 = __str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) >= 0)
            v67 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
          else
            v67 = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8);
          std::string::basic_string[abi:ne180100]((uint64_t)&v131, v67 + 11);
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v68 = &v131;
          else
            v68 = (std::string *)v131.__r_.__value_.__r.__words[0];
          if (v67)
          {
            if (*(char *)(v66 + 23) >= 0)
              v69 = (const void *)v66;
            else
              v69 = *(const void **)v66;
            memmove(v68, v69, v67);
          }
          strcpy((char *)v68 + v67, "_presqueeze");
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v133.__r_.__value_.__l.__data_);
          v133 = v131;
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v70 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
          else
            v70 = v106.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v131, v70 + 11);
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = &v131;
          else
            v71 = (std::string *)v131.__r_.__value_.__r.__words[0];
          if (v70)
          {
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v72 = &v106;
            else
              v72 = (std::string *)v106.__r_.__value_.__r.__words[0];
            memmove(v71, v72, v70);
          }
          strcpy((char *)v71 + v70, "_presqueeze");
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v132.__r_.__value_.__l.__data_);
          v132 = v131;
        }
      }
      else
      {
        v49 = v105.__r_.__value_.__r.__words[0];
        if (*(char *)(v105.__r_.__value_.__r.__words[0] + 23) >= 0)
          v50 = *(unsigned __int8 *)(v105.__r_.__value_.__r.__words[0] + 23);
        else
          v50 = *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v131, v50 + 18);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v131;
        else
          v51 = (std::string *)v131.__r_.__value_.__r.__words[0];
        if (v50)
        {
          if (*(char *)(v49 + 23) >= 0)
            v52 = (const void *)v49;
          else
            v52 = *(const void **)v49;
          memmove(v51, v52, v50);
        }
        strcpy((char *)v51 + v50, "__reduction_axis__");
        std::to_string(&v140, i + 1);
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &v140;
        else
          v53 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v54 = v140.__r_.__value_.__l.__size_;
        v55 = std::string::append(&v131, (const std::string::value_type *)v53, v54);
        v56 = v55->__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = v55->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
        v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v133.__r_.__value_.__l.__data_);
        v133.__r_.__value_.__r.__words[0] = v56;
        v133.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v133.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v133.__r_.__value_.__s + 23) = v57;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
        else
          v58 = v106.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v131, v58 + 18);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = &v131;
        else
          v59 = (std::string *)v131.__r_.__value_.__r.__words[0];
        if (v58)
        {
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v60 = &v106;
          else
            v60 = (std::string *)v106.__r_.__value_.__r.__words[0];
          memmove(v59, v60, v58);
        }
        strcpy((char *)v59 + v58, "__reduction_axis__");
        std::to_string(&v140, i);
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v140;
        else
          v61 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v62 = v140.__r_.__value_.__l.__size_;
        v63 = std::string::append(&v131, (const std::string::value_type *)v61, v62);
        v64 = v63->__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = v63->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7);
        v65 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v132.__r_.__value_.__l.__data_);
        v132.__r_.__value_.__r.__words[0] = v64;
        v132.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v132.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v132.__r_.__value_.__s + 23) = v65;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v131, "reduce");
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v140, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
      else
        v140 = v134;
      v127 = 0;
      v126 = 0;
      v128 = 0;
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
      v136.__r_.__value_.__s.__data_[8] = 0;
      v126 = (__int128 *)operator new(0x18uLL);
      v127 = v126;
      v128 = (char *)v126 + 24;
      v127 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v128, (__int128 *)&v140, &v141, (std::string *)v126);
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v136, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
      else
        v136 = v133;
      memset(&v138, 0, sizeof(v138));
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      v114.__r_.__value_.__s.__data_[8] = 0;
      v138.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v138.__r_.__value_.__l.__size_ = v138.__r_.__value_.__r.__words[0];
      v138.__r_.__value_.__r.__words[2] = v138.__r_.__value_.__r.__words[0] + 24;
      v138.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v138.__r_.__value_.__r.__words[2], (__int128 *)&v136, (__int128 *)&v137, (std::string *)v138.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v129, v95, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v117, v126, v127, (__int128 **)&v138);
      v73 = v130;
      if (v130)
      {
        v74 = (unint64_t *)&v130->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131.__r_.__value_.__l.__data_);
      std::string::operator=(&v134, &v133);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
    }
  }
  if (v93)
    goto LABEL_262;
  v123 = 0u;
  memset(v124, 0, sizeof(v124));
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v125 = 1;
  if ((int)v13 >= 32)
    LODWORD(v85) = 32;
  else
    LODWORD(v85) = v13;
  DWORD1(v117) = v85;
  if ((int)v13 >= 1)
  {
    if ((int)v85 <= 1)
      v85 = 1;
    else
      v85 = v85;
    v86 = (_DWORD *)&v117 + 2;
    v87 = (uint64_t *)(v101 + 8);
    do
    {
      v88 = *v87++;
      *v86++ = v88;
      --v85;
    }
    while (v85);
  }
LABEL_248:
  if (HIBYTE(v102))
    v124[24] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v132, "squeeze");
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v136, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v136 = v133;
  memset(&v131, 0, sizeof(v131));
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
  v114.__r_.__value_.__s.__data_[8] = 0;
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v131.__r_.__value_.__l.__size_ = v131.__r_.__value_.__r.__words[0];
  v131.__r_.__value_.__r.__words[2] = v131.__r_.__value_.__r.__words[0] + 24;
  v131.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v131.__r_.__value_.__r.__words[2], (__int128 *)&v136, (__int128 *)&v137, (std::string *)v131.__r_.__value_.__l.__data_);
  memset(&v114, 0, sizeof(v114));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v114, (__int128 *)__str.__r_.__value_.__l.__data_, (__int128 *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v115, v95, (uint64_t)&v132, (uint64_t)&v106, (uint64_t)&v117, (__int128 *)v131.__r_.__value_.__l.__data_, (__int128 *)v131.__r_.__value_.__l.__size_, (__int128 **)&v114);
  v89 = v116;
  if (v116)
  {
    v90 = (unint64_t *)&v116->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v135 = &v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  v135 = &v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
LABEL_262:
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  if (v15)
    operator delete(v15);
  if (__p[0])
    operator delete(__p[0]);
  CoreML::Specification::ReduceL1LayerParams::~ReduceL1LayerParams((CoreML::Specification::ReduceL1LayerParams *)&v98);
  *(_QWORD *)&v117 = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  *(_QWORD *)&v117 = &v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  LayerTranslator::defaultUnknownNdShape(v92, (uint64_t *)&v110);
  *(_QWORD *)&v117 = &v107;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  *(_QWORD *)&v117 = &v110;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
}

void sub_19C971870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *v63;
  uint64_t v64;

  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (*(char *)(v64 - 217) < 0)
    operator delete(*(void **)(v64 - 240));
  if (v63)
    operator delete(v63);
  if (a24)
    operator delete(a24);
  CoreML::Specification::ReduceL1LayerParams::~ReduceL1LayerParams((CoreML::Specification::ReduceL1LayerParams *)&a27);
  a63 = (uint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a44 < 0)
    operator delete(a39);
  a63 = (uint64_t)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a57 < 0)
    operator delete(a52);
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceL2(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  std::string *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t **v10;
  char *v11;
  const void *v12;
  uint64_t v13;
  _BOOL4 v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int *v38;
  int v39;
  int v40;
  BOOL v42;
  _BOOL4 v43;
  _BOOL4 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  unint64_t i;
  std::string::size_type v49;
  size_t v50;
  std::string *v51;
  const void *v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type v56;
  char v57;
  std::string::size_type v58;
  std::string *v59;
  std::string *v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  std::string::size_type v64;
  char v65;
  std::string::size_type v66;
  size_t v67;
  std::string *v68;
  const void *v69;
  std::string::size_type v70;
  std::string *v71;
  std::string *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::string::size_type size;
  std::string *v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  std::string *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  char *v92;
  int v93;
  int v94;
  _QWORD *v95;
  __int128 v96;
  void *__p[3];
  void (**v98)(CoreML::Specification::ReduceL2LayerParams *__hidden);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int16 v102;
  int v103;
  std::string __str;
  std::string v105;
  std::string v106;
  __int128 *v107;
  __int128 *v108;
  uint64_t v109;
  __int128 *v110;
  __int128 *v111;
  uint64_t v112;
  std::string v113;
  std::string v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _BYTE v124[25];
  int v125;
  __int128 *v126;
  __int128 *v127;
  char *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  std::string *v135;
  std::string v136;
  uint64_t v137;
  std::string v138;
  uint64_t v139;
  std::string v140;
  __int128 v141;

  *(_QWORD *)&v141 = *MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v113, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v113.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v5;
  }
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v110, (uint64_t *)&v107, *((_QWORD *)this + 1));
  v95 = *(_QWORD **)this;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v106, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  else
    v106 = v113;
  memset(&v105, 0, sizeof(v105));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, v107, v108, 0xAAAAAAAAAAAAAAABLL * (((char *)v108 - (char *)v107) >> 3));
  memset(&__str, 0, sizeof(__str));
  v6 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v110, v111, 0xAAAAAAAAAAAAAAABLL * (((char *)v111 - (char *)v110) >> 3));
  if (*((_DWORD *)a2 + 35) == 1255)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v6);
    v7 = &CoreML::Specification::_ReduceL2LayerParams_default_instance_;
  }
  v100 = 0;
  v101 = 0;
  v98 = &off_1E3D522F0;
  v99 = 0;
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v100, v8);
    memcpy((void *)(v101 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v100) = *((_DWORD *)v7 + 4);
  }
  v103 = 0;
  v9 = v7[1];
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v99, v9 & 0xFFFFFFFFFFFFFFFELL);
  v102 = *((_WORD *)v7 + 18);
  v10 = (uint64_t **)*((_QWORD *)this + 1);
  v134.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
  v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v107, (__int128 **)&v134);
  v96 = *(_OWORD *)(v11 + 72);
  v12 = (const void *)*((_QWORD *)v11 + 12);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v12, *((_QWORD *)v11 + 13), (uint64_t)(*((_QWORD *)v11 + 13) - (_QWORD)v12) >> 2);
  v92 = (char *)this;
  v93 = v102;
  v13 = v100;
  v94 = HIBYTE(v102);
  v14 = HIBYTE(v102) != 0;
  if ((int)v100 >= 1)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = *(_DWORD *)(v101 + 8 * v18 + 8);
      if (v19 < 0)
      {
        if ((unint64_t)v16 >= v17)
        {
          v27 = v16 - v15;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v17 - (_QWORD)v15) >> 1 > v28)
            v28 = (uint64_t)(v17 - (_QWORD)v15) >> 1;
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v28;
          if (v24)
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          else
            v25 = 0;
          v29 = (_DWORD *)(v24 + 4 * v27);
          *v29 = v19;
          v26 = v29 + 1;
          while (v16 != v15)
          {
            v31 = *--v16;
            *--v29 = v31;
          }
          goto LABEL_49;
        }
      }
      else
      {
        v20 = DWORD1(v96);
        if ((_DWORD)v96 == 1)
          v21 = 4;
        else
          v21 = 5;
        if (DWORD1(v96) == -1)
          v20 = v21;
        v19 -= v20;
        if ((unint64_t)v16 >= v17)
        {
          v22 = v16 - v15;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v17 - (_QWORD)v15) >> 1 > v23)
            v23 = (uint64_t)(v17 - (_QWORD)v15) >> 1;
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          if (v24)
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          else
            v25 = 0;
          v29 = (_DWORD *)(v24 + 4 * v22);
          *v29 = v19;
          v26 = v29 + 1;
          while (v16 != v15)
          {
            v30 = *--v16;
            *--v29 = v30;
          }
LABEL_49:
          v17 = v24 + 4 * v25;
          if (v15)
            operator delete(v15);
          v15 = v29;
          goto LABEL_52;
        }
      }
      *v16 = v19;
      v26 = v16 + 1;
LABEL_52:
      ++v18;
      v16 = v26;
      if (v18 == v13)
        goto LABEL_55;
    }
  }
  v15 = 0;
  v26 = 0;
LABEL_55:
  std::__sort<std::__less<int,int> &,int *>();
  v32 = v26 - v15;
  v33 = DWORD1(v96);
  if ((_DWORD)v96 == 1)
    v34 = 4;
  else
    v34 = 5;
  if (DWORD1(v96) == -1)
    v33 = v34;
  if (!v94 && v33 == (_DWORD)v32)
  {
    if (v26 == v15)
    {
      v14 = 1;
    }
    else
    {
      if (v32 <= 1)
        v35 = 1;
      else
        v35 = v26 - v15;
      v36 = v35 - 1;
      v37 = -(int)v32;
      v38 = v15;
      do
      {
        v40 = *v38++;
        v39 = v40;
        v42 = v36-- != 0;
        v14 = v37 == v39;
        if (v37 != v39)
          break;
        ++v37;
      }
      while (v42);
    }
  }
  if (v32 == 3)
  {
    if (*v15 == -3 && v15[1] == -2)
    {
      v44 = 0;
      v43 = v15[2] == -1;
      goto LABEL_82;
    }
  }
  else if (v32 == 2 && *v15 == -2)
  {
    v43 = 0;
    v44 = v15[1] == -1;
    goto LABEL_82;
  }
  v44 = 0;
  v43 = 0;
LABEL_82:
  if (*(char *)(v105.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)v105.__r_.__value_.__l.__data_, *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v45 = *(_OWORD *)v105.__r_.__value_.__l.__data_;
    v134.__r_.__value_.__r.__words[2] = *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v45;
  }
  if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)__str.__r_.__value_.__l.__data_, *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v46 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
    v133.__r_.__value_.__r.__words[2] = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v46;
  }
  if (v14 || v44 || v43)
  {
    *((_QWORD *)&v117 + 1) = 0x100000007;
    v118 = 0uLL;
    *(_QWORD *)&v119 = 0xFFFFFFFF00000000;
    *(_QWORD *)&v117 = 0x358637BD00000005;
    BYTE8(v119) = 0;
    if (v14 || v44)
    {
      if (v14)
        v47 = 31;
      else
        v47 = 3;
      DWORD2(v117) = v47;
    }
    memset(&v132, 0, sizeof(v132));
    std::string::operator=(&v133, (const std::string *)__str.__r_.__value_.__l.__data_);
    if (v93)
    {
      std::string::operator=(&v132, &v106);
    }
    else
    {
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
      else
        size = v133.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v131, size + 11);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v131;
      else
        v77 = (std::string *)v131.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = &v133;
        else
          v78 = (std::string *)v133.__r_.__value_.__r.__words[0];
        memmove(v77, v78, size);
      }
      strcpy((char *)v77 + size, "_presqueeze");
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v133.__r_.__value_.__l.__data_);
      v133 = v131;
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        v79 = v106.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v131, v79 + 11);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v131;
      else
        v80 = (std::string *)v131.__r_.__value_.__r.__words[0];
      if (v79)
      {
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = &v106;
        else
          v81 = (std::string *)v106.__r_.__value_.__r.__words[0];
        memmove(v80, v81, v79);
      }
      strcpy((char *)v80 + v79, "_presqueeze");
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
      v132 = v131;
    }
    std::string::basic_string[abi:ne180100]<0>(&v131, "reduce");
    memset(&v140, 0, sizeof(v140));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v140, (__int128 *)v105.__r_.__value_.__l.__data_, (__int128 *)v105.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v105.__r_.__value_.__l.__size_ - v105.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v138, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
    else
      v138 = v133;
    v127 = 0;
    v126 = 0;
    v128 = 0;
    v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
    v136.__r_.__value_.__s.__data_[8] = 0;
    v126 = (__int128 *)operator new(0x18uLL);
    v127 = v126;
    v128 = (char *)v126 + 24;
    v127 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v128, (__int128 *)&v138, (__int128 *)&v139, (std::string *)v126);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v129, v95, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v117, (__int128 *)v140.__r_.__value_.__l.__data_, (__int128 *)v140.__r_.__value_.__l.__size_, &v126);
    v82 = v130;
    if (v130)
    {
      p_shared_owners = (unint64_t *)&v130->__shared_owners_;
      do
        v84 = __ldaxr(p_shared_owners);
      while (__stlxr(v84 - 1, p_shared_owners));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v138.__r_.__value_.__l.__data_);
    v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v131.__r_.__value_.__l.__data_);
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v132.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((int)v13 < 1)
    {
      if (v93)
        goto LABEL_262;
      v123 = 0u;
      memset(v124, 0, sizeof(v124));
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v125 = 1;
      DWORD1(v117) = v13;
      goto LABEL_248;
    }
    for (i = 0; i != v13; ++i)
    {
      *((_QWORD *)&v117 + 1) = 0x100000007;
      v118 = 0uLL;
      LODWORD(v119) = 0;
      *(_QWORD *)&v117 = 0x358637BD00000005;
      BYTE8(v119) = 1;
      DWORD1(v119) = *(_QWORD *)(v101 + 8 * i + 8);
      memset(&v132, 0, sizeof(v132));
      if (i >= (v13 - 1))
      {
        if (v93)
        {
          std::string::operator=(&v133, (const std::string *)__str.__r_.__value_.__l.__data_);
          std::string::operator=(&v132, &v106);
        }
        else
        {
          v66 = __str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) >= 0)
            v67 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
          else
            v67 = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8);
          std::string::basic_string[abi:ne180100]((uint64_t)&v131, v67 + 11);
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v68 = &v131;
          else
            v68 = (std::string *)v131.__r_.__value_.__r.__words[0];
          if (v67)
          {
            if (*(char *)(v66 + 23) >= 0)
              v69 = (const void *)v66;
            else
              v69 = *(const void **)v66;
            memmove(v68, v69, v67);
          }
          strcpy((char *)v68 + v67, "_presqueeze");
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v133.__r_.__value_.__l.__data_);
          v133 = v131;
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v70 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
          else
            v70 = v106.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v131, v70 + 11);
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = &v131;
          else
            v71 = (std::string *)v131.__r_.__value_.__r.__words[0];
          if (v70)
          {
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v72 = &v106;
            else
              v72 = (std::string *)v106.__r_.__value_.__r.__words[0];
            memmove(v71, v72, v70);
          }
          strcpy((char *)v71 + v70, "_presqueeze");
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v132.__r_.__value_.__l.__data_);
          v132 = v131;
        }
      }
      else
      {
        v49 = v105.__r_.__value_.__r.__words[0];
        if (*(char *)(v105.__r_.__value_.__r.__words[0] + 23) >= 0)
          v50 = *(unsigned __int8 *)(v105.__r_.__value_.__r.__words[0] + 23);
        else
          v50 = *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v131, v50 + 18);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v131;
        else
          v51 = (std::string *)v131.__r_.__value_.__r.__words[0];
        if (v50)
        {
          if (*(char *)(v49 + 23) >= 0)
            v52 = (const void *)v49;
          else
            v52 = *(const void **)v49;
          memmove(v51, v52, v50);
        }
        strcpy((char *)v51 + v50, "__reduction_axis__");
        std::to_string(&v140, i + 1);
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &v140;
        else
          v53 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v54 = v140.__r_.__value_.__l.__size_;
        v55 = std::string::append(&v131, (const std::string::value_type *)v53, v54);
        v56 = v55->__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = v55->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
        v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v133.__r_.__value_.__l.__data_);
        v133.__r_.__value_.__r.__words[0] = v56;
        v133.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v133.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v133.__r_.__value_.__s + 23) = v57;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
        else
          v58 = v106.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v131, v58 + 18);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = &v131;
        else
          v59 = (std::string *)v131.__r_.__value_.__r.__words[0];
        if (v58)
        {
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v60 = &v106;
          else
            v60 = (std::string *)v106.__r_.__value_.__r.__words[0];
          memmove(v59, v60, v58);
        }
        strcpy((char *)v59 + v58, "__reduction_axis__");
        std::to_string(&v140, i);
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v140;
        else
          v61 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v62 = v140.__r_.__value_.__l.__size_;
        v63 = std::string::append(&v131, (const std::string::value_type *)v61, v62);
        v64 = v63->__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = v63->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7);
        v65 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v132.__r_.__value_.__l.__data_);
        v132.__r_.__value_.__r.__words[0] = v64;
        v132.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v132.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v132.__r_.__value_.__s + 23) = v65;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v131, "reduce");
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v140, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
      else
        v140 = v134;
      v127 = 0;
      v126 = 0;
      v128 = 0;
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
      v136.__r_.__value_.__s.__data_[8] = 0;
      v126 = (__int128 *)operator new(0x18uLL);
      v127 = v126;
      v128 = (char *)v126 + 24;
      v127 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v128, (__int128 *)&v140, &v141, (std::string *)v126);
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v136, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
      else
        v136 = v133;
      memset(&v138, 0, sizeof(v138));
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      v114.__r_.__value_.__s.__data_[8] = 0;
      v138.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v138.__r_.__value_.__l.__size_ = v138.__r_.__value_.__r.__words[0];
      v138.__r_.__value_.__r.__words[2] = v138.__r_.__value_.__r.__words[0] + 24;
      v138.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v138.__r_.__value_.__r.__words[2], (__int128 *)&v136, (__int128 *)&v137, (std::string *)v138.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v129, v95, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v117, v126, v127, (__int128 **)&v138);
      v73 = v130;
      if (v130)
      {
        v74 = (unint64_t *)&v130->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131.__r_.__value_.__l.__data_);
      std::string::operator=(&v134, &v133);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
    }
  }
  if (v93)
    goto LABEL_262;
  v123 = 0u;
  memset(v124, 0, sizeof(v124));
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v125 = 1;
  if ((int)v13 >= 32)
    LODWORD(v85) = 32;
  else
    LODWORD(v85) = v13;
  DWORD1(v117) = v85;
  if ((int)v13 >= 1)
  {
    if ((int)v85 <= 1)
      v85 = 1;
    else
      v85 = v85;
    v86 = (_DWORD *)&v117 + 2;
    v87 = (uint64_t *)(v101 + 8);
    do
    {
      v88 = *v87++;
      *v86++ = v88;
      --v85;
    }
    while (v85);
  }
LABEL_248:
  if (HIBYTE(v102))
    v124[24] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v132, "squeeze");
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v136, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v136 = v133;
  memset(&v131, 0, sizeof(v131));
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
  v114.__r_.__value_.__s.__data_[8] = 0;
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v131.__r_.__value_.__l.__size_ = v131.__r_.__value_.__r.__words[0];
  v131.__r_.__value_.__r.__words[2] = v131.__r_.__value_.__r.__words[0] + 24;
  v131.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v131.__r_.__value_.__r.__words[2], (__int128 *)&v136, (__int128 *)&v137, (std::string *)v131.__r_.__value_.__l.__data_);
  memset(&v114, 0, sizeof(v114));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v114, (__int128 *)__str.__r_.__value_.__l.__data_, (__int128 *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v115, v95, (uint64_t)&v132, (uint64_t)&v106, (uint64_t)&v117, (__int128 *)v131.__r_.__value_.__l.__data_, (__int128 *)v131.__r_.__value_.__l.__size_, (__int128 **)&v114);
  v89 = v116;
  if (v116)
  {
    v90 = (unint64_t *)&v116->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v135 = &v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  v135 = &v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
LABEL_262:
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  if (v15)
    operator delete(v15);
  if (__p[0])
    operator delete(__p[0]);
  CoreML::Specification::ReduceL2LayerParams::~ReduceL2LayerParams((CoreML::Specification::ReduceL2LayerParams *)&v98);
  *(_QWORD *)&v117 = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  *(_QWORD *)&v117 = &v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  LayerTranslator::defaultUnknownNdShape(v92, (uint64_t *)&v110);
  *(_QWORD *)&v117 = &v107;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  *(_QWORD *)&v117 = &v110;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
}

void sub_19C972BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *v63;
  uint64_t v64;

  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (*(char *)(v64 - 217) < 0)
    operator delete(*(void **)(v64 - 240));
  if (v63)
    operator delete(v63);
  if (a24)
    operator delete(a24);
  CoreML::Specification::ReduceL2LayerParams::~ReduceL2LayerParams((CoreML::Specification::ReduceL2LayerParams *)&a27);
  a63 = (uint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a44 < 0)
    operator delete(a39);
  a63 = (uint64_t)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a57 < 0)
    operator delete(a52);
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceMax(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  std::string *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t **v10;
  char *v11;
  const void *v12;
  uint64_t v13;
  _BOOL4 v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int *v38;
  int v39;
  int v40;
  BOOL v42;
  _BOOL4 v43;
  _BOOL4 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  unint64_t i;
  std::string::size_type v49;
  size_t v50;
  std::string *v51;
  const void *v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type v56;
  char v57;
  std::string::size_type v58;
  std::string *v59;
  std::string *v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  std::string::size_type v64;
  char v65;
  std::string::size_type v66;
  size_t v67;
  std::string *v68;
  const void *v69;
  std::string::size_type v70;
  std::string *v71;
  std::string *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::string::size_type size;
  std::string *v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  std::string *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  char *v92;
  int v93;
  int v94;
  _QWORD *v95;
  __int128 v96;
  void *__p[3];
  void (**v98)(CoreML::Specification::ReduceMaxLayerParams *__hidden);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int16 v102;
  int v103;
  std::string __str;
  std::string v105;
  std::string v106;
  __int128 *v107;
  __int128 *v108;
  uint64_t v109;
  __int128 *v110;
  __int128 *v111;
  uint64_t v112;
  std::string v113;
  std::string v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _BYTE v124[25];
  int v125;
  __int128 *v126;
  __int128 *v127;
  char *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  std::string *v135;
  std::string v136;
  uint64_t v137;
  std::string v138;
  uint64_t v139;
  std::string v140;
  __int128 v141;

  *(_QWORD *)&v141 = *MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v113, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v113.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v5;
  }
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v110, (uint64_t *)&v107, *((_QWORD *)this + 1));
  v95 = *(_QWORD **)this;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v106, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  else
    v106 = v113;
  memset(&v105, 0, sizeof(v105));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, v107, v108, 0xAAAAAAAAAAAAAAABLL * (((char *)v108 - (char *)v107) >> 3));
  memset(&__str, 0, sizeof(__str));
  v6 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v110, v111, 0xAAAAAAAAAAAAAAABLL * (((char *)v111 - (char *)v110) >> 3));
  if (*((_DWORD *)a2 + 35) == 1260)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v6);
    v7 = &CoreML::Specification::_ReduceMaxLayerParams_default_instance_;
  }
  v100 = 0;
  v101 = 0;
  v98 = &off_1E3D52978;
  v99 = 0;
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v100, v8);
    memcpy((void *)(v101 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v100) = *((_DWORD *)v7 + 4);
  }
  v103 = 0;
  v9 = v7[1];
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v99, v9 & 0xFFFFFFFFFFFFFFFELL);
  v102 = *((_WORD *)v7 + 18);
  v10 = (uint64_t **)*((_QWORD *)this + 1);
  v134.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
  v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v107, (__int128 **)&v134);
  v96 = *(_OWORD *)(v11 + 72);
  v12 = (const void *)*((_QWORD *)v11 + 12);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v12, *((_QWORD *)v11 + 13), (uint64_t)(*((_QWORD *)v11 + 13) - (_QWORD)v12) >> 2);
  v92 = (char *)this;
  v93 = v102;
  v13 = v100;
  v94 = HIBYTE(v102);
  v14 = HIBYTE(v102) != 0;
  if ((int)v100 >= 1)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = *(_DWORD *)(v101 + 8 * v18 + 8);
      if (v19 < 0)
      {
        if ((unint64_t)v16 >= v17)
        {
          v27 = v16 - v15;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v17 - (_QWORD)v15) >> 1 > v28)
            v28 = (uint64_t)(v17 - (_QWORD)v15) >> 1;
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v28;
          if (v24)
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          else
            v25 = 0;
          v29 = (_DWORD *)(v24 + 4 * v27);
          *v29 = v19;
          v26 = v29 + 1;
          while (v16 != v15)
          {
            v31 = *--v16;
            *--v29 = v31;
          }
          goto LABEL_49;
        }
      }
      else
      {
        v20 = DWORD1(v96);
        if ((_DWORD)v96 == 1)
          v21 = 4;
        else
          v21 = 5;
        if (DWORD1(v96) == -1)
          v20 = v21;
        v19 -= v20;
        if ((unint64_t)v16 >= v17)
        {
          v22 = v16 - v15;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v17 - (_QWORD)v15) >> 1 > v23)
            v23 = (uint64_t)(v17 - (_QWORD)v15) >> 1;
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          if (v24)
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          else
            v25 = 0;
          v29 = (_DWORD *)(v24 + 4 * v22);
          *v29 = v19;
          v26 = v29 + 1;
          while (v16 != v15)
          {
            v30 = *--v16;
            *--v29 = v30;
          }
LABEL_49:
          v17 = v24 + 4 * v25;
          if (v15)
            operator delete(v15);
          v15 = v29;
          goto LABEL_52;
        }
      }
      *v16 = v19;
      v26 = v16 + 1;
LABEL_52:
      ++v18;
      v16 = v26;
      if (v18 == v13)
        goto LABEL_55;
    }
  }
  v15 = 0;
  v26 = 0;
LABEL_55:
  std::__sort<std::__less<int,int> &,int *>();
  v32 = v26 - v15;
  v33 = DWORD1(v96);
  if ((_DWORD)v96 == 1)
    v34 = 4;
  else
    v34 = 5;
  if (DWORD1(v96) == -1)
    v33 = v34;
  if (!v94 && v33 == (_DWORD)v32)
  {
    if (v26 == v15)
    {
      v14 = 1;
    }
    else
    {
      if (v32 <= 1)
        v35 = 1;
      else
        v35 = v26 - v15;
      v36 = v35 - 1;
      v37 = -(int)v32;
      v38 = v15;
      do
      {
        v40 = *v38++;
        v39 = v40;
        v42 = v36-- != 0;
        v14 = v37 == v39;
        if (v37 != v39)
          break;
        ++v37;
      }
      while (v42);
    }
  }
  if (v32 == 3)
  {
    if (*v15 == -3 && v15[1] == -2)
    {
      v44 = 0;
      v43 = v15[2] == -1;
      goto LABEL_82;
    }
  }
  else if (v32 == 2 && *v15 == -2)
  {
    v43 = 0;
    v44 = v15[1] == -1;
    goto LABEL_82;
  }
  v44 = 0;
  v43 = 0;
LABEL_82:
  if (*(char *)(v105.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)v105.__r_.__value_.__l.__data_, *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v45 = *(_OWORD *)v105.__r_.__value_.__l.__data_;
    v134.__r_.__value_.__r.__words[2] = *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v45;
  }
  if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)__str.__r_.__value_.__l.__data_, *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v46 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
    v133.__r_.__value_.__r.__words[2] = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v46;
  }
  if (v14 || v44 || v43)
  {
    *((_QWORD *)&v117 + 1) = 0x100000007;
    v118 = 0uLL;
    *(_QWORD *)&v119 = 0xFFFFFFFF00000000;
    *(_QWORD *)&v117 = 0x358637BD00000009;
    BYTE8(v119) = 0;
    if (v14 || v44)
    {
      if (v14)
        v47 = 31;
      else
        v47 = 3;
      DWORD2(v117) = v47;
    }
    memset(&v132, 0, sizeof(v132));
    std::string::operator=(&v133, (const std::string *)__str.__r_.__value_.__l.__data_);
    if (v93)
    {
      std::string::operator=(&v132, &v106);
    }
    else
    {
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
      else
        size = v133.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v131, size + 11);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v131;
      else
        v77 = (std::string *)v131.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = &v133;
        else
          v78 = (std::string *)v133.__r_.__value_.__r.__words[0];
        memmove(v77, v78, size);
      }
      strcpy((char *)v77 + size, "_presqueeze");
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v133.__r_.__value_.__l.__data_);
      v133 = v131;
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        v79 = v106.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v131, v79 + 11);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v131;
      else
        v80 = (std::string *)v131.__r_.__value_.__r.__words[0];
      if (v79)
      {
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = &v106;
        else
          v81 = (std::string *)v106.__r_.__value_.__r.__words[0];
        memmove(v80, v81, v79);
      }
      strcpy((char *)v80 + v79, "_presqueeze");
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
      v132 = v131;
    }
    std::string::basic_string[abi:ne180100]<0>(&v131, "reduce");
    memset(&v140, 0, sizeof(v140));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v140, (__int128 *)v105.__r_.__value_.__l.__data_, (__int128 *)v105.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v105.__r_.__value_.__l.__size_ - v105.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v138, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
    else
      v138 = v133;
    v127 = 0;
    v126 = 0;
    v128 = 0;
    v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
    v136.__r_.__value_.__s.__data_[8] = 0;
    v126 = (__int128 *)operator new(0x18uLL);
    v127 = v126;
    v128 = (char *)v126 + 24;
    v127 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v128, (__int128 *)&v138, (__int128 *)&v139, (std::string *)v126);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v129, v95, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v117, (__int128 *)v140.__r_.__value_.__l.__data_, (__int128 *)v140.__r_.__value_.__l.__size_, &v126);
    v82 = v130;
    if (v130)
    {
      p_shared_owners = (unint64_t *)&v130->__shared_owners_;
      do
        v84 = __ldaxr(p_shared_owners);
      while (__stlxr(v84 - 1, p_shared_owners));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v138.__r_.__value_.__l.__data_);
    v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v131.__r_.__value_.__l.__data_);
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v132.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((int)v13 < 1)
    {
      if (v93)
        goto LABEL_262;
      v123 = 0u;
      memset(v124, 0, sizeof(v124));
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v125 = 1;
      DWORD1(v117) = v13;
      goto LABEL_248;
    }
    for (i = 0; i != v13; ++i)
    {
      *((_QWORD *)&v117 + 1) = 0x100000007;
      v118 = 0uLL;
      LODWORD(v119) = 0;
      *(_QWORD *)&v117 = 0x358637BD00000009;
      BYTE8(v119) = 1;
      DWORD1(v119) = *(_QWORD *)(v101 + 8 * i + 8);
      memset(&v132, 0, sizeof(v132));
      if (i >= (v13 - 1))
      {
        if (v93)
        {
          std::string::operator=(&v133, (const std::string *)__str.__r_.__value_.__l.__data_);
          std::string::operator=(&v132, &v106);
        }
        else
        {
          v66 = __str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) >= 0)
            v67 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
          else
            v67 = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8);
          std::string::basic_string[abi:ne180100]((uint64_t)&v131, v67 + 11);
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v68 = &v131;
          else
            v68 = (std::string *)v131.__r_.__value_.__r.__words[0];
          if (v67)
          {
            if (*(char *)(v66 + 23) >= 0)
              v69 = (const void *)v66;
            else
              v69 = *(const void **)v66;
            memmove(v68, v69, v67);
          }
          strcpy((char *)v68 + v67, "_presqueeze");
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v133.__r_.__value_.__l.__data_);
          v133 = v131;
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v70 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
          else
            v70 = v106.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v131, v70 + 11);
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = &v131;
          else
            v71 = (std::string *)v131.__r_.__value_.__r.__words[0];
          if (v70)
          {
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v72 = &v106;
            else
              v72 = (std::string *)v106.__r_.__value_.__r.__words[0];
            memmove(v71, v72, v70);
          }
          strcpy((char *)v71 + v70, "_presqueeze");
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v132.__r_.__value_.__l.__data_);
          v132 = v131;
        }
      }
      else
      {
        v49 = v105.__r_.__value_.__r.__words[0];
        if (*(char *)(v105.__r_.__value_.__r.__words[0] + 23) >= 0)
          v50 = *(unsigned __int8 *)(v105.__r_.__value_.__r.__words[0] + 23);
        else
          v50 = *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v131, v50 + 18);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v131;
        else
          v51 = (std::string *)v131.__r_.__value_.__r.__words[0];
        if (v50)
        {
          if (*(char *)(v49 + 23) >= 0)
            v52 = (const void *)v49;
          else
            v52 = *(const void **)v49;
          memmove(v51, v52, v50);
        }
        strcpy((char *)v51 + v50, "__reduction_axis__");
        std::to_string(&v140, i + 1);
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &v140;
        else
          v53 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v54 = v140.__r_.__value_.__l.__size_;
        v55 = std::string::append(&v131, (const std::string::value_type *)v53, v54);
        v56 = v55->__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = v55->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
        v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v133.__r_.__value_.__l.__data_);
        v133.__r_.__value_.__r.__words[0] = v56;
        v133.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v133.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v133.__r_.__value_.__s + 23) = v57;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
        else
          v58 = v106.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v131, v58 + 18);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = &v131;
        else
          v59 = (std::string *)v131.__r_.__value_.__r.__words[0];
        if (v58)
        {
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v60 = &v106;
          else
            v60 = (std::string *)v106.__r_.__value_.__r.__words[0];
          memmove(v59, v60, v58);
        }
        strcpy((char *)v59 + v58, "__reduction_axis__");
        std::to_string(&v140, i);
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v140;
        else
          v61 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v62 = v140.__r_.__value_.__l.__size_;
        v63 = std::string::append(&v131, (const std::string::value_type *)v61, v62);
        v64 = v63->__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = v63->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7);
        v65 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v132.__r_.__value_.__l.__data_);
        v132.__r_.__value_.__r.__words[0] = v64;
        v132.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v132.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v132.__r_.__value_.__s + 23) = v65;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v131, "reduce");
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v140, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
      else
        v140 = v134;
      v127 = 0;
      v126 = 0;
      v128 = 0;
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
      v136.__r_.__value_.__s.__data_[8] = 0;
      v126 = (__int128 *)operator new(0x18uLL);
      v127 = v126;
      v128 = (char *)v126 + 24;
      v127 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v128, (__int128 *)&v140, &v141, (std::string *)v126);
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v136, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
      else
        v136 = v133;
      memset(&v138, 0, sizeof(v138));
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      v114.__r_.__value_.__s.__data_[8] = 0;
      v138.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v138.__r_.__value_.__l.__size_ = v138.__r_.__value_.__r.__words[0];
      v138.__r_.__value_.__r.__words[2] = v138.__r_.__value_.__r.__words[0] + 24;
      v138.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v138.__r_.__value_.__r.__words[2], (__int128 *)&v136, (__int128 *)&v137, (std::string *)v138.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v129, v95, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v117, v126, v127, (__int128 **)&v138);
      v73 = v130;
      if (v130)
      {
        v74 = (unint64_t *)&v130->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131.__r_.__value_.__l.__data_);
      std::string::operator=(&v134, &v133);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
    }
  }
  if (v93)
    goto LABEL_262;
  v123 = 0u;
  memset(v124, 0, sizeof(v124));
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v125 = 1;
  if ((int)v13 >= 32)
    LODWORD(v85) = 32;
  else
    LODWORD(v85) = v13;
  DWORD1(v117) = v85;
  if ((int)v13 >= 1)
  {
    if ((int)v85 <= 1)
      v85 = 1;
    else
      v85 = v85;
    v86 = (_DWORD *)&v117 + 2;
    v87 = (uint64_t *)(v101 + 8);
    do
    {
      v88 = *v87++;
      *v86++ = v88;
      --v85;
    }
    while (v85);
  }
LABEL_248:
  if (HIBYTE(v102))
    v124[24] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v132, "squeeze");
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v136, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v136 = v133;
  memset(&v131, 0, sizeof(v131));
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
  v114.__r_.__value_.__s.__data_[8] = 0;
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v131.__r_.__value_.__l.__size_ = v131.__r_.__value_.__r.__words[0];
  v131.__r_.__value_.__r.__words[2] = v131.__r_.__value_.__r.__words[0] + 24;
  v131.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v131.__r_.__value_.__r.__words[2], (__int128 *)&v136, (__int128 *)&v137, (std::string *)v131.__r_.__value_.__l.__data_);
  memset(&v114, 0, sizeof(v114));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v114, (__int128 *)__str.__r_.__value_.__l.__data_, (__int128 *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v115, v95, (uint64_t)&v132, (uint64_t)&v106, (uint64_t)&v117, (__int128 *)v131.__r_.__value_.__l.__data_, (__int128 *)v131.__r_.__value_.__l.__size_, (__int128 **)&v114);
  v89 = v116;
  if (v116)
  {
    v90 = (unint64_t *)&v116->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v135 = &v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  v135 = &v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
LABEL_262:
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  if (v15)
    operator delete(v15);
  if (__p[0])
    operator delete(__p[0]);
  CoreML::Specification::ReduceMaxLayerParams::~ReduceMaxLayerParams((CoreML::Specification::ReduceMaxLayerParams *)&v98);
  *(_QWORD *)&v117 = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  *(_QWORD *)&v117 = &v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  LayerTranslator::defaultUnknownNdShape(v92, (uint64_t *)&v110);
  *(_QWORD *)&v117 = &v107;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  *(_QWORD *)&v117 = &v110;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
}

void sub_19C973F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *v63;
  uint64_t v64;

  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (*(char *)(v64 - 217) < 0)
    operator delete(*(void **)(v64 - 240));
  if (v63)
    operator delete(v63);
  if (a24)
    operator delete(a24);
  CoreML::Specification::ReduceMaxLayerParams::~ReduceMaxLayerParams((CoreML::Specification::ReduceMaxLayerParams *)&a27);
  a63 = (uint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a44 < 0)
    operator delete(a39);
  a63 = (uint64_t)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a57 < 0)
    operator delete(a52);
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceMin(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  std::string *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t **v10;
  char *v11;
  const void *v12;
  uint64_t v13;
  _BOOL4 v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int *v38;
  int v39;
  int v40;
  BOOL v42;
  _BOOL4 v43;
  _BOOL4 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  unint64_t i;
  std::string::size_type v49;
  size_t v50;
  std::string *v51;
  const void *v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type v56;
  char v57;
  std::string::size_type v58;
  std::string *v59;
  std::string *v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  std::string::size_type v64;
  char v65;
  std::string::size_type v66;
  size_t v67;
  std::string *v68;
  const void *v69;
  std::string::size_type v70;
  std::string *v71;
  std::string *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::string::size_type size;
  std::string *v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  std::string *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  char *v92;
  int v93;
  int v94;
  _QWORD *v95;
  __int128 v96;
  void *__p[3];
  void (**v98)(CoreML::Specification::ReduceMinLayerParams *__hidden);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int16 v102;
  int v103;
  std::string __str;
  std::string v105;
  std::string v106;
  __int128 *v107;
  __int128 *v108;
  uint64_t v109;
  __int128 *v110;
  __int128 *v111;
  uint64_t v112;
  std::string v113;
  std::string v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _BYTE v124[25];
  int v125;
  __int128 *v126;
  __int128 *v127;
  char *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  std::string *v135;
  std::string v136;
  uint64_t v137;
  std::string v138;
  uint64_t v139;
  std::string v140;
  __int128 v141;

  *(_QWORD *)&v141 = *MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v113, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v113.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v5;
  }
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v110, (uint64_t *)&v107, *((_QWORD *)this + 1));
  v95 = *(_QWORD **)this;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v106, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  else
    v106 = v113;
  memset(&v105, 0, sizeof(v105));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, v107, v108, 0xAAAAAAAAAAAAAAABLL * (((char *)v108 - (char *)v107) >> 3));
  memset(&__str, 0, sizeof(__str));
  v6 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v110, v111, 0xAAAAAAAAAAAAAAABLL * (((char *)v111 - (char *)v110) >> 3));
  if (*((_DWORD *)a2 + 35) == 1265)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v6);
    v7 = &CoreML::Specification::_ReduceMinLayerParams_default_instance_;
  }
  v100 = 0;
  v101 = 0;
  v98 = &off_1E3D52A10;
  v99 = 0;
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v100, v8);
    memcpy((void *)(v101 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v100) = *((_DWORD *)v7 + 4);
  }
  v103 = 0;
  v9 = v7[1];
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v99, v9 & 0xFFFFFFFFFFFFFFFELL);
  v102 = *((_WORD *)v7 + 18);
  v10 = (uint64_t **)*((_QWORD *)this + 1);
  v134.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
  v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v107, (__int128 **)&v134);
  v96 = *(_OWORD *)(v11 + 72);
  v12 = (const void *)*((_QWORD *)v11 + 12);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v12, *((_QWORD *)v11 + 13), (uint64_t)(*((_QWORD *)v11 + 13) - (_QWORD)v12) >> 2);
  v92 = (char *)this;
  v93 = v102;
  v13 = v100;
  v94 = HIBYTE(v102);
  v14 = HIBYTE(v102) != 0;
  if ((int)v100 >= 1)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = *(_DWORD *)(v101 + 8 * v18 + 8);
      if (v19 < 0)
      {
        if ((unint64_t)v16 >= v17)
        {
          v27 = v16 - v15;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v17 - (_QWORD)v15) >> 1 > v28)
            v28 = (uint64_t)(v17 - (_QWORD)v15) >> 1;
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v28;
          if (v24)
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          else
            v25 = 0;
          v29 = (_DWORD *)(v24 + 4 * v27);
          *v29 = v19;
          v26 = v29 + 1;
          while (v16 != v15)
          {
            v31 = *--v16;
            *--v29 = v31;
          }
          goto LABEL_49;
        }
      }
      else
      {
        v20 = DWORD1(v96);
        if ((_DWORD)v96 == 1)
          v21 = 4;
        else
          v21 = 5;
        if (DWORD1(v96) == -1)
          v20 = v21;
        v19 -= v20;
        if ((unint64_t)v16 >= v17)
        {
          v22 = v16 - v15;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v17 - (_QWORD)v15) >> 1 > v23)
            v23 = (uint64_t)(v17 - (_QWORD)v15) >> 1;
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          if (v24)
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          else
            v25 = 0;
          v29 = (_DWORD *)(v24 + 4 * v22);
          *v29 = v19;
          v26 = v29 + 1;
          while (v16 != v15)
          {
            v30 = *--v16;
            *--v29 = v30;
          }
LABEL_49:
          v17 = v24 + 4 * v25;
          if (v15)
            operator delete(v15);
          v15 = v29;
          goto LABEL_52;
        }
      }
      *v16 = v19;
      v26 = v16 + 1;
LABEL_52:
      ++v18;
      v16 = v26;
      if (v18 == v13)
        goto LABEL_55;
    }
  }
  v15 = 0;
  v26 = 0;
LABEL_55:
  std::__sort<std::__less<int,int> &,int *>();
  v32 = v26 - v15;
  v33 = DWORD1(v96);
  if ((_DWORD)v96 == 1)
    v34 = 4;
  else
    v34 = 5;
  if (DWORD1(v96) == -1)
    v33 = v34;
  if (!v94 && v33 == (_DWORD)v32)
  {
    if (v26 == v15)
    {
      v14 = 1;
    }
    else
    {
      if (v32 <= 1)
        v35 = 1;
      else
        v35 = v26 - v15;
      v36 = v35 - 1;
      v37 = -(int)v32;
      v38 = v15;
      do
      {
        v40 = *v38++;
        v39 = v40;
        v42 = v36-- != 0;
        v14 = v37 == v39;
        if (v37 != v39)
          break;
        ++v37;
      }
      while (v42);
    }
  }
  if (v32 == 3)
  {
    if (*v15 == -3 && v15[1] == -2)
    {
      v44 = 0;
      v43 = v15[2] == -1;
      goto LABEL_82;
    }
  }
  else if (v32 == 2 && *v15 == -2)
  {
    v43 = 0;
    v44 = v15[1] == -1;
    goto LABEL_82;
  }
  v44 = 0;
  v43 = 0;
LABEL_82:
  if (*(char *)(v105.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)v105.__r_.__value_.__l.__data_, *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v45 = *(_OWORD *)v105.__r_.__value_.__l.__data_;
    v134.__r_.__value_.__r.__words[2] = *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v45;
  }
  if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)__str.__r_.__value_.__l.__data_, *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v46 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
    v133.__r_.__value_.__r.__words[2] = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v46;
  }
  if (v14 || v44 || v43)
  {
    *((_QWORD *)&v117 + 1) = 0x100000007;
    v118 = 0uLL;
    *(_QWORD *)&v119 = 0xFFFFFFFF00000000;
    *(_QWORD *)&v117 = 0x358637BD0000000ALL;
    BYTE8(v119) = 0;
    if (v14 || v44)
    {
      if (v14)
        v47 = 31;
      else
        v47 = 3;
      DWORD2(v117) = v47;
    }
    memset(&v132, 0, sizeof(v132));
    std::string::operator=(&v133, (const std::string *)__str.__r_.__value_.__l.__data_);
    if (v93)
    {
      std::string::operator=(&v132, &v106);
    }
    else
    {
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
      else
        size = v133.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v131, size + 11);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v131;
      else
        v77 = (std::string *)v131.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = &v133;
        else
          v78 = (std::string *)v133.__r_.__value_.__r.__words[0];
        memmove(v77, v78, size);
      }
      strcpy((char *)v77 + size, "_presqueeze");
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v133.__r_.__value_.__l.__data_);
      v133 = v131;
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        v79 = v106.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v131, v79 + 11);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v131;
      else
        v80 = (std::string *)v131.__r_.__value_.__r.__words[0];
      if (v79)
      {
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = &v106;
        else
          v81 = (std::string *)v106.__r_.__value_.__r.__words[0];
        memmove(v80, v81, v79);
      }
      strcpy((char *)v80 + v79, "_presqueeze");
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
      v132 = v131;
    }
    std::string::basic_string[abi:ne180100]<0>(&v131, "reduce");
    memset(&v140, 0, sizeof(v140));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v140, (__int128 *)v105.__r_.__value_.__l.__data_, (__int128 *)v105.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v105.__r_.__value_.__l.__size_ - v105.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v138, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
    else
      v138 = v133;
    v127 = 0;
    v126 = 0;
    v128 = 0;
    v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
    v136.__r_.__value_.__s.__data_[8] = 0;
    v126 = (__int128 *)operator new(0x18uLL);
    v127 = v126;
    v128 = (char *)v126 + 24;
    v127 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v128, (__int128 *)&v138, (__int128 *)&v139, (std::string *)v126);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v129, v95, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v117, (__int128 *)v140.__r_.__value_.__l.__data_, (__int128 *)v140.__r_.__value_.__l.__size_, &v126);
    v82 = v130;
    if (v130)
    {
      p_shared_owners = (unint64_t *)&v130->__shared_owners_;
      do
        v84 = __ldaxr(p_shared_owners);
      while (__stlxr(v84 - 1, p_shared_owners));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v138.__r_.__value_.__l.__data_);
    v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v131.__r_.__value_.__l.__data_);
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v132.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((int)v13 < 1)
    {
      if (v93)
        goto LABEL_262;
      v123 = 0u;
      memset(v124, 0, sizeof(v124));
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v125 = 1;
      DWORD1(v117) = v13;
      goto LABEL_248;
    }
    for (i = 0; i != v13; ++i)
    {
      *((_QWORD *)&v117 + 1) = 0x100000007;
      v118 = 0uLL;
      LODWORD(v119) = 0;
      *(_QWORD *)&v117 = 0x358637BD0000000ALL;
      BYTE8(v119) = 1;
      DWORD1(v119) = *(_QWORD *)(v101 + 8 * i + 8);
      memset(&v132, 0, sizeof(v132));
      if (i >= (v13 - 1))
      {
        if (v93)
        {
          std::string::operator=(&v133, (const std::string *)__str.__r_.__value_.__l.__data_);
          std::string::operator=(&v132, &v106);
        }
        else
        {
          v66 = __str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) >= 0)
            v67 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
          else
            v67 = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8);
          std::string::basic_string[abi:ne180100]((uint64_t)&v131, v67 + 11);
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v68 = &v131;
          else
            v68 = (std::string *)v131.__r_.__value_.__r.__words[0];
          if (v67)
          {
            if (*(char *)(v66 + 23) >= 0)
              v69 = (const void *)v66;
            else
              v69 = *(const void **)v66;
            memmove(v68, v69, v67);
          }
          strcpy((char *)v68 + v67, "_presqueeze");
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v133.__r_.__value_.__l.__data_);
          v133 = v131;
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v70 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
          else
            v70 = v106.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v131, v70 + 11);
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = &v131;
          else
            v71 = (std::string *)v131.__r_.__value_.__r.__words[0];
          if (v70)
          {
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v72 = &v106;
            else
              v72 = (std::string *)v106.__r_.__value_.__r.__words[0];
            memmove(v71, v72, v70);
          }
          strcpy((char *)v71 + v70, "_presqueeze");
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v132.__r_.__value_.__l.__data_);
          v132 = v131;
        }
      }
      else
      {
        v49 = v105.__r_.__value_.__r.__words[0];
        if (*(char *)(v105.__r_.__value_.__r.__words[0] + 23) >= 0)
          v50 = *(unsigned __int8 *)(v105.__r_.__value_.__r.__words[0] + 23);
        else
          v50 = *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v131, v50 + 18);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v131;
        else
          v51 = (std::string *)v131.__r_.__value_.__r.__words[0];
        if (v50)
        {
          if (*(char *)(v49 + 23) >= 0)
            v52 = (const void *)v49;
          else
            v52 = *(const void **)v49;
          memmove(v51, v52, v50);
        }
        strcpy((char *)v51 + v50, "__reduction_axis__");
        std::to_string(&v140, i + 1);
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &v140;
        else
          v53 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v54 = v140.__r_.__value_.__l.__size_;
        v55 = std::string::append(&v131, (const std::string::value_type *)v53, v54);
        v56 = v55->__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = v55->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
        v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v133.__r_.__value_.__l.__data_);
        v133.__r_.__value_.__r.__words[0] = v56;
        v133.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v133.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v133.__r_.__value_.__s + 23) = v57;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
        else
          v58 = v106.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v131, v58 + 18);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = &v131;
        else
          v59 = (std::string *)v131.__r_.__value_.__r.__words[0];
        if (v58)
        {
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v60 = &v106;
          else
            v60 = (std::string *)v106.__r_.__value_.__r.__words[0];
          memmove(v59, v60, v58);
        }
        strcpy((char *)v59 + v58, "__reduction_axis__");
        std::to_string(&v140, i);
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v140;
        else
          v61 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v62 = v140.__r_.__value_.__l.__size_;
        v63 = std::string::append(&v131, (const std::string::value_type *)v61, v62);
        v64 = v63->__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = v63->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7);
        v65 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v132.__r_.__value_.__l.__data_);
        v132.__r_.__value_.__r.__words[0] = v64;
        v132.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v132.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v132.__r_.__value_.__s + 23) = v65;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v131, "reduce");
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v140, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
      else
        v140 = v134;
      v127 = 0;
      v126 = 0;
      v128 = 0;
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
      v136.__r_.__value_.__s.__data_[8] = 0;
      v126 = (__int128 *)operator new(0x18uLL);
      v127 = v126;
      v128 = (char *)v126 + 24;
      v127 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v128, (__int128 *)&v140, &v141, (std::string *)v126);
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v136, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
      else
        v136 = v133;
      memset(&v138, 0, sizeof(v138));
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      v114.__r_.__value_.__s.__data_[8] = 0;
      v138.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v138.__r_.__value_.__l.__size_ = v138.__r_.__value_.__r.__words[0];
      v138.__r_.__value_.__r.__words[2] = v138.__r_.__value_.__r.__words[0] + 24;
      v138.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v138.__r_.__value_.__r.__words[2], (__int128 *)&v136, (__int128 *)&v137, (std::string *)v138.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v129, v95, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v117, v126, v127, (__int128 **)&v138);
      v73 = v130;
      if (v130)
      {
        v74 = (unint64_t *)&v130->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131.__r_.__value_.__l.__data_);
      std::string::operator=(&v134, &v133);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
    }
  }
  if (v93)
    goto LABEL_262;
  v123 = 0u;
  memset(v124, 0, sizeof(v124));
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v125 = 1;
  if ((int)v13 >= 32)
    LODWORD(v85) = 32;
  else
    LODWORD(v85) = v13;
  DWORD1(v117) = v85;
  if ((int)v13 >= 1)
  {
    if ((int)v85 <= 1)
      v85 = 1;
    else
      v85 = v85;
    v86 = (_DWORD *)&v117 + 2;
    v87 = (uint64_t *)(v101 + 8);
    do
    {
      v88 = *v87++;
      *v86++ = v88;
      --v85;
    }
    while (v85);
  }
LABEL_248:
  if (HIBYTE(v102))
    v124[24] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v132, "squeeze");
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v136, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v136 = v133;
  memset(&v131, 0, sizeof(v131));
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
  v114.__r_.__value_.__s.__data_[8] = 0;
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v131.__r_.__value_.__l.__size_ = v131.__r_.__value_.__r.__words[0];
  v131.__r_.__value_.__r.__words[2] = v131.__r_.__value_.__r.__words[0] + 24;
  v131.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v131.__r_.__value_.__r.__words[2], (__int128 *)&v136, (__int128 *)&v137, (std::string *)v131.__r_.__value_.__l.__data_);
  memset(&v114, 0, sizeof(v114));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v114, (__int128 *)__str.__r_.__value_.__l.__data_, (__int128 *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v115, v95, (uint64_t)&v132, (uint64_t)&v106, (uint64_t)&v117, (__int128 *)v131.__r_.__value_.__l.__data_, (__int128 *)v131.__r_.__value_.__l.__size_, (__int128 **)&v114);
  v89 = v116;
  if (v116)
  {
    v90 = (unint64_t *)&v116->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v135 = &v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  v135 = &v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
LABEL_262:
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  if (v15)
    operator delete(v15);
  if (__p[0])
    operator delete(__p[0]);
  CoreML::Specification::ReduceMinLayerParams::~ReduceMinLayerParams((CoreML::Specification::ReduceMinLayerParams *)&v98);
  *(_QWORD *)&v117 = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  *(_QWORD *)&v117 = &v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  LayerTranslator::defaultUnknownNdShape(v92, (uint64_t *)&v110);
  *(_QWORD *)&v117 = &v107;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  *(_QWORD *)&v117 = &v110;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
}

void sub_19C975278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *v63;
  uint64_t v64;

  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (*(char *)(v64 - 217) < 0)
    operator delete(*(void **)(v64 - 240));
  if (v63)
    operator delete(v63);
  if (a24)
    operator delete(a24);
  CoreML::Specification::ReduceMinLayerParams::~ReduceMinLayerParams((CoreML::Specification::ReduceMinLayerParams *)&a27);
  a63 = (uint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a44 < 0)
    operator delete(a39);
  a63 = (uint64_t)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a57 < 0)
    operator delete(a52);
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceSum(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  std::string *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t **v10;
  char *v11;
  const void *v12;
  uint64_t v13;
  _BOOL4 v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int *v38;
  int v39;
  int v40;
  BOOL v42;
  _BOOL4 v43;
  _BOOL4 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  unint64_t i;
  std::string::size_type v49;
  size_t v50;
  std::string *v51;
  const void *v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type v56;
  char v57;
  std::string::size_type v58;
  std::string *v59;
  std::string *v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  std::string::size_type v64;
  char v65;
  std::string::size_type v66;
  size_t v67;
  std::string *v68;
  const void *v69;
  std::string::size_type v70;
  std::string *v71;
  std::string *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::string::size_type size;
  std::string *v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  std::string *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  char *v92;
  int v93;
  int v94;
  _QWORD *v95;
  __int128 v96;
  void *__p[3];
  void (**v98)(CoreML::Specification::ReduceSumLayerParams *__hidden);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int16 v102;
  int v103;
  std::string __str;
  std::string v105;
  std::string v106;
  __int128 *v107;
  __int128 *v108;
  uint64_t v109;
  __int128 *v110;
  __int128 *v111;
  uint64_t v112;
  std::string v113;
  std::string v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _BYTE v124[25];
  int v125;
  __int128 *v126;
  __int128 *v127;
  char *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  std::string *v135;
  std::string v136;
  uint64_t v137;
  std::string v138;
  uint64_t v139;
  std::string v140;
  __int128 v141;

  *(_QWORD *)&v141 = *MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v113, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v113.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v5;
  }
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v110, (uint64_t *)&v107, *((_QWORD *)this + 1));
  v95 = *(_QWORD **)this;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v106, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  else
    v106 = v113;
  memset(&v105, 0, sizeof(v105));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, v107, v108, 0xAAAAAAAAAAAAAAABLL * (((char *)v108 - (char *)v107) >> 3));
  memset(&__str, 0, sizeof(__str));
  v6 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v110, v111, 0xAAAAAAAAAAAAAAABLL * (((char *)v111 - (char *)v110) >> 3));
  if (*((_DWORD *)a2 + 35) == 1270)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v6);
    v7 = &CoreML::Specification::_ReduceSumLayerParams_default_instance_;
  }
  v100 = 0;
  v101 = 0;
  v98 = &off_1E3D52AA8;
  v99 = 0;
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v100, v8);
    memcpy((void *)(v101 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v100) = *((_DWORD *)v7 + 4);
  }
  v103 = 0;
  v9 = v7[1];
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v99, v9 & 0xFFFFFFFFFFFFFFFELL);
  v102 = *((_WORD *)v7 + 18);
  v10 = (uint64_t **)*((_QWORD *)this + 1);
  v134.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
  v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v107, (__int128 **)&v134);
  v96 = *(_OWORD *)(v11 + 72);
  v12 = (const void *)*((_QWORD *)v11 + 12);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v12, *((_QWORD *)v11 + 13), (uint64_t)(*((_QWORD *)v11 + 13) - (_QWORD)v12) >> 2);
  v92 = (char *)this;
  v93 = v102;
  v13 = v100;
  v94 = HIBYTE(v102);
  v14 = HIBYTE(v102) != 0;
  if ((int)v100 >= 1)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = *(_DWORD *)(v101 + 8 * v18 + 8);
      if (v19 < 0)
      {
        if ((unint64_t)v16 >= v17)
        {
          v27 = v16 - v15;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v17 - (_QWORD)v15) >> 1 > v28)
            v28 = (uint64_t)(v17 - (_QWORD)v15) >> 1;
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v28;
          if (v24)
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          else
            v25 = 0;
          v29 = (_DWORD *)(v24 + 4 * v27);
          *v29 = v19;
          v26 = v29 + 1;
          while (v16 != v15)
          {
            v31 = *--v16;
            *--v29 = v31;
          }
          goto LABEL_49;
        }
      }
      else
      {
        v20 = DWORD1(v96);
        if ((_DWORD)v96 == 1)
          v21 = 4;
        else
          v21 = 5;
        if (DWORD1(v96) == -1)
          v20 = v21;
        v19 -= v20;
        if ((unint64_t)v16 >= v17)
        {
          v22 = v16 - v15;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v17 - (_QWORD)v15) >> 1 > v23)
            v23 = (uint64_t)(v17 - (_QWORD)v15) >> 1;
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          if (v24)
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          else
            v25 = 0;
          v29 = (_DWORD *)(v24 + 4 * v22);
          *v29 = v19;
          v26 = v29 + 1;
          while (v16 != v15)
          {
            v30 = *--v16;
            *--v29 = v30;
          }
LABEL_49:
          v17 = v24 + 4 * v25;
          if (v15)
            operator delete(v15);
          v15 = v29;
          goto LABEL_52;
        }
      }
      *v16 = v19;
      v26 = v16 + 1;
LABEL_52:
      ++v18;
      v16 = v26;
      if (v18 == v13)
        goto LABEL_55;
    }
  }
  v15 = 0;
  v26 = 0;
LABEL_55:
  std::__sort<std::__less<int,int> &,int *>();
  v32 = v26 - v15;
  v33 = DWORD1(v96);
  if ((_DWORD)v96 == 1)
    v34 = 4;
  else
    v34 = 5;
  if (DWORD1(v96) == -1)
    v33 = v34;
  if (!v94 && v33 == (_DWORD)v32)
  {
    if (v26 == v15)
    {
      v14 = 1;
    }
    else
    {
      if (v32 <= 1)
        v35 = 1;
      else
        v35 = v26 - v15;
      v36 = v35 - 1;
      v37 = -(int)v32;
      v38 = v15;
      do
      {
        v40 = *v38++;
        v39 = v40;
        v42 = v36-- != 0;
        v14 = v37 == v39;
        if (v37 != v39)
          break;
        ++v37;
      }
      while (v42);
    }
  }
  if (v32 == 3)
  {
    if (*v15 == -3 && v15[1] == -2)
    {
      v44 = 0;
      v43 = v15[2] == -1;
      goto LABEL_82;
    }
  }
  else if (v32 == 2 && *v15 == -2)
  {
    v43 = 0;
    v44 = v15[1] == -1;
    goto LABEL_82;
  }
  v44 = 0;
  v43 = 0;
LABEL_82:
  if (*(char *)(v105.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)v105.__r_.__value_.__l.__data_, *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v45 = *(_OWORD *)v105.__r_.__value_.__l.__data_;
    v134.__r_.__value_.__r.__words[2] = *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v45;
  }
  if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)__str.__r_.__value_.__l.__data_, *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v46 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
    v133.__r_.__value_.__r.__words[2] = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v46;
  }
  if (v14 || v44 || v43)
  {
    *((_QWORD *)&v117 + 1) = 0x100000007;
    v118 = 0uLL;
    *(_QWORD *)&v119 = 0xFFFFFFFF00000000;
    *(_QWORD *)&v117 = 0x358637BD00000000;
    BYTE8(v119) = 0;
    if (v14 || v44)
    {
      if (v14)
        v47 = 31;
      else
        v47 = 3;
      DWORD2(v117) = v47;
    }
    memset(&v132, 0, sizeof(v132));
    std::string::operator=(&v133, (const std::string *)__str.__r_.__value_.__l.__data_);
    if (v93)
    {
      std::string::operator=(&v132, &v106);
    }
    else
    {
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
      else
        size = v133.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v131, size + 11);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v131;
      else
        v77 = (std::string *)v131.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = &v133;
        else
          v78 = (std::string *)v133.__r_.__value_.__r.__words[0];
        memmove(v77, v78, size);
      }
      strcpy((char *)v77 + size, "_presqueeze");
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v133.__r_.__value_.__l.__data_);
      v133 = v131;
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        v79 = v106.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v131, v79 + 11);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v131;
      else
        v80 = (std::string *)v131.__r_.__value_.__r.__words[0];
      if (v79)
      {
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = &v106;
        else
          v81 = (std::string *)v106.__r_.__value_.__r.__words[0];
        memmove(v80, v81, v79);
      }
      strcpy((char *)v80 + v79, "_presqueeze");
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
      v132 = v131;
    }
    std::string::basic_string[abi:ne180100]<0>(&v131, "reduce");
    memset(&v140, 0, sizeof(v140));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v140, (__int128 *)v105.__r_.__value_.__l.__data_, (__int128 *)v105.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v105.__r_.__value_.__l.__size_ - v105.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v138, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
    else
      v138 = v133;
    v127 = 0;
    v126 = 0;
    v128 = 0;
    v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
    v136.__r_.__value_.__s.__data_[8] = 0;
    v126 = (__int128 *)operator new(0x18uLL);
    v127 = v126;
    v128 = (char *)v126 + 24;
    v127 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v128, (__int128 *)&v138, (__int128 *)&v139, (std::string *)v126);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v129, v95, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v117, (__int128 *)v140.__r_.__value_.__l.__data_, (__int128 *)v140.__r_.__value_.__l.__size_, &v126);
    v82 = v130;
    if (v130)
    {
      p_shared_owners = (unint64_t *)&v130->__shared_owners_;
      do
        v84 = __ldaxr(p_shared_owners);
      while (__stlxr(v84 - 1, p_shared_owners));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v138.__r_.__value_.__l.__data_);
    v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v131.__r_.__value_.__l.__data_);
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v132.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((int)v13 < 1)
    {
      if (v93)
        goto LABEL_262;
      v123 = 0u;
      memset(v124, 0, sizeof(v124));
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v125 = 1;
      DWORD1(v117) = v13;
      goto LABEL_248;
    }
    for (i = 0; i != v13; ++i)
    {
      *((_QWORD *)&v117 + 1) = 0x100000007;
      v118 = 0uLL;
      LODWORD(v119) = 0;
      *(_QWORD *)&v117 = 0x358637BD00000000;
      BYTE8(v119) = 1;
      DWORD1(v119) = *(_QWORD *)(v101 + 8 * i + 8);
      memset(&v132, 0, sizeof(v132));
      if (i >= (v13 - 1))
      {
        if (v93)
        {
          std::string::operator=(&v133, (const std::string *)__str.__r_.__value_.__l.__data_);
          std::string::operator=(&v132, &v106);
        }
        else
        {
          v66 = __str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) >= 0)
            v67 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
          else
            v67 = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8);
          std::string::basic_string[abi:ne180100]((uint64_t)&v131, v67 + 11);
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v68 = &v131;
          else
            v68 = (std::string *)v131.__r_.__value_.__r.__words[0];
          if (v67)
          {
            if (*(char *)(v66 + 23) >= 0)
              v69 = (const void *)v66;
            else
              v69 = *(const void **)v66;
            memmove(v68, v69, v67);
          }
          strcpy((char *)v68 + v67, "_presqueeze");
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v133.__r_.__value_.__l.__data_);
          v133 = v131;
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v70 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
          else
            v70 = v106.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v131, v70 + 11);
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = &v131;
          else
            v71 = (std::string *)v131.__r_.__value_.__r.__words[0];
          if (v70)
          {
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v72 = &v106;
            else
              v72 = (std::string *)v106.__r_.__value_.__r.__words[0];
            memmove(v71, v72, v70);
          }
          strcpy((char *)v71 + v70, "_presqueeze");
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v132.__r_.__value_.__l.__data_);
          v132 = v131;
        }
      }
      else
      {
        v49 = v105.__r_.__value_.__r.__words[0];
        if (*(char *)(v105.__r_.__value_.__r.__words[0] + 23) >= 0)
          v50 = *(unsigned __int8 *)(v105.__r_.__value_.__r.__words[0] + 23);
        else
          v50 = *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v131, v50 + 18);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v131;
        else
          v51 = (std::string *)v131.__r_.__value_.__r.__words[0];
        if (v50)
        {
          if (*(char *)(v49 + 23) >= 0)
            v52 = (const void *)v49;
          else
            v52 = *(const void **)v49;
          memmove(v51, v52, v50);
        }
        strcpy((char *)v51 + v50, "__reduction_axis__");
        std::to_string(&v140, i + 1);
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &v140;
        else
          v53 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v54 = v140.__r_.__value_.__l.__size_;
        v55 = std::string::append(&v131, (const std::string::value_type *)v53, v54);
        v56 = v55->__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = v55->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
        v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v133.__r_.__value_.__l.__data_);
        v133.__r_.__value_.__r.__words[0] = v56;
        v133.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v133.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v133.__r_.__value_.__s + 23) = v57;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
        else
          v58 = v106.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v131, v58 + 18);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = &v131;
        else
          v59 = (std::string *)v131.__r_.__value_.__r.__words[0];
        if (v58)
        {
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v60 = &v106;
          else
            v60 = (std::string *)v106.__r_.__value_.__r.__words[0];
          memmove(v59, v60, v58);
        }
        strcpy((char *)v59 + v58, "__reduction_axis__");
        std::to_string(&v140, i);
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v140;
        else
          v61 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v62 = v140.__r_.__value_.__l.__size_;
        v63 = std::string::append(&v131, (const std::string::value_type *)v61, v62);
        v64 = v63->__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = v63->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7);
        v65 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v132.__r_.__value_.__l.__data_);
        v132.__r_.__value_.__r.__words[0] = v64;
        v132.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v132.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v132.__r_.__value_.__s + 23) = v65;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v131, "reduce");
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v140, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
      else
        v140 = v134;
      v127 = 0;
      v126 = 0;
      v128 = 0;
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
      v136.__r_.__value_.__s.__data_[8] = 0;
      v126 = (__int128 *)operator new(0x18uLL);
      v127 = v126;
      v128 = (char *)v126 + 24;
      v127 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v128, (__int128 *)&v140, &v141, (std::string *)v126);
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v136, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
      else
        v136 = v133;
      memset(&v138, 0, sizeof(v138));
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      v114.__r_.__value_.__s.__data_[8] = 0;
      v138.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v138.__r_.__value_.__l.__size_ = v138.__r_.__value_.__r.__words[0];
      v138.__r_.__value_.__r.__words[2] = v138.__r_.__value_.__r.__words[0] + 24;
      v138.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v138.__r_.__value_.__r.__words[2], (__int128 *)&v136, (__int128 *)&v137, (std::string *)v138.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v129, v95, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v117, v126, v127, (__int128 **)&v138);
      v73 = v130;
      if (v130)
      {
        v74 = (unint64_t *)&v130->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131.__r_.__value_.__l.__data_);
      std::string::operator=(&v134, &v133);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
    }
  }
  if (v93)
    goto LABEL_262;
  v123 = 0u;
  memset(v124, 0, sizeof(v124));
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v125 = 1;
  if ((int)v13 >= 32)
    LODWORD(v85) = 32;
  else
    LODWORD(v85) = v13;
  DWORD1(v117) = v85;
  if ((int)v13 >= 1)
  {
    if ((int)v85 <= 1)
      v85 = 1;
    else
      v85 = v85;
    v86 = (_DWORD *)&v117 + 2;
    v87 = (uint64_t *)(v101 + 8);
    do
    {
      v88 = *v87++;
      *v86++ = v88;
      --v85;
    }
    while (v85);
  }
LABEL_248:
  if (HIBYTE(v102))
    v124[24] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v132, "squeeze");
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v136, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v136 = v133;
  memset(&v131, 0, sizeof(v131));
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
  v114.__r_.__value_.__s.__data_[8] = 0;
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v131.__r_.__value_.__l.__size_ = v131.__r_.__value_.__r.__words[0];
  v131.__r_.__value_.__r.__words[2] = v131.__r_.__value_.__r.__words[0] + 24;
  v131.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v131.__r_.__value_.__r.__words[2], (__int128 *)&v136, (__int128 *)&v137, (std::string *)v131.__r_.__value_.__l.__data_);
  memset(&v114, 0, sizeof(v114));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v114, (__int128 *)__str.__r_.__value_.__l.__data_, (__int128 *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v115, v95, (uint64_t)&v132, (uint64_t)&v106, (uint64_t)&v117, (__int128 *)v131.__r_.__value_.__l.__data_, (__int128 *)v131.__r_.__value_.__l.__size_, (__int128 **)&v114);
  v89 = v116;
  if (v116)
  {
    v90 = (unint64_t *)&v116->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v135 = &v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  v135 = &v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
LABEL_262:
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  if (v15)
    operator delete(v15);
  if (__p[0])
    operator delete(__p[0]);
  CoreML::Specification::ReduceSumLayerParams::~ReduceSumLayerParams((CoreML::Specification::ReduceSumLayerParams *)&v98);
  *(_QWORD *)&v117 = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  *(_QWORD *)&v117 = &v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  LayerTranslator::defaultUnknownNdShape(v92, (uint64_t *)&v110);
  *(_QWORD *)&v117 = &v107;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  *(_QWORD *)&v117 = &v110;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
}

void sub_19C9765C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *v63;
  uint64_t v64;

  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (*(char *)(v64 - 217) < 0)
    operator delete(*(void **)(v64 - 240));
  if (v63)
    operator delete(v63);
  if (a24)
    operator delete(a24);
  CoreML::Specification::ReduceSumLayerParams::~ReduceSumLayerParams((CoreML::Specification::ReduceSumLayerParams *)&a27);
  a63 = (uint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a44 < 0)
    operator delete(a39);
  a63 = (uint64_t)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a57 < 0)
    operator delete(a52);
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceProd(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  std::string *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t **v10;
  char *v11;
  const void *v12;
  uint64_t v13;
  _BOOL4 v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int *v38;
  int v39;
  int v40;
  BOOL v42;
  _BOOL4 v43;
  _BOOL4 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  unint64_t i;
  std::string::size_type v49;
  size_t v50;
  std::string *v51;
  const void *v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type v56;
  char v57;
  std::string::size_type v58;
  std::string *v59;
  std::string *v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  std::string::size_type v64;
  char v65;
  std::string::size_type v66;
  size_t v67;
  std::string *v68;
  const void *v69;
  std::string::size_type v70;
  std::string *v71;
  std::string *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::string::size_type size;
  std::string *v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  std::string *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  char *v92;
  int v93;
  int v94;
  _QWORD *v95;
  __int128 v96;
  void *__p[3];
  void (**v98)(CoreML::Specification::ReduceProdLayerParams *__hidden);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int16 v102;
  int v103;
  std::string __str;
  std::string v105;
  std::string v106;
  __int128 *v107;
  __int128 *v108;
  uint64_t v109;
  __int128 *v110;
  __int128 *v111;
  uint64_t v112;
  std::string v113;
  std::string v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _BYTE v124[25];
  int v125;
  __int128 *v126;
  __int128 *v127;
  char *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  std::string *v135;
  std::string v136;
  uint64_t v137;
  std::string v138;
  uint64_t v139;
  std::string v140;
  __int128 v141;

  *(_QWORD *)&v141 = *MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v113, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v113.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v5;
  }
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v110, (uint64_t *)&v107, *((_QWORD *)this + 1));
  v95 = *(_QWORD **)this;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v106, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  else
    v106 = v113;
  memset(&v105, 0, sizeof(v105));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, v107, v108, 0xAAAAAAAAAAAAAAABLL * (((char *)v108 - (char *)v107) >> 3));
  memset(&__str, 0, sizeof(__str));
  v6 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v110, v111, 0xAAAAAAAAAAAAAAABLL * (((char *)v111 - (char *)v110) >> 3));
  if (*((_DWORD *)a2 + 35) == 1275)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v6);
    v7 = &CoreML::Specification::_ReduceProdLayerParams_default_instance_;
  }
  v100 = 0;
  v101 = 0;
  v98 = &off_1E3D53558;
  v99 = 0;
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v100, v8);
    memcpy((void *)(v101 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v100) = *((_DWORD *)v7 + 4);
  }
  v103 = 0;
  v9 = v7[1];
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v99, v9 & 0xFFFFFFFFFFFFFFFELL);
  v102 = *((_WORD *)v7 + 18);
  v10 = (uint64_t **)*((_QWORD *)this + 1);
  v134.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
  v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v107, (__int128 **)&v134);
  v96 = *(_OWORD *)(v11 + 72);
  v12 = (const void *)*((_QWORD *)v11 + 12);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v12, *((_QWORD *)v11 + 13), (uint64_t)(*((_QWORD *)v11 + 13) - (_QWORD)v12) >> 2);
  v92 = (char *)this;
  v93 = v102;
  v13 = v100;
  v94 = HIBYTE(v102);
  v14 = HIBYTE(v102) != 0;
  if ((int)v100 >= 1)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = *(_DWORD *)(v101 + 8 * v18 + 8);
      if (v19 < 0)
      {
        if ((unint64_t)v16 >= v17)
        {
          v27 = v16 - v15;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v17 - (_QWORD)v15) >> 1 > v28)
            v28 = (uint64_t)(v17 - (_QWORD)v15) >> 1;
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v28;
          if (v24)
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          else
            v25 = 0;
          v29 = (_DWORD *)(v24 + 4 * v27);
          *v29 = v19;
          v26 = v29 + 1;
          while (v16 != v15)
          {
            v31 = *--v16;
            *--v29 = v31;
          }
          goto LABEL_49;
        }
      }
      else
      {
        v20 = DWORD1(v96);
        if ((_DWORD)v96 == 1)
          v21 = 4;
        else
          v21 = 5;
        if (DWORD1(v96) == -1)
          v20 = v21;
        v19 -= v20;
        if ((unint64_t)v16 >= v17)
        {
          v22 = v16 - v15;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v17 - (_QWORD)v15) >> 1 > v23)
            v23 = (uint64_t)(v17 - (_QWORD)v15) >> 1;
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          if (v24)
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          else
            v25 = 0;
          v29 = (_DWORD *)(v24 + 4 * v22);
          *v29 = v19;
          v26 = v29 + 1;
          while (v16 != v15)
          {
            v30 = *--v16;
            *--v29 = v30;
          }
LABEL_49:
          v17 = v24 + 4 * v25;
          if (v15)
            operator delete(v15);
          v15 = v29;
          goto LABEL_52;
        }
      }
      *v16 = v19;
      v26 = v16 + 1;
LABEL_52:
      ++v18;
      v16 = v26;
      if (v18 == v13)
        goto LABEL_55;
    }
  }
  v15 = 0;
  v26 = 0;
LABEL_55:
  std::__sort<std::__less<int,int> &,int *>();
  v32 = v26 - v15;
  v33 = DWORD1(v96);
  if ((_DWORD)v96 == 1)
    v34 = 4;
  else
    v34 = 5;
  if (DWORD1(v96) == -1)
    v33 = v34;
  if (!v94 && v33 == (_DWORD)v32)
  {
    if (v26 == v15)
    {
      v14 = 1;
    }
    else
    {
      if (v32 <= 1)
        v35 = 1;
      else
        v35 = v26 - v15;
      v36 = v35 - 1;
      v37 = -(int)v32;
      v38 = v15;
      do
      {
        v40 = *v38++;
        v39 = v40;
        v42 = v36-- != 0;
        v14 = v37 == v39;
        if (v37 != v39)
          break;
        ++v37;
      }
      while (v42);
    }
  }
  if (v32 == 3)
  {
    if (*v15 == -3 && v15[1] == -2)
    {
      v44 = 0;
      v43 = v15[2] == -1;
      goto LABEL_82;
    }
  }
  else if (v32 == 2 && *v15 == -2)
  {
    v43 = 0;
    v44 = v15[1] == -1;
    goto LABEL_82;
  }
  v44 = 0;
  v43 = 0;
LABEL_82:
  if (*(char *)(v105.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)v105.__r_.__value_.__l.__data_, *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v45 = *(_OWORD *)v105.__r_.__value_.__l.__data_;
    v134.__r_.__value_.__r.__words[2] = *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v45;
  }
  if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)__str.__r_.__value_.__l.__data_, *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v46 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
    v133.__r_.__value_.__r.__words[2] = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v46;
  }
  if (v14 || v44 || v43)
  {
    *((_QWORD *)&v117 + 1) = 0x100000007;
    v118 = 0uLL;
    *(_QWORD *)&v119 = 0xFFFFFFFF00000000;
    *(_QWORD *)&v117 = 0x358637BD00000002;
    BYTE8(v119) = 0;
    if (v14 || v44)
    {
      if (v14)
        v47 = 31;
      else
        v47 = 3;
      DWORD2(v117) = v47;
    }
    memset(&v132, 0, sizeof(v132));
    std::string::operator=(&v133, (const std::string *)__str.__r_.__value_.__l.__data_);
    if (v93)
    {
      std::string::operator=(&v132, &v106);
    }
    else
    {
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
      else
        size = v133.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v131, size + 11);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v131;
      else
        v77 = (std::string *)v131.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = &v133;
        else
          v78 = (std::string *)v133.__r_.__value_.__r.__words[0];
        memmove(v77, v78, size);
      }
      strcpy((char *)v77 + size, "_presqueeze");
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v133.__r_.__value_.__l.__data_);
      v133 = v131;
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        v79 = v106.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v131, v79 + 11);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v131;
      else
        v80 = (std::string *)v131.__r_.__value_.__r.__words[0];
      if (v79)
      {
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = &v106;
        else
          v81 = (std::string *)v106.__r_.__value_.__r.__words[0];
        memmove(v80, v81, v79);
      }
      strcpy((char *)v80 + v79, "_presqueeze");
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
      v132 = v131;
    }
    std::string::basic_string[abi:ne180100]<0>(&v131, "reduce");
    memset(&v140, 0, sizeof(v140));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v140, (__int128 *)v105.__r_.__value_.__l.__data_, (__int128 *)v105.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v105.__r_.__value_.__l.__size_ - v105.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v138, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
    else
      v138 = v133;
    v127 = 0;
    v126 = 0;
    v128 = 0;
    v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
    v136.__r_.__value_.__s.__data_[8] = 0;
    v126 = (__int128 *)operator new(0x18uLL);
    v127 = v126;
    v128 = (char *)v126 + 24;
    v127 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v128, (__int128 *)&v138, (__int128 *)&v139, (std::string *)v126);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v129, v95, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v117, (__int128 *)v140.__r_.__value_.__l.__data_, (__int128 *)v140.__r_.__value_.__l.__size_, &v126);
    v82 = v130;
    if (v130)
    {
      p_shared_owners = (unint64_t *)&v130->__shared_owners_;
      do
        v84 = __ldaxr(p_shared_owners);
      while (__stlxr(v84 - 1, p_shared_owners));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v138.__r_.__value_.__l.__data_);
    v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v131.__r_.__value_.__l.__data_);
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v132.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((int)v13 < 1)
    {
      if (v93)
        goto LABEL_262;
      v123 = 0u;
      memset(v124, 0, sizeof(v124));
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v125 = 1;
      DWORD1(v117) = v13;
      goto LABEL_248;
    }
    for (i = 0; i != v13; ++i)
    {
      *((_QWORD *)&v117 + 1) = 0x100000007;
      v118 = 0uLL;
      LODWORD(v119) = 0;
      *(_QWORD *)&v117 = 0x358637BD00000002;
      BYTE8(v119) = 1;
      DWORD1(v119) = *(_QWORD *)(v101 + 8 * i + 8);
      memset(&v132, 0, sizeof(v132));
      if (i >= (v13 - 1))
      {
        if (v93)
        {
          std::string::operator=(&v133, (const std::string *)__str.__r_.__value_.__l.__data_);
          std::string::operator=(&v132, &v106);
        }
        else
        {
          v66 = __str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) >= 0)
            v67 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
          else
            v67 = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8);
          std::string::basic_string[abi:ne180100]((uint64_t)&v131, v67 + 11);
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v68 = &v131;
          else
            v68 = (std::string *)v131.__r_.__value_.__r.__words[0];
          if (v67)
          {
            if (*(char *)(v66 + 23) >= 0)
              v69 = (const void *)v66;
            else
              v69 = *(const void **)v66;
            memmove(v68, v69, v67);
          }
          strcpy((char *)v68 + v67, "_presqueeze");
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v133.__r_.__value_.__l.__data_);
          v133 = v131;
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v70 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
          else
            v70 = v106.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v131, v70 + 11);
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = &v131;
          else
            v71 = (std::string *)v131.__r_.__value_.__r.__words[0];
          if (v70)
          {
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v72 = &v106;
            else
              v72 = (std::string *)v106.__r_.__value_.__r.__words[0];
            memmove(v71, v72, v70);
          }
          strcpy((char *)v71 + v70, "_presqueeze");
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v132.__r_.__value_.__l.__data_);
          v132 = v131;
        }
      }
      else
      {
        v49 = v105.__r_.__value_.__r.__words[0];
        if (*(char *)(v105.__r_.__value_.__r.__words[0] + 23) >= 0)
          v50 = *(unsigned __int8 *)(v105.__r_.__value_.__r.__words[0] + 23);
        else
          v50 = *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v131, v50 + 18);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v131;
        else
          v51 = (std::string *)v131.__r_.__value_.__r.__words[0];
        if (v50)
        {
          if (*(char *)(v49 + 23) >= 0)
            v52 = (const void *)v49;
          else
            v52 = *(const void **)v49;
          memmove(v51, v52, v50);
        }
        strcpy((char *)v51 + v50, "__reduction_axis__");
        std::to_string(&v140, i + 1);
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &v140;
        else
          v53 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v54 = v140.__r_.__value_.__l.__size_;
        v55 = std::string::append(&v131, (const std::string::value_type *)v53, v54);
        v56 = v55->__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = v55->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
        v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v133.__r_.__value_.__l.__data_);
        v133.__r_.__value_.__r.__words[0] = v56;
        v133.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v133.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v133.__r_.__value_.__s + 23) = v57;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
        else
          v58 = v106.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v131, v58 + 18);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = &v131;
        else
          v59 = (std::string *)v131.__r_.__value_.__r.__words[0];
        if (v58)
        {
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v60 = &v106;
          else
            v60 = (std::string *)v106.__r_.__value_.__r.__words[0];
          memmove(v59, v60, v58);
        }
        strcpy((char *)v59 + v58, "__reduction_axis__");
        std::to_string(&v140, i);
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v140;
        else
          v61 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v62 = v140.__r_.__value_.__l.__size_;
        v63 = std::string::append(&v131, (const std::string::value_type *)v61, v62);
        v64 = v63->__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = v63->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7);
        v65 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v132.__r_.__value_.__l.__data_);
        v132.__r_.__value_.__r.__words[0] = v64;
        v132.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v132.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v132.__r_.__value_.__s + 23) = v65;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v131, "reduce");
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v140, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
      else
        v140 = v134;
      v127 = 0;
      v126 = 0;
      v128 = 0;
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
      v136.__r_.__value_.__s.__data_[8] = 0;
      v126 = (__int128 *)operator new(0x18uLL);
      v127 = v126;
      v128 = (char *)v126 + 24;
      v127 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v128, (__int128 *)&v140, &v141, (std::string *)v126);
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v136, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
      else
        v136 = v133;
      memset(&v138, 0, sizeof(v138));
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      v114.__r_.__value_.__s.__data_[8] = 0;
      v138.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v138.__r_.__value_.__l.__size_ = v138.__r_.__value_.__r.__words[0];
      v138.__r_.__value_.__r.__words[2] = v138.__r_.__value_.__r.__words[0] + 24;
      v138.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v138.__r_.__value_.__r.__words[2], (__int128 *)&v136, (__int128 *)&v137, (std::string *)v138.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v129, v95, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v117, v126, v127, (__int128 **)&v138);
      v73 = v130;
      if (v130)
      {
        v74 = (unint64_t *)&v130->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131.__r_.__value_.__l.__data_);
      std::string::operator=(&v134, &v133);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
    }
  }
  if (v93)
    goto LABEL_262;
  v123 = 0u;
  memset(v124, 0, sizeof(v124));
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v125 = 1;
  if ((int)v13 >= 32)
    LODWORD(v85) = 32;
  else
    LODWORD(v85) = v13;
  DWORD1(v117) = v85;
  if ((int)v13 >= 1)
  {
    if ((int)v85 <= 1)
      v85 = 1;
    else
      v85 = v85;
    v86 = (_DWORD *)&v117 + 2;
    v87 = (uint64_t *)(v101 + 8);
    do
    {
      v88 = *v87++;
      *v86++ = v88;
      --v85;
    }
    while (v85);
  }
LABEL_248:
  if (HIBYTE(v102))
    v124[24] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v132, "squeeze");
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v136, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v136 = v133;
  memset(&v131, 0, sizeof(v131));
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
  v114.__r_.__value_.__s.__data_[8] = 0;
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v131.__r_.__value_.__l.__size_ = v131.__r_.__value_.__r.__words[0];
  v131.__r_.__value_.__r.__words[2] = v131.__r_.__value_.__r.__words[0] + 24;
  v131.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v131.__r_.__value_.__r.__words[2], (__int128 *)&v136, (__int128 *)&v137, (std::string *)v131.__r_.__value_.__l.__data_);
  memset(&v114, 0, sizeof(v114));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v114, (__int128 *)__str.__r_.__value_.__l.__data_, (__int128 *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v115, v95, (uint64_t)&v132, (uint64_t)&v106, (uint64_t)&v117, (__int128 *)v131.__r_.__value_.__l.__data_, (__int128 *)v131.__r_.__value_.__l.__size_, (__int128 **)&v114);
  v89 = v116;
  if (v116)
  {
    v90 = (unint64_t *)&v116->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v135 = &v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  v135 = &v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
LABEL_262:
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  if (v15)
    operator delete(v15);
  if (__p[0])
    operator delete(__p[0]);
  CoreML::Specification::ReduceProdLayerParams::~ReduceProdLayerParams((CoreML::Specification::ReduceProdLayerParams *)&v98);
  *(_QWORD *)&v117 = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  *(_QWORD *)&v117 = &v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  LayerTranslator::defaultUnknownNdShape(v92, (uint64_t *)&v110);
  *(_QWORD *)&v117 = &v107;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  *(_QWORD *)&v117 = &v110;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
}

void sub_19C977920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *v63;
  uint64_t v64;

  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (*(char *)(v64 - 217) < 0)
    operator delete(*(void **)(v64 - 240));
  if (v63)
    operator delete(v63);
  if (a24)
    operator delete(a24);
  CoreML::Specification::ReduceProdLayerParams::~ReduceProdLayerParams((CoreML::Specification::ReduceProdLayerParams *)&a27);
  a63 = (uint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a44 < 0)
    operator delete(a39);
  a63 = (uint64_t)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a57 < 0)
    operator delete(a52);
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceMean(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  std::string *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t **v10;
  char *v11;
  const void *v12;
  uint64_t v13;
  _BOOL4 v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int *v38;
  int v39;
  int v40;
  BOOL v42;
  _BOOL4 v43;
  _BOOL4 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  unint64_t i;
  std::string::size_type v49;
  size_t v50;
  std::string *v51;
  const void *v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type v56;
  char v57;
  std::string::size_type v58;
  std::string *v59;
  std::string *v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  std::string::size_type v64;
  char v65;
  std::string::size_type v66;
  size_t v67;
  std::string *v68;
  const void *v69;
  std::string::size_type v70;
  std::string *v71;
  std::string *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::string::size_type size;
  std::string *v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  std::string *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  char *v92;
  int v93;
  int v94;
  _QWORD *v95;
  __int128 v96;
  void *__p[3];
  void (**v98)(CoreML::Specification::ReduceMeanLayerParams *__hidden);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int16 v102;
  int v103;
  std::string __str;
  std::string v105;
  std::string v106;
  __int128 *v107;
  __int128 *v108;
  uint64_t v109;
  __int128 *v110;
  __int128 *v111;
  uint64_t v112;
  std::string v113;
  std::string v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _BYTE v124[25];
  int v125;
  __int128 *v126;
  __int128 *v127;
  char *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  std::string *v135;
  std::string v136;
  uint64_t v137;
  std::string v138;
  uint64_t v139;
  std::string v140;
  __int128 v141;

  *(_QWORD *)&v141 = *MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v113, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v113.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v5;
  }
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v110, (uint64_t *)&v107, *((_QWORD *)this + 1));
  v95 = *(_QWORD **)this;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v106, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  else
    v106 = v113;
  memset(&v105, 0, sizeof(v105));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, v107, v108, 0xAAAAAAAAAAAAAAABLL * (((char *)v108 - (char *)v107) >> 3));
  memset(&__str, 0, sizeof(__str));
  v6 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v110, v111, 0xAAAAAAAAAAAAAAABLL * (((char *)v111 - (char *)v110) >> 3));
  if (*((_DWORD *)a2 + 35) == 1280)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v6);
    v7 = &CoreML::Specification::_ReduceMeanLayerParams_default_instance_;
  }
  v100 = 0;
  v101 = 0;
  v98 = &off_1E3D534C0;
  v99 = 0;
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v100, v8);
    memcpy((void *)(v101 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v100) = *((_DWORD *)v7 + 4);
  }
  v103 = 0;
  v9 = v7[1];
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v99, v9 & 0xFFFFFFFFFFFFFFFELL);
  v102 = *((_WORD *)v7 + 18);
  v10 = (uint64_t **)*((_QWORD *)this + 1);
  v134.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
  v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v107, (__int128 **)&v134);
  v96 = *(_OWORD *)(v11 + 72);
  v12 = (const void *)*((_QWORD *)v11 + 12);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v12, *((_QWORD *)v11 + 13), (uint64_t)(*((_QWORD *)v11 + 13) - (_QWORD)v12) >> 2);
  v92 = (char *)this;
  v93 = v102;
  v13 = v100;
  v94 = HIBYTE(v102);
  v14 = HIBYTE(v102) != 0;
  if ((int)v100 >= 1)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = *(_DWORD *)(v101 + 8 * v18 + 8);
      if (v19 < 0)
      {
        if ((unint64_t)v16 >= v17)
        {
          v27 = v16 - v15;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v17 - (_QWORD)v15) >> 1 > v28)
            v28 = (uint64_t)(v17 - (_QWORD)v15) >> 1;
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v28;
          if (v24)
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          else
            v25 = 0;
          v29 = (_DWORD *)(v24 + 4 * v27);
          *v29 = v19;
          v26 = v29 + 1;
          while (v16 != v15)
          {
            v31 = *--v16;
            *--v29 = v31;
          }
          goto LABEL_49;
        }
      }
      else
      {
        v20 = DWORD1(v96);
        if ((_DWORD)v96 == 1)
          v21 = 4;
        else
          v21 = 5;
        if (DWORD1(v96) == -1)
          v20 = v21;
        v19 -= v20;
        if ((unint64_t)v16 >= v17)
        {
          v22 = v16 - v15;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v17 - (_QWORD)v15) >> 1 > v23)
            v23 = (uint64_t)(v17 - (_QWORD)v15) >> 1;
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          if (v24)
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          else
            v25 = 0;
          v29 = (_DWORD *)(v24 + 4 * v22);
          *v29 = v19;
          v26 = v29 + 1;
          while (v16 != v15)
          {
            v30 = *--v16;
            *--v29 = v30;
          }
LABEL_49:
          v17 = v24 + 4 * v25;
          if (v15)
            operator delete(v15);
          v15 = v29;
          goto LABEL_52;
        }
      }
      *v16 = v19;
      v26 = v16 + 1;
LABEL_52:
      ++v18;
      v16 = v26;
      if (v18 == v13)
        goto LABEL_55;
    }
  }
  v15 = 0;
  v26 = 0;
LABEL_55:
  std::__sort<std::__less<int,int> &,int *>();
  v32 = v26 - v15;
  v33 = DWORD1(v96);
  if ((_DWORD)v96 == 1)
    v34 = 4;
  else
    v34 = 5;
  if (DWORD1(v96) == -1)
    v33 = v34;
  if (!v94 && v33 == (_DWORD)v32)
  {
    if (v26 == v15)
    {
      v14 = 1;
    }
    else
    {
      if (v32 <= 1)
        v35 = 1;
      else
        v35 = v26 - v15;
      v36 = v35 - 1;
      v37 = -(int)v32;
      v38 = v15;
      do
      {
        v40 = *v38++;
        v39 = v40;
        v42 = v36-- != 0;
        v14 = v37 == v39;
        if (v37 != v39)
          break;
        ++v37;
      }
      while (v42);
    }
  }
  if (v32 == 3)
  {
    if (*v15 == -3 && v15[1] == -2)
    {
      v44 = 0;
      v43 = v15[2] == -1;
      goto LABEL_82;
    }
  }
  else if (v32 == 2 && *v15 == -2)
  {
    v43 = 0;
    v44 = v15[1] == -1;
    goto LABEL_82;
  }
  v44 = 0;
  v43 = 0;
LABEL_82:
  if (*(char *)(v105.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)v105.__r_.__value_.__l.__data_, *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v45 = *(_OWORD *)v105.__r_.__value_.__l.__data_;
    v134.__r_.__value_.__r.__words[2] = *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v45;
  }
  if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)__str.__r_.__value_.__l.__data_, *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v46 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
    v133.__r_.__value_.__r.__words[2] = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v46;
  }
  if (v14 || v44 || v43)
  {
    *((_QWORD *)&v117 + 1) = 0x100000007;
    v118 = 0uLL;
    *(_QWORD *)&v119 = 0xFFFFFFFF00000000;
    *(_QWORD *)&v117 = 0x358637BD00000001;
    BYTE8(v119) = 0;
    if (v14 || v44)
    {
      if (v14)
        v47 = 31;
      else
        v47 = 3;
      DWORD2(v117) = v47;
    }
    memset(&v132, 0, sizeof(v132));
    std::string::operator=(&v133, (const std::string *)__str.__r_.__value_.__l.__data_);
    if (v93)
    {
      std::string::operator=(&v132, &v106);
    }
    else
    {
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
      else
        size = v133.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v131, size + 11);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v131;
      else
        v77 = (std::string *)v131.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = &v133;
        else
          v78 = (std::string *)v133.__r_.__value_.__r.__words[0];
        memmove(v77, v78, size);
      }
      strcpy((char *)v77 + size, "_presqueeze");
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v133.__r_.__value_.__l.__data_);
      v133 = v131;
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        v79 = v106.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v131, v79 + 11);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v131;
      else
        v80 = (std::string *)v131.__r_.__value_.__r.__words[0];
      if (v79)
      {
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = &v106;
        else
          v81 = (std::string *)v106.__r_.__value_.__r.__words[0];
        memmove(v80, v81, v79);
      }
      strcpy((char *)v80 + v79, "_presqueeze");
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
      v132 = v131;
    }
    std::string::basic_string[abi:ne180100]<0>(&v131, "reduce");
    memset(&v140, 0, sizeof(v140));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v140, (__int128 *)v105.__r_.__value_.__l.__data_, (__int128 *)v105.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v105.__r_.__value_.__l.__size_ - v105.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v138, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
    else
      v138 = v133;
    v127 = 0;
    v126 = 0;
    v128 = 0;
    v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
    v136.__r_.__value_.__s.__data_[8] = 0;
    v126 = (__int128 *)operator new(0x18uLL);
    v127 = v126;
    v128 = (char *)v126 + 24;
    v127 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v128, (__int128 *)&v138, (__int128 *)&v139, (std::string *)v126);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v129, v95, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v117, (__int128 *)v140.__r_.__value_.__l.__data_, (__int128 *)v140.__r_.__value_.__l.__size_, &v126);
    v82 = v130;
    if (v130)
    {
      p_shared_owners = (unint64_t *)&v130->__shared_owners_;
      do
        v84 = __ldaxr(p_shared_owners);
      while (__stlxr(v84 - 1, p_shared_owners));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v138.__r_.__value_.__l.__data_);
    v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v131.__r_.__value_.__l.__data_);
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v132.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((int)v13 < 1)
    {
      if (v93)
        goto LABEL_262;
      v123 = 0u;
      memset(v124, 0, sizeof(v124));
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v125 = 1;
      DWORD1(v117) = v13;
      goto LABEL_248;
    }
    for (i = 0; i != v13; ++i)
    {
      *((_QWORD *)&v117 + 1) = 0x100000007;
      v118 = 0uLL;
      LODWORD(v119) = 0;
      *(_QWORD *)&v117 = 0x358637BD00000001;
      BYTE8(v119) = 1;
      DWORD1(v119) = *(_QWORD *)(v101 + 8 * i + 8);
      memset(&v132, 0, sizeof(v132));
      if (i >= (v13 - 1))
      {
        if (v93)
        {
          std::string::operator=(&v133, (const std::string *)__str.__r_.__value_.__l.__data_);
          std::string::operator=(&v132, &v106);
        }
        else
        {
          v66 = __str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) >= 0)
            v67 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
          else
            v67 = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8);
          std::string::basic_string[abi:ne180100]((uint64_t)&v131, v67 + 11);
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v68 = &v131;
          else
            v68 = (std::string *)v131.__r_.__value_.__r.__words[0];
          if (v67)
          {
            if (*(char *)(v66 + 23) >= 0)
              v69 = (const void *)v66;
            else
              v69 = *(const void **)v66;
            memmove(v68, v69, v67);
          }
          strcpy((char *)v68 + v67, "_presqueeze");
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v133.__r_.__value_.__l.__data_);
          v133 = v131;
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v70 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
          else
            v70 = v106.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v131, v70 + 11);
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = &v131;
          else
            v71 = (std::string *)v131.__r_.__value_.__r.__words[0];
          if (v70)
          {
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v72 = &v106;
            else
              v72 = (std::string *)v106.__r_.__value_.__r.__words[0];
            memmove(v71, v72, v70);
          }
          strcpy((char *)v71 + v70, "_presqueeze");
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v132.__r_.__value_.__l.__data_);
          v132 = v131;
        }
      }
      else
      {
        v49 = v105.__r_.__value_.__r.__words[0];
        if (*(char *)(v105.__r_.__value_.__r.__words[0] + 23) >= 0)
          v50 = *(unsigned __int8 *)(v105.__r_.__value_.__r.__words[0] + 23);
        else
          v50 = *(_QWORD *)(v105.__r_.__value_.__r.__words[0] + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v131, v50 + 18);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v131;
        else
          v51 = (std::string *)v131.__r_.__value_.__r.__words[0];
        if (v50)
        {
          if (*(char *)(v49 + 23) >= 0)
            v52 = (const void *)v49;
          else
            v52 = *(const void **)v49;
          memmove(v51, v52, v50);
        }
        strcpy((char *)v51 + v50, "__reduction_axis__");
        std::to_string(&v140, i + 1);
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &v140;
        else
          v53 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v54 = v140.__r_.__value_.__l.__size_;
        v55 = std::string::append(&v131, (const std::string::value_type *)v53, v54);
        v56 = v55->__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = v55->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
        v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v133.__r_.__value_.__l.__data_);
        v133.__r_.__value_.__r.__words[0] = v56;
        v133.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v133.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v133.__r_.__value_.__s + 23) = v57;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
        else
          v58 = v106.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v131, v58 + 18);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = &v131;
        else
          v59 = (std::string *)v131.__r_.__value_.__r.__words[0];
        if (v58)
        {
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v60 = &v106;
          else
            v60 = (std::string *)v106.__r_.__value_.__r.__words[0];
          memmove(v59, v60, v58);
        }
        strcpy((char *)v59 + v58, "__reduction_axis__");
        std::to_string(&v140, i);
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v140;
        else
          v61 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v62 = v140.__r_.__value_.__l.__size_;
        v63 = std::string::append(&v131, (const std::string::value_type *)v61, v62);
        v64 = v63->__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = v63->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7);
        v65 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v132.__r_.__value_.__l.__data_);
        v132.__r_.__value_.__r.__words[0] = v64;
        v132.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v132.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v132.__r_.__value_.__s + 23) = v65;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v131, "reduce");
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v140, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
      else
        v140 = v134;
      v127 = 0;
      v126 = 0;
      v128 = 0;
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
      v136.__r_.__value_.__s.__data_[8] = 0;
      v126 = (__int128 *)operator new(0x18uLL);
      v127 = v126;
      v128 = (char *)v126 + 24;
      v127 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v128, (__int128 *)&v140, &v141, (std::string *)v126);
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v136, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
      else
        v136 = v133;
      memset(&v138, 0, sizeof(v138));
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      v114.__r_.__value_.__s.__data_[8] = 0;
      v138.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v138.__r_.__value_.__l.__size_ = v138.__r_.__value_.__r.__words[0];
      v138.__r_.__value_.__r.__words[2] = v138.__r_.__value_.__r.__words[0] + 24;
      v138.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v138.__r_.__value_.__r.__words[2], (__int128 *)&v136, (__int128 *)&v137, (std::string *)v138.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v129, v95, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v117, v126, v127, (__int128 **)&v138);
      v73 = v130;
      if (v130)
      {
        v74 = (unint64_t *)&v130->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131.__r_.__value_.__l.__data_);
      std::string::operator=(&v134, &v133);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
    }
  }
  if (v93)
    goto LABEL_262;
  v123 = 0u;
  memset(v124, 0, sizeof(v124));
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v125 = 1;
  if ((int)v13 >= 32)
    LODWORD(v85) = 32;
  else
    LODWORD(v85) = v13;
  DWORD1(v117) = v85;
  if ((int)v13 >= 1)
  {
    if ((int)v85 <= 1)
      v85 = 1;
    else
      v85 = v85;
    v86 = (_DWORD *)&v117 + 2;
    v87 = (uint64_t *)(v101 + 8);
    do
    {
      v88 = *v87++;
      *v86++ = v88;
      --v85;
    }
    while (v85);
  }
LABEL_248:
  if (HIBYTE(v102))
    v124[24] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v132, "squeeze");
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v136, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v136 = v133;
  memset(&v131, 0, sizeof(v131));
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
  v114.__r_.__value_.__s.__data_[8] = 0;
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v131.__r_.__value_.__l.__size_ = v131.__r_.__value_.__r.__words[0];
  v131.__r_.__value_.__r.__words[2] = v131.__r_.__value_.__r.__words[0] + 24;
  v131.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v131.__r_.__value_.__r.__words[2], (__int128 *)&v136, (__int128 *)&v137, (std::string *)v131.__r_.__value_.__l.__data_);
  memset(&v114, 0, sizeof(v114));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v114, (__int128 *)__str.__r_.__value_.__l.__data_, (__int128 *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v115, v95, (uint64_t)&v132, (uint64_t)&v106, (uint64_t)&v117, (__int128 *)v131.__r_.__value_.__l.__data_, (__int128 *)v131.__r_.__value_.__l.__size_, (__int128 **)&v114);
  v89 = v116;
  if (v116)
  {
    v90 = (unint64_t *)&v116->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v135 = &v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  v135 = &v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
LABEL_262:
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  if (v15)
    operator delete(v15);
  if (__p[0])
    operator delete(__p[0]);
  CoreML::Specification::ReduceMeanLayerParams::~ReduceMeanLayerParams((CoreML::Specification::ReduceMeanLayerParams *)&v98);
  *(_QWORD *)&v117 = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  *(_QWORD *)&v117 = &v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  LayerTranslator::defaultUnknownNdShape(v92, (uint64_t *)&v110);
  *(_QWORD *)&v117 = &v107;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  *(_QWORD *)&v117 = &v110;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
}

void sub_19C978C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *v63;
  uint64_t v64;

  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (*(char *)(v64 - 217) < 0)
    operator delete(*(void **)(v64 - 240));
  if (v63)
    operator delete(v63);
  if (a24)
    operator delete(a24);
  CoreML::Specification::ReduceMeanLayerParams::~ReduceMeanLayerParams((CoreML::Specification::ReduceMeanLayerParams *)&a27);
  a63 = (uint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a44 < 0)
    operator delete(a39);
  a63 = (uint64_t)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a57 < 0)
    operator delete(a52);
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceLogSum(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  __int128 *v6;
  size_t v7;
  std::string *v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t **v14;
  char *v15;
  __int128 v16;
  const void *v17;
  uint64_t v18;
  _BOOL4 v19;
  _DWORD *v20;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  int v35;
  int v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int *v43;
  int v44;
  int v45;
  BOOL v47;
  _BOOL4 v48;
  _BOOL4 v49;
  __int128 v50;
  __int128 v51;
  int v52;
  unint64_t i;
  std::string::size_type v54;
  size_t v55;
  std::string *v56;
  const void *v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  std::string::size_type v61;
  char v62;
  std::string::size_type v63;
  std::string *v64;
  std::string *v65;
  std::string *v66;
  std::string::size_type v67;
  std::string *v68;
  std::string::size_type v69;
  char v70;
  std::string *v71;
  std::string::size_type v72;
  std::string *v73;
  std::string *v74;
  std::string::size_type v75;
  std::string *v76;
  std::string *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::string::size_type size;
  std::string *v82;
  std::string *v83;
  std::string::size_type v84;
  std::string *v85;
  std::string *v86;
  std::__shared_weak_count *v87;
  unint64_t *p_shared_owners;
  unint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  char *v101;
  int v102;
  int v103;
  _QWORD *v104;
  std::string v105;
  __int128 *v106;
  __int128 *v107;
  char *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  void *__p;
  void *v115;
  uint64_t v116;
  void (**v117)(CoreML::Specification::ReduceLogSumLayerParams *__hidden);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int16 v121;
  int v122;
  std::string *__str;
  __int128 *v124;
  std::string *v125;
  std::string v126;
  std::string v127;
  std::string v128;
  __int128 *v129;
  __int128 *v130;
  uint64_t v131;
  __int128 *v132;
  __int128 *v133;
  uint64_t v134;
  std::string v135;
  std::string v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _BYTE v146[25];
  int v147;
  __int128 *v148;
  __int128 *v149;
  char *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  std::string v153;
  std::string v154;
  std::string v155;
  std::string *v156;
  std::string v157;
  uint64_t v158;
  std::string v159;
  uint64_t v160;
  std::string v161;
  uint64_t v162;
  std::string v163;
  uint64_t v164;
  std::string v165;
  __int128 v166;

  *(_QWORD *)&v166 = *MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v135, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v135.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v5;
  }
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v132, (uint64_t *)&v129, *((_QWORD *)this + 1));
  v6 = v132;
  if (*((char *)v132 + 23) >= 0)
    v7 = *((unsigned __int8 *)v132 + 23);
  else
    v7 = *((_QWORD *)v132 + 1);
  v8 = &v128;
  std::string::basic_string[abi:ne180100]((uint64_t)&v128, v7 + 8);
  if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v128.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*((char *)v6 + 23) >= 0)
      v9 = v6;
    else
      v9 = *(__int128 **)v6;
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, "__prelog");
  v104 = *(_QWORD **)this;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v127, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  else
    v127 = v135;
  memset(&v126, 0, sizeof(v126));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v126, v129, v130, 0xAAAAAAAAAAAAAAABLL * (((char *)v130 - (char *)v129) >> 3));
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v157, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    v157 = v128;
  __str = 0;
  v124 = 0;
  v125 = 0;
  *(_QWORD *)&v139 = &__str;
  BYTE8(v139) = 0;
  __str = (std::string *)operator new(0x18uLL);
  v124 = (__int128 *)__str;
  v125 = __str + 1;
  v10 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v125, (__int128 *)&v157, (__int128 *)&v158, __str);
  v124 = v10;
  if (*((_DWORD *)a2 + 35) == 1285)
  {
    v11 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v10);
    v11 = &CoreML::Specification::_ReduceLogSumLayerParams_default_instance_;
  }
  v119 = 0;
  v120 = 0;
  v117 = &off_1E3D54690;
  v118 = 0;
  v12 = *((_DWORD *)v11 + 4);
  if (v12)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v119, v12);
    memcpy((void *)(v120 + 8), (const void *)(v11[3] + 8), 8 * *((int *)v11 + 4));
    LODWORD(v119) = *((_DWORD *)v11 + 4);
  }
  v122 = 0;
  v13 = v11[1];
  if ((v13 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v118, v13 & 0xFFFFFFFFFFFFFFFELL);
  v121 = *((_WORD *)v11 + 18);
  v14 = (uint64_t **)*((_QWORD *)this + 1);
  v155.__r_.__value_.__r.__words[0] = (std::string::size_type)v129;
  v15 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, v129, (__int128 **)&v155);
  v16 = *(_OWORD *)(v15 + 72);
  v111 = *(_OWORD *)(v15 + 56);
  v112 = v16;
  v17 = (const void *)*((_QWORD *)v15 + 12);
  v113 = *((_QWORD *)v15 + 11);
  __p = 0;
  v115 = 0;
  v116 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v17, *((_QWORD *)v15 + 13), (uint64_t)(*((_QWORD *)v15 + 13) - (_QWORD)v17) >> 2);
  v101 = (char *)this;
  v102 = v121;
  v18 = v119;
  v103 = HIBYTE(v121);
  v19 = HIBYTE(v121) != 0;
  if ((int)v119 >= 1)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *(_DWORD *)(v120 + 8 * v23 + 8);
      if (v24 < 0)
      {
        if ((unint64_t)v21 >= v22)
        {
          v32 = v21 - v20;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v22 - (_QWORD)v20) >> 1 > v33)
            v33 = (uint64_t)(v22 - (_QWORD)v20) >> 1;
          if (v22 - (unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v33;
          if (v29)
            v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v29);
          else
            v30 = 0;
          v34 = (_DWORD *)(v29 + 4 * v32);
          *v34 = v24;
          v31 = v34 + 1;
          while (v21 != v20)
          {
            v36 = *--v21;
            *--v34 = v36;
          }
          goto LABEL_62;
        }
      }
      else
      {
        v25 = DWORD1(v112);
        if ((_DWORD)v112 == 1)
          v26 = 4;
        else
          v26 = 5;
        if (DWORD1(v112) == -1)
          v25 = v26;
        v24 -= v25;
        if ((unint64_t)v21 >= v22)
        {
          v27 = v21 - v20;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v22 - (_QWORD)v20) >> 1 > v28)
            v28 = (uint64_t)(v22 - (_QWORD)v20) >> 1;
          if (v22 - (unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v28;
          if (v29)
            v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v29);
          else
            v30 = 0;
          v34 = (_DWORD *)(v29 + 4 * v27);
          *v34 = v24;
          v31 = v34 + 1;
          while (v21 != v20)
          {
            v35 = *--v21;
            *--v34 = v35;
          }
LABEL_62:
          v22 = v29 + 4 * v30;
          if (v20)
            operator delete(v20);
          v20 = v34;
          goto LABEL_65;
        }
      }
      *v21 = v24;
      v31 = v21 + 1;
LABEL_65:
      ++v23;
      v21 = v31;
      if (v23 == v18)
        goto LABEL_68;
    }
  }
  v20 = 0;
  v31 = 0;
LABEL_68:
  std::__sort<std::__less<int,int> &,int *>();
  v37 = v31 - v20;
  v38 = DWORD1(v112);
  if ((_DWORD)v112 == 1)
    v39 = 4;
  else
    v39 = 5;
  if (DWORD1(v112) == -1)
    v38 = v39;
  if (!v103 && v38 == (_DWORD)v37)
  {
    if (v31 == v20)
    {
      v19 = 1;
    }
    else
    {
      if (v37 <= 1)
        v40 = 1;
      else
        v40 = v31 - v20;
      v41 = v40 - 1;
      v42 = -(int)v37;
      v43 = v20;
      do
      {
        v45 = *v43++;
        v44 = v45;
        v47 = v41-- != 0;
        v19 = v42 == v44;
        if (v42 != v44)
          break;
        ++v42;
      }
      while (v47);
    }
  }
  if (v37 == 3)
  {
    if (*v20 == -3 && v20[1] == -2)
    {
      v49 = 0;
      v48 = v20[2] == -1;
      goto LABEL_95;
    }
  }
  else if (v37 == 2 && *v20 == -2)
  {
    v48 = 0;
    v49 = v20[1] == -1;
    goto LABEL_95;
  }
  v49 = 0;
  v48 = 0;
LABEL_95:
  if (*(char *)(v126.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v155, *(const std::string::value_type **)v126.__r_.__value_.__l.__data_, *(_QWORD *)(v126.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v50 = *(_OWORD *)v126.__r_.__value_.__l.__data_;
    v155.__r_.__value_.__r.__words[2] = *(_QWORD *)(v126.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v50;
  }
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v165, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else
  {
    v51 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    v165.__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v51;
  }
  if (v19 || v49 || v48)
  {
    *((_QWORD *)&v139 + 1) = 0x100000007;
    v140 = 0uLL;
    *(_QWORD *)&v141 = 0xFFFFFFFF00000000;
    *(_QWORD *)&v139 = 0x358637BD00000000;
    BYTE8(v141) = 0;
    if (v19 || v49)
    {
      if (v19)
        v52 = 31;
      else
        v52 = 3;
      DWORD2(v139) = v52;
    }
    memset(&v154, 0, sizeof(v154));
    std::string::operator=(&v165, __str);
    if (v102)
    {
      std::string::operator=(&v154, &v127);
    }
    else
    {
      if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v165.__r_.__value_.__r.__words[2]);
      else
        size = v165.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v153, size + 11);
      if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = &v153;
      else
        v82 = (std::string *)v153.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v83 = &v165;
        else
          v83 = (std::string *)v165.__r_.__value_.__r.__words[0];
        memmove(v82, v83, size);
      }
      strcpy((char *)v82 + size, "_presqueeze");
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      v165 = v153;
      if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v84 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
      else
        v84 = v127.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v153, v84 + 11);
      if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v85 = &v153;
      else
        v85 = (std::string *)v153.__r_.__value_.__r.__words[0];
      if (v84)
      {
        if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v86 = &v127;
        else
          v86 = (std::string *)v127.__r_.__value_.__r.__words[0];
        memmove(v85, v86, v84);
      }
      strcpy((char *)v85 + v84, "_presqueeze");
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      v154 = v153;
    }
    std::string::basic_string[abi:ne180100]<0>(&v153, "reduce");
    memset(&v163, 0, sizeof(v163));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v163, (__int128 *)v126.__r_.__value_.__l.__data_, (__int128 *)v126.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v126.__r_.__value_.__l.__size_ - v126.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v161, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
    else
      v161 = v165;
    v149 = 0;
    v148 = 0;
    v150 = 0;
    v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
    v159.__r_.__value_.__s.__data_[8] = 0;
    v148 = (__int128 *)operator new(0x18uLL);
    v149 = v148;
    v150 = (char *)v148 + 24;
    v149 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v150, (__int128 *)&v161, (__int128 *)&v162, (std::string *)v148);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v151, v104, (uint64_t)&v153, (uint64_t)&v154, (uint64_t)&v139, (__int128 *)v163.__r_.__value_.__l.__data_, (__int128 *)v163.__r_.__value_.__l.__size_, &v148);
    v87 = v152;
    if (v152)
    {
      p_shared_owners = (unint64_t *)&v152->__shared_owners_;
      do
        v89 = __ldaxr(p_shared_owners);
      while (__stlxr(v89 - 1, p_shared_owners));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v161.__r_.__value_.__l.__data_);
    v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v153.__r_.__value_.__l.__data_);
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v154.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((int)v18 < 1)
    {
      if (v102)
        goto LABEL_275;
      v145 = 0u;
      memset(v146, 0, sizeof(v146));
      v143 = 0u;
      v144 = 0u;
      v141 = 0u;
      v142 = 0u;
      v139 = 0u;
      v140 = 0u;
      v147 = 1;
      DWORD1(v139) = v18;
      goto LABEL_261;
    }
    for (i = 0; i != v18; ++i)
    {
      *((_QWORD *)&v139 + 1) = 0x100000007;
      v140 = 0uLL;
      LODWORD(v141) = 0;
      *(_QWORD *)&v139 = 0x358637BD00000000;
      BYTE8(v141) = 1;
      DWORD1(v141) = *(_QWORD *)(v120 + 8 * i + 8);
      memset(&v154, 0, sizeof(v154));
      if (i >= (v18 - 1))
      {
        if (v102)
        {
          std::string::operator=(&v165, __str);
          std::string::operator=(&v154, &v127);
        }
        else
        {
          v71 = __str;
          if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v72 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
          else
            v72 = __str->__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v153, v72 + 11);
          if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v73 = &v153;
          else
            v73 = (std::string *)v153.__r_.__value_.__r.__words[0];
          if (v72)
          {
            if ((v71->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v74 = v71;
            else
              v74 = (std::string *)v71->__r_.__value_.__r.__words[0];
            memmove(v73, v74, v72);
          }
          strcpy((char *)v73 + v72, "_presqueeze");
          if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v165.__r_.__value_.__l.__data_);
          v165 = v153;
          if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
          else
            v75 = v127.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v153, v75 + 11);
          if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v76 = &v153;
          else
            v76 = (std::string *)v153.__r_.__value_.__r.__words[0];
          if (v75)
          {
            if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v77 = &v127;
            else
              v77 = (std::string *)v127.__r_.__value_.__r.__words[0];
            memmove(v76, v77, v75);
          }
          strcpy((char *)v76 + v75, "_presqueeze");
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v154.__r_.__value_.__l.__data_);
          v154 = v153;
        }
      }
      else
      {
        v54 = v126.__r_.__value_.__r.__words[0];
        if (*(char *)(v126.__r_.__value_.__r.__words[0] + 23) >= 0)
          v55 = *(unsigned __int8 *)(v126.__r_.__value_.__r.__words[0] + 23);
        else
          v55 = *(_QWORD *)(v126.__r_.__value_.__r.__words[0] + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v153, v55 + 18);
        if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v56 = &v153;
        else
          v56 = (std::string *)v153.__r_.__value_.__r.__words[0];
        if (v55)
        {
          if (*(char *)(v54 + 23) >= 0)
            v57 = (const void *)v54;
          else
            v57 = *(const void **)v54;
          memmove(v56, v57, v55);
        }
        strcpy((char *)v56 + v55, "__reduction_axis__");
        std::to_string(&v163, i + 1);
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = &v163;
        else
          v58 = (std::string *)v163.__r_.__value_.__r.__words[0];
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
        else
          v59 = v163.__r_.__value_.__l.__size_;
        v60 = std::string::append(&v153, (const std::string::value_type *)v58, v59);
        v61 = v60->__r_.__value_.__r.__words[0];
        v159.__r_.__value_.__r.__words[0] = v60->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v159.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v60->__r_.__value_.__r.__words[1] + 7);
        v62 = HIBYTE(v60->__r_.__value_.__r.__words[2]);
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v165.__r_.__value_.__l.__data_);
        v165.__r_.__value_.__r.__words[0] = v61;
        v165.__r_.__value_.__l.__size_ = v159.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v165.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v159.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v165.__r_.__value_.__s + 23) = v62;
        if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v163.__r_.__value_.__l.__data_);
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v153.__r_.__value_.__l.__data_);
        if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
        else
          v63 = v127.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v153, v63 + 18);
        if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v64 = &v153;
        else
          v64 = (std::string *)v153.__r_.__value_.__r.__words[0];
        if (v63)
        {
          if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v65 = &v127;
          else
            v65 = (std::string *)v127.__r_.__value_.__r.__words[0];
          memmove(v64, v65, v63);
        }
        strcpy((char *)v64 + v63, "__reduction_axis__");
        std::to_string(&v163, i);
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = &v163;
        else
          v66 = (std::string *)v163.__r_.__value_.__r.__words[0];
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v67 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
        else
          v67 = v163.__r_.__value_.__l.__size_;
        v68 = std::string::append(&v153, (const std::string::value_type *)v66, v67);
        v69 = v68->__r_.__value_.__r.__words[0];
        v159.__r_.__value_.__r.__words[0] = v68->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v159.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v68->__r_.__value_.__r.__words[1] + 7);
        v70 = HIBYTE(v68->__r_.__value_.__r.__words[2]);
        v68->__r_.__value_.__l.__size_ = 0;
        v68->__r_.__value_.__r.__words[2] = 0;
        v68->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        v154.__r_.__value_.__r.__words[0] = v69;
        v154.__r_.__value_.__l.__size_ = v159.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v154.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v159.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v154.__r_.__value_.__s + 23) = v70;
        if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v163.__r_.__value_.__l.__data_);
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v153.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v153, "reduce");
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v163, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
      else
        v163 = v155;
      v149 = 0;
      v148 = 0;
      v150 = 0;
      v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
      v159.__r_.__value_.__s.__data_[8] = 0;
      v148 = (__int128 *)operator new(0x18uLL);
      v149 = v148;
      v150 = (char *)v148 + 24;
      v149 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v150, (__int128 *)&v163, (__int128 *)&v164, (std::string *)v148);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v159, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
      else
        v159 = v165;
      memset(&v161, 0, sizeof(v161));
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v161;
      v136.__r_.__value_.__s.__data_[8] = 0;
      v161.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v161.__r_.__value_.__l.__size_ = v161.__r_.__value_.__r.__words[0];
      v161.__r_.__value_.__r.__words[2] = v161.__r_.__value_.__r.__words[0] + 24;
      v161.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v161.__r_.__value_.__r.__words[2], (__int128 *)&v159, (__int128 *)&v160, (std::string *)v161.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v151, v104, (uint64_t)&v153, (uint64_t)&v154, (uint64_t)&v139, v148, v149, (__int128 **)&v161);
      v78 = v152;
      if (v152)
      {
        v79 = (unint64_t *)&v152->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v161;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v159.__r_.__value_.__l.__data_);
      v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v163.__r_.__value_.__l.__data_);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      std::string::operator=(&v155, &v165);
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
    }
  }
  if (v102)
    goto LABEL_275;
  v145 = 0u;
  memset(v146, 0, sizeof(v146));
  v143 = 0u;
  v144 = 0u;
  v141 = 0u;
  v142 = 0u;
  v139 = 0u;
  v140 = 0u;
  v147 = 1;
  if ((int)v18 >= 32)
    LODWORD(v90) = 32;
  else
    LODWORD(v90) = v18;
  DWORD1(v139) = v90;
  if ((int)v18 >= 1)
  {
    if ((int)v90 <= 1)
      v90 = 1;
    else
      v90 = v90;
    v91 = (_DWORD *)&v139 + 2;
    v92 = (uint64_t *)(v120 + 8);
    do
    {
      v93 = *v92++;
      *v91++ = v93;
      --v90;
    }
    while (v90);
  }
LABEL_261:
  if (HIBYTE(v121))
    v146[24] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v154, "squeeze");
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v159, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  else
    v159 = v165;
  memset(&v153, 0, sizeof(v153));
  v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
  v136.__r_.__value_.__s.__data_[8] = 0;
  v153.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v153.__r_.__value_.__l.__size_ = v153.__r_.__value_.__r.__words[0];
  v153.__r_.__value_.__r.__words[2] = v153.__r_.__value_.__r.__words[0] + 24;
  v153.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v153.__r_.__value_.__r.__words[2], (__int128 *)&v159, (__int128 *)&v160, (std::string *)v153.__r_.__value_.__l.__data_);
  memset(&v136, 0, sizeof(v136));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v136, (__int128 *)__str, v124, 0xAAAAAAAAAAAAAAABLL * (((char *)v124 - (char *)__str) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v137, v104, (uint64_t)&v154, (uint64_t)&v127, (uint64_t)&v139, (__int128 *)v153.__r_.__value_.__l.__data_, (__int128 *)v153.__r_.__value_.__l.__size_, (__int128 **)&v136);
  v94 = v138;
  if (v138)
  {
    v95 = (unint64_t *)&v138->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v156 = &v136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v156);
  v156 = &v153;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v156);
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v154.__r_.__value_.__l.__data_);
LABEL_275:
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  if (v20)
    operator delete(v20);
  if (__p)
  {
    v115 = __p;
    operator delete(__p);
  }
  CoreML::Specification::ReduceLogSumLayerParams::~ReduceLogSumLayerParams((CoreML::Specification::ReduceLogSumLayerParams *)&v117);
  *(_QWORD *)&v139 = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
  *(_QWORD *)&v139 = &v126;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  *(_QWORD *)&v140 = 897988541;
  BYTE8(v140) = 0;
  LODWORD(v142) = 0;
  HIDWORD(v141) = 0;
  *(_QWORD *)&v139 = 26;
  *((_QWORD *)&v139 + 1) = 1065353216;
  v97 = *(_QWORD **)v101;
  std::string::basic_string[abi:ne180100]<0>(&v155, "elementwise");
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v165, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    v165 = v128;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v154.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
  v154.__r_.__value_.__s.__data_[8] = 0;
  v106 = (__int128 *)operator new(0x18uLL);
  v107 = v106;
  v108 = (char *)v106 + 24;
  v107 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v108, (__int128 *)&v165, &v166, (std::string *)v106);
  memset(&v105, 0, sizeof(v105));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, v132, v133, 0xAAAAAAAAAAAAAAABLL * (((char *)v133 - (char *)v132) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v109, v97, (uint64_t)&v155, (uint64_t)&v135, (uint64_t)&v139, v106, v107, (__int128 **)&v105);
  v98 = v110;
  if (v110)
  {
    v99 = (unint64_t *)&v110->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v154.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v154);
  v154.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v154);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  LayerTranslator::defaultUnknownNdShape(v101, (uint64_t *)&v132);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  *(_QWORD *)&v139 = &v129;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
  *(_QWORD *)&v139 = &v132;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
}

void sub_19C97A224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  void *a65;
  char a70;
  uint64_t a72;
  void *v72;
  uint64_t v73;

  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  if (*(char *)(v73 - 121) < 0)
    operator delete(*(void **)(v73 - 144));
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (v72)
    operator delete(v72);
  if (a32)
    operator delete(a32);
  CoreML::Specification::ReduceLogSumLayerParams::~ReduceLogSumLayerParams((CoreML::Specification::ReduceLogSumLayerParams *)&a35);
  a72 = (uint64_t)&a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  a72 = (uint64_t)&a44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  if (a52 < 0)
    operator delete(a47);
  if (a58 < 0)
    operator delete(a53);
  a72 = (uint64_t)&a59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  a72 = (uint64_t)&a62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  if (a70 < 0)
    operator delete(a65);
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceSumSquare(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  _QWORD *v6;
  std::string::size_type size;
  std::string *v8;
  std::string *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string::size_type v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t **v20;
  char *v21;
  const void *v22;
  uint64_t v23;
  _BOOL4 v24;
  _DWORD *v25;
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  int v40;
  int v41;
  unint64_t v42;
  int v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int *v49;
  int v50;
  int v51;
  BOOL v53;
  _BOOL4 v54;
  _BOOL4 v55;
  __int128 v56;
  __int128 v57;
  int v58;
  unint64_t i;
  __int128 *v60;
  size_t v61;
  std::string *v62;
  __int128 *v63;
  std::string *v64;
  std::string::size_type v65;
  std::string *v66;
  std::string::size_type v67;
  char v68;
  std::string::size_type v69;
  std::string *v70;
  std::string *v71;
  std::string *v72;
  std::string::size_type v73;
  std::string *v74;
  std::string::size_type v75;
  char v76;
  std::string::size_type v77;
  size_t v78;
  std::string *v79;
  const void *v80;
  std::string::size_type v81;
  std::string *v82;
  std::string *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::string::size_type v87;
  std::string *v88;
  std::string *v89;
  std::string::size_type v90;
  std::string *v91;
  std::string *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  void **v97;
  uint64_t *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  LayerTranslator *v103;
  int v104;
  int v105;
  _QWORD *v106;
  __int128 v107;
  void *v108[3];
  void (**v109)(CoreML::Specification::ReduceSumSquareLayerParams *__hidden);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int16 v113;
  int v114;
  std::string __str;
  __int128 *v116;
  __int128 *v117;
  char *v118;
  std::string v119;
  std::string v120;
  std::string *v121;
  std::string *v122;
  std::string *v123;
  std::string v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  _QWORD v127[3];
  char v128;
  int v129;
  int v130;
  __int128 *v131;
  __int128 *v132;
  uint64_t v133;
  __int128 *v134;
  __int128 *v135;
  uint64_t v136;
  std::string v137;
  std::string v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  void *__p[2];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _BYTE v148[25];
  int v149;
  __int128 *v150;
  __int128 *v151;
  char *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  std::string v155;
  std::string v156;
  std::string v157;
  std::string *v158;
  std::string v159;
  uint64_t v160;
  std::string v161;
  uint64_t v162;
  std::string v163;
  uint64_t v164;
  std::string v165;
  uint64_t v166;
  std::string v167;
  __int128 v168;

  *(_QWORD *)&v168 = *MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v137, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v137.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v5;
  }
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v131 = 0;
  v132 = 0;
  v133 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v134, (uint64_t *)&v131, *((_QWORD *)this + 1));
  v127[2] = 897988541;
  v128 = 0;
  v130 = 0;
  v129 = 0;
  v127[0] = 13;
  v127[1] = 0x40000000;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v124, 0, sizeof(v124));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v124, v131, v132, 0xAAAAAAAAAAAAAAABLL * (((char *)v132 - (char *)v131) >> 3));
  if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v137.__r_.__value_.__r.__words[2]);
  else
    size = v137.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)&v167, size + 9);
  if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v167;
  else
    v8 = (std::string *)v167.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v137;
    else
      v9 = (std::string *)v137.__r_.__value_.__r.__words[0];
    memmove(v8, v9, size);
  }
  strcpy((char *)v8 + size, "__squared");
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v157.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
  v157.__r_.__value_.__s.__data_[8] = 0;
  v121 = (std::string *)operator new(0x18uLL);
  v122 = v121;
  v123 = v121 + 1;
  v122 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v123, (__int128 *)&v167, &v168, v121);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v125, v6, (uint64_t)__p, (uint64_t)&v137, (uint64_t)v127, (__int128 *)v124.__r_.__value_.__l.__data_, (__int128 *)v124.__r_.__value_.__l.__size_, (__int128 **)&v121);
  v10 = v126;
  if (v126)
  {
    p_shared_owners = (unint64_t *)&v126->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v157.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v157);
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v167.__r_.__value_.__l.__data_);
  v167.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v167);
  if (SBYTE7(v142) < 0)
    operator delete(__p[0]);
  if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
  else
    v13 = v137.__r_.__value_.__l.__size_;
  v14 = &v120;
  std::string::basic_string[abi:ne180100]((uint64_t)&v120, v13 + 9);
  if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v120.__r_.__value_.__r.__words[0];
  if (v13)
  {
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v137;
    else
      v15 = (std::string *)v137.__r_.__value_.__r.__words[0];
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "__squared");
  v106 = *(_QWORD **)this;
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v119, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
  else
    v119 = v137;
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v159, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  else
    v159 = v120;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  __p[0] = &v116;
  LOBYTE(__p[1]) = 0;
  v116 = (__int128 *)operator new(0x18uLL);
  v117 = v116;
  v118 = (char *)v116 + 24;
  v117 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v118, (__int128 *)&v159, (__int128 *)&v160, (std::string *)v116);
  memset(&__str, 0, sizeof(__str));
  v16 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v134, v135, 0xAAAAAAAAAAAAAAABLL * (((char *)v135 - (char *)v134) >> 3));
  if (*((_DWORD *)a2 + 35) == 1290)
  {
    v17 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v16);
    v17 = &CoreML::Specification::_ReduceSumSquareLayerParams_default_instance_;
  }
  v111 = 0;
  v112 = 0;
  v109 = &off_1E3D55990;
  v110 = 0;
  v18 = *((_DWORD *)v17 + 4);
  if (v18)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v111, v18);
    memcpy((void *)(v112 + 8), (const void *)(v17[3] + 8), 8 * *((int *)v17 + 4));
    LODWORD(v111) = *((_DWORD *)v17 + 4);
  }
  v114 = 0;
  v19 = v17[1];
  if ((v19 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v110, v19 & 0xFFFFFFFFFFFFFFFELL);
  v113 = *((_WORD *)v17 + 18);
  v20 = (uint64_t **)*((_QWORD *)this + 1);
  v167.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
  v21 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, v131, (__int128 **)&v167);
  v107 = *(_OWORD *)(v21 + 72);
  v22 = (const void *)*((_QWORD *)v21 + 12);
  memset(v108, 0, sizeof(v108));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v108, v22, *((_QWORD *)v21 + 13), (uint64_t)(*((_QWORD *)v21 + 13) - (_QWORD)v22) >> 2);
  v103 = this;
  v104 = v113;
  v23 = v111;
  v105 = HIBYTE(v113);
  v24 = HIBYTE(v113) != 0;
  if ((int)v111 >= 1)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    while (1)
    {
      v29 = *(_DWORD *)(v112 + 8 * v28 + 8);
      if (v29 < 0)
      {
        if ((unint64_t)v26 >= v27)
        {
          v37 = v26 - v25;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v27 - (_QWORD)v25) >> 1 > v38)
            v38 = (uint64_t)(v27 - (_QWORD)v25) >> 1;
          if (v27 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v34 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v34 = v38;
          if (v34)
            v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v34);
          else
            v35 = 0;
          v39 = (_DWORD *)(v34 + 4 * v37);
          *v39 = v29;
          v36 = v39 + 1;
          while (v26 != v25)
          {
            v41 = *--v26;
            *--v39 = v41;
          }
          goto LABEL_82;
        }
      }
      else
      {
        v30 = DWORD1(v107);
        if ((_DWORD)v107 == 1)
          v31 = 4;
        else
          v31 = 5;
        if (DWORD1(v107) == -1)
          v30 = v31;
        v29 -= v30;
        if ((unint64_t)v26 >= v27)
        {
          v32 = v26 - v25;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v27 - (_QWORD)v25) >> 1 > v33)
            v33 = (uint64_t)(v27 - (_QWORD)v25) >> 1;
          if (v27 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v34 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          if (v34)
            v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v34);
          else
            v35 = 0;
          v39 = (_DWORD *)(v34 + 4 * v32);
          *v39 = v29;
          v36 = v39 + 1;
          while (v26 != v25)
          {
            v40 = *--v26;
            *--v39 = v40;
          }
LABEL_82:
          v27 = v34 + 4 * v35;
          if (v25)
            operator delete(v25);
          v25 = v39;
          goto LABEL_85;
        }
      }
      *v26 = v29;
      v36 = v26 + 1;
LABEL_85:
      ++v28;
      v26 = v36;
      if (v28 == v23)
        goto LABEL_88;
    }
  }
  v25 = 0;
  v36 = 0;
LABEL_88:
  std::__sort<std::__less<int,int> &,int *>();
  v42 = v36 - v25;
  v43 = DWORD1(v107);
  if ((_DWORD)v107 == 1)
    v44 = 4;
  else
    v44 = 5;
  if (DWORD1(v107) == -1)
    v43 = v44;
  v45 = (char *)v103;
  if (!v105 && v43 == (_DWORD)v42)
  {
    if (v36 == v25)
    {
      v24 = 1;
    }
    else
    {
      if (v42 <= 1)
        v46 = 1;
      else
        v46 = v36 - v25;
      v47 = v46 - 1;
      v48 = -(int)v42;
      v49 = v25;
      do
      {
        v51 = *v49++;
        v50 = v51;
        v53 = v47-- != 0;
        v24 = v48 == v50;
        if (v48 != v50)
          break;
        ++v48;
      }
      while (v53);
    }
  }
  if (v42 == 3)
  {
    if (*v25 == -3 && v25[1] == -2)
    {
      v55 = 0;
      v54 = v25[2] == -1;
      goto LABEL_115;
    }
  }
  else if (v42 == 2 && *v25 == -2)
  {
    v54 = 0;
    v55 = v25[1] == -1;
    goto LABEL_115;
  }
  v55 = 0;
  v54 = 0;
LABEL_115:
  if (*((char *)v116 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)v116, *((_QWORD *)v116 + 1));
  }
  else
  {
    v56 = *v116;
    v167.__r_.__value_.__r.__words[2] = *((_QWORD *)v116 + 2);
    *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v56;
  }
  if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v157, *(const std::string::value_type **)__str.__r_.__value_.__l.__data_, *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v57 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
    v157.__r_.__value_.__r.__words[2] = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v57;
  }
  if (v24 || v55 || v54)
  {
    __p[1] = (void *)0x100000007;
    v142 = 0uLL;
    *(_QWORD *)&v143 = 0xFFFFFFFF00000000;
    __p[0] = (void *)0x358637BD00000000;
    BYTE8(v143) = 0;
    if (v24 || v55)
    {
      if (v24)
        v58 = 31;
      else
        v58 = 3;
      LODWORD(__p[1]) = v58;
    }
    memset(&v156, 0, sizeof(v156));
    std::string::operator=(&v157, (const std::string *)__str.__r_.__value_.__l.__data_);
    if (v104)
    {
      std::string::operator=(&v156, &v119);
    }
    else
    {
      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v87 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
      else
        v87 = v157.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v155, v87 + 11);
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v88 = &v155;
      else
        v88 = (std::string *)v155.__r_.__value_.__r.__words[0];
      if (v87)
      {
        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v89 = &v157;
        else
          v89 = (std::string *)v157.__r_.__value_.__r.__words[0];
        memmove(v88, v89, v87);
      }
      strcpy((char *)v88 + v87, "_presqueeze");
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v157.__r_.__value_.__l.__data_);
      v157 = v155;
      if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v90 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
      else
        v90 = v119.__r_.__value_.__l.__size_;
      v91 = &v155;
      std::string::basic_string[abi:ne180100]((uint64_t)&v155, v90 + 11);
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v91 = (std::string *)v155.__r_.__value_.__r.__words[0];
      if (v90)
      {
        if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v92 = &v119;
        else
          v92 = (std::string *)v119.__r_.__value_.__r.__words[0];
        memmove(v91, v92, v90);
      }
      strcpy((char *)v91 + v90, "_presqueeze");
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v156.__r_.__value_.__l.__data_);
      v156 = v155;
    }
    std::string::basic_string[abi:ne180100]<0>(&v155, "reduce");
    memset(&v165, 0, sizeof(v165));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v165, v116, v117, 0xAAAAAAAAAAAAAAABLL * (((char *)v117 - (char *)v116) >> 3));
    if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v163, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
    else
      v163 = v157;
    v151 = 0;
    v150 = 0;
    v152 = 0;
    v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v150;
    v161.__r_.__value_.__s.__data_[8] = 0;
    v150 = (__int128 *)operator new(0x18uLL);
    v151 = v150;
    v152 = (char *)v150 + 24;
    v151 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v152, (__int128 *)&v163, (__int128 *)&v164, (std::string *)v150);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v153, v106, (uint64_t)&v155, (uint64_t)&v156, (uint64_t)__p, (__int128 *)v165.__r_.__value_.__l.__data_, (__int128 *)v165.__r_.__value_.__l.__size_, &v150);
    v93 = v154;
    if (v154)
    {
      v94 = (unint64_t *)&v154->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v150;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v163);
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v155.__r_.__value_.__l.__data_);
    if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v156.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((int)v23 < 1)
    {
      if (v104)
        goto LABEL_294;
      v147 = 0u;
      memset(v148, 0, sizeof(v148));
      v145 = 0u;
      v146 = 0u;
      v143 = 0u;
      v144 = 0u;
      *(_OWORD *)__p = 0u;
      v142 = 0u;
      v149 = 1;
      HIDWORD(__p[0]) = v23;
      goto LABEL_280;
    }
    for (i = 0; i != v23; ++i)
    {
      __p[1] = (void *)0x100000007;
      v142 = 0uLL;
      LODWORD(v143) = 0;
      __p[0] = (void *)0x358637BD00000000;
      BYTE8(v143) = 1;
      DWORD1(v143) = *(_QWORD *)(v112 + 8 * i + 8);
      memset(&v156, 0, sizeof(v156));
      if (i >= (v23 - 1))
      {
        if (v104)
        {
          std::string::operator=(&v157, (const std::string *)__str.__r_.__value_.__l.__data_);
          std::string::operator=(&v156, &v119);
        }
        else
        {
          v77 = __str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) >= 0)
            v78 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
          else
            v78 = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8);
          std::string::basic_string[abi:ne180100]((uint64_t)&v155, v78 + 11);
          if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v79 = &v155;
          else
            v79 = (std::string *)v155.__r_.__value_.__r.__words[0];
          if (v78)
          {
            if (*(char *)(v77 + 23) >= 0)
              v80 = (const void *)v77;
            else
              v80 = *(const void **)v77;
            memmove(v79, v80, v78);
          }
          strcpy((char *)v79 + v78, "_presqueeze");
          if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v157.__r_.__value_.__l.__data_);
          v157 = v155;
          if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v81 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
          else
            v81 = v119.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v155, v81 + 11);
          if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v82 = &v155;
          else
            v82 = (std::string *)v155.__r_.__value_.__r.__words[0];
          if (v81)
          {
            if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v83 = &v119;
            else
              v83 = (std::string *)v119.__r_.__value_.__r.__words[0];
            memmove(v82, v83, v81);
          }
          strcpy((char *)v82 + v81, "_presqueeze");
          if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v156.__r_.__value_.__l.__data_);
          v156 = v155;
        }
      }
      else
      {
        v60 = v116;
        if (*((char *)v116 + 23) >= 0)
          v61 = *((unsigned __int8 *)v116 + 23);
        else
          v61 = *((_QWORD *)v116 + 1);
        std::string::basic_string[abi:ne180100]((uint64_t)&v155, v61 + 18);
        if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = &v155;
        else
          v62 = (std::string *)v155.__r_.__value_.__r.__words[0];
        if (v61)
        {
          if (*((char *)v60 + 23) >= 0)
            v63 = v60;
          else
            v63 = *(__int128 **)v60;
          memmove(v62, v63, v61);
        }
        strcpy((char *)v62 + v61, "__reduction_axis__");
        std::to_string(&v165, i + 1);
        if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v64 = &v165;
        else
          v64 = (std::string *)v165.__r_.__value_.__r.__words[0];
        if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
        else
          v65 = v165.__r_.__value_.__l.__size_;
        v66 = std::string::append(&v155, (const std::string::value_type *)v64, v65);
        v67 = v66->__r_.__value_.__r.__words[0];
        v161.__r_.__value_.__r.__words[0] = v66->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v161.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
        v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
        v157.__r_.__value_.__r.__words[0] = v67;
        v157.__r_.__value_.__l.__size_ = v161.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v157.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v161.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v157.__r_.__value_.__s + 23) = v68;
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v165.__r_.__value_.__l.__data_);
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v155.__r_.__value_.__l.__data_);
        if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v69 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
        else
          v69 = v119.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v155, v69 + 18);
        if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v70 = &v155;
        else
          v70 = (std::string *)v155.__r_.__value_.__r.__words[0];
        if (v69)
        {
          if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = &v119;
          else
            v71 = (std::string *)v119.__r_.__value_.__r.__words[0];
          memmove(v70, v71, v69);
        }
        strcpy((char *)v70 + v69, "__reduction_axis__");
        std::to_string(&v165, i);
        if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v72 = &v165;
        else
          v72 = (std::string *)v165.__r_.__value_.__r.__words[0];
        if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v73 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
        else
          v73 = v165.__r_.__value_.__l.__size_;
        v74 = std::string::append(&v155, (const std::string::value_type *)v72, v73);
        v75 = v74->__r_.__value_.__r.__words[0];
        v161.__r_.__value_.__r.__words[0] = v74->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v161.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v74->__r_.__value_.__r.__words[1] + 7);
        v76 = HIBYTE(v74->__r_.__value_.__r.__words[2]);
        v74->__r_.__value_.__l.__size_ = 0;
        v74->__r_.__value_.__r.__words[2] = 0;
        v74->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v156.__r_.__value_.__l.__data_);
        v156.__r_.__value_.__r.__words[0] = v75;
        v156.__r_.__value_.__l.__size_ = v161.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v156.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v161.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v156.__r_.__value_.__s + 23) = v76;
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v165.__r_.__value_.__l.__data_);
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v155.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v155, "reduce");
      if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v165, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
      else
        v165 = v167;
      v151 = 0;
      v150 = 0;
      v152 = 0;
      v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v150;
      v161.__r_.__value_.__s.__data_[8] = 0;
      v150 = (__int128 *)operator new(0x18uLL);
      v151 = v150;
      v152 = (char *)v150 + 24;
      v151 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v152, (__int128 *)&v165, (__int128 *)&v166, (std::string *)v150);
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v161, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
      else
        v161 = v157;
      memset(&v163, 0, sizeof(v163));
      v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163;
      v138.__r_.__value_.__s.__data_[8] = 0;
      v163.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v163.__r_.__value_.__l.__size_ = v163.__r_.__value_.__r.__words[0];
      v163.__r_.__value_.__r.__words[2] = v163.__r_.__value_.__r.__words[0] + 24;
      v163.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v163.__r_.__value_.__r.__words[2], (__int128 *)&v161, (__int128 *)&v162, (std::string *)v163.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v153, v106, (uint64_t)&v155, (uint64_t)&v156, (uint64_t)__p, v150, v151, (__int128 **)&v163);
      v84 = v154;
      if (v154)
      {
        v85 = (unint64_t *)&v154->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v150;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      std::string::operator=(&v167, &v157);
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v156.__r_.__value_.__l.__data_);
    }
  }
  v45 = (char *)v103;
  if (v104)
    goto LABEL_294;
  v147 = 0u;
  memset(v148, 0, sizeof(v148));
  v145 = 0u;
  v146 = 0u;
  v143 = 0u;
  v144 = 0u;
  *(_OWORD *)__p = 0u;
  v142 = 0u;
  v149 = 1;
  if ((int)v23 >= 32)
    LODWORD(v96) = 32;
  else
    LODWORD(v96) = v23;
  HIDWORD(__p[0]) = v96;
  if ((int)v23 >= 1)
  {
    if ((int)v96 <= 1)
      v96 = 1;
    else
      v96 = v96;
    v97 = &__p[1];
    v98 = (uint64_t *)(v112 + 8);
    do
    {
      v99 = *v98++;
      *(_DWORD *)v97 = v99;
      v97 = (void **)((char *)v97 + 4);
      --v96;
    }
    while (v96);
  }
LABEL_280:
  if (HIBYTE(v113))
    v148[24] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v156, "squeeze");
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v161, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  else
    v161 = v157;
  memset(&v155, 0, sizeof(v155));
  v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155;
  v138.__r_.__value_.__s.__data_[8] = 0;
  v155.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v155.__r_.__value_.__l.__size_ = v155.__r_.__value_.__r.__words[0];
  v155.__r_.__value_.__r.__words[2] = v155.__r_.__value_.__r.__words[0] + 24;
  v155.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v155.__r_.__value_.__r.__words[2], (__int128 *)&v161, (__int128 *)&v162, (std::string *)v155.__r_.__value_.__l.__data_);
  memset(&v138, 0, sizeof(v138));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v138, (__int128 *)__str.__r_.__value_.__l.__data_, (__int128 *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v139, v106, (uint64_t)&v156, (uint64_t)&v119, (uint64_t)__p, (__int128 *)v155.__r_.__value_.__l.__data_, (__int128 *)v155.__r_.__value_.__l.__size_, (__int128 **)&v138);
  v100 = v140;
  if (v140)
  {
    v101 = (unint64_t *)&v140->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v158 = &v138;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
  v158 = &v155;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
LABEL_294:
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v167.__r_.__value_.__l.__data_);
  if (v25)
    operator delete(v25);
  if (v108[0])
    operator delete(v108[0]);
  CoreML::Specification::ReduceSumSquareLayerParams::~ReduceSumSquareLayerParams((CoreML::Specification::ReduceSumSquareLayerParams *)&v109);
  __p[0] = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v116;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v119.__r_.__value_.__l.__data_);
  LayerTranslator::defaultUnknownNdShape(v45, (uint64_t *)&v134);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
  __p[0] = &v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v134;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v137.__r_.__value_.__l.__data_);
}

void sub_19C97B8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  char a70;
  void *a72;
  char a73;
  void *v73;
  uint64_t v74;

  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  if (*(char *)(v74 - 121) < 0)
    operator delete(*(void **)(v74 - 144));
  if (v73)
    operator delete(v73);
  if (a24)
    operator delete(a24);
  CoreML::Specification::ReduceSumSquareLayerParams::~ReduceSumSquareLayerParams((CoreML::Specification::ReduceSumSquareLayerParams *)&a27);
  STACK[0x210] = (unint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  STACK[0x210] = (unint64_t)&a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  if (a44 < 0)
    operator delete(a39);
  if (a51 < 0)
    operator delete(a46);
  STACK[0x210] = (unint64_t)&a67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  STACK[0x210] = (unint64_t)&a70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  if (a73 < 0)
    operator delete(a72);
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceLogSumExp(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  _QWORD *v6;
  std::string::size_type size;
  std::string *v8;
  std::string *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string::size_type v13;
  std::string *v14;
  std::string *v15;
  __int128 *v16;
  size_t v17;
  std::string *v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t **v24;
  char *v25;
  __int128 v26;
  const void *v27;
  uint64_t v28;
  _BOOL4 v29;
  _DWORD *v30;
  _DWORD *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  unint64_t v43;
  _DWORD *v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int *v53;
  int v54;
  int v55;
  BOOL v57;
  _BOOL4 v58;
  _BOOL4 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  unint64_t i;
  __int128 *v64;
  size_t v65;
  std::string *v66;
  __int128 *v67;
  std::string *v68;
  std::string::size_type v69;
  std::string *v70;
  std::string::size_type v71;
  char v72;
  std::string::size_type v73;
  std::string *v74;
  std::string *v75;
  std::string *v76;
  std::string::size_type v77;
  std::string *v78;
  std::string::size_type v79;
  char v80;
  std::string *v81;
  std::string::size_type v82;
  std::string *v83;
  std::string *v84;
  std::string::size_type v85;
  std::string *v86;
  std::string *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::string::size_type v91;
  std::string *v92;
  std::string *v93;
  std::string::size_type v94;
  std::string *v95;
  std::string *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  void **v101;
  uint64_t *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  _QWORD *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  char *v111;
  int v112;
  int v113;
  _QWORD *v114;
  std::string v115;
  __int128 *v116;
  __int128 *v117;
  char *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  void *v124;
  void *v125;
  uint64_t v126;
  void (**v127)(CoreML::Specification::ReduceLogSumExpLayerParams *__hidden);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int16 v131;
  int v132;
  std::string *__str;
  __int128 *v134;
  std::string *v135;
  __int128 *v136;
  __int128 *v137;
  char *v138;
  std::string v139;
  std::string v140;
  std::string v141;
  std::string *v142;
  std::string *v143;
  std::string *v144;
  std::string v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  _QWORD v148[3];
  char v149;
  int v150;
  int v151;
  __int128 *v152;
  __int128 *v153;
  uint64_t v154;
  __int128 *v155;
  __int128 *v156;
  uint64_t v157;
  std::string v158;
  std::string v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  void *__p[2];
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  _BYTE v169[25];
  int v170;
  __int128 *v171;
  __int128 *v172;
  char *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  std::string v176;
  std::string v177;
  std::string *v178;
  std::string v179;
  uint64_t v180;
  std::string v181;
  uint64_t v182;
  std::string v183;
  uint64_t v184;
  std::string v185;
  uint64_t v186;
  std::string v187;
  uint64_t v188;
  std::string v189;
  uint64_t v190;
  std::string v191;
  __int128 v192;

  *(_QWORD *)&v192 = *MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v158, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v158.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v5;
  }
  v156 = 0;
  v155 = 0;
  v157 = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v155, (uint64_t *)&v152, *((_QWORD *)this + 1));
  v148[2] = 897988541;
  v149 = 0;
  v151 = 0;
  v150 = 0;
  v148[0] = 27;
  v148[1] = 1065353216;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v145, 0, sizeof(v145));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v145, v152, v153, 0xAAAAAAAAAAAAAAABLL * (((char *)v153 - (char *)v152) >> 3));
  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v158.__r_.__value_.__r.__words[2]);
  else
    size = v158.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)&v191, size + 5);
  if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v191;
  else
    v8 = (std::string *)v191.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v158;
    else
      v9 = (std::string *)v158.__r_.__value_.__r.__words[0];
    memmove(v8, v9, size);
  }
  strcpy((char *)v8 + size, "__exp");
  v142 = 0;
  v143 = 0;
  v144 = 0;
  v189.__r_.__value_.__r.__words[0] = (std::string::size_type)&v142;
  v189.__r_.__value_.__s.__data_[8] = 0;
  v142 = (std::string *)operator new(0x18uLL);
  v143 = v142;
  v144 = v142 + 1;
  v143 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v144, (__int128 *)&v191, &v192, v142);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v146, v6, (uint64_t)__p, (uint64_t)&v158, (uint64_t)v148, (__int128 *)v145.__r_.__value_.__l.__data_, (__int128 *)v145.__r_.__value_.__l.__size_, (__int128 **)&v142);
  v10 = v147;
  if (v147)
  {
    p_shared_owners = (unint64_t *)&v147->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v189.__r_.__value_.__r.__words[0] = (std::string::size_type)&v142;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  v191.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v191);
  if (SBYTE7(v163) < 0)
    operator delete(__p[0]);
  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
  else
    v13 = v158.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)&v141, v13 + 5);
  if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v141;
  else
    v14 = (std::string *)v141.__r_.__value_.__r.__words[0];
  if (v13)
  {
    if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v158;
    else
      v15 = (std::string *)v158.__r_.__value_.__r.__words[0];
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "__exp");
  v16 = v155;
  if (*((char *)v155 + 23) >= 0)
    v17 = *((unsigned __int8 *)v155 + 23);
  else
    v17 = *((_QWORD *)v155 + 1);
  v18 = &v140;
  std::string::basic_string[abi:ne180100]((uint64_t)&v140, v17 + 8);
  if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v140.__r_.__value_.__r.__words[0];
  if (v17)
  {
    if (*((char *)v16 + 23) >= 0)
      v19 = v16;
    else
      v19 = *(__int128 **)v16;
    memmove(v18, v19, v17);
  }
  strcpy((char *)v18 + v17, "__prelog");
  v114 = *(_QWORD **)this;
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v139, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
  else
    v139 = v158;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v181, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  else
    v181 = v141;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  __p[0] = &v136;
  LOBYTE(__p[1]) = 0;
  v136 = (__int128 *)operator new(0x18uLL);
  v137 = v136;
  v138 = (char *)v136 + 24;
  v137 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v138, (__int128 *)&v181, (__int128 *)&v182, (std::string *)v136);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v179, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  else
    v179 = v140;
  __str = 0;
  v134 = 0;
  v135 = 0;
  __p[0] = &__str;
  LOBYTE(__p[1]) = 0;
  __str = (std::string *)operator new(0x18uLL);
  v134 = (__int128 *)__str;
  v135 = __str + 1;
  v20 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v135, (__int128 *)&v179, (__int128 *)&v180, __str);
  v134 = v20;
  if (*((_DWORD *)a2 + 35) == 1295)
  {
    v21 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v20);
    v21 = &CoreML::Specification::_ReduceLogSumExpLayerParams_default_instance_;
  }
  v129 = 0;
  v130 = 0;
  v127 = &off_1E3D558F8;
  v128 = 0;
  v22 = *((_DWORD *)v21 + 4);
  if (v22)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v129, v22);
    memcpy((void *)(v130 + 8), (const void *)(v21[3] + 8), 8 * *((int *)v21 + 4));
    LODWORD(v129) = *((_DWORD *)v21 + 4);
  }
  v132 = 0;
  v23 = v21[1];
  if ((v23 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v128, v23 & 0xFFFFFFFFFFFFFFFELL);
  v131 = *((_WORD *)v21 + 18);
  v24 = (uint64_t **)*((_QWORD *)this + 1);
  v191.__r_.__value_.__r.__words[0] = (std::string::size_type)v152;
  v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, v152, (__int128 **)&v191);
  v26 = *(_OWORD *)(v25 + 72);
  v121 = *(_OWORD *)(v25 + 56);
  v122 = v26;
  v27 = (const void *)*((_QWORD *)v25 + 12);
  v123 = *((_QWORD *)v25 + 11);
  v124 = 0;
  v125 = 0;
  v126 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v124, v27, *((_QWORD *)v25 + 13), (uint64_t)(*((_QWORD *)v25 + 13) - (_QWORD)v27) >> 2);
  v111 = (char *)this;
  v112 = v131;
  v28 = v129;
  v113 = HIBYTE(v131);
  v29 = HIBYTE(v131) != 0;
  if ((int)v129 >= 1)
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    while (1)
    {
      v34 = *(_DWORD *)(v130 + 8 * v33 + 8);
      if (v34 < 0)
      {
        if ((unint64_t)v31 >= v32)
        {
          v42 = v31 - v30;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v32 - (_QWORD)v30) >> 1 > v43)
            v43 = (uint64_t)(v32 - (_QWORD)v30) >> 1;
          if (v32 - (unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
            v39 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v39 = v43;
          if (v39)
            v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v39);
          else
            v40 = 0;
          v44 = (_DWORD *)(v39 + 4 * v42);
          *v44 = v34;
          v41 = v44 + 1;
          while (v31 != v30)
          {
            v46 = *--v31;
            *--v44 = v46;
          }
          goto LABEL_96;
        }
      }
      else
      {
        v35 = DWORD1(v122);
        if ((_DWORD)v122 == 1)
          v36 = 4;
        else
          v36 = 5;
        if (DWORD1(v122) == -1)
          v35 = v36;
        v34 -= v35;
        if ((unint64_t)v31 >= v32)
        {
          v37 = v31 - v30;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v32 - (_QWORD)v30) >> 1 > v38)
            v38 = (uint64_t)(v32 - (_QWORD)v30) >> 1;
          if (v32 - (unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
            v39 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v39 = v38;
          if (v39)
            v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v39);
          else
            v40 = 0;
          v44 = (_DWORD *)(v39 + 4 * v37);
          *v44 = v34;
          v41 = v44 + 1;
          while (v31 != v30)
          {
            v45 = *--v31;
            *--v44 = v45;
          }
LABEL_96:
          v32 = v39 + 4 * v40;
          if (v30)
            operator delete(v30);
          v30 = v44;
          goto LABEL_99;
        }
      }
      *v31 = v34;
      v41 = v31 + 1;
LABEL_99:
      ++v33;
      v31 = v41;
      if (v33 == v28)
        goto LABEL_102;
    }
  }
  v30 = 0;
  v41 = 0;
LABEL_102:
  std::__sort<std::__less<int,int> &,int *>();
  v47 = v41 - v30;
  v48 = DWORD1(v122);
  if ((_DWORD)v122 == 1)
    v49 = 4;
  else
    v49 = 5;
  if (DWORD1(v122) == -1)
    v48 = v49;
  if (!v113 && v48 == (_DWORD)v47)
  {
    if (v41 == v30)
    {
      v29 = 1;
    }
    else
    {
      if (v47 <= 1)
        v50 = 1;
      else
        v50 = v41 - v30;
      v51 = v50 - 1;
      v52 = -(int)v47;
      v53 = v30;
      do
      {
        v55 = *v53++;
        v54 = v55;
        v57 = v51-- != 0;
        v29 = v52 == v54;
        if (v52 != v54)
          break;
        ++v52;
      }
      while (v57);
    }
  }
  if (v47 == 3)
  {
    if (*v30 == -3 && v30[1] == -2)
    {
      v59 = 0;
      v58 = v30[2] == -1;
      goto LABEL_129;
    }
  }
  else if (v47 == 2 && *v30 == -2)
  {
    v58 = 0;
    v59 = v30[1] == -1;
    goto LABEL_129;
  }
  v59 = 0;
  v58 = 0;
LABEL_129:
  if (*((char *)v136 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)v136, *((_QWORD *)v136 + 1));
  }
  else
  {
    v60 = *v136;
    v191.__r_.__value_.__r.__words[2] = *((_QWORD *)v136 + 2);
    *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v60;
  }
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v189, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else
  {
    v61 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    v189.__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v61;
  }
  if (v29 || v59 || v58)
  {
    __p[1] = (void *)0x100000007;
    v163 = 0uLL;
    *(_QWORD *)&v164 = 0xFFFFFFFF00000000;
    __p[0] = (void *)0x358637BD00000000;
    BYTE8(v164) = 0;
    if (v29 || v59)
    {
      if (v29)
        v62 = 31;
      else
        v62 = 3;
      LODWORD(__p[1]) = v62;
    }
    memset(&v177, 0, sizeof(v177));
    std::string::operator=(&v189, __str);
    if (v112)
    {
      std::string::operator=(&v177, &v139);
    }
    else
    {
      if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v91 = HIBYTE(v189.__r_.__value_.__r.__words[2]);
      else
        v91 = v189.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v176, v91 + 11);
      if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v92 = &v176;
      else
        v92 = (std::string *)v176.__r_.__value_.__r.__words[0];
      if (v91)
      {
        if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v93 = &v189;
        else
          v93 = (std::string *)v189.__r_.__value_.__r.__words[0];
        memmove(v92, v93, v91);
      }
      strcpy((char *)v92 + v91, "_presqueeze");
      if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v189.__r_.__value_.__l.__data_);
      v189 = v176;
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v94 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      else
        v94 = v139.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v176, v94 + 11);
      if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v95 = &v176;
      else
        v95 = (std::string *)v176.__r_.__value_.__r.__words[0];
      if (v94)
      {
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v96 = &v139;
        else
          v96 = (std::string *)v139.__r_.__value_.__r.__words[0];
        memmove(v95, v96, v94);
      }
      strcpy((char *)v95 + v94, "_presqueeze");
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      v177 = v176;
    }
    std::string::basic_string[abi:ne180100]<0>(&v176, "reduce");
    memset(&v187, 0, sizeof(v187));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v187, v136, v137, 0xAAAAAAAAAAAAAAABLL * (((char *)v137 - (char *)v136) >> 3));
    if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v185, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
    else
      v185 = v189;
    v172 = 0;
    v171 = 0;
    v173 = 0;
    v183.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
    v183.__r_.__value_.__s.__data_[8] = 0;
    v171 = (__int128 *)operator new(0x18uLL);
    v172 = v171;
    v173 = (char *)v171 + 24;
    v172 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v173, (__int128 *)&v185, (__int128 *)&v186, (std::string *)v171);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v174, v114, (uint64_t)&v176, (uint64_t)&v177, (uint64_t)__p, (__int128 *)v187.__r_.__value_.__l.__data_, (__int128 *)v187.__r_.__value_.__l.__size_, &v171);
    v97 = v175;
    if (v175)
    {
      v98 = (unint64_t *)&v175->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    v183.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
    if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v185.__r_.__value_.__l.__data_);
    v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v176.__r_.__value_.__l.__data_);
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v177.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((int)v28 < 1)
    {
      if (v112)
        goto LABEL_309;
      v168 = 0u;
      memset(v169, 0, sizeof(v169));
      v166 = 0u;
      v167 = 0u;
      v164 = 0u;
      v165 = 0u;
      *(_OWORD *)__p = 0u;
      v163 = 0u;
      v170 = 1;
      HIDWORD(__p[0]) = v28;
      goto LABEL_295;
    }
    for (i = 0; i != v28; ++i)
    {
      __p[1] = (void *)0x100000007;
      v163 = 0uLL;
      LODWORD(v164) = 0;
      __p[0] = (void *)0x358637BD00000000;
      BYTE8(v164) = 1;
      DWORD1(v164) = *(_QWORD *)(v130 + 8 * i + 8);
      memset(&v177, 0, sizeof(v177));
      if (i >= (v28 - 1))
      {
        if (v112)
        {
          std::string::operator=(&v189, __str);
          std::string::operator=(&v177, &v139);
        }
        else
        {
          v81 = __str;
          if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v82 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
          else
            v82 = __str->__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v176, v82 + 11);
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v83 = &v176;
          else
            v83 = (std::string *)v176.__r_.__value_.__r.__words[0];
          if (v82)
          {
            if ((v81->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v84 = v81;
            else
              v84 = (std::string *)v81->__r_.__value_.__r.__words[0];
            memmove(v83, v84, v82);
          }
          strcpy((char *)v83 + v82, "_presqueeze");
          if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v189.__r_.__value_.__l.__data_);
          v189 = v176;
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v85 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          else
            v85 = v139.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v176, v85 + 11);
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v86 = &v176;
          else
            v86 = (std::string *)v176.__r_.__value_.__r.__words[0];
          if (v85)
          {
            if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v87 = &v139;
            else
              v87 = (std::string *)v139.__r_.__value_.__r.__words[0];
            memmove(v86, v87, v85);
          }
          strcpy((char *)v86 + v85, "_presqueeze");
          if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v177.__r_.__value_.__l.__data_);
          v177 = v176;
        }
      }
      else
      {
        v64 = v136;
        if (*((char *)v136 + 23) >= 0)
          v65 = *((unsigned __int8 *)v136 + 23);
        else
          v65 = *((_QWORD *)v136 + 1);
        std::string::basic_string[abi:ne180100]((uint64_t)&v176, v65 + 18);
        if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = &v176;
        else
          v66 = (std::string *)v176.__r_.__value_.__r.__words[0];
        if (v65)
        {
          if (*((char *)v64 + 23) >= 0)
            v67 = v64;
          else
            v67 = *(__int128 **)v64;
          memmove(v66, v67, v65);
        }
        strcpy((char *)v66 + v65, "__reduction_axis__");
        std::to_string(&v187, i + 1);
        if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v68 = &v187;
        else
          v68 = (std::string *)v187.__r_.__value_.__r.__words[0];
        if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v69 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
        else
          v69 = v187.__r_.__value_.__l.__size_;
        v70 = std::string::append(&v176, (const std::string::value_type *)v68, v69);
        v71 = v70->__r_.__value_.__r.__words[0];
        v183.__r_.__value_.__r.__words[0] = v70->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v183.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v70->__r_.__value_.__r.__words[1] + 7);
        v72 = HIBYTE(v70->__r_.__value_.__r.__words[2]);
        v70->__r_.__value_.__l.__size_ = 0;
        v70->__r_.__value_.__r.__words[2] = 0;
        v70->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v189.__r_.__value_.__l.__data_);
        v189.__r_.__value_.__r.__words[0] = v71;
        v189.__r_.__value_.__l.__size_ = v183.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v189.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v183.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v189.__r_.__value_.__s + 23) = v72;
        if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v187.__r_.__value_.__l.__data_);
        if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v176.__r_.__value_.__l.__data_);
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v73 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        else
          v73 = v139.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v176, v73 + 18);
        if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v74 = &v176;
        else
          v74 = (std::string *)v176.__r_.__value_.__r.__words[0];
        if (v73)
        {
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = &v139;
          else
            v75 = (std::string *)v139.__r_.__value_.__r.__words[0];
          memmove(v74, v75, v73);
        }
        strcpy((char *)v74 + v73, "__reduction_axis__");
        std::to_string(&v187, i);
        if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v76 = &v187;
        else
          v76 = (std::string *)v187.__r_.__value_.__r.__words[0];
        if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v77 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
        else
          v77 = v187.__r_.__value_.__l.__size_;
        v78 = std::string::append(&v176, (const std::string::value_type *)v76, v77);
        v79 = v78->__r_.__value_.__r.__words[0];
        v183.__r_.__value_.__r.__words[0] = v78->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v183.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v78->__r_.__value_.__r.__words[1] + 7);
        v80 = HIBYTE(v78->__r_.__value_.__r.__words[2]);
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v177.__r_.__value_.__l.__data_);
        v177.__r_.__value_.__r.__words[0] = v79;
        v177.__r_.__value_.__l.__size_ = v183.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v177.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v183.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v177.__r_.__value_.__s + 23) = v80;
        if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v187.__r_.__value_.__l.__data_);
        if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v176.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v176, "reduce");
      if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v187, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
      else
        v187 = v191;
      v172 = 0;
      v171 = 0;
      v173 = 0;
      v183.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
      v183.__r_.__value_.__s.__data_[8] = 0;
      v171 = (__int128 *)operator new(0x18uLL);
      v172 = v171;
      v173 = (char *)v171 + 24;
      v172 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v173, (__int128 *)&v187, (__int128 *)&v188, (std::string *)v171);
      if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v183, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
      else
        v183 = v189;
      memset(&v185, 0, sizeof(v185));
      v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
      v159.__r_.__value_.__s.__data_[8] = 0;
      v185.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v185.__r_.__value_.__l.__size_ = v185.__r_.__value_.__r.__words[0];
      v185.__r_.__value_.__r.__words[2] = v185.__r_.__value_.__r.__words[0] + 24;
      v185.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v185.__r_.__value_.__r.__words[2], (__int128 *)&v183, (__int128 *)&v184, (std::string *)v185.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v174, v114, (uint64_t)&v176, (uint64_t)&v177, (uint64_t)__p, v171, v172, (__int128 **)&v185);
      v88 = v175;
      if (v175)
      {
        v89 = (unint64_t *)&v175->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
      if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v183.__r_.__value_.__l.__data_);
      v183.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v187.__r_.__value_.__l.__data_);
      if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v176.__r_.__value_.__l.__data_);
      std::string::operator=(&v191, &v189);
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
    }
  }
  if (v112)
    goto LABEL_309;
  v168 = 0u;
  memset(v169, 0, sizeof(v169));
  v166 = 0u;
  v167 = 0u;
  v164 = 0u;
  v165 = 0u;
  *(_OWORD *)__p = 0u;
  v163 = 0u;
  v170 = 1;
  if ((int)v28 >= 32)
    LODWORD(v100) = 32;
  else
    LODWORD(v100) = v28;
  HIDWORD(__p[0]) = v100;
  if ((int)v28 >= 1)
  {
    if ((int)v100 <= 1)
      v100 = 1;
    else
      v100 = v100;
    v101 = &__p[1];
    v102 = (uint64_t *)(v130 + 8);
    do
    {
      v103 = *v102++;
      *(_DWORD *)v101 = v103;
      v101 = (void **)((char *)v101 + 4);
      --v100;
    }
    while (v100);
  }
LABEL_295:
  if (HIBYTE(v131))
    v169[24] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v177, "squeeze");
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v183, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
  else
    v183 = v189;
  memset(&v176, 0, sizeof(v176));
  v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&v176;
  v159.__r_.__value_.__s.__data_[8] = 0;
  v176.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v176.__r_.__value_.__l.__size_ = v176.__r_.__value_.__r.__words[0];
  v176.__r_.__value_.__r.__words[2] = v176.__r_.__value_.__r.__words[0] + 24;
  v176.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v176.__r_.__value_.__r.__words[2], (__int128 *)&v183, (__int128 *)&v184, (std::string *)v176.__r_.__value_.__l.__data_);
  memset(&v159, 0, sizeof(v159));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v159, (__int128 *)__str, v134, 0xAAAAAAAAAAAAAAABLL * (((char *)v134 - (char *)__str) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v160, v114, (uint64_t)&v177, (uint64_t)&v139, (uint64_t)__p, (__int128 *)v176.__r_.__value_.__l.__data_, (__int128 *)v176.__r_.__value_.__l.__size_, (__int128 **)&v159);
  v104 = v161;
  if (v161)
  {
    v105 = (unint64_t *)&v161->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v178 = &v159;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v178);
  v178 = &v176;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v178);
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v183.__r_.__value_.__l.__data_);
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v177.__r_.__value_.__l.__data_);
LABEL_309:
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v189.__r_.__value_.__l.__data_);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v30)
    operator delete(v30);
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  CoreML::Specification::ReduceLogSumExpLayerParams::~ReduceLogSumExpLayerParams((CoreML::Specification::ReduceLogSumExpLayerParams *)&v127);
  __p[0] = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v179.__r_.__value_.__l.__data_);
  __p[0] = &v136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v181.__r_.__value_.__l.__data_);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v139.__r_.__value_.__l.__data_);
  *(_QWORD *)&v163 = 897988541;
  BYTE8(v163) = 0;
  LODWORD(v165) = 0;
  HIDWORD(v164) = 0;
  __p[1] = (void *)1065353216;
  __p[0] = (void *)26;
  v107 = *(_QWORD **)v111;
  std::string::basic_string[abi:ne180100]<0>(&v191, "elementwise");
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v189, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  else
    v189 = v140;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v177.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
  v177.__r_.__value_.__s.__data_[8] = 0;
  v116 = (__int128 *)operator new(0x18uLL);
  v117 = v116;
  v118 = (char *)v116 + 24;
  v117 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v118, (__int128 *)&v189, (__int128 *)&v190, (std::string *)v116);
  memset(&v115, 0, sizeof(v115));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v115, v155, v156, 0xAAAAAAAAAAAAAAABLL * (((char *)v156 - (char *)v155) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v119, v107, (uint64_t)&v191, (uint64_t)&v158, (uint64_t)__p, v116, v117, (__int128 **)&v115);
  v108 = v120;
  if (v120)
  {
    v109 = (unint64_t *)&v120->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v177.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v177);
  v177.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v177);
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v189.__r_.__value_.__l.__data_);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  LayerTranslator::defaultUnknownNdShape(v111, (uint64_t *)&v155);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  __p[0] = &v152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v155;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
}

void sub_19C97D1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  char a72;
  void *v72;
  uint64_t v73;

  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  if (*(char *)(v73 - 153) < 0)
    operator delete(*(void **)(v73 - 176));
  if (*(char *)(v73 - 121) < 0)
    operator delete(*(void **)(v73 - 144));
  if (v72)
    operator delete(v72);
  if (a32)
    operator delete(a32);
  CoreML::Specification::ReduceLogSumExpLayerParams::~ReduceLogSumExpLayerParams((CoreML::Specification::ReduceLogSumExpLayerParams *)&a35);
  STACK[0x260] = (unint64_t)&a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  STACK[0x260] = (unint64_t)&a44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  if (SLOBYTE(STACK[0x387]) < 0)
    operator delete((void *)STACK[0x370]);
  if (a52 < 0)
    operator delete(a47);
  if (a58 < 0)
    operator delete(a53);
  if (a64 < 0)
    operator delete(a59);
  STACK[0x260] = (unint64_t)&a72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  STACK[0x260] = (unint64_t)&STACK[0x208];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  _Unwind_Resume(a1);
}

void LayerTranslator::addReverseSeq(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  unint64_t *inited;
  int v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string v19;
  std::string v20;
  void *__p;
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  int v25;
  int v26;
  __int128 *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 *v30;
  __int128 *v31;
  uint64_t v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::string *v40;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v33.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v5;
  }
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v30, (uint64_t *)&v27, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 965)
  {
    v7 = a2[16];
    v25 = v7[2];
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v9 = *((_DWORD *)a2 + 35);
    v25 = qword_1ED004BD0;
    if (v9 == 965)
    {
      v7 = a2[16];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v7 = &CoreML::Specification::_ReverseSeqLayerParams_default_instance_;
    }
  }
  v26 = v7[3];
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "reverse_seq");
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  memset(&v35, 0, sizeof(v35));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v35, (__int128 *)v20.__r_.__value_.__l.__data_, (__int128 *)v20.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20.__r_.__value_.__l.__size_ - v20.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v34, 0, sizeof(v34));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v34, (__int128 *)v19.__r_.__value_.__l.__data_, (__int128 *)v19.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19.__r_.__value_.__l.__size_ - v19.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v37.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v10[14] + 8))(*(_QWORD *)(v10[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v38 = v23;
  v39 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  memset(&v37, 0, sizeof(v37));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v37, (__int128 *)v35.__r_.__value_.__l.__data_, (__int128 *)v35.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35.__r_.__value_.__l.__size_ - v35.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v36, 0, sizeof(v36));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v36, (__int128 *)v34.__r_.__value_.__l.__data_, (__int128 *)v34.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34.__r_.__value_.__l.__size_ - v34.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v40 = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v40 = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v13 = v39;
  if (v39)
  {
    v14 = (unint64_t *)&v39->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (*v10)
    Espresso::sequential_builder::add_shape_from_kernel();
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (v22 < 0)
    operator delete(__p);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v30);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
}

void sub_19C97D938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  uint64_t v36;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  *(_QWORD *)(v36 - 56) = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = v36 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  if (a20 < 0)
    operator delete(__p);
  __p = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a24 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(a1);
}

void LayerTranslator::addMaxBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[3];
  char v17;
  int v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[2] = (void **)897988541;
  v18 = 0;
  v19 = 0;
  v16[0] = (void **)23;
  v16[1] = (void **)1065353216;
  v17 = 1;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C97DC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addLoadConstantND(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  std::vector<std::string>::const_iterator v6;
  std::vector<std::string>::const_iterator v7;
  std::vector<std::string>::iterator v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  CoreML::Specification::WeightParams *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _QWORD *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unint64_t v34;
  void *v35;
  int WeightParamSize;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  _BOOL8 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *exception;
  void *v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  std::string *v69;
  std::__shared_weak_count *v70;
  std::string v71;
  std::string v72;
  void *__p[2];
  char v74;
  void **v75;
  std::__shared_weak_count *v76;
  __int128 v77;
  unint64_t v78;
  std::vector<std::string> *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  int v84;
  std::vector<std::string> v85;
  __int128 *v86;
  __int128 *v87;
  uint64_t v88;
  std::string v89;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v89, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v89.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v5;
  }
  v86 = 0;
  v87 = 0;
  v88 = 0;
  memset(&v85, 0, sizeof(v85));
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v86, (uint64_t *)&v85, *((_QWORD *)this + 1));
  v6.__i_ = v85.__begin_;
  v7.__i_ = v85.__end_;
  v8.__i_ = std::vector<std::string>::erase(&v85, v6, v7).__i_;
  if (*((_DWORD *)a2 + 35) == 1070)
  {
    v9 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v8.__i_);
    v9 = &CoreML::Specification::_LoadConstantNDLayerParams_default_instance_;
  }
  v81 = 0;
  v82 = 0;
  v79 = (std::vector<std::string> *)&off_1E3D55010;
  v80 = 0;
  v10 = *((_DWORD *)v9 + 4);
  if (v10)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v81, v10);
    memcpy((void *)(v82 + 8), (const void *)(v9[3] + 8), 8 * *((int *)v9 + 4));
    LODWORD(v81) = *((_DWORD *)v9 + 4);
  }
  v84 = 0;
  v11 = v9[1];
  if ((v11 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v80, v11 & 0xFFFFFFFFFFFFFFFELL);
  v12 = 0;
  if (v9 != &CoreML::Specification::_LoadConstantNDLayerParams_default_instance_ && v9[5])
  {
    v12 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v12, (const CoreML::Specification::WeightParams *)v9[5]);
  }
  v83 = (uint64_t *)v12;
  v77 = xmmword_19CB39920;
  v78 = 0xFFFFFFFF00000001;
  if (!(_DWORD)v81)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Load Constant: shape must be of non empty");
    goto LABEL_131;
  }
  if ((int)v81 >= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Load Constant: can only handle rank 1 to 5");
LABEL_131:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v13 = *(_DWORD *)(v82 + 8 * ((int)v81 - 1) + 8);
  if ((int)v81 < 2)
  {
    v15 = 1;
    v14 = 1;
    goto LABEL_20;
  }
  v14 = *(_DWORD *)(v82 + 8 * (v81 - 2) + 8);
  if ((_DWORD)v81 == 2)
  {
    v15 = 1;
LABEL_20:
    v16 = 1;
    goto LABEL_21;
  }
  v16 = *(_DWORD *)(v82 + 8 * (v81 - 3) + 8);
  if (v81 < 4)
  {
    v15 = 1;
    goto LABEL_21;
  }
  v15 = *(_DWORD *)(v82 + 8 * (v81 - 4) + 8);
  if ((_DWORD)v81 == 4)
  {
LABEL_21:
    v17 = 1;
    goto LABEL_22;
  }
  v17 = *(_DWORD *)(v82 + 8 * (v81 - 5) + 8);
LABEL_22:
  HIDWORD(v77) = v15;
  LODWORD(v77) = v13;
  *(_QWORD *)((char *)&v77 + 4) = __PAIR64__(v16, v14);
  v78 = __PAIR64__(v81, v17);
  v18 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_constant");
  memset(&v72, 0, sizeof(v72));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v72, (__int128 *)v85.__begin_, (__int128 *)v85.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_ - (char *)v85.__begin_) >> 3));
  memset(&v71, 0, sizeof(v71));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v71, v86, v87, 0xAAAAAAAAAAAAAAABLL * (((char *)v87 - (char *)v86) >> 3));
  Espresso::sequential_builder::add<Espresso::load_constant_params>((uint64_t *)&v75, v18, (uint64_t)__p, (uint64_t)&v89, (uint64_t)&v77, (__int128 *)v72.__r_.__value_.__l.__data_, (__int128 *)v72.__r_.__value_.__l.__size_, (__int128 **)&v71);
  v69 = &v71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  v69 = &v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  if (v74 < 0)
    operator delete(__p[0]);
  v69 = (std::string *)v75;
  v70 = v76;
  if (v76)
  {
    p_shared_owners = (unint64_t *)&v76->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v67, v77, SDWORD1(v77), SDWORD2(v77), v78 * HIDWORD(v77));
  if (v83)
    v21 = v83;
  else
    v21 = &CoreML::Specification::_WeightParams_default_instance_;
  v22 = v21[5];
  if (*(char *)(v22 + 23) < 0)
    v23 = *(_QWORD *)(v22 + 8);
  else
    v23 = *(unsigned __int8 *)(v22 + 23);
  v24 = v21[6];
  v25 = *(unsigned __int8 *)(v24 + 23);
  if (*(char *)(v24 + 23) < 0)
    v26 = *(_QWORD *)(v24 + 8);
  else
    v26 = *(unsigned __int8 *)(v24 + 23);
  v27 = *((_DWORD *)v21 + 4);
  v28 = v21[7];
  if (*(char *)(v28 + 23) < 0)
    v29 = *(_QWORD *)(v28 + 8);
  else
    v29 = *(unsigned __int8 *)(v28 + 23);
  if (v27 <= 0)
    v30 = 1;
  else
    v30 = 2;
  if (v23)
    v31 = v30;
  else
    v31 = v27 > 0;
  if (v26)
    ++v31;
  if (v29)
    ++v31;
  if (v27 > 0 || v31 != 1)
    goto LABEL_70;
  if ((*(_BYTE *)(v22 + 23) & 0x80) != 0)
  {
    if (!*(_QWORD *)(v22 + 8))
      goto LABEL_61;
LABEL_70:
    WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)v21);
    if (WeightParamSize != DWORD1(v77) * DWORD2(v77) * (_DWORD)v77 * HIDWORD(v77) * (_DWORD)v78)
    {
      v65 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](v65, "Load Constant: data size does not match provided shape");
      __cxa_throw(v65, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v67 + 24), v21, 4 * WeightParamSize);
    goto LABEL_72;
  }
  if (*(_BYTE *)(v22 + 23))
    goto LABEL_70;
LABEL_61:
  if ((v25 & 0x80) != 0)
    v25 = *(_QWORD *)(v24 + 8);
  if (v21 == &CoreML::Specification::_WeightParams_default_instance_)
    goto LABEL_70;
  if (!v25 || v21[8] == 0)
    goto LABEL_70;
  v34 = v15 * v13 * v14 * v16 * v17;
  EspressoConverter::readFloatFromWeightParams((EspressoConverter *)__p, (const CoreML::Specification::WeightParams *)v21, v34);
  v35 = __p[0];
  memcpy(*(void **)(v67 + 24), __p[0], 4 * v34);
  if (v35)
    operator delete(v35);
LABEL_72:
  v66 = v68;
  if (v68)
  {
    v37 = (unint64_t *)&v68->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  Espresso::generic_load_constant_kernel::set_constant_blob();
  if (v66)
  {
    v39 = (unint64_t *)&v66->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v86);
  if (v83)
    v41 = v83;
  else
    v41 = &CoreML::Specification::_WeightParams_default_instance_;
  v42 = v41[5];
  v43 = *(unsigned __int8 *)(v42 + 23);
  if (*(char *)(v42 + 23) < 0)
    v44 = *(_QWORD *)(v42 + 8);
  else
    v44 = *(unsigned __int8 *)(v42 + 23);
  v45 = v41[6];
  if (*(char *)(v45 + 23) < 0)
    v46 = *(_QWORD *)(v45 + 8);
  else
    v46 = *(unsigned __int8 *)(v45 + 23);
  v47 = *((_DWORD *)v41 + 4);
  v48 = v41[7];
  if (*(char *)(v48 + 23) < 0)
    v49 = *(_QWORD *)(v48 + 8);
  else
    v49 = *(unsigned __int8 *)(v48 + 23);
  if (v47 <= 0)
    v50 = 1;
  else
    v50 = 2;
  if (v44)
    v51 = v50;
  else
    v51 = v47 > 0;
  if (v46)
    ++v51;
  if (v49)
    ++v51;
  if (v47 <= 0 && v51 == 1)
  {
    if ((v43 & 0x80) != 0)
      v43 = *(_QWORD *)(v42 + 8);
    v53 = v43 != 0;
  }
  else
  {
    v53 = 0;
  }
  v54 = v68;
  if (v68)
  {
    v55 = (unint64_t *)&v68->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = v70;
  if (v70)
  {
    v58 = (unint64_t *)&v70->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v76;
  if (v76)
  {
    v61 = (unint64_t *)&v76->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  CoreML::Specification::LoadConstantNDLayerParams::~LoadConstantNDLayerParams((CoreML::Specification::LoadConstantNDLayerParams *)&v79);
  v79 = &v85;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  v79 = (std::vector<std::string> *)&v86;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  return v53;
}

void sub_19C97E384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p)
{
  uint64_t v36;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  CoreML::Specification::LoadConstantNDLayerParams::~LoadConstantNDLayerParams((CoreML::Specification::LoadConstantNDLayerParams *)&a33);
  a33 = v36 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a33 = v36 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  if (*(char *)(v36 - 89) < 0)
    operator delete(*(void **)(v36 - 112));
  _Unwind_Resume(a1);
}

void LayerTranslator::addScatterAlongAxis(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t *inited;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  std::runtime_error *exception;
  std::string v25;
  std::string v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::string v29;
  void *__p[2];
  uint64_t v31;
  void (**v32)(CoreML::Specification::ScatterAlongAxisLayerParams *__hidden);
  uint64_t v33[2];
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  __int16 v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 *v43;
  __int128 *v44;
  uint64_t v45;
  std::string v46;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v46.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v5;
  }
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v43, (uint64_t *)&v40, *((_QWORD *)this + 1));
  v38 = 0;
  v39 = 257;
  if (*((_DWORD *)a2 + 35) == 954)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    v8 = v7[2];
    v36 = 2;
    v37 = v8;
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v10 = *((_DWORD *)a2 + 35);
    v36 = 2;
    v37 = qword_1ED005D58;
    if (v10 == 954)
    {
      v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v7 = &CoreML::Specification::_ScatterAlongAxisLayerParams_default_instance_;
    }
  }
  v32 = &off_1E3D560B0;
  v33[0] = 0;
  v35 = 0;
  v11 = v7[1];
  if ((v11 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v33, v11 & 0xFFFFFFFFFFFFFFFELL);
  v12 = v7[2];
  v13 = *((_DWORD *)v7 + 6);
  v34 = v13;
  v33[1] = v12;
  if (v13 >= 7)
  {
    if (v13 == 0x80000000 || v13 == 0x7FFFFFFF)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"ScatterAlongAxis layer: '", 25);
      v19 = *((_QWORD *)a2 + 14);
      v20 = *(char *)(v19 + 23);
      if (v20 >= 0)
        v21 = *((_QWORD *)a2 + 14);
      else
        v21 = *(_QWORD *)v19;
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(v19 + 23);
      else
        v22 = *(_QWORD *)(v19 + 8);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"': unknown value for parameter 'mode'.", 38);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &v29);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    v38 = v13;
  }
  v14 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter_nd");
  memset(&v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v26, v40, v41, 0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (char *)v40) >> 3));
  memset(&v25, 0, sizeof(v25));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v25, v43, v44, 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (char *)v43) >> 3));
  Espresso::sequential_builder::add<Espresso::scatter_nd_params_t>(&v27, v14, (uint64_t)__p, (uint64_t)&v46, (uint64_t)&v36, (__int128 *)v26.__r_.__value_.__l.__data_, (__int128 *)v26.__r_.__value_.__l.__size_, (__int128 **)&v25);
  v15 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v43);
  v32 = &off_1E3D560B0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v33);
  __p[0] = &v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
}

void sub_19C97E7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t *v28;
  void *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a23);
      *(_QWORD *)(v32 - 176) = v30;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v28);
      a23 = (void *)(v32 - 128);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      a23 = (void *)(v32 - 104);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      if (*(char *)(v32 - 57) < 0)
        operator delete(*(void **)(v32 - 80));
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

void LayerTranslator::addBroadcastToLike(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[3];
  char v17;
  int v18;
  char v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[0] = (void **)-1;
  v16[1] = (void **)-1;
  v16[2] = (void **)0xFFFFFFFF00000001;
  v18 = 1;
  v17 = 1;
  v19 = 0;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::broadcast_params_t>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C97EAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::broadcast_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C97ED28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addBroadcastToStatic(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  std::string v18;
  std::string v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  char v28;
  int v29;
  char v30;
  __int128 **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 *v39;
  __int128 *v40;
  uint64_t v41;
  std::string v42;
  std::string *v43;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v42, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v42.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v5;
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v39, (uint64_t *)&v36, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1105)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_BroadcastToStaticLayerParams_default_instance_;
  }
  v33 = 0;
  v34 = 0;
  v31 = (__int128 **)&off_1E3D56278;
  v32 = 0;
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v33, v8);
    memcpy((void *)(v34 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    v9 = *((_DWORD *)v7 + 4);
    LODWORD(v33) = v9;
  }
  else
  {
    v9 = 0;
  }
  v35 = 0;
  v10 = v7[1];
  if ((v10 & 1) != 0)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v32, v10 & 0xFFFFFFFFFFFFFFFELL);
    v9 = v33;
  }
  v24 = -1;
  v25 = -1;
  v29 = 1;
  v28 = 1;
  v30 = 0;
  v27 = v9;
  if (v9 <= 0)
  {
    LODWORD(v24) = 1;
    goto LABEL_20;
  }
  LODWORD(v24) = *(_QWORD *)(v34 + 8 * (v9 - 1) + 8);
  if (v9 == 1)
  {
LABEL_20:
    HIDWORD(v24) = 1;
    goto LABEL_21;
  }
  HIDWORD(v24) = *(_QWORD *)(v34 + 8 * (v9 - 2) + 8);
  if (v9 <= 2)
  {
LABEL_21:
    LODWORD(v25) = 1;
    goto LABEL_22;
  }
  LODWORD(v25) = *(_QWORD *)(v34 + 8 * (v9 - 3) + 8);
  if (v9 == 3)
  {
LABEL_22:
    v17 = 1;
    HIDWORD(v25) = 1;
    goto LABEL_23;
  }
  HIDWORD(v25) = *(_QWORD *)(v34 + 8 * (v9 - 4) + 8);
  v11 = v9 >= 5;
  v12 = v9 - 5;
  if (v11)
    v17 = *(_DWORD *)(v34 + 8 * v12 + 8);
  else
    v17 = 1;
LABEL_23:
  v26 = v17;
  v13 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, v36, v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3));
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, v39, v40, 0xAAAAAAAAAAAAAAABLL * (((char *)v40 - (char *)v39) >> 3));
  Espresso::sequential_builder::add<Espresso::broadcast_params_t>(&v22, v13, (uint64_t)__p, (uint64_t)&v42, (uint64_t)&v24, (__int128 *)v19.__r_.__value_.__l.__data_, (__int128 *)v19.__r_.__value_.__l.__size_, (__int128 **)&v18);
  v14 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v43 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  v43 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  if (v21 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v39);
  CoreML::Specification::BroadcastToStaticLayerParams::~BroadcastToStaticLayerParams((CoreML::Specification::BroadcastToStaticLayerParams *)&v31);
  v31 = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  v31 = &v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
}

void sub_19C97F09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *__p)
{
  uint64_t *v32;
  uint64_t v33;

  if (__p && !*__p)
    operator delete(__p);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v32);
  a29 = v33 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = v33 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addBroadcastToDynamic(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[3];
  char v17;
  int v18;
  char v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[0] = (void **)-1;
  v16[1] = (void **)-1;
  v16[2] = (void **)0xFFFFFFFF00000001;
  v18 = 1;
  v17 = 1;
  v19 = 1;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::broadcast_params_t>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C97F330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addGatherAlongAxis(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string v13;
  std::string v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _DWORD v19[3];
  __int16 v20;
  void **v21;
  __int128 *v22;
  uint64_t v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  std::string v27;
  std::string *v28;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v27, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v27.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v5;
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v24, (uint64_t *)&v21, *((_QWORD *)this + 1));
  v19[2] = 0;
  v20 = 257;
  if (*((_DWORD *)a2 + 35) == 952)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_GatherAlongAxisLayerParams_default_instance_;
  }
  v8 = v7[2];
  v19[0] = 2;
  v19[1] = v8;
  v9 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "gather_nd");
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (__int128 *)v21, v22, 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v21) >> 3));
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, v24, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v24) >> 3));
  Espresso::sequential_builder::add<Espresso::gather_nd_params_t>(&v17, v9, (uint64_t)__p, (uint64_t)&v27, (uint64_t)v19, (__int128 *)v14.__r_.__value_.__l.__data_, (__int128 *)v14.__r_.__value_.__l.__size_, (__int128 **)&v13);
  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v28 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  v28 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  if (v16 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v24);
  __p[0] = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v21 = (void **)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_19C97F59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v27 - 40) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  *(_QWORD *)(v27 - 40) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  if (a21 < 0)
    operator delete(__p);
  __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v27 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addGather(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string v13;
  std::string v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _DWORD v19[3];
  __int16 v20;
  void **v21;
  __int128 *v22;
  uint64_t v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  std::string v27;
  std::string *v28;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v27, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v27.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v5;
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v24, (uint64_t *)&v21, *((_QWORD *)this + 1));
  v19[2] = 0;
  v20 = 257;
  if (*((_DWORD *)a2 + 35) == 930)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_GatherLayerParams_default_instance_;
  }
  v8 = v7[2];
  v19[0] = 0;
  v19[1] = v8;
  v9 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "gather_nd");
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (__int128 *)v21, v22, 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v21) >> 3));
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, v24, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v24) >> 3));
  Espresso::sequential_builder::add<Espresso::gather_nd_params_t>(&v17, v9, (uint64_t)__p, (uint64_t)&v27, (uint64_t)v19, (__int128 *)v14.__r_.__value_.__l.__data_, (__int128 *)v14.__r_.__value_.__l.__size_, (__int128 **)&v13);
  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v28 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  v28 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  if (v16 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v24);
  __p[0] = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v21 = (void **)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_19C97F804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v27 - 40) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  *(_QWORD *)(v27 - 40) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  if (a21 < 0)
    operator delete(__p);
  __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v27 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addPowBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[3];
  char v17;
  int v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[2] = (void **)897988541;
  v18 = 0;
  v19 = 0;
  v16[0] = (void **)13;
  v16[1] = (void **)1065353216;
  v17 = 1;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C97FA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addInnerProduct(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  CoreML::Specification::WeightParams *v9;
  CoreML::Specification::WeightParams *v10;
  __int16 v11;
  unint64_t v12;
  std::string::size_type v13;
  _BYTE *v14;
  std::string *v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string::size_type v20;
  _BYTE *v21;
  std::string *v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  int v27;
  std::string::size_type v28;
  _BYTE *v29;
  std::string *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  int v34;
  std::string::size_type v35;
  _BYTE *v36;
  std::string *v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  std::string::size_type v42;
  _BYTE *v43;
  std::string *v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  int v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  uint64_t i;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  void **v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *inited;
  int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  _QWORD *v85;
  __int128 v86;
  uint64_t j;
  unint64_t *v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  uint64_t *v96;
  size_t WeightParamSizeInBytes;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  int WeightParamSize;
  uint64_t *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  std::string *v116;
  __int128 v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t v139;
  void *v140;
  int v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  void **v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t **v158;
  uint64_t v159;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v160;
  int v161;
  int v162;
  int v163;
  uint64_t *v164;
  void *v165;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v166;
  uint64_t *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  __int128 v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  _BOOL8 v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::runtime_error *exception;
  std::string *v197;
  __int128 v198;
  std::string *v199;
  __int128 v200;
  std::string *v201;
  std::string::size_type size;
  std::string *v203;
  __int128 v204;
  std::runtime_error *v205;
  std::string *v206;
  __int128 v207;
  std::string *v208;
  __int128 v209;
  std::string *v210;
  std::string::size_type v211;
  std::string *v212;
  __int128 v213;
  std::runtime_error *v214;
  std::runtime_error *v215;
  std::string *v216;
  __int128 v217;
  unint64_t v218;
  std::runtime_error *v219;
  std::runtime_error *v220;
  unint64_t v221;
  std::runtime_error *v222;
  std::runtime_error *v223;
  _QWORD *v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  _QWORD *v230;
  _QWORD *v231;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v232;
  std::runtime_error *v233;
  _QWORD *v234;
  _QWORD *v235;
  std::runtime_error *v236;
  unint64_t v237;
  unint64_t v238;
  const CoreML::Specification::NeuralNetworkLayer *v239;
  std::string::size_type __sz;
  std::string::value_type *v241;
  std::string::value_type *v242;
  std::string::value_type *__s;
  int v244;
  int v245;
  int v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  uint64_t v249[2];
  __int128 v250;
  std::string v251;
  __int128 *v252;
  __int128 *v253;
  __int128 *v254;
  __int128 v255;
  std::string v256;
  std::string v257;
  std::string *v258;
  std::string *v259;
  std::string *v260;
  __int128 *v261;
  __int128 *v262;
  char *v263;
  __int128 v264;
  unsigned __int128 v265;
  _BYTE v266[28];
  uint64_t v267;
  int v268;
  char v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  std::string *v278;
  std::string *v279;
  __int128 *v280;
  std::string v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  _DWORD v284[2];
  void *v285[2];
  std::string::size_type v286;
  _DWORD v287[2];
  _DWORD v288[2];
  void *v289[2];
  std::string::size_type v290;
  void (**v291)(CoreML::Specification::InnerProductLayerParams *__hidden);
  uint64_t v292;
  uint64_t *v293;
  uint64_t *v294;
  __int128 v295;
  __int16 v296;
  int v297;
  __int128 *v298;
  __int128 *v299;
  uint64_t v300;
  __int128 *v301;
  __int128 *v302;
  uint64_t v303;
  std::string v304;
  void *v305[2];
  char v306;
  __int128 **v307;
  uint64_t v308;
  void *__p[2];
  __int128 v310;
  std::string::size_type v311;
  void *v312;
  void *v313;
  uint64_t v314;
  _BYTE v315[32];
  std::string::size_type v316;
  char *v317;
  __int128 v318[15];
  _BYTE v319[32];
  std::string::size_type v320;
  void *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;

  v324 = *MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  std::string::basic_string[abi:ne180100]<0>(v305, "inner_product");
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v304, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v304.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v304.__r_.__value_.__l.__data_ = v5;
  }
  v302 = 0;
  v301 = 0;
  v303 = 0;
  v299 = 0;
  v298 = 0;
  v300 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v301, (uint64_t *)&v298, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 140)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_InnerProductLayerParams_default_instance_;
  }
  v291 = &off_1E3D54300;
  v292 = 0;
  v297 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v292, v8 & 0xFFFFFFFFFFFFFFFELL);
  v239 = (const CoreML::Specification::NeuralNetworkLayer *)a2;
  if (v7 == &CoreML::Specification::_InnerProductLayerParams_default_instance_)
  {
    v10 = 0;
    v293 = 0;
  }
  else
  {
    if (v7[2])
    {
      v9 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v9, (const CoreML::Specification::WeightParams *)v7[2]);
    }
    else
    {
      v9 = 0;
    }
    v293 = (uint64_t *)v9;
    if (v7[3])
    {
      v10 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v10, (const CoreML::Specification::WeightParams *)v7[3]);
    }
    else
    {
      v10 = 0;
    }
  }
  v294 = (uint64_t *)v10;
  v11 = *((_WORD *)v7 + 24);
  v295 = *((_OWORD *)v7 + 2);
  v296 = v11;
  v12 = *((_QWORD *)&v295 + 1);
  if (!*((_QWORD *)&v295 + 1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string((std::string *)__p, 0);
    v197 = std::string::insert((std::string *)__p, 0, "number of output channels = ");
    v198 = *(_OWORD *)&v197->__r_.__value_.__l.__data_;
    *(_QWORD *)&v319[16] = *((_QWORD *)&v197->__r_.__value_.__l + 2);
    *(_OWORD *)v319 = v198;
    v197->__r_.__value_.__l.__size_ = 0;
    v197->__r_.__value_.__r.__words[2] = 0;
    v197->__r_.__value_.__r.__words[0] = 0;
    v199 = std::string::append((std::string *)v319, " not allowed in layer ");
    v200 = *(_OWORD *)&v199->__r_.__value_.__l.__data_;
    *(_QWORD *)&v266[16] = *((_QWORD *)&v199->__r_.__value_.__l + 2);
    *(_OWORD *)v266 = v200;
    v199->__r_.__value_.__l.__size_ = 0;
    v199->__r_.__value_.__r.__words[2] = 0;
    v199->__r_.__value_.__r.__words[0] = 0;
    if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v201 = &v304;
    else
      v201 = (std::string *)v304.__r_.__value_.__r.__words[0];
    if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v304.__r_.__value_.__r.__words[2]);
    else
      size = v304.__r_.__value_.__l.__size_;
    v203 = std::string::append((std::string *)v266, (const std::string::value_type *)v201, size);
    v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
    *(_QWORD *)&v315[16] = *((_QWORD *)&v203->__r_.__value_.__l + 2);
    *(_OWORD *)v315 = v204;
    v203->__r_.__value_.__l.__size_ = 0;
    v203->__r_.__value_.__r.__words[2] = 0;
    v203->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v315);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v237 = v295;
  if (!(_QWORD)v295)
  {
    v205 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string((std::string *)__p, 0);
    v206 = std::string::insert((std::string *)__p, 0, "number of input channels = ");
    v207 = *(_OWORD *)&v206->__r_.__value_.__l.__data_;
    *(_QWORD *)&v319[16] = *((_QWORD *)&v206->__r_.__value_.__l + 2);
    *(_OWORD *)v319 = v207;
    v206->__r_.__value_.__l.__size_ = 0;
    v206->__r_.__value_.__r.__words[2] = 0;
    v206->__r_.__value_.__r.__words[0] = 0;
    v208 = std::string::append((std::string *)v319, " not allowed in layer ");
    v209 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
    *(_QWORD *)&v266[16] = *((_QWORD *)&v208->__r_.__value_.__l + 2);
    *(_OWORD *)v266 = v209;
    v208->__r_.__value_.__l.__size_ = 0;
    v208->__r_.__value_.__r.__words[2] = 0;
    v208->__r_.__value_.__r.__words[0] = 0;
    if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v210 = &v304;
    else
      v210 = (std::string *)v304.__r_.__value_.__r.__words[0];
    if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v211 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
    else
      v211 = v304.__r_.__value_.__l.__size_;
    v212 = std::string::append((std::string *)v266, (const std::string::value_type *)v210, v211);
    v213 = *(_OWORD *)&v212->__r_.__value_.__l.__data_;
    *(_QWORD *)&v315[16] = *((_QWORD *)&v212->__r_.__value_.__l + 2);
    *(_OWORD *)v315 = v213;
    v212->__r_.__value_.__l.__size_ = 0;
    v212->__r_.__value_.__r.__words[2] = 0;
    v212->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v205, (const std::string *)v315);
    __cxa_throw(v205, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
  else
    v13 = v304.__r_.__value_.__l.__size_;
  v14 = v315;
  std::string::basic_string[abi:ne180100]((uint64_t)v315, v13 + 18);
  if (v315[23] < 0)
    v14 = *(_BYTE **)v315;
  if (v13)
  {
    if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v304;
    else
      v15 = (std::string *)v304.__r_.__value_.__r.__words[0];
    memmove(v14, v15, v13);
  }
  strcpy(&v14[v13], "_dynamic_quantize_");
  std::to_string((std::string *)v266, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if (v266[23] >= 0)
    v16 = v266;
  else
    v16 = *(const std::string::value_type **)v266;
  if (v266[23] >= 0)
    v17 = v266[23];
  else
    v17 = *(_QWORD *)&v266[8];
  v18 = std::string::append((std::string *)v315, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v290 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)v289 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((v266[23] & 0x80000000) != 0)
    operator delete(*(void **)v266);
  if ((v315[23] & 0x80000000) != 0)
    operator delete(*(void **)v315);
  if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
  else
    v20 = v304.__r_.__value_.__l.__size_;
  v21 = v315;
  std::string::basic_string[abi:ne180100]((uint64_t)v315, v20 + 24);
  if (v315[23] < 0)
    v21 = *(_BYTE **)v315;
  if (v20)
  {
    if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v304;
    else
      v22 = (std::string *)v304.__r_.__value_.__r.__words[0];
    memmove(v21, v22, v20);
  }
  strcpy(&v21[v20], "_post_quantization_blob_");
  std::to_string((std::string *)v266, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if (v266[23] >= 0)
    v23 = v266;
  else
    v23 = *(const std::string::value_type **)v266;
  if (v266[23] >= 0)
    v24 = v266[23];
  else
    v24 = *(_QWORD *)&v266[8];
  v25 = std::string::append((std::string *)v315, v23, v24);
  v26 = v25->__r_.__value_.__l.__size_;
  __s = (std::string::value_type *)v25->__r_.__value_.__r.__words[0];
  v288[0] = v25->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v288 + 3) = *(_DWORD *)((char *)&v25->__r_.__value_.__r.__words[2] + 3);
  v27 = SHIBYTE(v25->__r_.__value_.__r.__words[2]);
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if ((v266[23] & 0x80000000) != 0)
    operator delete(*(void **)v266);
  if ((v315[23] & 0x80000000) != 0)
    operator delete(*(void **)v315);
  if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
  else
    v28 = v304.__r_.__value_.__l.__size_;
  v29 = v315;
  v245 = v27;
  std::string::basic_string[abi:ne180100]((uint64_t)v315, v28 + 31);
  if (v315[23] < 0)
    v29 = *(_BYTE **)v315;
  if (v28)
  {
    if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v304;
    else
      v30 = (std::string *)v304.__r_.__value_.__r.__words[0];
    memmove(v29, v30, v28);
  }
  strcpy(&v29[v28], "_activation_quantization_scale_");
  std::to_string((std::string *)v266, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if (v266[23] >= 0)
    v31 = v266;
  else
    v31 = *(const std::string::value_type **)v266;
  if (v266[23] >= 0)
    v32 = v266[23];
  else
    v32 = *(_QWORD *)&v266[8];
  v33 = std::string::append((std::string *)v315, v31, v32);
  v242 = (std::string::value_type *)v33->__r_.__value_.__r.__words[0];
  __sz = v33->__r_.__value_.__l.__size_;
  v287[0] = v33->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v287 + 3) = *(_DWORD *)((char *)&v33->__r_.__value_.__r.__words[2] + 3);
  v34 = SHIBYTE(v33->__r_.__value_.__r.__words[2]);
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if ((v266[23] & 0x80000000) != 0)
    operator delete(*(void **)v266);
  if ((v315[23] & 0x80000000) != 0)
    operator delete(*(void **)v315);
  if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
  else
    v35 = v304.__r_.__value_.__l.__size_;
  v36 = v315;
  v244 = v34;
  std::string::basic_string[abi:ne180100]((uint64_t)v315, v35 + 20);
  if (v315[23] < 0)
    v36 = *(_BYTE **)v315;
  if (v35)
  {
    if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v304;
    else
      v37 = (std::string *)v304.__r_.__value_.__r.__words[0];
    memmove(v36, v37, v35);
  }
  strcpy(&v36[v35], "_dynamic_dequantize_");
  std::to_string((std::string *)v266, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if (v266[23] >= 0)
    v38 = v266;
  else
    v38 = *(const std::string::value_type **)v266;
  if (v266[23] >= 0)
    v39 = v266[23];
  else
    v39 = *(_QWORD *)&v266[8];
  v40 = std::string::append((std::string *)v315, v38, v39);
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v286 = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)v285 = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if ((v266[23] & 0x80000000) != 0)
    operator delete(*(void **)v266);
  if ((v315[23] & 0x80000000) != 0)
    operator delete(*(void **)v315);
  if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
  else
    v42 = v304.__r_.__value_.__l.__size_;
  v43 = v315;
  std::string::basic_string[abi:ne180100]((uint64_t)v315, v42 + 25);
  if (v315[23] < 0)
    v43 = *(_BYTE **)v315;
  if (v42)
  {
    if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = &v304;
    else
      v44 = (std::string *)v304.__r_.__value_.__r.__words[0];
    memmove(v43, v44, v42);
  }
  strcpy(&v43[v42], "_pre_dequantization_blob_");
  std::to_string((std::string *)v266, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  v238 = v12;
  if (v266[23] >= 0)
    v45 = v266;
  else
    v45 = *(const std::string::value_type **)v266;
  if (v266[23] >= 0)
    v46 = v266[23];
  else
    v46 = *(_QWORD *)&v266[8];
  v47 = std::string::append((std::string *)v315, v45, v46);
  v48 = v47->__r_.__value_.__l.__size_;
  v241 = (std::string::value_type *)v47->__r_.__value_.__r.__words[0];
  v284[0] = v47->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v284 + 3) = *(_DWORD *)((char *)&v47->__r_.__value_.__r.__words[2] + 3);
  v246 = SHIBYTE(v47->__r_.__value_.__r.__words[2]);
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  if ((v266[23] & 0x80000000) != 0)
    operator delete(*(void **)v266);
  if ((v315[23] & 0x80000000) != 0)
    operator delete(*(void **)v315);
  v49 = HIBYTE(v296);
  if (HIBYTE(v296))
  {
    __p[0] = (void *)0x1FFFFFFFFLL;
    v50 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(v266, "dynamic_quantize");
    memset(&v281, 0, sizeof(v281));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v281, v298, v299, 0xAAAAAAAAAAAAAAABLL * (((char *)v299 - (char *)v298) >> 3));
    if (v27 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v315, __s, v26);
    }
    else
    {
      *(_QWORD *)v315 = __s;
      *(_QWORD *)&v315[8] = v26;
      *(_DWORD *)&v315[16] = v288[0];
      *(_DWORD *)&v315[19] = *(_DWORD *)((char *)v288 + 3);
      v315[23] = v27;
    }
    if (v34 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v315[24], v242, __sz);
    }
    else
    {
      *(_QWORD *)&v315[24] = v242;
      v316 = __sz;
      LODWORD(v317) = v287[0];
      *(_DWORD *)((char *)&v317 + 3) = *(_DWORD *)((char *)v287 + 3);
      HIBYTE(v317) = v34;
    }
    v278 = 0;
    v279 = 0;
    v280 = 0;
    *(_QWORD *)v319 = &v278;
    v319[8] = 0;
    v278 = (std::string *)operator new(0x30uLL);
    v279 = v278;
    v280 = (__int128 *)&v278[2];
    v279 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v280, (__int128 *)v315, v318, v278);
    Espresso::sequential_builder::add<Espresso::dynamic_quantize_params_t>(&v282, v50, (uint64_t)v266, (uint64_t)v289, (uint64_t)__p, (__int128 *)v281.__r_.__value_.__l.__data_, (__int128 *)v281.__r_.__value_.__l.__size_, (__int128 **)&v278);
    v51 = v283;
    if (v283)
    {
      p_shared_owners = (unint64_t *)&v283->__shared_owners_;
      do
        v53 = __ldaxr(p_shared_owners);
      while (__stlxr(v53 - 1, p_shared_owners));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    *(_QWORD *)v319 = &v278;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
    for (i = 0; i != -48; i -= 24)
    {
      if (*((char *)&v317 + i + 7) < 0)
        operator delete(*(void **)&v315[i + 24]);
    }
    *(_QWORD *)v315 = &v281;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v315);
    if ((v266[23] & 0x80000000) != 0)
      operator delete(*(void **)v266);
    v49 = HIBYTE(v296);
  }
  v271 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  v272 = _D0;
  v277 = 0;
  *(_DWORD *)&v266[16] = 0;
  *(_QWORD *)&v266[20] = _D0;
  v273 = 0;
  v267 = 0;
  v270 = 0;
  v274 = 0;
  v276 = 0;
  v275 = 0;
  v59 = *((_QWORD *)&v295 + 1);
  v60 = v295;
  *(_QWORD *)v266 = __PAIR64__(v295, DWORD2(v295));
  v268 = 0;
  *(_QWORD *)&v266[8] = v296;
  v269 = 0;
  if (v49)
  {
    v268 = 5;
    v265 = 0uLL;
    v264 = 0uLL;
    v61 = *(_QWORD **)this;
    if (v27 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v315, __s, v26);
    }
    else
    {
      *(_QWORD *)v315 = __s;
      *(_QWORD *)&v315[8] = v26;
      *(_DWORD *)&v315[16] = v288[0];
      *(_DWORD *)&v315[19] = *(_DWORD *)((char *)v288 + 3);
      v315[23] = v27;
    }
    v261 = 0;
    v262 = 0;
    v263 = 0;
    *(_QWORD *)v319 = &v261;
    v319[8] = 0;
    v261 = (__int128 *)operator new(0x18uLL);
    v262 = v261;
    v263 = (char *)v261 + 24;
    v262 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v263, (__int128 *)v315, (__int128 *)&v315[24], (std::string *)v261);
    if (v246 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v319, v241, v48);
    }
    else
    {
      *(_QWORD *)v319 = v241;
      *(_QWORD *)&v319[8] = v48;
      *(_DWORD *)&v319[16] = v284[0];
      *(_DWORD *)&v319[19] = *(_DWORD *)((char *)v284 + 3);
      v319[23] = v246;
    }
    v258 = 0;
    v259 = 0;
    v260 = 0;
    __p[0] = &v258;
    LOBYTE(__p[1]) = 0;
    v258 = (std::string *)operator new(0x18uLL);
    v259 = v258;
    v260 = v258 + 1;
    v259 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v260, (__int128 *)v319, (__int128 *)&v319[24], v258);
    Espresso::sequential_builder::add<Espresso::inner_product_uniforms>((uint64_t *)&v307, v61, (uint64_t)v305, (uint64_t)&v304, (uint64_t)v266, v261, v262, (__int128 **)&v258);
    v64 = (void **)v307;
    v63 = v308;
    v308 = 0;
    v307 = 0;
    *(_QWORD *)&v265 = v64;
    *((_QWORD *)&v265 + 1) = v63;
    __p[0] = &v258;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if ((v319[23] & 0x80000000) != 0)
      operator delete(*(void **)v319);
    *(_QWORD *)v319 = &v261;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
    if ((v315[23] & 0x80000000) != 0)
      operator delete(*(void **)v315);
  }
  else
  {
    v265 = 0uLL;
    v264 = 0uLL;
    v62 = *(_QWORD **)this;
    memset(&v257, 0, sizeof(v257));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v257, v298, v299, 0xAAAAAAAAAAAAAAABLL * (((char *)v299 - (char *)v298) >> 3));
    memset(&v256, 0, sizeof(v256));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v256, v301, v302, 0xAAAAAAAAAAAAAAABLL * (((char *)v302 - (char *)v301) >> 3));
    Espresso::sequential_builder::add<Espresso::inner_product_uniforms>((uint64_t *)v315, v62, (uint64_t)v305, (uint64_t)&v304, (uint64_t)v266, (__int128 *)v257.__r_.__value_.__l.__data_, (__int128 *)v257.__r_.__value_.__l.__size_, (__int128 **)&v256);
    v63 = *(_QWORD *)&v315[8];
    v64 = *(void ***)v315;
    *(_OWORD *)v315 = 0uLL;
    v265 = __PAIR128__(v63, (unint64_t)v64);
    *(_QWORD *)v319 = &v256;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
    *(_QWORD *)v319 = &v257;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
  }
  v65 = v293;
  if (!v293)
    v65 = &CoreML::Specification::_WeightParams_default_instance_;
  v66 = v65[5];
  if (*(char *)(v66 + 23) < 0)
    v67 = *(_QWORD *)(v66 + 8);
  else
    v67 = *(unsigned __int8 *)(v66 + 23);
  v68 = v65[6];
  v69 = *(unsigned __int8 *)(v68 + 23);
  if (*(char *)(v68 + 23) < 0)
    v70 = *(_QWORD *)(v68 + 8);
  else
    v70 = *(unsigned __int8 *)(v68 + 23);
  v71 = *((_DWORD *)v65 + 4);
  v72 = v65[7];
  v73 = *(unsigned __int8 *)(v72 + 23);
  if (*(char *)(v72 + 23) < 0)
    inited = *(unint64_t **)(v72 + 8);
  else
    inited = (unint64_t *)*(unsigned __int8 *)(v72 + 23);
  if (v71 <= 0)
    v75 = 1;
  else
    v75 = 2;
  if (v67)
    v76 = v75;
  else
    v76 = v71 > 0;
  if (v70)
    ++v76;
  if (inited)
    ++v76;
  if (v76 > 1)
  {
    v77 = 4;
    goto LABEL_200;
  }
  if (v76)
    v77 = 0;
  else
    v77 = 5;
  if (v71 <= 0 && v76)
  {
    if ((*(_BYTE *)(v66 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v66 + 8))
        goto LABEL_181;
    }
    else if (*(_BYTE *)(v66 + 23))
    {
LABEL_181:
      v77 = 1;
      goto LABEL_200;
    }
    if ((v69 & 0x80) != 0)
      v69 = *(_QWORD *)(v68 + 8);
    v78 = v65[8];
    if (v65 != &CoreML::Specification::_WeightParams_default_instance_ && v69 && v78)
    {
      v77 = 2;
    }
    else
    {
      if ((v73 & 0x80) != 0)
        v73 = *(_QWORD *)(v72 + 8);
      if (v78)
        _ZF = v73 == 0;
      else
        _ZF = 1;
      if (_ZF || v65 == &CoreML::Specification::_WeightParams_default_instance_)
        v77 = 5;
      else
        v77 = 3;
    }
  }
LABEL_200:
  if (HIBYTE(v296))
  {
    *(_QWORD *)&v319[12] = 1065353216;
    *(_QWORD *)v319 = 0xFFFFFFFFLL;
    *(_DWORD *)&v319[28] = 1065353216;
    *(_DWORD *)&v319[8] = 0;
    *(_QWORD *)&v319[20] = 0x100000000;
    if (v77 != 3)
    {
      v214 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      innerProductIncorrectWeightType((std::string *)v315, v77, (uint64_t)&v304);
      std::runtime_error::runtime_error(v214, (const std::string *)v315);
      __cxa_throw(v214, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (*((_DWORD *)v239 + 35) == 140)
    {
      v81 = (uint64_t *)*((_QWORD *)v239 + 16);
    }
    else
    {
      inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v81 = &CoreML::Specification::_InnerProductLayerParams_default_instance_;
    }
    v82 = (uint64_t *)v81[2];
    if (!v82)
      v82 = &CoreML::Specification::_WeightParams_default_instance_;
    v83 = (uint64_t *)v82[8];
    if (!v83)
      v83 = &CoreML::Specification::_QuantizationParams_default_instance_;
    if (*((_DWORD *)v83 + 9) == 101)
    {
      v84 = (uint64_t *)v83[3];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v84 = &CoreML::Specification::_LinearQuantizationParams_default_instance_;
    }
    *(float *)&v319[28] = 1.0 / *(float *)(v84[3] + 8);
    v85 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(__p, "dynamic_dequantize");
    if (v246 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v315, v241, v48);
    }
    else
    {
      *(_QWORD *)v315 = v241;
      *(_QWORD *)&v315[8] = v48;
      *(_DWORD *)&v315[16] = v284[0];
      *(_DWORD *)&v315[19] = *(_DWORD *)((char *)v284 + 3);
      v315[23] = v246;
    }
    if (v244 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v315[24], v242, __sz);
    }
    else
    {
      *(_QWORD *)&v315[24] = v242;
      v316 = __sz;
      LODWORD(v317) = v287[0];
      *(_DWORD *)((char *)&v317 + 3) = *(_DWORD *)((char *)v287 + 3);
      HIBYTE(v317) = v244;
    }
    v252 = 0;
    v253 = 0;
    v254 = 0;
    v307 = &v252;
    LOBYTE(v308) = 0;
    v252 = (__int128 *)operator new(0x30uLL);
    v253 = v252;
    v254 = v252 + 3;
    v253 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v254, (__int128 *)v315, v318, (std::string *)v252);
    memset(&v251, 0, sizeof(v251));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v251, v301, v302, 0xAAAAAAAAAAAAAAABLL * (((char *)v302 - (char *)v301) >> 3));
    Espresso::sequential_builder::add<Espresso::dynamic_dequantize_params_t>((uint64_t *)&v255, v85, (uint64_t)__p, (uint64_t)v285, (uint64_t)v319, v252, v253, (__int128 **)&v251);
    v86 = v255;
    v255 = 0uLL;
    v264 = v86;
    v307 = (__int128 **)&v251;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v307);
    v307 = &v252;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v307);
    for (j = 0; j != -48; j -= 24)
    {
      if (*((char *)&v317 + j + 7) < 0)
        operator delete(*(void **)&v315[j + 24]);
    }
    if (SBYTE7(v310) < 0)
      operator delete(__p[0]);
  }
  v307 = (__int128 **)v64;
  v308 = v63;
  if (v63)
  {
    v88 = (unint64_t *)(v63 + 8);
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
  if (HIBYTE(v296))
  {
    v90 = v293;
    std::string::basic_string[abi:ne180100]<0>(v319, "InnerProduct");
    if (v90)
      v91 = v90;
    else
      v91 = &CoreML::Specification::_WeightParams_default_instance_;
    v93 = v244;
    v92 = v245;
    v94 = v246;
    CoreML::validateInt8Requirements((CoreML::Result *)v315, (uint64_t)v91, (uint64_t)v319);
    v95 = *(_DWORD *)v315 & 0xFFFFFFEF;
    if ((v315[31] & 0x80000000) != 0)
      operator delete(*(void **)&v315[8]);
    if ((v319[23] & 0x80000000) != 0)
      operator delete(*(void **)v319);
    if (v95)
    {
      v215 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v216 = std::string::append((std::string *)v319, " does not satisfy int8 quantization requirements.");
      v217 = *(_OWORD *)&v216->__r_.__value_.__l.__data_;
      *(_QWORD *)&v315[16] = *((_QWORD *)&v216->__r_.__value_.__l + 2);
      *(_OWORD *)v315 = v217;
      v216->__r_.__value_.__l.__size_ = 0;
      v216->__r_.__value_.__r.__words[2] = 0;
      v216->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v215, (const std::string *)v315);
      __cxa_throw(v215, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (v293)
      v96 = v293;
    else
      v96 = &CoreML::Specification::_WeightParams_default_instance_;
    WeightParamSizeInBytes = (int)EspressoConverter::getWeightParamSizeInBytes(v96);
    CoreML::copySpecArrayStringToVector(v315, (char *)v96[7], WeightParamSizeInBytes);
    std::string::basic_string[abi:ne180100]<0>(v319, "W_int8");
    __p[1] = 0;
    __p[0] = 0;
    (*((void (**)(void **, void **, _BYTE *, _QWORD, size_t, _QWORD))*v64 + 21))(v64, __p, v319, *(_QWORD *)v315, WeightParamSizeInBytes, 0);
    v98 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_291;
    v99 = (unint64_t *)((char *)__p[1] + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
LABEL_289:
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
LABEL_291:
    if ((v319[23] & 0x80000000) != 0)
      operator delete(*(void **)v319);
    if (*(_QWORD *)v315)
    {
      *(_QWORD *)&v315[8] = *(_QWORD *)v315;
      operator delete(*(void **)v315);
    }
    goto LABEL_295;
  }
  if (v77 == 2)
  {
    if (v293)
      v112 = v293;
    else
      v112 = &CoreML::Specification::_WeightParams_default_instance_;
    v113 = (uint64_t *)v112[8];
    if (!v113)
      v113 = &CoreML::Specification::_QuantizationParams_default_instance_;
    v114 = v113[2];
    v115 = (int)EspressoConverter::getWeightParamSizeInBytes(v112);
    if (!CoreML::hasSufficientBytesInQuantizedWeightParam(v112, v60 * v59))
    {
      v223 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      innerProductQuantizedWeightArraySizeErrorString((std::string *)v315, v115, v237, v238, v114, (uint64_t)&v304);
      std::runtime_error::runtime_error(v223, (const std::string *)v315);
      __cxa_throw(v223, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    CoreML::copySpecArrayStringToVector(v315, (char *)v112[6], v115);
    v93 = v244;
    v92 = v245;
    v94 = v246;
    std::to_string((std::string *)__p, v114);
    v116 = std::string::insert((std::string *)__p, 0, "W_U");
    v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
    *(_QWORD *)&v319[16] = *((_QWORD *)&v116->__r_.__value_.__l + 2);
    *(_OWORD *)v319 = v117;
    v116->__r_.__value_.__l.__size_ = 0;
    v116->__r_.__value_.__r.__words[2] = 0;
    v116->__r_.__value_.__r.__words[0] = 0;
    if (SBYTE7(v310) < 0)
      operator delete(__p[0]);
    __p[1] = 0;
    __p[0] = 0;
    (*((void (**)(void **, void **, _BYTE *, _QWORD, unint64_t, _QWORD))*v64 + 21))(v64, __p, v319, *(_QWORD *)v315, v115, 0);
    v118 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v119 = (unint64_t *)((char *)__p[1] + 8);
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    if (v293)
      v121 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v293;
    else
      v121 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)&CoreML::Specification::_WeightParams_default_instance_;
    v98 = (std::__shared_weak_count *)v308;
    v249[0] = (uint64_t)v307;
    v249[1] = v308;
    if (v308)
    {
      v122 = (unint64_t *)(v308 + 8);
      do
        v123 = __ldxr(v122);
      while (__stxr(v123 + 1, v122));
    }
    v124 = *(unsigned int *)v266;
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_19CB39696);
    CoreML::setQuantizationParams(v121, v249, v124, (const void **)__p);
    if (SBYTE7(v310) < 0)
      operator delete(__p[0]);
    if (!v98)
      goto LABEL_291;
    v125 = (unint64_t *)&v98->__shared_owners_;
    do
      v100 = __ldaxr(v125);
    while (__stlxr(v100 - 1, v125));
    goto LABEL_289;
  }
  if (v77 == 3)
  {
    v220 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    innerProductIncorrectWeightType((std::string *)v315, 3, (uint64_t)&v304);
    std::runtime_error::runtime_error(v220, (const std::string *)v315);
    __cxa_throw(v220, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v293)
    v101 = v293;
  else
    v101 = &CoreML::Specification::_WeightParams_default_instance_;
  WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)v101);
  v93 = v244;
  v92 = v245;
  v94 = v246;
  if (v12 * v237 != WeightParamSize)
  {
    v221 = WeightParamSize;
    v222 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    innerProductWeightArraySizeErrorString((std::string *)v315, v221, v237, v12, (uint64_t)&v304);
    std::runtime_error::runtime_error(v222, (const std::string *)v315);
    __cxa_throw(v222, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  (*((void (**)(_BYTE *__return_ptr, void **))*v64 + 53))(v315, v64);
  if (v293)
    v103 = v293;
  else
    v103 = &CoreML::Specification::_WeightParams_default_instance_;
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(*(_QWORD *)v315 + 16), v103, 4 * (*(_DWORD *)&v266[4] * *(_DWORD *)v266));
  v250 = *(_OWORD *)v315;
  if (*(_QWORD *)&v315[8])
  {
    v104 = (unint64_t *)(*(_QWORD *)&v315[8] + 8);
    do
      v105 = __ldxr(v104);
    while (__stxr(v105 + 1, v104));
  }
  (*((void (**)(void **, __int128 *))*v64 + 50))(v64, &v250);
  v106 = (std::__shared_weak_count *)*((_QWORD *)&v250 + 1);
  if (*((_QWORD *)&v250 + 1))
  {
    v107 = (unint64_t *)(*((_QWORD *)&v250 + 1) + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = *(std::__shared_weak_count **)&v315[8];
  if (*(_QWORD *)&v315[8])
  {
    v110 = (unint64_t *)(*(_QWORD *)&v315[8] + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
LABEL_295:
  if (!(_BYTE)v296)
    goto LABEL_367;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(v319, 4 * *(_DWORD *)v266, 1, 1, 1);
  if (v294)
    v126 = v294;
  else
    v126 = &CoreML::Specification::_WeightParams_default_instance_;
  v127 = v126[5];
  if (*(char *)(v127 + 23) < 0)
    v128 = *(_QWORD *)(v127 + 8);
  else
    v128 = *(unsigned __int8 *)(v127 + 23);
  v129 = v126[6];
  v130 = *(unsigned __int8 *)(v129 + 23);
  if (*(char *)(v129 + 23) < 0)
    v131 = *(_QWORD *)(v129 + 8);
  else
    v131 = *(unsigned __int8 *)(v129 + 23);
  v132 = *((_DWORD *)v126 + 4);
  v133 = v126[7];
  if (*(char *)(v133 + 23) < 0)
    v134 = *(_QWORD *)(v133 + 8);
  else
    v134 = *(unsigned __int8 *)(v133 + 23);
  if (v132 <= 0)
    v135 = 1;
  else
    v135 = 2;
  if (v128)
    v136 = v135;
  else
    v136 = v132 > 0;
  if (v131)
    ++v136;
  if (v134)
    ++v136;
  if (v132 > 0 || v136 != 1)
    goto LABEL_337;
  if ((*(_BYTE *)(v127 + 23) & 0x80) != 0)
  {
    if (!*(_QWORD *)(v127 + 8))
      goto LABEL_327;
LABEL_337:
    v141 = EspressoConverter::getWeightParamSize((uint64_t)v126);
    if (v238 != v141)
    {
      v218 = v141;
      v219 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      innerProductBiasArraySizeErrorString((std::string *)v315, v218, v238, (uint64_t)&v304);
      std::runtime_error::runtime_error(v219, (const std::string *)v315);
      __cxa_throw(v219, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v139 = *(_QWORD *)v319;
    EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(*(_QWORD *)v319 + 16), v126, 4 * *(unsigned int *)v266);
    goto LABEL_339;
  }
  if (*(_BYTE *)(v127 + 23))
    goto LABEL_337;
LABEL_327:
  if ((v130 & 0x80) != 0)
    v130 = *(_QWORD *)(v129 + 8);
  if (v126 == &CoreML::Specification::_WeightParams_default_instance_)
    goto LABEL_337;
  if (!v130 || v126[8] == 0)
    goto LABEL_337;
  if (!CoreML::hasSufficientBytesInQuantizedWeightParam(v126, v238))
  {
    v233 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v233, (const std::string *)v315);
    __cxa_throw(v233, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CoreML::dequantizeWeightParamSpec((CoreML *)v315, (const CoreML::Specification::WeightParams *)v126, v238);
  v139 = *(_QWORD *)v319;
  v140 = *(void **)v315;
  memcpy(*(void **)(*(_QWORD *)v319 + 16), *(const void **)v315, 4 * v238);
  if (v140)
    operator delete(v140);
LABEL_339:
  if (HIBYTE(v296))
  {
    v142 = v264;
    *(_OWORD *)__p = v264;
    if (*((_QWORD *)&v264 + 1))
    {
      v143 = (unint64_t *)(*((_QWORD *)&v264 + 1) + 8);
      do
        v144 = __ldxr(v143);
      while (__stxr(v144 + 1, v143));
    }
    std::string::basic_string[abi:ne180100]<0>(v315, "biases");
    v255 = 0uLL;
    (*(void (**)(uint64_t, __int128 *, _BYTE *, _QWORD, unint64_t, _QWORD))(*(_QWORD *)v142 + 168))(v142, &v255, v315, *(_QWORD *)(v139 + 16), 4 * v238, 0);
    v145 = (std::__shared_weak_count *)*((_QWORD *)&v255 + 1);
    if (*((_QWORD *)&v255 + 1))
    {
      v146 = (unint64_t *)(*((_QWORD *)&v255 + 1) + 8);
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    if ((v315[23] & 0x80000000) != 0)
      operator delete(*(void **)v315);
    v148 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_362;
    v149 = (unint64_t *)((char *)__p[1] + 8);
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
  }
  else
  {
    v151 = (void **)v307;
    v247 = v139;
    v248 = *(std::__shared_weak_count **)&v319[8];
    if (*(_QWORD *)&v319[8])
    {
      v152 = (unint64_t *)(*(_QWORD *)&v319[8] + 8);
      do
        v153 = __ldxr(v152);
      while (__stxr(v153 + 1, v152));
    }
    (*((void (**)(void **, uint64_t *))*v151 + 49))(v151, &v247);
    v148 = v248;
    if (!v248)
      goto LABEL_362;
    v154 = (unint64_t *)&v248->__shared_owners_;
    do
      v150 = __ldaxr(v154);
    while (__stlxr(v150 - 1, v154));
  }
  if (!v150)
  {
    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
    std::__shared_weak_count::__release_weak(v148);
  }
LABEL_362:
  v155 = *(std::__shared_weak_count **)&v319[8];
  if (*(_QWORD *)&v319[8])
  {
    v156 = (unint64_t *)(*(_QWORD *)&v319[8] + 8);
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
LABEL_367:
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v301);
  }
  else
  {
    v158 = (uint64_t **)*((_QWORD *)this + 1);
    v159 = std::map<std::string,std::string>::at((uint64_t)v158, v298);
    *(_OWORD *)v319 = *(_OWORD *)v159;
    *(_OWORD *)&v319[16] = *(_OWORD *)(v159 + 16);
    v320 = *(_QWORD *)(v159 + 32);
    v321 = 0;
    v322 = 0;
    v323 = 0;
    v160 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v321, *(const void **)(v159 + 40), *(_QWORD *)(v159 + 48), (uint64_t)(*(_QWORD *)(v159 + 48)- *(_QWORD *)(v159 + 40)) >> 2);
    v161 = *(_DWORD *)&v319[8];
    if (*(_DWORD *)&v319[8] != -1)
    {
      v162 = *(_DWORD *)v319;
      if (*(_DWORD *)v319 != -1)
      {
        v163 = *(_DWORD *)&v319[4];
        if (*(_DWORD *)&v319[4] != -1)
        {
          if (*((_DWORD *)v239 + 35) == 140)
          {
            v164 = (uint64_t *)*((_QWORD *)v239 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v160);
            v164 = &CoreML::Specification::_InnerProductLayerParams_default_instance_;
          }
          if (v162 * v161 * v163 != *((_DWORD *)v164 + 8))
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v315);
            v224 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v315[16], (uint64_t)"Inner product layer: '", 22);
            v225 = *((_QWORD *)v239 + 14);
            v226 = *(char *)(v225 + 23);
            if (v226 >= 0)
              v227 = *((_QWORD *)v239 + 14);
            else
              v227 = *(_QWORD *)v225;
            if (v226 >= 0)
              v228 = *(unsigned __int8 *)(v225 + 23);
            else
              v228 = *(_QWORD *)(v225 + 8);
            v229 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v224, v227, v228);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v229, (uint64_t)"' : Product of input blob dimensions C,H,W (", 44);
            v230 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v230, (uint64_t)",", 1);
            v231 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v231, (uint64_t)",", 1);
            std::ostream::operator<<();
            v232 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v315[16], (uint64_t)") must be equal to the parameter 'inputChannels' (", 50);
            if (*((_DWORD *)v239 + 35) != 140)
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v232);
            v234 = (_QWORD *)std::ostream::operator<<();
            v235 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)")", 1);
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v235);
            v236 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::stringbuf::str();
            std::runtime_error::runtime_error(v236, (const std::string *)__p);
            __cxa_throw(v236, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
        }
      }
    }
    *(_OWORD *)v315 = *(_OWORD *)v319;
    *(_OWORD *)&v315[16] = *(_OWORD *)&v319[16];
    v165 = v321;
    v316 = v320;
    v317 = 0;
    v318[0] = 0uLL;
    v166 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v317, v321, v322, (v322 - (uint64_t)v321) >> 2);
    if (*((_DWORD *)v239 + 35) == 140)
    {
      v167 = (uint64_t *)*((_QWORD *)v239 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v166);
      v167 = &CoreML::Specification::_InnerProductLayerParams_default_instance_;
    }
    *(_DWORD *)&v315[8] = v167[5];
    *(_QWORD *)v315 = 0x100000001;
    *(_OWORD *)__p = *(_OWORD *)v315;
    v310 = *(_OWORD *)&v315[16];
    v168 = v317;
    v311 = v316;
    v312 = 0;
    v314 = 0;
    v313 = 0;
    v169 = *(_QWORD *)&v318[0];
    v170 = (uint64_t)(*(_QWORD *)&v318[0] - (_QWORD)v317) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v312, v317, *(uint64_t *)&v318[0], v170);
    EspressoConverter::validateShape((int *)__p, *((_QWORD *)v239 + 14), (uint64_t)v301);
    if (v312)
    {
      v313 = v312;
      operator delete(v312);
    }
    *(_QWORD *)&v255 = v301;
    v171 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v158, v301, (__int128 **)&v255);
    v172 = *(_OWORD *)&v315[16];
    *(_OWORD *)(v171 + 56) = *(_OWORD *)v315;
    *(_OWORD *)(v171 + 72) = v172;
    *((_QWORD *)v171 + 11) = v316;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v171 + 96, v168, v169, v170);
    if (v168)
      operator delete(v168);
    v93 = v244;
    v92 = v245;
    v94 = v246;
    if (v165)
      operator delete(v165);
  }
  if (v293)
    v173 = v293;
  else
    v173 = &CoreML::Specification::_WeightParams_default_instance_;
  v174 = v173[5];
  v175 = *(unsigned __int8 *)(v174 + 23);
  if (*(char *)(v174 + 23) < 0)
    v176 = *(_QWORD *)(v174 + 8);
  else
    v176 = *(unsigned __int8 *)(v174 + 23);
  v177 = v173[6];
  if (*(char *)(v177 + 23) < 0)
    v178 = *(_QWORD *)(v177 + 8);
  else
    v178 = *(unsigned __int8 *)(v177 + 23);
  v179 = *((_DWORD *)v173 + 4);
  v180 = v173[7];
  if (*(char *)(v180 + 23) < 0)
    v181 = *(_QWORD *)(v180 + 8);
  else
    v181 = *(unsigned __int8 *)(v180 + 23);
  if (v179 <= 0)
    v182 = 1;
  else
    v182 = 2;
  if (v176)
    v183 = v182;
  else
    v183 = v179 > 0;
  if (v178)
    ++v183;
  if (v181)
    ++v183;
  if (v179 <= 0 && v183 == 1)
  {
    if ((v175 & 0x80) != 0)
      v175 = *(_QWORD *)(v174 + 8);
    v185 = v175 != 0;
  }
  else
  {
    v185 = 0;
  }
  v186 = (std::__shared_weak_count *)v308;
  if (v308)
  {
    v187 = (unint64_t *)(v308 + 8);
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v189 = (std::__shared_weak_count *)*((_QWORD *)&v264 + 1);
  if (*((_QWORD *)&v264 + 1))
  {
    v190 = (unint64_t *)(*((_QWORD *)&v264 + 1) + 8);
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
  if (!*((_QWORD *)&v265 + 1))
    goto LABEL_429;
  v193 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
  do
    v194 = __ldaxr(v193);
  while (__stlxr(v194 - 1, v193));
  if (v194)
  {
LABEL_429:
    if ((v94 & 0x80000000) == 0)
      goto LABEL_431;
    goto LABEL_430;
  }
  ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
  std::__shared_weak_count::__release_weak(v192);
  if (v94 < 0)
LABEL_430:
    operator delete(v241);
LABEL_431:
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
    if ((v93 & 0x80000000) == 0)
      goto LABEL_433;
LABEL_442:
    operator delete(v242);
    if ((v92 & 0x80000000) == 0)
      goto LABEL_434;
    goto LABEL_443;
  }
  operator delete(v285[0]);
  if (v93 < 0)
    goto LABEL_442;
LABEL_433:
  if ((v92 & 0x80000000) == 0)
    goto LABEL_434;
LABEL_443:
  operator delete(__s);
LABEL_434:
  if (SHIBYTE(v290) < 0)
    operator delete(v289[0]);
  CoreML::Specification::InnerProductLayerParams::~InnerProductLayerParams((CoreML::Specification::InnerProductLayerParams *)&v291);
  *(_QWORD *)v315 = &v298;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v315);
  *(_QWORD *)v315 = &v301;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v315);
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v304.__r_.__value_.__l.__data_);
  if (v306 < 0)
    operator delete(v305[0]);
  return v185;
}

void sub_19C9819BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, int a17, int a18, int a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,char a49)
{
  void *v49;
  int v50;
  uint64_t v51;
  void *v53;

  if (SLOBYTE(STACK[0x317]) < 0)
  {
    operator delete((void *)STACK[0x300]);
    if ((v50 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x340]);
      v53 = *(void **)(v51 - 136);
      if (v53)
        operator delete(v53);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2F0]);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
      if (a20 < 0)
        operator delete(a14);
      if (SLOBYTE(STACK[0x227]) < 0)
        operator delete((void *)STACK[0x210]);
      if (a18 < 0)
        operator delete(a15);
      if (a19 < 0)
        operator delete(a16);
      if (SLOBYTE(STACK[0x257]) < 0)
        operator delete((void *)STACK[0x240]);
      CoreML::Specification::InnerProductLayerParams::~InnerProductLayerParams((CoreML::Specification::InnerProductLayerParams *)&STACK[0x258]);
      STACK[0x340] = (unint64_t)&STACK[0x290];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x340]);
      STACK[0x340] = (unint64_t)&STACK[0x2A8];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x340]);
      if (SLOBYTE(STACK[0x2D7]) < 0)
        operator delete((void *)STACK[0x2C0]);
      if (SLOBYTE(STACK[0x2EF]) < 0)
        operator delete((void *)STACK[0x2D8]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v50)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v49);
  goto LABEL_6;
}

void innerProductIncorrectWeightType(std::string *a1, int __val, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string v13;
  std::string v14;
  std::string v15;

  std::to_string(&v13, __val);
  v5 = std::string::insert(&v13, 0, "Incorrect weight type ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v14, " in layer ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = *(char *)(a3 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a3;
  else
    v10 = *(const std::string::value_type **)a3;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 23);
  else
    v11 = *(_QWORD *)(a3 + 8);
  v12 = std::string::append(&v15, v10, v11);
  *a1 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_19C982208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void innerProductWeightArraySizeErrorString(std::string *a1, unint64_t __val, unint64_t a3, unint64_t a4, uint64_t a5)
{
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;

  std::to_string(&v31, __val);
  v9 = std::string::insert(&v31, 0, "Size of weights = ");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v32, " is not equal to size of the product of input and output channels = ");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v30, a3);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v30;
  else
    v13 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  else
    size = v30.__r_.__value_.__l.__size_;
  v15 = std::string::append(&v33, (const std::string::value_type *)v13, size);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v34, ",");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v29, a4);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v29;
  else
    v19 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  else
    v20 = v29.__r_.__value_.__l.__size_;
  v21 = std::string::append(&v35, (const std::string::value_type *)v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v36, " in layer ");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = *(char *)(a5 + 23);
  if (v25 >= 0)
    v26 = (const std::string::value_type *)a5;
  else
    v26 = *(const std::string::value_type **)a5;
  if (v25 >= 0)
    v27 = *(unsigned __int8 *)(a5 + 23);
  else
    v27 = *(_QWORD *)(a5 + 8);
  v28 = std::string::append(&v37, v26, v27);
  *a1 = *v28;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_19C9824A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (*(char *)(v47 - 57) < 0)
    operator delete(*(void **)(v47 - 80));
  if (*(char *)(v47 - 89) < 0)
    operator delete(*(void **)(v47 - 112));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v47 - 121) < 0)
    operator delete(*(void **)(v47 - 144));
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void innerProductQuantizedWeightArraySizeErrorString(std::string *a1, unint64_t __val, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *p_p;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  int v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string __p;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;

  std::to_string(&v40, __val);
  v11 = std::string::insert(&v40, 0, "Size of quantized weights (in bytes) = ");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v41, " is smaller than the total bytes required for the product of input and output channels = ");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v39, a3);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v39;
  else
    v15 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    size = v39.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v42, (const std::string::value_type *)v15, size);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v43, ",");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v38, a4);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &v38;
  else
    v21 = (std::string *)v38.__r_.__value_.__r.__words[0];
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  else
    v22 = v38.__r_.__value_.__l.__size_;
  v23 = std::string::append(&v44, (const std::string::value_type *)v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v45, "for ");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v28 = __p.__r_.__value_.__l.__size_;
  v29 = std::string::append(&v46, (const std::string::value_type *)p_p, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v47, "-bit quantization in layer ");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = *(char *)(a6 + 23);
  if (v33 >= 0)
    v34 = (const std::string::value_type *)a6;
  else
    v34 = *(const std::string::value_type **)a6;
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a6 + 23);
  else
    v35 = *(_QWORD *)(a6 + 8);
  v36 = std::string::append(&v48, v34, v35);
  *a1 = *v36;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
}

void sub_19C982870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (*(char *)(v59 - 73) < 0)
    operator delete(*(void **)(v59 - 96));
  if (*(char *)(v59 - 105) < 0)
    operator delete(*(void **)(v59 - 128));
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v59 - 137) < 0)
    operator delete(*(void **)(v59 - 160));
  if (*(char *)(v59 - 169) < 0)
    operator delete(*(void **)(v59 - 192));
  if (a20 < 0)
    operator delete(a15);
  if (a59 < 0)
    operator delete(a54);
  if (a52 < 0)
    operator delete(a47);
  if (a26 < 0)
    operator delete(a21);
  if (a45 < 0)
    operator delete(a40);
  if (a38 < 0)
    operator delete(a33);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void sub_19C98297C()
{
  JUMPOUT(0x19C982944);
}

void sub_19C982984()
{
  JUMPOUT(0x19C982954);
}

void sub_19C98298C()
{
  JUMPOUT(0x19C982964);
}

void innerProductBiasArraySizeErrorString(std::string *a1, unint64_t __val, unint64_t a3, uint64_t a4)
{
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *p_p;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string __p;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;

  std::to_string(&v22, __val);
  v7 = std::string::insert(&v22, 0, "Size of bias = ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v23, " is not equal to the output channels = ");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v13 = std::string::append(&v24, (const std::string::value_type *)p_p, size);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v25, " in layer ");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = *(char *)(a4 + 23);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)a4;
  else
    v18 = *(const std::string::value_type **)a4;
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a4 + 23);
  else
    v19 = *(_QWORD *)(a4 + 8);
  v20 = std::string::append(&v26, v18, v19);
  *a1 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_19C982B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (*(char *)(v33 - 73) < 0)
    operator delete(*(void **)(v33 - 96));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void LayerTranslator::addReshapeLike(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[2];
  __int128 v17;
  __int16 v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[0] = 0;
  v16[1] = 0;
  v19 = 1;
  v17 = xmmword_19CB399A0;
  v18 = 0;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::reshape_params>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C982D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addReshapeStatic(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  std::string v18;
  std::string v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  char v29;
  char v30;
  int v31;
  __int128 **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int128 *v37;
  __int128 *v38;
  uint64_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  std::string v43;
  std::string *v44;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v43, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v43.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v5;
  }
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v40, (uint64_t *)&v37, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1140)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_ReshapeStaticLayerParams_default_instance_;
  }
  v34 = 0;
  v35 = 0;
  v32 = (__int128 **)&off_1E3D54C80;
  v33 = 0;
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v34, v8);
    memcpy((void *)(v35 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    v9 = *((_DWORD *)v7 + 4);
    LODWORD(v34) = v9;
  }
  else
  {
    v9 = 0;
  }
  v36 = 0;
  v10 = v7[1];
  if ((v10 & 1) != 0)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v33, v10 & 0xFFFFFFFFFFFFFFFELL);
    v9 = v34;
  }
  v24 = 0;
  v25 = 0;
  v28 = 0;
  v30 = 0;
  v31 = 1;
  v27 = v9;
  if (v9 <= 0)
  {
    LODWORD(v24) = 1;
    goto LABEL_20;
  }
  LODWORD(v24) = *(_QWORD *)(v35 + 8 * (v9 - 1) + 8);
  if (v9 == 1)
  {
LABEL_20:
    HIDWORD(v24) = 1;
    goto LABEL_21;
  }
  HIDWORD(v24) = *(_QWORD *)(v35 + 8 * (v9 - 2) + 8);
  if (v9 <= 2)
  {
LABEL_21:
    LODWORD(v25) = 1;
    goto LABEL_22;
  }
  LODWORD(v25) = *(_QWORD *)(v35 + 8 * (v9 - 3) + 8);
  if (v9 == 3)
  {
LABEL_22:
    v17 = 1;
    HIDWORD(v25) = 1;
    goto LABEL_23;
  }
  HIDWORD(v25) = *(_QWORD *)(v35 + 8 * (v9 - 4) + 8);
  v11 = v9 >= 5;
  v12 = v9 - 5;
  if (v11)
    v17 = *(_DWORD *)(v35 + 8 * v12 + 8);
  else
    v17 = 1;
LABEL_23:
  v26 = v17;
  v29 = 0;
  v13 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, v37, v38, 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)v37) >> 3));
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, v40, v41, 0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (char *)v40) >> 3));
  Espresso::sequential_builder::add<Espresso::reshape_params>(&v22, v13, (uint64_t)__p, (uint64_t)&v43, (uint64_t)&v24, (__int128 *)v19.__r_.__value_.__l.__data_, (__int128 *)v19.__r_.__value_.__l.__size_, (__int128 **)&v18);
  v14 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v44 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  v44 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  if (v21 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v40);
  CoreML::Specification::ReshapeStaticLayerParams::~ReshapeStaticLayerParams((CoreML::Specification::ReshapeStaticLayerParams *)&v32);
  v32 = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v32 = &v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
}

void sub_19C983108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *__p)
{
  uint64_t *v32;
  uint64_t v33;

  if (__p && !*__p)
    operator delete(__p);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v32);
  a29 = v33 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = v33 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addReshapeDynamic(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[2];
  __int128 v17;
  __int16 v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[0] = 0;
  v16[1] = 0;
  v19 = 1;
  v17 = xmmword_19CB399A0;
  v18 = 1;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::reshape_params>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C983394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addResizeBilinear(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::ResizeBilinearLayerParams *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  void *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  std::runtime_error *exception;
  std::string *v27;
  __int128 v28;
  std::string v29;
  std::string v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  char v34;
  int v35;
  int v36;
  int v37;
  char v38;
  int v39;
  __int128 v40;
  __int128 v41;
  int v42;
  char v43;
  _BYTE v44[16];
  int v45;
  uint64_t v46;
  uint64_t *v47;
  __int128 *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 *v51;
  __int128 *v52;
  uint64_t v53;
  std::string v54;
  _OWORD v55[2];
  uint64_t v56;
  void *__p[3];
  _BYTE v58[32];
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[32];
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v54.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v5;
  }
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v51, (uint64_t *)&v48, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 211)
  {
    v7 = (const CoreML::Specification::ResizeBilinearLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::ResizeBilinearLayerParams *)&CoreML::Specification::_ResizeBilinearLayerParams_default_instance_;
  }
  CoreML::Specification::ResizeBilinearLayerParams::ResizeBilinearLayerParams((CoreML::Specification::ResizeBilinearLayerParams *)v44, v7);
  v35 = 0;
  v36 = 0;
  v33 = 0uLL;
  v34 = 0;
  v37 = 1065353216;
  v38 = 0;
  v39 = 2;
  v40 = 0u;
  v41 = 0u;
  LODWORD(v8) = 1;
  v42 = 1;
  v43 = 0;
  if (v45)
  {
    if (v45 != 2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v27 = std::string::append((std::string *)v58, " , target size must be of length 2, if set");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      *(_QWORD *)&v63[16] = *((_QWORD *)&v27->__r_.__value_.__l + 2);
      *(_OWORD *)v63 = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)v63);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v9 = *(_QWORD *)(v46 + 8);
    v8 = *(_QWORD *)(v46 + 16);
    if (!v9)
      LODWORD(v9) = 1;
    DWORD2(v33) = v9;
    if (!v8)
      LODWORD(v8) = 1;
  }
  else
  {
    DWORD2(v33) = 1;
  }
  DWORD1(v33) = v8;
  v37 = 1065353216;
  v10 = v47;
  if (!v47)
    v10 = &CoreML::Specification::_SamplingMode_default_instance_;
  v11 = *((_DWORD *)v10 + 4);
  v12 = 0;
  switch(v11)
  {
    case 0:
      v12 = 1;
      goto LABEL_22;
    case 1:
      goto LABEL_22;
    case 2:
    case 3:
      v12 = v11;
LABEL_22:
      v35 = v12;
      break;
    default:
      if (v11 == 0x80000000 || v11 == 0x7FFFFFFF)
      {
        v13 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v13, "Sampling mode not set in resize bilinear layer.");
        __cxa_throw(v13, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      return;
  }
  v14 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(v63, "crop_and_resize");
  memset(&v30, 0, sizeof(v30));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v30, v48, v49, 0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)v48) >> 3));
  memset(&v29, 0, sizeof(v29));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v29, v51, v52, 0xAAAAAAAAAAAAAAABLL * (((char *)v52 - (char *)v51) >> 3));
  Espresso::sequential_builder::add<Espresso::crop_and_resize_params_t>(&v31, v14, (uint64_t)v63, (uint64_t)&v54, (uint64_t)&v33, (__int128 *)v30.__r_.__value_.__l.__data_, (__int128 *)v30.__r_.__value_.__l.__size_, (__int128 **)&v29);
  v15 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)v58 = &v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
  *(_QWORD *)v58 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
  if ((v63[23] & 0x80000000) != 0)
    operator delete(*(void **)v63);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v51);
  }
  else
  {
    v18 = (uint64_t **)*((_QWORD *)this + 1);
    v19 = *(_QWORD *)((char *)&v33 + 4);
    v20 = std::map<std::string,std::string>::at((uint64_t)v18, v48);
    *(_OWORD *)v63 = *(_OWORD *)v20;
    *(_OWORD *)&v63[16] = *(_OWORD *)(v20 + 16);
    v64 = *(_QWORD *)(v20 + 32);
    v65 = 0;
    v66 = 0;
    v67 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v65, *(const void **)(v20 + 40), *(_QWORD *)(v20 + 48), (uint64_t)(*(_QWORD *)(v20 + 48) - *(_QWORD *)(v20 + 40)) >> 2);
    *(_OWORD *)v58 = *(_OWORD *)v63;
    *(_OWORD *)&v58[16] = *(_OWORD *)&v63[16];
    v21 = v65;
    v59 = v64;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v60, v65, v66, (v66 - (uint64_t)v65) >> 2);
    *(_QWORD *)v58 = v19;
    v55[0] = *(_OWORD *)v58;
    v55[1] = *(_OWORD *)&v58[16];
    v22 = v60;
    v56 = v59;
    memset(__p, 0, sizeof(__p));
    v23 = v61;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v60, v61, (v61 - (uint64_t)v60) >> 2);
    EspressoConverter::validateShape((int *)v55, *((_QWORD *)a2 + 14), (uint64_t)v51);
    if (__p[0])
      operator delete(__p[0]);
    v68 = v51;
    v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18, v51, &v68);
    v25 = *(_OWORD *)&v58[16];
    *(_OWORD *)(v24 + 56) = *(_OWORD *)v58;
    *(_OWORD *)(v24 + 72) = v25;
    *((_QWORD *)v24 + 11) = v59;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v24 + 96, v22, v23, (v23 - (uint64_t)v22) >> 2);
    if (v22)
      operator delete(v22);
    if (v21)
      operator delete(v21);
  }
  CoreML::Specification::ResizeBilinearLayerParams::~ResizeBilinearLayerParams((CoreML::Specification::ResizeBilinearLayerParams *)v44);
  *(_QWORD *)&v33 = &v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  *(_QWORD *)&v33 = &v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
}

void sub_19C9838D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  void *v53;
  int v54;
  uint64_t v55;

  if (*(char *)(v55 - 137) < 0)
    operator delete(*(void **)(v55 - 160));
  if (*(char *)(v55 - 201) < 0)
  {
    operator delete(*(void **)(v55 - 224));
    if ((v54 & 1) == 0)
    {
LABEL_8:
      CoreML::Specification::ResizeBilinearLayerParams::~ResizeBilinearLayerParams((CoreML::Specification::ResizeBilinearLayerParams *)&a28);
      a18 = &a35;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      a18 = &a38;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      if (a46 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v54)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v53);
  goto LABEL_8;
}

void Espresso::sequential_builder::add<Espresso::crop_and_resize_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C983C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addSequenceRepeat(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::string v26;
  std::string v27;
  void *__p;
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  int v32;
  void (**v33)(CoreML::Specification::SequenceRepeatLayerParams *__hidden);
  uint64_t v34[2];
  int v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 *v39;
  __int128 *v40;
  uint64_t v41;
  std::string v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  std::string v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  void **v64;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v42.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v5;
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v39, (uint64_t *)&v36, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 340)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_SequenceRepeatLayerParams_default_instance_;
  }
  v33 = &off_1E3D553A0;
  v34[0] = 0;
  v35 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v34, v8 & 0xFFFFFFFFFFFFFFFELL);
  v9 = v7[2];
  v34[1] = v9;
  if (!v9)
    LODWORD(v9) = 1;
  v32 = v9;
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sequence_repeat");
  memset(&v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v27, v36, v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3));
  memset(&v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v26, v39, v40, 0xAAAAAAAAAAAAAAABLL * (((char *)v40 - (char *)v39) >> 3));
  *(_QWORD *)&v44 = 0;
  v43 = 0uLL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v43, (__int128 *)v27.__r_.__value_.__l.__data_, (__int128 *)v27.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27.__r_.__value_.__l.__size_ - v27.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v61, 0, sizeof(v61));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v61, (__int128 *)v26.__r_.__value_.__l.__data_, (__int128 *)v26.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26.__r_.__value_.__l.__size_ - v26.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v55) = (***(uint64_t (****)(_QWORD))(v10[14] + 8))(*(_QWORD *)(v10[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v62 = v30;
  v63 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v55 = 0uLL;
  *(_QWORD *)&v56 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v55, (__int128 *)v43, *((__int128 **)&v43 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v43 + 1) - v43) >> 3));
  v49 = 0uLL;
  *(_QWORD *)&v50 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v49, (__int128 *)v61.__r_.__value_.__l.__data_, (__int128 *)v61.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61.__r_.__value_.__l.__size_ - v61.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v64 = (void **)&v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v64);
  v64 = (void **)&v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v64);
  v13 = v63;
  if (v63)
  {
    v14 = (unint64_t *)&v63->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (*v10)
    Espresso::sequential_builder::add_shape_from_kernel();
  *(_QWORD *)&v55 = &v61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  *(_QWORD *)&v55 = &v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  *(_QWORD *)&v55 = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  *(_QWORD *)&v55 = &v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  if (v29 < 0)
    operator delete(__p);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v39);
  }
  else
  {
    v16 = (uint64_t **)*((_QWORD *)this + 1);
    v17 = std::map<std::string,std::string>::at((uint64_t)v16, v36);
    v55 = *(_OWORD *)v17;
    v56 = *(_OWORD *)(v17 + 16);
    v57 = *(_QWORD *)(v17 + 32);
    v58 = 0;
    v59 = 0;
    v60 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v58, *(const void **)(v17 + 40), *(_QWORD *)(v17 + 48), (uint64_t)(*(_QWORD *)(v17 + 48) - *(_QWORD *)(v17 + 40)) >> 2);
    v49 = v55;
    v50 = v56;
    v18 = v58;
    v51 = v57;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v52, v58, v59, (v59 - (uint64_t)v58) >> 2);
    v43 = v49;
    v44 = v50;
    v19 = v52;
    v45 = v51;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v20 = v53;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v46, v52, v53, (v53 - (uint64_t)v52) >> 2);
    EspressoConverter::validateShape((int *)&v43, *((_QWORD *)a2 + 14), (uint64_t)v39);
    if (v46)
    {
      v47 = v46;
      operator delete(v46);
    }
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
    v21 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, v39, (__int128 **)&v61);
    v22 = v50;
    *(_OWORD *)(v21 + 56) = v49;
    *(_OWORD *)(v21 + 72) = v22;
    *((_QWORD *)v21 + 11) = v51;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v21 + 96, v19, v20, (v20 - (uint64_t)v19) >> 2);
    if (v19)
      operator delete(v19);
    if (v18)
      operator delete(v18);
  }
  v23 = v31;
  if (v31)
  {
    v24 = (unint64_t *)&v31->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v33 = &off_1E3D553A0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v34);
  *(_QWORD *)&v55 = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  *(_QWORD *)&v55 = &v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
}

void sub_19C984168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p)
{
  uint64_t *v46;
  void *v47;
  void *v48;
  uint64_t v49;

  if (__p)
  {
    operator delete(__p);
    if (!v48)
    {
LABEL_3:
      if (!v47)
      {
LABEL_8:
        std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
        a24 = (char *)v49;
        google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v46);
        a24 = &a28;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
        a24 = &a31;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v47);
      goto LABEL_8;
    }
  }
  else if (!v48)
  {
    goto LABEL_3;
  }
  operator delete(v48);
  if (!v47)
    goto LABEL_8;
  goto LABEL_7;
}

void LayerTranslator::addSlidingWindows(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  unint64_t *inited;
  int v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  int v20;
  std::string v21;
  std::string v22;
  void *__p;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  int v27;
  int v28;
  int v29;
  __int128 *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 *v33;
  __int128 *v34;
  uint64_t v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::string *v43;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v36.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v5;
  }
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v33, (uint64_t *)&v30, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1005)
  {
    v7 = a2[16];
    v27 = v7[2];
LABEL_8:
    v28 = v7[3];
    goto LABEL_9;
  }
  inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
  v9 = *((_DWORD *)a2 + 35);
  v27 = qword_1ED005900;
  if (v9 == 1005)
  {
    v7 = a2[16];
    goto LABEL_8;
  }
  v19 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
  v20 = *((_DWORD *)a2 + 35);
  v28 = qword_1ED005908;
  if (v20 == 1005)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v19);
    v7 = &CoreML::Specification::_SlidingWindowsLayerParams_default_instance_;
  }
LABEL_9:
  v29 = v7[4];
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sliding_windows");
  memset(&v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  memset(&v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
  memset(&v38, 0, sizeof(v38));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, (__int128 *)v22.__r_.__value_.__l.__data_, (__int128 *)v22.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22.__r_.__value_.__l.__size_ - v22.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v37, 0, sizeof(v37));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v37, (__int128 *)v21.__r_.__value_.__l.__data_, (__int128 *)v21.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21.__r_.__value_.__l.__size_ - v21.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v40.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v10[14] + 8))(*(_QWORD *)(v10[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v41 = v25;
  v42 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  memset(&v40, 0, sizeof(v40));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v40, (__int128 *)v38.__r_.__value_.__l.__data_, (__int128 *)v38.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38.__r_.__value_.__l.__size_ - v38.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v39, 0, sizeof(v39));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v39, (__int128 *)v37.__r_.__value_.__l.__data_, (__int128 *)v37.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v43 = &v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  v43 = &v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  v13 = v42;
  if (v42)
  {
    v14 = (unint64_t *)&v42->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (*v10)
    Espresso::sequential_builder::add_shape_from_kernel();
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v16 = v26;
  if (v26)
  {
    v17 = (unint64_t *)&v26->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (v24 < 0)
    operator delete(__p);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v33);
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void sub_19C984694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  *(_QWORD *)(v37 - 56) = v37 - 168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  *(_QWORD *)(v37 - 56) = v37 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  *(_QWORD *)(v37 - 56) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  *(_QWORD *)(v37 - 56) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  if (a21 < 0)
    operator delete(__p);
  __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addScale(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t v10;
  CoreML::Specification::WeightParams *v11;
  CoreML::Specification::WeightParams *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  char v27;
  std::string::size_type size;
  __int128 *v29;
  std::string *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  _QWORD *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t v39;
  const CoreML::Specification::WeightParams *v40;
  uint64_t v41;
  void *v42;
  uint64_t *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  std::string *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  std::string *v64;
  std::string::size_type v65;
  __int128 *v66;
  std::string *v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  _QWORD *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  int v88;
  _QWORD *v90;
  std::__shared_weak_count *v91;
  unint64_t *p_size;
  unint64_t v93;
  uint64_t v94;
  BOOL v95;
  BOOL v96;
  uint64_t v98;
  const CoreML::Specification::WeightParams *v99;
  uint64_t v100;
  void *v101;
  uint64_t *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t *v105;
  unint64_t v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  std::string::size_type v110;
  _BYTE *v111;
  std::string *v112;
  std::string *v113;
  __int128 v114;
  std::string *v115;
  __int128 v116;
  __int128 *v117;
  _QWORD *v118;
  unint64_t v119;
  unint64_t v120;
  __int128 v121;
  __int128 *v122;
  _QWORD *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t **v139;
  uint64_t v140;
  void **p_data;
  __int128 v142;
  void **v143;
  __int128 v144;
  char *v145;
  uint64_t *v146;
  int v147;
  uint64_t v148;
  void **v149;
  int v150;
  int v151;
  uint64_t v152;
  int v153;
  __int128 *v154;
  __int128 *v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  __int128 v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  _BOOL8 v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  void *v184;
  void *v185;
  void *v186;
  void *exception;
  std::string v188;
  std::string v189;
  void *v190[2];
  char v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  std::string *v194;
  __int128 *v195;
  unint64_t v196;
  std::string v197;
  std::string v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  void *v201[2];
  std::string::size_type v202;
  __int128 *v203;
  std::string *v204;
  unint64_t v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  std::string v212;
  std::string v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  void *v216[2];
  std::string::size_type v217;
  std::string v218;
  std::string v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  std::string v226;
  std::string v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  std::string::size_type __sz[2];
  std::string::size_type v231;
  __int128 *v232;
  __int128 *v233;
  uint64_t v234;
  __int128 *v235;
  std::string *v236;
  unint64_t v237;
  int v238;
  int v239;
  int v240;
  uint64_t v241;
  int v242;
  char **v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t *v249;
  uint64_t *v250;
  char v251;
  int v252;
  char *v253;
  std::string *v254;
  unint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  std::string v259;
  std::string *v260;
  std::string *v261[2];
  __int128 v262;
  uint64_t v263;
  void *v264;
  void *v265;
  uint64_t v266;
  _BYTE __p[40];
  __int128 v268;
  uint64_t v269;
  std::string *v270;
  __int128 *v271;
  unint64_t v272;
  __int128 v273;
  __int128 v274;
  void *v275;
  __int128 v276;
  uint64_t v277;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v259, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v259.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v5;
  }
  v257 = 0;
  v256 = 0;
  v258 = 0;
  v254 = 0;
  v253 = 0;
  v255 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v256, (uint64_t *)&v253, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 245)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_ScaleLayerParams_default_instance_;
  }
  v246 = 0;
  v245 = 0;
  v243 = (char **)&off_1E3D502E0;
  v244 = 0;
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v245, v8);
    memcpy(v246 + 1, (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v245) = *((_DWORD *)v7 + 4);
  }
  v248 = 0;
  v247 = 0;
  v9 = *((_DWORD *)v7 + 10);
  if (v9)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v247, v9);
    memcpy(v248 + 1, (const void *)(v7[6] + 8), 8 * *((int *)v7 + 10));
    LODWORD(v247) = *((_DWORD *)v7 + 10);
  }
  v252 = 0;
  v10 = v7[1];
  if ((v10 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v244, v10 & 0xFFFFFFFFFFFFFFFELL);
  if (v7 == &CoreML::Specification::_ScaleLayerParams_default_instance_)
  {
    v12 = 0;
    v249 = 0;
  }
  else
  {
    if (v7[8])
    {
      v11 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v11, (const CoreML::Specification::WeightParams *)v7[8]);
    }
    else
    {
      v11 = 0;
    }
    v249 = (uint64_t *)v11;
    if (v7[9])
    {
      v12 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v12, (const CoreML::Specification::WeightParams *)v7[9]);
    }
    else
    {
      v12 = 0;
    }
  }
  v250 = (uint64_t *)v12;
  v251 = *((_BYTE *)v7 + 80);
  switch((int)v245)
  {
    case 0:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](exception, "Scale Layer: Scale shape cannot be of size 0");
      goto LABEL_393;
    case 1:
      v13 = v246[1];
      v14 = 1;
      v15 = 1;
      goto LABEL_25;
    case 2:
      v14 = v246[1];
      v15 = v246[2];
      v13 = 1;
      goto LABEL_25;
    case 3:
      v13 = v246[1];
      v14 = v246[2];
      v15 = v246[3];
LABEL_25:
      if (v249)
        v16 = v249;
      else
        v16 = &CoreML::Specification::_WeightParams_default_instance_;
      v17 = v16[5];
      if (*(char *)(v17 + 23) < 0)
        v18 = *(_QWORD *)(v17 + 8);
      else
        v18 = *(unsigned __int8 *)(v17 + 23);
      v19 = v16[6];
      v20 = *(unsigned __int8 *)(v19 + 23);
      if (*(char *)(v19 + 23) < 0)
        v21 = *(_QWORD *)(v19 + 8);
      else
        v21 = *(unsigned __int8 *)(v19 + 23);
      v22 = *((_DWORD *)v16 + 4);
      v23 = v16[7];
      if (*(char *)(v23 + 23) < 0)
        v24 = *(_QWORD *)(v23 + 8);
      else
        v24 = *(unsigned __int8 *)(v23 + 23);
      if (v22 <= 0)
        v25 = 1;
      else
        v25 = 2;
      if (v18)
        v26 = v25;
      else
        v26 = v22 > 0;
      if (v21)
        ++v26;
      if (v24)
        ++v26;
      if (v22 > 0 || v26 != 1)
        goto LABEL_59;
      if ((*(_BYTE *)(v17 + 23) & 0x80) != 0)
      {
        if (*(_QWORD *)(v17 + 8))
          goto LABEL_59;
      }
      else if (*(_BYTE *)(v17 + 23))
      {
        goto LABEL_59;
      }
      if ((v20 & 0x80) != 0)
        v20 = *(_QWORD *)(v19 + 8);
      if (v16 != &CoreML::Specification::_WeightParams_default_instance_ && v20 && v16[8])
      {
        v27 = 1;
        goto LABEL_61;
      }
LABEL_59:
      if (v14 * v13 * v15 != (int)EspressoConverter::getWeightParamSize((uint64_t)v16))
      {
        v185 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v185, "Scale Layer: Scale size does not match provided shape");
        __cxa_throw(v185, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v27 = 0;
LABEL_61:
      v242 = -1;
      v241 = 0x100000001;
      v240 = v13;
      v239 = v14;
      v238 = v15;
      v236 = 0;
      v235 = 0;
      v237 = 0;
      v233 = 0;
      v232 = 0;
      v234 = 0;
      if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v259.__r_.__value_.__r.__words[2]);
      else
        size = v259.__r_.__value_.__l.__size_;
      v29 = &v273;
      std::string::basic_string[abi:ne180100]((uint64_t)&v273, size + 1);
      if (SBYTE7(v274) < 0)
        v29 = (__int128 *)v273;
      if (size)
      {
        if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v259;
        else
          v30 = (std::string *)v259.__r_.__value_.__r.__words[0];
        memmove(v29, v30, size);
      }
      *(_WORD *)((char *)v29 + size) = 95;
      v31 = std::string::append((std::string *)&v273, "constant_in_scale");
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v231 = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)__sz = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if (SBYTE7(v274) < 0)
        operator delete((void *)v273);
      v33 = v236;
      if ((unint64_t)v236 >= v237)
      {
        v35 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v235, (__int128 *)__sz);
      }
      else
      {
        if (SHIBYTE(v231) < 0)
        {
          std::string::__init_copy_ctor_external(v236, (const std::string::value_type *)__sz[0], __sz[1]);
        }
        else
        {
          v34 = *(_OWORD *)__sz;
          v236->__r_.__value_.__r.__words[2] = v231;
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
        }
        v35 = v33 + 1;
      }
      v236 = v35;
      v36 = *(_QWORD **)this;
      std::string::basic_string[abi:ne180100]<0>(&v273, "load_constant");
      memset(&v227, 0, sizeof(v227));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v227, v232, v233, 0xAAAAAAAAAAAAAAABLL * (((char *)v233 - (char *)v232) >> 3));
      memset(&v226, 0, sizeof(v226));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v226, v235, (__int128 *)v236, 0xAAAAAAAAAAAAAAABLL * (((char *)v236 - (char *)v235) >> 3));
      Espresso::sequential_builder::add<Espresso::load_constant_params>(&v228, v36, (uint64_t)&v273, (uint64_t)__sz, (uint64_t)&v238, (__int128 *)v227.__r_.__value_.__l.__data_, (__int128 *)v227.__r_.__value_.__l.__size_, (__int128 **)&v226);
      *(_QWORD *)__p = &v226;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      *(_QWORD *)__p = &v227;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (SBYTE7(v274) < 0)
        operator delete((void *)v273);
      v224 = v228;
      v225 = v229;
      if (v229)
      {
        p_shared_owners = (unint64_t *)&v229->__shared_owners_;
        do
          v38 = __ldxr(p_shared_owners);
        while (__stxr(v38 + 1, p_shared_owners));
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v222, v238, v239, v240, v241);
      v39 = v14 * v13 * v15;
      if ((v27 & 1) != 0)
      {
        if (v249)
          v40 = (const CoreML::Specification::WeightParams *)v249;
        else
          v40 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
        EspressoConverter::readFloatFromWeightParams((EspressoConverter *)&v273, v40, v14 * v13 * v15);
        v41 = v222;
        v42 = (void *)v273;
        memcpy(*(void **)(v222 + 24), (const void *)v273, 4 * v39);
        if (v42)
          operator delete(v42);
      }
      else
      {
        v41 = v222;
        if (v249)
          v43 = v249;
        else
          v43 = &CoreML::Specification::_WeightParams_default_instance_;
        EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v222 + 24), v43, 4 * v39);
      }
      v220 = v41;
      v221 = v223;
      if (v223)
      {
        v44 = (unint64_t *)&v223->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      Espresso::generic_load_constant_kernel::set_constant_blob();
      if (v221)
      {
        v46 = &v221->__shared_owners_;
        do
          v47 = __ldaxr((unint64_t *)v46);
        while (__stlxr(v47 - 1, (unint64_t *)v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
          std::__shared_weak_count::__release_weak(v221);
        }
      }
      v48 = v254;
      if ((char *)v254 - v253 != 24 || v257 - v256 != 24)
      {
        v184 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v184, "Scale Layer: Must accept exactly 1 input and produce 1 output");
LABEL_388:
        __cxa_throw(v184, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (v251)
      {
        switch((int)v247)
        {
          case 0:
            v184 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1A1AD5E28](v184, "Scale Layer: Bias shape cannot be of size 0");
            goto LABEL_388;
          case 1:
            v49 = v248[1];
            v50 = 1;
            v51 = 1;
            goto LABEL_112;
          case 2:
            v50 = v248[1];
            v51 = v248[2];
            v49 = 1;
            goto LABEL_112;
          case 3:
            v49 = v248[1];
            v50 = v248[2];
            v51 = v248[3];
LABEL_112:
            if (v250)
              v53 = v250;
            else
              v53 = &CoreML::Specification::_WeightParams_default_instance_;
            v54 = v53[5];
            if (*(char *)(v54 + 23) < 0)
              v55 = *(_QWORD *)(v54 + 8);
            else
              v55 = *(unsigned __int8 *)(v54 + 23);
            v56 = v53[6];
            v57 = *(unsigned __int8 *)(v56 + 23);
            if (*(char *)(v56 + 23) < 0)
              v58 = *(_QWORD *)(v56 + 8);
            else
              v58 = *(unsigned __int8 *)(v56 + 23);
            v59 = *((_DWORD *)v53 + 4);
            v60 = v53[7];
            if (*(char *)(v60 + 23) < 0)
              v61 = *(_QWORD *)(v60 + 8);
            else
              v61 = *(unsigned __int8 *)(v60 + 23);
            if (v59 <= 0)
              v62 = 1;
            else
              v62 = 2;
            if (v55)
              v63 = v62;
            else
              v63 = v59 > 0;
            if (v58)
              ++v63;
            if (v61)
              ++v63;
            if (v59 > 0 || v63 != 1)
              goto LABEL_146;
            if ((*(_BYTE *)(v54 + 23) & 0x80) != 0)
            {
              if (!*(_QWORD *)(v54 + 8))
                goto LABEL_141;
            }
            else if (!*(_BYTE *)(v54 + 23))
            {
LABEL_141:
              if ((v57 & 0x80) != 0)
                v57 = *(_QWORD *)(v56 + 8);
              if (v53 == &CoreML::Specification::_WeightParams_default_instance_ || !v57 || !v53[8])
                goto LABEL_146;
LABEL_147:
              LODWORD(v241) = 1;
              v240 = v49;
              v239 = v50;
              v238 = v51;
              v261[1] = 0;
              v261[0] = 0;
              *(_QWORD *)&v262 = 0;
              v270 = 0;
              v271 = 0;
              v272 = 0;
              if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v65 = HIBYTE(v259.__r_.__value_.__r.__words[2]);
              else
                v65 = v259.__r_.__value_.__l.__size_;
              v66 = &v273;
              std::string::basic_string[abi:ne180100]((uint64_t)&v273, v65 + 1);
              if (SBYTE7(v274) < 0)
                v66 = (__int128 *)v273;
              if (v65)
              {
                if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v67 = &v259;
                else
                  v67 = (std::string *)v259.__r_.__value_.__r.__words[0];
                memmove(v66, v67, v65);
              }
              *(_WORD *)((char *)v66 + v65) = 95;
              v68 = std::string::append((std::string *)&v273, "constant_in_bias");
              v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
              v217 = v68->__r_.__value_.__r.__words[2];
              *(_OWORD *)v216 = v69;
              v68->__r_.__value_.__l.__size_ = 0;
              v68->__r_.__value_.__r.__words[2] = 0;
              v68->__r_.__value_.__r.__words[0] = 0;
              if (SBYTE7(v274) < 0)
                operator delete((void *)v273);
              v70 = v261[1];
              if (v261[1] >= (std::string *)v262)
              {
                v72 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v261, (__int128 *)v216);
              }
              else
              {
                if (SHIBYTE(v217) < 0)
                {
                  std::string::__init_copy_ctor_external(v261[1], (const std::string::value_type *)v216[0], (std::string::size_type)v216[1]);
                }
                else
                {
                  v71 = *(_OWORD *)v216;
                  v261[1]->__r_.__value_.__r.__words[2] = v217;
                  *(_OWORD *)&v70->__r_.__value_.__l.__data_ = v71;
                }
                v72 = v70 + 1;
              }
              v261[1] = v72;
              v73 = *(_QWORD **)this;
              std::string::basic_string[abi:ne180100]<0>(&v273, "load_constant");
              memset(&v213, 0, sizeof(v213));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v213, (__int128 *)v270, v271, 0xAAAAAAAAAAAAAAABLL * (((char *)v271 - (char *)v270) >> 3));
              memset(&v212, 0, sizeof(v212));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v212, (__int128 *)v261[0], (__int128 *)v261[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v261[1] - (char *)v261[0]) >> 3));
              Espresso::sequential_builder::add<Espresso::load_constant_params>(&v214, v73, (uint64_t)&v273, (uint64_t)v216, (uint64_t)&v238, (__int128 *)v213.__r_.__value_.__l.__data_, (__int128 *)v213.__r_.__value_.__l.__size_, (__int128 **)&v212);
              *(_QWORD *)__p = &v212;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              *(_QWORD *)__p = &v213;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              if (SBYTE7(v274) < 0)
                operator delete((void *)v273);
              v210 = v214;
              v211 = v215;
              if (v215)
              {
                v74 = (unint64_t *)&v215->__shared_owners_;
                do
                  v75 = __ldxr(v74);
                while (__stxr(v75 + 1, v74));
              }
              v76 = v250;
              if (!v250)
                v76 = &CoreML::Specification::_WeightParams_default_instance_;
              v77 = v76[5];
              if (*(char *)(v77 + 23) < 0)
                v78 = *(_QWORD *)(v77 + 8);
              else
                v78 = *(unsigned __int8 *)(v77 + 23);
              v79 = v76[6];
              v80 = *(unsigned __int8 *)(v79 + 23);
              if (*(char *)(v79 + 23) < 0)
                v81 = *(_QWORD *)(v79 + 8);
              else
                v81 = *(unsigned __int8 *)(v79 + 23);
              v82 = *((_DWORD *)v76 + 4);
              v83 = v76[7];
              v84 = *(unsigned __int8 *)(v83 + 23);
              if (*(char *)(v83 + 23) < 0)
                v85 = *(_QWORD *)(v83 + 8);
              else
                v85 = *(unsigned __int8 *)(v83 + 23);
              if (v82 <= 0)
                v86 = 1;
              else
                v86 = 2;
              if (v78)
                v87 = v86;
              else
                v87 = v82 > 0;
              if (v81)
                ++v87;
              if (v85)
                ++v87;
              if (v87 > 1)
              {
                v88 = 4;
LABEL_232:
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v208, v238, v239, v240, v241);
                v98 = v50 * v49 * v51;
                if (v88 == 2)
                {
                  if (v250)
                    v99 = (const CoreML::Specification::WeightParams *)v250;
                  else
                    v99 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
                  EspressoConverter::readFloatFromWeightParams((EspressoConverter *)&v273, v99, v50 * v49 * v51);
                  v100 = v208;
                  v101 = (void *)v273;
                  memcpy(*(void **)(v208 + 24), (const void *)v273, 4 * v98);
                  if (v101)
                    operator delete(v101);
                }
                else
                {
                  v100 = v208;
                  if (v250)
                    v102 = v250;
                  else
                    v102 = &CoreML::Specification::_WeightParams_default_instance_;
                  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v208 + 24), v102, 4 * v98);
                }
                v206 = v100;
                v207 = v209;
                if (v209)
                {
                  v103 = (unint64_t *)&v209->__shared_owners_;
                  do
                    v104 = __ldxr(v103);
                  while (__stxr(v104 + 1, v103));
                }
                Espresso::generic_load_constant_kernel::set_constant_blob();
                if (v207)
                {
                  v105 = &v207->__shared_owners_;
                  do
                    v106 = __ldaxr((unint64_t *)v105);
                  while (__stlxr(v106 - 1, (unint64_t *)v105));
                  if (!v106)
                  {
                    ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                    std::__shared_weak_count::__release_weak(v207);
                  }
                }
                v107 = v254;
                if ((unint64_t)v254 >= v255)
                {
                  v109 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v253, (__int128 *)__sz);
                }
                else
                {
                  if (SHIBYTE(v231) < 0)
                  {
                    std::string::__init_copy_ctor_external(v254, (const std::string::value_type *)__sz[0], __sz[1]);
                  }
                  else
                  {
                    v108 = *(_OWORD *)__sz;
                    v254->__r_.__value_.__r.__words[2] = v231;
                    *(_OWORD *)&v107->__r_.__value_.__l.__data_ = v108;
                  }
                  v109 = v107 + 1;
                }
                v254 = v109;
                *(_QWORD *)&v274 = 897988541;
                BYTE8(v274) = 0;
                *(_QWORD *)((char *)&v276 + 4) = 0;
                *(_QWORD *)&v273 = 1;
                *((_QWORD *)&v273 + 1) = 1065353216;
                v203 = 0;
                v204 = 0;
                v205 = 0;
                if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v110 = HIBYTE(v259.__r_.__value_.__r.__words[2]);
                else
                  v110 = v259.__r_.__value_.__l.__size_;
                v111 = __p;
                std::string::basic_string[abi:ne180100]((uint64_t)__p, v110 + 1);
                if (__p[23] < 0)
                  v111 = *(_BYTE **)__p;
                if (v110)
                {
                  if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v112 = &v259;
                  else
                    v112 = (std::string *)v259.__r_.__value_.__r.__words[0];
                  memmove(v111, v112, v110);
                }
                *(_WORD *)&v111[v110] = 95;
                v113 = std::string::append((std::string *)__p, "mul_out");
                v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
                v202 = v113->__r_.__value_.__r.__words[2];
                *(_OWORD *)v201 = v114;
                v113->__r_.__value_.__l.__size_ = 0;
                v113->__r_.__value_.__r.__words[2] = 0;
                v113->__r_.__value_.__r.__words[0] = 0;
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
                v115 = v204;
                if ((unint64_t)v204 >= v205)
                {
                  v117 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v203, (__int128 *)v201);
                }
                else
                {
                  if (SHIBYTE(v202) < 0)
                  {
                    std::string::__init_copy_ctor_external(v204, (const std::string::value_type *)v201[0], (std::string::size_type)v201[1]);
                  }
                  else
                  {
                    v116 = *(_OWORD *)v201;
                    v204->__r_.__value_.__r.__words[2] = v202;
                    *(_OWORD *)&v115->__r_.__value_.__l.__data_ = v116;
                  }
                  v117 = (__int128 *)&v115[1];
                }
                v204 = (std::string *)v117;
                v118 = *(_QWORD **)this;
                std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
                memset(&v198, 0, sizeof(v198));
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v198, (__int128 *)v253, (__int128 *)v254, 0xAAAAAAAAAAAAAAABLL * (((char *)v254 - v253) >> 3));
                memset(&v197, 0, sizeof(v197));
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v197, v203, (__int128 *)v204, 0xAAAAAAAAAAAAAAABLL * (((char *)v204 - (char *)v203) >> 3));
                Espresso::sequential_builder::add<Espresso::elementwise_params>(&v199, v118, (uint64_t)__p, (uint64_t)v201, (uint64_t)&v273, (__int128 *)v198.__r_.__value_.__l.__data_, (__int128 *)v198.__r_.__value_.__l.__size_, (__int128 **)&v197);
                v194 = &v197;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
                v194 = &v198;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
                v194 = 0;
                v195 = 0;
                v196 = 0;
                v119 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v194, (__int128 *)v201);
                v120 = v119;
                v195 = (__int128 *)v119;
                if (v119 >= v196)
                {
                  v122 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v194, (__int128 *)v216);
                }
                else
                {
                  if (SHIBYTE(v217) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v119, (const std::string::value_type *)v216[0], (std::string::size_type)v216[1]);
                  }
                  else
                  {
                    v121 = *(_OWORD *)v216;
                    *(_QWORD *)(v119 + 16) = v217;
                    *(_OWORD *)v119 = v121;
                  }
                  v122 = (__int128 *)(v120 + 24);
                }
                v195 = v122;
                *(_QWORD *)&__p[16] = 897988541;
                __p[24] = 0;
                *(_QWORD *)((char *)&v268 + 4) = 0;
                *(_QWORD *)&__p[8] = 1065353216;
                *(_QWORD *)__p = 0;
                v123 = *(_QWORD **)this;
                std::string::basic_string[abi:ne180100]<0>(v190, "elementwise");
                memset(&v189, 0, sizeof(v189));
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v189, (__int128 *)v194, v195, 0xAAAAAAAAAAAAAAABLL * (((char *)v195 - (char *)v194) >> 3));
                memset(&v188, 0, sizeof(v188));
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v188, (__int128 *)v256, (__int128 *)v257, 0xAAAAAAAAAAAAAAABLL * ((v257 - v256) >> 3));
                Espresso::sequential_builder::add<Espresso::elementwise_params>(&v192, v123, (uint64_t)v190, (uint64_t)&v259, (uint64_t)__p, (__int128 *)v189.__r_.__value_.__l.__data_, (__int128 *)v189.__r_.__value_.__l.__size_, (__int128 **)&v188);
                v260 = &v188;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v260);
                v260 = &v189;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v260);
                if (v191 < 0)
                  operator delete(v190[0]);
                v124 = v193;
                if (v193)
                {
                  v125 = (unint64_t *)&v193->__shared_owners_;
                  do
                    v126 = __ldaxr(v125);
                  while (__stlxr(v126 - 1, v125));
                  if (!v126)
                  {
                    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                    std::__shared_weak_count::__release_weak(v124);
                  }
                }
                *(_QWORD *)__p = &v194;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                v127 = v200;
                if (v200)
                {
                  v128 = (unint64_t *)&v200->__shared_owners_;
                  do
                    v129 = __ldaxr(v128);
                  while (__stlxr(v129 - 1, v128));
                  if (!v129)
                  {
                    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                    std::__shared_weak_count::__release_weak(v127);
                  }
                }
                if (SHIBYTE(v202) < 0)
                  operator delete(v201[0]);
                *(_QWORD *)__p = &v203;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                v130 = v209;
                if (v209)
                {
                  v131 = (unint64_t *)&v209->__shared_owners_;
                  do
                    v132 = __ldaxr(v131);
                  while (__stlxr(v132 - 1, v131));
                  if (!v132)
                  {
                    ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                    std::__shared_weak_count::__release_weak(v130);
                  }
                }
                v133 = v211;
                if (v211)
                {
                  v134 = (unint64_t *)&v211->__shared_owners_;
                  do
                    v135 = __ldaxr(v134);
                  while (__stlxr(v135 - 1, v134));
                  if (!v135)
                  {
                    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                    std::__shared_weak_count::__release_weak(v133);
                  }
                }
                v136 = v215;
                if (v215)
                {
                  v137 = (unint64_t *)&v215->__shared_owners_;
                  do
                    v138 = __ldaxr(v137);
                  while (__stlxr(v138 - 1, v137));
                  if (!v138)
                  {
                    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                    std::__shared_weak_count::__release_weak(v136);
                  }
                }
                if (SHIBYTE(v217) < 0)
                  operator delete(v216[0]);
                *(_QWORD *)&v273 = &v270;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v273);
                *(_QWORD *)&v273 = v261;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v273);
                goto LABEL_314;
              }
              if (v87)
                v88 = 0;
              else
                v88 = 5;
              if (v82 > 0 || v87 == 0)
                goto LABEL_232;
              if ((*(_BYTE *)(v77 + 23) & 0x80) != 0)
              {
                if (*(_QWORD *)(v77 + 8))
                  goto LABEL_202;
              }
              else if (*(_BYTE *)(v77 + 23))
              {
LABEL_202:
                v88 = 1;
                goto LABEL_232;
              }
              if ((v80 & 0x80) != 0)
                v80 = *(_QWORD *)(v79 + 8);
              v94 = v76[8];
              if (v76 == &CoreML::Specification::_WeightParams_default_instance_
                || (v80 ? (v95 = v94 == 0) : (v95 = 1), v95))
              {
                if ((v84 & 0x80) != 0)
                  v84 = *(_QWORD *)(v83 + 8);
                if (v94)
                  v96 = v84 == 0;
                else
                  v96 = 1;
                if (v96 || v76 == &CoreML::Specification::_WeightParams_default_instance_)
                  v88 = 5;
                else
                  v88 = 3;
              }
              else
              {
                v88 = 2;
              }
              goto LABEL_232;
            }
LABEL_146:
            if (v50 * v49 * v51 != (int)EspressoConverter::getWeightParamSize((uint64_t)v53))
            {
              v186 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1A1AD5E28](v186, "Scale Layer: Bias size does not match provided shape");
              __cxa_throw(v186, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            goto LABEL_147;
          default:
            v184 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1A1AD5E28](v184, "Scale Layer: Bias shape must be of size less than or equal to 3");
            goto LABEL_388;
        }
      }
      if ((unint64_t)v254 >= v255)
      {
        v64 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v253, (__int128 *)__sz);
      }
      else
      {
        if (SHIBYTE(v231) < 0)
        {
          std::string::__init_copy_ctor_external(v254, (const std::string::value_type *)__sz[0], __sz[1]);
        }
        else
        {
          v52 = *(_OWORD *)__sz;
          v254->__r_.__value_.__r.__words[2] = v231;
          *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v52;
        }
        v64 = v48 + 1;
      }
      v254 = v64;
      *(_QWORD *)&v274 = 897988541;
      BYTE8(v274) = 0;
      *(_QWORD *)((char *)&v276 + 4) = 0;
      *(_QWORD *)&v273 = 1;
      *((_QWORD *)&v273 + 1) = 1065353216;
      v90 = *(_QWORD **)this;
      std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
      memset(&v219, 0, sizeof(v219));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v219, (__int128 *)v253, (__int128 *)v254, 0xAAAAAAAAAAAAAAABLL * (((char *)v254 - v253) >> 3));
      memset(&v218, 0, sizeof(v218));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v218, (__int128 *)v256, (__int128 *)v257, 0xAAAAAAAAAAAAAAABLL * ((v257 - v256) >> 3));
      Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)v261, v90, (uint64_t)__p, (uint64_t)&v259, (uint64_t)&v273, (__int128 *)v219.__r_.__value_.__l.__data_, (__int128 *)v219.__r_.__value_.__l.__size_, (__int128 **)&v218);
      v270 = &v218;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v270);
      v270 = &v219;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v270);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v91 = (std::__shared_weak_count *)v261[1];
      if (v261[1])
      {
        p_size = &v261[1]->__r_.__value_.__l.__size_;
        do
          v93 = __ldaxr(p_size);
        while (__stlxr(v93 - 1, p_size));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
LABEL_314:
      if (**((_BYTE **)this + 2))
      {
        LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v256);
      }
      else
      {
        v139 = (uint64_t **)*((_QWORD *)this + 1);
        v140 = std::map<std::string,std::string>::at((uint64_t)v139, v253);
        v273 = *(_OWORD *)v140;
        v274 = *(_OWORD *)(v140 + 16);
        v275 = *(void **)(v140 + 32);
        v276 = 0uLL;
        v277 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v276, *(const void **)(v140 + 40), *(_QWORD *)(v140 + 48), (uint64_t)(*(_QWORD *)(v140 + 48) - *(_QWORD *)(v140 + 40)) >> 2);
        std::vector<Espresso::layer_shape>::vector(&v270);
        p_data = (void **)&v270->__r_.__value_.__l.__data_;
        *(_OWORD *)&v270->__r_.__value_.__l.__data_ = v273;
        *((_OWORD *)p_data + 1) = v274;
        p_data[4] = v275;
        v142 = v276;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)p_data + 40, (char *)v276, *((uint64_t *)&v276 + 1), (uint64_t)(*((_QWORD *)&v276 + 1) - v276) >> 2);
        v143 = (void **)&v270->__r_.__value_.__l.__data_;
        v144 = v274;
        *(_OWORD *)&v270[2].__r_.__value_.__r.__words[2] = v273;
        *((_OWORD *)v143 + 5) = v144;
        v143[12] = v275;
        v145 = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v143 + 104, (char *)v142, *((uint64_t *)&v142 + 1), (uint64_t)(*((_QWORD *)&v142 + 1) - v142) >> 2);
        if (*((_DWORD *)a2 + 35) == 245)
        {
          v146 = (uint64_t *)*((_QWORD *)a2 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v145);
          v146 = &CoreML::Specification::_ScaleLayerParams_default_instance_;
        }
        v147 = *((_DWORD *)v146 + 4);
        v148 = v146[3];
        v149 = (void **)&v270->__r_.__value_.__l.__data_;
        LODWORD(v270[3].__r_.__value_.__l.__data_) = *(_QWORD *)(v148 + 8);
        if (v147 == 1)
        {
          v150 = 1;
        }
        else
        {
          v147 = *(_DWORD *)(v148 + 16);
          v150 = *(_DWORD *)(v148 + 24);
        }
        *((_DWORD *)v149 + 16) = v150;
        *((_DWORD *)v149 + 17) = v147;
        if (*((_BYTE *)v146 + 80))
        {
          v269 = 0;
          v268 = 0u;
          *(_OWORD *)&__p[24] = 0u;
          *(_QWORD *)&__p[12] = 0x100000001;
          *(_DWORD *)&__p[20] = -1;
          v151 = *((_DWORD *)v146 + 10);
          v152 = v146[6];
          if (v151 == 1)
          {
            v153 = 1;
          }
          else
          {
            v151 = *(_DWORD *)(v152 + 16);
            v153 = *(_DWORD *)(v152 + 24);
          }
          *(_DWORD *)&__p[8] = *(_QWORD *)(v152 + 8);
          *(_DWORD *)&__p[4] = v151;
          *(_DWORD *)__p = v153;
          v155 = v271;
          if ((unint64_t)v271 >= v272)
          {
            v154 = (__int128 *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v270, (__int128 *)__p);
          }
          else
          {
            *v271 = *(_OWORD *)__p;
            v155[1] = *(_OWORD *)&__p[16];
            *((_QWORD *)v155 + 4) = *(_QWORD *)&__p[32];
            *((_QWORD *)v155 + 6) = 0;
            *((_QWORD *)v155 + 7) = 0;
            *((_QWORD *)v155 + 5) = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)v155 + 5, 0, 0, 0);
            v154 = v155 + 4;
          }
          v271 = v154;
          v149 = (void **)&v270->__r_.__value_.__l.__data_;
        }
        else
        {
          v154 = v271;
        }
        EspressoConverter::computeMaxShape((uint64_t)__p, (uint64_t)v149, (uint64_t)v154);
        *(_OWORD *)v261 = *(_OWORD *)__p;
        v262 = *(_OWORD *)&__p[16];
        v156 = (char *)v268;
        v263 = *(_QWORD *)&__p[32];
        v264 = 0;
        v266 = 0;
        v265 = 0;
        v157 = *((_QWORD *)&v268 + 1);
        v158 = (uint64_t)(*((_QWORD *)&v268 + 1) - v268) >> 2;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v264, (const void *)v268, *((uint64_t *)&v268 + 1), v158);
        EspressoConverter::validateShape((int *)v261, *((_QWORD *)a2 + 14), (uint64_t)v256);
        if (v264)
        {
          v265 = v264;
          operator delete(v264);
        }
        v216[0] = v256;
        v159 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v139, v256, (__int128 **)v216);
        v160 = *(_OWORD *)&__p[16];
        *(_OWORD *)(v159 + 56) = *(_OWORD *)__p;
        *(_OWORD *)(v159 + 72) = v160;
        *((_QWORD *)v159 + 11) = *(_QWORD *)&__p[32];
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v159 + 96, v156, v157, v158);
        if (v156)
          operator delete(v156);
        *(_QWORD *)__p = &v270;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if ((_QWORD)v276)
          operator delete((void *)v276);
      }
      if (v249)
        v161 = v249;
      else
        v161 = &CoreML::Specification::_WeightParams_default_instance_;
      v162 = v161[5];
      v163 = *(unsigned __int8 *)(v162 + 23);
      if (*(char *)(v162 + 23) < 0)
        v164 = *(_QWORD *)(v162 + 8);
      else
        v164 = *(unsigned __int8 *)(v162 + 23);
      v165 = v161[6];
      if (*(char *)(v165 + 23) < 0)
        v166 = *(_QWORD *)(v165 + 8);
      else
        v166 = *(unsigned __int8 *)(v165 + 23);
      v167 = *((_DWORD *)v161 + 4);
      v168 = v161[7];
      if (*(char *)(v168 + 23) < 0)
        v169 = *(_QWORD *)(v168 + 8);
      else
        v169 = *(unsigned __int8 *)(v168 + 23);
      if (v167 <= 0)
        v170 = 1;
      else
        v170 = 2;
      if (v164)
        v171 = v170;
      else
        v171 = v167 > 0;
      if (v166)
        ++v171;
      if (v169)
        ++v171;
      if (v167 <= 0 && v171 == 1)
      {
        if ((v163 & 0x80) != 0)
          v163 = *(_QWORD *)(v162 + 8);
        v173 = v163 != 0;
      }
      else
      {
        v173 = 0;
      }
      v174 = v223;
      if (v223)
      {
        v175 = (unint64_t *)&v223->__shared_owners_;
        do
          v176 = __ldaxr(v175);
        while (__stlxr(v176 - 1, v175));
        if (!v176)
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
      }
      v177 = v225;
      if (v225)
      {
        v178 = (unint64_t *)&v225->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
        }
      }
      v180 = v229;
      if (v229)
      {
        v181 = (unint64_t *)&v229->__shared_owners_;
        do
          v182 = __ldaxr(v181);
        while (__stlxr(v182 - 1, v181));
        if (!v182)
        {
          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
          std::__shared_weak_count::__release_weak(v180);
        }
      }
      if (SHIBYTE(v231) < 0)
        operator delete((void *)__sz[0]);
      *(_QWORD *)&v273 = &v232;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v273);
      *(_QWORD *)&v273 = &v235;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v273);
      CoreML::Specification::ScaleLayerParams::~ScaleLayerParams((CoreML::Specification::ScaleLayerParams *)&v243);
      v243 = &v253;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v243);
      v243 = &v256;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v243);
      if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v259.__r_.__value_.__l.__data_);
      return v173;
    default:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](exception, "Scale Layer: Scale shape must be of size less than or equal to 3");
LABEL_393:
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
}

void sub_19C985ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a65;
  unint64_t v65;

  STACK[0x2D8] = v65;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x200]);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  STACK[0x368] = (unint64_t)&STACK[0x230];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x368]);
  STACK[0x368] = (unint64_t)&STACK[0x248];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x368]);
  CoreML::Specification::ScaleLayerParams::~ScaleLayerParams((CoreML::Specification::ScaleLayerParams *)&STACK[0x278]);
  STACK[0x278] = (unint64_t)&STACK[0x2D0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x278]);
  STACK[0x278] = (unint64_t)&STACK[0x2E8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x278]);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  _Unwind_Resume(a1);
}

void LayerTranslator::addConcat(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  __int128 *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v16;
  void *v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  __int128 *v29;
  __int128 *i;
  uint64_t v31;
  std::string::size_type size;
  void *v33;
  std::string::size_type v34;
  std::string::size_type v35;
  int v36;
  int v37;
  _DWORD *v38;
  int v39;
  int v40;
  int v41;
  BOOL v43;
  int v44;
  BOOL v45;
  BOOL v46;
  int v47;
  BOOL v48;
  BOOL v49;
  __int128 *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  __int128 v55;
  int v56;
  unint64_t v57;
  int *v58;
  int v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  std::runtime_error *exception;
  std::string v69;
  std::string v70;
  void *__p;
  std::__shared_weak_count *v72;
  char v73;
  void **v74;
  std::__shared_weak_count *v75;
  std::string v76;
  std::string v77;
  void *v78;
  std::__shared_weak_count *v79;
  __int128 *v80;
  __int128 *v81;
  uint64_t v82;
  __int128 *v83;
  __int128 *v84;
  uint64_t v85;
  std::string v86;
  _BYTE v87[32];
  uint64_t v88;
  void *v89[3];
  std::string v90;
  std::string v91;
  std::string v92;
  void **v93;
  std::__shared_weak_count *v94;
  std::string *v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;

  v4 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  if (*((_DWORD *)a2 + 35) == 320)
  {
    v5 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
    v5 = &CoreML::Specification::_ConcatLayerParams_default_instance_;
  }
  v6 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v86.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v7;
  }
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v83, (uint64_t *)&v80, *((_QWORD *)this + 1));
  if (*((_BYTE *)v5 + 16))
  {
    LODWORD(v95) = 1;
    v8 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v90, "sequence_concat");
    memset(&v77, 0, sizeof(v77));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v77, v80, v81, 0xAAAAAAAAAAAAAAABLL * (((char *)v81 - (char *)v80) >> 3));
    memset(&v76, 0, sizeof(v76));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v76, v83, v84, 0xAAAAAAAAAAAAAAABLL * (((char *)v84 - (char *)v83) >> 3));
    memset(&v92, 0, sizeof(v92));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v92, (__int128 *)v77.__r_.__value_.__l.__data_, (__int128 *)v77.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77.__r_.__value_.__l.__size_ - v77.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v91, 0, sizeof(v91));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v91, (__int128 *)v76.__r_.__value_.__l.__data_, (__int128 *)v76.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76.__r_.__value_.__l.__size_ - v76.__r_.__value_.__r.__words[0]) >> 3));
    LODWORD(v96) = (***(uint64_t (****)(_QWORD))(v8[14] + 8))(*(_QWORD *)(v8[14] + 8));
    Espresso::abstract_engine_factory::make_kernel_priv();
    __p = v78;
    v72 = v79;
    if (v79)
    {
      p_shared_owners = (unint64_t *)&v79->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v96 = 0uLL;
    *(_QWORD *)&v97 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v96, (__int128 *)v92.__r_.__value_.__l.__data_, (__int128 *)v92.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v92.__r_.__value_.__l.__size_ - v92.__r_.__value_.__r.__words[0]) >> 3));
    memset(v87, 0, 24);
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v87, (__int128 *)v91.__r_.__value_.__l.__data_, (__int128 *)v91.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v91.__r_.__value_.__l.__size_ - v91.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add_kernel_dbg();
    v93 = (void **)v87;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v93);
    v93 = (void **)&v96;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v93);
    if (v72)
    {
      v11 = &v72->__shared_owners_;
      do
        v12 = __ldaxr((unint64_t *)v11);
      while (__stlxr(v12 - 1, (unint64_t *)v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    if (*v8)
      Espresso::sequential_builder::add_shape_from_kernel();
    *(_QWORD *)&v96 = &v91;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
    *(_QWORD *)&v96 = &v92;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
    v13 = v79;
    if (v79)
    {
      v14 = (unint64_t *)&v79->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    *(_QWORD *)&v96 = &v76;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
    *(_QWORD *)&v96 = &v77;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v90.__r_.__value_.__r.__words[0];
LABEL_42:
      operator delete(v17);
    }
  }
  else
  {
    BYTE4(v101) = 0;
    LOWORD(v99) = 0;
    LODWORD(v96) = 0;
    LODWORD(v98) = 0;
    v18 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&__p, "concat");
    memset(&v70, 0, sizeof(v70));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v70, v80, v81, 0xAAAAAAAAAAAAAAABLL * (((char *)v81 - (char *)v80) >> 3));
    memset(&v69, 0, sizeof(v69));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v69, v83, v84, 0xAAAAAAAAAAAAAAABLL * (((char *)v84 - (char *)v83) >> 3));
    memset(&v91, 0, sizeof(v91));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v91, (__int128 *)v70.__r_.__value_.__l.__data_, (__int128 *)v70.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70.__r_.__value_.__l.__size_ - v70.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v90, 0, sizeof(v90));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v90, (__int128 *)v69.__r_.__value_.__l.__data_, (__int128 *)v69.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69.__r_.__value_.__l.__size_ - v69.__r_.__value_.__r.__words[0]) >> 3));
    *(_DWORD *)v87 = (***(uint64_t (****)(_QWORD))(v18[14] + 8))(*(_QWORD *)(v18[14] + 8));
    Espresso::abstract_engine_factory::make_kernel_priv();
    v93 = v74;
    v94 = v75;
    if (v75)
    {
      v19 = (unint64_t *)&v75->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    memset(v87, 0, 24);
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v87, (__int128 *)v91.__r_.__value_.__l.__data_, (__int128 *)v91.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v91.__r_.__value_.__l.__size_ - v91.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v92, 0, sizeof(v92));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v92, (__int128 *)v90.__r_.__value_.__l.__data_, (__int128 *)v90.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90.__r_.__value_.__l.__size_ - v90.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add_kernel_dbg();
    v95 = &v92;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    v95 = (std::string *)v87;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    v21 = v94;
    if (v94)
    {
      v22 = (unint64_t *)&v94->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (*v18)
      Espresso::sequential_builder::add_shape_from_kernel();
    *(_QWORD *)v87 = &v90;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v87);
    *(_QWORD *)v87 = &v91;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v87);
    v24 = v75;
    if (v75)
    {
      v25 = (unint64_t *)&v75->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    *(_QWORD *)v87 = &v69;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v87);
    *(_QWORD *)v87 = &v70;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v87);
    if (v73 < 0)
    {
      v17 = __p;
      goto LABEL_42;
    }
  }
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v83);
    goto LABEL_95;
  }
  v27 = (uint64_t **)*((_QWORD *)this + 1);
  if (*((_DWORD *)a2 + 35) == 320)
  {
    v28 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v16);
    v28 = &CoreML::Specification::_ConcatLayerParams_default_instance_;
  }
  memset(&v92, 0, sizeof(v92));
  v29 = v80;
  for (i = v81; v29 != i; v29 = (__int128 *)((char *)v29 + 24))
  {
    v31 = std::map<std::string,std::string>::at((uint64_t)v27, v29);
    v96 = *(_OWORD *)v31;
    v97 = *(_OWORD *)(v31 + 16);
    v98 = *(_QWORD *)(v31 + 32);
    v100 = 0;
    v101 = 0;
    v99 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v99, *(const void **)(v31 + 40), *(_QWORD *)(v31 + 48), (uint64_t)(*(_QWORD *)(v31 + 48) - *(_QWORD *)(v31 + 40)) >> 2);
    size = v92.__r_.__value_.__l.__size_;
    if (v92.__r_.__value_.__l.__size_ >= v92.__r_.__value_.__r.__words[2])
    {
      v34 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v92, &v96);
      v33 = v99;
    }
    else
    {
      *(_OWORD *)v92.__r_.__value_.__l.__size_ = v96;
      *(_OWORD *)(size + 16) = v97;
      *(_QWORD *)(size + 32) = v98;
      *(_QWORD *)(size + 48) = 0;
      *(_QWORD *)(size + 56) = 0;
      *(_QWORD *)(size + 40) = 0;
      v33 = v99;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(size + 40), v99, v100, (v100 - (uint64_t)v99) >> 2);
      v34 = size + 64;
    }
    v92.__r_.__value_.__l.__size_ = v34;
    if (v33)
      operator delete(v33);
  }
  v35 = v92.__r_.__value_.__r.__words[0];
  if (*((_BYTE *)v28 + 16))
  {
    EspressoConverter::validateEqualInputShapes((uint64_t)a2, (int *)v92.__r_.__value_.__l.__data_, (int *)v92.__r_.__value_.__l.__size_);
    v35 = v92.__r_.__value_.__r.__words[0];
  }
  else if (v92.__r_.__value_.__r.__words[0] != v92.__r_.__value_.__l.__size_)
  {
    v36 = *(_DWORD *)(v92.__r_.__value_.__r.__words[0] + 12);
    v37 = *(_DWORD *)(v92.__r_.__value_.__r.__words[0] + 16);
    v38 = (_DWORD *)v92.__r_.__value_.__r.__words[0];
    v40 = *(_DWORD *)v92.__r_.__value_.__l.__data_;
    v39 = *(_DWORD *)(v92.__r_.__value_.__r.__words[0] + 4);
    do
    {
      v41 = v38[3];
      v43 = v41 == v36 || v41 == -1 || v36 == -1;
      if (!v43
        || ((v44 = v38[4], v44 != v37) ? (v45 = v44 == -1) : (v45 = 1),
            !v45 ? (v46 = v37 == -1) : (v46 = 1),
            !v46
         || ((v47 = v38[1], v47 != v39) ? (v48 = v47 == -1) : (v48 = 1),
             !v48 ? (v49 = v39 == -1) : (v49 = 1),
             !v49 || *v38 != v40 && *v38 != -1 && v40 != -1)))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v96);
        v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v97, (uint64_t)"Input shapes (height and width dimensions) must be equal for layer: '", 69);
        v62 = *((_QWORD *)a2 + 14);
        v63 = *(char *)(v62 + 23);
        if (v63 >= 0)
          v64 = *((_QWORD *)a2 + 14);
        else
          v64 = *(_QWORD *)v62;
        if (v63 >= 0)
          v65 = *(unsigned __int8 *)(v62 + 23);
        else
          v65 = *(_QWORD *)(v62 + 8);
        v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, v64, v65);
        v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"'.", 2);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v67);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, (const std::string *)v87);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v38 += 16;
    }
    while (v38 != (_DWORD *)v92.__r_.__value_.__l.__size_);
  }
  v96 = *(_OWORD *)v35;
  v97 = *(_OWORD *)(v35 + 16);
  v98 = *(_QWORD *)(v35 + 32);
  v99 = 0;
  v100 = 0;
  v101 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v99, *(const void **)(v35 + 40), *(_QWORD *)(v35 + 48), (uint64_t)(*(_QWORD *)(v35 + 48) - *(_QWORD *)(v35 + 40)) >> 2);
  if (*((_BYTE *)v28 + 16))
  {
    v50 = &v97;
  }
  else
  {
    DWORD2(v96) = 0;
    if (v92.__r_.__value_.__l.__size_ == v92.__r_.__value_.__r.__words[0])
      goto LABEL_90;
    v56 = 0;
    v50 = (__int128 *)((char *)&v96 + 8);
    v57 = (uint64_t)(v92.__r_.__value_.__l.__size_ - v92.__r_.__value_.__r.__words[0]) >> 6;
    if (v57 <= 1)
      v57 = 1;
    v58 = (int *)(v92.__r_.__value_.__r.__words[0] + 8);
    while (1)
    {
      v60 = *v58;
      v58 += 16;
      v59 = v60;
      if (v60 == -1)
        break;
      v56 += v59;
      if (!--v57)
      {
        DWORD2(v96) = v56;
        goto LABEL_90;
      }
    }
    DWORD2(v96) = v56;
  }
  *(_DWORD *)v50 = -1;
LABEL_90:
  *(_OWORD *)v87 = v96;
  *(_OWORD *)&v87[16] = v97;
  v51 = (char *)v99;
  v88 = v98;
  memset(v89, 0, sizeof(v89));
  v52 = v100;
  v53 = (v100 - (uint64_t)v99) >> 2;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v89, v99, v100, v53);
  EspressoConverter::validateShape((int *)v87, *((_QWORD *)a2 + 14), (uint64_t)v83);
  if (v89[0])
    operator delete(v89[0]);
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
  v54 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, v83, (__int128 **)&v90);
  v55 = v97;
  *(_OWORD *)(v54 + 56) = v96;
  *(_OWORD *)(v54 + 72) = v55;
  *((_QWORD *)v54 + 11) = v98;
  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v54 + 96, v51, v52, v53);
  if (v51)
    operator delete(v51);
  *(_QWORD *)&v96 = &v92;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
LABEL_95:
  *(_QWORD *)&v96 = &v80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
  *(_QWORD *)&v96 = &v83;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
}

void sub_19C986CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  char a65;
  void *v65;
  int v66;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((v66 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a65);
      a56 = (uint64_t)&a59;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
      a64 = (uint64_t)&a29;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a64);
      a29 = (uint64_t)&a32;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
      if (a40 < 0)
        operator delete(a35);
      _Unwind_Resume(a1);
    }
  }
  else if (!v66)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v65);
  goto LABEL_6;
}

void LayerTranslator::addAddBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[3];
  char v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  std::string v25;
  std::string *v26;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v25.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v5;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v22, (uint64_t *)&v19, *((_QWORD *)this + 1));
  v16[2] = (void **)897988541;
  v18 = 0;
  v16[0] = 0;
  v16[1] = (void **)1065353216;
  v17 = 1;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v14, v6, (uint64_t)__p, (uint64_t)&v25, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v26 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v22);
  v16[0] = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_19C987118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addConvolution(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  __int128 *v7;
  __int128 *v8;
  const CoreML::Specification::ConvolutionLayerParams *v9;
  int64_t v10;
  int v15;
  uint64_t v16;
  __int128 v17;
  const void *v18;
  unint64_t v19;
  int v20;
  uint64_t *v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int16 v33;
  uint64_t *v34;
  uint64_t v35;
  int32x4_t v36;
  int32x4_t v37;
  _QWORD *v38;
  __int128 v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *size;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  __int128 v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v54;
  const CoreML::Specification::ConvolutionLayerParams *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  void *v64;
  _BOOL4 v65;
  uint64_t *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  __int128 v80;
  std::runtime_error *v81;
  std::string *v82;
  __int128 v83;
  uint64_t *v84;
  int WeightParamSize;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v97;
  unint64_t v98;
  int WeightParamSizeInBytes;
  std::string *v100;
  __int128 v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *p_shared_owners;
  unint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  int v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v135;
  void *v136;
  int v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  _BOOL8 v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  int v173;
  std::runtime_error *v174;
  std::string *v175;
  __int128 v176;
  std::runtime_error *v177;
  std::string *v178;
  __int128 v179;
  std::runtime_error *v180;
  std::string *v181;
  __int128 v182;
  std::runtime_error *v183;
  std::string *v184;
  __int128 v185;
  std::runtime_error *v186;
  std::string *v187;
  __int128 v188;
  std::runtime_error *v189;
  std::string *v190;
  __int128 v191;
  std::runtime_error *exception;
  std::string *v193;
  __int128 v194;
  std::runtime_error *v195;
  std::string *v196;
  __int128 v197;
  std::runtime_error *v198;
  std::string *v199;
  __int128 v200;
  std::runtime_error *v201;
  std::string *v202;
  __int128 v203;
  std::runtime_error *v204;
  std::string *v205;
  __int128 v206;
  std::runtime_error *v207;
  std::string *v208;
  __int128 v209;
  _QWORD *v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  std::runtime_error *v219;
  void *v220;
  std::runtime_error *v221;
  std::string *v222;
  __int128 v223;
  std::runtime_error *v224;
  std::string *v225;
  __int128 v226;
  std::runtime_error *v227;
  std::string *v228;
  __int128 v229;
  void *v230;
  std::runtime_error *v231;
  std::string *v232;
  __int128 v233;
  std::runtime_error *v234;
  int v235;
  uint64_t **v236;
  int64_t v237;
  unint64_t v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  __int128 v241;
  __int128 v242;
  std::string v243;
  std::string v244;
  std::string v245;
  std::string v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  void *v251[4];
  _QWORD v252[4];
  uint64_t v253;
  __int128 v254;
  unint64_t v255;
  uint64_t v256;
  __int16 v257;
  __int128 v258;
  __int16 v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  int v263;
  int v264;
  int v265;
  uint64_t v266;
  __int16 v267;
  __int16 v268;
  unint64_t v269;
  uint64_t v270;
  int v271;
  __int16 v272;
  int v273;
  char v274;
  _BYTE v275[16];
  int v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char v289;
  unsigned __int8 v290;
  uint64_t v291;
  int v292;
  __int128 *v293;
  __int128 *v294;
  uint64_t v295;
  __int128 *v296;
  __int128 *v297;
  uint64_t v298;
  std::string v299;
  _OWORD v300[2];
  uint64_t v301;
  void *v302;
  void *v303;
  uint64_t v304;
  void *__p[2];
  __int128 v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  std::string v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  char v320;
  uint64_t v321;
  int v322;
  _BYTE v323[32];
  uint64_t v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  __int128 *v328;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v299, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v299.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v299.__r_.__value_.__l.__data_ = v5;
  }
  v297 = 0;
  v296 = 0;
  v298 = 0;
  v294 = 0;
  v293 = 0;
  v295 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v296, (uint64_t *)&v293, *((_QWORD *)this + 1));
  v7 = v294;
  v8 = v293;
  if (*((_DWORD *)a2 + 35) == 100)
  {
    v9 = (const CoreML::Specification::ConvolutionLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v9 = (const CoreML::Specification::ConvolutionLayerParams *)&CoreML::Specification::_ConvolutionLayerParams_default_instance_;
  }
  CoreML::Specification::ConvolutionLayerParams::ConvolutionLayerParams((CoreML::Specification::ConvolutionLayerParams *)v275, v9);
  v10 = (char *)v7 - (char *)v8;
  if ((char *)v7 - (char *)v8 == 48)
  {
    if (v289)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v193 = std::string::append(&v311, "' , deconvolution does not support weight as input tensor.");
      v194 = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
      *(_QWORD *)&v306 = *((_QWORD *)&v193->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v194;
      v193->__r_.__value_.__l.__size_ = 0;
      v193->__r_.__value_.__r.__words[2] = 0;
      v193->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)__p);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (v280 >= 1 && (*(_QWORD *)(v281 + 8) > 1uLL || v280 >= 2 && *(_QWORD *)(v281 + 16) >= 2uLL))
    {
      v204 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v205 = std::string::append(&v311, "' , dilated convolution does not support weight as input tensor.");
      v206 = *(_OWORD *)&v205->__r_.__value_.__l.__data_;
      *(_QWORD *)&v306 = *((_QWORD *)&v205->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v206;
      v205->__r_.__value_.__l.__size_ = 0;
      v205->__r_.__value_.__r.__words[2] = 0;
      v205->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v204, (const std::string *)__p);
      __cxa_throw(v204, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  v257 = 1;
  __asm { FMOV            V0.2S, #1.0 }
  v258 = 0uLL;
  v259 = 0;
  v260 = 0x1000100010001;
  v273 = 0;
  v274 = 0;
  v269 = 0;
  v270 = 0;
  v254 = xmmword_19CB399B0;
  memset(v252, 0, sizeof(v252));
  v253 = 1;
  v261 = 0;
  v262 = 0;
  v263 = 0;
  v266 = 0;
  v268 = 1;
  v255 = 0xFFFFFFFF00000000;
  v256 = _D0;
  v267 = 0;
  v271 = 0;
  v272 = 1;
  if (v288)
    v15 = v288;
  else
    v15 = 1;
  v265 = 1;
  v264 = v15;
  v16 = std::map<std::string,std::string>::at(*((_QWORD *)this + 1), v293);
  v17 = *(_OWORD *)(v16 + 16);
  v248 = *(_OWORD *)v16;
  v249 = v17;
  v18 = *(const void **)(v16 + 40);
  v250 = *(_QWORD *)(v16 + 32);
  memset(v251, 0, 24);
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v251, v18, *(_QWORD *)(v16 + 48), (uint64_t)(*(_QWORD *)(v16 + 48) - (_QWORD)v18) >> 2);
  if (DWORD2(v248) != -1 && SDWORD2(v248) % v264)
  {
    v189 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v190 = std::string::append(&v311, "' , input channels must be divisible by the number of groups.");
    v191 = *(_OWORD *)&v190->__r_.__value_.__l.__data_;
    *(_QWORD *)&v306 = *((_QWORD *)&v190->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v191;
    v190->__r_.__value_.__l.__size_ = 0;
    v190->__r_.__value_.__r.__words[2] = 0;
    v190->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v189, (const std::string *)__p);
    __cxa_throw(v189, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v19 = v286;
  if (!v286)
  {
    v174 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v175 = std::string::append(&v311, "' , output channels cannot be 0");
    v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
    *(_QWORD *)&v306 = *((_QWORD *)&v175->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v176;
    v175->__r_.__value_.__l.__size_ = 0;
    v175->__r_.__value_.__r.__words[2] = 0;
    v175->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v174, (const std::string *)__p);
    __cxa_throw(v174, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v20 = v287;
  if (!v287)
  {
    v177 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v178 = std::string::append(&v311, "' , kernel channels cannot be 0");
    v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
    *(_QWORD *)&v306 = *((_QWORD *)&v178->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v179;
    v178->__r_.__value_.__l.__size_ = 0;
    v178->__r_.__value_.__r.__words[2] = 0;
    v178->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v177, (const std::string *)__p);
    __cxa_throw(v177, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v276)
  {
    if (v276 != 2)
    {
      v195 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v196 = std::string::append(&v311, "' , if set, kernel size must be of length 2");
      v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
      *(_QWORD *)&v306 = *((_QWORD *)&v196->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v197;
      v196->__r_.__value_.__l.__size_ = 0;
      v196->__r_.__value_.__r.__words[2] = 0;
      v196->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v195, (const std::string *)__p);
      __cxa_throw(v195, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (!*(_QWORD *)(v277 + 8) || !*(_QWORD *)(v277 + 16))
    {
      v180 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v181 = std::string::append(&v311, "' , kernel size cannot be 0");
      v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
      *(_QWORD *)&v306 = *((_QWORD *)&v181->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v182;
      v181->__r_.__value_.__l.__size_ = 0;
      v181->__r_.__value_.__r.__words[2] = 0;
      v181->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v180, (const std::string *)__p);
      __cxa_throw(v180, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  if (v278)
  {
    if (v278 != 2)
    {
      v198 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v199 = std::string::append(&v311, "' , if set, stride must be of length 2");
      v200 = *(_OWORD *)&v199->__r_.__value_.__l.__data_;
      *(_QWORD *)&v306 = *((_QWORD *)&v199->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v200;
      v199->__r_.__value_.__l.__size_ = 0;
      v199->__r_.__value_.__r.__words[2] = 0;
      v199->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v198, (const std::string *)__p);
      __cxa_throw(v198, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (!*(_QWORD *)(v279 + 8) || !*(_QWORD *)(v279 + 16))
    {
      v183 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v184 = std::string::append(&v311, "' , stride cannot be 0");
      v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
      *(_QWORD *)&v306 = *((_QWORD *)&v184->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v185;
      v184->__r_.__value_.__l.__size_ = 0;
      v184->__r_.__value_.__r.__words[2] = 0;
      v184->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v183, (const std::string *)__p);
      __cxa_throw(v183, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  if (v280)
  {
    if (v280 != 2)
    {
      v201 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v202 = std::string::append(&v311, "' , if set, dilation factor must be of length 2");
      v203 = *(_OWORD *)&v202->__r_.__value_.__l.__data_;
      *(_QWORD *)&v306 = *((_QWORD *)&v202->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v203;
      v202->__r_.__value_.__l.__size_ = 0;
      v202->__r_.__value_.__r.__words[2] = 0;
      v202->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v201, (const std::string *)__p);
      __cxa_throw(v201, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (!*(_QWORD *)(v281 + 8) || !*(_QWORD *)(v281 + 16))
    {
      v186 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v187 = std::string::append(&v311, "' , dilation factor cannot be 0");
      v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
      *(_QWORD *)&v306 = *((_QWORD *)&v187->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v188;
      v187->__r_.__value_.__l.__size_ = 0;
      v187->__r_.__value_.__r.__words[2] = 0;
      v187->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v186, (const std::string *)__p);
      __cxa_throw(v186, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  if (v289 && (v282 | 2) != 2)
  {
    v221 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v222 = std::string::append(&v311, "' , if set, output shape must be of length 2");
    v223 = *(_OWORD *)&v222->__r_.__value_.__l.__data_;
    *(_QWORD *)&v306 = *((_QWORD *)&v222->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v223;
    v222->__r_.__value_.__l.__size_ = 0;
    v222->__r_.__value_.__r.__words[2] = 0;
    v222->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v221, (const std::string *)__p);
    __cxa_throw(v221, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v292 == 50)
  {
    v21 = *(uint64_t **)(v291 + 16);
    if (!v21)
      v21 = &CoreML::Specification::_BorderAmounts_default_instance_;
    if ((*((_DWORD *)v21 + 6) | 2) != 2)
    {
      v227 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v228 = std::string::append(&v311, "' , for valid padding, padding border amounts must be specified for both height and width, if set");
      v229 = *(_OWORD *)&v228->__r_.__value_.__l.__data_;
      *(_QWORD *)&v306 = *((_QWORD *)&v228->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v229;
      v228->__r_.__value_.__l.__size_ = 0;
      v228->__r_.__value_.__r.__words[2] = 0;
      v228->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v227, (const std::string *)__p);
      __cxa_throw(v227, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  v22 = v264;
  if (v289)
    v23 = 1;
  else
    v23 = v264;
  DWORD1(v254) = v23 * v287;
  LODWORD(v254) = v286;
  LODWORD(v253) = v290;
  if (v276)
  {
    v24 = *(_DWORD *)(v277 + 8);
    v25 = *(_DWORD *)(v277 + 16);
  }
  else
  {
    v24 = 3;
    v25 = 3;
  }
  *((_QWORD *)&v254 + 1) = __PAIR64__(v24, v25);
  if (v278)
  {
    v26 = *(_WORD *)(v279 + 8);
    v27 = *(_WORD *)(v279 + 16);
  }
  else
  {
    v26 = 1;
    v27 = 1;
  }
  WORD1(v260) = v26;
  LOWORD(v260) = v27;
  if (v280)
  {
    v28 = *(_WORD *)(v281 + 8);
    v29 = *(_WORD *)(v281 + 16);
  }
  else
  {
    v28 = 1;
    v29 = 1;
  }
  HIWORD(v260) = v28;
  WORD2(v260) = v29;
  switch(v292)
  {
    case 50:
      v34 = *(uint64_t **)(v291 + 16);
      if (!v34)
        v34 = &CoreML::Specification::_BorderAmounts_default_instance_;
      if (*((_DWORD *)v34 + 6))
      {
        v35 = v34[4];
        v36 = *(int32x4_t *)(*(_QWORD *)(v35 + 8) + 16);
        v37 = *(int32x4_t *)(*(_QWORD *)(v35 + 16) + 16);
      }
      else
      {
        v37 = 0uLL;
        v36 = 0uLL;
      }
      v257 = 0;
      *(int16x4_t *)((char *)&v258 + 6) = vmovn_s32(vuzp1q_s32(v37, v36));
      if (v289)
        goto LABEL_54;
      goto LABEL_80;
    case 51:
      v32 = *(_DWORD *)(v291 + 16);
      if (v32 == 1)
      {
        v33 = 4;
      }
      else
      {
        if (v32)
        {
          v220 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1A1AD5E28](v220, "Same Padding Mode not recognized");
LABEL_376:
          __cxa_throw(v220, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v33 = 1;
      }
      v257 = v33;
      if (v289)
        goto LABEL_54;
      goto LABEL_80;
    case 0:
      v220 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](v220, "Convolution padding type not set");
      goto LABEL_376;
  }
  if (v289)
  {
LABEL_54:
    if (v282)
    {
      v31 = *(_QWORD *)(v283 + 8);
      v30 = *(_QWORD *)(v283 + 16);
    }
    else
    {
      v31 = 0;
      v30 = 0;
    }
    v247 = 0uLL;
    v269 = __PAIR64__(v31, v30);
    v38 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(__p, "deconvolution");
    memset(&v246, 0, sizeof(v246));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v246, v293, v294, 0xAAAAAAAAAAAAAAABLL * (((char *)v294 - (char *)v293) >> 3));
    memset(&v245, 0, sizeof(v245));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v245, v296, v297, 0xAAAAAAAAAAAAAAABLL * (((char *)v297 - (char *)v296) >> 3));
    Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&v311, v38, (uint64_t)__p, (uint64_t)&v299, (uint64_t)v252, (__int128 *)v246.__r_.__value_.__l.__data_, (__int128 *)v246.__r_.__value_.__l.__size_, (__int128 **)&v245);
    *(_QWORD *)v323 = &v245;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v323);
    *(_QWORD *)v323 = &v246;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v323);
    if (SBYTE7(v306) < 0)
      operator delete(__p[0]);
    v39 = *(_OWORD *)&v311.__r_.__value_.__l.__data_;
    v19 /= v22;
    if (v311.__r_.__value_.__l.__size_)
    {
      v40 = (unint64_t *)(v311.__r_.__value_.__l.__size_ + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      size = (std::__shared_weak_count *)v311.__r_.__value_.__l.__size_;
      v247 = v39;
      if (v311.__r_.__value_.__l.__size_)
      {
        v43 = (unint64_t *)(v311.__r_.__value_.__l.__size_ + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }
    else
    {
      v247 = v311.__r_.__value_.__r.__words[0];
    }
    goto LABEL_92;
  }
LABEL_80:
  v247 = 0uLL;
  v45 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution");
  memset(&v244, 0, sizeof(v244));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v244, v293, v294, 0xAAAAAAAAAAAAAAABLL * (((char *)v294 - (char *)v293) >> 3));
  memset(&v243, 0, sizeof(v243));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v243, v296, v297, 0xAAAAAAAAAAAAAAABLL * (((char *)v297 - (char *)v296) >> 3));
  Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&v311, v45, (uint64_t)__p, (uint64_t)&v299, (uint64_t)v252, (__int128 *)v244.__r_.__value_.__l.__data_, (__int128 *)v244.__r_.__value_.__l.__size_, (__int128 **)&v243);
  *(_QWORD *)v323 = &v243;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v323);
  *(_QWORD *)v323 = &v244;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v323);
  if (SBYTE7(v306) < 0)
    operator delete(__p[0]);
  v46 = *(_OWORD *)&v311.__r_.__value_.__l.__data_;
  if (v311.__r_.__value_.__l.__size_)
  {
    v47 = (unint64_t *)(v311.__r_.__value_.__l.__size_ + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    v49 = (std::__shared_weak_count *)v311.__r_.__value_.__l.__size_;
    v247 = v46;
    if (v311.__r_.__value_.__l.__size_)
    {
      v50 = (unint64_t *)(v311.__r_.__value_.__l.__size_ + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }
  else
  {
    v247 = v311.__r_.__value_.__r.__words[0];
  }
  v30 = 0;
  v31 = 0;
LABEL_92:
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v296);
    goto LABEL_144;
  }
  v52 = *((_QWORD *)this + 1);
  v53 = std::map<std::string,std::string>::at(v52, v293);
  *(_OWORD *)v323 = *(_OWORD *)v53;
  *(_OWORD *)&v323[16] = *(_OWORD *)(v53 + 16);
  v324 = *(_QWORD *)(v53 + 32);
  v325 = 0;
  v326 = 0;
  v327 = 0;
  v54 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v325, *(const void **)(v53 + 40), *(_QWORD *)(v53 + 48), (uint64_t)(*(_QWORD *)(v53 + 48)- *(_QWORD *)(v53 + 40)) >> 2);
  if (*((_DWORD *)a2 + 35) == 100)
  {
    v55 = (const CoreML::Specification::ConvolutionLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v54);
    v55 = (const CoreML::Specification::ConvolutionLayerParams *)&CoreML::Specification::_ConvolutionLayerParams_default_instance_;
  }
  CoreML::Specification::ConvolutionLayerParams::ConvolutionLayerParams((CoreML::Specification::ConvolutionLayerParams *)&v311, v55);
  v236 = (uint64_t **)v52;
  if (v319)
    v56 = v319;
  else
    v56 = 1;
  if (v320)
    v56 = 1;
  if (*(_DWORD *)&v323[8] != -1 && v56 * v318 != *(_DWORD *)&v323[8])
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
    v210 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v306, (uint64_t)"Convolution layer '", 19);
    v211 = *((_QWORD *)a2 + 14);
    v212 = *(char *)(v211 + 23);
    if (v212 >= 0)
      v213 = *((_QWORD *)a2 + 14);
    else
      v213 = *(_QWORD *)v211;
    if (v212 >= 0)
      v214 = *(unsigned __int8 *)(v211 + 23);
    else
      v214 = *(_QWORD *)(v211 + 8);
    v215 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, v213, v214);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v215, (uint64_t)"' input's channel dimension (", 29);
    v216 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v216, (uint64_t)") is not equal to the number of layer parameters  (", 51);
    v217 = (_QWORD *)std::ostream::operator<<();
    v218 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v217, (uint64_t)")", 1);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v218);
    v219 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v219, (const std::string *)v300);
    __cxa_throw(v219, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (LODWORD(v311.__r_.__value_.__r.__words[2]))
  {
    v57 = *(_DWORD *)(v312 + 8);
    v58 = *(_DWORD *)(v312 + 16);
  }
  else
  {
    v57 = 3;
    v58 = 3;
  }
  v237 = v10;
  v238 = v19;
  v59 = v20;
  if (v313)
  {
    v60 = *(_DWORD *)(v314 + 8);
    v61 = *(_DWORD *)(v314 + 16);
  }
  else
  {
    v60 = 1;
    v61 = 1;
  }
  v235 = v61;
  if (v315)
  {
    v62 = *(__int16 *)(v316 + 8);
    v63 = *(__int16 *)(v316 + 16);
  }
  else
  {
    v62 = 1;
    v63 = 1;
  }
  *(_OWORD *)__p = *(_OWORD *)v323;
  v306 = *(_OWORD *)&v323[16];
  v64 = v325;
  v307 = v324;
  v308 = 0;
  v310 = 0;
  v309 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v308, v325, v326, (v326 - (uint64_t)v325) >> 2);
  LODWORD(__p[1]) = v317;
  switch(v322)
  {
    case 50:
      v66 = *(uint64_t **)(v321 + 16);
      if (!v66)
        v66 = &CoreML::Specification::_BorderAmounts_default_instance_;
      v67 = *((_DWORD *)v66 + 6);
      if (v67)
      {
        v68 = v66[4];
        v69 = *(_QWORD *)(v68 + 8);
        v70 = *(_QWORD *)(v68 + 16);
        v71 = *(_DWORD *)(v69 + 16);
        v72 = *(_DWORD *)(v69 + 24);
        v73 = *(_DWORD *)(v70 + 16);
        v67 = *(_DWORD *)(v70 + 24);
      }
      else
      {
        v73 = 0;
        v72 = 0;
        v71 = 0;
      }
      v74 = v62 * (v57 - 1);
      v75 = v63 * (v58 - 1);
      if (v320)
      {
        HIDWORD(__p[0]) = v74 - (v72 + v71) + (*(_DWORD *)&v323[4] - 1) * v60 + 1;
        LODWORD(__p[0]) = v75 - (v73 + v67) + (*(_DWORD *)v323 - 1) * v235 + 1;
        goto LABEL_127;
      }
      HIDWORD(__p[0]) = (v71 + v72 + *(_DWORD *)&v323[4] + ~v74) / v60 + 1;
      LODWORD(__p[0]) = (v67 + v73 + *(_DWORD *)v323 + ~v75) / v235 + 1;
      break;
    case 51:
      if (v320)
      {
        HIDWORD(__p[0]) = *(_DWORD *)&v323[4] * v60;
        LODWORD(__p[0]) = *(_DWORD *)v323 * v235;
LABEL_127:
        v65 = 1;
LABEL_128:
        v20 = v59;
        v10 = v237;
        v19 = v238;
        if (v30 && v31 && v65)
          __p[0] = (void *)__PAIR64__(v31, v30);
        goto LABEL_134;
      }
      HIDWORD(__p[0]) = (*(_DWORD *)&v323[4] - 1) / v60 + 1;
      LODWORD(__p[0]) = (*(_DWORD *)v323 - 1) / v235 + 1;
      break;
    case 0:
      v230 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](v230, "Convolution padding type not set");
      __cxa_throw(v230, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    default:
      v65 = v320 != 0;
      goto LABEL_128;
  }
  v20 = v59;
  v10 = v237;
  v19 = v238;
LABEL_134:
  if (*(_DWORD *)&v323[4] == -1)
    HIDWORD(__p[0]) = -1;
  if (*(_DWORD *)v323 == -1)
    LODWORD(__p[0]) = -1;
  v300[0] = *(_OWORD *)__p;
  v300[1] = v306;
  v76 = v308;
  v301 = v307;
  v302 = 0;
  v304 = 0;
  v303 = 0;
  v77 = v309;
  v78 = (v309 - (uint64_t)v308) >> 2;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v302, v308, v309, v78);
  EspressoConverter::validateShape((int *)v300, *((_QWORD *)a2 + 14), (uint64_t)v296);
  if (v302)
  {
    v303 = v302;
    operator delete(v302);
  }
  v328 = v296;
  v79 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v236, v296, &v328);
  v80 = v306;
  *(_OWORD *)(v79 + 56) = *(_OWORD *)__p;
  *(_OWORD *)(v79 + 72) = v80;
  *((_QWORD *)v79 + 11) = v307;
  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v79 + 96, v76, v77, v78);
  if (v76)
    operator delete(v76);
  CoreML::Specification::ConvolutionLayerParams::~ConvolutionLayerParams((CoreML::Specification::ConvolutionLayerParams *)&v311);
  if (v64)
    operator delete(v64);
LABEL_144:
  if (v10 == 48)
  {
    if ((_DWORD)v253)
    {
      v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v82 = std::string::append(&v311, "' with dynamic weight does not support static bias.");
      v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      *(_QWORD *)&v306 = *((_QWORD *)&v82->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v81, (const std::string *)__p);
      __cxa_throw(v81, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    goto LABEL_319;
  }
  if (v284)
    v84 = v284;
  else
    v84 = &CoreML::Specification::_WeightParams_default_instance_;
  WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)v84);
  v86 = v84[5];
  if (*(char *)(v86 + 23) < 0)
    v87 = *(_QWORD *)(v86 + 8);
  else
    v87 = *(unsigned __int8 *)(v86 + 23);
  v88 = v84[6];
  v89 = *(unsigned __int8 *)(v88 + 23);
  if (*(char *)(v88 + 23) < 0)
    v90 = *(_QWORD *)(v88 + 8);
  else
    v90 = *(unsigned __int8 *)(v88 + 23);
  v91 = *((_DWORD *)v84 + 4);
  v92 = v84[7];
  if (*(char *)(v92 + 23) < 0)
    v93 = *(_QWORD *)(v92 + 8);
  else
    v93 = *(unsigned __int8 *)(v92 + 23);
  if (v91 <= 0)
    v94 = 1;
  else
    v94 = 2;
  if (v87)
    v95 = v94;
  else
    v95 = v91 > 0;
  if (v90)
    ++v95;
  if (v93)
    ++v95;
  if (v91 > 0 || v95 != 1)
    goto LABEL_208;
  if ((*(_BYTE *)(v86 + 23) & 0x80) != 0)
  {
    if (!*(_QWORD *)(v86 + 8))
      goto LABEL_178;
LABEL_208:
    v111 = v247;
    (*(void (**)(_BYTE *__return_ptr, _QWORD))(*(_QWORD *)v247 + 472))(v323, v247);
    if (WeightParamSize != v20 * (_DWORD)v19 * HIDWORD(v254) * DWORD2(v254))
    {
      v207 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v208 = std::string::append(&v311, "' , size of weight parameter not equal to the product of kernel sizes, number of kernels and kernel channels");
      v209 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
      *(_QWORD *)&v306 = *((_QWORD *)&v208->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v209;
      v208->__r_.__value_.__l.__size_ = 0;
      v208->__r_.__value_.__r.__words[2] = 0;
      v208->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v207, (const std::string *)__p);
      __cxa_throw(v207, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (v284)
      v112 = v284;
    else
      v112 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(*(_QWORD *)v323 + 24), v112, 4 * WeightParamSize);
    v242 = *(_OWORD *)v323;
    if (*(_QWORD *)&v323[8])
    {
      v113 = (unint64_t *)(*(_QWORD *)&v323[8] + 8);
      do
        v114 = __ldxr(v113);
      while (__stxr(v114 + 1, v113));
    }
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v111 + 400))(v111, &v242);
    v115 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
    if (*((_QWORD *)&v242 + 1))
    {
      v116 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    v118 = *(std::__shared_weak_count **)&v323[8];
    if (*(_QWORD *)&v323[8])
    {
      v119 = (unint64_t *)(*(_QWORD *)&v323[8] + 8);
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    goto LABEL_225;
  }
  if (*(_BYTE *)(v86 + 23))
    goto LABEL_208;
LABEL_178:
  if ((v89 & 0x80) != 0)
    v89 = *(_QWORD *)(v88 + 8);
  if (v84 == &CoreML::Specification::_WeightParams_default_instance_)
    goto LABEL_208;
  if (!v89)
    goto LABEL_208;
  v97 = v84[8];
  if (!v97)
    goto LABEL_208;
  v98 = *(_QWORD *)(v97 + 16);
  WeightParamSizeInBytes = EspressoConverter::getWeightParamSizeInBytes(v84);
  if (!CoreML::hasSufficientBytesInQuantizedWeightParam(v84, WeightParamSize))
  {
    v231 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v232 = std::string::append(&v311, "' has insufficient convolution weights");
    v233 = *(_OWORD *)&v232->__r_.__value_.__l.__data_;
    *(_QWORD *)&v306 = *((_QWORD *)&v232->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v233;
    v232->__r_.__value_.__l.__size_ = 0;
    v232->__r_.__value_.__r.__words[2] = 0;
    v232->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v231, (const std::string *)__p);
    __cxa_throw(v231, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CoreML::copySpecArrayStringToVector(__p, (char *)v88, WeightParamSizeInBytes);
  std::to_string((std::string *)v323, v98);
  v100 = std::string::insert((std::string *)v323, 0, "W_U");
  v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
  v311.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v311.__r_.__value_.__l.__data_ = v101;
  v100->__r_.__value_.__l.__size_ = 0;
  v100->__r_.__value_.__r.__words[2] = 0;
  v100->__r_.__value_.__r.__words[0] = 0;
  if ((v323[23] & 0x80000000) != 0)
    operator delete(*(void **)v323);
  *(_OWORD *)v323 = 0uLL;
  (*(void (**)(_QWORD, _BYTE *, std::string *, void *, _QWORD, _QWORD))(*(_QWORD *)v247 + 168))(v247, v323, &v311, __p[0], WeightParamSizeInBytes, 0);
  v102 = *(std::__shared_weak_count **)&v323[8];
  if (*(_QWORD *)&v323[8])
  {
    v103 = (unint64_t *)(*(_QWORD *)&v323[8] + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if (v284)
    v105 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v284;
  else
    v105 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)&CoreML::Specification::_WeightParams_default_instance_;
  v106 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
  v241 = v247;
  if (*((_QWORD *)&v247 + 1))
  {
    v107 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
  }
  std::string::basic_string[abi:ne180100]<0>(v323, (char *)&unk_19CB39696);
  CoreML::setQuantizationParams(v105, (uint64_t *)&v241, v19, (const void **)v323);
  if ((v323[23] & 0x80000000) != 0)
    operator delete(*(void **)v323);
  if (v106)
  {
    p_shared_owners = (unint64_t *)&v106->__shared_owners_;
    do
      v110 = __ldaxr(p_shared_owners);
    while (__stlxr(v110 - 1, p_shared_owners));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_225:
  if (!(_DWORD)v253)
    goto LABEL_282;
  v121 = v254;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(v323, v254, 1, 1, 1);
  if (v285)
    v122 = v285;
  else
    v122 = &CoreML::Specification::_WeightParams_default_instance_;
  v123 = v122[5];
  if (*(char *)(v123 + 23) < 0)
    v124 = *(_QWORD *)(v123 + 8);
  else
    v124 = *(unsigned __int8 *)(v123 + 23);
  v125 = v122[6];
  v126 = *(unsigned __int8 *)(v125 + 23);
  if (*(char *)(v125 + 23) < 0)
    v127 = *(_QWORD *)(v125 + 8);
  else
    v127 = *(unsigned __int8 *)(v125 + 23);
  v128 = *((_DWORD *)v122 + 4);
  v129 = v122[7];
  if (*(char *)(v129 + 23) < 0)
    v130 = *(_QWORD *)(v129 + 8);
  else
    v130 = *(unsigned __int8 *)(v129 + 23);
  if (v128 <= 0)
    v131 = 1;
  else
    v131 = 2;
  if (v124)
    v132 = v131;
  else
    v132 = v128 > 0;
  if (v127)
    ++v132;
  if (v130)
    ++v132;
  if (v128 > 0 || v132 != 1)
    goto LABEL_267;
  if ((*(_BYTE *)(v123 + 23) & 0x80) != 0)
  {
    if (*(_QWORD *)(v123 + 8))
      goto LABEL_267;
  }
  else if (*(_BYTE *)(v123 + 23))
  {
    goto LABEL_267;
  }
  if ((v126 & 0x80) != 0)
    v126 = *(_QWORD *)(v125 + 8);
  if (v122 != &CoreML::Specification::_WeightParams_default_instance_ && v126 && v122[8] != 0)
  {
    if (!CoreML::hasSufficientBytesInQuantizedWeightParam(v122, v121))
    {
      v234 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v234, (const std::string *)__p);
      __cxa_throw(v234, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    CoreML::dequantizeWeightParamSpec((CoreML *)__p, (const CoreML::Specification::WeightParams *)v122, v121);
    v135 = *(_QWORD *)v323;
    v136 = __p[0];
    memcpy(*(void **)(*(_QWORD *)v323 + 16), __p[0], 4 * v121);
    if (v136)
      operator delete(v136);
    goto LABEL_269;
  }
LABEL_267:
  v137 = EspressoConverter::getWeightParamSize((uint64_t)v122);
  if (v137 != (_DWORD)v254)
  {
    v224 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v225 = std::string::append(&v311, "' , size of bias parameter not equal to the number of output channels");
    v226 = *(_OWORD *)&v225->__r_.__value_.__l.__data_;
    *(_QWORD *)&v306 = *((_QWORD *)&v225->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v226;
    v225->__r_.__value_.__l.__size_ = 0;
    v225->__r_.__value_.__r.__words[2] = 0;
    v225->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v224, (const std::string *)__p);
    __cxa_throw(v224, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v135 = *(_QWORD *)v323;
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(*(_QWORD *)v323 + 16), v122, 4 * v137);
LABEL_269:
  v138 = v247;
  v239 = v135;
  v240 = *(std::__shared_weak_count **)&v323[8];
  if (*(_QWORD *)&v323[8])
  {
    v139 = (unint64_t *)(*(_QWORD *)&v323[8] + 8);
    do
      v140 = __ldxr(v139);
    while (__stxr(v140 + 1, v139));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v138 + 392))(v138, &v239);
  v141 = v240;
  if (v240)
  {
    v142 = (unint64_t *)&v240->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = *(std::__shared_weak_count **)&v323[8];
  if (*(_QWORD *)&v323[8])
  {
    v145 = (unint64_t *)(*(_QWORD *)&v323[8] + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
LABEL_282:
  if (v284)
    v147 = v284;
  else
    v147 = &CoreML::Specification::_WeightParams_default_instance_;
  v148 = v147[5];
  if (*(char *)(v148 + 23) < 0)
    v149 = *(_QWORD *)(v148 + 8);
  else
    v149 = *(unsigned __int8 *)(v148 + 23);
  v150 = v147[6];
  if (*(char *)(v150 + 23) < 0)
    v151 = *(_QWORD *)(v150 + 8);
  else
    v151 = *(unsigned __int8 *)(v150 + 23);
  v152 = *((_DWORD *)v147 + 4);
  v153 = v147[7];
  if (*(char *)(v153 + 23) < 0)
    v154 = *(_QWORD *)(v153 + 8);
  else
    v154 = *(unsigned __int8 *)(v153 + 23);
  if (v152 <= 0)
    v155 = 1;
  else
    v155 = 2;
  if (v149)
    v156 = v155;
  else
    v156 = v152 > 0;
  if (v151)
    ++v156;
  if (v154)
    ++v156;
  if (v152 > 0 || v156 != 1)
    goto LABEL_313;
  if ((*(_BYTE *)(v148 + 23) & 0x80) != 0)
  {
    if (*(_QWORD *)(v148 + 8))
      goto LABEL_311;
  }
  else if (*(_BYTE *)(v148 + 23))
  {
LABEL_311:
    v158 = 1;
    goto LABEL_320;
  }
LABEL_313:
  if (!v290)
  {
LABEL_319:
    v158 = 0;
    goto LABEL_320;
  }
  if (v285)
    v159 = v285;
  else
    v159 = &CoreML::Specification::_WeightParams_default_instance_;
  v160 = v159[5];
  v161 = *(unsigned __int8 *)(v160 + 23);
  if (*(char *)(v160 + 23) < 0)
    v162 = *(_QWORD *)(v160 + 8);
  else
    v162 = *(unsigned __int8 *)(v160 + 23);
  v167 = v159[6];
  if (*(char *)(v167 + 23) < 0)
    v168 = *(_QWORD *)(v167 + 8);
  else
    v168 = *(unsigned __int8 *)(v167 + 23);
  v169 = *((_DWORD *)v159 + 4);
  v170 = v159[7];
  if (*(char *)(v170 + 23) < 0)
    v171 = *(_QWORD *)(v170 + 8);
  else
    v171 = *(unsigned __int8 *)(v170 + 23);
  v158 = 0;
  if (v169 <= 0)
    v172 = 1;
  else
    v172 = 2;
  if (v162)
    v173 = v172;
  else
    v173 = v169 > 0;
  if (v168)
    ++v173;
  if (v171)
    ++v173;
  if (v169 <= 0 && v173 == 1)
  {
    if ((v161 & 0x80) != 0)
      v161 = *(_QWORD *)(v160 + 8);
    v158 = v161 != 0;
  }
LABEL_320:
  v163 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
  if (*((_QWORD *)&v247 + 1))
  {
    v164 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  if (v251[0])
    operator delete(v251[0]);
  CoreML::Specification::ConvolutionLayerParams::~ConvolutionLayerParams((CoreML::Specification::ConvolutionLayerParams *)v275);
  __p[0] = &v293;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v296;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v299.__r_.__value_.__l.__data_);
  return v158;
}

void sub_19C988CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *v63;
  int v64;
  uint64_t v65;
  void *v67;

  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
    operator delete((void *)STACK[0x2B0]);
    if ((v64 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x2F0]);
      CoreML::Specification::ConvolutionLayerParams::~ConvolutionLayerParams((CoreML::Specification::ConvolutionLayerParams *)&STACK[0x410]);
      v67 = *(void **)(v65 - 136);
      if (v67)
        operator delete(v67);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
      if (a38)
        operator delete(a38);
      CoreML::Specification::ConvolutionLayerParams::~ConvolutionLayerParams((CoreML::Specification::ConvolutionLayerParams *)&a63);
      STACK[0x2F0] = (unint64_t)&STACK[0x260];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
      STACK[0x2F0] = (unint64_t)&STACK[0x278];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
      if (SLOBYTE(STACK[0x2A7]) < 0)
        operator delete((void *)STACK[0x290]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v64)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v63);
  goto LABEL_6;
}

void sub_19C98916C()
{
  JUMPOUT(0x19C989124);
}

void Espresso::sequential_builder::add<Espresso::convolution_uniforms>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C98936C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addPermute(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::PermuteLayerParams *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int64x2_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v16;
  const CoreML::Specification::PermuteLayerParams *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t i;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  int *v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void *exception;
  uint64_t **v49;
  uint64_t v50;
  std::string v51;
  std::string v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  __int128 v55;
  int v56;
  _BYTE v57[16];
  int v58;
  uint64_t v59;
  __int128 *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 *v63;
  __int128 *v64;
  uint64_t v65;
  std::string v66;
  std::string *v67;
  int v68;
  int v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _BYTE v74[24];
  _QWORD *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  void *v79[4];
  __int128 *v80;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v66.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v5;
  }
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v63, (uint64_t *)&v60, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 310)
  {
    v7 = (const CoreML::Specification::PermuteLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::PermuteLayerParams *)&CoreML::Specification::_PermuteLayerParams_default_instance_;
  }
  CoreML::Specification::PermuteLayerParams::PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)v57, v7);
  v55 = xmmword_19CB399C0;
  v56 = 4;
  if (v58 != 4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Permute Layer: axis parameter must of length 4");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = *(_QWORD *)(v59 + 8);
  v9 = *(_QWORD *)(v59 + 16);
  if (v8)
    v10 = 3 - v8;
  else
    v10 = 4;
  if (v9)
    v11 = 3 - v9;
  else
    v11 = 4;
  v56 = v10;
  *((_QWORD *)&v55 + 1) = v11 | 0x300000000;
  v12 = (int64x2_t)vextq_s8(*(int8x16_t *)(v59 + 24), *(int8x16_t *)(v59 + 24), 8uLL);
  *(int8x8_t *)&v55 = vbsl_s8((int8x8_t)vmovn_s64(vceqzq_s64(v12)), (int8x8_t)0x400000004, (int8x8_t)vsub_s32((int32x2_t)0x300000003, vmovn_s64(v12)));
  v13 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v76, "transpose");
  memset(&v52, 0, sizeof(v52));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v52, v60, v61, 0xAAAAAAAAAAAAAAABLL * (((char *)v61 - (char *)v60) >> 3));
  memset(&v51, 0, sizeof(v51));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v51, v63, v64, 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - (char *)v63) >> 3));
  Espresso::sequential_builder::add<Espresso::transpose_params_t>(&v53, v13, (uint64_t)&v76, (uint64_t)&v66, (uint64_t)&v55, (__int128 *)v52.__r_.__value_.__l.__data_, (__int128 *)v52.__r_.__value_.__l.__size_, (__int128 **)&v51);
  v67 = &v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  v67 = &v52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  if (SBYTE7(v77) < 0)
    operator delete((void *)v76);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v63);
  }
  else
  {
    v14 = *((_QWORD *)this + 1);
    v15 = std::map<std::string,std::string>::at(v14, v60);
    v76 = *(_OWORD *)v15;
    v77 = *(_OWORD *)(v15 + 16);
    v78 = *(_QWORD *)(v15 + 32);
    memset(v79, 0, 24);
    v16 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v79, *(const void **)(v15 + 40), *(_QWORD *)(v15 + 48), (uint64_t)(*(_QWORD *)(v15 + 48)- *(_QWORD *)(v15 + 40)) >> 2);
    if (*((_DWORD *)a2 + 35) == 310)
    {
      v17 = (const CoreML::Specification::PermuteLayerParams *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v16);
      v17 = (const CoreML::Specification::PermuteLayerParams *)&CoreML::Specification::_PermuteLayerParams_default_instance_;
    }
    CoreML::Specification::PermuteLayerParams::PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)v74, v17);
    v18 = v75[2];
    v19 = v75[3];
    v20 = v75[4];
    v21 = operator new(4uLL);
    v49 = (uint64_t **)v14;
    v50 = v20;
    *v21 = v77;
    v22 = operator new(8uLL);
    v23 = DWORD2(v76);
    *v22 = *v21;
    v22[1] = v23;
    operator delete(v21);
    v24 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(4uLL);
    v25 = v24;
    v27 = v26;
    v28 = (char *)&v24[v26];
    v24[2] = DWORD1(v76);
    v29 = 2;
    for (i = 1; i != -1; --i)
    {
      --v29;
      v24[i] = v22[i];
    }
    v31 = (char *)&v24[v29];
    operator delete(v22);
    if (v27 < 4)
    {
      v33 = (12 - 4 * v29) >> 2;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 62)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      if ((v28 - v31) >> 1 > v34)
        v34 = (v28 - v31) >> 1;
      if ((unint64_t)(v28 - v31) >= 0x7FFFFFFFFFFFFFFCLL)
        v35 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v35 = v34;
      if (v35)
        v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v35);
      v36 = (char *)(v35 + 4 * v33);
      *(_DWORD *)v36 = v76;
      if (v29 == 3)
      {
        v32 = v50;
      }
      else
      {
        v37 = -12;
        v38 = v25 + 2;
        v32 = v50;
        do
        {
          v39 = *v38--;
          *((_DWORD *)v36 - 1) = v39;
          v36 -= 4;
          v37 += 4;
        }
        while (v37);
      }
      operator delete(&v25[v29]);
      v31 = v36;
    }
    else
    {
      v25[3] = v76;
      v32 = v50;
    }
    v40 = HIDWORD(v76);
    v41 = *(_DWORD *)&v31[4 * v18];
    v42 = *(_DWORD *)&v31[4 * v19];
    v43 = *(_DWORD *)&v31[4 * v32];
    v67 = (std::string *)__PAIR64__(v42, v43);
    v68 = v41;
    v69 = HIDWORD(v76);
    v70 = -1;
    v71 = 0u;
    v72 = 0u;
    v73 = 0;
    EspressoConverter::validateShape((int *)&v67, *((_QWORD *)a2 + 14), (uint64_t)v63);
    v80 = v63;
    v44 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v49, v63, &v80);
    *((_DWORD *)v44 + 14) = v43;
    *((_DWORD *)v44 + 15) = v42;
    *((_DWORD *)v44 + 16) = v41;
    *((_DWORD *)v44 + 17) = v40;
    *((_QWORD *)v44 + 9) = -1;
    *((_QWORD *)v44 + 10) = 0;
    *((_QWORD *)v44 + 11) = 0;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v44 + 96, 0, 0, 0);
    operator delete(v31);
    CoreML::Specification::PermuteLayerParams::~PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)v74);
    if (v79[0])
      operator delete(v79[0]);
  }
  v45 = v54;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  CoreML::Specification::PermuteLayerParams::~PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)v57);
  *(_QWORD *)&v76 = &v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
  *(_QWORD *)&v76 = &v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
}

void sub_19C9898D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39)
{
  void *v39;
  uint64_t v40;
  void *v42;

  if (v39)
    operator delete(v39);
  CoreML::Specification::PermuteLayerParams::~PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)(v40 - 216));
  v42 = *(void **)(v40 - 136);
  if (v42)
    operator delete(v42);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  CoreML::Specification::PermuteLayerParams::~PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)&a22);
  *(_QWORD *)(v40 - 216) = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 216));
  *(_QWORD *)(v40 - 216) = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 216));
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void LayerTranslator::addCropResize(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::CropResizeLayerParams *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  void *v13;
  uint64_t *v14;
  unsigned int v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  __int128 v29;
  std::runtime_error *exception;
  std::string *v31;
  __int128 v32;
  std::string v33;
  std::string v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  char v38;
  int v39;
  unsigned int v40;
  int v41;
  char v42;
  int v43;
  __int128 v44;
  __int128 v45;
  int v46;
  char v47;
  _BYTE v48[16];
  int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  char v53;
  int v54;
  __int128 *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 *v58;
  __int128 *v59;
  uint64_t v60;
  std::string v61;
  _OWORD v62[2];
  uint64_t v63;
  void *__p[3];
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[32];
  uint64_t v72;
  void *v73[3];
  _BYTE v74[32];
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v61.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v5;
  }
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v58, (uint64_t *)&v55, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 212)
  {
    v7 = (const CoreML::Specification::CropResizeLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::CropResizeLayerParams *)&CoreML::Specification::_CropResizeLayerParams_default_instance_;
  }
  CoreML::Specification::CropResizeLayerParams::CropResizeLayerParams((CoreML::Specification::CropResizeLayerParams *)v48, v7);
  v39 = 0;
  v40 = 0;
  v37 = 0uLL;
  v38 = 0;
  v41 = 1065353216;
  v42 = 0;
  v43 = 2;
  v44 = 0u;
  v45 = 0u;
  LODWORD(v8) = 1;
  v46 = 1;
  v47 = 0;
  if (v49)
  {
    if (v49 != 2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v31 = std::string::append((std::string *)v71, " , target size must be of length 2, if set");
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      *(_QWORD *)&v74[16] = *((_QWORD *)&v31->__r_.__value_.__l + 2);
      *(_OWORD *)v74 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)v74);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v9 = *(_QWORD *)(v50 + 8);
    v8 = *(_QWORD *)(v50 + 16);
    if (!v9)
      LODWORD(v9) = 1;
    DWORD2(v37) = v9;
    if (!v8)
      LODWORD(v8) = 1;
  }
  else
  {
    DWORD2(v37) = 1;
  }
  DWORD1(v37) = v8;
  v41 = v54;
  v38 = v53;
  v10 = v51;
  if (!v51)
    v10 = &CoreML::Specification::_SamplingMode_default_instance_;
  v11 = *((_DWORD *)v10 + 4);
  v12 = 0;
  switch(v11)
  {
    case 0:
      v12 = 1;
      goto LABEL_22;
    case 1:
      goto LABEL_22;
    case 2:
    case 3:
      v12 = v11;
LABEL_22:
      v39 = v12;
      goto LABEL_23;
    default:
      if (v11 == 0x80000000 || v11 == 0x7FFFFFFF)
      {
        v13 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v13, "Sampling mode not set in crop resize layer.");
        goto LABEL_50;
      }
LABEL_23:
      v14 = v52;
      if (!v52)
        v14 = &CoreML::Specification::_BoxCoordinatesMode_default_instance_;
      v15 = *((_DWORD *)v14 + 4);
      if (v15 >= 4)
      {
        if (v15 == 0x7FFFFFFF || v15 == 0x80000000)
        {
          v13 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1A1AD5E28](v13, "Box coordinates mode not set in crop resize layer.");
LABEL_50:
          __cxa_throw(v13, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
      }
      else
      {
        v40 = v15;
      }
      v16 = *(_QWORD **)this;
      std::string::basic_string[abi:ne180100]<0>(v74, "crop_and_resize");
      memset(&v34, 0, sizeof(v34));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v34, v55, v56, 0xAAAAAAAAAAAAAAABLL * (((char *)v56 - (char *)v55) >> 3));
      memset(&v33, 0, sizeof(v33));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v33, v58, v59, 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (char *)v58) >> 3));
      Espresso::sequential_builder::add<Espresso::crop_and_resize_params_t>(&v35, v16, (uint64_t)v74, (uint64_t)&v61, (uint64_t)&v37, (__int128 *)v34.__r_.__value_.__l.__data_, (__int128 *)v34.__r_.__value_.__l.__size_, (__int128 **)&v33);
      v17 = v36;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      *(_QWORD *)v71 = &v33;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      *(_QWORD *)v71 = &v34;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      if ((v74[23] & 0x80000000) != 0)
        operator delete(*(void **)v74);
      if (**((_BYTE **)this + 2))
      {
        LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v58);
      }
      else
      {
        v20 = (uint64_t **)*((_QWORD *)this + 1);
        v21 = *(_QWORD *)((char *)&v37 + 4);
        v22 = std::map<std::string,std::string>::at((uint64_t)v20, v55);
        *(_OWORD *)v74 = *(_OWORD *)v22;
        *(_OWORD *)&v74[16] = *(_OWORD *)(v22 + 16);
        v75 = *(_QWORD *)(v22 + 32);
        v76 = 0;
        v77 = 0;
        v78 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v76, *(const void **)(v22 + 40), *(_QWORD *)(v22 + 48), (uint64_t)(*(_QWORD *)(v22 + 48) - *(_QWORD *)(v22 + 40)) >> 2);
        v23 = std::map<std::string,std::string>::at((uint64_t)v20, (_QWORD *)v55 + 3);
        *(_OWORD *)v71 = *(_OWORD *)v23;
        *(_OWORD *)&v71[16] = *(_OWORD *)(v23 + 16);
        v72 = *(_QWORD *)(v23 + 32);
        memset(v73, 0, sizeof(v73));
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v73, *(const void **)(v23 + 40), *(_QWORD *)(v23 + 48), (uint64_t)(*(_QWORD *)(v23 + 48) - *(_QWORD *)(v23 + 40)) >> 2);
        v65 = *(_OWORD *)v74;
        v66 = *(_OWORD *)&v74[16];
        v24 = v76;
        v67 = v75;
        v68 = 0;
        v69 = 0;
        v70 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v68, v76, v77, (v77 - (uint64_t)v76) >> 2);
        *(_QWORD *)&v65 = v21;
        LODWORD(v66) = *(_DWORD *)&v71[16];
        v62[0] = v65;
        v62[1] = v66;
        v25 = v68;
        v63 = v67;
        memset(__p, 0, sizeof(__p));
        v26 = v69;
        v27 = (v69 - (uint64_t)v68) >> 2;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v68, v69, v27);
        EspressoConverter::validateShape((int *)v62, *((_QWORD *)a2 + 14), (uint64_t)v58);
        if (__p[0])
          operator delete(__p[0]);
        v79 = v58;
        v28 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, v58, &v79);
        v29 = v66;
        *(_OWORD *)(v28 + 56) = v65;
        *(_OWORD *)(v28 + 72) = v29;
        *((_QWORD *)v28 + 11) = v67;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v28 + 96, v25, v26, v27);
        if (v25)
          operator delete(v25);
        if (v73[0])
          operator delete(v73[0]);
        if (v24)
          operator delete(v24);
      }
      CoreML::Specification::CropResizeLayerParams::~CropResizeLayerParams((CoreML::Specification::CropResizeLayerParams *)v48);
      *(_QWORD *)&v37 = &v55;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
      *(_QWORD *)&v37 = &v58;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      return;
  }
}

void sub_19C989F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55)
{
  void *v55;
  int v56;
  uint64_t v57;

  if (*(char *)(v57 - 137) < 0)
    operator delete(*(void **)(v57 - 160));
  if (*(char *)(v57 - 201) < 0)
  {
    operator delete(*(void **)(v57 - 224));
    if ((v56 & 1) == 0)
    {
LABEL_8:
      CoreML::Specification::CropResizeLayerParams::~CropResizeLayerParams((CoreML::Specification::CropResizeLayerParams *)&a28);
      a18 = &a37;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      a18 = &a40;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      if (a48 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v56)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v55);
  goto LABEL_8;
}

void LayerTranslator::addExpandDims(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  unint64_t *inited;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string v22;
  std::string v23;
  void *__p;
  char v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  _OWORD v28[8];
  uint64_t v29;
  __int128 *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 *v33;
  __int128 *v34;
  uint64_t v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::string *v43;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v36.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v5;
  }
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v33, (uint64_t *)&v30, *((_QWORD *)this + 1));
  v29 = 0;
  memset(v28, 0, sizeof(v28));
  if (*((_DWORD *)a2 + 35) == 1125)
  {
    v7 = a2[16];
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    v7 = &CoreML::Specification::_ExpandDimsLayerParams_default_instance_;
  }
  v8 = *((_DWORD *)v7 + 4);
  if (v8 >= 32)
    v9 = 32;
  else
    v9 = *((_DWORD *)v7 + 4);
  DWORD1(v28[0]) = v9;
  if (v8 >= 1)
  {
    v10 = 0;
    if (v9 <= 1)
      v11 = 1;
    else
      v11 = v9;
    do
    {
      if (*((_DWORD *)a2 + 35) == 1125)
      {
        v12 = a2[16];
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v12 = &CoreML::Specification::_ExpandDimsLayerParams_default_instance_;
      }
      *((_DWORD *)v28 + v10 + 2) = *(_QWORD *)(v12[3] + 8 * v10 + 8);
      ++v10;
    }
    while (v11 != v10);
  }
  v13 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "expand_dims");
  memset(&v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  memset(&v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
  memset(&v38, 0, sizeof(v38));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, (__int128 *)v23.__r_.__value_.__l.__data_, (__int128 *)v23.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23.__r_.__value_.__l.__size_ - v23.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v37, 0, sizeof(v37));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v37, (__int128 *)v22.__r_.__value_.__l.__data_, (__int128 *)v22.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22.__r_.__value_.__l.__size_ - v22.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v40.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v13[14] + 8))(*(_QWORD *)(v13[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v41 = v26;
  v42 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(&v40, 0, sizeof(v40));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v40, (__int128 *)v38.__r_.__value_.__l.__data_, (__int128 *)v38.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38.__r_.__value_.__l.__size_ - v38.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v39, 0, sizeof(v39));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v39, (__int128 *)v37.__r_.__value_.__l.__data_, (__int128 *)v37.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v43 = &v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  v43 = &v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  v16 = v42;
  if (v42)
  {
    v17 = (unint64_t *)&v42->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (*v13)
    Espresso::sequential_builder::add_shape_from_kernel();
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v19 = v27;
  if (v27)
  {
    v20 = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (v25 < 0)
    operator delete(__p);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v33);
  *(_QWORD *)&v28[0] = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
  *(_QWORD *)&v28[0] = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void sub_19C98A478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  *(_QWORD *)(v42 - 72) = v42 - 184;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 72));
  *(_QWORD *)(v42 - 72) = v42 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 72));
  *(_QWORD *)(v42 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 72));
  *(_QWORD *)(v42 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 72));
  if (a21 < 0)
    operator delete(__p);
  a24 = &a42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = (char *)(v42 - 232);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (*(char *)(v42 - 185) < 0)
    operator delete(*(void **)(v42 - 208));
  _Unwind_Resume(a1);
}

void LayerTranslator::addPadding(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::PaddingLayerParams *v7;
  uint64_t *v8;
  __int16 v9;
  int16x4_t v10;
  _QWORD *v11;
  uint64_t **v12;
  uint64_t v13;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v14;
  const CoreML::Specification::PaddingLayerParams *v15;
  void *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::runtime_error *exception;
  std::string *v33;
  __int128 v34;
  std::runtime_error *v35;
  std::string v36;
  std::string v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  _BYTE v40[32];
  __int128 v41;
  _DWORD v42[7];
  _BYTE v43[16];
  uint64_t *v44;
  uint64_t v45;
  int v46;
  __int128 *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 *v50;
  __int128 *v51;
  uint64_t v52;
  std::string v53;
  _OWORD v54[2];
  uint64_t v55;
  void *__p;
  void *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[16];
  uint64_t *v66;
  _BYTE v67[32];
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  __int128 *v72;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v53.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v5;
  }
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v50, (uint64_t *)&v47, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 200)
  {
    v7 = (const CoreML::Specification::PaddingLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::PaddingLayerParams *)&CoreML::Specification::_PaddingLayerParams_default_instance_;
  }
  CoreML::Specification::PaddingLayerParams::PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)v43, v7);
  v8 = v44;
  if (!v44)
    v8 = &CoreML::Specification::_BorderAmounts_default_instance_;
  if ((*((_DWORD *)v8 + 6) | 2) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v33 = std::string::append((std::string *)v67, " , pad amounts must be specified for both height and width, if set");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    *(_QWORD *)&v40[16] = *((_QWORD *)&v33->__r_.__value_.__l + 2);
    *(_OWORD *)v40 = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v40);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v41 = 0u;
  memset(v42, 0, sizeof(v42));
  memset(v40, 0, sizeof(v40));
  switch(v46)
  {
    case 0:
      v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(v67, "Padding Type not set");
      std::runtime_error::runtime_error(v35, (const std::string *)v67);
      __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    case 1:
      *(_DWORD *)&v40[4] = *(_DWORD *)(v45 + 16);
      break;
    case 2:
      v9 = 2;
      goto LABEL_14;
    case 3:
      v9 = 1;
LABEL_14:
      *(_WORD *)&v40[2] = v9;
      break;
    default:
      break;
  }
  if (*((_DWORD *)v8 + 6))
    v10 = vmovn_s32(vuzp1q_s32(*(int32x4_t *)(*(_QWORD *)(v8[4] + 16) + 16), *(int32x4_t *)(*(_QWORD *)(v8[4] + 8)
                                                                                            + 16)));
  else
    v10 = 0;
  *(int16x4_t *)&v40[8] = v10;
  v11 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(v67, "general_padding");
  memset(&v37, 0, sizeof(v37));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v37, v47, v48, 0xAAAAAAAAAAAAAAABLL * (((char *)v48 - (char *)v47) >> 3));
  memset(&v36, 0, sizeof(v36));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v36, v50, v51, 0xAAAAAAAAAAAAAAABLL * (((char *)v51 - (char *)v50) >> 3));
  Espresso::sequential_builder::add<Espresso::general_padding_params>(&v38, v11, (uint64_t)v67, (uint64_t)&v53, (uint64_t)v40, (__int128 *)v37.__r_.__value_.__l.__data_, (__int128 *)v37.__r_.__value_.__l.__size_, (__int128 **)&v36);
  *(_QWORD *)&v59 = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
  *(_QWORD *)&v59 = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
  if ((v67[23] & 0x80000000) != 0)
    operator delete(*(void **)v67);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v50);
  }
  else
  {
    v12 = (uint64_t **)*((_QWORD *)this + 1);
    v13 = std::map<std::string,std::string>::at((uint64_t)v12, v47);
    *(_OWORD *)v67 = *(_OWORD *)v13;
    *(_OWORD *)&v67[16] = *(_OWORD *)(v13 + 16);
    v68 = *(_QWORD *)(v13 + 32);
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v14 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v69, *(const void **)(v13 + 40), *(_QWORD *)(v13 + 48), (uint64_t)(*(_QWORD *)(v13 + 48)- *(_QWORD *)(v13 + 40)) >> 2);
    if (*((_DWORD *)a2 + 35) == 200)
    {
      v15 = (const CoreML::Specification::PaddingLayerParams *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v14);
      v15 = (const CoreML::Specification::PaddingLayerParams *)&CoreML::Specification::_PaddingLayerParams_default_instance_;
    }
    CoreML::Specification::PaddingLayerParams::PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)v65, v15);
    v59 = *(_OWORD *)v67;
    v60 = *(_OWORD *)&v67[16];
    v16 = v69;
    v61 = v68;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v62, v69, v70, (v70 - (uint64_t)v69) >> 2);
    v17 = v66;
    if (!v66)
      v17 = &CoreML::Specification::_BorderAmounts_default_instance_;
    v18 = *((_DWORD *)v17 + 6);
    if (v18)
    {
      v19 = v17[4];
      v21 = *(_QWORD *)(v19 + 8);
      v20 = *(_QWORD *)(v19 + 16);
      v22 = *(_DWORD *)(v20 + 16);
      v23 = *(_DWORD *)(v20 + 24);
      v24 = *(_DWORD *)(v21 + 24) + *(_DWORD *)(v21 + 16);
      v18 = v23 + v22;
    }
    else
    {
      v24 = 0;
    }
    LODWORD(v59) = *(_DWORD *)v67 + v18;
    DWORD1(v59) = *(_DWORD *)&v67[4] + v24;
    if (*(_DWORD *)&v67[4] == -1)
      DWORD1(v59) = -1;
    if (*(_DWORD *)v67 == -1)
      LODWORD(v59) = -1;
    v54[0] = v59;
    v54[1] = v60;
    v25 = v62;
    v55 = v61;
    __p = 0;
    v57 = 0;
    v58 = 0;
    v26 = v63;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v62, v63, (v63 - (uint64_t)v62) >> 2);
    EspressoConverter::validateShape((int *)v54, *((_QWORD *)a2 + 14), (uint64_t)v50);
    if (__p)
    {
      v57 = __p;
      operator delete(__p);
    }
    v72 = v50;
    v27 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, v50, &v72);
    v28 = v60;
    *(_OWORD *)(v27 + 56) = v59;
    *(_OWORD *)(v27 + 72) = v28;
    *((_QWORD *)v27 + 11) = v61;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v27 + 96, v25, v26, (v26 - (uint64_t)v25) >> 2);
    if (v25)
      operator delete(v25);
    CoreML::Specification::PaddingLayerParams::~PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)v65);
    if (v16)
      operator delete(v16);
  }
  v29 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  CoreML::Specification::PaddingLayerParams::~PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)v43);
  *(_QWORD *)v40 = &v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  *(_QWORD *)v40 = &v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
}

void sub_19C98AAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  void *v54;
  int v55;
  uint64_t v56;

  if (a22 < 0)
    operator delete(__p);
  if (*(char *)(v56 - 121) < 0)
  {
    operator delete(*(void **)(v56 - 144));
    if ((v55 & 1) == 0)
    {
LABEL_8:
      CoreML::Specification::PaddingLayerParams::~PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)&a31);
      __p = &a36;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p = &a39;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (a47 < 0)
        operator delete(a42);
      _Unwind_Resume(a1);
    }
  }
  else if (!v55)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v54);
  goto LABEL_8;
}

std::string *LayerTranslator::layerTranslateFn(LayerTranslator *this, const std::string **a2)
{
  std::string *result;
  const CoreML::Specification::NeuralNetworkLayer *v5;
  int v6;
  uint64_t v7;
  const std::string *v8;
  __int128 v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  const std::string *v15;
  __int128 v16;
  int v17;
  int v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::string::size_type v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t **v26;
  char *v27;
  void *v28;
  int v29;
  __int128 v30;
  std::string::size_type size;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  _QWORD *v38;
  _OWORD *v39;
  __int128 v40;
  std::string::size_type v41;
  unint64_t *v42;
  unint64_t v43;
  std::string::size_type v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void **v63;
  uint64_t **v64;
  _QWORD *v65;
  std::string::size_type v66;
  __int128 *v67;
  std::string::size_type v68;
  int *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  __int128 v73;
  uint64_t v74;
  std::runtime_error *exception;
  std::string v76;
  unsigned __int128 v77;
  std::string *v78;
  std::string *v79;
  std::string *v80;
  __int128 v81;
  std::string v82;
  std::string v83;
  char v84;
  uint64_t v85;
  std::string v86;
  std::string v87;
  std::string v88;
  __int128 __p;
  __int128 v90;
  std::string::size_type v91;
  void *v92[3];
  __int128 v93;
  std::string v94;
  __int128 v95;
  uint64_t v96;
  std::string v97;
  __int128 *v98;
  std::string v99;
  __int128 v100;

  *(_QWORD *)&v100 = *MEMORY[0x1E0C80C00];
  result = std::string::operator=((std::string *)(*(_QWORD *)this + 56), a2[14]);
  v6 = *((_DWORD *)a2 + 35);
  if (v6 > 879)
  {
    if (v6 > 1139)
    {
      if (v6 <= 1274)
      {
        if (v6 <= 1199)
        {
          if (v6 <= 1169)
          {
            if (v6 > 1149)
            {
              if (v6 == 1150)
              {
                LayerTranslator::addRankPreservingReshape(this, (uint64_t **)a2);
              }
              else
              {
                if (v6 != 1155)
                  goto LABEL_486;
                LayerTranslator::addConstantPad(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              }
            }
            else if (v6 == 1140)
            {
              LayerTranslator::addReshapeStatic(this, (uint64_t **)a2);
            }
            else
            {
              if (v6 != 1145)
                goto LABEL_486;
              LayerTranslator::addReshapeDynamic(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            }
          }
          else if (v6 <= 1179)
          {
            if (v6 == 1170)
            {
              LayerTranslator::addRandomNormalLike(this, (uint64_t **)a2);
            }
            else
            {
              if (v6 != 1175)
                goto LABEL_486;
              LayerTranslator::addRandomNormalStatic(this, (uint64_t **)a2);
            }
          }
          else
          {
            switch(v6)
            {
              case 1180:
                LayerTranslator::addRandomNormalDynamic(this, (uint64_t **)a2);
                break;
              case 1190:
                LayerTranslator::addRandomUniformLike(this, (uint64_t **)a2);
                break;
              case 1195:
                LayerTranslator::addRandomUniformStatic(this, (uint64_t **)a2);
                break;
              default:
                goto LABEL_486;
            }
          }
        }
        else if (v6 > 1249)
        {
          if (v6 <= 1259)
          {
            if (v6 == 1250)
            {
              LayerTranslator::addReduceL1(this, (uint64_t **)a2);
            }
            else
            {
              if (v6 != 1255)
                goto LABEL_486;
              LayerTranslator::addReduceL2(this, (uint64_t **)a2);
            }
          }
          else
          {
            switch(v6)
            {
              case 1260:
                LayerTranslator::addReduceMax(this, (uint64_t **)a2);
                break;
              case 1265:
                LayerTranslator::addReduceMin(this, (uint64_t **)a2);
                break;
              case 1270:
                LayerTranslator::addReduceSum(this, (uint64_t **)a2);
                break;
              default:
                goto LABEL_486;
            }
          }
        }
        else if (v6 <= 1214)
        {
          if (v6 == 1200)
          {
            LayerTranslator::addRandomUniformDynamic(this, (uint64_t **)a2);
          }
          else
          {
            if (v6 != 1210)
              goto LABEL_486;
            LayerTranslator::addRandomBernoulliLike(this, (uint64_t **)a2);
          }
        }
        else
        {
          switch(v6)
          {
            case 1215:
              LayerTranslator::addRandomBernoulliStatic(this, (uint64_t **)a2);
              break;
            case 1220:
              LayerTranslator::addRandomBernoulliDynamic(this, (uint64_t **)a2);
              break;
            case 1230:
              LayerTranslator::addCategoricalDistribution(this, (uint64_t **)a2);
              break;
            default:
              goto LABEL_486;
          }
        }
        goto LABEL_485;
      }
      if (v6 <= 1349)
      {
        if (v6 > 1312)
        {
          if (v6 <= 1319)
          {
            if (v6 == 1313)
            {
              LayerTranslator::addWhereNonZero(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            }
            else
            {
              if (v6 != 1315)
                goto LABEL_486;
              LayerTranslator::addMatrixBandPart(this, (uint64_t **)a2);
            }
          }
          else
          {
            switch(v6)
            {
              case 1320:
                LayerTranslator::addLowerTriangular(this, (uint64_t **)a2);
                break;
              case 1325:
                LayerTranslator::addUpperTriangular(this, (uint64_t **)a2);
                break;
              case 1330:
                LayerTranslator::addWhere(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
                break;
              default:
                goto LABEL_486;
            }
          }
        }
        else if (v6 <= 1284)
        {
          if (v6 == 1275)
          {
            LayerTranslator::addReduceProd(this, (uint64_t **)a2);
          }
          else
          {
            if (v6 != 1280)
              goto LABEL_486;
            LayerTranslator::addReduceMean(this, (uint64_t **)a2);
          }
        }
        else
        {
          switch(v6)
          {
            case 1285:
              LayerTranslator::addReduceLogSum(this, (uint64_t **)a2);
              break;
            case 1290:
              LayerTranslator::addReduceSumSquare(this, (uint64_t **)a2);
              break;
            case 1295:
              LayerTranslator::addReduceLogSumExp(this, (uint64_t **)a2);
              break;
            default:
              goto LABEL_486;
          }
        }
        goto LABEL_485;
      }
      if (v6 <= 1454)
      {
        switch(v6)
        {
          case 1350:
            LayerTranslator::addLayerNormalization(this, (uint64_t **)a2);
            break;
          case 1400:
            LayerTranslator::addNMS(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          case 1450:
            LayerTranslator::addOneHot(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          default:
            goto LABEL_486;
        }
        goto LABEL_485;
      }
      switch(v6)
      {
        case 1455:
          LayerTranslator::addCumSum(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
          goto LABEL_485;
        case 1460:
          LayerTranslator::addClampedRelu(this, (uint64_t **)a2);
          goto LABEL_485;
        case 1461:
          LayerTranslator::addArgsort(this, (uint64_t **)a2);
          goto LABEL_485;
        case 1465:
          LayerTranslator::addPooling3d(this, (const CoreML::Specification::Pooling3DLayerParams **)a2);
          goto LABEL_485;
        case 1466:
          LayerTranslator::addGlobalPooling3d(this, (uint64_t **)a2);
          goto LABEL_485;
        case 1470:
          LayerTranslator::addSliceBySize(this, (uint64_t **)a2);
          goto LABEL_485;
        case 1471:
          result = (std::string *)LayerTranslator::addConvolution3D(this, (uint64_t **)a2);
          break;
        default:
          goto LABEL_486;
      }
      goto LABEL_486;
    }
    if (v6 <= 994)
    {
      if (v6 > 939)
      {
        if (v6 > 959)
        {
          if (v6 <= 974)
          {
            if (v6 == 960)
            {
              LayerTranslator::addReverse(this, (uint64_t **)a2);
            }
            else
            {
              if (v6 != 965)
                goto LABEL_486;
              LayerTranslator::addReverseSeq(this, (uint64_t **)a2);
            }
          }
          else
          {
            switch(v6)
            {
              case 975:
                LayerTranslator::addSplitND(this, (uint64_t **)a2);
                break;
              case 980:
                LayerTranslator::addConcatND(this, (uint64_t **)a2);
                break;
              case 985:
                LayerTranslator::addTranspose(this, (uint64_t **)a2);
                break;
              default:
                goto LABEL_486;
            }
          }
        }
        else
        {
          switch(v6)
          {
            case 945:
              LayerTranslator::addScatterND(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              goto LABEL_485;
            case 946:
            case 947:
            case 948:
            case 949:
            case 951:
            case 953:
              goto LABEL_486;
            case 950:
              LayerTranslator::addSoftmaxND(this, (uint64_t **)a2);
              goto LABEL_485;
            case 952:
              LayerTranslator::addGatherAlongAxis(this, (uint64_t **)a2);
              goto LABEL_485;
            case 954:
              LayerTranslator::addScatterAlongAxis(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              goto LABEL_485;
            default:
              if (v6 != 940)
                goto LABEL_486;
              LayerTranslator::addGatherND(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
          }
        }
      }
      else if (v6 > 904)
      {
        if (v6 <= 924)
        {
          if (v6 == 905)
          {
            LayerTranslator::addSubtractBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
          }
          else
          {
            if (v6 != 920)
              goto LABEL_486;
            LayerTranslator::addTile(this, (uint64_t **)a2);
          }
        }
        else
        {
          switch(v6)
          {
            case 925:
              LayerTranslator::addStack(this, (uint64_t **)a2);
              break;
            case 930:
              LayerTranslator::addGather(this, (uint64_t **)a2);
              break;
            case 935:
              LayerTranslator::addScatter(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            default:
              goto LABEL_486;
          }
        }
      }
      else if (v6 <= 889)
      {
        if (v6 == 880)
        {
          LayerTranslator::addAddBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        else
        {
          if (v6 != 885)
            goto LABEL_486;
          LayerTranslator::addPowBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
      }
      else
      {
        switch(v6)
        {
          case 890:
            LayerTranslator::addDivideBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          case 895:
            LayerTranslator::addFloorDivBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          case 900:
            LayerTranslator::addMultiplyBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          default:
            goto LABEL_486;
        }
      }
      goto LABEL_485;
    }
    if (v6 > 1079)
    {
      if (v6 > 1109)
      {
        if (v6 <= 1124)
        {
          if (v6 == 1110)
          {
            LayerTranslator::addBroadcastToDynamic(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
          }
          else
          {
            if (v6 != 1120)
              goto LABEL_486;
            LayerTranslator::addSqueeze(this, (uint64_t **)a2);
          }
        }
        else
        {
          switch(v6)
          {
            case 1125:
              LayerTranslator::addExpandDims(this, (uint64_t **)a2);
              break;
            case 1130:
              LayerTranslator::addFlattenTo2D(this, (const CoreML::Specification::FlattenLayerParams **)a2);
              break;
            case 1135:
              LayerTranslator::addReshapeLike(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            default:
              goto LABEL_486;
          }
        }
      }
      else if (v6 <= 1089)
      {
        if (v6 == 1080)
        {
          LayerTranslator::addFillLike(this, (uint64_t **)a2);
        }
        else
        {
          if (v6 != 1085)
            goto LABEL_486;
          LayerTranslator::addFillStatic(this, (uint64_t **)a2);
        }
      }
      else
      {
        switch(v6)
        {
          case 1090:
            LayerTranslator::addFillDynamic(this, (uint64_t **)a2);
            break;
          case 1100:
            LayerTranslator::addBroadcastToLike(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          case 1105:
            LayerTranslator::addBroadcastToStatic(this, (uint64_t **)a2);
            break;
          default:
            goto LABEL_486;
        }
      }
      goto LABEL_485;
    }
    if (v6 > 1024)
    {
      if (v6 > 1044)
      {
        if (v6 == 1045)
        {
          result = (std::string *)LayerTranslator::addBatchedMatMul(this, (uint64_t **)a2);
          goto LABEL_486;
        }
        if (v6 != 1065)
        {
          if (v6 == 1070)
            result = (std::string *)LayerTranslator::addLoadConstantND(this, (uint64_t **)a2);
          goto LABEL_486;
        }
        LayerTranslator::addGetShape(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        goto LABEL_485;
      }
      if (v6 != 1025)
      {
        if (v6 == 1040)
          result = (std::string *)LayerTranslator::addEmbeddingND(this, (uint64_t **)a2);
        goto LABEL_486;
      }
    }
    else
    {
      if (v6 <= 1004)
      {
        if (v6 == 995)
        {
          LayerTranslator::addSliceStatic(this, (uint64_t **)a2);
        }
        else
        {
          if (v6 != 1000)
            goto LABEL_486;
          LayerTranslator::addSliceDynamic(this, (uint64_t **)a2);
        }
        goto LABEL_485;
      }
      if (v6 == 1005)
      {
        LayerTranslator::addSlidingWindows(this, (uint64_t **)a2);
        goto LABEL_485;
      }
      if (v6 == 1015)
      {
        LayerTranslator::addTopK(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        goto LABEL_485;
      }
      if (v6 != 1020)
        goto LABEL_486;
    }
    LayerTranslator::addArgMaxMin(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
    goto LABEL_485;
  }
  if (v6 <= 599)
  {
    if (v6 <= 244)
    {
      if (v6 > 179)
      {
        if (v6 > 211)
        {
          if (v6 <= 229)
          {
            if (v6 == 212)
            {
              LayerTranslator::addCropResize(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            }
            else
            {
              if (v6 != 220)
                goto LABEL_486;
              LayerTranslator::addUnaryFunction(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            }
          }
          else
          {
            switch(v6)
            {
              case 230:
                LayerTranslator::addAdd(this, (uint64_t **)a2);
                break;
              case 231:
                LayerTranslator::addMultiply(this, (uint64_t **)a2);
                break;
              case 240:
                LayerTranslator::addAverage(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
                break;
              default:
                goto LABEL_486;
            }
          }
        }
        else if (v6 <= 199)
        {
          if (v6 == 180)
          {
            LayerTranslator::addLRN(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
          }
          else
          {
            if (v6 != 190)
              goto LABEL_486;
            LayerTranslator::addCrop(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
          }
        }
        else
        {
          switch(v6)
          {
            case 200:
              LayerTranslator::addPadding(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            case 210:
              LayerTranslator::addUpsample(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            case 211:
              LayerTranslator::addResizeBilinear(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            default:
              goto LABEL_486;
          }
        }
        goto LABEL_485;
      }
      if (v6 > 149)
      {
        if (v6 > 164)
        {
          switch(v6)
          {
            case 165:
              LayerTranslator::addMVN(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            case 170:
              LayerTranslator::addL2Norm(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            case 175:
              LayerTranslator::addSoftmax(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            default:
              goto LABEL_486;
          }
          goto LABEL_485;
        }
        if (v6 == 150)
        {
          result = (std::string *)LayerTranslator::addEmbedding(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        else if (v6 == 160)
        {
          result = (std::string *)LayerTranslator::addBatchnorm(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        goto LABEL_486;
      }
      if (v6 > 129)
      {
        if (v6 == 130)
        {
          result = (std::string *)LayerTranslator::addActivation(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        else if (v6 == 140)
        {
          result = (std::string *)LayerTranslator::addInnerProduct(this, (uint64_t **)a2);
        }
        goto LABEL_486;
      }
      if (v6 == 100)
      {
        result = (std::string *)LayerTranslator::addConvolution(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        goto LABEL_486;
      }
      if (v6 != 120)
      {
        if (!v6)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v93, "Unknown layer type");
          std::runtime_error::runtime_error(exception, (const std::string *)&v93);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        goto LABEL_486;
      }
      LayerTranslator::addPooling(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
    }
    else
    {
      if (v6 > 319)
      {
        if (v6 <= 399)
        {
          if (v6 <= 339)
          {
            if (v6 == 320)
            {
              LayerTranslator::addConcat(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            }
            else
            {
              if (v6 != 330)
                goto LABEL_486;
              LayerTranslator::addSplit(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            }
          }
          else
          {
            switch(v6)
            {
              case 340:
                LayerTranslator::addSequenceRepeat(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
                break;
              case 345:
                LayerTranslator::addReorganizeData(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
                break;
              case 350:
                LayerTranslator::addSlice(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
                break;
              default:
                goto LABEL_486;
            }
          }
          goto LABEL_485;
        }
        if (v6 > 419)
        {
          if (v6 == 420)
          {
            result = (std::string *)LayerTranslator::addUniLSTM(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            goto LABEL_486;
          }
          if (v6 == 430)
          {
            result = (std::string *)LayerTranslator::addBiLSTM(this, (const CoreML::Specification::BiDirectionalLSTMLayerParams **)a2);
            goto LABEL_486;
          }
          if (v6 != 500)
            goto LABEL_486;
          LayerTranslator::addCustomLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
          goto LABEL_485;
        }
        if (v6 == 400)
        {
          result = (std::string *)LayerTranslator::addSimpleRecurrent(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        else if (v6 == 410)
        {
          result = (std::string *)LayerTranslator::addGRU(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        goto LABEL_486;
      }
      if (v6 <= 279)
      {
        if (v6 > 259)
        {
          switch(v6)
          {
            case 260:
              LayerTranslator::addMax(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            case 261:
              LayerTranslator::addMin(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            case 270:
              LayerTranslator::addDotProduct(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            default:
              goto LABEL_486;
          }
          goto LABEL_485;
        }
        if (v6 == 245)
        {
          result = (std::string *)LayerTranslator::addScale(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        else if (v6 == 250)
        {
          result = (std::string *)LayerTranslator::addBias(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        goto LABEL_486;
      }
      if (v6 > 299)
      {
        switch(v6)
        {
          case 300:
            LayerTranslator::addReshape(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          case 301:
            LayerTranslator::addFlatten(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          case 310:
            LayerTranslator::addPermute(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          default:
            goto LABEL_486;
        }
        goto LABEL_485;
      }
      if (v6 != 280)
      {
        if (v6 == 290)
          result = (std::string *)LayerTranslator::addLoadConstant(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        goto LABEL_486;
      }
      LayerTranslator::addReduce(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
    }
    goto LABEL_485;
  }
  if (v6 <= 749)
  {
    if (v6 > 669)
    {
      v7 = (v6 - 685);
      if (v7 > 0x37)
        goto LABEL_235;
      if (((1 << (v6 + 83)) & 0x84200842000000) != 0)
        goto LABEL_334;
      if (v6 == 685)
      {
        LayerTranslator::addRound(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        goto LABEL_485;
      }
      if (v7 != 15)
      {
LABEL_235:
        if (v6 == 670)
        {
          LayerTranslator::addFloor(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        else
        {
          if (v6 != 680)
            goto LABEL_486;
          LayerTranslator::addSign(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        goto LABEL_485;
      }
      LayerTranslator::addExp2(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
    }
    else
    {
      if (v6 > 624)
      {
        if (v6 > 639)
        {
          switch(v6)
          {
            case 640:
              LayerTranslator::addRangeDynamic(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            case 660:
              LayerTranslator::addClip(this, (uint64_t **)a2);
              break;
            case 665:
              LayerTranslator::addCeil(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            default:
              goto LABEL_486;
          }
          goto LABEL_485;
        }
        if (v6 != 625)
        {
          if (v6 != 635)
            goto LABEL_486;
          LayerTranslator::addRangeStatic(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
          goto LABEL_485;
        }
LABEL_170:
        LayerTranslator::addLoopContinueBreak(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        goto LABEL_485;
      }
      if (v6 > 614)
      {
        if (v6 == 615)
        {
          result = (std::string *)LayerTranslator::addLoop(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
          goto LABEL_486;
        }
        if (v6 != 620)
          goto LABEL_486;
        goto LABEL_170;
      }
      if (v6 != 600)
      {
        if (v6 == 605)
          result = (std::string *)LayerTranslator::addBranch(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        goto LABEL_486;
      }
      LayerTranslator::addCopy(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
    }
LABEL_485:
    result = 0;
    goto LABEL_486;
  }
  if (v6 > 864)
  {
    switch(v6)
    {
      case 865:
        LayerTranslator::addModBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        break;
      case 870:
        LayerTranslator::addMinBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        break;
      case 875:
        LayerTranslator::addMaxBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        break;
      default:
        goto LABEL_486;
    }
    goto LABEL_485;
  }
  if ((v6 - 795) <= 0x3C)
  {
    if (((1 << (v6 - 27)) & 0x1084202942100000) != 0)
    {
      EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, v5);
      v8 = a2[14];
      if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v88, v8->__r_.__value_.__l.__data_, v8->__r_.__value_.__l.__size_);
      }
      else
      {
        v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v88.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v9;
      }
      memset(&v87, 0, sizeof(v87));
      memset(&v86, 0, sizeof(v86));
      EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v87, (uint64_t *)&v86, *((_QWORD *)this + 1));
      v10 = 0;
      v83.__r_.__value_.__r.__words[0] = 0;
      v83.__r_.__value_.__l.__size_ = 1065353216;
      v83.__r_.__value_.__r.__words[2] = 897988541;
      v84 = 0;
      v85 = 0;
      v11 = *((_DWORD *)a2 + 35);
      if (v11 <= 839)
      {
        switch(v11)
        {
          case 825:
            v12 = 103;
            goto LABEL_390;
          case 826:
          case 828:
          case 829:
          case 831:
            goto LABEL_454;
          case 827:
            v12 = 104;
            goto LABEL_390;
          case 830:
            v12 = 105;
            goto LABEL_390;
          case 832:
            v12 = 106;
            goto LABEL_390;
          default:
            if (v11 == 815)
            {
              v12 = 100;
            }
            else
            {
              if (v11 != 820)
                goto LABEL_454;
              v12 = 107;
            }
LABEL_390:
            LODWORD(v83.__r_.__value_.__l.__data_) = v12;
            if (v86.__r_.__value_.__l.__size_ - v86.__r_.__value_.__r.__words[0] == 24)
            {
              v29 = a2[16]->__r_.__value_.__r.__words[2];
              v94.__r_.__value_.__r.__words[0] = 0xFFFFFFFF00000001;
              *(_QWORD *)&v30 = 0x100000001;
              *((_QWORD *)&v30 + 1) = 0x100000001;
              v93 = v30;
              if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
              else
                size = v88.__r_.__value_.__l.__size_;
              v32 = &v97;
              std::string::basic_string[abi:ne180100]((uint64_t)&v97, size + 15);
              if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v32 = (std::string *)v97.__r_.__value_.__r.__words[0];
              if (size)
              {
                if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v33 = &v88;
                else
                  v33 = (std::string *)v88.__r_.__value_.__r.__words[0];
                memmove(v32, v33, size);
              }
              strcpy((char *)v32 + size, "_load_constant_");
              std::to_string(&v82, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
              if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v34 = &v82;
              else
                v34 = (std::string *)v82.__r_.__value_.__r.__words[0];
              if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v35 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
              else
                v35 = v82.__r_.__value_.__l.__size_;
              v36 = std::string::append(&v97, (const std::string::value_type *)v34, v35);
              v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
              *(_QWORD *)&v90 = *((_QWORD *)&v36->__r_.__value_.__l + 2);
              __p = v37;
              v36->__r_.__value_.__l.__size_ = 0;
              v36->__r_.__value_.__r.__words[2] = 0;
              v36->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v82.__r_.__value_.__l.__data_);
              if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v97.__r_.__value_.__l.__data_);
              v38 = *(_QWORD **)this;
              std::string::basic_string[abi:ne180100]<0>(&v97, "load_constant");
              memset(&v82, 0, sizeof(v82));
              if (SBYTE7(v90) < 0)
              {
                std::string::__init_copy_ctor_external(&v99, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
              }
              else
              {
                *(_OWORD *)&v99.__r_.__value_.__l.__data_ = __p;
                v99.__r_.__value_.__r.__words[2] = v90;
              }
              v78 = 0;
              v79 = 0;
              v80 = 0;
              v76.__r_.__value_.__s.__data_[8] = 0;
              v78 = (std::string *)operator new(0x18uLL);
              v79 = v78;
              v80 = v78 + 1;
              v79 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v80, (__int128 *)&v99, &v100, v78);
              Espresso::sequential_builder::add<Espresso::load_constant_params>((uint64_t *)&v81, v38, (uint64_t)&v97, (uint64_t)&__p, (uint64_t)&v93, (__int128 *)v82.__r_.__value_.__l.__data_, (__int128 *)v82.__r_.__value_.__l.__size_, (__int128 **)&v78);
              v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
              if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v99.__r_.__value_.__l.__data_);
              v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
              if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v97.__r_.__value_.__l.__data_);
              v39 = (_OWORD *)v86.__r_.__value_.__l.__size_;
              if (v86.__r_.__value_.__l.__size_ >= v86.__r_.__value_.__r.__words[2])
              {
                v41 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v86, &__p);
              }
              else
              {
                if (SBYTE7(v90) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v86.__r_.__value_.__l.__size_, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
                }
                else
                {
                  v40 = __p;
                  *(_QWORD *)(v86.__r_.__value_.__l.__size_ + 16) = v90;
                  *v39 = v40;
                }
                v41 = (std::string::size_type)v39 + 24;
              }
              v86.__r_.__value_.__l.__size_ = v41;
              *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v81;
              if (*((_QWORD *)&v81 + 1))
              {
                v42 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
                do
                  v43 = __ldxr(v42);
                while (__stxr(v43 + 1, v42));
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v99, 1, 1, 1, 1);
              v44 = v99.__r_.__value_.__r.__words[0];
              **(_DWORD **)(v99.__r_.__value_.__r.__words[0] + 24) = v29;
              v77 = __PAIR128__(v99.__r_.__value_.__l.__size_, v44);
              if (v99.__r_.__value_.__l.__size_)
              {
                v45 = (unint64_t *)(v99.__r_.__value_.__l.__size_ + 8);
                do
                  v46 = __ldxr(v45);
                while (__stxr(v46 + 1, v45));
              }
              Espresso::generic_load_constant_kernel::set_constant_blob();
              v47 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
              if (*((_QWORD *)&v77 + 1))
              {
                v48 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
                do
                  v49 = __ldaxr(v48);
                while (__stlxr(v49 - 1, v48));
                if (!v49)
                {
                  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                  std::__shared_weak_count::__release_weak(v47);
                }
              }
              v50 = (std::__shared_weak_count *)v99.__r_.__value_.__l.__size_;
              if (v99.__r_.__value_.__l.__size_)
              {
                v51 = (unint64_t *)(v99.__r_.__value_.__l.__size_ + 8);
                do
                  v52 = __ldaxr(v51);
                while (__stlxr(v52 - 1, v51));
                if (!v52)
                {
                  ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                  std::__shared_weak_count::__release_weak(v50);
                }
              }
              v53 = (std::__shared_weak_count *)v97.__r_.__value_.__l.__size_;
              if (v97.__r_.__value_.__l.__size_)
              {
                v54 = (unint64_t *)(v97.__r_.__value_.__l.__size_ + 8);
                do
                  v55 = __ldaxr(v54);
                while (__stlxr(v55 - 1, v54));
                if (!v55)
                {
                  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                  std::__shared_weak_count::__release_weak(v53);
                }
              }
              v56 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
              if (*((_QWORD *)&v81 + 1))
              {
                v57 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              if (SBYTE7(v90) < 0)
                operator delete((void *)__p);
              v10 = 1;
            }
            else
            {
              v10 = 0;
            }
            break;
        }
        goto LABEL_454;
      }
      if (v11 > 849)
      {
        if (v11 == 850)
        {
          v10 = 0;
          v13 = 112;
        }
        else
        {
          if (v11 != 855)
            goto LABEL_454;
          v10 = 0;
          v13 = 110;
        }
      }
      else if (v11 == 840)
      {
        v10 = 0;
        v13 = 111;
      }
      else
      {
        if (v11 != 845)
          goto LABEL_454;
        v10 = 0;
        v13 = 113;
      }
      LODWORD(v83.__r_.__value_.__l.__data_) = v13;
LABEL_454:
      v59 = *(_QWORD **)this;
      std::string::basic_string[abi:ne180100]<0>(&v93, "elementwise");
      memset(&v99, 0, sizeof(v99));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v99, (__int128 *)v86.__r_.__value_.__l.__data_, (__int128 *)v86.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86.__r_.__value_.__l.__size_ - v86.__r_.__value_.__r.__words[0]) >> 3));
      memset(&v76, 0, sizeof(v76));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v76, (__int128 *)v87.__r_.__value_.__l.__data_, (__int128 *)v87.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87.__r_.__value_.__l.__size_ - v87.__r_.__value_.__r.__words[0]) >> 3));
      Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v81, v59, (uint64_t)&v93, (uint64_t)&v88, (uint64_t)&v83, (__int128 *)v99.__r_.__value_.__l.__data_, (__int128 *)v99.__r_.__value_.__l.__size_, (__int128 **)&v76);
      v60 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
      if (*((_QWORD *)&v81 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      *(_QWORD *)&__p = &v76;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      *(_QWORD *)&__p = &v99;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v94.__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)v93);
      if (v10)
      {
        v63 = (void **)(v86.__r_.__value_.__l.__size_ - 24);
        if (*(char *)(v86.__r_.__value_.__l.__size_ - 1) < 0)
          operator delete(*v63);
        v86.__r_.__value_.__l.__size_ = (std::string::size_type)v63;
      }
      if (**((_BYTE **)this + 2))
      {
        LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v87);
      }
      else
      {
        v64 = (uint64_t **)*((_QWORD *)this + 1);
        memset(&v97, 0, sizeof(v97));
        v66 = v86.__r_.__value_.__l.__size_;
        v65 = (_QWORD *)v86.__r_.__value_.__r.__words[0];
        if (v86.__r_.__value_.__r.__words[0] == v86.__r_.__value_.__l.__size_)
        {
          v69 = 0;
        }
        else
        {
          do
          {
            v67 = (__int128 *)std::map<std::string,std::string>::at((uint64_t)v64, v65);
            v68 = v97.__r_.__value_.__l.__size_;
            if (v97.__r_.__value_.__l.__size_ >= v97.__r_.__value_.__r.__words[2])
            {
              v69 = (int *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v97, v67);
            }
            else
            {
              std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v97, v67);
              v69 = (int *)(v68 + 64);
            }
            v97.__r_.__value_.__l.__size_ = (std::string::size_type)v69;
            v65 += 3;
          }
          while (v65 != (_QWORD *)v66);
        }
        if (*((_DWORD *)a2 + 35) != 850
          && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86.__r_.__value_.__l.__size_ - v86.__r_.__value_.__r.__words[0]) >> 3) >= 2)
        {
          EspressoConverter::validateEqualInputShapes((uint64_t)a2, (int *)v97.__r_.__value_.__l.__data_, v69);
        }
        v93 = *(_OWORD *)v97.__r_.__value_.__l.__data_;
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *(_OWORD *)(v97.__r_.__value_.__r.__words[0] + 16);
        v94.__r_.__value_.__r.__words[2] = *(_QWORD *)(v97.__r_.__value_.__r.__words[0] + 32);
        v95 = 0uLL;
        v96 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v95, *(const void **)(v97.__r_.__value_.__r.__words[0] + 40), *(_QWORD *)(v97.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(_QWORD *)(v97.__r_.__value_.__r.__words[0] + 48)- *(_QWORD *)(v97.__r_.__value_.__r.__words[0] + 40)) >> 2);
        __p = v93;
        v90 = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
        v70 = (char *)v95;
        v91 = v94.__r_.__value_.__r.__words[2];
        memset(v92, 0, sizeof(v92));
        v71 = *((_QWORD *)&v95 + 1);
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v92, (const void *)v95, *((uint64_t *)&v95 + 1), (uint64_t)(*((_QWORD *)&v95 + 1) - v95) >> 2);
        EspressoConverter::validateShape((int *)&__p, (uint64_t)a2[14], (uint64_t)v87.__r_.__value_.__l.__data_);
        if (v92[0])
        {
          v92[1] = v92[0];
          operator delete(v92[0]);
        }
        v98 = (__int128 *)v87.__r_.__value_.__r.__words[0];
        v72 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v64, v87.__r_.__value_.__l.__data_, &v98);
        v73 = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
        *(_OWORD *)(v72 + 56) = v93;
        *(_OWORD *)(v72 + 72) = v73;
        *((_QWORD *)v72 + 11) = *((_QWORD *)&v94.__r_.__value_.__l + 2);
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v72 + 96, v70, v71, (v71 - (uint64_t)v70) >> 2);
        if (v70)
          operator delete(v70);
        *(_QWORD *)&v93 = &v97;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
      }
      *(_QWORD *)&v93 = &v86;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
      *(_QWORD *)&v93 = &v87;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_485;
      v28 = (void *)v88.__r_.__value_.__r.__words[0];
      goto LABEL_484;
    }
    if (v6 == 795)
    {
LABEL_382:
      LayerTranslator::addActivationsIOS13(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
      goto LABEL_485;
    }
  }
  v14 = (v6 - 750);
  if (v14 <= 0x28)
  {
    if (((1 << v14) & 0x42100421) != 0)
    {
LABEL_334:
      EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, v5);
      v15 = a2[14];
      if (SHIBYTE(v15->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v83, v15->__r_.__value_.__l.__data_, v15->__r_.__value_.__l.__size_);
      }
      else
      {
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v83.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v16;
      }
      memset(&v97, 0, sizeof(v97));
      memset(&v88, 0, sizeof(v88));
      EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v97, (uint64_t *)&v88, *((_QWORD *)this + 1));
      *(_QWORD *)&__p = 0;
      *((_QWORD *)&__p + 1) = 1065353216;
      *(_QWORD *)&v90 = 897988541;
      BYTE8(v90) = 0;
      *(void **)((char *)v92 + 4) = 0;
      v17 = *((_DWORD *)a2 + 35);
      if (v17 > 749)
      {
        if (v17 > 769)
        {
          switch(v17)
          {
            case 770:
              v18 = 129;
              break;
            case 775:
              v18 = 128;
              break;
            case 780:
              v18 = 130;
              break;
            default:
              goto LABEL_365;
          }
        }
        else
        {
          switch(v17)
          {
            case 750:
              v18 = 123;
              break;
            case 755:
              v18 = 122;
              break;
            case 760:
              v18 = 124;
              break;
            default:
              goto LABEL_365;
          }
        }
      }
      else if (v17 > 729)
      {
        switch(v17)
        {
          case 730:
            v18 = 126;
            break;
          case 735:
            v18 = 125;
            break;
          case 740:
            v18 = 127;
            break;
          default:
            goto LABEL_365;
        }
      }
      else
      {
        switch(v17)
        {
          case 710:
            v18 = 115;
            break;
          case 715:
            v18 = 114;
            break;
          case 720:
            v18 = 121;
            break;
          default:
            goto LABEL_365;
        }
      }
      LODWORD(__p) = v18;
LABEL_365:
      v19 = *(_QWORD **)this;
      std::string::basic_string[abi:ne180100]<0>(&v93, "elementwise");
      memset(&v87, 0, sizeof(v87));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v87, (__int128 *)v88.__r_.__value_.__l.__data_, (__int128 *)v88.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88.__r_.__value_.__l.__size_ - v88.__r_.__value_.__r.__words[0]) >> 3));
      memset(&v86, 0, sizeof(v86));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v86, (__int128 *)v97.__r_.__value_.__l.__data_, (__int128 *)v97.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97.__r_.__value_.__l.__size_ - v97.__r_.__value_.__r.__words[0]) >> 3));
      Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v82, v19, (uint64_t)&v93, (uint64_t)&v83, (uint64_t)&__p, (__int128 *)v87.__r_.__value_.__l.__data_, (__int128 *)v87.__r_.__value_.__l.__size_, (__int128 **)&v86);
      v20 = (std::__shared_weak_count *)v82.__r_.__value_.__l.__size_;
      if (v82.__r_.__value_.__l.__size_)
      {
        v21 = (unint64_t *)(v82.__r_.__value_.__l.__size_ + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v78 = &v86;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
      v78 = &v87;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
      if (v94.__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)v93);
      if (**((_BYTE **)this + 2))
      {
        LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v97);
      }
      else
      {
        v23 = v97.__r_.__value_.__r.__words[0];
        if (v97.__r_.__value_.__l.__size_ != v97.__r_.__value_.__r.__words[0])
        {
          v24 = 0;
          v25 = 0;
          v26 = (uint64_t **)*((_QWORD *)this + 1);
          do
          {
            *((_QWORD *)&v93 + 1) = -1;
            v94.__r_.__value_.__r.__words[0] = -1;
            *(_QWORD *)&v93 = -1;
            *(_OWORD *)&v94.__r_.__value_.__r.__words[1] = 0u;
            v95 = 0u;
            v96 = 0;
            EspressoConverter::validateShape((int *)&v93, (uint64_t)a2[14], v23 + v24);
            if ((_QWORD)v95)
            {
              *((_QWORD *)&v95 + 1) = v95;
              operator delete((void *)v95);
            }
            v78 = (std::string *)(v97.__r_.__value_.__r.__words[0] + v24);
            v27 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, (_QWORD *)(v97.__r_.__value_.__r.__words[0] + v24), (__int128 **)&v78);
            *((_QWORD *)v27 + 7) = -1;
            *((_QWORD *)v27 + 8) = -1;
            *((_QWORD *)v27 + 9) = -1;
            *((_QWORD *)v27 + 10) = 0;
            *((_QWORD *)v27 + 11) = 0;
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v27 + 96, 0, 0, 0);
            v23 = v97.__r_.__value_.__r.__words[0];
            ++v25;
            v24 += 24;
          }
          while (v25 < 0xAAAAAAAAAAAAAAABLL
                      * ((uint64_t)(v97.__r_.__value_.__l.__size_ - v97.__r_.__value_.__r.__words[0]) >> 3));
        }
      }
      *(_QWORD *)&v93 = &v88;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
      *(_QWORD *)&v93 = &v97;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
      if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_485;
      v28 = (void *)v83.__r_.__value_.__r.__words[0];
LABEL_484:
      operator delete(v28);
      goto LABEL_485;
    }
    if (v14 != 40)
      goto LABEL_486;
    goto LABEL_382;
  }
LABEL_486:
  v74 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 79) < 0)
  {
    **(_BYTE **)(v74 + 56) = 0;
    *(_QWORD *)(v74 + 64) = 0;
  }
  else
  {
    *(_BYTE *)(v74 + 56) = 0;
    *(_BYTE *)(v74 + 79) = 0;
  }
  return result;
}

char *LayerTranslator::defaultUnknownNdShape(char *result, uint64_t *a2)
{
  uint64_t v2;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t **v7;
  char *v8;
  __int128 *v9;

  v2 = *a2;
  if (a2[1] != *a2)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (uint64_t **)*((_QWORD *)v4 + 1);
      v9 = (__int128 *)(v2 + v5);
      v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (_QWORD *)(v2 + v5), &v9);
      *((_QWORD *)v8 + 7) = -1;
      *((_QWORD *)v8 + 8) = -1;
      *((_QWORD *)v8 + 9) = -1;
      *((_QWORD *)v8 + 10) = 0;
      *((_QWORD *)v8 + 11) = 0;
      result = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v8 + 96, 0, 0, 0);
      v2 = *a2;
      ++v6;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  return result;
}

void LayerTranslator::addCumSum(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  unint64_t *inited;
  int v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t i;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string v49;
  std::string v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  std::string v53;
  __int128 *v54;
  __int128 *v55;
  __int128 *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  __int128 v63;
  std::string *v64;
  std::string *v65;
  std::string *v66;
  __int128 *v67;
  __int128 *v68;
  uint64_t v69;
  std::string v70;
  __int128 v71;
  unint64_t v72;
  std::string __p;
  __int16 v74;
  __int128 *v75;
  __int128 *v76;
  uint64_t v77;
  __int128 *v78;
  __int128 *v79;
  uint64_t v80;
  std::string v81;
  std::string v82;
  std::string v83;
  __int128 v84;
  std::string v85;
  __int128 v86;

  *(_QWORD *)&v86 = *MEMORY[0x1E0C80C00];
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v81.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v5;
  }
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v78, (uint64_t *)&v75, *((_QWORD *)this + 1));
  v74 = 0;
  if (*((_DWORD *)a2 + 35) == 1455)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    LOBYTE(v74) = *((_BYTE *)v7 + 24);
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v9 = *((_DWORD *)a2 + 35);
    LOBYTE(v74) = word_1ED0038B8;
    if (v9 == 1455)
    {
      v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v7 = &CoreML::Specification::_CumSumLayerParams_default_instance_;
    }
  }
  HIBYTE(v74) = *((_BYTE *)v7 + 25);
  memset(&__p, 0, sizeof(__p));
  if ((char *)v76 - (char *)v75 == 24)
  {
    v72 = 0xFFFFFFFF00000001;
    *(_QWORD *)&v10 = 0x100000001;
    *((_QWORD *)&v10 + 1) = 0x100000001;
    v71 = v10;
    std::to_string(&v70, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
    v11 = std::string::append(&v70, "_");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v81;
    else
      v13 = (std::string *)v81.__r_.__value_.__r.__words[0];
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
    else
      size = v81.__r_.__value_.__l.__size_;
    v15 = std::string::append(&v85, (const std::string::value_type *)v13, size);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v82, "_axis");
    v18 = v17->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v84 = v17->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v84 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
    v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v18;
    __p.__r_.__value_.__l.__size_ = v84;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v84 + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v19;
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    v20 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v82, "load_constant");
    v67 = 0;
    v68 = 0;
    v69 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v85, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v85 = __p;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
    v70.__r_.__value_.__s.__data_[8] = 0;
    v64 = (std::string *)operator new(0x18uLL);
    v65 = v64;
    v66 = v64 + 1;
    v65 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v66, (__int128 *)&v85, &v86, v64);
    Espresso::sequential_builder::add<Espresso::load_constant_params>((uint64_t *)&v84, v20, (uint64_t)&v82, (uint64_t)&__p, (uint64_t)&v71, v67, v68, (__int128 **)&v64);
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    v63 = v84;
    if (*((_QWORD *)&v84 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v61, 1, 1, 1, 1);
    if (*((_DWORD *)a2 + 35) == 1455)
    {
      v28 = (uint64_t *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v27);
      v28 = &CoreML::Specification::_CumSumLayerParams_default_instance_;
    }
    v29 = v61;
    **(float **)(v61 + 24) = (float)v28[2];
    v59 = v29;
    v60 = v62;
    if (v62)
    {
      p_shared_owners = (unint64_t *)&v62->__shared_owners_;
      do
        v31 = __ldxr(p_shared_owners);
      while (__stxr(v31 + 1, p_shared_owners));
    }
    Espresso::generic_load_constant_kernel::set_constant_blob();
    if (v60)
    {
      v32 = &v60->__shared_owners_;
      do
        v33 = __ldaxr((unint64_t *)v32);
      while (__stlxr(v33 - 1, (unint64_t *)v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v34 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v85, "cumsum");
    if (*((char *)v75 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)v75, *((_QWORD *)v75 + 1));
    }
    else
    {
      v35 = *v75;
      v82.__r_.__value_.__r.__words[2] = *((_QWORD *)v75 + 2);
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v35;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v83, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v83 = __p;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    v70.__r_.__value_.__s.__data_[8] = 0;
    v54 = (__int128 *)operator new(0x30uLL);
    v55 = v54;
    v56 = v54 + 3;
    v55 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v56, (__int128 *)&v82, &v84, (std::string *)v54);
    memset(&v53, 0, sizeof(v53));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v53, v78, v79, 0xAAAAAAAAAAAAAAABLL * (((char *)v79 - (char *)v78) >> 3));
    Espresso::sequential_builder::add<Espresso::cumsum_params_t>(&v57, v34, (uint64_t)&v85, (uint64_t)&v81, (uint64_t)&v74, v54, v55, (__int128 **)&v53);
    v36 = v58;
    if (v58)
    {
      v37 = (unint64_t *)&v58->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    for (i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v83.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v82 + i * 8 + 24));
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    v40 = v62;
    if (v62)
    {
      v41 = (unint64_t *)&v62->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
    if (*((_QWORD *)&v63 + 1))
    {
      v44 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
    if (*((_QWORD *)&v84 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  else
  {
    v21 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v82, "cumsum");
    memset(&v50, 0, sizeof(v50));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v50, v75, v76, 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (char *)v75) >> 3));
    memset(&v49, 0, sizeof(v49));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v49, v78, v79, 0xAAAAAAAAAAAAAAABLL * (((char *)v79 - (char *)v78) >> 3));
    Espresso::sequential_builder::add<Espresso::cumsum_params_t>(&v51, v21, (uint64_t)&v82, (uint64_t)&v81, (uint64_t)&v74, (__int128 *)v50.__r_.__value_.__l.__data_, (__int128 *)v50.__r_.__value_.__l.__size_, (__int128 **)&v49);
    v22 = v52;
    if (v52)
    {
      v23 = (unint64_t *)&v52->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    *(_QWORD *)&v71 = &v49;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
    *(_QWORD *)&v71 = &v50;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v78);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
  v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
}

void sub_19C98D20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;

  if (*(char *)(v53 - 137) < 0)
    operator delete(*(void **)(v53 - 160));
  if (*(char *)(v53 - 73) < 0)
    operator delete(*(void **)(v53 - 96));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v53 - 112);
  if (a53 < 0)
    operator delete(__p);
  *(_QWORD *)(v53 - 160) = v53 - 240;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 160));
  *(_QWORD *)(v53 - 160) = v53 - 216;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 160));
  if (*(char *)(v53 - 169) < 0)
    operator delete(*(void **)(v53 - 192));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::cumsum_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C98D618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addMultiply(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  std::string *v11;
  std::string *v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  __int128 *v16;
  std::string *v17;
  __int128 v18;
  __int128 *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::string *v25;
  std::string::size_type size;
  std::string *v27;
  __int128 v28;
  unint64_t *p_shared_owners;
  uint64_t **v30;
  __int128 *v31;
  __int128 *v32;
  __int128 *v33;
  std::string *v34;
  __int128 *v35;
  void **v36;
  char *v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  const CoreML::Specification::NeuralNetworkLayer *v41;
  std::string v42;
  std::string v43;
  std::string v44;
  void *v45[2];
  std::string::size_type v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  std::string v49;
  std::string v50;
  void *__p[2];
  char v52;
  void (**v53)(CoreML::Specification::MultiplyLayerParams *__hidden);
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  __int128 *v59;
  __int128 *v60;
  uint64_t v61;
  std::string *v62;
  __int128 *v63;
  uint64_t v64;
  std::string v65;
  std::string *v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  void *v70[4];
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  void **v75;
  std::string *v76;
  unint64_t v77;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v65, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v65.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v5;
  }
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v62, (uint64_t *)&v59, *((_QWORD *)this + 1));
  EspressoConverter::splitElementwiseLayer((uint64_t)&v57, &v59, (uint64_t)v62);
  v41 = (const CoreML::Specification::NeuralNetworkLayer *)a2;
  if (*((_DWORD *)a2 + 35) == 231)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_MultiplyLayerParams_default_instance_;
  }
  v53 = &off_1E3D52128;
  v54 = 0;
  v56 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v54, v8 & 0xFFFFFFFFFFFFFFFELL);
  v55 = *((_DWORD *)v7 + 4);
  v9 = v57;
  if (v58 != v57)
  {
    for (i = 0; i < 0x8E38E38E38E38E39 * ((v58 - v57) >> 3); ++i)
    {
      *(_QWORD *)&v72 = 897988541;
      BYTE8(v72) = 0;
      *(_QWORD *)((char *)&v74 + 4) = 0;
      *(_QWORD *)&v71 = 1;
      *((_QWORD *)&v71 + 1) = 1065353216;
      v67 = 0uLL;
      *(_QWORD *)&v68 = 0;
      v75 = 0;
      v76 = 0;
      v77 = 0;
      if ((char *)v60 - (char *)v59 == 24)
      {
        DWORD2(v71) = v55;
        *((_QWORD *)&v67 + 1) = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v67, v59);
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v75, v62, v63, 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)v62) >> 3));
      }
      else
      {
        v11 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v67, (__int128 *)(v9 + 72 * i));
        v12 = v11;
        *((_QWORD *)&v67 + 1) = v11;
        v13 = (__int128 *)(v57 + 72 * i + 24);
        if ((unint64_t)v11 >= (unint64_t)v68)
        {
          v15 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v67, v13);
        }
        else
        {
          if (*(char *)(v57 + 72 * i + 47) < 0)
          {
            std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v13, *(_QWORD *)(v57 + 72 * i + 32));
          }
          else
          {
            v14 = *v13;
            v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v57 + 72 * i + 40);
            *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
          }
          v15 = (uint64_t)&v12[1];
        }
        *((_QWORD *)&v67 + 1) = v15;
        v16 = (__int128 *)(v57 + 72 * i + 48);
        v17 = v76;
        if ((unint64_t)v76 >= v77)
        {
          v19 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v75, v16);
        }
        else
        {
          if (*(char *)(v57 + 72 * i + 71) < 0)
          {
            std::string::__init_copy_ctor_external(v76, *(const std::string::value_type **)v16, *(_QWORD *)(v57 + 72 * i + 56));
          }
          else
          {
            v18 = *v16;
            v76->__r_.__value_.__r.__words[2] = *(_QWORD *)(v57 + 72 * i + 64);
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
          }
          v19 = (__int128 *)&v17[1];
        }
        v76 = (std::string *)v19;
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v60 - (char *)v59) >> 3) > 2)
      {
        v24 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
        std::to_string(&v44, i);
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v65;
        else
          v25 = (std::string *)v65.__r_.__value_.__r.__words[0];
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
        else
          size = v65.__r_.__value_.__l.__size_;
        v27 = std::string::insert(&v44, 0, (const std::string::value_type *)v25, size);
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v46 = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)v45 = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        memset(&v43, 0, sizeof(v43));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v43, (__int128 *)v67, *((__int128 **)&v67 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v67 + 1) - v67) >> 3));
        memset(&v42, 0, sizeof(v42));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v42, (__int128 *)v75, (__int128 *)v76, 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (char *)v75) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v47, v24, (uint64_t)__p, (uint64_t)v45, (uint64_t)&v71, (__int128 *)v43.__r_.__value_.__l.__data_, (__int128 *)v43.__r_.__value_.__l.__size_, (__int128 **)&v42);
        v66 = &v42;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
        v66 = &v43;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
        if (SHIBYTE(v46) < 0)
          operator delete(v45[0]);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        if (v52 < 0)
          operator delete(__p[0]);
        v21 = v48;
        if (!v48)
          goto LABEL_50;
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
      }
      else
      {
        v20 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
        memset(&v50, 0, sizeof(v50));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v50, (__int128 *)v67, *((__int128 **)&v67 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v67 + 1) - v67) >> 3));
        memset(&v49, 0, sizeof(v49));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v49, (__int128 *)v75, (__int128 *)v76, 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (char *)v75) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)v45, v20, (uint64_t)__p, (uint64_t)&v65, (uint64_t)&v71, (__int128 *)v50.__r_.__value_.__l.__data_, (__int128 *)v50.__r_.__value_.__l.__size_, (__int128 **)&v49);
        v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
        v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
        if (v52 < 0)
          operator delete(__p[0]);
        v21 = (std::__shared_weak_count *)v45[1];
        if (!v45[1])
          goto LABEL_50;
        v22 = (unint64_t *)((char *)v45[1] + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
      }
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
LABEL_50:
      __p[0] = &v75;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v75 = (void **)&v67;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v75);
      v9 = v57;
    }
  }
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v62);
  }
  else
  {
    v30 = (uint64_t **)*((_QWORD *)this + 1);
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v32 = v59;
    v31 = v60;
    if (v59 == v60)
    {
      v35 = 0;
      v36 = 0;
    }
    else
    {
      do
      {
        v33 = (__int128 *)std::map<std::string,std::string>::at((uint64_t)v30, v32);
        v34 = v76;
        if ((unint64_t)v76 >= v77)
        {
          v35 = (__int128 *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v75, v33);
        }
        else
        {
          std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v75, v33);
          v35 = (__int128 *)&v34[2].__r_.__value_.__r.__words[2];
        }
        v76 = (std::string *)v35;
        v32 = (__int128 *)((char *)v32 + 24);
      }
      while (v32 != v31);
      v36 = v75;
    }
    EspressoConverter::computeMaxShape((uint64_t)&v71, (uint64_t)v36, (uint64_t)v35);
    v67 = v71;
    v68 = v72;
    v37 = (char *)v74;
    v69 = v73;
    memset(v70, 0, 24);
    v38 = *((_QWORD *)&v74 + 1);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v70, (const void *)v74, *((uint64_t *)&v74 + 1), (uint64_t)(*((_QWORD *)&v74 + 1) - v74) >> 2);
    EspressoConverter::validateShape((int *)&v67, *((_QWORD *)v41 + 14), (uint64_t)v62);
    if (v70[0])
      operator delete(v70[0]);
    __p[0] = v62;
    v39 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v30, v62, (__int128 **)__p);
    v40 = v72;
    *(_OWORD *)(v39 + 56) = v71;
    *(_OWORD *)(v39 + 72) = v40;
    *((_QWORD *)v39 + 11) = v73;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v39 + 96, v37, v38, (v38 - (uint64_t)v37) >> 2);
    if (v37)
      operator delete(v37);
    *(_QWORD *)&v71 = &v75;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  }
  v53 = &off_1E3D52128;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v54);
  *(_QWORD *)&v71 = &v57;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  *(_QWORD *)&v71 = &v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  *(_QWORD *)&v71 = &v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
}

void sub_19C98DD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p)
{
  void *v59;
  uint64_t v60;

  if (__p)
    operator delete(__p);
  if (v59)
    operator delete(v59);
  *(_QWORD *)(v60 - 200) = v60 - 136;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 200));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(a11);
  *(_QWORD *)(v60 - 200) = &a38;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 200));
  *(_QWORD *)(v60 - 200) = &a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 200));
  *(_QWORD *)(v60 - 200) = &a44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 200));
  if (a52 < 0)
    operator delete(a47);
  _Unwind_Resume(a1);
}

void LayerTranslator::addSliceBySize(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::string v16;
  std::string v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  int v22;
  __int128 v23;
  int v24;
  void (**v25)(CoreML::Specification::SliceBySizeLayerParams *__hidden);
  uint64_t v26;
  __int128 v27;
  int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  void *v32[3];
  __int128 *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  std::string v39;
  std::string *v40;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v39.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v5;
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v36, (uint64_t *)&v33, *((_QWORD *)this + 1));
  v6 = std::map<std::string,std::string>::at(*((_QWORD *)this + 1), v33);
  v29 = *(_OWORD *)v6;
  v30 = *(_OWORD *)(v6 + 16);
  v31 = *(_QWORD *)(v6 + 32);
  memset(v32, 0, sizeof(v32));
  v7 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v32, *(const void **)(v6 + 40), *(_QWORD *)(v6 + 48), (uint64_t)(*(_QWORD *)(v6 + 48) - *(_QWORD *)(v6 + 40)) >> 2);
  if (*((_DWORD *)a2 + 35) == 1470)
  {
    v8 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v7);
    v8 = &CoreML::Specification::_SliceBySizeLayerParams_default_instance_;
  }
  v25 = &off_1E3D53E40;
  v26 = 0;
  v28 = 0;
  v9 = v8[1];
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v26, v9 & 0xFFFFFFFFFFFFFFFELL);
  v27 = *((_OWORD *)v8 + 1);
  v23 = xmmword_19CB399D0;
  v10 = DWORD1(v30);
  if ((_DWORD)v30 == 1)
    v11 = 4;
  else
    v11 = 5;
  if (DWORD1(v30) == -1)
    v10 = v11;
  v22 = v10 + ~DWORD2(v27);
  v24 = v27;
  v12 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "slice");
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v36, v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3));
  Espresso::sequential_builder::add<Espresso::slice_params_t>(&v20, v12, (uint64_t)__p, (uint64_t)&v39, (uint64_t)&v22, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, (__int128 **)&v16);
  v13 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v40 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v40 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (v19 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v36);
  v25 = &off_1E3D53E40;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v26);
  if (v32[0])
    operator delete(v32[0]);
  *(_QWORD *)&v29 = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  *(_QWORD *)&v29 = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
}

void sub_19C98E188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p)
{
  uint64_t *v37;
  uint64_t v38;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v37);
  if (__p)
    operator delete(__p);
  a32 = v38 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  a32 = v38 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  if (*(char *)(v38 - 57) < 0)
    operator delete(*(void **)(v38 - 80));
  _Unwind_Resume(a1);
}

void LayerTranslator::addReverse(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  unint64_t *inited;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  int v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::string v18;
  std::string v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void **v24[2];
  int v25;
  __int128 v26;
  int v27;
  __int128 v28;
  int v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  __int128 *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  std::string v39;
  std::string *v40;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v39.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v5;
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v36, (uint64_t *)&v33, *((_QWORD *)this + 1));
  v24[0] = 0;
  v24[1] = 0;
  v25 = 0;
  v26 = xmmword_19CB31D34;
  v27 = 1;
  v29 = 1;
  v28 = xmmword_19CB31D34;
  v30 = 0u;
  v31 = 0u;
  v32 = 0xFFFFFFFF00000000;
  if (*((_DWORD *)a2 + 35) == 960)
  {
    v7 = a2[16];
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    v7 = &CoreML::Specification::_ReverseLayerParams_default_instance_;
  }
  v8 = *((_DWORD *)v7 + 4);
  if (v8 >= 1)
  {
    v9 = 0;
    if (v8 >= 5)
      v10 = 5;
    else
      v10 = v8;
    do
    {
      v11 = (char *)v24 + v9;
      v11[60] = 1;
      v11[65] = 1;
      if (*((_DWORD *)a2 + 35) == 960)
      {
        v12 = a2[16];
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v12 = &CoreML::Specification::_ReverseLayerParams_default_instance_;
      }
      if (*(_BYTE *)(v12[3] + v9 + 8))
        v13 = -1;
      else
        v13 = 1;
      *((_DWORD *)&v28 + v9++) = v13;
    }
    while (v10 != v9);
  }
  v14 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice");
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, v36, v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3));
  Espresso::sequential_builder::add<Espresso::general_slice_params_t>(&v22, v14, (uint64_t)__p, (uint64_t)&v39, (uint64_t)v24, (__int128 *)v19.__r_.__value_.__l.__data_, (__int128 *)v19.__r_.__value_.__l.__size_, (__int128 **)&v18);
  v15 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v40 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v40 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (v21 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v36);
  v24[0] = (void **)&v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v24);
  v24[0] = (void **)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v24);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
}

void sub_19C98E4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 73) < 0)
    operator delete(*(void **)(v23 - 96));
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100](&v3);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

uint64_t std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>>>::~__hash_table(result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

void std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1A1AD6260);
}

_QWORD *std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D5B678;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000019CB3212ALL))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::target_type()
{
}

void std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000019CB3201BLL))
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000019CB31EC9))
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_pointer<MIL::IRParameter  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<MIL::IRParameter  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000019CB31DA9))
    return a1 + 24;
  else
    return 0;
}

void CoreML::MLModelResultException::~MLModelResultException(std::runtime_error *this)
{
  CoreML::MLModelResultException::~MLModelResultException(this);
  JUMPOUT(0x1A1AD6260);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E3D595E8;
  if (SHIBYTE(this[2].__imp_.__imp_) < 0)
    operator delete((void *)this[1].__imp_.__imp_);
  std::runtime_error::~runtime_error(this);
}

const char *CoreML::MIL::Opsets::CoreML5Opset::GetName(CoreML::MIL::Opsets::CoreML5Opset *this)
{
  return "CoreML5";
}

const char *CoreML::MIL::Opsets::CoreML6Opset::GetName(CoreML::MIL::Opsets::CoreML6Opset *this)
{
  return "CoreML6";
}

const char *CoreML::MIL::Opsets::CoreML6_trainOpset::GetName(CoreML::MIL::Opsets::CoreML6_trainOpset *this)
{
  return "CoreML6_train";
}

const char *CoreML::MIL::Opsets::CoreML7Opset::GetName(CoreML::MIL::Opsets::CoreML7Opset *this)
{
  return "CoreML7";
}

void CoreML::MIL::Opsets::CoreML8Opset::~CoreML8Opset(CoreML::MIL::Opsets::CoreML8Opset *this)
{
  MIL::IROpset::~IROpset(this);
  JUMPOUT(0x1A1AD6260);
}

const char *CoreML::MIL::Opsets::CoreML8Opset::GetName(CoreML::MIL::Opsets::CoreML8Opset *this)
{
  return "CoreML8";
}

void CoreML::MIL::Opsets::RegisterCoreMLOpsets(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  char v6;
  MIL::Opsets::Common::ios15::ios15Opset *v7;
  unsigned __int8 *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  char v15;
  MIL::Opsets::Common::ios16::ios16Opset *v16;
  unsigned __int8 *v17;
  char v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  char v24;
  MIL::Opsets::Train::ios16Train::ios16_trainOpset *v25;
  unsigned __int8 *v26;
  char v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  char v33;
  MIL::Opsets::Common::ios17::ios17Opset *v34;
  unsigned __int8 *v35;
  char v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  char v42;
  MIL::Opsets::Common::ios18::ios18Opset *v43;
  unsigned __int8 *v44;
  char v45;
  _QWORD *v46;
  std::runtime_error *exception;
  std::string *v48;
  __int128 v49;
  uint64_t OpsetName;
  unint64_t v51;
  std::string::size_type v52;
  std::runtime_error *v53;
  std::string *v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  size_t v58;
  std::runtime_error *v59;
  std::string *v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  std::string::size_type v64;
  std::runtime_error *v65;
  std::string *v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  size_t v70;
  std::runtime_error *v71;
  std::string *v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  std::string::size_type v76;
  std::runtime_error *v77;
  std::string *v78;
  __int128 v79;
  uint64_t v80;
  unint64_t v81;
  size_t v82;
  std::runtime_error *v83;
  std::string *v84;
  __int128 v85;
  uint64_t v86;
  unint64_t v87;
  std::string::size_type v88;
  std::runtime_error *v89;
  std::string *v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;
  size_t v94;
  std::runtime_error *v95;
  std::string *v96;
  __int128 v97;
  uint64_t v98;
  unint64_t v99;
  std::string::size_type v100;
  std::runtime_error *v101;
  std::string *v102;
  __int128 v103;
  uint64_t v104;
  unint64_t v105;
  size_t v106;
  const void *v107;
  _BYTE *p_dst;
  const void *v109;
  const std::string::value_type **v110;
  const void *v111;
  _BYTE *v112;
  const void *v113;
  const std::string::value_type **v114;
  const void *v115;
  _BYTE *v116;
  const void *v117;
  const std::string::value_type **v118;
  const void *v119;
  _BYTE *v120;
  const void *v121;
  const std::string::value_type **v122;
  const void *v123;
  _BYTE *v124;
  const void *v125;
  const std::string::value_type **v126;
  uint64_t v127;
  uint64_t v128;
  std::string *v129;
  std::string::size_type size;
  std::string *v131;
  __int128 v132;
  std::string *v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  const std::string::value_type *v137;
  std::string::size_type v138;
  std::string *v139;
  __int128 v140;
  std::string *v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  std::string *v145;
  std::string::size_type v146;
  std::string *v147;
  __int128 v148;
  std::string *v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  const std::string::value_type *v153;
  std::string::size_type v154;
  std::string *v155;
  __int128 v156;
  std::string *v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  std::string *v161;
  std::string::size_type v162;
  std::string *v163;
  __int128 v164;
  std::string *v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  const std::string::value_type *v169;
  std::string::size_type v170;
  std::string *v171;
  __int128 v172;
  std::string *v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  std::string *v177;
  std::string::size_type v178;
  std::string *v179;
  __int128 v180;
  std::string *v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  const std::string::value_type *v185;
  std::string::size_type v186;
  std::string *v187;
  __int128 v188;
  std::string *v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  std::string *v193;
  std::string::size_type v194;
  std::string *v195;
  __int128 v196;
  std::string *v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  const std::string::value_type *v201;
  std::string::size_type v202;
  std::string *v203;
  __int128 v204;
  std::string *v205;
  __int128 v206;
  _QWORD *v207;
  void *__p[2];
  char v209;
  _BYTE v210[32];
  int v211;
  __int128 v212;
  __int128 v213;
  int v214;
  const std::string::value_type *v215;
  std::string::size_type v216;
  int64_t v217;
  std::string __dst;
  std::string v219;
  std::string v220;
  std::string v221;
  _BYTE v222[16];
  unsigned __int8 *v223;
  _QWORD *v224;
  __int128 *v225;
  char v226;
  __int128 v227;
  __int128 v228;
  int v229;
  uint64_t v230;

  v230 = *MEMORY[0x1E0C80C00];
  v209 = 7;
  strcpy((char *)__p, "CoreML5");
  v2 = (_QWORD *)operator new();
  v212 = 0u;
  v213 = 0u;
  v214 = 1065353216;
  v3 = operator new(0x48uLL);
  v224 = v3;
  v225 = &v213;
  v226 = 0;
  *v3 = 0;
  v3[1] = 0;
  v4 = std::string::basic_string[abi:ne180100]<0>(v3 + 2, "classify");
  v3[5] = &off_1E3D5B938;
  v3[6] = a1;
  v3[8] = v3 + 5;
  v226 = 1;
  v3[1] = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v4);
  if ((std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__node_insert_unique((uint64_t)&v212, (unsigned __int8 *)v3) & 1) != 0)v224 = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v224);
  std::string::basic_string[abi:ne180100]<0>(&v227, "*");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v224, (unsigned __int8 *)&v227, 1);
  if (SBYTE7(v228) < 0)
    operator delete((void *)v227);
  v227 = 0u;
  v228 = 0u;
  v229 = 1065353216;
  MIL::Opsets::Common::ios15::ios15Opset::GetOperatorConstructors();
  v5 = v223;
  if (v223)
  {
    while (1)
    {
      if (MIL::Util::OpMatchesPattern())
      {
        if ((MIL::Util::OpMatchesPattern() & 1) == 0)
        {
          std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__emplace_unique_key_args<std::string,std::string const&,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>((uint64_t)&v212, v5 + 16, (uint64_t)(v5 + 16), (_QWORD *)v5 + 5);
          if (!v6)
            break;
        }
      }
      v5 = *(unsigned __int8 **)v5;
      if (!v5)
        goto LABEL_10;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v48 = std::string::append(&v219, "' from opset '");
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v220.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    OpsetName = MIL::Opsets::Common::ios15::ios15Opset::GetOpsetName((MIL::Opsets::Common::ios15::ios15Opset *)v48);
    v52 = v51;
    if (v51 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v107 = (const void *)OpsetName;
    if (v51 >= 0x17)
    {
      v127 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v51 | 7) != 0x17)
        v127 = v51 | 7;
      v128 = v127 + 1;
      p_dst = operator new(v127 + 1);
      __dst.__r_.__value_.__l.__size_ = v52;
      __dst.__r_.__value_.__r.__words[2] = v128 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v51;
      p_dst = &__dst;
      if (!v51)
      {
LABEL_156:
        p_dst[v52] = 0;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v129 = &__dst;
        else
          v129 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          size = __dst.__r_.__value_.__l.__size_;
        v131 = std::string::append(&v220, (const std::string::value_type *)v129, size);
        v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        v221.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v132;
        v131->__r_.__value_.__l.__size_ = 0;
        v131->__r_.__value_.__r.__words[2] = 0;
        v131->__r_.__value_.__r.__words[0] = 0;
        v133 = std::string::append(&v221, " because the operator is already registered.");
        v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
        *(_QWORD *)&v210[16] = *((_QWORD *)&v133->__r_.__value_.__l + 2);
        *(_OWORD *)v210 = v134;
        v133->__r_.__value_.__l.__size_ = 0;
        v133->__r_.__value_.__r.__words[2] = 0;
        v133->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)v210);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    memmove(p_dst, v107, v52);
    goto LABEL_156;
  }
LABEL_10:
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)v222);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v227);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v224);
  memset(v210, 0, sizeof(v210));
  v211 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_impl<char const(&)[9],char const(&)[9]>((uint64_t)v210);
  std::string::basic_string[abi:ne180100]<0>(&v227, "*");
  v7 = (MIL::Opsets::Common::ios15::ios15Opset *)std::unordered_set<std::string>::unordered_set((uint64_t)&v224, (unsigned __int8 *)&v227, 1);
  if (SBYTE7(v228) < 0)
    operator delete((void *)v227);
  v227 = 0u;
  v228 = 0u;
  v229 = 1065353216;
  MIL::Opsets::Common::ios15::ios15Opset::GetOperatorNameToNameMap(v7);
  v8 = v223;
  if (v223)
  {
    while (1)
    {
      if (MIL::Util::OpMatchesPattern())
      {
        if ((MIL::Util::OpMatchesPattern() & 1) == 0)
        {
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string const&,std::string&>((uint64_t)v210, v8 + 16, (uint64_t)(v8 + 16), (uint64_t)(v8 + 40));
          if (!v9)
            break;
        }
      }
      v8 = *(unsigned __int8 **)v8;
      if (!v8)
        goto LABEL_17;
    }
    v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v54 = std::string::append(&__dst, "' from opset '");
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v219.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    v56 = MIL::Opsets::Common::ios15::ios15Opset::GetOpsetName((MIL::Opsets::Common::ios15::ios15Opset *)v54);
    v58 = v57;
    if (v57 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v109 = (const void *)v56;
    if (v57 >= 0x17)
    {
      v135 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v57 | 7) != 0x17)
        v135 = v57 | 7;
      v136 = v135 + 1;
      v110 = (const std::string::value_type **)operator new(v135 + 1);
      v216 = v58;
      v217 = v136 | 0x8000000000000000;
      v215 = (const std::string::value_type *)v110;
    }
    else
    {
      HIBYTE(v217) = v57;
      v110 = &v215;
      if (!v57)
      {
LABEL_167:
        *((_BYTE *)v110 + v58) = 0;
        if (v217 >= 0)
          v137 = (const std::string::value_type *)&v215;
        else
          v137 = v215;
        if (v217 >= 0)
          v138 = HIBYTE(v217);
        else
          v138 = v216;
        v139 = std::string::append(&v219, v137, v138);
        v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
        v220.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v140;
        v139->__r_.__value_.__l.__size_ = 0;
        v139->__r_.__value_.__r.__words[2] = 0;
        v139->__r_.__value_.__r.__words[0] = 0;
        v141 = std::string::append(&v220, " because the operator is already registered.");
        v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
        v221.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v142;
        v141->__r_.__value_.__l.__size_ = 0;
        v141->__r_.__value_.__r.__words[2] = 0;
        v141->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v53, &v221);
        __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    memmove(v110, v109, v58);
    goto LABEL_167;
  }
LABEL_17:
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v222);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v227);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v224);
  MIL::IROpset::IROpset();
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v210);
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)&v212);
  *v2 = &off_1E3D59708;
  v207 = v2;
  (*(void (**)(uint64_t, void **, _QWORD **))(*(_QWORD *)a1 + 32))(a1, __p, &v207);
  v10 = v207;
  v207 = 0;
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  if (v209 < 0)
    operator delete(__p[0]);
  v209 = 7;
  strcpy((char *)__p, "CoreML6");
  v11 = (_QWORD *)operator new();
  v212 = 0u;
  v213 = 0u;
  v214 = 1065353216;
  v12 = operator new(0x48uLL);
  v224 = v12;
  v225 = &v213;
  v226 = 0;
  *v12 = 0;
  v12[1] = 0;
  v13 = std::string::basic_string[abi:ne180100]<0>(v12 + 2, "classify");
  v12[5] = &off_1E3D5B990;
  v12[6] = a1;
  v12[8] = v12 + 5;
  v226 = 1;
  v12[1] = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v13);
  if ((std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__node_insert_unique((uint64_t)&v212, (unsigned __int8 *)v12) & 1) != 0)v224 = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v224);
  std::string::basic_string[abi:ne180100]<0>(&v227, "*");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v224, (unsigned __int8 *)&v227, 1);
  if (SBYTE7(v228) < 0)
    operator delete((void *)v227);
  v227 = 0u;
  v228 = 0u;
  v229 = 1065353216;
  MIL::Opsets::Common::ios16::ios16Opset::GetOperatorConstructors();
  v14 = v223;
  if (v223)
  {
    while (1)
    {
      if (MIL::Util::OpMatchesPattern())
      {
        if ((MIL::Util::OpMatchesPattern() & 1) == 0)
        {
          std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__emplace_unique_key_args<std::string,std::string const&,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>((uint64_t)&v212, v14 + 16, (uint64_t)(v14 + 16), (_QWORD *)v14 + 5);
          if (!v15)
            break;
        }
      }
      v14 = *(unsigned __int8 **)v14;
      if (!v14)
        goto LABEL_30;
    }
    v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v60 = std::string::append(&v219, "' from opset '");
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v220.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    v62 = MIL::Opsets::Common::ios16::ios16Opset::GetOpsetName((MIL::Opsets::Common::ios16::ios16Opset *)v60);
    v64 = v63;
    if (v63 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v111 = (const void *)v62;
    if (v63 >= 0x17)
    {
      v143 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v63 | 7) != 0x17)
        v143 = v63 | 7;
      v144 = v143 + 1;
      v112 = operator new(v143 + 1);
      __dst.__r_.__value_.__l.__size_ = v64;
      __dst.__r_.__value_.__r.__words[2] = v144 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v63;
      v112 = &__dst;
      if (!v63)
      {
LABEL_178:
        v112[v64] = 0;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v145 = &__dst;
        else
          v145 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v146 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          v146 = __dst.__r_.__value_.__l.__size_;
        v147 = std::string::append(&v220, (const std::string::value_type *)v145, v146);
        v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
        v221.__r_.__value_.__r.__words[2] = v147->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v148;
        v147->__r_.__value_.__l.__size_ = 0;
        v147->__r_.__value_.__r.__words[2] = 0;
        v147->__r_.__value_.__r.__words[0] = 0;
        v149 = std::string::append(&v221, " because the operator is already registered.");
        v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
        *(_QWORD *)&v210[16] = *((_QWORD *)&v149->__r_.__value_.__l + 2);
        *(_OWORD *)v210 = v150;
        v149->__r_.__value_.__l.__size_ = 0;
        v149->__r_.__value_.__r.__words[2] = 0;
        v149->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v59, (const std::string *)v210);
        __cxa_throw(v59, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    memmove(v112, v111, v64);
    goto LABEL_178;
  }
LABEL_30:
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)v222);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v227);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v224);
  memset(v210, 0, sizeof(v210));
  v211 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_impl<char const(&)[9],char const(&)[9]>((uint64_t)v210);
  std::string::basic_string[abi:ne180100]<0>(&v227, "*");
  v16 = (MIL::Opsets::Common::ios16::ios16Opset *)std::unordered_set<std::string>::unordered_set((uint64_t)&v224, (unsigned __int8 *)&v227, 1);
  if (SBYTE7(v228) < 0)
    operator delete((void *)v227);
  v227 = 0u;
  v228 = 0u;
  v229 = 1065353216;
  MIL::Opsets::Common::ios16::ios16Opset::GetOperatorNameToNameMap(v16);
  v17 = v223;
  if (v223)
  {
    while (1)
    {
      if (MIL::Util::OpMatchesPattern())
      {
        if ((MIL::Util::OpMatchesPattern() & 1) == 0)
        {
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string const&,std::string&>((uint64_t)v210, v17 + 16, (uint64_t)(v17 + 16), (uint64_t)(v17 + 40));
          if (!v18)
            break;
        }
      }
      v17 = *(unsigned __int8 **)v17;
      if (!v17)
        goto LABEL_37;
    }
    v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v66 = std::string::append(&__dst, "' from opset '");
    v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v219.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    v68 = MIL::Opsets::Common::ios16::ios16Opset::GetOpsetName((MIL::Opsets::Common::ios16::ios16Opset *)v66);
    v70 = v69;
    if (v69 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v113 = (const void *)v68;
    if (v69 >= 0x17)
    {
      v151 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v69 | 7) != 0x17)
        v151 = v69 | 7;
      v152 = v151 + 1;
      v114 = (const std::string::value_type **)operator new(v151 + 1);
      v216 = v70;
      v217 = v152 | 0x8000000000000000;
      v215 = (const std::string::value_type *)v114;
    }
    else
    {
      HIBYTE(v217) = v69;
      v114 = &v215;
      if (!v69)
      {
LABEL_189:
        *((_BYTE *)v114 + v70) = 0;
        if (v217 >= 0)
          v153 = (const std::string::value_type *)&v215;
        else
          v153 = v215;
        if (v217 >= 0)
          v154 = HIBYTE(v217);
        else
          v154 = v216;
        v155 = std::string::append(&v219, v153, v154);
        v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
        v220.__r_.__value_.__r.__words[2] = v155->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v156;
        v155->__r_.__value_.__l.__size_ = 0;
        v155->__r_.__value_.__r.__words[2] = 0;
        v155->__r_.__value_.__r.__words[0] = 0;
        v157 = std::string::append(&v220, " because the operator is already registered.");
        v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
        v221.__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v158;
        v157->__r_.__value_.__l.__size_ = 0;
        v157->__r_.__value_.__r.__words[2] = 0;
        v157->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v65, &v221);
        __cxa_throw(v65, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    memmove(v114, v113, v70);
    goto LABEL_189;
  }
LABEL_37:
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v222);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v227);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v224);
  MIL::IROpset::IROpset();
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v210);
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)&v212);
  *v11 = &off_1E3D59730;
  v207 = v11;
  (*(void (**)(uint64_t, void **, _QWORD **))(*(_QWORD *)a1 + 32))(a1, __p, &v207);
  v19 = v207;
  v207 = 0;
  if (v19)
    (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  if (v209 < 0)
    operator delete(__p[0]);
  v209 = 13;
  strcpy((char *)__p, "CoreML6_train");
  v20 = (_QWORD *)operator new();
  v212 = 0u;
  v213 = 0u;
  v214 = 1065353216;
  v21 = operator new(0x48uLL);
  v224 = v21;
  v225 = &v213;
  v226 = 0;
  *v21 = 0;
  v21[1] = 0;
  v22 = std::string::basic_string[abi:ne180100]<0>(v21 + 2, "classify");
  v21[5] = &off_1E3D5BA98;
  v21[6] = a1;
  v21[8] = v21 + 5;
  v226 = 1;
  v21[1] = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v22);
  if ((std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__node_insert_unique((uint64_t)&v212, (unsigned __int8 *)v21) & 1) != 0)v224 = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v224);
  std::string::basic_string[abi:ne180100]<0>(&v227, "*");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v224, (unsigned __int8 *)&v227, 1);
  if (SBYTE7(v228) < 0)
    operator delete((void *)v227);
  v227 = 0u;
  v228 = 0u;
  v229 = 1065353216;
  MIL::Opsets::Train::ios16Train::ios16_trainOpset::GetOperatorConstructors();
  v23 = v223;
  if (v223)
  {
    while (1)
    {
      if (MIL::Util::OpMatchesPattern())
      {
        if ((MIL::Util::OpMatchesPattern() & 1) == 0)
        {
          std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__emplace_unique_key_args<std::string,std::string const&,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>((uint64_t)&v212, v23 + 16, (uint64_t)(v23 + 16), (_QWORD *)v23 + 5);
          if (!v24)
            break;
        }
      }
      v23 = *(unsigned __int8 **)v23;
      if (!v23)
        goto LABEL_50;
    }
    v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v72 = std::string::append(&v219, "' from opset '");
    v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    v220.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    v74 = MIL::Opsets::Train::ios16Train::ios16_trainOpset::GetOpsetName((MIL::Opsets::Train::ios16Train::ios16_trainOpset *)v72);
    v76 = v75;
    if (v75 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v115 = (const void *)v74;
    if (v75 >= 0x17)
    {
      v159 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v75 | 7) != 0x17)
        v159 = v75 | 7;
      v160 = v159 + 1;
      v116 = operator new(v159 + 1);
      __dst.__r_.__value_.__l.__size_ = v76;
      __dst.__r_.__value_.__r.__words[2] = v160 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v75;
      v116 = &__dst;
      if (!v75)
      {
LABEL_200:
        v116[v76] = 0;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v161 = &__dst;
        else
          v161 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v162 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          v162 = __dst.__r_.__value_.__l.__size_;
        v163 = std::string::append(&v220, (const std::string::value_type *)v161, v162);
        v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
        v221.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v164;
        v163->__r_.__value_.__l.__size_ = 0;
        v163->__r_.__value_.__r.__words[2] = 0;
        v163->__r_.__value_.__r.__words[0] = 0;
        v165 = std::string::append(&v221, " because the operator is already registered.");
        v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
        *(_QWORD *)&v210[16] = *((_QWORD *)&v165->__r_.__value_.__l + 2);
        *(_OWORD *)v210 = v166;
        v165->__r_.__value_.__l.__size_ = 0;
        v165->__r_.__value_.__r.__words[2] = 0;
        v165->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v71, (const std::string *)v210);
        __cxa_throw(v71, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    memmove(v116, v115, v76);
    goto LABEL_200;
  }
LABEL_50:
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)v222);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v227);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v224);
  memset(v210, 0, sizeof(v210));
  v211 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_impl<char const(&)[9],char const(&)[9]>((uint64_t)v210);
  std::string::basic_string[abi:ne180100]<0>(&v227, "*");
  v25 = (MIL::Opsets::Train::ios16Train::ios16_trainOpset *)std::unordered_set<std::string>::unordered_set((uint64_t)&v224, (unsigned __int8 *)&v227, 1);
  if (SBYTE7(v228) < 0)
    operator delete((void *)v227);
  v227 = 0u;
  v228 = 0u;
  v229 = 1065353216;
  MIL::Opsets::Train::ios16Train::ios16_trainOpset::GetOperatorNameToNameMap(v25);
  v26 = v223;
  if (v223)
  {
    while (1)
    {
      if (MIL::Util::OpMatchesPattern())
      {
        if ((MIL::Util::OpMatchesPattern() & 1) == 0)
        {
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string const&,std::string&>((uint64_t)v210, v26 + 16, (uint64_t)(v26 + 16), (uint64_t)(v26 + 40));
          if (!v27)
            break;
        }
      }
      v26 = *(unsigned __int8 **)v26;
      if (!v26)
        goto LABEL_57;
    }
    v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v78 = std::string::append(&__dst, "' from opset '");
    v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    v219.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    v80 = MIL::Opsets::Train::ios16Train::ios16_trainOpset::GetOpsetName((MIL::Opsets::Train::ios16Train::ios16_trainOpset *)v78);
    v82 = v81;
    if (v81 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v117 = (const void *)v80;
    if (v81 >= 0x17)
    {
      v167 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v81 | 7) != 0x17)
        v167 = v81 | 7;
      v168 = v167 + 1;
      v118 = (const std::string::value_type **)operator new(v167 + 1);
      v216 = v82;
      v217 = v168 | 0x8000000000000000;
      v215 = (const std::string::value_type *)v118;
    }
    else
    {
      HIBYTE(v217) = v81;
      v118 = &v215;
      if (!v81)
      {
LABEL_211:
        *((_BYTE *)v118 + v82) = 0;
        if (v217 >= 0)
          v169 = (const std::string::value_type *)&v215;
        else
          v169 = v215;
        if (v217 >= 0)
          v170 = HIBYTE(v217);
        else
          v170 = v216;
        v171 = std::string::append(&v219, v169, v170);
        v172 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
        v220.__r_.__value_.__r.__words[2] = v171->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v172;
        v171->__r_.__value_.__l.__size_ = 0;
        v171->__r_.__value_.__r.__words[2] = 0;
        v171->__r_.__value_.__r.__words[0] = 0;
        v173 = std::string::append(&v220, " because the operator is already registered.");
        v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
        v221.__r_.__value_.__r.__words[2] = v173->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v174;
        v173->__r_.__value_.__l.__size_ = 0;
        v173->__r_.__value_.__r.__words[2] = 0;
        v173->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v77, &v221);
        __cxa_throw(v77, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    memmove(v118, v117, v82);
    goto LABEL_211;
  }
LABEL_57:
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v222);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v227);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v224);
  MIL::IROpset::IROpset();
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v210);
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)&v212);
  *v20 = &off_1E3D597A8;
  v207 = v20;
  (*(void (**)(uint64_t, void **, _QWORD **))(*(_QWORD *)a1 + 32))(a1, __p, &v207);
  v28 = v207;
  v207 = 0;
  if (v28)
    (*(void (**)(_QWORD *))(*v28 + 8))(v28);
  if (v209 < 0)
    operator delete(__p[0]);
  v209 = 7;
  strcpy((char *)__p, "CoreML7");
  v29 = (_QWORD *)operator new();
  v212 = 0u;
  v213 = 0u;
  v214 = 1065353216;
  v30 = operator new(0x48uLL);
  v224 = v30;
  v225 = &v213;
  v226 = 0;
  *v30 = 0;
  v30[1] = 0;
  v31 = std::string::basic_string[abi:ne180100]<0>(v30 + 2, "classify");
  v30[5] = &off_1E3D5B9E8;
  v30[6] = a1;
  v30[8] = v30 + 5;
  v226 = 1;
  v30[1] = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v31);
  if ((std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__node_insert_unique((uint64_t)&v212, (unsigned __int8 *)v30) & 1) != 0)v224 = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v224);
  std::string::basic_string[abi:ne180100]<0>(&v227, "*");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v224, (unsigned __int8 *)&v227, 1);
  if (SBYTE7(v228) < 0)
    operator delete((void *)v227);
  v227 = 0u;
  v228 = 0u;
  v229 = 1065353216;
  MIL::Opsets::Common::ios17::ios17Opset::GetOperatorConstructors();
  v32 = v223;
  if (v223)
  {
    while (1)
    {
      if (MIL::Util::OpMatchesPattern())
      {
        if ((MIL::Util::OpMatchesPattern() & 1) == 0)
        {
          std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__emplace_unique_key_args<std::string,std::string const&,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>((uint64_t)&v212, v32 + 16, (uint64_t)(v32 + 16), (_QWORD *)v32 + 5);
          if (!v33)
            break;
        }
      }
      v32 = *(unsigned __int8 **)v32;
      if (!v32)
        goto LABEL_70;
    }
    v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v84 = std::string::append(&v219, "' from opset '");
    v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    v220.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    v86 = MIL::Opsets::Common::ios17::ios17Opset::GetOpsetName((MIL::Opsets::Common::ios17::ios17Opset *)v84);
    v88 = v87;
    if (v87 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v119 = (const void *)v86;
    if (v87 >= 0x17)
    {
      v175 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v87 | 7) != 0x17)
        v175 = v87 | 7;
      v176 = v175 + 1;
      v120 = operator new(v175 + 1);
      __dst.__r_.__value_.__l.__size_ = v88;
      __dst.__r_.__value_.__r.__words[2] = v176 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v120;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v87;
      v120 = &__dst;
      if (!v87)
      {
LABEL_222:
        v120[v88] = 0;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v177 = &__dst;
        else
          v177 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v178 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          v178 = __dst.__r_.__value_.__l.__size_;
        v179 = std::string::append(&v220, (const std::string::value_type *)v177, v178);
        v180 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
        v221.__r_.__value_.__r.__words[2] = v179->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v180;
        v179->__r_.__value_.__l.__size_ = 0;
        v179->__r_.__value_.__r.__words[2] = 0;
        v179->__r_.__value_.__r.__words[0] = 0;
        v181 = std::string::append(&v221, " because the operator is already registered.");
        v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
        *(_QWORD *)&v210[16] = *((_QWORD *)&v181->__r_.__value_.__l + 2);
        *(_OWORD *)v210 = v182;
        v181->__r_.__value_.__l.__size_ = 0;
        v181->__r_.__value_.__r.__words[2] = 0;
        v181->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v83, (const std::string *)v210);
        __cxa_throw(v83, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    memmove(v120, v119, v88);
    goto LABEL_222;
  }
LABEL_70:
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)v222);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v227);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v224);
  memset(v210, 0, sizeof(v210));
  v211 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_impl<char const(&)[9],char const(&)[9]>((uint64_t)v210);
  std::string::basic_string[abi:ne180100]<0>(&v227, "*");
  v34 = (MIL::Opsets::Common::ios17::ios17Opset *)std::unordered_set<std::string>::unordered_set((uint64_t)&v224, (unsigned __int8 *)&v227, 1);
  if (SBYTE7(v228) < 0)
    operator delete((void *)v227);
  v227 = 0u;
  v228 = 0u;
  v229 = 1065353216;
  MIL::Opsets::Common::ios17::ios17Opset::GetOperatorNameToNameMap(v34);
  v35 = v223;
  if (v223)
  {
    while (1)
    {
      if (MIL::Util::OpMatchesPattern())
      {
        if ((MIL::Util::OpMatchesPattern() & 1) == 0)
        {
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string const&,std::string&>((uint64_t)v210, v35 + 16, (uint64_t)(v35 + 16), (uint64_t)(v35 + 40));
          if (!v36)
            break;
        }
      }
      v35 = *(unsigned __int8 **)v35;
      if (!v35)
        goto LABEL_77;
    }
    v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v90 = std::string::append(&__dst, "' from opset '");
    v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    v219.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0;
    v90->__r_.__value_.__r.__words[2] = 0;
    v90->__r_.__value_.__r.__words[0] = 0;
    v92 = MIL::Opsets::Common::ios17::ios17Opset::GetOpsetName((MIL::Opsets::Common::ios17::ios17Opset *)v90);
    v94 = v93;
    if (v93 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v121 = (const void *)v92;
    if (v93 >= 0x17)
    {
      v183 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v93 | 7) != 0x17)
        v183 = v93 | 7;
      v184 = v183 + 1;
      v122 = (const std::string::value_type **)operator new(v183 + 1);
      v216 = v94;
      v217 = v184 | 0x8000000000000000;
      v215 = (const std::string::value_type *)v122;
    }
    else
    {
      HIBYTE(v217) = v93;
      v122 = &v215;
      if (!v93)
      {
LABEL_233:
        *((_BYTE *)v122 + v94) = 0;
        if (v217 >= 0)
          v185 = (const std::string::value_type *)&v215;
        else
          v185 = v215;
        if (v217 >= 0)
          v186 = HIBYTE(v217);
        else
          v186 = v216;
        v187 = std::string::append(&v219, v185, v186);
        v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
        v220.__r_.__value_.__r.__words[2] = v187->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v188;
        v187->__r_.__value_.__l.__size_ = 0;
        v187->__r_.__value_.__r.__words[2] = 0;
        v187->__r_.__value_.__r.__words[0] = 0;
        v189 = std::string::append(&v220, " because the operator is already registered.");
        v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
        v221.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v190;
        v189->__r_.__value_.__l.__size_ = 0;
        v189->__r_.__value_.__r.__words[2] = 0;
        v189->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v89, &v221);
        __cxa_throw(v89, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    memmove(v122, v121, v94);
    goto LABEL_233;
  }
LABEL_77:
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v222);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v227);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v224);
  MIL::IROpset::IROpset();
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v210);
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)&v212);
  *v29 = &off_1E3D59758;
  v207 = v29;
  (*(void (**)(uint64_t, void **, _QWORD **))(*(_QWORD *)a1 + 32))(a1, __p, &v207);
  v37 = v207;
  v207 = 0;
  if (v37)
    (*(void (**)(_QWORD *))(*v37 + 8))(v37);
  if (v209 < 0)
    operator delete(__p[0]);
  v209 = 7;
  strcpy((char *)__p, "CoreML8");
  v38 = (_QWORD *)operator new();
  v212 = 0u;
  v213 = 0u;
  v214 = 1065353216;
  v39 = operator new(0x48uLL);
  v224 = v39;
  v225 = &v213;
  v226 = 0;
  *v39 = 0;
  v39[1] = 0;
  v40 = std::string::basic_string[abi:ne180100]<0>(v39 + 2, "classify");
  v39[5] = &off_1E3D5BA40;
  v39[6] = a1;
  v39[8] = v39 + 5;
  v226 = 1;
  v39[1] = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v40);
  if ((std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__node_insert_unique((uint64_t)&v212, (unsigned __int8 *)v39) & 1) != 0)v224 = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v224);
  std::string::basic_string[abi:ne180100]<0>(&v227, "*");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v224, (unsigned __int8 *)&v227, 1);
  if (SBYTE7(v228) < 0)
    operator delete((void *)v227);
  v227 = 0u;
  v228 = 0u;
  v229 = 1065353216;
  MIL::Opsets::Common::ios18::ios18Opset::GetOperatorConstructors();
  v41 = v223;
  if (v223)
  {
    while (1)
    {
      if (MIL::Util::OpMatchesPattern())
      {
        if ((MIL::Util::OpMatchesPattern() & 1) == 0)
        {
          std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__emplace_unique_key_args<std::string,std::string const&,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>((uint64_t)&v212, v41 + 16, (uint64_t)(v41 + 16), (_QWORD *)v41 + 5);
          if (!v42)
            break;
        }
      }
      v41 = *(unsigned __int8 **)v41;
      if (!v41)
        goto LABEL_90;
    }
    v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v96 = std::string::append(&v219, "' from opset '");
    v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
    v220.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v97;
    v96->__r_.__value_.__l.__size_ = 0;
    v96->__r_.__value_.__r.__words[2] = 0;
    v96->__r_.__value_.__r.__words[0] = 0;
    v98 = MIL::Opsets::Common::ios18::ios18Opset::GetOpsetName((MIL::Opsets::Common::ios18::ios18Opset *)v96);
    v100 = v99;
    if (v99 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v123 = (const void *)v98;
    if (v99 >= 0x17)
    {
      v191 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v99 | 7) != 0x17)
        v191 = v99 | 7;
      v192 = v191 + 1;
      v124 = operator new(v191 + 1);
      __dst.__r_.__value_.__l.__size_ = v100;
      __dst.__r_.__value_.__r.__words[2] = v192 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v99;
      v124 = &__dst;
      if (!v99)
      {
LABEL_244:
        v124[v100] = 0;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v193 = &__dst;
        else
          v193 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v194 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          v194 = __dst.__r_.__value_.__l.__size_;
        v195 = std::string::append(&v220, (const std::string::value_type *)v193, v194);
        v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
        v221.__r_.__value_.__r.__words[2] = v195->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v196;
        v195->__r_.__value_.__l.__size_ = 0;
        v195->__r_.__value_.__r.__words[2] = 0;
        v195->__r_.__value_.__r.__words[0] = 0;
        v197 = std::string::append(&v221, " because the operator is already registered.");
        v198 = *(_OWORD *)&v197->__r_.__value_.__l.__data_;
        *(_QWORD *)&v210[16] = *((_QWORD *)&v197->__r_.__value_.__l + 2);
        *(_OWORD *)v210 = v198;
        v197->__r_.__value_.__l.__size_ = 0;
        v197->__r_.__value_.__r.__words[2] = 0;
        v197->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v95, (const std::string *)v210);
        __cxa_throw(v95, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    memmove(v124, v123, v100);
    goto LABEL_244;
  }
LABEL_90:
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)v222);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v227);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v224);
  memset(v210, 0, sizeof(v210));
  v211 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_impl<char const(&)[9],char const(&)[9]>((uint64_t)v210);
  std::string::basic_string[abi:ne180100]<0>(&v227, "*");
  v43 = (MIL::Opsets::Common::ios18::ios18Opset *)std::unordered_set<std::string>::unordered_set((uint64_t)&v224, (unsigned __int8 *)&v227, 1);
  if (SBYTE7(v228) < 0)
    operator delete((void *)v227);
  v227 = 0u;
  v228 = 0u;
  v229 = 1065353216;
  MIL::Opsets::Common::ios18::ios18Opset::GetOperatorNameToNameMap(v43);
  v44 = v223;
  if (v223)
  {
    while (1)
    {
      if (MIL::Util::OpMatchesPattern())
      {
        if ((MIL::Util::OpMatchesPattern() & 1) == 0)
        {
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string const&,std::string&>((uint64_t)v210, v44 + 16, (uint64_t)(v44 + 16), (uint64_t)(v44 + 40));
          if (!v45)
            break;
        }
      }
      v44 = *(unsigned __int8 **)v44;
      if (!v44)
        goto LABEL_97;
    }
    v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v102 = std::string::append(&__dst, "' from opset '");
    v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
    v219.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v103;
    v102->__r_.__value_.__l.__size_ = 0;
    v102->__r_.__value_.__r.__words[2] = 0;
    v102->__r_.__value_.__r.__words[0] = 0;
    v104 = MIL::Opsets::Common::ios18::ios18Opset::GetOpsetName((MIL::Opsets::Common::ios18::ios18Opset *)v102);
    v106 = v105;
    if (v105 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v125 = (const void *)v104;
    if (v105 >= 0x17)
    {
      v199 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v105 | 7) != 0x17)
        v199 = v105 | 7;
      v200 = v199 + 1;
      v126 = (const std::string::value_type **)operator new(v199 + 1);
      v216 = v106;
      v217 = v200 | 0x8000000000000000;
      v215 = (const std::string::value_type *)v126;
    }
    else
    {
      HIBYTE(v217) = v105;
      v126 = &v215;
      if (!v105)
      {
LABEL_255:
        *((_BYTE *)v126 + v106) = 0;
        if (v217 >= 0)
          v201 = (const std::string::value_type *)&v215;
        else
          v201 = v215;
        if (v217 >= 0)
          v202 = HIBYTE(v217);
        else
          v202 = v216;
        v203 = std::string::append(&v219, v201, v202);
        v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
        v220.__r_.__value_.__r.__words[2] = v203->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v204;
        v203->__r_.__value_.__l.__size_ = 0;
        v203->__r_.__value_.__r.__words[2] = 0;
        v203->__r_.__value_.__r.__words[0] = 0;
        v205 = std::string::append(&v220, " because the operator is already registered.");
        v206 = *(_OWORD *)&v205->__r_.__value_.__l.__data_;
        v221.__r_.__value_.__r.__words[2] = v205->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v206;
        v205->__r_.__value_.__l.__size_ = 0;
        v205->__r_.__value_.__r.__words[2] = 0;
        v205->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v101, &v221);
        __cxa_throw(v101, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    memmove(v126, v125, v106);
    goto LABEL_255;
  }
LABEL_97:
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v222);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v227);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v224);
  MIL::IROpset::IROpset();
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v210);
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)&v212);
  *v38 = &off_1E3D59780;
  v207 = v38;
  (*(void (**)(uint64_t, void **, _QWORD **))(*(_QWORD *)a1 + 32))(a1, __p, &v207);
  v46 = v207;
  v207 = 0;
  if (v46)
    (*(void (**)(_QWORD *))(*v46 + 8))(v46);
  if (v209 < 0)
    operator delete(__p[0]);
}

void sub_19C99048C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;
  void *v56;
  int v57;
  uint64_t v58;

  if (*(char *)(v58 - 201) < 0)
    operator delete(*(void **)(v58 - 224));
  if (a55 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (a48 < 0)
    operator delete(a43);
  if (a42 < 0)
  {
    operator delete(a37);
    if ((v57 & 1) == 0)
    {
LABEL_14:
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v58 - 192);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v58 - 112);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v58 - 152);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a16);
      std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)&a25);
      MEMORY[0x1A1AD6260](v55, 0xA1C40BD48D6D6);
      _Unwind_Resume(a1);
    }
  }
  else if (!v57)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v56);
  goto LABEL_14;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_impl<char const(&)[9],char const(&)[9]>(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint8x8_t v19;
  uint64_t v20;
  unsigned __int8 **v21;
  unint64_t v22;
  _QWORD v23[2];
  char v24;

  v2 = (unsigned __int8 **)(a1 + 16);
  v3 = (unsigned __int8 *)operator new(0x40uLL);
  v23[0] = v3;
  v23[1] = v2;
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v3 + 2, "classify");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v3 + 5, "classify");
  v24 = 1;
  *((_QWORD *)v3 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v3 + 16));
  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v3 + 16));
  v5 = v4;
  *((_QWORD *)v3 + 1) = v4;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
    {
      v9 = v4;
      if (v6 <= v4)
        v9 = v4 % v6;
    }
    else
    {
      v9 = (v6 - 1) & v4;
    }
    v10 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = *(unsigned __int8 **)i)
      {
        v12 = *((_QWORD *)i + 1);
        if (v12 == v5)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v3 + 16))
            goto LABEL_39;
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v6)
              v12 %= v6;
          }
          else
          {
            v12 &= v6 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v6 || (float)(v14 * (float)v6) < v13)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v18);
    v6 = *(_QWORD *)(a1 + 8);
    v5 = *((_QWORD *)v3 + 1);
  }
  v19 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.u32[0] > 1uLL)
  {
    if (v5 >= v6)
      v5 %= v6;
  }
  else
  {
    v5 &= v6 - 1;
  }
  v20 = *(_QWORD *)a1;
  v21 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v5);
  if (v21)
  {
    *(_QWORD *)v3 = *v21;
LABEL_37:
    *v21 = v3;
    goto LABEL_38;
  }
  *(_QWORD *)v3 = *v2;
  *v2 = v3;
  *(_QWORD *)(v20 + 8 * v5) = v2;
  if (*(_QWORD *)v3)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v3 + 8);
    if (v19.u32[0] > 1uLL)
    {
      if (v22 >= v6)
        v22 %= v6;
    }
    else
    {
      v22 &= v6 - 1;
    }
    v21 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_37;
  }
LABEL_38:
  ++*(_QWORD *)(a1 + 24);
  v23[0] = 0;
LABEL_39:
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v23);
}

void sub_19C990B3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string const&,std::string&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  char **v14;
  char *i;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  std::string *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD v30[2];
  char v31;

  v9 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(char ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(char **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = (char *)operator new(0x40uLL);
  i = v18;
  v30[0] = v18;
  v30[1] = a1 + 16;
  v31 = 0;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v18 + 16), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
    *((_QWORD *)v18 + 4) = *(_QWORD *)(a3 + 16);
  }
  v19 = (std::string *)(i + 40);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    *((_QWORD *)i + 7) = *(_QWORD *)(a4 + 16);
  }
  v31 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_44:
    *v27 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_44;
  }
LABEL_45:
  v30[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v30);
  return i;
}

void sub_19C990E04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__node_insert_unique(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint8x8_t v20;
  unsigned __int8 **v21;
  unint64_t v22;

  v4 = a2 + 16;
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a2 + 16));
  v6 = v5;
  *((_QWORD *)a2 + 1) = v5;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      v10 = v5;
      if (v7 <= v5)
        v10 = v5 % v7;
    }
    else
    {
      v10 = (v7 - 1) & v5;
    }
    v11 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = *(unsigned __int8 **)i)
      {
        v13 = *((_QWORD *)i + 1);
        if (v13 == v6)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v4))
            return 0;
        }
        else
        {
          if (v9 > 1)
          {
            if (v13 >= v7)
              v13 %= v7;
          }
          else
          {
            v13 &= v7 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    v6 = *((_QWORD *)a2 + 1);
  }
  v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v20.i16[0] = vaddlv_u8(v20);
  if (v20.u32[0] > 1uLL)
  {
    if (v6 >= v7)
      v6 %= v7;
  }
  else
  {
    v6 &= v7 - 1;
  }
  v21 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v6);
  if (v21)
  {
    *(_QWORD *)a2 = *v21;
LABEL_37:
    *v21 = a2;
    goto LABEL_38;
  }
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = a1 + 16;
  if (*(_QWORD *)a2)
  {
    v22 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v20.u32[0] > 1uLL)
    {
      if (v22 >= v7)
        v22 %= v7;
    }
    else
    {
      v22 &= v7 - 1;
    }
    v21 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_37;
  }
LABEL_38:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

char *std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__emplace_unique_key_args<std::string,std::string const&,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  std::string *v18;
  _QWORD *v19;
  _QWORD *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD v31[2];
  char v32;

  v9 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          v16 = *((_QWORD *)v15 + 1);
          if (v16 == v10)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v15 + 16, a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v15 = (char *)operator new(0x48uLL);
  v31[0] = v15;
  v31[1] = a1 + 16;
  v32 = 0;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  v18 = (std::string *)(v15 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v15 + 4) = *(_QWORD *)(a3 + 16);
  }
  v19 = a4 + 3;
  v20 = (_QWORD *)a4[3];
  if (v20)
  {
    if (v20 == a4)
    {
      *((_QWORD *)v15 + 8) = v15 + 40;
      (*(void (**)(_QWORD *))(*a4 + 24))(a4);
      goto LABEL_27;
    }
    *((_QWORD *)v15 + 8) = v20;
  }
  else
  {
    v19 = v15 + 64;
  }
  *v19 = 0;
LABEL_27:
  v32 = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v11 || (float)(v22 * (float)v11) < v21)
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v26);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *(_QWORD *)v15 = *v28;
LABEL_47:
    *v28 = v15;
    goto LABEL_48;
  }
  *(_QWORD *)v15 = *v17;
  *v17 = v15;
  *(_QWORD *)(v27 + 8 * v4) = v17;
  if (*(_QWORD *)v15)
  {
    v29 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v29 >= v11)
        v29 %= v11;
    }
    else
    {
      v29 &= v11 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_47;
  }
LABEL_48:
  v31[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v31);
  return v15;
}

void sub_19C9912F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AD6260);
}

_QWORD *std::__function::__func<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D5BA40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D5BA40;
  a2[1] = v2;
  return result;
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *__p[2];
  char v5;

  v3 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "classify");
  CoreML::MIL::Operators::CoreML::Classify::Make(a2, v3, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_19C9913D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6CoreML3MIL6Opsets12CoreML8Opset23GetOperatorConstructorsERN3MIL10MILContextEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target_type()
{
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AD6260);
}

_QWORD *std::__function::__func<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D5B9E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D5B9E8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *__p[2];
  char v5;

  v3 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "classify");
  CoreML::MIL::Operators::CoreML::Classify::Make(a2, v3, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_19C9914F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6CoreML3MIL6Opsets12CoreML7Opset23GetOperatorConstructorsERN3MIL10MILContextEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target_type()
{
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AD6260);
}

_QWORD *std::__function::__func<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D5BA98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D5BA98;
  a2[1] = v2;
  return result;
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *__p[2];
  char v5;

  v3 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "classify");
  CoreML::MIL::Operators::CoreML::Classify::Make(a2, v3, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_19C991610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6CoreML3MIL6Opsets18CoreML6_trainOpset23GetOperatorConstructorsERN3MIL10MILContextEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target_type()
{
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AD6260);
}

_QWORD *std::__function::__func<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D5B990;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D5B990;
  a2[1] = v2;
  return result;
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *__p[2];
  char v5;

  v3 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "classify");
  CoreML::MIL::Operators::CoreML::Classify::Make(a2, v3, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_19C991730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6CoreML3MIL6Opsets12CoreML6Opset23GetOperatorConstructorsERN3MIL10MILContextEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target_type()
{
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AD6260);
}

_QWORD *std::__function::__func<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D5B938;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D5B938;
  a2[1] = v2;
  return result;
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *__p[2];
  char v5;

  v3 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "classify");
  CoreML::MIL::Operators::CoreML::Classify::Make(a2, v3, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_19C991850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6CoreML3MIL6Opsets12CoreML5Opset23GetOperatorConstructorsERN3MIL10MILContextEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target_type()
{
}

void CoreML::MIL::Operators::CoreML::CustomValidators::ValidateClassify(CoreML::MIL::Operators::CoreML::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  uint64_t ParameterValue;
  MIL::IRValueType *v8;
  uint64_t v9;
  MIL::IRValueType *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  MIL::IRValueType *OutputType;
  MIL::IRTensorValueType *v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t Type;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  MIL::IRTensorValueType *v27;
  uint64_t v28;
  uint64_t v29;
  MIL::IRTensorValueType *v30;
  BOOL v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  unint64_t *v59;
  void *v60[2];
  char v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  void *__p[2];
  char v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  void *v68[2];
  char v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  void *v72[2];
  char v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  void *v76[2];
  char v77;
  uint64_t v78;
  std::__shared_weak_count *v79;

  std::string::basic_string[abi:ne180100]<0>(v76, "probabilities");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v77 < 0)
    operator delete(v76[0]);
  std::string::basic_string[abi:ne180100]<0>(v76, "classes");
  ParameterValue = MIL::IROperation::GetParameterValue();
  if (v77 < 0)
    operator delete(v76[0]);
  v8 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 32))(ParameterValue);
  v9 = MIL::IRValueType::AsListType(v8);
  v10 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  v12 = *(_QWORD **)v11;
  v13 = *(_QWORD **)(v11 + 8);
  if (*(_QWORD **)v11 != v13)
  {
    v14 = 0;
    while (1)
    {
      v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v12 + 16))(*v12);
      if (!v15)
        break;
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15);
      if (((v16 != 1) & v14) == 1)
      {
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v56 = (std::__shared_weak_count *)LocationPtr[1];
        v74 = *LocationPtr;
        v75 = v56;
        if (v56)
        {
          p_shared_owners = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldxr(p_shared_owners);
          while (__stxr(v58 + 1, p_shared_owners));
        }
        std::string::basic_string[abi:ne180100]<0>(v72, "Classifier probabilities can have a maximum of one dimension that is not rank 1.");
        MEMORY[0x1A1AD53F0](a2, &v74, 304, v72);
        if (v73 < 0)
          operator delete(v72[0]);
        v37 = v75;
        if (v75)
        {
          v59 = (unint64_t *)&v75->__shared_owners_;
          do
            v39 = __ldaxr(v59);
          while (__stlxr(v39 - 1, v59));
          goto LABEL_69;
        }
        return;
      }
      v14 |= v16 != 1;
      if (++v12 == v13)
        goto LABEL_10;
    }
    v50 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v51 = (std::__shared_weak_count *)v50[1];
    v70 = *v50;
    v71 = v51;
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    std::string::basic_string[abi:ne180100]<0>(v68, "Classifier probabilities must have a fully known shape.");
    MEMORY[0x1A1AD53F0](a2, &v70, 304, v68);
    if (v69 < 0)
      operator delete(v68[0]);
    v37 = v71;
    if (v71)
    {
      v54 = (unint64_t *)&v71->__shared_owners_;
      do
        v39 = __ldaxr(v54);
      while (__stlxr(v39 - 1, v54));
      goto LABEL_69;
    }
    return;
  }
LABEL_10:
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6) != v17)
  {
    v40 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v41 = (std::__shared_weak_count *)v40[1];
    v66 = *v40;
    v67 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Arguments not of the same length in classify operation");
    MEMORY[0x1A1AD53F0](a2, &v66, 304, __p);
    if (v65 < 0)
      operator delete(__p[0]);
    v37 = v67;
    if (!v67)
      return;
    v44 = (unint64_t *)&v67->__shared_owners_;
    do
      v39 = __ldaxr(v44);
    while (__stlxr(v39 - 1, v44));
LABEL_69:
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
    return;
  }
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this);
  v19 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(OutputType);
  if (!MIL::IRTensorValueType::IsScalar(v19)
    || (v20 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v19 + 88))(v19),
        v21 = MIL::IRValueType::AsTensorType(v10),
        v20 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 88))(v21)))
  {
    v45 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v46 = (std::__shared_weak_count *)v45[1];
    v62 = *v45;
    v63 = v46;
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    std::string::basic_string[abi:ne180100]<0>(v60, "Incorrect type for class prediction output of classify operation");
    MEMORY[0x1A1AD53F0](a2, &v62, 313, v60);
    if (v61 < 0)
      operator delete(v60[0]);
    v37 = v63;
    if (!v63)
      return;
    v49 = (unint64_t *)&v63->__shared_owners_;
    do
      v39 = __ldaxr(v49);
    while (__stlxr(v39 - 1, v49));
    goto LABEL_69;
  }
  if ((unint64_t)(*(uint64_t (**)(CoreML::MIL::Operators::CoreML::CustomValidators *))(*(_QWORD *)this + 192))(this) < 2)
    goto LABEL_74;
  v22 = (_QWORD *)(*(uint64_t (**)(CoreML::MIL::Operators::CoreML::CustomValidators *))(*(_QWORD *)this + 176))(this);
  if (v22[1] - *v22 <= 0x10uLL)
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__throw_out_of_range[abi:ne180100]();
  Type = MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*v22 + 16));
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 48))(Type);
  if (v24)
  {
    v25 = v24;
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 64))(v24);
    v27 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 72))(v25);
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
    if (v27)
    {
      v30 = (MIL::IRTensorValueType *)v29;
      if (MIL::IRTensorValueType::IsScalar(v27) && v30 != 0)
      {
        v32 = MIL::IRTensorValueType::IsScalar(v30) && v27 == v10;
        if (v32
          && ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v30 + 88))(v30) == 6
           || (*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v30 + 88))(v30) == 5))
        {
LABEL_74:
          MIL::ValidationResult::ValidationResult(a2);
          return;
        }
      }
    }
  }
  v33 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v34 = (std::__shared_weak_count *)v33[1];
  v78 = *v33;
  v79 = v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  std::string::basic_string[abi:ne180100]<0>(v76, "Incorrect type for probabilities output of classify operation");
  MEMORY[0x1A1AD53F0](a2, &v78, 313, v76);
  if (v77 < 0)
    operator delete(v76[0]);
  v37 = v79;
  if (v79)
  {
    v38 = (unint64_t *)&v79->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    goto LABEL_69;
  }
}

void sub_19C991DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (*(char *)(v39 - 97) < 0)
    operator delete(*(void **)(v39 - 120));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v39 - 96);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<MIL::Passes::FlattenBlockNamespace>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    MEMORY[0x1A1AD5600]();
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

void CoreML::MIL::CoreMLUtil::MakeProtoParserOptions(MIL::ParserOptions *a1, uint64_t a2)
{
  uint64_t v4;
  void *__p[2];
  uint64_t v6;

  MIL::ParserOptions::Make(a1);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)a1 + 64))(*(_QWORD *)a1, 1);
  v4 = *(_QWORD *)a1;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 48))(v4, __p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_19C991F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t *v14;
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  v16 = *v14;
  *v14 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(exception_object);
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::~AudioFeaturePrint_Sound(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  *(_QWORD *)this = &off_1E3D4D788;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D4D788;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound");
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  return CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(this, 0);
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *v3;

  v3 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)operator new();
  CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::AudioFeaturePrint_Sound(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>(a2, v3);
  return v3;
}

void sub_19C992098(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::MessageLite::GetArena(google::protobuf::MessageLite *this)
{
  return 0;
}

uint64_t google::protobuf::MessageLite::GetMaybeArenaPointer(google::protobuf::MessageLite *this)
{
  return (*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)this + 40))(this);
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::IsInitialized(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  return 1;
}

std::string *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
    LODWORD(v3->__r_.__value_.__r.__words[2]) = v5;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  char *v11;
  int v12;
  uint64_t Varint32Fallback;

  do
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1])
      {
        v12 = 0;
      }
      else
      {
        v12 = *v11;
        if ((*v11 & 0x80000000) == 0)
        {
          *a2 = v11 + 1;
          goto LABEL_22;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback((google::protobuf::io::CodedInputStream *)a2, v12);
      v12 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_22:
      *((_DWORD *)this + 4) = v12;
    }
    if ((_DWORD)v7)
      v10 = (v7 & 7) == 4;
    else
      v10 = 1;
    if (v10)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::ByteSizeLong(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0)
      v2 = 11;
    else
      v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v2 = 0;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  signed int v5;

  v5 = *(_DWORD *)(this + 16);
  if (v5)
    return google::protobuf::internal::WireFormatLite::WriteEnum(1, v5, a2, a4);
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::GetCachedSize(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  return *((unsigned int *)this + 5);
}

std::string *google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(uint64_t *a1, uint64_t a2)
{
  std::string *v3;
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;

  if ((*a1 & 1) != 0)
    v3 = (std::string *)(*a1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = (std::string *)google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(a1);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)a2;
  else
    v5 = *(const std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  return std::string::append(v3, v5, v6);
}

uint64_t google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(uint64_t *a1)
{
  unint64_t *v2;
  uint64_t Aligned;
  google::protobuf::Arena **v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = (unint64_t *)(*a1 & 0xFFFFFFFFFFFFFFFELL);
  if ((*a1 & 1) == 0)
  {
    if (v2)
      goto LABEL_3;
LABEL_7:
    Aligned = operator new();
    *(_OWORD *)Aligned = 0u;
    *(_OWORD *)(Aligned + 16) = 0u;
    goto LABEL_8;
  }
  v2 = (unint64_t *)v2[3];
  if (!v2)
    goto LABEL_7;
LABEL_3:
  *(_OWORD *)Aligned = 0u;
  *(_OWORD *)(Aligned + 16) = 0u;
  v4 = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)v2, 0, 24);
  *v4 = (google::protobuf::Arena *)Aligned;
  v4[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::Container>;
  v5 = v2 + 4;
  do
    v6 = __ldxr(v5);
  while (__stxr((unint64_t)v4, v5));
  v4[2] = (google::protobuf::Arena *)v6;
LABEL_8:
  *a1 = Aligned | 1;
  *(_QWORD *)(Aligned + 24) = v2;
  return Aligned;
}

void google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::Container>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::AudioFeaturePrint_Sound(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  *(_QWORD *)this = &off_1E3D4D788;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)&CoreML::Specification::CoreMLModels::_AudioFeaturePrint_Sound_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  return this;
}

void sub_19C9923E4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint::~AudioFeaturePrint(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  CoreML::Specification::CoreMLModels::AudioFeaturePrint::~AudioFeaturePrint(this);
  JUMPOUT(0x1A1AD6260);
}

{
  int v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E3D4D658;
  v2 = *((_DWORD *)this + 7);
  if (v2)
  {
    if (v2 == 20)
    {
      v3 = *((_QWORD *)this + 2);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    *((_DWORD *)this + 7) = 0;
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::CoreMLModels::AudioFeaturePrint::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.AudioFeaturePrint");
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint *CoreML::Specification::CoreMLModels::AudioFeaturePrint::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  return CoreML::Specification::CoreMLModels::AudioFeaturePrint::New(this, 0);
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint *CoreML::Specification::CoreMLModels::AudioFeaturePrint::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::AudioFeaturePrint *v3;

  v3 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)operator new();
  CoreML::Specification::CoreMLModels::AudioFeaturePrint::AudioFeaturePrint(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::AudioFeaturePrint>(a2, v3);
  return v3;
}

void sub_19C9924EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (*(_DWORD *)(this + 28) == 20)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::IsInitialized(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  return 1;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t result;
  unsigned int TagFallback;

  while (1)
  {
    while (1)
    {
      v5 = *(unsigned __int8 **)a2;
      v6 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 < v6)
        break;
      LODWORD(v8) = 0;
LABEL_22:
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_23;
LABEL_8:
      if (v9 != 162 || (v9 & 0xFFFFFFF8) != 0xA0)
        goto LABEL_23;
      if (*((_DWORD *)this + 7) == 20)
      {
        v11 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)*((_QWORD *)this + 2);
      }
      else
      {
        *((_DWORD *)this + 7) = 20;
        v11 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)operator new();
        CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::AudioFeaturePrint_Sound(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v16 = *((_DWORD *)a2 + 13);
      v17 = __OFSUB__(v16--, 1);
      *((_DWORD *)a2 + 13) = v16;
      if (v16 < 0 == v17)
      {
        v18 = v14;
        result = CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::MergePartialFromCodedStream(v11, (char **)a2, v15);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v18))
          continue;
      }
      return 0;
    }
    v7 = v5 + 1;
    v8 = *v5;
    if ((char)*v5 < 1)
    {
      if ((unint64_t)v7 < v6)
      {
        v10 = *v7;
        if ((v8 & ~v10) >= 0x80)
        {
          *(_QWORD *)a2 = v5 + 2;
          v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
          goto LABEL_8;
        }
      }
      goto LABEL_22;
    }
    *(_QWORD *)a2 = v7;
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0)
      goto LABEL_8;
LABEL_23:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C992708(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::ByteSizeLong(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  if (*((_DWORD *)this + 7) == 20)
  {
    v1 = *((_QWORD *)this + 2);
    v2 = *(_DWORD *)(v1 + 16);
    if (v2)
    {
      if (v2 < 0)
        v3 = 11;
      else
        v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v3 = 0;
    }
    *(_DWORD *)(v1 + 20) = v3;
    v4 = v3 + 3;
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 6) = v4;
  return v4;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_DWORD *)(this + 28) == 20)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x14, *(_QWORD *)(this + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::GetCachedSize(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t *CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergeFrom(uint64_t *this, const CoreML::Specification::CoreMLModels::AudioFeaturePrint *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)a2 + 7) == 20)
  {
    if (*((_DWORD *)v3 + 7) == 20)
    {
      v5 = v3[2];
    }
    else
    {
      *((_DWORD *)v3 + 7) = 20;
      v5 = operator new();
      this = (uint64_t *)CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::AudioFeaturePrint_Sound((CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)v5);
      v3[2] = v5;
      if (*((_DWORD *)a2 + 7) != 20)
      {
        this = (uint64_t *)CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto *)this);
        v6 = &CoreML::Specification::CoreMLModels::_AudioFeaturePrint_Sound_default_instance_;
        goto LABEL_9;
      }
    }
    v6 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_9:
    v7 = v6[1];
    if ((v7 & 1) != 0)
      this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v5 + 8), v7 & 0xFFFFFFFFFFFFFFFELL);
    v8 = *((_DWORD *)v6 + 4);
    if (v8)
      *(_DWORD *)(v5 + 16) = v8;
  }
  return this;
}

void sub_19C992880(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint *CoreML::Specification::CoreMLModels::AudioFeaturePrint::AudioFeaturePrint(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  *(_QWORD *)this = &off_1E3D4D658;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)&CoreML::Specification::CoreMLModels::_AudioFeaturePrint_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_19C9928F0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::AudioFeaturePrint>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void validateTrainingInputs<CoreML::Specification::NeuralNetwork>(CoreML::Result *a1, uint64_t a2, _QWORD *a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  uint64_t v33;
  std::string::size_type size;
  unsigned __int8 **v35;
  std::string::size_type v36;
  unsigned __int8 *v37;
  int v38;
  unsigned __int8 *v39;
  std::string *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned __int8 *v51;
  std::string *v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  uint64_t *v56;
  std::string::size_type v57;
  std::string::size_type v58;
  std::string *v59;
  uint64_t v60;
  std::string *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  BOOL v67;
  BOOL v68;
  _BOOL4 v69;
  char v70;
  uint64_t *v71;
  char *v72;
  uint64_t *v73;
  char *v74;
  std::string *v75;
  __int128 v76;
  void **v77;
  std::string::size_type v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  void **v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  std::string::size_type v88;
  char v89;
  void *v90;
  const void *v91;
  int v92;
  CoreML::Result *v93;
  uint64_t v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  void *__p[2];
  unsigned __int8 v101;
  void *v102[2];
  unsigned __int8 v103;
  std::string v104;
  std::string v105;
  std::string v106;
  char v107[8];
  void *v108;
  char v109;
  _QWORD v110[5];

  v110[2] = *MEMORY[0x1E0C80C00];
  CoreML::Result::Result((CoreML::Result *)v107);
  memset(&v106, 0, sizeof(v106));
  if (*(int *)(a2 + 120) <= 1)
  {
    MEMORY[0x1A1AD5EAC](&v106, "Must provide training inputs for updatable neural network (expecting both input and target for loss function).");
    *(_QWORD *)a1 = 15;
    std::operator+<char>();
    goto LABEL_162;
  }
  v93 = a1;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    if (*(int *)(a2 + 24) < 1)
    {
LABEL_8:
      if ((unint64_t)v7 >= v8)
      {
        v13 = (v7 - v6) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v8 - (_QWORD)v6) >> 1 > v14)
          v14 = (uint64_t)(v8 - (_QWORD)v6) >> 1;
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v15);
        else
          v16 = 0;
        v17 = (char *)(v15 + 4 * v13);
        *(_DWORD *)v17 = v9;
        v18 = v17 + 4;
        while (v7 != v6)
        {
          v19 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v17 - 1) = v19;
          v17 -= 4;
        }
        v8 = v15 + 4 * v16;
        if (v6)
          operator delete(v6);
        v6 = v17;
        v7 = v18;
      }
      else
      {
        *(_DWORD *)v7 = v9;
        v7 += 4;
      }
    }
    else
    {
      v10 = 0;
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 128) + 8 * v9 + 8);
      while (1)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v10 + 8);
        if (CoreML::Specification::isEquivalent(*(CoreML::Specification **)(v11 + 16), *(const CoreML::Specification::FeatureDescription **)(v11 + 32), *(const CoreML::Specification::FeatureDescription **)(v12 + 16), *(uint64_t **)(v12 + 32)))
        {
          break;
        }
        if (++v10 >= *(int *)(a2 + 24))
          goto LABEL_8;
      }
    }
    ++v9;
    v20 = *(int *)(a2 + 120);
  }
  while (v9 < v20);
  v21 = v7 - v6;
  if (v7 == v6)
  {
    MEMORY[0x1A1AD5EAC](&v106, "Training inputs don't describe required inputs for the loss (needs both the input and the target).");
    *(_QWORD *)v93 = 15;
    std::operator+<char>();
    goto LABEL_160;
  }
  v22 = v21 >> 2;
  if (v21 >> 2 == v20)
  {
    MEMORY[0x1A1AD5EAC](&v106, "The training inputs must include at least one input from the model itself as required for training (should have at least one input in common with those used for prediction).");
    *(_QWORD *)v93 = 15;
    std::operator+<char>();
    goto LABEL_160;
  }
  memset(&v105, 0, sizeof(v105));
  v23 = (uint64_t *)a3[8];
  if (!v23)
    v23 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  v24 = *(_QWORD *)(v23[4] + 8);
  if ((*(_DWORD *)(v24 + 36) & 0xFFFFFFFE) == 0xA)
    std::string::operator=(&v105, *(const std::string **)(*(_QWORD *)(v24 + 24) + 24));
  v26 = v25;
  v27 = 0;
  v28 = 0;
  if (v22 <= 1)
    v29 = 1;
  else
    v29 = v22;
  v94 = v29;
  v90 = v25;
  while (2)
  {
    v30 = *(_QWORD *)(*(_QWORD *)(a2 + 128) + 8 * *(int *)&v6[4 * v27] + 8);
    v31 = *(__int128 **)(v30 + 16);
    if (*((char *)v31 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v31, *((_QWORD *)v31 + 1));
    }
    else
    {
      v32 = *v31;
      v104.__r_.__value_.__r.__words[2] = *((_QWORD *)v31 + 2);
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v32;
    }
    v33 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    size = v104.__r_.__value_.__l.__size_;
    if (!v26)
      goto LABEL_86;
    v35 = *(unsigned __int8 ***)(a2 + 136);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    else
      v36 = v104.__r_.__value_.__l.__size_;
    v37 = (unsigned __int8 *)*((unsigned __int8 *)v35 + 23);
    v38 = (char)v37;
    if ((char)v37 < 0)
      v37 = v35[1];
    if ((unsigned __int8 *)v36 != v37)
    {
LABEL_86:
      if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
      else
        v57 = v105.__r_.__value_.__l.__size_;
      v58 = v33;
      if ((v33 & 0x80u) != 0)
        v58 = size;
      if (v57 == v58)
      {
        if ((v33 & 0x80u) == 0)
          v59 = &v104;
        else
          v59 = (std::string *)v104.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v69 = memcmp(v105.__r_.__value_.__l.__data_, v59, v105.__r_.__value_.__l.__size_) == 0;
        }
        else if (*((_BYTE *)&v105.__r_.__value_.__s + 23))
        {
          v60 = HIBYTE(v105.__r_.__value_.__r.__words[2]) - 1;
          v61 = &v105;
          do
          {
            v63 = v61->__r_.__value_.__s.__data_[0];
            v61 = (std::string *)((char *)v61 + 1);
            v62 = v63;
            v65 = v59->__r_.__value_.__s.__data_[0];
            v59 = (std::string *)((char *)v59 + 1);
            v64 = v65;
            v67 = v60-- != 0;
            v68 = v62 == v64;
            v69 = v62 == v64;
          }
          while (v68 && v67);
        }
        else
        {
          v69 = 1;
        }
      }
      else
      {
        v69 = 0;
      }
      v28 |= v69;
      v70 = 1;
      if ((v33 & 0x80) != 0)
        goto LABEL_109;
      goto LABEL_110;
    }
    if (v38 >= 0)
      v39 = *(unsigned __int8 **)(a2 + 136);
    else
      v39 = *v35;
    if ((*((_BYTE *)&v104.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v104.__r_.__value_.__l.__data_, v39, v104.__r_.__value_.__l.__size_))
        goto LABEL_86;
    }
    else if (*((_BYTE *)&v104.__r_.__value_.__s + 23))
    {
      v40 = &v104;
      v41 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      do
      {
        if (v40->__r_.__value_.__s.__data_[0] != *v39)
          goto LABEL_86;
        v40 = (std::string *)((char *)v40 + 1);
        ++v39;
        --v41;
      }
      while (v41);
    }
    v92 = v28;
    v42 = *(_QWORD *)(a2 + 56);
    if (v42)
      v43 = (uint64_t *)(v42 + 8);
    else
      v43 = 0;
    v44 = *(int *)(a2 + 48);
    if (!(_DWORD)v44)
    {
LABEL_78:
      v28 = v92;
      goto LABEL_86;
    }
    v45 = &v43[v44];
    v46 = (const void *)v104.__r_.__value_.__r.__words[0];
    while (1)
    {
      v47 = *v43;
      v48 = *(_QWORD *)(*v43 + 16);
      v49 = *(unsigned __int8 *)(v48 + 23);
      v50 = (char)v49;
      if ((v49 & 0x80u) != 0)
        v49 = *(_QWORD *)(v48 + 8);
      if (v36 != v49)
        goto LABEL_76;
      v51 = v50 >= 0 ? *(unsigned __int8 **)(*v43 + 16) : *(unsigned __int8 **)v48;
      if ((v33 & 0x80) != 0)
        break;
      if (!(_DWORD)v33)
        goto LABEL_79;
      v52 = &v104;
      v53 = v33;
      while (v52->__r_.__value_.__s.__data_[0] == *v51)
      {
        v52 = (std::string *)((char *)v52 + 1);
        ++v51;
        if (!--v53)
          goto LABEL_79;
      }
LABEL_76:
      if (++v43 == v45)
      {
        v26 = v90;
        goto LABEL_78;
      }
    }
    v91 = v46;
    v54 = memcmp(v46, v51, size);
    v46 = v91;
    if (v54)
      goto LABEL_76;
LABEL_79:
    v55 = *(uint64_t **)(v30 + 32);
    if (!v55)
      v55 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*(_QWORD *)(v47 + 32))
      v56 = *(uint64_t **)(v47 + 32);
    else
      v56 = &CoreML::Specification::_FeatureType_default_instance_;
    v26 = v90;
    v28 = v92;
    if (CoreML::Specification::operator==((unint64_t *)v55[3], *((_DWORD *)v55 + 9), (uint64_t)v56))
    {
      LODWORD(v33) = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      v28 = 1;
      size = v104.__r_.__value_.__l.__size_;
      goto LABEL_86;
    }
    v71 = *(uint64_t **)(v47 + 32);
    if (!v71)
      v71 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v71 + 9) == 1)
      v72 = "Int64";
    else
      v72 = "String";
    std::string::basic_string[abi:ne180100]<0>(v102, v72);
    v73 = *(uint64_t **)(v30 + 32);
    if (!v73)
      v73 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v73 + 9) == 1)
      v74 = "Int64";
    else
      v74 = "String";
    std::string::basic_string[abi:ne180100]<0>(__p, v74);
    std::operator+<char>();
    v75 = std::string::append(&v95, " doesn't match the expected type of the classifier. Found: ");
    v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    if ((v101 & 0x80u) == 0)
      v77 = __p;
    else
      v77 = (void **)__p[0];
    if ((v101 & 0x80u) == 0)
      v78 = v101;
    else
      v78 = (std::string::size_type)__p[1];
    v79 = std::string::append(&v96, (const std::string::value_type *)v77, v78);
    v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    v97.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    v81 = std::string::append(&v97, ", expected: ");
    v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    if ((v103 & 0x80u) == 0)
      v83 = v102;
    else
      v83 = (void **)v102[0];
    if ((v103 & 0x80u) == 0)
      v84 = v103;
    else
      v84 = (std::string::size_type)v102[1];
    v85 = std::string::append(&v98, (const std::string::value_type *)v83, v84);
    v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    v87 = std::string::append(&v99, ".");
    v88 = v87->__r_.__value_.__r.__words[0];
    v110[0] = v87->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v110 + 7) = *(std::string::size_type *)((char *)&v87->__r_.__value_.__r.__words[1] + 7);
    v89 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
    v106.__r_.__value_.__r.__words[0] = v88;
    v106.__r_.__value_.__l.__size_ = v110[0];
    *(std::string::size_type *)((char *)&v106.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v110 + 7);
    *((_BYTE *)&v106.__r_.__value_.__s + 23) = v89;
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
    *(_QWORD *)v93 = 15;
    std::operator+<char>();
    if ((char)v101 < 0)
      operator delete(__p[0]);
    if ((char)v103 < 0)
      operator delete(v102[0]);
    v70 = 0;
    if ((*((_BYTE *)&v104.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_109:
      operator delete(v104.__r_.__value_.__l.__data_);
LABEL_110:
    if ((v70 & 1) != 0)
    {
      if (++v27 == v94)
      {
        if ((v28 & 1) != 0)
        {
          CoreML::Result::Result(v93);
        }
        else
        {
          std::operator+<char>();
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v106.__r_.__value_.__l.__data_);
          v106 = v104;
          *(_QWORD *)v93 = 15;
          std::operator+<char>();
        }
        break;
      }
      continue;
    }
    break;
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
LABEL_160:
  if (v6)
    operator delete(v6);
LABEL_162:
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  if (v109 < 0)
    operator delete(v108);
}

void sub_19C99321C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  uint64_t v62;

  if (*(char *)(v62 - 193) < 0)
    operator delete(*(void **)(v62 - 216));
  if (v61)
    operator delete(v61);
  if (*(char *)(v62 - 169) < 0)
    operator delete(*(void **)(v62 - 192));
  if (*(char *)(v62 - 137) < 0)
    operator delete(*(void **)(v62 - 160));
  _Unwind_Resume(exception_object);
}

void validateTrainingInputs<CoreML::Specification::NeuralNetworkRegressor>(CoreML::Result *a1, uint64_t a2, _QWORD *a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  uint64_t v33;
  std::string::size_type size;
  unsigned __int8 **v35;
  std::string::size_type v36;
  unsigned __int8 *v37;
  int v38;
  unsigned __int8 *v39;
  std::string *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned __int8 *v51;
  std::string *v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  uint64_t *v56;
  std::string::size_type v57;
  std::string::size_type v58;
  std::string *v59;
  uint64_t v60;
  std::string *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  BOOL v67;
  BOOL v68;
  _BOOL4 v69;
  char v70;
  uint64_t *v71;
  char *v72;
  uint64_t *v73;
  char *v74;
  std::string *v75;
  __int128 v76;
  void **v77;
  std::string::size_type v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  void **v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  std::string::size_type v88;
  char v89;
  void *v90;
  const void *v91;
  int v92;
  CoreML::Result *v93;
  uint64_t v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  void *__p[2];
  unsigned __int8 v101;
  void *v102[2];
  unsigned __int8 v103;
  std::string v104;
  std::string v105;
  std::string v106;
  char v107[8];
  void *v108;
  char v109;
  _QWORD v110[5];

  v110[2] = *MEMORY[0x1E0C80C00];
  CoreML::Result::Result((CoreML::Result *)v107);
  memset(&v106, 0, sizeof(v106));
  if (*(int *)(a2 + 120) <= 1)
  {
    MEMORY[0x1A1AD5EAC](&v106, "Must provide training inputs for updatable neural network (expecting both input and target for loss function).");
    *(_QWORD *)a1 = 15;
    std::operator+<char>();
    goto LABEL_162;
  }
  v93 = a1;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    if (*(int *)(a2 + 24) < 1)
    {
LABEL_8:
      if ((unint64_t)v7 >= v8)
      {
        v13 = (v7 - v6) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v8 - (_QWORD)v6) >> 1 > v14)
          v14 = (uint64_t)(v8 - (_QWORD)v6) >> 1;
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v15);
        else
          v16 = 0;
        v17 = (char *)(v15 + 4 * v13);
        *(_DWORD *)v17 = v9;
        v18 = v17 + 4;
        while (v7 != v6)
        {
          v19 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v17 - 1) = v19;
          v17 -= 4;
        }
        v8 = v15 + 4 * v16;
        if (v6)
          operator delete(v6);
        v6 = v17;
        v7 = v18;
      }
      else
      {
        *(_DWORD *)v7 = v9;
        v7 += 4;
      }
    }
    else
    {
      v10 = 0;
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 128) + 8 * v9 + 8);
      while (1)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v10 + 8);
        if (CoreML::Specification::isEquivalent(*(CoreML::Specification **)(v11 + 16), *(const CoreML::Specification::FeatureDescription **)(v11 + 32), *(const CoreML::Specification::FeatureDescription **)(v12 + 16), *(uint64_t **)(v12 + 32)))
        {
          break;
        }
        if (++v10 >= *(int *)(a2 + 24))
          goto LABEL_8;
      }
    }
    ++v9;
    v20 = *(int *)(a2 + 120);
  }
  while (v9 < v20);
  v21 = v7 - v6;
  if (v7 == v6)
  {
    MEMORY[0x1A1AD5EAC](&v106, "Training inputs don't describe required inputs for the loss (needs both the input and the target).");
    *(_QWORD *)v93 = 15;
    std::operator+<char>();
    goto LABEL_160;
  }
  v22 = v21 >> 2;
  if (v21 >> 2 == v20)
  {
    MEMORY[0x1A1AD5EAC](&v106, "The training inputs must include at least one input from the model itself as required for training (should have at least one input in common with those used for prediction).");
    *(_QWORD *)v93 = 15;
    std::operator+<char>();
    goto LABEL_160;
  }
  memset(&v105, 0, sizeof(v105));
  v23 = (uint64_t *)a3[8];
  if (!v23)
    v23 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  v24 = *(_QWORD *)(v23[4] + 8);
  if ((*(_DWORD *)(v24 + 36) & 0xFFFFFFFE) == 0xA)
    std::string::operator=(&v105, *(const std::string **)(*(_QWORD *)(v24 + 24) + 24));
  v26 = v25;
  v27 = 0;
  v28 = 0;
  if (v22 <= 1)
    v29 = 1;
  else
    v29 = v22;
  v94 = v29;
  v90 = v25;
  while (2)
  {
    v30 = *(_QWORD *)(*(_QWORD *)(a2 + 128) + 8 * *(int *)&v6[4 * v27] + 8);
    v31 = *(__int128 **)(v30 + 16);
    if (*((char *)v31 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v31, *((_QWORD *)v31 + 1));
    }
    else
    {
      v32 = *v31;
      v104.__r_.__value_.__r.__words[2] = *((_QWORD *)v31 + 2);
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v32;
    }
    v33 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    size = v104.__r_.__value_.__l.__size_;
    if (!v26)
      goto LABEL_86;
    v35 = *(unsigned __int8 ***)(a2 + 136);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    else
      v36 = v104.__r_.__value_.__l.__size_;
    v37 = (unsigned __int8 *)*((unsigned __int8 *)v35 + 23);
    v38 = (char)v37;
    if ((char)v37 < 0)
      v37 = v35[1];
    if ((unsigned __int8 *)v36 != v37)
    {
LABEL_86:
      if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
      else
        v57 = v105.__r_.__value_.__l.__size_;
      v58 = v33;
      if ((v33 & 0x80u) != 0)
        v58 = size;
      if (v57 == v58)
      {
        if ((v33 & 0x80u) == 0)
          v59 = &v104;
        else
          v59 = (std::string *)v104.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v69 = memcmp(v105.__r_.__value_.__l.__data_, v59, v105.__r_.__value_.__l.__size_) == 0;
        }
        else if (*((_BYTE *)&v105.__r_.__value_.__s + 23))
        {
          v60 = HIBYTE(v105.__r_.__value_.__r.__words[2]) - 1;
          v61 = &v105;
          do
          {
            v63 = v61->__r_.__value_.__s.__data_[0];
            v61 = (std::string *)((char *)v61 + 1);
            v62 = v63;
            v65 = v59->__r_.__value_.__s.__data_[0];
            v59 = (std::string *)((char *)v59 + 1);
            v64 = v65;
            v67 = v60-- != 0;
            v68 = v62 == v64;
            v69 = v62 == v64;
          }
          while (v68 && v67);
        }
        else
        {
          v69 = 1;
        }
      }
      else
      {
        v69 = 0;
      }
      v28 |= v69;
      v70 = 1;
      if ((v33 & 0x80) != 0)
        goto LABEL_109;
      goto LABEL_110;
    }
    if (v38 >= 0)
      v39 = *(unsigned __int8 **)(a2 + 136);
    else
      v39 = *v35;
    if ((*((_BYTE *)&v104.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v104.__r_.__value_.__l.__data_, v39, v104.__r_.__value_.__l.__size_))
        goto LABEL_86;
    }
    else if (*((_BYTE *)&v104.__r_.__value_.__s + 23))
    {
      v40 = &v104;
      v41 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      do
      {
        if (v40->__r_.__value_.__s.__data_[0] != *v39)
          goto LABEL_86;
        v40 = (std::string *)((char *)v40 + 1);
        ++v39;
        --v41;
      }
      while (v41);
    }
    v92 = v28;
    v42 = *(_QWORD *)(a2 + 56);
    if (v42)
      v43 = (uint64_t *)(v42 + 8);
    else
      v43 = 0;
    v44 = *(int *)(a2 + 48);
    if (!(_DWORD)v44)
    {
LABEL_78:
      v28 = v92;
      goto LABEL_86;
    }
    v45 = &v43[v44];
    v46 = (const void *)v104.__r_.__value_.__r.__words[0];
    while (1)
    {
      v47 = *v43;
      v48 = *(_QWORD *)(*v43 + 16);
      v49 = *(unsigned __int8 *)(v48 + 23);
      v50 = (char)v49;
      if ((v49 & 0x80u) != 0)
        v49 = *(_QWORD *)(v48 + 8);
      if (v36 != v49)
        goto LABEL_76;
      v51 = v50 >= 0 ? *(unsigned __int8 **)(*v43 + 16) : *(unsigned __int8 **)v48;
      if ((v33 & 0x80) != 0)
        break;
      if (!(_DWORD)v33)
        goto LABEL_79;
      v52 = &v104;
      v53 = v33;
      while (v52->__r_.__value_.__s.__data_[0] == *v51)
      {
        v52 = (std::string *)((char *)v52 + 1);
        ++v51;
        if (!--v53)
          goto LABEL_79;
      }
LABEL_76:
      if (++v43 == v45)
      {
        v26 = v90;
        goto LABEL_78;
      }
    }
    v91 = v46;
    v54 = memcmp(v46, v51, size);
    v46 = v91;
    if (v54)
      goto LABEL_76;
LABEL_79:
    v55 = *(uint64_t **)(v30 + 32);
    if (!v55)
      v55 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*(_QWORD *)(v47 + 32))
      v56 = *(uint64_t **)(v47 + 32);
    else
      v56 = &CoreML::Specification::_FeatureType_default_instance_;
    v26 = v90;
    v28 = v92;
    if (CoreML::Specification::operator==((unint64_t *)v55[3], *((_DWORD *)v55 + 9), (uint64_t)v56))
    {
      LODWORD(v33) = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      v28 = 1;
      size = v104.__r_.__value_.__l.__size_;
      goto LABEL_86;
    }
    v71 = *(uint64_t **)(v47 + 32);
    if (!v71)
      v71 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v71 + 9) == 1)
      v72 = "Int64";
    else
      v72 = "String";
    std::string::basic_string[abi:ne180100]<0>(v102, v72);
    v73 = *(uint64_t **)(v30 + 32);
    if (!v73)
      v73 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v73 + 9) == 1)
      v74 = "Int64";
    else
      v74 = "String";
    std::string::basic_string[abi:ne180100]<0>(__p, v74);
    std::operator+<char>();
    v75 = std::string::append(&v95, " doesn't match the expected type of the classifier. Found: ");
    v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    if ((v101 & 0x80u) == 0)
      v77 = __p;
    else
      v77 = (void **)__p[0];
    if ((v101 & 0x80u) == 0)
      v78 = v101;
    else
      v78 = (std::string::size_type)__p[1];
    v79 = std::string::append(&v96, (const std::string::value_type *)v77, v78);
    v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    v97.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    v81 = std::string::append(&v97, ", expected: ");
    v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    if ((v103 & 0x80u) == 0)
      v83 = v102;
    else
      v83 = (void **)v102[0];
    if ((v103 & 0x80u) == 0)
      v84 = v103;
    else
      v84 = (std::string::size_type)v102[1];
    v85 = std::string::append(&v98, (const std::string::value_type *)v83, v84);
    v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    v87 = std::string::append(&v99, ".");
    v88 = v87->__r_.__value_.__r.__words[0];
    v110[0] = v87->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v110 + 7) = *(std::string::size_type *)((char *)&v87->__r_.__value_.__r.__words[1] + 7);
    v89 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
    v106.__r_.__value_.__r.__words[0] = v88;
    v106.__r_.__value_.__l.__size_ = v110[0];
    *(std::string::size_type *)((char *)&v106.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v110 + 7);
    *((_BYTE *)&v106.__r_.__value_.__s + 23) = v89;
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
    *(_QWORD *)v93 = 15;
    std::operator+<char>();
    if ((char)v101 < 0)
      operator delete(__p[0]);
    if ((char)v103 < 0)
      operator delete(v102[0]);
    v70 = 0;
    if ((*((_BYTE *)&v104.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_109:
      operator delete(v104.__r_.__value_.__l.__data_);
LABEL_110:
    if ((v70 & 1) != 0)
    {
      if (++v27 == v94)
      {
        if ((v28 & 1) != 0)
        {
          CoreML::Result::Result(v93);
        }
        else
        {
          std::operator+<char>();
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v106.__r_.__value_.__l.__data_);
          v106 = v104;
          *(_QWORD *)v93 = 15;
          std::operator+<char>();
        }
        break;
      }
      continue;
    }
    break;
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
LABEL_160:
  if (v6)
    operator delete(v6);
LABEL_162:
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  if (v109 < 0)
    operator delete(v108);
}

void sub_19C993BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  uint64_t v62;

  if (*(char *)(v62 - 193) < 0)
    operator delete(*(void **)(v62 - 216));
  if (v61)
    operator delete(v61);
  if (*(char *)(v62 - 169) < 0)
    operator delete(*(void **)(v62 - 192));
  if (*(char *)(v62 - 137) < 0)
    operator delete(*(void **)(v62 - 160));
  _Unwind_Resume(exception_object);
}

void validateTrainingInputs<CoreML::Specification::NeuralNetworkClassifier>(CoreML::Result *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  unsigned __int8 **v31;
  std::string::size_type v32;
  std::string::size_type size;
  std::string::size_type v34;
  unsigned __int8 *v35;
  int v36;
  unsigned __int8 *v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned __int8 *v49;
  std::string *v50;
  std::string::size_type v51;
  uint64_t v52;
  const void *v53;
  uint64_t *v54;
  int v55;
  uint64_t *v56;
  uint64_t *v57;
  std::string::size_type v58;
  std::string::size_type v59;
  std::string *v60;
  uint64_t v61;
  std::string *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  BOOL v68;
  BOOL v69;
  _BOOL4 v70;
  char v71;
  uint64_t *v72;
  char *v73;
  uint64_t *v74;
  char *v75;
  std::string *v76;
  __int128 v77;
  void **v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  void **v84;
  std::string::size_type v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  std::string::size_type v89;
  char v90;
  uint64_t v91;
  CoreML::Result *v92;
  int v93;
  uint64_t v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  void *__p[2];
  unsigned __int8 v101;
  void *v102[2];
  unsigned __int8 v103;
  std::string v104;
  std::string v105;
  std::string v106;
  char v107[8];
  void *v108;
  char v109;
  _QWORD v110[5];

  v110[2] = *MEMORY[0x1E0C80C00];
  CoreML::Result::Result((CoreML::Result *)v107);
  memset(&v106, 0, sizeof(v106));
  if (*(int *)(a2 + 120) <= 1)
  {
    MEMORY[0x1A1AD5EAC](&v106, "Must provide training inputs for updatable neural network (expecting both input and target for loss function).");
    *(_QWORD *)a1 = 15;
    std::operator+<char>();
    goto LABEL_161;
  }
  v92 = a1;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    if (*(int *)(a2 + 24) < 1)
    {
LABEL_8:
      if ((unint64_t)v7 >= v8)
      {
        v13 = (v7 - v6) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v8 - (_QWORD)v6) >> 1 > v14)
          v14 = (uint64_t)(v8 - (_QWORD)v6) >> 1;
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v15);
        else
          v16 = 0;
        v17 = (char *)(v15 + 4 * v13);
        *(_DWORD *)v17 = v9;
        v18 = v17 + 4;
        while (v7 != v6)
        {
          v19 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v17 - 1) = v19;
          v17 -= 4;
        }
        v8 = v15 + 4 * v16;
        if (v6)
          operator delete(v6);
        v6 = v17;
        v7 = v18;
      }
      else
      {
        *(_DWORD *)v7 = v9;
        v7 += 4;
      }
    }
    else
    {
      v10 = 0;
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 128) + 8 * v9 + 8);
      while (1)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v10 + 8);
        if (CoreML::Specification::isEquivalent(*(CoreML::Specification **)(v11 + 16), *(const CoreML::Specification::FeatureDescription **)(v11 + 32), *(const CoreML::Specification::FeatureDescription **)(v12 + 16), *(uint64_t **)(v12 + 32)))
        {
          break;
        }
        if (++v10 >= *(int *)(a2 + 24))
          goto LABEL_8;
      }
    }
    ++v9;
    v20 = *(int *)(a2 + 120);
  }
  while (v9 < v20);
  v21 = v7 - v6;
  if (v7 == v6)
  {
    MEMORY[0x1A1AD5EAC](&v106, "Training inputs don't describe required inputs for the loss (needs both the input and the target).");
    *(_QWORD *)v92 = 15;
    std::operator+<char>();
    goto LABEL_159;
  }
  v22 = v21 >> 2;
  if (v21 >> 2 == v20)
  {
    MEMORY[0x1A1AD5EAC](&v106, "The training inputs must include at least one input from the model itself as required for training (should have at least one input in common with those used for prediction).");
    *(_QWORD *)v92 = 15;
    std::operator+<char>();
    goto LABEL_159;
  }
  memset(&v105, 0, sizeof(v105));
  v23 = *(uint64_t **)(a3 + 72);
  if (!v23)
    v23 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  v24 = *(_QWORD *)(v23[4] + 8);
  if ((*(_DWORD *)(v24 + 36) & 0xFFFFFFFE) == 0xA)
    std::string::operator=(&v105, *(const std::string **)(*(_QWORD *)(v24 + 24) + 24));
  v25 = 0;
  v26 = 0;
  if (v22 <= 1)
    v27 = 1;
  else
    v27 = v22;
  v94 = v27;
  while (2)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(a2 + 128) + 8 * *(int *)&v6[4 * v25] + 8);
    v29 = *(__int128 **)(v28 + 16);
    if (*((char *)v29 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v29, *((_QWORD *)v29 + 1));
    }
    else
    {
      v30 = *v29;
      v104.__r_.__value_.__r.__words[2] = *((_QWORD *)v29 + 2);
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v30;
    }
    v31 = *(unsigned __int8 ***)(a2 + 136);
    v32 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    size = v104.__r_.__value_.__l.__size_;
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    else
      v34 = v104.__r_.__value_.__l.__size_;
    v35 = (unsigned __int8 *)*((unsigned __int8 *)v31 + 23);
    v36 = (char)v35;
    if ((char)v35 < 0)
      v35 = v31[1];
    if ((unsigned __int8 *)v34 != v35)
    {
LABEL_84:
      if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
      else
        v58 = v105.__r_.__value_.__l.__size_;
      if ((v32 & 0x80u) == 0)
        v59 = v32;
      else
        v59 = size;
      if (v58 == v59)
      {
        if ((v32 & 0x80u) == 0)
          v60 = &v104;
        else
          v60 = (std::string *)v104.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v70 = memcmp(v105.__r_.__value_.__l.__data_, v60, v105.__r_.__value_.__l.__size_) == 0;
        }
        else if (*((_BYTE *)&v105.__r_.__value_.__s + 23))
        {
          v61 = HIBYTE(v105.__r_.__value_.__r.__words[2]) - 1;
          v62 = &v105;
          do
          {
            v64 = v62->__r_.__value_.__s.__data_[0];
            v62 = (std::string *)((char *)v62 + 1);
            v63 = v64;
            v66 = v60->__r_.__value_.__s.__data_[0];
            v60 = (std::string *)((char *)v60 + 1);
            v65 = v66;
            v68 = v61-- != 0;
            v69 = v63 == v65;
            v70 = v63 == v65;
          }
          while (v69 && v68);
        }
        else
        {
          v70 = 1;
        }
      }
      else
      {
        v70 = 0;
      }
      v26 |= v70;
      v71 = 1;
      if ((v32 & 0x80) != 0)
        goto LABEL_108;
      goto LABEL_109;
    }
    if (v36 >= 0)
      v37 = *(unsigned __int8 **)(a2 + 136);
    else
      v37 = *v31;
    if ((*((_BYTE *)&v104.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v104.__r_.__value_.__l.__data_, v37, v104.__r_.__value_.__l.__size_))
        goto LABEL_84;
    }
    else if (*((_BYTE *)&v104.__r_.__value_.__s + 23))
    {
      v38 = &v104;
      v39 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      do
      {
        if (v38->__r_.__value_.__s.__data_[0] != *v37)
          goto LABEL_84;
        v38 = (std::string *)((char *)v38 + 1);
        ++v37;
        --v39;
      }
      while (v39);
    }
    v93 = v26;
    v40 = *(_QWORD *)(a2 + 56);
    if (v40)
      v41 = (uint64_t *)(v40 + 8);
    else
      v41 = 0;
    v42 = *(int *)(a2 + 48);
    if (!(_DWORD)v42)
    {
LABEL_76:
      v26 = v93;
      goto LABEL_84;
    }
    v43 = &v41[v42];
    v44 = (const void *)v104.__r_.__value_.__r.__words[0];
    while (1)
    {
      v45 = *v41;
      v46 = *(_QWORD *)(*v41 + 16);
      v47 = *(unsigned __int8 *)(v46 + 23);
      v48 = (char)v47;
      if ((v47 & 0x80u) != 0)
        v47 = *(_QWORD *)(v46 + 8);
      if (v34 != v47)
        goto LABEL_75;
      v49 = v48 >= 0 ? *(unsigned __int8 **)(*v41 + 16) : *(unsigned __int8 **)v46;
      if ((v32 & 0x80) != 0)
        break;
      if (!(_DWORD)v32)
        goto LABEL_77;
      v50 = &v104;
      v51 = v32;
      while (v50->__r_.__value_.__s.__data_[0] == *v49)
      {
        v50 = (std::string *)((char *)v50 + 1);
        ++v49;
        if (!--v51)
          goto LABEL_77;
      }
LABEL_75:
      if (++v41 == v43)
        goto LABEL_76;
    }
    v52 = v28;
    v53 = v44;
    v91 = v25;
    v54 = v43;
    v55 = memcmp(v44, v49, size);
    v43 = v54;
    v25 = v91;
    v44 = v53;
    v28 = v52;
    if (v55)
      goto LABEL_75;
LABEL_77:
    v56 = *(uint64_t **)(v28 + 32);
    if (!v56)
      v56 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*(_QWORD *)(v45 + 32))
      v57 = *(uint64_t **)(v45 + 32);
    else
      v57 = &CoreML::Specification::_FeatureType_default_instance_;
    v26 = v93;
    if (CoreML::Specification::operator==((unint64_t *)v56[3], *((_DWORD *)v56 + 9), (uint64_t)v57))
    {
      v32 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      v26 = 1;
      size = v104.__r_.__value_.__l.__size_;
      goto LABEL_84;
    }
    v72 = *(uint64_t **)(v45 + 32);
    if (!v72)
      v72 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v72 + 9) == 1)
      v73 = "Int64";
    else
      v73 = "String";
    std::string::basic_string[abi:ne180100]<0>(v102, v73);
    v74 = *(uint64_t **)(v28 + 32);
    if (!v74)
      v74 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v74 + 9) == 1)
      v75 = "Int64";
    else
      v75 = "String";
    std::string::basic_string[abi:ne180100]<0>(__p, v75);
    std::operator+<char>();
    v76 = std::string::append(&v95, " doesn't match the expected type of the classifier. Found: ");
    v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    if ((v101 & 0x80u) == 0)
      v78 = __p;
    else
      v78 = (void **)__p[0];
    if ((v101 & 0x80u) == 0)
      v79 = v101;
    else
      v79 = (std::string::size_type)__p[1];
    v80 = std::string::append(&v96, (const std::string::value_type *)v78, v79);
    v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v97.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    v82 = std::string::append(&v97, ", expected: ");
    v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    if ((v103 & 0x80u) == 0)
      v84 = v102;
    else
      v84 = (void **)v102[0];
    if ((v103 & 0x80u) == 0)
      v85 = v103;
    else
      v85 = (std::string::size_type)v102[1];
    v86 = std::string::append(&v98, (const std::string::value_type *)v84, v85);
    v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    v88 = std::string::append(&v99, ".");
    v89 = v88->__r_.__value_.__r.__words[0];
    v110[0] = v88->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v110 + 7) = *(std::string::size_type *)((char *)&v88->__r_.__value_.__r.__words[1] + 7);
    v90 = HIBYTE(v88->__r_.__value_.__r.__words[2]);
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
    v106.__r_.__value_.__r.__words[0] = v89;
    v106.__r_.__value_.__l.__size_ = v110[0];
    *(std::string::size_type *)((char *)&v106.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v110 + 7);
    *((_BYTE *)&v106.__r_.__value_.__s + 23) = v90;
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
    *(_QWORD *)v92 = 15;
    std::operator+<char>();
    if ((char)v101 < 0)
      operator delete(__p[0]);
    if ((char)v103 < 0)
      operator delete(v102[0]);
    v71 = 0;
    if ((*((_BYTE *)&v104.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_108:
      operator delete(v104.__r_.__value_.__l.__data_);
LABEL_109:
    if ((v71 & 1) != 0)
    {
      if (++v25 == v94)
      {
        if ((v26 & 1) != 0)
        {
          CoreML::Result::Result(v92);
        }
        else
        {
          std::operator+<char>();
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v106.__r_.__value_.__l.__data_);
          v106 = v104;
          *(_QWORD *)v92 = 15;
          std::operator+<char>();
        }
        break;
      }
      continue;
    }
    break;
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
LABEL_159:
  if (v6)
    operator delete(v6);
LABEL_161:
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  if (v109 < 0)
    operator delete(v108);
}

void sub_19C994518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  uint64_t v62;

  if (*(char *)(v62 - 193) < 0)
    operator delete(*(void **)(v62 - 216));
  if (v61)
    operator delete(v61);
  if (*(char *)(v62 - 169) < 0)
    operator delete(*(void **)(v62 - 192));
  if (*(char *)(v62 - 137) < 0)
    operator delete(*(void **)(v62 - 160));
  _Unwind_Resume(exception_object);
}

void validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetwork>(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  std::string *v15;
  std::string::size_type v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  void **v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type size;
  __int128 v32;
  std::string::size_type v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t *v41;
  uint64_t v42;
  const std::string **v43;
  std::string::size_type v44;
  __int128 v45;
  std::string::size_type v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 v53;
  int data;
  uint64_t *v55;
  uint64_t *v56;
  int v57;
  uint64_t *v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  __int128 *v62;
  __int128 v63;
  char v64;
  unint64_t v65;
  __int128 v66;
  uint64_t NodeFromName;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  const std::string *v72;
  int v73;
  std::string *v74;
  std::string::size_type v75;
  char v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  void *v80;
  char v81;
  uint64_t v82;
  void **v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  void *__p[6];
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int16 v98;
  std::string v99;
  void *v100;
  __int128 v101;
  char **v102;
  char *v103[2];
  std::string v104;
  void *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t *v108;
  std::string::value_type *v109;
  std::string v110;
  void *v111;
  _QWORD v112[2];
  std::string v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  CoreML::Result::Result((CoreML::Result *)a1);
  CoreML::Result::Result((CoreML::Result *)__p);
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  if ((int)v4 < 1)
  {
LABEL_16:
    v100 = 0;
    v101 = 0uLL;
    MEMORY[0x1A1AD5EAC](&v100, "The model is marked as updatable, but none of the layers are updatable.");
    v106 = 14;
    std::operator+<char>();
  }
  else
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      while (1)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 + 8 * v5);
        if (*(_BYTE *)(v7 + 120))
          break;
        if (++v5 >= (int)v4)
        {
          if ((v6 & 1) == 0)
            goto LABEL_16;
LABEL_15:
          v107 = *(_OWORD *)&__p[1];
          v106 = (uint64_t)__p[0];
          v108 = (uint64_t *)__p[3];
          memset(&__p[1], 0, 24);
          goto LABEL_19;
        }
      }
      v8 = *(_DWORD *)(v7 + 140);
      if (v8 != 100 && v8 != 420 && v8 != 140)
        break;
      validateWeightParamsUpdatable((const CoreML::Specification::NeuralNetworkLayer *)&v100, v7);
      v9 = (int)v100;
      __p[0] = v100;
      if (SHIBYTE(__p[3]) < 0)
      {
        operator delete(__p[1]);
        v9 = (int)__p[0];
      }
      *(_OWORD *)&__p[1] = v101;
      __p[3] = v102;
      if ((v9 & 0xFFFFFFEF) == 0)
      {
        ++v5;
        v6 = 1;
        v4 = *(int *)(a2 + 24);
        if (v5 < v4)
          continue;
      }
      goto LABEL_15;
    }
    std::operator+<char>();
    v79 = std::string::append(&v104, "' is marked as updatable, however it is not supported as the type of this layer is neither convolution nor inner-product.");
    v80 = (void *)v79->__r_.__value_.__r.__words[0];
    v110.__r_.__value_.__r.__words[0] = v79->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v79->__r_.__value_.__r.__words[1] + 7);
    v81 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)((char *)&v101 + 7) = *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words + 7);
    v100 = v80;
    *(_QWORD *)&v101 = v110.__r_.__value_.__r.__words[0];
    HIBYTE(v101) = v81;
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    v106 = 14;
    std::operator+<char>();
  }
  if (SHIBYTE(v101) < 0)
    operator delete(v100);
LABEL_19:
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  v10 = v106;
  *a1 = (void *)v106;
  if (*((char *)a1 + 31) < 0)
  {
    operator delete(a1[1]);
    v10 = *(_DWORD *)a1;
  }
  *(_OWORD *)(a1 + 1) = v107;
  a1[3] = v108;
  if ((v10 & 0xFFFFFFEF) == 0)
  {
    v83 = a1 + 1;
    CoreML::Result::Result((CoreML::Result *)__p);
    v107 = 0uLL;
    v106 = (uint64_t)&v107;
    memset(&v104, 0, sizeof(v104));
    if (*(int *)(a2 + 24) < 1)
    {
LABEL_40:
      v18 = *(_QWORD *)(a2 + 64)
          ? *(uint64_t **)(a2 + 64)
          : &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v18 + 6) < 1)
      {
LABEL_59:
        v101 = *(_OWORD *)&__p[1];
        v100 = __p[0];
        v102 = (char **)__p[3];
        memset(&__p[1], 0, 24);
      }
      else
      {
        v19 = 0;
        while (1)
        {
          v20 = *(__int128 **)(*(_QWORD *)(v18[4] + 8 * v19 + 8) + 16);
          if (*((char *)v20 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
          }
          else
          {
            v21 = *v20;
            v110.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
            *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v21;
          }
          v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>((_QWORD *)v107, &v110);
          if (v22)
          {
            std::operator+<char>();
            v23 = std::string::append(&v99, "', i.e., there are more than one layers or loss layers with this name.");
            v24 = v23->__r_.__value_.__r.__words[0];
            v113.__r_.__value_.__r.__words[0] = v23->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
            v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v104.__r_.__value_.__l.__data_);
            v104.__r_.__value_.__r.__words[0] = v24;
            v104.__r_.__value_.__l.__size_ = v113.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v104.__r_.__value_.__s + 23) = v25;
            if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v99.__r_.__value_.__l.__data_);
            v100 = (void *)14;
            std::operator+<char>();
          }
          else
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v110, (uint64_t)&v110);
          }
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
          if (v22)
            break;
          if (++v19 >= *((int *)v18 + 6))
            goto LABEL_59;
        }
      }
    }
    else
    {
      v11 = 0;
      while (1)
      {
        v12 = *(__int128 **)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v11 + 8) + 112);
        if (*((char *)v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
        }
        else
        {
          v13 = *v12;
          v110.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v13;
        }
        v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>((_QWORD *)v107, &v110);
        if (v14)
        {
          std::operator+<char>();
          v15 = std::string::append(&v99, "', i.e., there are more than one layers or loss layers with this name.");
          v16 = v15->__r_.__value_.__r.__words[0];
          v113.__r_.__value_.__r.__words[0] = v15->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
          v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v104.__r_.__value_.__l.__data_);
          v104.__r_.__value_.__r.__words[0] = v16;
          v104.__r_.__value_.__l.__size_ = v113.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7);
          *((_BYTE *)&v104.__r_.__value_.__s + 23) = v17;
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          v100 = (void *)14;
          std::operator+<char>();
        }
        else
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v110, (uint64_t)&v110);
        }
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        if (v14)
          break;
        if (++v11 >= *(int *)(a2 + 24))
          goto LABEL_40;
      }
    }
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v107);
    v26 = a1;
    if (SHIBYTE(__p[3]) < 0)
      operator delete(__p[1]);
    v27 = (int)v100;
    *a1 = v100;
    if (*((char *)a1 + 31) < 0)
    {
      operator delete(a1[1]);
      v27 = *(_DWORD *)a1;
    }
    *(_OWORD *)v83 = v101;
    a1[3] = v102;
    if ((v27 & 0xFFFFFFEF) == 0)
    {
      CoreML::Result::Result((CoreML::Result *)&v104);
      v28 = *(uint64_t **)(a2 + 64);
      if (!v28)
        v28 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      v29 = *((int *)v28 + 6);
      if ((int)v29 >= 2)
      {
        memset(__p, 0, 24);
        MEMORY[0x1A1AD5EAC](__p, "This model has more than one loss layers specified, which is not supported at the moment.");
        v110.__r_.__value_.__r.__words[0] = 15;
        std::operator+<char>();
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        goto LABEL_195;
      }
      v100 = &v101;
      v101 = 0uLL;
      v103[0] = 0;
      v103[1] = 0;
      v102 = v103;
      memset(&v99, 0, sizeof(v99));
      std::vector<CoreML::LayerNode>::resize((uint64_t *)&v99, *(int *)(a2 + 24) + v29);
      if (*(int *)(a2 + 24) >= 1)
      {
        v30 = 0;
        do
        {
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, *(const CoreML::Specification::NeuralNetworkLayer **)(*(_QWORD *)(a2 + 32) + 8 * v30 + 8));
          size = v99.__r_.__value_.__l.__size_;
          if (v99.__r_.__value_.__l.__size_ >= v99.__r_.__value_.__r.__words[2])
          {
            v34 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 3);
            v35 = v34 + 1;
            if (v34 + 1 > 0x1E1E1E1E1E1E1E1)
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            if (0xE1E1E1E1E1E1E1E2
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) > v35)
              v35 = 0xE1E1E1E1E1E1E1E2
                  * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3);
            if (0xF0F0F0F0F0F0F0F1
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) >= 0xF0F0F0F0F0F0F0)
              v36 = 0x1E1E1E1E1E1E1E1;
            else
              v36 = v35;
            v109 = &v99.__r_.__value_.__s.__data_[16];
            v37 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::LayerNode>>(v36);
            v38 = &v37[17 * v34];
            v106 = (uint64_t)v37;
            *(_QWORD *)&v107 = v38;
            v108 = &v37[17 * v39];
            *v38 = 0;
            v38[1] = 0;
            v38[2] = 0;
            *(_OWORD *)v38 = *(_OWORD *)__p;
            v38[2] = (uint64_t)__p[2];
            memset(__p, 0, 24);
            v38[3] = 0;
            v38[4] = 0;
            v38[5] = 0;
            *(_OWORD *)(v38 + 3) = *(_OWORD *)&__p[3];
            v38[5] = (uint64_t)__p[5];
            memset(&__p[3], 0, 24);
            v38[6] = v91;
            v40 = v92;
            v38[9] = v93;
            *(_OWORD *)(v38 + 7) = v40;
            v93 = 0;
            v92 = 0uLL;
            v38[10] = 0;
            v38[11] = 0;
            v38[12] = 0;
            *((_OWORD *)v38 + 5) = v94;
            v38[12] = v95;
            v94 = 0uLL;
            v95 = 0;
            v38[13] = 0;
            v38[14] = 0;
            v38[15] = 0;
            *(_OWORD *)(v38 + 13) = v96;
            v38[15] = v97;
            v96 = 0uLL;
            v97 = 0;
            *((_WORD *)v38 + 64) = v98;
            *((_QWORD *)&v107 + 1) = v38 + 17;
            std::vector<CoreML::LayerNode>::__swap_out_circular_buffer((uint64_t *)&v99, &v106);
            v33 = v99.__r_.__value_.__l.__size_;
            std::__split_buffer<CoreML::LayerNode>::~__split_buffer((uint64_t)&v106);
          }
          else
          {
            *(_QWORD *)(v99.__r_.__value_.__l.__size_ + 16) = 0;
            *(_QWORD *)(size + 24) = 0;
            *(_QWORD *)size = 0;
            *(_QWORD *)(size + 8) = 0;
            *(_OWORD *)size = *(_OWORD *)__p;
            *(void **)(size + 16) = __p[2];
            memset(__p, 0, 24);
            *(_QWORD *)(size + 32) = 0;
            *(_QWORD *)(size + 40) = 0;
            *(_OWORD *)(size + 24) = *(_OWORD *)&__p[3];
            *(void **)(size + 40) = __p[5];
            memset(&__p[3], 0, 24);
            *(_QWORD *)(size + 48) = v91;
            v32 = v92;
            *(_QWORD *)(size + 72) = v93;
            *(_QWORD *)(size + 80) = 0;
            *(_OWORD *)(size + 56) = v32;
            v93 = 0;
            v92 = 0uLL;
            *(_QWORD *)(size + 88) = 0;
            *(_QWORD *)(size + 96) = 0;
            *(_OWORD *)(size + 80) = v94;
            v94 = 0uLL;
            *(_QWORD *)(size + 96) = v95;
            *(_QWORD *)(size + 104) = 0;
            v95 = 0;
            *(_QWORD *)(size + 112) = 0;
            *(_QWORD *)(size + 120) = 0;
            *(_OWORD *)(size + 104) = v96;
            *(_QWORD *)(size + 120) = v97;
            v96 = 0uLL;
            v97 = 0;
            *(_WORD *)(size + 128) = v98;
            v33 = size + 136;
          }
          v99.__r_.__value_.__l.__size_ = v33;
          v106 = (uint64_t)&v96;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          v106 = (uint64_t)&v94;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          if (SHIBYTE(v93) < 0)
            operator delete((void *)v92);
          if (__p[3])
          {
            __p[4] = __p[3];
            operator delete(__p[3]);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode((CoreML::NeuralNetworkValidatorGraph *)&v100, (CoreML::LayerNode *)(v99.__r_.__value_.__l.__size_ - 136));
          ++v30;
        }
        while (v30 < *(int *)(a2 + 24));
      }
      v41 = *(uint64_t **)(a2 + 64);
      if (!v41)
        v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v41 + 6) >= 1)
      {
        v42 = 0;
        while (1)
        {
          v43 = *(const std::string ***)(v41[4] + 8 * v42 + 8);
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, v43);
          v44 = v99.__r_.__value_.__l.__size_;
          if (v99.__r_.__value_.__l.__size_ >= v99.__r_.__value_.__r.__words[2])
          {
            v47 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 3);
            v48 = v47 + 1;
            if (v47 + 1 > 0x1E1E1E1E1E1E1E1)
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            if (0xE1E1E1E1E1E1E1E2
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) > v48)
              v48 = 0xE1E1E1E1E1E1E1E2
                  * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3);
            v49 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) >= 0xF0F0F0F0F0F0F0
                ? 0x1E1E1E1E1E1E1E1
                : v48;
            v109 = &v99.__r_.__value_.__s.__data_[16];
            v50 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::LayerNode>>(v49);
            v51 = &v50[17 * v47];
            v106 = (uint64_t)v50;
            *(_QWORD *)&v107 = v51;
            v108 = &v50[17 * v52];
            *v51 = 0;
            v51[1] = 0;
            v51[2] = 0;
            *(_OWORD *)v51 = *(_OWORD *)__p;
            v51[2] = (uint64_t)__p[2];
            memset(__p, 0, 24);
            v51[3] = 0;
            v51[4] = 0;
            v51[5] = 0;
            *(_OWORD *)(v51 + 3) = *(_OWORD *)&__p[3];
            v51[5] = (uint64_t)__p[5];
            memset(&__p[3], 0, 24);
            v51[6] = v91;
            v53 = v92;
            v51[9] = v93;
            *(_OWORD *)(v51 + 7) = v53;
            v93 = 0;
            v92 = 0uLL;
            v51[10] = 0;
            v51[11] = 0;
            v51[12] = 0;
            *((_OWORD *)v51 + 5) = v94;
            v51[12] = v95;
            v94 = 0uLL;
            v95 = 0;
            v51[13] = 0;
            v51[14] = 0;
            v51[15] = 0;
            *(_OWORD *)(v51 + 13) = v96;
            v51[15] = v97;
            v96 = 0uLL;
            v97 = 0;
            *((_WORD *)v51 + 64) = v98;
            *((_QWORD *)&v107 + 1) = v51 + 17;
            std::vector<CoreML::LayerNode>::__swap_out_circular_buffer((uint64_t *)&v99, &v106);
            v46 = v99.__r_.__value_.__l.__size_;
            std::__split_buffer<CoreML::LayerNode>::~__split_buffer((uint64_t)&v106);
          }
          else
          {
            *(_QWORD *)(v99.__r_.__value_.__l.__size_ + 16) = 0;
            *(_QWORD *)(v44 + 24) = 0;
            *(_QWORD *)v44 = 0;
            *(_QWORD *)(v44 + 8) = 0;
            *(_OWORD *)v44 = *(_OWORD *)__p;
            *(void **)(v44 + 16) = __p[2];
            memset(__p, 0, 24);
            *(_QWORD *)(v44 + 32) = 0;
            *(_QWORD *)(v44 + 40) = 0;
            *(_OWORD *)(v44 + 24) = *(_OWORD *)&__p[3];
            *(void **)(v44 + 40) = __p[5];
            memset(&__p[3], 0, 24);
            *(_QWORD *)(v44 + 48) = v91;
            v45 = v92;
            *(_QWORD *)(v44 + 72) = v93;
            *(_QWORD *)(v44 + 80) = 0;
            *(_OWORD *)(v44 + 56) = v45;
            v93 = 0;
            v92 = 0uLL;
            *(_QWORD *)(v44 + 88) = 0;
            *(_QWORD *)(v44 + 96) = 0;
            *(_OWORD *)(v44 + 80) = v94;
            v94 = 0uLL;
            *(_QWORD *)(v44 + 96) = v95;
            *(_QWORD *)(v44 + 104) = 0;
            v95 = 0;
            *(_QWORD *)(v44 + 112) = 0;
            *(_QWORD *)(v44 + 120) = 0;
            *(_OWORD *)(v44 + 104) = v96;
            *(_QWORD *)(v44 + 120) = v97;
            v96 = 0uLL;
            v97 = 0;
            *(_WORD *)(v44 + 128) = v98;
            v46 = v44 + 136;
          }
          v99.__r_.__value_.__l.__size_ = v46;
          v106 = (uint64_t)&v96;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          v106 = (uint64_t)&v94;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          if (SHIBYTE(v93) < 0)
            operator delete((void *)v92);
          if (__p[3])
          {
            __p[4] = __p[3];
            operator delete(__p[3]);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode((CoreML::NeuralNetworkValidatorGraph *)&v100, (CoreML::LayerNode *)(v99.__r_.__value_.__l.__size_ - 136));
          validateLossLayer((const CoreML::Specification::LossLayer *)__p, (const CoreML::NeuralNetworkValidatorGraph *)v43, (uint64_t)&v100);
          data = (int)__p[0];
          v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
          if (SHIBYTE(v105) < 0)
          {
            operator delete((void *)v104.__r_.__value_.__l.__size_);
            data = (int)v104.__r_.__value_.__l.__data_;
          }
          *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
          v105 = __p[3];
          if ((data & 0xFFFFFFEF) != 0)
            break;
          ++v42;
          v41 = *(uint64_t **)(a2 + 64);
          if (!v41)
            v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
          if (v42 >= *((int *)v41 + 6))
            goto LABEL_115;
        }
        v110 = v104;
        v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        v105 = 0;
        v26 = a1;
        goto LABEL_194;
      }
LABEL_115:
      v55 = (uint64_t *)v41[5];
      if (v55)
        v56 = v55;
      else
        v56 = &CoreML::Specification::_Optimizer_default_instance_;
      validateOptimizer((const CoreML::Specification::Optimizer *)__p, (uint64_t)v56);
      v57 = (int)__p[0];
      v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
      v26 = a1;
      if (SHIBYTE(v105) < 0)
      {
        operator delete((void *)v104.__r_.__value_.__l.__size_);
        v57 = (int)v104.__r_.__value_.__l.__data_;
      }
      *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
      v105 = __p[3];
      if ((v57 & 0xFFFFFFEF) != 0)
        goto LABEL_127;
      if (*(_QWORD *)(a2 + 64))
        v58 = *(uint64_t **)(a2 + 64);
      else
        v58 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      validateOtherTopLevelUpdateParameters((const CoreML::Specification::NetworkUpdateParameters *)__p, v58);
      v59 = (int)__p[0];
      v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
      if (SHIBYTE(v105) < 0)
      {
        operator delete((void *)v104.__r_.__value_.__l.__size_);
        v59 = (int)v104.__r_.__value_.__l.__data_;
      }
      *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
      v105 = __p[3];
      if ((v59 & 0xFFFFFFEF) != 0)
      {
LABEL_127:
        v110 = v104;
        v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        v105 = 0;
LABEL_194:
        __p[0] = &v99;
        std::vector<CoreML::LayerNode>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v103[0]);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v101);
LABEL_195:
        if (SHIBYTE(v105) < 0)
          operator delete((void *)v104.__r_.__value_.__l.__size_);
        *v26 = (void *)v110.__r_.__value_.__r.__words[0];
        if (*((char *)v26 + 31) < 0)
          operator delete(*v83);
        *(_OWORD *)v83 = *(_OWORD *)&v110.__r_.__value_.__r.__words[1];
        a1[3] = v111;
        return;
      }
      v107 = 0uLL;
      v106 = (uint64_t)&v107;
      v60 = *(uint64_t **)(a2 + 64);
      if (!v60)
        v60 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v60 + 6) < 1)
      {
LABEL_192:
        v110 = v104;
        v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        v105 = 0;
LABEL_193:
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v107);
        v26 = a1;
        goto LABEL_194;
      }
      v61 = 0;
      while (1)
      {
        v62 = *(__int128 **)(*(_QWORD *)(v60[4] + 8 * v61 + 8) + 16);
        if (*((char *)v62 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v62, *((_QWORD *)v62 + 1));
        }
        else
        {
          v63 = *v62;
          v113.__r_.__value_.__r.__words[2] = *((_QWORD *)v62 + 2);
          *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v63;
        }
        v82 = v61;
        memset(__p, 0, sizeof(__p));
        std::deque<std::string>::push_back(__p, (__int128 *)&v113);
        v64 = 0;
        memset(&v89, 0, sizeof(v89));
        while (__p[5])
        {
          v65 = *((_QWORD *)__p[1] + (unint64_t)__p[4] / 0xAA) + 24 * ((unint64_t)__p[4] % 0xAA);
          if (*(char *)(v65 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v65, *(_QWORD *)(v65 + 8));
          }
          else
          {
            v66 = *(_OWORD *)v65;
            v88.__r_.__value_.__r.__words[2] = *(_QWORD *)(v65 + 16);
            *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v66;
          }
          std::deque<std::string>::pop_front((uint64_t)__p);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v87, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
          else
            v87 = v88;
          NodeFromName = CoreML::NeuralNetworkValidatorGraph::getNodeFromName((uint64_t)&v100, &v87);
          v68 = NodeFromName;
          if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (NodeFromName)
              goto LABEL_146;
            goto LABEL_173;
          }
          operator delete(v87.__r_.__value_.__l.__data_);
          if (v68)
          {
LABEL_146:
            v69 = *(uint64_t **)v68;
            v70 = *(uint64_t **)(v68 + 8);
            while (1)
            {
              if (v69 == v70)
              {
                v73 = 0;
                goto LABEL_178;
              }
              v71 = *v69;
              v72 = (const std::string *)(*v69 + 56);
              if (*(char *)(*v69 + 79) < 0)
                std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(v71 + 56), *(_QWORD *)(v71 + 64));
              else
                v86 = *v72;
              if (&v107 != (__int128 *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v106, &v86))break;
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v86, (uint64_t)&v86);
              std::deque<std::string>::push_back(__p, (__int128 *)&v86);
              if (((*(_BYTE *)(v71 + 128) != 0) & v64) == 1)
              {
                memset(&v85, 0, sizeof(v85));
                std::operator+<char>();
                v74 = std::string::append(&v84, "), which does not support backpropagation, between an updatable marked layer and the loss function.");
                v75 = v74->__r_.__value_.__r.__words[0];
                v112[0] = v74->__r_.__value_.__l.__size_;
                *(_QWORD *)((char *)v112 + 7) = *(std::string::size_type *)((char *)&v74->__r_.__value_.__r.__words[1]
                                                                          + 7);
                v76 = HIBYTE(v74->__r_.__value_.__r.__words[2]);
                v74->__r_.__value_.__l.__size_ = 0;
                v74->__r_.__value_.__r.__words[2] = 0;
                v74->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v85.__r_.__value_.__l.__data_);
                v85.__r_.__value_.__r.__words[0] = v75;
                v85.__r_.__value_.__l.__size_ = v112[0];
                *(std::string::size_type *)((char *)&v85.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v112 + 7);
                *((_BYTE *)&v85.__r_.__value_.__s + 23) = v76;
                if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v84.__r_.__value_.__l.__data_);
                v110.__r_.__value_.__r.__words[0] = 15;
                std::operator+<char>();
                if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v85.__r_.__value_.__l.__data_);
                v64 = 1;
                v73 = 1;
              }
              else if (*(_BYTE *)(v71 + 129))
              {
                v73 = 0;
              }
              else
              {
                if (*(_DWORD *)(v71 + 48) == 175 && *(_DWORD *)(v68 + 52) == 10)
                  break;
                std::string::operator=(&v89, v72);
                v73 = 0;
                v64 = 1;
              }
LABEL_166:
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v86.__r_.__value_.__l.__data_);
              if (v73 != 14 && v73)
                goto LABEL_178;
              ++v69;
            }
            v73 = 14;
            goto LABEL_166;
          }
LABEL_173:
          std::operator+<char>();
          v77 = std::string::append(&v85, "'.");
          v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          v86.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v85.__r_.__value_.__l.__data_);
          v110.__r_.__value_.__r.__words[0] = 15;
          std::operator+<char>();
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v86.__r_.__value_.__l.__data_);
          v73 = 1;
LABEL_178:
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v88.__r_.__value_.__l.__data_);
            if (v73)
              goto LABEL_184;
          }
          else if (v73)
          {
            goto LABEL_184;
          }
        }
        v73 = 0;
LABEL_184:
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        std::deque<std::string>::~deque[abi:ne180100]((uint64_t)__p);
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v113.__r_.__value_.__l.__data_);
        if (v73)
          goto LABEL_193;
        v61 = v82 + 1;
        v60 = *(uint64_t **)(a2 + 64);
        if (!v60)
          v60 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
        if (v61 >= *((int *)v60 + 6))
          goto LABEL_192;
      }
    }
  }
}

void sub_19C99585C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;

  if (a62 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v62 + 31) < 0)
    operator delete(*(void **)(v62 + 8));
  _Unwind_Resume(a1);
}

void validateWeightParamsUpdatable(const CoreML::Specification::NeuralNetworkLayer *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  _BOOL4 v16;
  uint64_t *v17;
  BOOL v18;
  BOOL v19;
  _BOOL4 v20;
  uint64_t *v21;
  BOOL v22;
  BOOL v23;
  std::string *v25;
  void *v26;
  char v27;
  std::string v28;
  void *__p;
  __int128 v30;
  uint64_t v31;
  void *v32[2];
  uint64_t v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  CoreML::Result::Result((CoreML::Result *)&v31);
  __p = 0;
  v30 = 0uLL;
  v4 = *(_DWORD *)(a2 + 140);
  if (v4 == 140)
  {
    v11 = *(_QWORD *)(a2 + 128);
    v12 = *(unsigned __int8 *)(v11 + 48);
    v7 = *(_BYTE *)(v11 + 48) != 0;
    v20 = *(_BYTE *)(v11 + 48)
       && ((v13 = *(uint64_t **)(v11 + 24)) != 0
         ? (v14 = *(uint64_t **)(v11 + 24))
         : (v14 = &CoreML::Specification::_WeightParams_default_instance_),
           (v12 = *((unsigned __int8 *)v14 + 72) != 0, v13)
         ? (v15 = v13 == &CoreML::Specification::_WeightParams_default_instance_)
         : (v15 = 1),
           !v15)
       && v13[8] != 0;
    v21 = *(uint64_t **)(v11 + 16);
    v17 = &CoreML::Specification::_WeightParams_default_instance_;
    if (v21)
      v22 = v21 == &CoreML::Specification::_WeightParams_default_instance_;
    else
      v22 = 1;
    v23 = !v22 && v21[8] != 0;
    if (v21)
      v17 = v21;
    if (v23)
      goto LABEL_50;
  }
  else
  {
    if (v4 != 100)
      goto LABEL_49;
    v5 = *(_QWORD *)(a2 + 128);
    v6 = *(unsigned __int8 *)(v5 + 153);
    v7 = *(_BYTE *)(v5 + 153) != 0;
    v16 = *(_BYTE *)(v5 + 153)
       && ((v8 = *(uint64_t **)(v5 + 120)) != 0
         ? (v9 = *(uint64_t **)(v5 + 120))
         : (v9 = &CoreML::Specification::_WeightParams_default_instance_),
           (v6 = *((unsigned __int8 *)v9 + 72), v8)
         ? (v10 = v8 == &CoreML::Specification::_WeightParams_default_instance_)
         : (v10 = 1),
           !v10)
       && v8[8] != 0;
    v17 = *(uint64_t **)(v5 + 112);
    if (v17)
      v18 = v17 == &CoreML::Specification::_WeightParams_default_instance_;
    else
      v18 = 1;
    v19 = !v18 && v17[8] != 0;
    if (!v17)
      v17 = &CoreML::Specification::_WeightParams_default_instance_;
    v12 = v6 != 0;
    v20 = v16;
    if (v19)
      goto LABEL_50;
  }
  if (v20)
  {
LABEL_50:
    std::operator+<char>();
    v25 = std::string::append(&v28, "', has quantized weights/bias param. Quantized weights/bias not supported for update.");
    goto LABEL_51;
  }
  if ((v12 | !v7) == 1 && *((_BYTE *)v17 + 72) != 0)
  {
LABEL_49:
    *(_QWORD *)a1 = v31;
    *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)v32;
    *((_QWORD *)a1 + 3) = v33;
    v32[0] = 0;
    v32[1] = 0;
    v33 = 0;
    goto LABEL_55;
  }
  std::operator+<char>();
  v25 = std::string::append(&v28, "', has a weight/bias param which is not marked as updatable.");
LABEL_51:
  v26 = (void *)v25->__r_.__value_.__r.__words[0];
  v34[0] = v25->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
  v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)((char *)&v30 + 7) = *(_QWORD *)((char *)v34 + 7);
  __p = v26;
  *(_QWORD *)&v30 = v34[0];
  HIBYTE(v30) = v27;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = 14;
  std::operator+<char>();
  if (SHIBYTE(v30) < 0)
    operator delete(__p);
LABEL_55:
  if (SHIBYTE(v33) < 0)
    operator delete(v32[0]);
}

void sub_19C995D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void std::vector<CoreML::LayerNode>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[5];

  v4 = *a1;
  v5 = a1[1];
  v6 = 0xF0F0F0F0F0F0F0F1 * ((v5 - *a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v15 = v4 + 136 * a2;
      while (v5 != v15)
      {
        v5 -= 136;
        std::allocator<CoreML::LayerNode>::destroy[abi:ne180100](v5);
      }
      a1[1] = v15;
    }
  }
  else
  {
    v8 = a1[2];
    if (0xF0F0F0F0F0F0F0F1 * ((v8 - v5) >> 3) >= v7)
    {
      v16 = v5 + 136 * v7;
      do
      {
        *(_OWORD *)(v5 + 16) = 0uLL;
        *(_OWORD *)(v5 + 32) = 0uLL;
        *(_OWORD *)v5 = 0uLL;
        *(_OWORD *)(v5 + 56) = 0uLL;
        *(_OWORD *)(v5 + 72) = 0uLL;
        *(_OWORD *)(v5 + 88) = 0uLL;
        *(_OWORD *)(v5 + 104) = 0uLL;
        *(_QWORD *)(v5 + 120) = 0;
        v5 += 136;
      }
      while (v5 != v16);
      a1[1] = v16;
    }
    else
    {
      if (a2 > 0x1E1E1E1E1E1E1E1)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v17[4] = a1 + 2;
      v9 = 0xF0F0F0F0F0F0F0F1 * ((v8 - v4) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0xF0F0F0F0F0F0F0)
        v11 = 0x1E1E1E1E1E1E1E1;
      else
        v11 = v10;
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::LayerNode>>(v11);
      v13 = &v12[136 * v6];
      v17[0] = v12;
      v17[1] = v13;
      v17[3] = &v12[136 * v14];
      do
      {
        *((_OWORD *)v13 + 1) = 0uLL;
        *((_OWORD *)v13 + 2) = 0uLL;
        *(_OWORD *)v13 = 0uLL;
        *(_OWORD *)(v13 + 56) = 0uLL;
        *(_OWORD *)(v13 + 72) = 0uLL;
        *(_OWORD *)(v13 + 88) = 0uLL;
        *(_OWORD *)(v13 + 104) = 0uLL;
        *((_QWORD *)v13 + 15) = 0;
        v13 += 136;
      }
      while (v13 != &v12[136 * a2]);
      v17[2] = &v12[136 * a2];
      std::vector<CoreML::LayerNode>::__swap_out_circular_buffer(a1, v17);
      std::__split_buffer<CoreML::LayerNode>::~__split_buffer((uint64_t)v17);
    }
  }
}

CoreML::LayerNode *CoreML::LayerNode::LayerNode(CoreML::LayerNode *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::string *v4;
  void ***v5;
  std::string **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  std::string *v27;
  std::string *v28;
  unint64_t v29;
  std::string *v30;
  __int128 *v31;
  unint64_t v32;
  void ***v33;

  *(_OWORD *)((char *)this + 56) = 0u;
  v4 = (std::string *)((char *)this + 56);
  *(_OWORD *)((char *)this + 104) = 0u;
  v5 = (void ***)((char *)this + 104);
  v6 = (std::string **)((char *)this + 80);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 15) = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v7 = *((_QWORD *)a2 + 4);
  if (v7)
    v8 = (uint64_t *)(v7 + 8);
  else
    v8 = 0;
  v9 = *((int *)a2 + 6);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 8 * v9;
    do
    {
      v12 = *v8;
      if ((unint64_t)v10 >= v32)
      {
        v10 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v30, (__int128 *)v12);
      }
      else
      {
        if (*(char *)(v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v12, *(_QWORD *)(v12 + 8));
        }
        else
        {
          v13 = *(_OWORD *)v12;
          v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 16);
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
        }
        ++v10;
      }
      v31 = (__int128 *)v10;
      ++v8;
      v11 -= 8;
    }
    while (v11);
  }
  v14 = *((_QWORD *)a2 + 7);
  if (v14)
    v15 = (uint64_t *)(v14 + 8);
  else
    v15 = 0;
  v16 = *((int *)a2 + 12);
  if ((_DWORD)v16)
  {
    v17 = v28;
    v18 = 8 * v16;
    do
    {
      v19 = *v15;
      if ((unint64_t)v17 >= v29)
      {
        v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v27, (__int128 *)v19);
      }
      else
      {
        if (*(char *)(v19 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v19, *(_QWORD *)(v19 + 8));
        }
        else
        {
          v20 = *(_OWORD *)v19;
          v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(v19 + 16);
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v20;
        }
        ++v17;
      }
      v28 = v17;
      ++v15;
      v18 -= 8;
    }
    while (v18);
  }
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 35);
  *((_DWORD *)this + 13) = 0;
  if (v6 != &v30)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v6, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  if (v5 != (void ***)&v27)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v5, v27, (__int128 *)v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
  std::string::operator=(v4, *((const std::string **)a2 + 14));
  *((_BYTE *)this + 128) = *((_BYTE *)a2 + 120);
  v21 = *((_DWORD *)a2 + 35);
  LOBYTE(v22) = 1;
  v23 = (v21 - 100);
  if (v23 > 0x3C)
    goto LABEL_36;
  if (((1 << (v21 - 100)) & 0x1000010000100001) != 0)
    goto LABEL_38;
  if (v23 == 30)
  {
    v24 = *(_DWORD *)(*((_QWORD *)a2 + 16) + 28);
    v25 = v24 >= 0x29;
    v22 = (0x10040000400uLL >> v24) & 1;
    if (v25)
      LOBYTE(v22) = 0;
  }
  else
  {
LABEL_36:
    if (v21 != 301 && v21 != 420)
      LOBYTE(v22) = 0;
  }
LABEL_38:
  *((_BYTE *)this + 129) = v22;
  v33 = (void ***)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  v27 = (std::string *)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  return this;
}

void sub_19C9961B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, void ***a16)
{
  uint64_t v16;
  void **v17;
  void *v19;
  void *v20;

  a16 = (void ***)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a10 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  if (*(char *)(v16 + 79) < 0)
    operator delete(*v17);
  v19 = *(void **)(v16 + 24);
  if (v19)
  {
    *(_QWORD *)(v16 + 32) = v19;
    operator delete(v19);
  }
  v20 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

__n128 std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v2 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v2;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  result = *(__n128 *)(a2 + 104);
  *(__n128 *)(a1 + 104) = result;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  return result;
}

_QWORD *CoreML::NeuralNetworkValidatorGraph::insertNode(CoreML::NeuralNetworkValidatorGraph *this, CoreML::LayerNode *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  _BOOL4 v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  __int128 *v38;
  __int128 *i;
  _QWORD *result;
  __int128 *v41;

  v4 = (_QWORD *)*((_QWORD *)a2 + 10);
  v5 = (_QWORD *)*((_QWORD *)a2 + 11);
  if (v4 != v5)
  {
    v6 = (char *)this + 32;
    do
    {
      v7 = *(_QWORD **)v6;
      if (*(_QWORD *)v6)
      {
        v8 = (char *)this + 32;
        do
        {
          v9 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v7 + 4, v4);
          v10 = v7 + 1;
          if (!v9)
          {
            v10 = v7;
            v8 = (char *)v7;
          }
          v7 = (_QWORD *)*v10;
        }
        while (*v10);
        if (v8 != v6
          && !google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v4, (_QWORD *)v8 + 4))
        {
          v11 = *std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)this + 24, &v41, v4);
          if (!v11)
            std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
          v12 = *(_QWORD **)(v11 + 56);
          v14 = (_QWORD *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v14 >= v13)
          {
            v16 = ((uint64_t)v14 - *(_QWORD *)a2) >> 3;
            if ((unint64_t)(v16 + 1) >> 61)
              goto LABEL_49;
            v17 = v13 - *(_QWORD *)a2;
            v18 = v17 >> 2;
            if (v17 >> 2 <= (unint64_t)(v16 + 1))
              v18 = v16 + 1;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            if (v19)
              v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v19);
            else
              v20 = 0;
            v21 = (_QWORD *)(v19 + 8 * v16);
            *v21 = v12;
            v15 = v21 + 1;
            v23 = *(char **)a2;
            v22 = (char *)*((_QWORD *)a2 + 1);
            if (v22 != *(char **)a2)
            {
              do
              {
                v24 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *--v21 = v24;
              }
              while (v22 != v23);
              v22 = *(char **)a2;
            }
            *(_QWORD *)a2 = v21;
            *((_QWORD *)a2 + 1) = v15;
            *((_QWORD *)a2 + 2) = v19 + 8 * v20;
            if (v22)
              operator delete(v22);
          }
          else
          {
            *v14 = v12;
            v15 = v14 + 1;
          }
          *((_QWORD *)a2 + 1) = v15;
          v26 = (_QWORD *)v12[4];
          v25 = v12[5];
          if ((unint64_t)v26 >= v25)
          {
            v28 = v12[3];
            v29 = ((uint64_t)v26 - v28) >> 3;
            if ((unint64_t)(v29 + 1) >> 61)
LABEL_49:
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            v30 = v25 - v28;
            v31 = v30 >> 2;
            if (v30 >> 2 <= (unint64_t)(v29 + 1))
              v31 = v29 + 1;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
              v32 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v32 = v31;
            if (v32)
              v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v32);
            else
              v33 = 0;
            v34 = (_QWORD *)(v32 + 8 * v29);
            *v34 = a2;
            v27 = v34 + 1;
            v36 = (char *)v12[3];
            v35 = (char *)v12[4];
            if (v35 != v36)
            {
              do
              {
                v37 = *((_QWORD *)v35 - 1);
                v35 -= 8;
                *--v34 = v37;
              }
              while (v35 != v36);
              v35 = (char *)v12[3];
            }
            v12[3] = v34;
            v12[4] = v27;
            v12[5] = v32 + 8 * v33;
            if (v35)
              operator delete(v35);
          }
          else
          {
            *v26 = a2;
            v27 = v26 + 1;
          }
          v12[4] = v27;
        }
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
  v38 = (__int128 *)*((_QWORD *)a2 + 13);
  for (i = (__int128 *)*((_QWORD *)a2 + 14); v38 != i; v38 = (__int128 *)((char *)v38 + 24))
  {
    v41 = v38;
    std::__tree<std::__value_type<std::string,CoreML::LayerNode *>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::LayerNode *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::LayerNode *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 24, v38, &v41)[7] = a2;
  }
  v41 = (__int128 *)((char *)a2 + 56);
  result = std::__tree<std::__value_type<std::string,CoreML::LayerNode *>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::LayerNode *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::LayerNode *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this, (_QWORD *)a2 + 7, &v41);
  result[7] = a2;
  return result;
}

void CoreML::LayerNode::~LayerNode(void **this)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = this + 13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  v2 = this[3];
  if (v2)
  {
    this[4] = v2;
    operator delete(v2);
  }
  v3 = *this;
  if (*this)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

CoreML::LayerNode *CoreML::LayerNode::LayerNode(CoreML::LayerNode *this, const std::string **a2)
{
  uint64_t *v4;
  int v5;
  __int128 *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;

  *(_OWORD *)((char *)this + 56) = 0u;
  v4 = (uint64_t *)((char *)this + 80);
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 15) = 0;
  std::string::operator=((std::string *)((char *)this + 56), a2[2]);
  v5 = *((_DWORD *)a2 + 9);
  if (v5 == 10)
  {
    v6 = (__int128 *)a2[3]->__r_.__value_.__r.__words[2];
    v7 = *((_QWORD *)this + 11);
    if (v7 < *((_QWORD *)this + 12))
    {
LABEL_6:
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, v6);
      v8 = v7 + 24;
LABEL_8:
      *((_QWORD *)this + 11) = v8;
      goto LABEL_9;
    }
LABEL_7:
    v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, v6);
    goto LABEL_8;
  }
  if (v5 == 11)
  {
    v6 = (__int128 *)a2[3]->__r_.__value_.__r.__words[2];
    v7 = *((_QWORD *)this + 11);
    if (v7 < *((_QWORD *)this + 12))
      goto LABEL_6;
    goto LABEL_7;
  }
LABEL_9:
  v9 = *((_DWORD *)a2 + 9);
  *((_DWORD *)this + 12) = 0;
  *((_DWORD *)this + 13) = v9;
  *((_WORD *)this + 64) = 0;
  return this;
}

void sub_19C9966C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 79) < 0)
    operator delete(*v3);
  v5 = *(void **)(v2 + 24);
  if (v5)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void validateLossLayer(const CoreML::Specification::LossLayer *a1, const CoreML::NeuralNetworkValidatorGraph *a2, uint64_t a3)
{
  int v6;
  __int128 *v7;
  __int128 v8;
  __int128 *v9;
  __int128 v10;
  std::string *v11;
  void *v12;
  char v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v17;
  _QWORD *v18;
  uint64_t *v19;
  std::string *v20;
  void *v21;
  char v22;
  int v23;
  uint64_t NodeFromName;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  void *v29;
  char v30;
  std::string *v31;
  void *v32;
  char v33;
  uint64_t v34;
  __int128 v35;
  std::string *v36;
  void *v37;
  char v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  std::string::size_type size;
  std::string *v43;
  std::string *v44;
  void *v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  __int128 v49;
  std::string *v50;
  void *v51;
  char v52;
  std::string v53;
  std::string v54;
  void *__p;
  __int128 v56;
  uint64_t v57;
  void *v58[2];
  uint64_t v59;
  std::string v60;
  _QWORD v61[2];
  std::string v62;
  std::string v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  CoreML::Result::Result((CoreML::Result *)&v57);
  __p = 0;
  v56 = 0uLL;
  v6 = *((_DWORD *)a2 + 9);
  if (v6 == 11)
  {
    v9 = *(__int128 **)(*((_QWORD *)a2 + 3) + 16);
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v54.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v10;
    }
    v16 = a3 + 24;
    v17 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(a3 + 24, &v54);
    v18 = (_QWORD *)(a3 + 32);
    if (v18 == (_QWORD *)v17)
    {
      std::operator+<char>();
      v20 = std::string::append(&v63, "', input is not generated within the graph.");
      v21 = (void *)v20->__r_.__value_.__r.__words[0];
      v62.__r_.__value_.__r.__words[0] = v20->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v56) < 0)
        operator delete(__p);
      __p = v21;
      *(_QWORD *)&v56 = v62.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7);
      HIBYTE(v56) = v22;
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      *(_QWORD *)a1 = 15;
      std::operator+<char>();
      v23 = 1;
      goto LABEL_78;
    }
    if (*((_DWORD *)a2 + 9) == 11)
    {
      v19 = (uint64_t *)*((_QWORD *)a2 + 3);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v17);
      v19 = &CoreML::Specification::_MeanSquaredErrorLossLayer_default_instance_;
    }
    v34 = v19[3];
    if (*(char *)(v34 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v34, *(_QWORD *)(v34 + 8));
    }
    else
    {
      v35 = *(_OWORD *)v34;
      v63.__r_.__value_.__r.__words[2] = *(_QWORD *)(v34 + 16);
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v35;
    }
    if (v18 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(v16, &v63))
    {
      v23 = 2;
      goto LABEL_76;
    }
    std::operator+<char>();
    v36 = std::string::append(&v62, "', target is generated within the graph.");
    v37 = (void *)v36->__r_.__value_.__r.__words[0];
    v60.__r_.__value_.__r.__words[0] = v36->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v36->__r_.__value_.__r.__words[1] + 7);
    v38 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v56) < 0)
      operator delete(__p);
    __p = v37;
    *(_QWORD *)&v56 = v60.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
    HIBYTE(v56) = v38;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    *(_QWORD *)a1 = 15;
    std::operator+<char>();
LABEL_75:
    v23 = 1;
LABEL_76:
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
LABEL_78:
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (v23 == 2)
    {
      *(_QWORD *)a1 = v57;
      *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)v58;
      *((_QWORD *)a1 + 3) = v59;
      v58[0] = 0;
      v58[1] = 0;
      v59 = 0;
    }
    goto LABEL_82;
  }
  if (v6 == 10)
  {
    v7 = *(__int128 **)(*((_QWORD *)a2 + 3) + 16);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v54.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v8;
    }
    v14 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
    }
    else
    {
      v15 = *v14;
      v63.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v15;
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v53, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
    else
      v53 = v63;
    NodeFromName = CoreML::NeuralNetworkValidatorGraph::getNodeFromName(a3, &v53);
    v25 = (uint64_t *)NodeFromName;
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v53.__r_.__value_.__l.__data_);
      if (v25)
      {
LABEL_30:
        v26 = *v25;
        v27 = v25[1];
        if (*v25 == v27)
        {
LABEL_33:
          std::operator+<char>();
          v28 = std::string::append(&v62, "', input is not generated from a softmax output.");
          v29 = (void *)v28->__r_.__value_.__r.__words[0];
          v60.__r_.__value_.__r.__words[0] = v28->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
          v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v56) < 0)
            operator delete(__p);
          __p = v29;
          *(_QWORD *)&v56 = v60.__r_.__value_.__r.__words[0];
          *(_QWORD *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
          HIBYTE(v56) = v30;
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v62.__r_.__value_.__l.__data_);
LABEL_74:
          *(_QWORD *)a1 = 15;
          std::operator+<char>();
          goto LABEL_75;
        }
        while (*(_DWORD *)(*(_QWORD *)v26 + 48) != 175)
        {
          v26 += 8;
          if (v26 == v27)
            goto LABEL_33;
        }
        v39 = *(unsigned __int8 **)(*(_QWORD *)v26 + 104);
        v40 = v39[23];
        if ((v40 & 0x80u) == 0)
          v41 = v39[23];
        else
          v41 = *((_QWORD *)v39 + 1);
        size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v54.__r_.__value_.__l.__size_;
        if (v41 == size)
        {
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v43 = &v54;
          else
            v43 = (std::string *)v54.__r_.__value_.__r.__words[0];
          if ((v40 & 0x80) == 0)
          {
            if (v39[23])
            {
              while (*v39 == v43->__r_.__value_.__s.__data_[0])
              {
                ++v39;
                v43 = (std::string *)((char *)v43 + 1);
                if (!--v40)
                  goto LABEL_87;
              }
              goto LABEL_70;
            }
LABEL_87:
            if (*((_DWORD *)a2 + 9) == 10)
            {
              v47 = (uint64_t *)*((_QWORD *)a2 + 3);
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)NodeFromName);
              v47 = &CoreML::Specification::_CategoricalCrossEntropyLossLayer_default_instance_;
            }
            v48 = v47[3];
            if (*(char *)(v48 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v48, *(_QWORD *)(v48 + 8));
            }
            else
            {
              v49 = *(_OWORD *)v48;
              v62.__r_.__value_.__r.__words[2] = *(_QWORD *)(v48 + 16);
              *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v49;
            }
            if ((_QWORD *)(a3 + 32) == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(a3 + 24, &v62))
            {
              v23 = 2;
            }
            else
            {
              std::operator+<char>();
              v50 = std::string::append(&v60, "', target is generated within the graph.");
              v51 = (void *)v50->__r_.__value_.__r.__words[0];
              v61[0] = v50->__r_.__value_.__l.__size_;
              *(_QWORD *)((char *)v61 + 7) = *(std::string::size_type *)((char *)&v50->__r_.__value_.__r.__words[1] + 7);
              v52 = HIBYTE(v50->__r_.__value_.__r.__words[2]);
              v50->__r_.__value_.__l.__size_ = 0;
              v50->__r_.__value_.__r.__words[2] = 0;
              v50->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v56) < 0)
                operator delete(__p);
              __p = v51;
              *(_QWORD *)&v56 = v61[0];
              *(_QWORD *)((char *)&v56 + 7) = *(_QWORD *)((char *)v61 + 7);
              HIBYTE(v56) = v52;
              if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v60.__r_.__value_.__l.__data_);
              *(_QWORD *)a1 = 15;
              std::operator+<char>();
              v23 = 1;
            }
            if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v62.__r_.__value_.__l.__data_);
            goto LABEL_76;
          }
          NodeFromName = memcmp(*(const void **)v39, v43, *((_QWORD *)v39 + 1));
          if (!(_DWORD)NodeFromName)
            goto LABEL_87;
        }
LABEL_70:
        std::operator+<char>();
        v44 = std::string::append(&v62, "', input is not generated from a softmax output.");
        v45 = (void *)v44->__r_.__value_.__r.__words[0];
        v60.__r_.__value_.__r.__words[0] = v44->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1] + 7);
        v46 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v56) < 0)
          operator delete(__p);
        __p = v45;
        *(_QWORD *)&v56 = v60.__r_.__value_.__r.__words[0];
        *(_QWORD *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
        HIBYTE(v56) = v46;
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        goto LABEL_74;
      }
    }
    else if (NodeFromName)
    {
      goto LABEL_30;
    }
    std::operator+<char>();
    v31 = std::string::append(&v62, "'.");
    v32 = (void *)v31->__r_.__value_.__r.__words[0];
    v60.__r_.__value_.__r.__words[0] = v31->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
    v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v56) < 0)
      operator delete(__p);
    __p = v32;
    *(_QWORD *)&v56 = v60.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
    HIBYTE(v56) = v33;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    goto LABEL_74;
  }
  std::operator+<char>();
  v11 = std::string::append(&v54, "', only cross entropy loss and MSE are supported.");
  v12 = (void *)v11->__r_.__value_.__r.__words[0];
  v63.__r_.__value_.__r.__words[0] = v11->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56) < 0)
    operator delete(__p);
  __p = v12;
  *(_QWORD *)&v56 = v63.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words + 7);
  HIBYTE(v56) = v13;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = 15;
  std::operator+<char>();
LABEL_82:
  if (SHIBYTE(v56) < 0)
    operator delete(__p);
  if (SHIBYTE(v59) < 0)
    operator delete(v58[0]);
}

void sub_19C996ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (*(char *)(v41 - 89) < 0)
    operator delete(*(void **)(v41 - 112));
  if (*(char *)(v41 - 57) < 0)
    operator delete(*(void **)(v41 - 80));
  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

void validateOptimizer(const CoreML::Specification::Optimizer *a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  const char *v14;
  uint64_t *v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  CoreML::Result::Result((CoreML::Result *)&v23);
  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  v4 = *(_DWORD *)(a2 + 28);
  if (v4 == 10)
  {
    v11 = *(uint64_t **)(a2 + 16);
    if (v11 == &CoreML::Specification::_SGDOptimizer_default_instance_ || !v11[2])
    {
      v14 = "SGD optimizer should include learningRate parameter.";
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "learningRate");
      if (v11[2])
        v12 = (uint64_t *)v11[2];
      else
        v12 = &CoreML::Specification::_DoubleParameter_default_instance_;
      CoreML::validateDoubleParameter((CoreML::Result *)&v18, (uint64_t)__p, (uint64_t)v12);
      v23 = v18;
      if (SHIBYTE(v25) < 0)
        operator delete((void *)v24);
      v24 = v19;
      v25 = v20;
      HIBYTE(v20) = 0;
      LOBYTE(v19) = 0;
      if (v17 < 0)
        operator delete(__p[0]);
      if ((v23 & 0xFFFFFFEF) != 0)
        goto LABEL_55;
      if (v11[3])
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "miniBatchSize");
        if (v11[3])
          v15 = (uint64_t *)v11[3];
        else
          v15 = &CoreML::Specification::_Int64Parameter_default_instance_;
        CoreML::validateInt64Parameter((CoreML::Result *)&v18, (uint64_t)__p, (uint64_t)v15, 1);
LABEL_71:
        v23 = v18;
        if (SHIBYTE(v25) < 0)
          operator delete((void *)v24);
        v24 = v19;
        v25 = v20;
        HIBYTE(v20) = 0;
        LOBYTE(v19) = 0;
        if (v17 < 0)
          operator delete(__p[0]);
        if ((v23 & 0xFFFFFFEF) == 0)
        {
          *(_QWORD *)a1 = v23;
          *(_OWORD *)((char *)a1 + 8) = v24;
          v13 = v25;
          goto LABEL_56;
        }
LABEL_55:
        *(_QWORD *)a1 = v23;
        *(_OWORD *)((char *)a1 + 8) = v24;
        v13 = v25;
LABEL_56:
        *((_QWORD *)a1 + 3) = v13;
        v24 = 0uLL;
        v25 = 0;
        goto LABEL_61;
      }
      v14 = "SGD optimizer should include miniBatchSize parameter.";
    }
  }
  else
  {
    if (v4 != 11)
    {
      MEMORY[0x1A1AD5EAC](v21, "Optimizer is not recognized.");
      *(_QWORD *)a1 = 15;
      std::operator+<char>();
      goto LABEL_61;
    }
    v5 = *(uint64_t **)(a2 + 16);
    if (v5 == &CoreML::Specification::_AdamOptimizer_default_instance_ || !v5[2])
    {
      v14 = "ADAM optimizer should include learningRate parameter.";
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "learningRate");
      if (v5[2])
        v6 = (uint64_t *)v5[2];
      else
        v6 = &CoreML::Specification::_DoubleParameter_default_instance_;
      CoreML::validateDoubleParameter((CoreML::Result *)&v18, (uint64_t)__p, (uint64_t)v6);
      v23 = v18;
      if (SHIBYTE(v25) < 0)
        operator delete((void *)v24);
      v24 = v19;
      v25 = v20;
      HIBYTE(v20) = 0;
      LOBYTE(v19) = 0;
      if (v17 < 0)
        operator delete(__p[0]);
      if ((v23 & 0xFFFFFFEF) != 0)
        goto LABEL_55;
      if (v5[3])
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "miniBatchSize");
        if (v5[3])
          v7 = (uint64_t *)v5[3];
        else
          v7 = &CoreML::Specification::_Int64Parameter_default_instance_;
        CoreML::validateInt64Parameter((CoreML::Result *)&v18, (uint64_t)__p, (uint64_t)v7, 1);
        v23 = v18;
        if (SHIBYTE(v25) < 0)
          operator delete((void *)v24);
        v24 = v19;
        v25 = v20;
        HIBYTE(v20) = 0;
        LOBYTE(v19) = 0;
        if (v17 < 0)
          operator delete(__p[0]);
        if ((v23 & 0xFFFFFFEF) != 0)
          goto LABEL_55;
        if (v5[4])
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "beta1");
          if (v5[4])
            v8 = (uint64_t *)v5[4];
          else
            v8 = &CoreML::Specification::_DoubleParameter_default_instance_;
          CoreML::validateDoubleParameter((CoreML::Result *)&v18, (uint64_t)__p, (uint64_t)v8);
          v23 = v18;
          if (SHIBYTE(v25) < 0)
            operator delete((void *)v24);
          v24 = v19;
          v25 = v20;
          HIBYTE(v20) = 0;
          LOBYTE(v19) = 0;
          if (v17 < 0)
            operator delete(__p[0]);
          if ((v23 & 0xFFFFFFEF) != 0)
            goto LABEL_55;
          if (v5[5])
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "beta2");
            if (v5[5])
              v9 = (uint64_t *)v5[5];
            else
              v9 = &CoreML::Specification::_DoubleParameter_default_instance_;
            CoreML::validateDoubleParameter((CoreML::Result *)&v18, (uint64_t)__p, (uint64_t)v9);
            v23 = v18;
            if (SHIBYTE(v25) < 0)
              operator delete((void *)v24);
            v24 = v19;
            v25 = v20;
            HIBYTE(v20) = 0;
            LOBYTE(v19) = 0;
            if (v17 < 0)
              operator delete(__p[0]);
            if ((v23 & 0xFFFFFFEF) != 0)
              goto LABEL_55;
            if (v5[6])
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "eps");
              if (v5[6])
                v10 = (uint64_t *)v5[6];
              else
                v10 = &CoreML::Specification::_DoubleParameter_default_instance_;
              CoreML::validateDoubleParameter((CoreML::Result *)&v18, (uint64_t)__p, (uint64_t)v10);
              goto LABEL_71;
            }
            v14 = "ADAM optimizer should include eps (epslion) parameter.";
          }
          else
          {
            v14 = "ADAM optimizer should include beta2 parameter.";
          }
        }
        else
        {
          v14 = "ADAM optimizer should include beta1 parameter.";
        }
      }
      else
      {
        v14 = "ADAM optimizer should include miniBatchSize parameter.";
      }
    }
  }
  MEMORY[0x1A1AD5EAC](v21, v14);
  *(_QWORD *)a1 = 15;
  std::operator+<char>();
LABEL_61:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
}

void sub_19C9974D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a14 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (*(char *)(v24 - 33) < 0)
    operator delete(*(void **)(v24 - 56));
  _Unwind_Resume(exception_object);
}

void validateOtherTopLevelUpdateParameters(const CoreML::Specification::NetworkUpdateParameters *a1, uint64_t *a2)
{
  uint64_t *v5;
  uint64_t *v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  CoreML::Result::Result((CoreML::Result *)&v14);
  __p[0] = 0;
  __p[1] = 0;
  v13 = 0;
  if (a2 == &CoreML::Specification::_NetworkUpdateParameters_default_instance_ || a2[6] == 0)
  {
    MEMORY[0x1A1AD5EAC](__p, "Epochs should be included in neural network update parameters.");
    *(_QWORD *)a1 = 15;
    std::operator+<char>();
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "epochs");
    if (a2[6])
      v5 = (uint64_t *)a2[6];
    else
      v5 = &CoreML::Specification::_Int64Parameter_default_instance_;
    CoreML::validateInt64Parameter((CoreML::Result *)&v9, (uint64_t)v7, (uint64_t)v5, 1);
    v14 = v9;
    if (SHIBYTE(v16) < 0)
      operator delete((void *)v15);
    v15 = v10;
    v16 = v11;
    HIBYTE(v11) = 0;
    LOBYTE(v10) = 0;
    if (v8 < 0)
      operator delete(v7[0]);
    if ((v14 & 0xFFFFFFEF) == 0 && a2[8])
    {
      std::string::basic_string[abi:ne180100]<0>(v7, "seed");
      if (a2[8])
        v6 = (uint64_t *)a2[8];
      else
        v6 = &CoreML::Specification::_Int64Parameter_default_instance_;
      CoreML::validateInt64Parameter((CoreML::Result *)&v9, (uint64_t)v7, (uint64_t)v6, 0);
      v14 = v9;
      if (SHIBYTE(v16) < 0)
        operator delete((void *)v15);
      v15 = v10;
      v16 = v11;
      HIBYTE(v11) = 0;
      LOBYTE(v10) = 0;
      if (v8 < 0)
        operator delete(v7[0]);
    }
    *(_QWORD *)a1 = v14;
    *(_OWORD *)((char *)a1 + 8) = v15;
    *((_QWORD *)a1 + 3) = v16;
    v15 = 0uLL;
    v16 = 0;
  }
  if (SHIBYTE(v16) < 0)
    operator delete((void *)v15);
}

void sub_19C997724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v24 - 33) < 0)
    operator delete(*(void **)(v24 - 56));
  _Unwind_Resume(exception_object);
}

void std::deque<std::string>::push_back(_QWORD *a1, __int128 *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  std::string *v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t i;
  _QWORD *v82;
  char *v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = (v5 - v4) >> 3;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = 170 * v6 - 1;
  v8 = a1[4];
  if (v7 != a1[5] + v8)
    goto LABEL_38;
  v9 = v8 >= 0xAA;
  v10 = v8 - 170;
  if (v9)
  {
    a1[4] = v10;
    v13 = *(_QWORD *)v4;
    v11 = v4 + 8;
    v12 = v13;
    a1[1] = v11;
    if (v5 == (char *)a1[3])
    {
      v14 = (uint64_t)&v11[-*a1];
      if ((unint64_t)v11 <= *a1)
      {
        if (v5 == (char *)*a1)
          v42 = 1;
        else
          v42 = (uint64_t)&v5[-*a1] >> 2;
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v42);
        v45 = &v43[8 * (v42 >> 2)];
        v46 = (uint64_t *)a1[1];
        v5 = v45;
        v47 = a1[2] - (_QWORD)v46;
        if (v47)
        {
          v5 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
          v48 = 8 * (v47 >> 3);
          v49 = &v43[8 * (v42 >> 2)];
          do
          {
            v50 = *v46++;
            *(_QWORD *)v49 = v50;
            v49 += 8;
            v48 -= 8;
          }
          while (v48);
        }
        v51 = (char *)*a1;
        *a1 = v43;
        a1[1] = v45;
        a1[2] = v5;
        a1[3] = &v43[8 * v44];
        if (v51)
        {
          operator delete(v51);
          v5 = (char *)a1[2];
        }
      }
      else
      {
        v15 = v14 >> 3;
        v16 = v14 >> 3 < -1;
        v17 = (v14 >> 3) + 2;
        if (v16)
          v18 = v17;
        else
          v18 = v15 + 1;
        v19 = -(v18 >> 1);
        v20 = v18 >> 1;
        v21 = &v11[-8 * v20];
        v22 = v5 - v11;
        if (v5 != v11)
        {
          memmove(&v11[-8 * v20], v11, v5 - v11);
          v5 = (char *)a1[1];
        }
        v23 = &v5[8 * v19];
        v5 = &v21[v22];
        a1[1] = v23;
        a1[2] = &v21[v22];
      }
    }
    *(_QWORD *)v5 = v12;
    goto LABEL_36;
  }
  v24 = (char *)a1[3];
  v25 = (char *)*a1;
  v26 = (uint64_t)&v24[-*a1];
  if (v6 >= v26 >> 3)
  {
    v29 = v26 >> 2;
    if (v24 == v25)
      v30 = 1;
    else
      v30 = v29;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v30);
    v33 = v32;
    v34 = &v31[8 * v6];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v113 = v35;
    v36 = operator new(0xFF0uLL);
    *(_QWORD *)&v37 = v34;
    *((_QWORD *)&v37 + 1) = &v31[8 * v33];
    if (v6 == v33)
    {
      v38 = 8 * v6;
      *(_QWORD *)&v39 = v113;
      if (v5 - v4 >= 1)
      {
        v40 = v38 >> 3;
        if (v40 >= -1)
          v41 = v40 + 1;
        else
          v41 = v40 + 2;
        v34 -= 8 * (v41 >> 1);
        *(_QWORD *)&v37 = v34;
        *((_QWORD *)&v39 + 1) = v34;
        goto LABEL_68;
      }
      v77 = v38 >> 2;
      if (v5 == v4)
        v78 = 1;
      else
        v78 = v77;
      v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v78);
      v34 = &v79[8 * (v78 >> 2)];
      *(_QWORD *)&v39 = v79;
      *((_QWORD *)&v39 + 1) = v34;
      *(_QWORD *)&v37 = v34;
      *((_QWORD *)&v37 + 1) = &v79[8 * v80];
      if (!v31)
      {
LABEL_68:
        *(_QWORD *)v34 = v36;
        *(_QWORD *)&v37 = v37 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          v82 = (_QWORD *)*((_QWORD *)&v39 + 1);
          if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
          {
            v84 = (_BYTE *)v37;
            if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
            {
              if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v39 + 1))
                v89 = 1;
              else
                v89 = (uint64_t)(*((_QWORD *)&v37 + 1) - *((_QWORD *)&v39 + 1)) >> 2;
              v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v89);
              v83 = &v90[(2 * v89 + 6) & 0xFFFFFFFFFFFFFFF8];
              v92 = v83;
              v93 = v84 - (_BYTE *)v82;
              if (v84 != (_BYTE *)v82)
              {
                v92 = &v83[v93 & 0xFFFFFFFFFFFFFFF8];
                v94 = 8 * (v93 >> 3);
                v95 = v83;
                v96 = v82;
                do
                {
                  v97 = *v96++;
                  *(_QWORD *)v95 = v97;
                  v95 += 8;
                  v94 -= 8;
                }
                while (v94);
              }
              *(_QWORD *)&v39 = v90;
              *((_QWORD *)&v39 + 1) = v83;
              *(_QWORD *)&v37 = v92;
              *((_QWORD *)&v37 + 1) = &v90[8 * v91];
              if (v82)
              {
                v111 = v37;
                v115 = v39;
                operator delete(v82);
                v37 = v111;
                v39 = v115;
              }
            }
            else
            {
              v85 = (uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3;
              if (v85 >= -1)
                v86 = v85 + 1;
              else
                v86 = v85 + 2;
              v87 = v86 >> 1;
              v88 = v37 + 8 * (v86 >> 1);
              v83 = (char *)(v88 - (v37 - *((_QWORD *)&v39 + 1)));
              if ((_QWORD)v37 == *((_QWORD *)&v39 + 1))
              {
                v84 = (_BYTE *)*((_QWORD *)&v39 + 1);
              }
              else
              {
                v112 = *((_QWORD *)&v37 + 1);
                v114 = v39;
                memmove((void *)(v88 - (v37 - *((_QWORD *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((_QWORD *)&v39 + 1));
                *((_QWORD *)&v37 + 1) = v112;
                *(_QWORD *)&v39 = v114;
              }
              *((_QWORD *)&v39 + 1) = v83;
              *(_QWORD *)&v37 = &v84[8 * v87];
            }
          }
          else
          {
            v83 = (char *)*((_QWORD *)&v39 + 1);
          }
          v98 = *(_QWORD *)(i - 8);
          *((_QWORD *)v83 - 1) = v98;
          *((_QWORD *)&v39 + 1) -= 8;
        }
        v99 = (char *)*a1;
        *(_OWORD *)a1 = v39;
        *((_OWORD *)a1 + 1) = v37;
        if (v99)
        {
          operator delete(v99);
          v5 = (char *)a1[2];
        }
        else
        {
          v5 = (char *)v37;
        }
        goto LABEL_37;
      }
      v110 = v37;
      v113 = v39;
      operator delete(v31);
      v37 = v110;
    }
    v39 = v113;
    goto LABEL_68;
  }
  v27 = operator new(0xFF0uLL);
  v28 = v27;
  if (v24 == v5)
  {
    if (v4 == v25)
    {
      if (v5 == v4)
        v55 = 1;
      else
        v55 = (v24 - v4) >> 2;
      v56 = 2 * v55;
      v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v55);
      v4 = &v57[(v56 + 6) & 0xFFFFFFFFFFFFFFF8];
      v59 = (uint64_t *)a1[1];
      v60 = v4;
      v61 = a1[2] - (_QWORD)v59;
      if (v61)
      {
        v60 = &v4[v61 & 0xFFFFFFFFFFFFFFF8];
        v62 = 8 * (v61 >> 3);
        v63 = v4;
        do
        {
          v64 = *v59++;
          *(_QWORD *)v63 = v64;
          v63 += 8;
          v62 -= 8;
        }
        while (v62);
      }
      v65 = (char *)*a1;
      *a1 = v57;
      a1[1] = v4;
      a1[2] = v60;
      a1[3] = &v57[8 * v58];
      if (v65)
      {
        operator delete(v65);
        v4 = (char *)a1[1];
      }
    }
    *((_QWORD *)v4 - 1) = v28;
    v66 = (char *)a1[1];
    v67 = (char *)a1[2];
    a1[1] = v66 - 8;
    v68 = *((_QWORD *)v66 - 1);
    a1[1] = v66;
    if (v67 == (char *)a1[3])
    {
      v69 = (uint64_t)&v66[-*a1];
      if ((unint64_t)v66 <= *a1)
      {
        if (v67 == (char *)*a1)
          v100 = 1;
        else
          v100 = (uint64_t)&v67[-*a1] >> 2;
        v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v100);
        v103 = &v101[8 * (v100 >> 2)];
        v104 = (uint64_t *)a1[1];
        v67 = v103;
        v105 = a1[2] - (_QWORD)v104;
        if (v105)
        {
          v67 = &v103[v105 & 0xFFFFFFFFFFFFFFF8];
          v106 = 8 * (v105 >> 3);
          v107 = &v101[8 * (v100 >> 2)];
          do
          {
            v108 = *v104++;
            *(_QWORD *)v107 = v108;
            v107 += 8;
            v106 -= 8;
          }
          while (v106);
        }
        v109 = (char *)*a1;
        *a1 = v101;
        a1[1] = v103;
        a1[2] = v67;
        a1[3] = &v101[8 * v102];
        if (v109)
        {
          operator delete(v109);
          v67 = (char *)a1[2];
        }
      }
      else
      {
        v70 = v69 >> 3;
        v16 = v69 >> 3 < -1;
        v71 = (v69 >> 3) + 2;
        if (v16)
          v72 = v71;
        else
          v72 = v70 + 1;
        v73 = -(v72 >> 1);
        v74 = v72 >> 1;
        v75 = &v66[-8 * v74];
        v76 = v67 - v66;
        if (v67 != v66)
        {
          memmove(&v66[-8 * v74], v66, v67 - v66);
          v66 = (char *)a1[1];
        }
        v67 = &v75[v76];
        a1[1] = &v66[8 * v73];
        a1[2] = &v75[v76];
      }
    }
    *(_QWORD *)v67 = v68;
  }
  else
  {
    *(_QWORD *)v5 = v27;
  }
LABEL_36:
  v5 = (char *)(a1[2] + 8);
  a1[2] = v5;
LABEL_37:
  v4 = (char *)a1[1];
LABEL_38:
  if (v5 == v4)
  {
    v53 = 0;
  }
  else
  {
    v52 = a1[5] + a1[4];
    v53 = (std::string *)(*(_QWORD *)&v4[8 * (v52 / 0xAA)] + 24 * (v52 % 0xAA));
  }
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v53, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v54 = *a2;
    v53->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
  }
  ++a1[5];
}

void sub_19C997D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void std::deque<std::string>::pop_front(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA);
  if (*(char *)(v3 + 23) < 0)
  {
    operator delete(*(void **)v3);
    v2 = *(_QWORD *)(a1 + 32);
  }
  v4 = *(_QWORD *)(a1 + 40) - 1;
  v5 = v2 + 1;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  if (v5 >= 0x154)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 170;
  }
}

uint64_t CoreML::NeuralNetworkValidatorGraph::getNodeFromName(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v6;

  if ((_QWORD *)(a1 + 8) == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(a1, a2))return 0;
  v4 = *std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v6, a2);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return *(_QWORD *)(v4 + 56);
}

uint64_t std::deque<std::string>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v9 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          v10 = (unint64_t)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
    goto LABEL_16;
  }
  if (v12 == 2)
  {
    v13 = 170;
LABEL_16:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<CoreML::LayerNode>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<CoreML::LayerNode>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<CoreML::LayerNode>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

_QWORD *std::__tree<std::__value_type<std::string,CoreML::LayerNode *>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::LayerNode *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::LayerNode *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, __int128 **a3)
{
  uint64_t **v5;
  _QWORD *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v15, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = operator new(0x40uLL);
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v11 = v15;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v11;
    *v7 = v6;
    v12 = **(_QWORD **)a1;
    v13 = v6;
    if (v12)
    {
      *(_QWORD *)a1 = v12;
      v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v13);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

void sub_19C998158(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::LayerNode>>(unint64_t a1)
{
  if (a1 >= 0x1E1E1E1E1E1E1E2)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(136 * a1);
}

void std::vector<CoreML::LayerNode>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 136;
    v4 -= 136;
    std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<CoreML::LayerNode>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 136;
    std::allocator<CoreML::LayerNode>::destroy[abi:ne180100](i - 136);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetworkRegressor>(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  std::string *v15;
  std::string::size_type v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  void **v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type size;
  __int128 v32;
  std::string::size_type v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t *v41;
  uint64_t v42;
  const std::string **v43;
  std::string::size_type v44;
  __int128 v45;
  std::string::size_type v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 v53;
  int data;
  uint64_t *v55;
  uint64_t *v56;
  int v57;
  uint64_t *v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  __int128 *v62;
  __int128 v63;
  char v64;
  unint64_t v65;
  __int128 v66;
  uint64_t NodeFromName;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  const std::string *v72;
  int v73;
  std::string *v74;
  std::string::size_type v75;
  char v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  void *v80;
  char v81;
  uint64_t v82;
  void **v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  void *__p[6];
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int16 v98;
  std::string v99;
  void *v100;
  __int128 v101;
  char **v102;
  char *v103[2];
  std::string v104;
  void *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t *v108;
  std::string::value_type *v109;
  std::string v110;
  void *v111;
  _QWORD v112[2];
  std::string v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  CoreML::Result::Result((CoreML::Result *)a1);
  CoreML::Result::Result((CoreML::Result *)__p);
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  if ((int)v4 < 1)
  {
LABEL_16:
    v100 = 0;
    v101 = 0uLL;
    MEMORY[0x1A1AD5EAC](&v100, "The model is marked as updatable, but none of the layers are updatable.");
    v106 = 14;
    std::operator+<char>();
  }
  else
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      while (1)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 + 8 * v5);
        if (*(_BYTE *)(v7 + 120))
          break;
        if (++v5 >= (int)v4)
        {
          if ((v6 & 1) == 0)
            goto LABEL_16;
LABEL_15:
          v107 = *(_OWORD *)&__p[1];
          v106 = (uint64_t)__p[0];
          v108 = (uint64_t *)__p[3];
          memset(&__p[1], 0, 24);
          goto LABEL_19;
        }
      }
      v8 = *(_DWORD *)(v7 + 140);
      if (v8 != 100 && v8 != 420 && v8 != 140)
        break;
      validateWeightParamsUpdatable((const CoreML::Specification::NeuralNetworkLayer *)&v100, v7);
      v9 = (int)v100;
      __p[0] = v100;
      if (SHIBYTE(__p[3]) < 0)
      {
        operator delete(__p[1]);
        v9 = (int)__p[0];
      }
      *(_OWORD *)&__p[1] = v101;
      __p[3] = v102;
      if ((v9 & 0xFFFFFFEF) == 0)
      {
        ++v5;
        v6 = 1;
        v4 = *(int *)(a2 + 24);
        if (v5 < v4)
          continue;
      }
      goto LABEL_15;
    }
    std::operator+<char>();
    v79 = std::string::append(&v104, "' is marked as updatable, however it is not supported as the type of this layer is neither convolution nor inner-product.");
    v80 = (void *)v79->__r_.__value_.__r.__words[0];
    v110.__r_.__value_.__r.__words[0] = v79->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v79->__r_.__value_.__r.__words[1] + 7);
    v81 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)((char *)&v101 + 7) = *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words + 7);
    v100 = v80;
    *(_QWORD *)&v101 = v110.__r_.__value_.__r.__words[0];
    HIBYTE(v101) = v81;
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    v106 = 14;
    std::operator+<char>();
  }
  if (SHIBYTE(v101) < 0)
    operator delete(v100);
LABEL_19:
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  v10 = v106;
  *a1 = (void *)v106;
  if (*((char *)a1 + 31) < 0)
  {
    operator delete(a1[1]);
    v10 = *(_DWORD *)a1;
  }
  *(_OWORD *)(a1 + 1) = v107;
  a1[3] = v108;
  if ((v10 & 0xFFFFFFEF) == 0)
  {
    v83 = a1 + 1;
    CoreML::Result::Result((CoreML::Result *)__p);
    v107 = 0uLL;
    v106 = (uint64_t)&v107;
    memset(&v104, 0, sizeof(v104));
    if (*(int *)(a2 + 24) < 1)
    {
LABEL_40:
      v18 = *(_QWORD *)(a2 + 64)
          ? *(uint64_t **)(a2 + 64)
          : &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v18 + 6) < 1)
      {
LABEL_59:
        v101 = *(_OWORD *)&__p[1];
        v100 = __p[0];
        v102 = (char **)__p[3];
        memset(&__p[1], 0, 24);
      }
      else
      {
        v19 = 0;
        while (1)
        {
          v20 = *(__int128 **)(*(_QWORD *)(v18[4] + 8 * v19 + 8) + 16);
          if (*((char *)v20 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
          }
          else
          {
            v21 = *v20;
            v110.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
            *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v21;
          }
          v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>((_QWORD *)v107, &v110);
          if (v22)
          {
            std::operator+<char>();
            v23 = std::string::append(&v99, "', i.e., there are more than one layers or loss layers with this name.");
            v24 = v23->__r_.__value_.__r.__words[0];
            v113.__r_.__value_.__r.__words[0] = v23->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
            v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v104.__r_.__value_.__l.__data_);
            v104.__r_.__value_.__r.__words[0] = v24;
            v104.__r_.__value_.__l.__size_ = v113.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v104.__r_.__value_.__s + 23) = v25;
            if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v99.__r_.__value_.__l.__data_);
            v100 = (void *)14;
            std::operator+<char>();
          }
          else
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v110, (uint64_t)&v110);
          }
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
          if (v22)
            break;
          if (++v19 >= *((int *)v18 + 6))
            goto LABEL_59;
        }
      }
    }
    else
    {
      v11 = 0;
      while (1)
      {
        v12 = *(__int128 **)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v11 + 8) + 112);
        if (*((char *)v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
        }
        else
        {
          v13 = *v12;
          v110.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v13;
        }
        v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>((_QWORD *)v107, &v110);
        if (v14)
        {
          std::operator+<char>();
          v15 = std::string::append(&v99, "', i.e., there are more than one layers or loss layers with this name.");
          v16 = v15->__r_.__value_.__r.__words[0];
          v113.__r_.__value_.__r.__words[0] = v15->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
          v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v104.__r_.__value_.__l.__data_);
          v104.__r_.__value_.__r.__words[0] = v16;
          v104.__r_.__value_.__l.__size_ = v113.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7);
          *((_BYTE *)&v104.__r_.__value_.__s + 23) = v17;
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          v100 = (void *)14;
          std::operator+<char>();
        }
        else
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v110, (uint64_t)&v110);
        }
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        if (v14)
          break;
        if (++v11 >= *(int *)(a2 + 24))
          goto LABEL_40;
      }
    }
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v107);
    v26 = a1;
    if (SHIBYTE(__p[3]) < 0)
      operator delete(__p[1]);
    v27 = (int)v100;
    *a1 = v100;
    if (*((char *)a1 + 31) < 0)
    {
      operator delete(a1[1]);
      v27 = *(_DWORD *)a1;
    }
    *(_OWORD *)v83 = v101;
    a1[3] = v102;
    if ((v27 & 0xFFFFFFEF) == 0)
    {
      CoreML::Result::Result((CoreML::Result *)&v104);
      v28 = *(uint64_t **)(a2 + 64);
      if (!v28)
        v28 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      v29 = *((int *)v28 + 6);
      if ((int)v29 >= 2)
      {
        memset(__p, 0, 24);
        MEMORY[0x1A1AD5EAC](__p, "This model has more than one loss layers specified, which is not supported at the moment.");
        v110.__r_.__value_.__r.__words[0] = 15;
        std::operator+<char>();
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        goto LABEL_195;
      }
      v100 = &v101;
      v101 = 0uLL;
      v103[0] = 0;
      v103[1] = 0;
      v102 = v103;
      memset(&v99, 0, sizeof(v99));
      std::vector<CoreML::LayerNode>::resize((uint64_t *)&v99, *(int *)(a2 + 24) + v29);
      if (*(int *)(a2 + 24) >= 1)
      {
        v30 = 0;
        do
        {
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, *(const CoreML::Specification::NeuralNetworkLayer **)(*(_QWORD *)(a2 + 32) + 8 * v30 + 8));
          size = v99.__r_.__value_.__l.__size_;
          if (v99.__r_.__value_.__l.__size_ >= v99.__r_.__value_.__r.__words[2])
          {
            v34 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 3);
            v35 = v34 + 1;
            if (v34 + 1 > 0x1E1E1E1E1E1E1E1)
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            if (0xE1E1E1E1E1E1E1E2
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) > v35)
              v35 = 0xE1E1E1E1E1E1E1E2
                  * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3);
            if (0xF0F0F0F0F0F0F0F1
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) >= 0xF0F0F0F0F0F0F0)
              v36 = 0x1E1E1E1E1E1E1E1;
            else
              v36 = v35;
            v109 = &v99.__r_.__value_.__s.__data_[16];
            v37 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::LayerNode>>(v36);
            v38 = &v37[17 * v34];
            v106 = (uint64_t)v37;
            *(_QWORD *)&v107 = v38;
            v108 = &v37[17 * v39];
            *v38 = 0;
            v38[1] = 0;
            v38[2] = 0;
            *(_OWORD *)v38 = *(_OWORD *)__p;
            v38[2] = (uint64_t)__p[2];
            memset(__p, 0, 24);
            v38[3] = 0;
            v38[4] = 0;
            v38[5] = 0;
            *(_OWORD *)(v38 + 3) = *(_OWORD *)&__p[3];
            v38[5] = (uint64_t)__p[5];
            memset(&__p[3], 0, 24);
            v38[6] = v91;
            v40 = v92;
            v38[9] = v93;
            *(_OWORD *)(v38 + 7) = v40;
            v93 = 0;
            v92 = 0uLL;
            v38[10] = 0;
            v38[11] = 0;
            v38[12] = 0;
            *((_OWORD *)v38 + 5) = v94;
            v38[12] = v95;
            v94 = 0uLL;
            v95 = 0;
            v38[13] = 0;
            v38[14] = 0;
            v38[15] = 0;
            *(_OWORD *)(v38 + 13) = v96;
            v38[15] = v97;
            v96 = 0uLL;
            v97 = 0;
            *((_WORD *)v38 + 64) = v98;
            *((_QWORD *)&v107 + 1) = v38 + 17;
            std::vector<CoreML::LayerNode>::__swap_out_circular_buffer((uint64_t *)&v99, &v106);
            v33 = v99.__r_.__value_.__l.__size_;
            std::__split_buffer<CoreML::LayerNode>::~__split_buffer((uint64_t)&v106);
          }
          else
          {
            *(_QWORD *)(v99.__r_.__value_.__l.__size_ + 16) = 0;
            *(_QWORD *)(size + 24) = 0;
            *(_QWORD *)size = 0;
            *(_QWORD *)(size + 8) = 0;
            *(_OWORD *)size = *(_OWORD *)__p;
            *(void **)(size + 16) = __p[2];
            memset(__p, 0, 24);
            *(_QWORD *)(size + 32) = 0;
            *(_QWORD *)(size + 40) = 0;
            *(_OWORD *)(size + 24) = *(_OWORD *)&__p[3];
            *(void **)(size + 40) = __p[5];
            memset(&__p[3], 0, 24);
            *(_QWORD *)(size + 48) = v91;
            v32 = v92;
            *(_QWORD *)(size + 72) = v93;
            *(_QWORD *)(size + 80) = 0;
            *(_OWORD *)(size + 56) = v32;
            v93 = 0;
            v92 = 0uLL;
            *(_QWORD *)(size + 88) = 0;
            *(_QWORD *)(size + 96) = 0;
            *(_OWORD *)(size + 80) = v94;
            v94 = 0uLL;
            *(_QWORD *)(size + 96) = v95;
            *(_QWORD *)(size + 104) = 0;
            v95 = 0;
            *(_QWORD *)(size + 112) = 0;
            *(_QWORD *)(size + 120) = 0;
            *(_OWORD *)(size + 104) = v96;
            *(_QWORD *)(size + 120) = v97;
            v96 = 0uLL;
            v97 = 0;
            *(_WORD *)(size + 128) = v98;
            v33 = size + 136;
          }
          v99.__r_.__value_.__l.__size_ = v33;
          v106 = (uint64_t)&v96;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          v106 = (uint64_t)&v94;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          if (SHIBYTE(v93) < 0)
            operator delete((void *)v92);
          if (__p[3])
          {
            __p[4] = __p[3];
            operator delete(__p[3]);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode((CoreML::NeuralNetworkValidatorGraph *)&v100, (CoreML::LayerNode *)(v99.__r_.__value_.__l.__size_ - 136));
          ++v30;
        }
        while (v30 < *(int *)(a2 + 24));
      }
      v41 = *(uint64_t **)(a2 + 64);
      if (!v41)
        v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v41 + 6) >= 1)
      {
        v42 = 0;
        while (1)
        {
          v43 = *(const std::string ***)(v41[4] + 8 * v42 + 8);
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, v43);
          v44 = v99.__r_.__value_.__l.__size_;
          if (v99.__r_.__value_.__l.__size_ >= v99.__r_.__value_.__r.__words[2])
          {
            v47 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 3);
            v48 = v47 + 1;
            if (v47 + 1 > 0x1E1E1E1E1E1E1E1)
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            if (0xE1E1E1E1E1E1E1E2
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) > v48)
              v48 = 0xE1E1E1E1E1E1E1E2
                  * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3);
            v49 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) >= 0xF0F0F0F0F0F0F0
                ? 0x1E1E1E1E1E1E1E1
                : v48;
            v109 = &v99.__r_.__value_.__s.__data_[16];
            v50 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::LayerNode>>(v49);
            v51 = &v50[17 * v47];
            v106 = (uint64_t)v50;
            *(_QWORD *)&v107 = v51;
            v108 = &v50[17 * v52];
            *v51 = 0;
            v51[1] = 0;
            v51[2] = 0;
            *(_OWORD *)v51 = *(_OWORD *)__p;
            v51[2] = (uint64_t)__p[2];
            memset(__p, 0, 24);
            v51[3] = 0;
            v51[4] = 0;
            v51[5] = 0;
            *(_OWORD *)(v51 + 3) = *(_OWORD *)&__p[3];
            v51[5] = (uint64_t)__p[5];
            memset(&__p[3], 0, 24);
            v51[6] = v91;
            v53 = v92;
            v51[9] = v93;
            *(_OWORD *)(v51 + 7) = v53;
            v93 = 0;
            v92 = 0uLL;
            v51[10] = 0;
            v51[11] = 0;
            v51[12] = 0;
            *((_OWORD *)v51 + 5) = v94;
            v51[12] = v95;
            v94 = 0uLL;
            v95 = 0;
            v51[13] = 0;
            v51[14] = 0;
            v51[15] = 0;
            *(_OWORD *)(v51 + 13) = v96;
            v51[15] = v97;
            v96 = 0uLL;
            v97 = 0;
            *((_WORD *)v51 + 64) = v98;
            *((_QWORD *)&v107 + 1) = v51 + 17;
            std::vector<CoreML::LayerNode>::__swap_out_circular_buffer((uint64_t *)&v99, &v106);
            v46 = v99.__r_.__value_.__l.__size_;
            std::__split_buffer<CoreML::LayerNode>::~__split_buffer((uint64_t)&v106);
          }
          else
          {
            *(_QWORD *)(v99.__r_.__value_.__l.__size_ + 16) = 0;
            *(_QWORD *)(v44 + 24) = 0;
            *(_QWORD *)v44 = 0;
            *(_QWORD *)(v44 + 8) = 0;
            *(_OWORD *)v44 = *(_OWORD *)__p;
            *(void **)(v44 + 16) = __p[2];
            memset(__p, 0, 24);
            *(_QWORD *)(v44 + 32) = 0;
            *(_QWORD *)(v44 + 40) = 0;
            *(_OWORD *)(v44 + 24) = *(_OWORD *)&__p[3];
            *(void **)(v44 + 40) = __p[5];
            memset(&__p[3], 0, 24);
            *(_QWORD *)(v44 + 48) = v91;
            v45 = v92;
            *(_QWORD *)(v44 + 72) = v93;
            *(_QWORD *)(v44 + 80) = 0;
            *(_OWORD *)(v44 + 56) = v45;
            v93 = 0;
            v92 = 0uLL;
            *(_QWORD *)(v44 + 88) = 0;
            *(_QWORD *)(v44 + 96) = 0;
            *(_OWORD *)(v44 + 80) = v94;
            v94 = 0uLL;
            *(_QWORD *)(v44 + 96) = v95;
            *(_QWORD *)(v44 + 104) = 0;
            v95 = 0;
            *(_QWORD *)(v44 + 112) = 0;
            *(_QWORD *)(v44 + 120) = 0;
            *(_OWORD *)(v44 + 104) = v96;
            *(_QWORD *)(v44 + 120) = v97;
            v96 = 0uLL;
            v97 = 0;
            *(_WORD *)(v44 + 128) = v98;
            v46 = v44 + 136;
          }
          v99.__r_.__value_.__l.__size_ = v46;
          v106 = (uint64_t)&v96;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          v106 = (uint64_t)&v94;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          if (SHIBYTE(v93) < 0)
            operator delete((void *)v92);
          if (__p[3])
          {
            __p[4] = __p[3];
            operator delete(__p[3]);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode((CoreML::NeuralNetworkValidatorGraph *)&v100, (CoreML::LayerNode *)(v99.__r_.__value_.__l.__size_ - 136));
          validateLossLayer((const CoreML::Specification::LossLayer *)__p, (const CoreML::NeuralNetworkValidatorGraph *)v43, (uint64_t)&v100);
          data = (int)__p[0];
          v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
          if (SHIBYTE(v105) < 0)
          {
            operator delete((void *)v104.__r_.__value_.__l.__size_);
            data = (int)v104.__r_.__value_.__l.__data_;
          }
          *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
          v105 = __p[3];
          if ((data & 0xFFFFFFEF) != 0)
            break;
          ++v42;
          v41 = *(uint64_t **)(a2 + 64);
          if (!v41)
            v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
          if (v42 >= *((int *)v41 + 6))
            goto LABEL_115;
        }
        v110 = v104;
        v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        v105 = 0;
        v26 = a1;
        goto LABEL_194;
      }
LABEL_115:
      v55 = (uint64_t *)v41[5];
      if (v55)
        v56 = v55;
      else
        v56 = &CoreML::Specification::_Optimizer_default_instance_;
      validateOptimizer((const CoreML::Specification::Optimizer *)__p, (uint64_t)v56);
      v57 = (int)__p[0];
      v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
      v26 = a1;
      if (SHIBYTE(v105) < 0)
      {
        operator delete((void *)v104.__r_.__value_.__l.__size_);
        v57 = (int)v104.__r_.__value_.__l.__data_;
      }
      *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
      v105 = __p[3];
      if ((v57 & 0xFFFFFFEF) != 0)
        goto LABEL_127;
      if (*(_QWORD *)(a2 + 64))
        v58 = *(uint64_t **)(a2 + 64);
      else
        v58 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      validateOtherTopLevelUpdateParameters((const CoreML::Specification::NetworkUpdateParameters *)__p, v58);
      v59 = (int)__p[0];
      v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
      if (SHIBYTE(v105) < 0)
      {
        operator delete((void *)v104.__r_.__value_.__l.__size_);
        v59 = (int)v104.__r_.__value_.__l.__data_;
      }
      *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
      v105 = __p[3];
      if ((v59 & 0xFFFFFFEF) != 0)
      {
LABEL_127:
        v110 = v104;
        v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        v105 = 0;
LABEL_194:
        __p[0] = &v99;
        std::vector<CoreML::LayerNode>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v103[0]);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v101);
LABEL_195:
        if (SHIBYTE(v105) < 0)
          operator delete((void *)v104.__r_.__value_.__l.__size_);
        *v26 = (void *)v110.__r_.__value_.__r.__words[0];
        if (*((char *)v26 + 31) < 0)
          operator delete(*v83);
        *(_OWORD *)v83 = *(_OWORD *)&v110.__r_.__value_.__r.__words[1];
        a1[3] = v111;
        return;
      }
      v107 = 0uLL;
      v106 = (uint64_t)&v107;
      v60 = *(uint64_t **)(a2 + 64);
      if (!v60)
        v60 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v60 + 6) < 1)
      {
LABEL_192:
        v110 = v104;
        v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        v105 = 0;
LABEL_193:
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v107);
        v26 = a1;
        goto LABEL_194;
      }
      v61 = 0;
      while (1)
      {
        v62 = *(__int128 **)(*(_QWORD *)(v60[4] + 8 * v61 + 8) + 16);
        if (*((char *)v62 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v62, *((_QWORD *)v62 + 1));
        }
        else
        {
          v63 = *v62;
          v113.__r_.__value_.__r.__words[2] = *((_QWORD *)v62 + 2);
          *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v63;
        }
        v82 = v61;
        memset(__p, 0, sizeof(__p));
        std::deque<std::string>::push_back(__p, (__int128 *)&v113);
        v64 = 0;
        memset(&v89, 0, sizeof(v89));
        while (__p[5])
        {
          v65 = *((_QWORD *)__p[1] + (unint64_t)__p[4] / 0xAA) + 24 * ((unint64_t)__p[4] % 0xAA);
          if (*(char *)(v65 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v65, *(_QWORD *)(v65 + 8));
          }
          else
          {
            v66 = *(_OWORD *)v65;
            v88.__r_.__value_.__r.__words[2] = *(_QWORD *)(v65 + 16);
            *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v66;
          }
          std::deque<std::string>::pop_front((uint64_t)__p);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v87, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
          else
            v87 = v88;
          NodeFromName = CoreML::NeuralNetworkValidatorGraph::getNodeFromName((uint64_t)&v100, &v87);
          v68 = NodeFromName;
          if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (NodeFromName)
              goto LABEL_146;
            goto LABEL_173;
          }
          operator delete(v87.__r_.__value_.__l.__data_);
          if (v68)
          {
LABEL_146:
            v69 = *(uint64_t **)v68;
            v70 = *(uint64_t **)(v68 + 8);
            while (1)
            {
              if (v69 == v70)
              {
                v73 = 0;
                goto LABEL_178;
              }
              v71 = *v69;
              v72 = (const std::string *)(*v69 + 56);
              if (*(char *)(*v69 + 79) < 0)
                std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(v71 + 56), *(_QWORD *)(v71 + 64));
              else
                v86 = *v72;
              if (&v107 != (__int128 *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v106, &v86))break;
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v86, (uint64_t)&v86);
              std::deque<std::string>::push_back(__p, (__int128 *)&v86);
              if (((*(_BYTE *)(v71 + 128) != 0) & v64) == 1)
              {
                memset(&v85, 0, sizeof(v85));
                std::operator+<char>();
                v74 = std::string::append(&v84, "), which does not support backpropagation, between an updatable marked layer and the loss function.");
                v75 = v74->__r_.__value_.__r.__words[0];
                v112[0] = v74->__r_.__value_.__l.__size_;
                *(_QWORD *)((char *)v112 + 7) = *(std::string::size_type *)((char *)&v74->__r_.__value_.__r.__words[1]
                                                                          + 7);
                v76 = HIBYTE(v74->__r_.__value_.__r.__words[2]);
                v74->__r_.__value_.__l.__size_ = 0;
                v74->__r_.__value_.__r.__words[2] = 0;
                v74->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v85.__r_.__value_.__l.__data_);
                v85.__r_.__value_.__r.__words[0] = v75;
                v85.__r_.__value_.__l.__size_ = v112[0];
                *(std::string::size_type *)((char *)&v85.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v112 + 7);
                *((_BYTE *)&v85.__r_.__value_.__s + 23) = v76;
                if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v84.__r_.__value_.__l.__data_);
                v110.__r_.__value_.__r.__words[0] = 15;
                std::operator+<char>();
                if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v85.__r_.__value_.__l.__data_);
                v64 = 1;
                v73 = 1;
              }
              else if (*(_BYTE *)(v71 + 129))
              {
                v73 = 0;
              }
              else
              {
                if (*(_DWORD *)(v71 + 48) == 175 && *(_DWORD *)(v68 + 52) == 10)
                  break;
                std::string::operator=(&v89, v72);
                v73 = 0;
                v64 = 1;
              }
LABEL_166:
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v86.__r_.__value_.__l.__data_);
              if (v73 != 14 && v73)
                goto LABEL_178;
              ++v69;
            }
            v73 = 14;
            goto LABEL_166;
          }
LABEL_173:
          std::operator+<char>();
          v77 = std::string::append(&v85, "'.");
          v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          v86.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v85.__r_.__value_.__l.__data_);
          v110.__r_.__value_.__r.__words[0] = 15;
          std::operator+<char>();
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v86.__r_.__value_.__l.__data_);
          v73 = 1;
LABEL_178:
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v88.__r_.__value_.__l.__data_);
            if (v73)
              goto LABEL_184;
          }
          else if (v73)
          {
            goto LABEL_184;
          }
        }
        v73 = 0;
LABEL_184:
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        std::deque<std::string>::~deque[abi:ne180100]((uint64_t)__p);
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v113.__r_.__value_.__l.__data_);
        if (v73)
          goto LABEL_193;
        v61 = v82 + 1;
        v60 = *(uint64_t **)(a2 + 64);
        if (!v60)
          v60 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
        if (v61 >= *((int *)v60 + 6))
          goto LABEL_192;
      }
    }
  }
}

void sub_19C99948C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;

  if (a62 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v62 + 31) < 0)
    operator delete(*(void **)(v62 + 8));
  _Unwind_Resume(a1);
}

void validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  std::string *v15;
  std::string::size_type v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  void **v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type size;
  __int128 v32;
  std::string::size_type v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t *v41;
  uint64_t v42;
  const std::string **v43;
  std::string::size_type v44;
  __int128 v45;
  std::string::size_type v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 v53;
  int data;
  uint64_t *v55;
  uint64_t *v56;
  int v57;
  uint64_t *v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  __int128 *v62;
  __int128 v63;
  char v64;
  unint64_t v65;
  __int128 v66;
  uint64_t NodeFromName;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  const std::string *v72;
  int v73;
  std::string *v74;
  std::string::size_type v75;
  char v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  void *v80;
  char v81;
  uint64_t v82;
  void **v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  void *__p[6];
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int16 v98;
  std::string v99;
  void *v100;
  __int128 v101;
  char **v102;
  char *v103[2];
  std::string v104;
  void *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t *v108;
  std::string::value_type *v109;
  std::string v110;
  void *v111;
  _QWORD v112[2];
  std::string v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  CoreML::Result::Result((CoreML::Result *)a1);
  CoreML::Result::Result((CoreML::Result *)__p);
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  if ((int)v4 < 1)
  {
LABEL_16:
    v100 = 0;
    v101 = 0uLL;
    MEMORY[0x1A1AD5EAC](&v100, "The model is marked as updatable, but none of the layers are updatable.");
    v106 = 14;
    std::operator+<char>();
  }
  else
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      while (1)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 + 8 * v5);
        if (*(_BYTE *)(v7 + 120))
          break;
        if (++v5 >= (int)v4)
        {
          if ((v6 & 1) == 0)
            goto LABEL_16;
LABEL_15:
          v107 = *(_OWORD *)&__p[1];
          v106 = (uint64_t)__p[0];
          v108 = (uint64_t *)__p[3];
          memset(&__p[1], 0, 24);
          goto LABEL_19;
        }
      }
      v8 = *(_DWORD *)(v7 + 140);
      if (v8 != 100 && v8 != 420 && v8 != 140)
        break;
      validateWeightParamsUpdatable((const CoreML::Specification::NeuralNetworkLayer *)&v100, v7);
      v9 = (int)v100;
      __p[0] = v100;
      if (SHIBYTE(__p[3]) < 0)
      {
        operator delete(__p[1]);
        v9 = (int)__p[0];
      }
      *(_OWORD *)&__p[1] = v101;
      __p[3] = v102;
      if ((v9 & 0xFFFFFFEF) == 0)
      {
        ++v5;
        v6 = 1;
        v4 = *(int *)(a2 + 24);
        if (v5 < v4)
          continue;
      }
      goto LABEL_15;
    }
    std::operator+<char>();
    v79 = std::string::append(&v104, "' is marked as updatable, however it is not supported as the type of this layer is neither convolution nor inner-product.");
    v80 = (void *)v79->__r_.__value_.__r.__words[0];
    v110.__r_.__value_.__r.__words[0] = v79->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v79->__r_.__value_.__r.__words[1] + 7);
    v81 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)((char *)&v101 + 7) = *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words + 7);
    v100 = v80;
    *(_QWORD *)&v101 = v110.__r_.__value_.__r.__words[0];
    HIBYTE(v101) = v81;
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    v106 = 14;
    std::operator+<char>();
  }
  if (SHIBYTE(v101) < 0)
    operator delete(v100);
LABEL_19:
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  v10 = v106;
  *a1 = (void *)v106;
  if (*((char *)a1 + 31) < 0)
  {
    operator delete(a1[1]);
    v10 = *(_DWORD *)a1;
  }
  *(_OWORD *)(a1 + 1) = v107;
  a1[3] = v108;
  if ((v10 & 0xFFFFFFEF) == 0)
  {
    v83 = a1 + 1;
    CoreML::Result::Result((CoreML::Result *)__p);
    v107 = 0uLL;
    v106 = (uint64_t)&v107;
    memset(&v104, 0, sizeof(v104));
    if (*(int *)(a2 + 24) < 1)
    {
LABEL_40:
      v18 = *(_QWORD *)(a2 + 72)
          ? *(uint64_t **)(a2 + 72)
          : &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v18 + 6) < 1)
      {
LABEL_59:
        v101 = *(_OWORD *)&__p[1];
        v100 = __p[0];
        v102 = (char **)__p[3];
        memset(&__p[1], 0, 24);
      }
      else
      {
        v19 = 0;
        while (1)
        {
          v20 = *(__int128 **)(*(_QWORD *)(v18[4] + 8 * v19 + 8) + 16);
          if (*((char *)v20 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
          }
          else
          {
            v21 = *v20;
            v110.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
            *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v21;
          }
          v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>((_QWORD *)v107, &v110);
          if (v22)
          {
            std::operator+<char>();
            v23 = std::string::append(&v99, "', i.e., there are more than one layers or loss layers with this name.");
            v24 = v23->__r_.__value_.__r.__words[0];
            v113.__r_.__value_.__r.__words[0] = v23->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
            v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v104.__r_.__value_.__l.__data_);
            v104.__r_.__value_.__r.__words[0] = v24;
            v104.__r_.__value_.__l.__size_ = v113.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v104.__r_.__value_.__s + 23) = v25;
            if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v99.__r_.__value_.__l.__data_);
            v100 = (void *)14;
            std::operator+<char>();
          }
          else
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v110, (uint64_t)&v110);
          }
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
          if (v22)
            break;
          if (++v19 >= *((int *)v18 + 6))
            goto LABEL_59;
        }
      }
    }
    else
    {
      v11 = 0;
      while (1)
      {
        v12 = *(__int128 **)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v11 + 8) + 112);
        if (*((char *)v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
        }
        else
        {
          v13 = *v12;
          v110.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v13;
        }
        v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>((_QWORD *)v107, &v110);
        if (v14)
        {
          std::operator+<char>();
          v15 = std::string::append(&v99, "', i.e., there are more than one layers or loss layers with this name.");
          v16 = v15->__r_.__value_.__r.__words[0];
          v113.__r_.__value_.__r.__words[0] = v15->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
          v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v104.__r_.__value_.__l.__data_);
          v104.__r_.__value_.__r.__words[0] = v16;
          v104.__r_.__value_.__l.__size_ = v113.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7);
          *((_BYTE *)&v104.__r_.__value_.__s + 23) = v17;
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          v100 = (void *)14;
          std::operator+<char>();
        }
        else
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v110, (uint64_t)&v110);
        }
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        if (v14)
          break;
        if (++v11 >= *(int *)(a2 + 24))
          goto LABEL_40;
      }
    }
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v107);
    v26 = a1;
    if (SHIBYTE(__p[3]) < 0)
      operator delete(__p[1]);
    v27 = (int)v100;
    *a1 = v100;
    if (*((char *)a1 + 31) < 0)
    {
      operator delete(a1[1]);
      v27 = *(_DWORD *)a1;
    }
    *(_OWORD *)v83 = v101;
    a1[3] = v102;
    if ((v27 & 0xFFFFFFEF) == 0)
    {
      CoreML::Result::Result((CoreML::Result *)&v104);
      v28 = *(uint64_t **)(a2 + 72);
      if (!v28)
        v28 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      v29 = *((int *)v28 + 6);
      if ((int)v29 >= 2)
      {
        memset(__p, 0, 24);
        MEMORY[0x1A1AD5EAC](__p, "This model has more than one loss layers specified, which is not supported at the moment.");
        v110.__r_.__value_.__r.__words[0] = 15;
        std::operator+<char>();
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        goto LABEL_195;
      }
      v100 = &v101;
      v101 = 0uLL;
      v103[0] = 0;
      v103[1] = 0;
      v102 = v103;
      memset(&v99, 0, sizeof(v99));
      std::vector<CoreML::LayerNode>::resize((uint64_t *)&v99, *(int *)(a2 + 24) + v29);
      if (*(int *)(a2 + 24) >= 1)
      {
        v30 = 0;
        do
        {
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, *(const CoreML::Specification::NeuralNetworkLayer **)(*(_QWORD *)(a2 + 32) + 8 * v30 + 8));
          size = v99.__r_.__value_.__l.__size_;
          if (v99.__r_.__value_.__l.__size_ >= v99.__r_.__value_.__r.__words[2])
          {
            v34 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 3);
            v35 = v34 + 1;
            if (v34 + 1 > 0x1E1E1E1E1E1E1E1)
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            if (0xE1E1E1E1E1E1E1E2
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) > v35)
              v35 = 0xE1E1E1E1E1E1E1E2
                  * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3);
            if (0xF0F0F0F0F0F0F0F1
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) >= 0xF0F0F0F0F0F0F0)
              v36 = 0x1E1E1E1E1E1E1E1;
            else
              v36 = v35;
            v109 = &v99.__r_.__value_.__s.__data_[16];
            v37 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::LayerNode>>(v36);
            v38 = &v37[17 * v34];
            v106 = (uint64_t)v37;
            *(_QWORD *)&v107 = v38;
            v108 = &v37[17 * v39];
            *v38 = 0;
            v38[1] = 0;
            v38[2] = 0;
            *(_OWORD *)v38 = *(_OWORD *)__p;
            v38[2] = (uint64_t)__p[2];
            memset(__p, 0, 24);
            v38[3] = 0;
            v38[4] = 0;
            v38[5] = 0;
            *(_OWORD *)(v38 + 3) = *(_OWORD *)&__p[3];
            v38[5] = (uint64_t)__p[5];
            memset(&__p[3], 0, 24);
            v38[6] = v91;
            v40 = v92;
            v38[9] = v93;
            *(_OWORD *)(v38 + 7) = v40;
            v93 = 0;
            v92 = 0uLL;
            v38[10] = 0;
            v38[11] = 0;
            v38[12] = 0;
            *((_OWORD *)v38 + 5) = v94;
            v38[12] = v95;
            v94 = 0uLL;
            v95 = 0;
            v38[13] = 0;
            v38[14] = 0;
            v38[15] = 0;
            *(_OWORD *)(v38 + 13) = v96;
            v38[15] = v97;
            v96 = 0uLL;
            v97 = 0;
            *((_WORD *)v38 + 64) = v98;
            *((_QWORD *)&v107 + 1) = v38 + 17;
            std::vector<CoreML::LayerNode>::__swap_out_circular_buffer((uint64_t *)&v99, &v106);
            v33 = v99.__r_.__value_.__l.__size_;
            std::__split_buffer<CoreML::LayerNode>::~__split_buffer((uint64_t)&v106);
          }
          else
          {
            *(_QWORD *)(v99.__r_.__value_.__l.__size_ + 16) = 0;
            *(_QWORD *)(size + 24) = 0;
            *(_QWORD *)size = 0;
            *(_QWORD *)(size + 8) = 0;
            *(_OWORD *)size = *(_OWORD *)__p;
            *(void **)(size + 16) = __p[2];
            memset(__p, 0, 24);
            *(_QWORD *)(size + 32) = 0;
            *(_QWORD *)(size + 40) = 0;
            *(_OWORD *)(size + 24) = *(_OWORD *)&__p[3];
            *(void **)(size + 40) = __p[5];
            memset(&__p[3], 0, 24);
            *(_QWORD *)(size + 48) = v91;
            v32 = v92;
            *(_QWORD *)(size + 72) = v93;
            *(_QWORD *)(size + 80) = 0;
            *(_OWORD *)(size + 56) = v32;
            v93 = 0;
            v92 = 0uLL;
            *(_QWORD *)(size + 88) = 0;
            *(_QWORD *)(size + 96) = 0;
            *(_OWORD *)(size + 80) = v94;
            v94 = 0uLL;
            *(_QWORD *)(size + 96) = v95;
            *(_QWORD *)(size + 104) = 0;
            v95 = 0;
            *(_QWORD *)(size + 112) = 0;
            *(_QWORD *)(size + 120) = 0;
            *(_OWORD *)(size + 104) = v96;
            *(_QWORD *)(size + 120) = v97;
            v96 = 0uLL;
            v97 = 0;
            *(_WORD *)(size + 128) = v98;
            v33 = size + 136;
          }
          v99.__r_.__value_.__l.__size_ = v33;
          v106 = (uint64_t)&v96;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          v106 = (uint64_t)&v94;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          if (SHIBYTE(v93) < 0)
            operator delete((void *)v92);
          if (__p[3])
          {
            __p[4] = __p[3];
            operator delete(__p[3]);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode((CoreML::NeuralNetworkValidatorGraph *)&v100, (CoreML::LayerNode *)(v99.__r_.__value_.__l.__size_ - 136));
          ++v30;
        }
        while (v30 < *(int *)(a2 + 24));
      }
      v41 = *(uint64_t **)(a2 + 72);
      if (!v41)
        v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v41 + 6) >= 1)
      {
        v42 = 0;
        while (1)
        {
          v43 = *(const std::string ***)(v41[4] + 8 * v42 + 8);
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, v43);
          v44 = v99.__r_.__value_.__l.__size_;
          if (v99.__r_.__value_.__l.__size_ >= v99.__r_.__value_.__r.__words[2])
          {
            v47 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 3);
            v48 = v47 + 1;
            if (v47 + 1 > 0x1E1E1E1E1E1E1E1)
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            if (0xE1E1E1E1E1E1E1E2
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) > v48)
              v48 = 0xE1E1E1E1E1E1E1E2
                  * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3);
            v49 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) >= 0xF0F0F0F0F0F0F0
                ? 0x1E1E1E1E1E1E1E1
                : v48;
            v109 = &v99.__r_.__value_.__s.__data_[16];
            v50 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::LayerNode>>(v49);
            v51 = &v50[17 * v47];
            v106 = (uint64_t)v50;
            *(_QWORD *)&v107 = v51;
            v108 = &v50[17 * v52];
            *v51 = 0;
            v51[1] = 0;
            v51[2] = 0;
            *(_OWORD *)v51 = *(_OWORD *)__p;
            v51[2] = (uint64_t)__p[2];
            memset(__p, 0, 24);
            v51[3] = 0;
            v51[4] = 0;
            v51[5] = 0;
            *(_OWORD *)(v51 + 3) = *(_OWORD *)&__p[3];
            v51[5] = (uint64_t)__p[5];
            memset(&__p[3], 0, 24);
            v51[6] = v91;
            v53 = v92;
            v51[9] = v93;
            *(_OWORD *)(v51 + 7) = v53;
            v93 = 0;
            v92 = 0uLL;
            v51[10] = 0;
            v51[11] = 0;
            v51[12] = 0;
            *((_OWORD *)v51 + 5) = v94;
            v51[12] = v95;
            v94 = 0uLL;
            v95 = 0;
            v51[13] = 0;
            v51[14] = 0;
            v51[15] = 0;
            *(_OWORD *)(v51 + 13) = v96;
            v51[15] = v97;
            v96 = 0uLL;
            v97 = 0;
            *((_WORD *)v51 + 64) = v98;
            *((_QWORD *)&v107 + 1) = v51 + 17;
            std::vector<CoreML::LayerNode>::__swap_out_circular_buffer((uint64_t *)&v99, &v106);
            v46 = v99.__r_.__value_.__l.__size_;
            std::__split_buffer<CoreML::LayerNode>::~__split_buffer((uint64_t)&v106);
          }
          else
          {
            *(_QWORD *)(v99.__r_.__value_.__l.__size_ + 16) = 0;
            *(_QWORD *)(v44 + 24) = 0;
            *(_QWORD *)v44 = 0;
            *(_QWORD *)(v44 + 8) = 0;
            *(_OWORD *)v44 = *(_OWORD *)__p;
            *(void **)(v44 + 16) = __p[2];
            memset(__p, 0, 24);
            *(_QWORD *)(v44 + 32) = 0;
            *(_QWORD *)(v44 + 40) = 0;
            *(_OWORD *)(v44 + 24) = *(_OWORD *)&__p[3];
            *(void **)(v44 + 40) = __p[5];
            memset(&__p[3], 0, 24);
            *(_QWORD *)(v44 + 48) = v91;
            v45 = v92;
            *(_QWORD *)(v44 + 72) = v93;
            *(_QWORD *)(v44 + 80) = 0;
            *(_OWORD *)(v44 + 56) = v45;
            v93 = 0;
            v92 = 0uLL;
            *(_QWORD *)(v44 + 88) = 0;
            *(_QWORD *)(v44 + 96) = 0;
            *(_OWORD *)(v44 + 80) = v94;
            v94 = 0uLL;
            *(_QWORD *)(v44 + 96) = v95;
            *(_QWORD *)(v44 + 104) = 0;
            v95 = 0;
            *(_QWORD *)(v44 + 112) = 0;
            *(_QWORD *)(v44 + 120) = 0;
            *(_OWORD *)(v44 + 104) = v96;
            *(_QWORD *)(v44 + 120) = v97;
            v96 = 0uLL;
            v97 = 0;
            *(_WORD *)(v44 + 128) = v98;
            v46 = v44 + 136;
          }
          v99.__r_.__value_.__l.__size_ = v46;
          v106 = (uint64_t)&v96;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          v106 = (uint64_t)&v94;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          if (SHIBYTE(v93) < 0)
            operator delete((void *)v92);
          if (__p[3])
          {
            __p[4] = __p[3];
            operator delete(__p[3]);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode((CoreML::NeuralNetworkValidatorGraph *)&v100, (CoreML::LayerNode *)(v99.__r_.__value_.__l.__size_ - 136));
          validateLossLayer((const CoreML::Specification::LossLayer *)__p, (const CoreML::NeuralNetworkValidatorGraph *)v43, (uint64_t)&v100);
          data = (int)__p[0];
          v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
          if (SHIBYTE(v105) < 0)
          {
            operator delete((void *)v104.__r_.__value_.__l.__size_);
            data = (int)v104.__r_.__value_.__l.__data_;
          }
          *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
          v105 = __p[3];
          if ((data & 0xFFFFFFEF) != 0)
            break;
          ++v42;
          v41 = *(uint64_t **)(a2 + 72);
          if (!v41)
            v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
          if (v42 >= *((int *)v41 + 6))
            goto LABEL_115;
        }
        v110 = v104;
        v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        v105 = 0;
        v26 = a1;
        goto LABEL_194;
      }
LABEL_115:
      v55 = (uint64_t *)v41[5];
      if (v55)
        v56 = v55;
      else
        v56 = &CoreML::Specification::_Optimizer_default_instance_;
      validateOptimizer((const CoreML::Specification::Optimizer *)__p, (uint64_t)v56);
      v57 = (int)__p[0];
      v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
      v26 = a1;
      if (SHIBYTE(v105) < 0)
      {
        operator delete((void *)v104.__r_.__value_.__l.__size_);
        v57 = (int)v104.__r_.__value_.__l.__data_;
      }
      *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
      v105 = __p[3];
      if ((v57 & 0xFFFFFFEF) != 0)
        goto LABEL_127;
      if (*(_QWORD *)(a2 + 72))
        v58 = *(uint64_t **)(a2 + 72);
      else
        v58 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      validateOtherTopLevelUpdateParameters((const CoreML::Specification::NetworkUpdateParameters *)__p, v58);
      v59 = (int)__p[0];
      v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
      if (SHIBYTE(v105) < 0)
      {
        operator delete((void *)v104.__r_.__value_.__l.__size_);
        v59 = (int)v104.__r_.__value_.__l.__data_;
      }
      *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
      v105 = __p[3];
      if ((v59 & 0xFFFFFFEF) != 0)
      {
LABEL_127:
        v110 = v104;
        v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        v105 = 0;
LABEL_194:
        __p[0] = &v99;
        std::vector<CoreML::LayerNode>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v103[0]);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v101);
LABEL_195:
        if (SHIBYTE(v105) < 0)
          operator delete((void *)v104.__r_.__value_.__l.__size_);
        *v26 = (void *)v110.__r_.__value_.__r.__words[0];
        if (*((char *)v26 + 31) < 0)
          operator delete(*v83);
        *(_OWORD *)v83 = *(_OWORD *)&v110.__r_.__value_.__r.__words[1];
        a1[3] = v111;
        return;
      }
      v107 = 0uLL;
      v106 = (uint64_t)&v107;
      v60 = *(uint64_t **)(a2 + 72);
      if (!v60)
        v60 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v60 + 6) < 1)
      {
LABEL_192:
        v110 = v104;
        v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        v105 = 0;
LABEL_193:
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v107);
        v26 = a1;
        goto LABEL_194;
      }
      v61 = 0;
      while (1)
      {
        v62 = *(__int128 **)(*(_QWORD *)(v60[4] + 8 * v61 + 8) + 16);
        if (*((char *)v62 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v62, *((_QWORD *)v62 + 1));
        }
        else
        {
          v63 = *v62;
          v113.__r_.__value_.__r.__words[2] = *((_QWORD *)v62 + 2);
          *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v63;
        }
        v82 = v61;
        memset(__p, 0, sizeof(__p));
        std::deque<std::string>::push_back(__p, (__int128 *)&v113);
        v64 = 0;
        memset(&v89, 0, sizeof(v89));
        while (__p[5])
        {
          v65 = *((_QWORD *)__p[1] + (unint64_t)__p[4] / 0xAA) + 24 * ((unint64_t)__p[4] % 0xAA);
          if (*(char *)(v65 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v65, *(_QWORD *)(v65 + 8));
          }
          else
          {
            v66 = *(_OWORD *)v65;
            v88.__r_.__value_.__r.__words[2] = *(_QWORD *)(v65 + 16);
            *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v66;
          }
          std::deque<std::string>::pop_front((uint64_t)__p);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v87, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
          else
            v87 = v88;
          NodeFromName = CoreML::NeuralNetworkValidatorGraph::getNodeFromName((uint64_t)&v100, &v87);
          v68 = NodeFromName;
          if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (NodeFromName)
              goto LABEL_146;
            goto LABEL_173;
          }
          operator delete(v87.__r_.__value_.__l.__data_);
          if (v68)
          {
LABEL_146:
            v69 = *(uint64_t **)v68;
            v70 = *(uint64_t **)(v68 + 8);
            while (1)
            {
              if (v69 == v70)
              {
                v73 = 0;
                goto LABEL_178;
              }
              v71 = *v69;
              v72 = (const std::string *)(*v69 + 56);
              if (*(char *)(*v69 + 79) < 0)
                std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(v71 + 56), *(_QWORD *)(v71 + 64));
              else
                v86 = *v72;
              if (&v107 != (__int128 *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v106, &v86))break;
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v86, (uint64_t)&v86);
              std::deque<std::string>::push_back(__p, (__int128 *)&v86);
              if (((*(_BYTE *)(v71 + 128) != 0) & v64) == 1)
              {
                memset(&v85, 0, sizeof(v85));
                std::operator+<char>();
                v74 = std::string::append(&v84, "), which does not support backpropagation, between an updatable marked layer and the loss function.");
                v75 = v74->__r_.__value_.__r.__words[0];
                v112[0] = v74->__r_.__value_.__l.__size_;
                *(_QWORD *)((char *)v112 + 7) = *(std::string::size_type *)((char *)&v74->__r_.__value_.__r.__words[1]
                                                                          + 7);
                v76 = HIBYTE(v74->__r_.__value_.__r.__words[2]);
                v74->__r_.__value_.__l.__size_ = 0;
                v74->__r_.__value_.__r.__words[2] = 0;
                v74->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v85.__r_.__value_.__l.__data_);
                v85.__r_.__value_.__r.__words[0] = v75;
                v85.__r_.__value_.__l.__size_ = v112[0];
                *(std::string::size_type *)((char *)&v85.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v112 + 7);
                *((_BYTE *)&v85.__r_.__value_.__s + 23) = v76;
                if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v84.__r_.__value_.__l.__data_);
                v110.__r_.__value_.__r.__words[0] = 15;
                std::operator+<char>();
                if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v85.__r_.__value_.__l.__data_);
                v64 = 1;
                v73 = 1;
              }
              else if (*(_BYTE *)(v71 + 129))
              {
                v73 = 0;
              }
              else
              {
                if (*(_DWORD *)(v71 + 48) == 175 && *(_DWORD *)(v68 + 52) == 10)
                  break;
                std::string::operator=(&v89, v72);
                v73 = 0;
                v64 = 1;
              }
LABEL_166:
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v86.__r_.__value_.__l.__data_);
              if (v73 != 14 && v73)
                goto LABEL_178;
              ++v69;
            }
            v73 = 14;
            goto LABEL_166;
          }
LABEL_173:
          std::operator+<char>();
          v77 = std::string::append(&v85, "'.");
          v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          v86.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v85.__r_.__value_.__l.__data_);
          v110.__r_.__value_.__r.__words[0] = 15;
          std::operator+<char>();
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v86.__r_.__value_.__l.__data_);
          v73 = 1;
LABEL_178:
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v88.__r_.__value_.__l.__data_);
            if (v73)
              goto LABEL_184;
          }
          else if (v73)
          {
            goto LABEL_184;
          }
        }
        v73 = 0;
LABEL_184:
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        std::deque<std::string>::~deque[abi:ne180100]((uint64_t)__p);
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v113.__r_.__value_.__l.__data_);
        if (v73)
          goto LABEL_193;
        v61 = v82 + 1;
        v60 = *(uint64_t **)(a2 + 72);
        if (!v60)
          v60 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
        if (v61 >= *((int *)v60 + 6))
          goto LABEL_192;
      }
    }
  }
}

void sub_19C99A8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;

  if (a62 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v62 + 31) < 0)
    operator delete(*(void **)(v62 + 8));
  _Unwind_Resume(a1);
}

void CoreML::Specification::CategoricalMapping::~CategoricalMapping(CoreML::Specification::CategoricalMapping *this)
{
  CoreML::Specification::CategoricalMapping::~CategoricalMapping(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D51380;
  if (*((_DWORD *)this + 9))
    CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
  if (*((_DWORD *)this + 10))
    CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::CategoricalMapping::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CategoricalMapping");
}

CoreML::Specification::CategoricalMapping *CoreML::Specification::CategoricalMapping::New(CoreML::Specification::CategoricalMapping *this)
{
  return CoreML::Specification::CategoricalMapping::New(this, 0);
}

CoreML::Specification::CategoricalMapping *CoreML::Specification::CategoricalMapping::New(CoreML::Specification::CategoricalMapping *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CategoricalMapping *v3;

  v3 = (CoreML::Specification::CategoricalMapping *)operator new();
  CoreML::Specification::CategoricalMapping::CategoricalMapping(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CategoricalMapping>(a2, v3);
  return v3;
}

void sub_19C99ABBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A3C40EEBF8A51);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CategoricalMapping::Clear(CoreML::Specification::CategoricalMapping *this)
{
  CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
  return CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
}

uint64_t CoreML::Specification::CategoricalMapping::IsInitialized(CoreML::Specification::CategoricalMapping *this)
{
  return 1;
}

uint64_t CoreML::Specification::CategoricalMapping::MergePartialFromCodedStream(CoreML::Specification::CategoricalMapping *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  CoreML::Specification::Int64ToStringMap *v14;
  char *v15;
  unint64_t Varint64Fallback;
  CoreML::Specification::StringToInt64Map *v17;
  std::string *v18;
  char *v19;
  int v20;
  char *v21;
  int VarintSizeAsIntFallback;
  uint64_t result;
  int v24;
  std::string *v25;
  std::string *v26;
  std::string::size_type size;
  char v28;
  int v29;
  unsigned int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int TagFallback;

  v5 = (std::string **)((char *)this + 24);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *(unsigned __int8 **)a2;
        v7 = *((_QWORD *)a2 + 1);
        if (*(_QWORD *)a2 >= v7)
        {
          LODWORD(v9) = 0;
LABEL_65:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
          v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
          if ((v10 & 0x100000000) == 0)
            goto LABEL_66;
          goto LABEL_9;
        }
        v8 = v6 + 1;
        v9 = *v6;
        if ((char)*v6 < 1)
        {
          if ((unint64_t)v8 < v7)
          {
            v11 = *v8;
            if ((v9 & ~v11) >= 0x80)
            {
              *(_QWORD *)a2 = v6 + 2;
              v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
              goto LABEL_9;
            }
          }
          goto LABEL_65;
        }
        *(_QWORD *)a2 = v8;
        v10 = v9 | 0x100000000;
        if ((v10 & 0x100000000) == 0)
          goto LABEL_66;
LABEL_9:
        v12 = v10 >> 3;
        if (v10 >> 3 <= 0x64)
          break;
        if (v12 == 101)
        {
          if (v10 != 42)
            goto LABEL_66;
          if (*((_DWORD *)this + 10) != 101)
          {
            CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
            *((_DWORD *)this + 10) = 101;
            *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_40:
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v18 = *v5;
            goto LABEL_41;
          }
          v18 = *v5;
          if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_40;
LABEL_41:
          result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v18);
          if (!(_DWORD)result)
            return result;
          v24 = *((_DWORD *)this + 10);
          v25 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
          if (v24 == 101)
            v25 = *v5;
          if (SHIBYTE(v25->__r_.__value_.__r.__words[2]) < 0)
            v25 = (std::string *)v25->__r_.__value_.__r.__words[0];
          v26 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
          if (v24 == 101)
            v26 = *v5;
          if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0)
            size = v26->__r_.__value_.__l.__size_;
          else
            LODWORD(size) = HIBYTE(v26->__r_.__value_.__r.__words[2]);
          if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v25, size, 0, (uint64_t)"CoreML.Specification.CategoricalMapping.strValue"))return 0;
        }
        else
        {
          if (v12 != 102 || v10 != 48)
            goto LABEL_66;
          CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
          v15 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
          {
            Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v28 & 1) == 0)
              return 0;
          }
          else
          {
            Varint64Fallback = *v15;
            *(_QWORD *)a2 = v15 + 1;
          }
          *((_QWORD *)this + 3) = Varint64Fallback;
          *((_DWORD *)this + 10) = 102;
        }
      }
      if (v12 != 1)
        break;
      if (v10 != 10)
        goto LABEL_66;
      if (*((_DWORD *)this + 9) == 1)
      {
        v17 = (CoreML::Specification::StringToInt64Map *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
        v17 = (CoreML::Specification::StringToInt64Map *)operator new();
        CoreML::Specification::StringToInt64Map::StringToInt64Map(v17);
        *((_QWORD *)this + 2) = v17;
      }
      v21 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v21;
        *(_QWORD *)a2 = v21 + 1;
      }
      v34 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v36 = *((_DWORD *)a2 + 13);
      v32 = __OFSUB__(v36--, 1);
      *((_DWORD *)a2 + 13) = v36;
      if (v36 < 0 != v32)
        return 0;
      v33 = v34;
      result = CoreML::Specification::StringToInt64Map::MergePartialFromCodedStream(v17, a2, v35);
      if (!(_DWORD)result)
        return result;
LABEL_59:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v33))
        return 0;
    }
    if (v12 == 2 && v10 == 18)
    {
      if (*((_DWORD *)this + 9) == 2)
      {
        v14 = (CoreML::Specification::Int64ToStringMap *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
        *((_DWORD *)this + 9) = 2;
        v14 = (CoreML::Specification::Int64ToStringMap *)operator new();
        CoreML::Specification::Int64ToStringMap::Int64ToStringMap(v14);
        *((_QWORD *)this + 2) = v14;
      }
      v19 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
      {
        v20 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v20 < 0)
          return 0;
      }
      else
      {
        v20 = *v19;
        *(_QWORD *)a2 = v19 + 1;
      }
      v29 = google::protobuf::io::CodedInputStream::PushLimit(a2, v20);
      v31 = *((_DWORD *)a2 + 13);
      v32 = __OFSUB__(v31--, 1);
      *((_DWORD *)a2 + 13) = v31;
      if (v31 < 0 != v32)
        return 0;
      v33 = v29;
      result = CoreML::Specification::Int64ToStringMap::MergePartialFromCodedStream(v14, a2, v30);
      if (!(_DWORD)result)
        return result;
      goto LABEL_59;
    }
LABEL_66:
    if (!(_DWORD)v10 || (v10 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C99AFC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CategoricalMapping::ByteSizeLong(CoreML::Specification::CategoricalMapping *this)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_DWORD *)this + 9);
  if (v2 == 2)
  {
    v3 = CoreML::Specification::Int64ToStringMap::ByteSizeLong(*((CoreML::Specification::Int64ToStringMap **)this + 2));
    goto LABEL_5;
  }
  if (v2 == 1)
  {
    v3 = CoreML::Specification::StringToInt64Map::ByteSizeLong(*((CoreML::Specification::StringToInt64Map **)this + 2));
LABEL_5:
    result = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_7;
  }
  result = 0;
LABEL_7:
  v5 = *((_DWORD *)this + 10);
  if (v5 == 102)
  {
    v9 = result + ((9 * (__clz(*((_QWORD *)this + 3) | 1) ^ 0x3F) + 73) >> 6);
LABEL_13:
    result = v9 + 2;
    goto LABEL_14;
  }
  if (v5 == 101)
  {
    v6 = *((_QWORD *)this + 3);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v9 = result + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
    goto LABEL_13;
  }
LABEL_14:
  *((_DWORD *)this + 8) = result;
  return result;
}

uint64_t CoreML::Specification::CategoricalMapping::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int v7;
  unsigned int *v8;
  uint64_t v9;
  __int128 *v10;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 2)
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
  v7 = *(_DWORD *)(v5 + 40);
  if (v7 == 101)
  {
    v8 = *(unsigned int **)(v5 + 24);
    if (*((char *)v8 + 23) < 0)
    {
      v8 = *(unsigned int **)v8;
      v9 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
    }
    else
    {
      LODWORD(v9) = *((unsigned __int8 *)v8 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v8, v9, 1, (uint64_t)"CoreML.Specification.CategoricalMapping.strValue");
    if (*(_DWORD *)(v5 + 40) == 101)
      v10 = *(__int128 **)(v5 + 24);
    else
      v10 = &google::protobuf::internal::fixed_address_empty_string;
    this = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0x65u, (uint64_t)v10, a2);
    v7 = *(_DWORD *)(v5 + 40);
  }
  if (v7 == 102)
    return google::protobuf::internal::WireFormatLite::WriteInt64(102, *(_QWORD *)(v5 + 24), a2, a4);
  return this;
}

uint64_t CoreML::Specification::CategoricalMapping::GetCachedSize(CoreML::Specification::CategoricalMapping *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CoreML::Specification::CategoricalMapping::clear_MappingType(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 36);
  if (v2 == 2 || v2 == 1)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  if (*(_DWORD *)(this + 40) == 101)
  {
    v2 = *(_QWORD *)(this + 24);
    if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
    {
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      this = MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 40) = 0;
  return this;
}

void CoreML::Specification::CategoricalMapping::MergeFrom(CoreML::Specification::CategoricalMapping *this, const CoreML::Specification::CategoricalMapping *a2)
{
  uint64_t v4;
  int v5;
  CoreML::Specification::StringToInt64Map *v6;
  CoreML::Specification::Int64ToStringMap *v7;
  CoreML::Specification::protobuf_DataStructures_2eproto *v8;
  const CoreML::Specification::StringToInt64Map *v9;
  CoreML::Specification::protobuf_DataStructures_2eproto *v10;
  const CoreML::Specification::Int64ToStringMap *v11;
  int v12;
  const std::string *v13;
  std::string *v14;
  uint64_t v15;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 9);
  if (v5 != 2)
  {
    if (v5 != 1)
      goto LABEL_17;
    if (*((_DWORD *)this + 9) == 1)
    {
      v6 = (CoreML::Specification::StringToInt64Map *)*((_QWORD *)this + 2);
    }
    else
    {
      CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      v6 = (CoreML::Specification::StringToInt64Map *)operator new();
      v8 = CoreML::Specification::StringToInt64Map::StringToInt64Map(v6);
      *((_QWORD *)this + 2) = v6;
      if (*((_DWORD *)a2 + 9) != 1)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v8);
        v9 = (const CoreML::Specification::StringToInt64Map *)&CoreML::Specification::_StringToInt64Map_default_instance_;
        goto LABEL_14;
      }
    }
    v9 = (const CoreML::Specification::StringToInt64Map *)*((_QWORD *)a2 + 2);
LABEL_14:
    CoreML::Specification::StringToInt64Map::MergeFrom(v6, v9);
    goto LABEL_17;
  }
  if (*((_DWORD *)this + 9) == 2)
  {
    v7 = (CoreML::Specification::Int64ToStringMap *)*((_QWORD *)this + 2);
  }
  else
  {
    CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
    *((_DWORD *)this + 9) = 2;
    v7 = (CoreML::Specification::Int64ToStringMap *)operator new();
    v10 = CoreML::Specification::Int64ToStringMap::Int64ToStringMap(v7);
    *((_QWORD *)this + 2) = v7;
    if (*((_DWORD *)a2 + 9) != 2)
    {
      CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v10);
      v11 = (const CoreML::Specification::Int64ToStringMap *)&CoreML::Specification::_Int64ToStringMap_default_instance_;
      goto LABEL_16;
    }
  }
  v11 = (const CoreML::Specification::Int64ToStringMap *)*((_QWORD *)a2 + 2);
LABEL_16:
  CoreML::Specification::Int64ToStringMap::MergeFrom(v7, v11);
LABEL_17:
  v12 = *((_DWORD *)a2 + 10);
  if (v12 == 102)
  {
    v15 = *((_QWORD *)a2 + 3);
    if (*((_DWORD *)this + 10) != 102)
    {
      CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
      *((_DWORD *)this + 10) = 102;
    }
    *((_QWORD *)this + 3) = v15;
  }
  else if (v12 == 101)
  {
    v13 = (const std::string *)*((_QWORD *)a2 + 3);
    if (*((_DWORD *)this + 10) == 101)
    {
      v14 = (std::string *)*((_QWORD *)this + 3);
      if (v14 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        std::string::operator=(v14, v13);
        return;
      }
    }
    else
    {
      CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
      *((_DWORD *)this + 10) = 101;
      *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v13);
  }
}

void sub_19C99B434(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::CategoricalMapping *CoreML::Specification::CategoricalMapping::CategoricalMapping(CoreML::Specification::CategoricalMapping *this)
{
  *(_QWORD *)this = &off_1E3D51380;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CategoricalMapping *)&CoreML::Specification::_CategoricalMapping_default_instance_)
    CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_19C99B4AC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CategoricalMapping>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CategoricalMapping>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CategoricalMapping>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::Pipeline::~Pipeline(CoreML::Specification::Pipeline *this)
{
  CoreML::Specification::Pipeline::~Pipeline(this);
  JUMPOUT(0x1A1AD6260);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E3D591F8;
  v2 = (_QWORD *)((char *)this + 16);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::Pipeline::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Pipeline");
}

CoreML::Specification::Pipeline *CoreML::Specification::Pipeline::New(CoreML::Specification::Pipeline *this)
{
  return CoreML::Specification::Pipeline::New(this, 0);
}

CoreML::Specification::Pipeline *CoreML::Specification::Pipeline::New(CoreML::Specification::Pipeline *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Pipeline *v3;

  v3 = (CoreML::Specification::Pipeline *)operator new();
  CoreML::Specification::Pipeline::Pipeline(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Pipeline>(a2, v3);
  return v3;
}

void sub_19C99B60C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Pipeline::Clear(CoreML::Specification::Pipeline *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3;
      v5 = (_QWORD *)(*v3 + 16);
      if (*v5)
        (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 8))(*v5);
      *(_QWORD *)((char *)v5 + 5) = 0;
      *v5 = 0;
      CoreML::Specification::Model::clear_Type(v4);
      ++v3;
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  return google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 40);
}

uint64_t CoreML::Specification::Pipeline::IsInitialized(CoreML::Specification::Pipeline *this)
{
  return 1;
}

uint64_t CoreML::Specification::Pipeline::MergePartialFromCodedStream(CoreML::Specification::Pipeline *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  google::protobuf::Arena **v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int TagFallback;
  int *v12;
  int v13;
  int v14;
  CoreML::Specification::Model *v15;
  int *v16;
  int v17;
  int v18;
  std::string *Aligned;
  google::protobuf::Arena *v21;
  google::protobuf::Arena **v22;
  unint64_t *v23;
  unint64_t v24;
  google::protobuf::Arena *v25;
  google::protobuf::Arena **v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int VarintSizeAsIntFallback;
  int v33;
  unsigned int v34;
  int v35;
  BOOL v36;
  int v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;

  v5 = (CoreML::Specification::Pipeline *)((char *)this + 40);
  v6 = (google::protobuf::Arena **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v7 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          LODWORD(v8) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
          v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v9 & 0x100000000) == 0)
            goto LABEL_21;
          goto LABEL_8;
        }
        v8 = *v7;
        if (*v7 < 1)
          goto LABEL_7;
        *(_QWORD *)a2 = v7 + 1;
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          goto LABEL_21;
LABEL_8:
        if (v9 >> 3 != 2)
          break;
        if (v9 != 18)
          goto LABEL_21;
        v16 = (int *)*((_QWORD *)this + 7);
        if (!v16)
        {
          v17 = *((_DWORD *)this + 12);
          v18 = *((_DWORD *)this + 13);
          goto LABEL_38;
        }
        v17 = *((_DWORD *)this + 12);
        v18 = *v16;
        if (v17 >= *v16)
        {
          if (v18 == *((_DWORD *)this + 13))
          {
LABEL_38:
            if (v17 <= v18)
            {
              google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v18 - v17 + 1);
              v16 = (int *)*((_QWORD *)this + 7);
            }
            v18 = *v16;
          }
          *v16 = v18 + 1;
          v25 = *(google::protobuf::Arena **)v5;
          if (*(_QWORD *)v5)
          {
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
            v26 = google::protobuf::Arena::AllocateAligned(v25, 0, 24);
            *v26 = (google::protobuf::Arena *)Aligned;
            v26[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
            v27 = (unint64_t *)((char *)v25 + 32);
            do
              v28 = __ldxr(v27);
            while (__stxr((unint64_t)v26, v27));
            v26[2] = (google::protobuf::Arena *)v28;
          }
          else
          {
            Aligned = (std::string *)operator new();
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
          }
          v39 = *((_QWORD *)this + 7);
          v40 = *((int *)this + 12);
          *((_DWORD *)this + 12) = v40 + 1;
          *(_QWORD *)(v39 + 8 * v40 + 8) = Aligned;
          goto LABEL_57;
        }
        *((_DWORD *)this + 12) = v17 + 1;
        Aligned = *(std::string **)&v16[2 * v17 + 2];
LABEL_57:
        result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, Aligned);
        if (!(_DWORD)result)
          return result;
        v41 = *((_QWORD *)this + 7);
        v42 = *(unsigned int **)(v41 + 8 * *((int *)this + 12));
        if (*((char *)v42 + 23) < 0)
        {
          v42 = *(unsigned int **)v42;
          v43 = *(_QWORD *)(*(_QWORD *)(v41 + 8 * *((int *)this + 12)) + 8);
        }
        else
        {
          LODWORD(v43) = *((unsigned __int8 *)v42 + 23);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v42, v43, 0, (uint64_t)"CoreML.Specification.Pipeline.names"))return 0;
      }
      if (v9 >> 3 != 1 || v9 != 10)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
        goto LABEL_30;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 >= *v12)
      {
        if (v14 != *((_DWORD *)this + 7))
        {
LABEL_33:
          *v12 = v14 + 1;
          v21 = *v6;
          if (*v6)
          {
            CoreML::Specification::Model::Model(v15);
            v22 = google::protobuf::Arena::AllocateAligned(v21, 0, 24);
            *v22 = v15;
            v22[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::Model>;
            v23 = (unint64_t *)((char *)v21 + 32);
            do
              v24 = __ldxr(v23);
            while (__stxr((unint64_t)v22, v23));
            v22[2] = (google::protobuf::Arena *)v24;
          }
          else
          {
            v15 = (CoreML::Specification::Model *)operator new();
            CoreML::Specification::Model::Model(v15);
          }
          v29 = *((_QWORD *)this + 4);
          v30 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v30 + 1;
          *(_QWORD *)(v29 + 8 * v30 + 8) = v15;
          goto LABEL_47;
        }
LABEL_30:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)v6, v14 - v13 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
        }
        v14 = *v12;
        goto LABEL_33;
      }
      *((_DWORD *)this + 6) = v13 + 1;
      v15 = *(CoreML::Specification::Model **)&v12[2 * v13 + 2];
LABEL_47:
      v31 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v31 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v31;
        *(_QWORD *)a2 = v31 + 1;
      }
      v33 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v35 = *((_DWORD *)a2 + 13);
      v36 = __OFSUB__(v35--, 1);
      *((_DWORD *)a2 + 13) = v35;
      if (v35 < 0 == v36)
      {
        v37 = v33;
        result = CoreML::Specification::Model::MergePartialFromCodedStream(v15, a2, v34);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v37))
          continue;
      }
      return 0;
    }
LABEL_21:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C99BA70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4065E65A88);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Pipeline::ByteSizeLong(CoreML::Specification::Pipeline *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::Model::ByteSizeLong(*(CoreML::Specification::Model **)(*((_QWORD *)this + 4)
                                                                                       + 8 * v3
                                                                                       + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((unsigned int *)this + 12);
  result = v4 + v6;
  if ((int)v6 >= 1)
  {
    v8 = (uint64_t *)(*((_QWORD *)this + 7) + 8);
    do
    {
      v9 = *v8++;
      v10 = *(unsigned __int8 *)(v9 + 23);
      v11 = *(_QWORD *)(v9 + 8);
      if ((v10 & 0x80u) == 0)
        v11 = v10;
      result += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
      --v6;
    }
    while (v6);
  }
  *((_DWORD *)this + 16) = result;
  return result;
}

uint64_t CoreML::Specification::Pipeline::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  v8 = *(unsigned int *)(v5 + 48);
  if ((int)v8 >= 1)
  {
    v9 = -v8;
    v10 = 1;
    do
    {
      v11 = *(unsigned int **)(*(_QWORD *)(v5 + 56) + 8 * v10);
      if (*((char *)v11 + 23) < 0)
      {
        v11 = *(unsigned int **)v11;
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10) + 8);
      }
      else
      {
        LODWORD(v12) = *((unsigned __int8 *)v11 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (uint64_t)"CoreML.Specification.Pipeline.names");
      this = google::protobuf::internal::WireFormatLite::WriteString(2u, *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10++), a2);
    }
    while (v9 + v10 != 1);
  }
  return this;
}

uint64_t CoreML::Specification::Pipeline::GetCachedSize(CoreML::Specification::Pipeline *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t CoreML::Specification::Model::ByteSizeLong(CoreML::Specification::Model *this)
{
  CoreML::Specification::ModelDescription *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  if (this == (CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_
    || (v2 = (CoreML::Specification::ModelDescription *)*((_QWORD *)this + 2)) == 0)
  {
    v4 = 0;
  }
  else
  {
    v3 = CoreML::Specification::ModelDescription::ByteSizeLong(v2);
    v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v5 = *((_DWORD *)this + 6);
  if (v5)
  {
    if (v5 < 0)
      v6 = 10;
    else
      v6 = (9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6;
    v4 += v6 + 1;
  }
  if (*((_BYTE *)this + 28))
    v7 = v4 + 2;
  else
    v7 = v4;
  v8 = *((_DWORD *)this + 11);
  if (v8 <= 559)
  {
    if (v8 <= 399)
    {
      if (v8 > 299)
      {
        switch(v8)
        {
          case 300:
            v9 = CoreML::Specification::GLMRegressor::ByteSizeLong(*((CoreML::Specification::GLMRegressor **)this + 4));
            goto LABEL_73;
          case 301:
            v9 = CoreML::Specification::SupportVectorRegressor::ByteSizeLong(*((CoreML::Specification::SupportVectorRegressor **)this
                                                                             + 4));
            goto LABEL_73;
          case 302:
            v9 = (uint64_t)CoreML::Specification::TreeEnsembleRegressor::ByteSizeLong(*((CoreML::Specification::TreeEnsembleRegressor **)this
                                                                                     + 4));
            goto LABEL_73;
          case 303:
            v9 = CoreML::Specification::NeuralNetworkRegressor::ByteSizeLong(*((CoreML::Specification::NeuralNetworkRegressor **)this
                                                                             + 4));
            goto LABEL_73;
          case 304:
            v9 = CoreML::Specification::BayesianProbitRegressor::ByteSizeLong(*((CoreML::Specification::BayesianProbitRegressor **)this
                                                                              + 4));
            goto LABEL_73;
          default:
            goto LABEL_74;
        }
        goto LABEL_74;
      }
      switch(v8)
      {
        case 200:
          v9 = (uint64_t)CoreML::Specification::PipelineClassifier::ByteSizeLong(*((CoreML::Specification::PipelineClassifier **)this
                                                                                + 4));
          break;
        case 201:
          v9 = (uint64_t)CoreML::Specification::PipelineRegressor::ByteSizeLong(*((CoreML::Specification::PipelineRegressor **)this
                                                                               + 4));
          break;
        case 202:
          v9 = CoreML::Specification::Pipeline::ByteSizeLong(*((CoreML::Specification::Pipeline **)this + 4));
          break;
        default:
          goto LABEL_74;
      }
    }
    else
    {
      if (v8 <= 499)
      {
        switch(v8)
        {
          case 400:
            v9 = CoreML::Specification::GLMClassifier::ByteSizeLong(*((CoreML::Specification::GLMClassifier **)this + 4));
            goto LABEL_73;
          case 401:
            v9 = CoreML::Specification::SupportVectorClassifier::ByteSizeLong(*((CoreML::Specification::SupportVectorClassifier **)this
                                                                              + 4));
            goto LABEL_73;
          case 402:
            v9 = CoreML::Specification::TreeEnsembleClassifier::ByteSizeLong(*((CoreML::Specification::TreeEnsembleClassifier **)this
                                                                             + 4));
            goto LABEL_73;
          case 403:
            v9 = CoreML::Specification::NeuralNetworkClassifier::ByteSizeLong(*((CoreML::Specification::NeuralNetworkClassifier **)this
                                                                              + 4));
            goto LABEL_73;
          case 404:
            v9 = CoreML::Specification::KNearestNeighborsClassifier::ByteSizeLong(*((CoreML::Specification::KNearestNeighborsClassifier **)this
                                                                                  + 4));
            goto LABEL_73;
          default:
            goto LABEL_74;
        }
        goto LABEL_74;
      }
      if (v8 <= 501)
      {
        if (v8 == 500)
          v9 = CoreML::Specification::NeuralNetwork::ByteSizeLong(*((CoreML::Specification::NeuralNetwork **)this + 4));
        else
          v9 = CoreML::Specification::ItemSimilarityRecommender::ByteSizeLong(*((CoreML::Specification::ItemSimilarityRecommender **)this
                                                                              + 4));
      }
      else
      {
        switch(v8)
        {
          case 502:
            v9 = CoreML::Specification::MILSpec::Program::ByteSizeLong(*((CoreML::Specification::MILSpec::Program **)this
                                                                       + 4));
            break;
          case 555:
            v9 = CoreML::Specification::CustomModel::ByteSizeLong(*((CoreML::Specification::CustomModel **)this + 4));
            break;
          case 556:
            v9 = CoreML::Specification::LinkedModel::ByteSizeLong(*((CoreML::Specification::LinkedModelFile ***)this + 4));
            break;
          default:
            goto LABEL_74;
        }
      }
    }
LABEL_73:
    v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 2;
    goto LABEL_74;
  }
  if (v8 <= 899)
  {
    switch(v8)
    {
      case 600:
        v9 = CoreML::Specification::OneHotEncoder::ByteSizeLong(*((CoreML::Specification::OneHotEncoder **)this + 4));
        goto LABEL_73;
      case 601:
        v9 = CoreML::Specification::Imputer::ByteSizeLong(*((CoreML::Specification::Imputer **)this + 4));
        goto LABEL_73;
      case 602:
        v9 = CoreML::Specification::FeatureVectorizer::ByteSizeLong(*((CoreML::Specification::FeatureVectorizer **)this
                                                                    + 4));
        goto LABEL_73;
      case 603:
        v9 = CoreML::Specification::DictVectorizer::ByteSizeLong(*((CoreML::Specification::DictVectorizer **)this + 4));
        goto LABEL_73;
      case 604:
        v9 = CoreML::Specification::Scaler::ByteSizeLong(*((CoreML::Specification::Scaler **)this + 4));
        goto LABEL_73;
      case 605:
      case 608:
        goto LABEL_74;
      case 606:
        v9 = CoreML::Specification::CategoricalMapping::ByteSizeLong(*((CoreML::Specification::CategoricalMapping **)this
                                                                     + 4));
        goto LABEL_73;
      case 607:
        v12 = *((_QWORD *)this + 4);
        v13 = *(_DWORD *)(v12 + 16);
        if (v13)
        {
          if (v13 < 0)
            v14 = 11;
          else
            v14 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
        else
        {
          v14 = 0;
        }
        *(_DWORD *)(v12 + 20) = v14;
        goto LABEL_80;
      case 609:
        v9 = CoreML::Specification::ArrayFeatureExtractor::ByteSizeLong(*((CoreML::Specification::ArrayFeatureExtractor **)this
                                                                        + 4));
        goto LABEL_73;
      case 610:
        v9 = CoreML::Specification::NonMaximumSuppression::ByteSizeLong(*((CoreML::Specification::NonMaximumSuppression **)this
                                                                        + 4));
        goto LABEL_73;
      default:
        if (v8 != 560)
          goto LABEL_74;
        v9 = CoreML::Specification::ClassConfidenceThresholding::ByteSizeLong(*((CoreML::Specification::ClassConfidenceThresholding **)this
                                                                              + 4));
        break;
    }
    goto LABEL_73;
  }
  switch(v8)
  {
    case 2000:
      v9 = CoreML::Specification::CoreMLModels::TextClassifier::ByteSizeLong(*((CoreML::Specification::CoreMLModels::TextClassifier **)this
                                                                             + 4));
      goto LABEL_73;
    case 2001:
      v9 = CoreML::Specification::CoreMLModels::WordTagger::ByteSizeLong(*((CoreML::Specification::CoreMLModels::WordTagger **)this
                                                                         + 4));
      goto LABEL_73;
    case 2002:
      v9 = CoreML::Specification::CoreMLModels::VisionFeaturePrint::ByteSizeLong(*((CoreML::Specification::CoreMLModels::VisionFeaturePrint **)this
                                                                                 + 4));
      goto LABEL_73;
    case 2003:
      v15 = *((_QWORD *)this + 4);
      if (*(_DWORD *)(v15 + 28) == 20)
      {
        *(_DWORD *)(*(_QWORD *)(v15 + 16) + 16) = 0;
        v14 = 3;
      }
      else
      {
        v14 = 0;
      }
      *(_DWORD *)(v15 + 24) = v14;
LABEL_80:
      v11 = v7 + v14;
      goto LABEL_81;
    case 2004:
      v9 = CoreML::Specification::CoreMLModels::Gazetteer::ByteSizeLong(*((CoreML::Specification::CoreMLModels::Gazetteer **)this
                                                                        + 4));
      goto LABEL_73;
    case 2005:
      v9 = CoreML::Specification::CoreMLModels::WordEmbedding::ByteSizeLong(*((CoreML::Specification::CoreMLModels::WordEmbedding **)this
                                                                            + 4));
      goto LABEL_73;
    case 2006:
      v11 = v7
          + CoreML::Specification::CoreMLModels::AudioFeaturePrint::ByteSizeLong(*((CoreML::Specification::CoreMLModels::AudioFeaturePrint **)this
                                                                                 + 4));
      goto LABEL_81;
    default:
      if (v8 == 900)
      {
        *(_DWORD *)(*((_QWORD *)this + 4) + 16) = 0;
        v7 += 3;
      }
      else if (v8 == 3000)
      {
        v10 = CoreML::Specification::SerializedModel::ByteSizeLong(*((CoreML::Specification::SerializedModel **)this + 4));
        v11 = v7 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
LABEL_81:
        v7 = v11 + 3;
      }
      break;
  }
LABEL_74:
  *((_DWORD *)this + 10) = v7;
  return v7;
}

uint64_t CoreML::Specification::ModelDescription::ByteSizeLong(CoreML::Specification::ModelDescription *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CoreML::Specification::Metadata *v31;
  uint64_t v32;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((unsigned int *)this + 12);
  v7 = v4 + v6;
  if ((_DWORD)v6)
  {
    v8 = 0;
    do
    {
      v9 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 7) + 8 * v8 + 8));
      v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v8;
    }
    while ((_DWORD)v6 != v8);
  }
  v10 = *((unsigned int *)this + 18);
  v11 = v7 + v10;
  if ((_DWORD)v10)
  {
    v12 = 0;
    do
    {
      v13 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 10) + 8 * v12 + 8));
      v11 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6);
      ++v12;
    }
    while ((_DWORD)v10 != v12);
  }
  v14 = *((unsigned int *)this + 24);
  v15 = v11 + 2 * v14;
  if ((_DWORD)v14)
  {
    v16 = 0;
    do
    {
      v17 = CoreML::Specification::FunctionDescription::ByteSizeLong(*(CoreML::Specification::FunctionDescription **)(*((_QWORD *)this + 13) + 8 * v16 + 8));
      v15 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      ++v16;
    }
    while ((_DWORD)v14 != v16);
  }
  v18 = *((unsigned int *)this + 30);
  v19 = v15 + 2 * v18;
  if ((_DWORD)v18)
  {
    v20 = 0;
    do
    {
      v21 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 16) + 8 * v20 + 8));
      v19 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
      ++v20;
    }
    while ((_DWORD)v18 != v20);
  }
  v22 = *((_QWORD *)this + 17);
  v23 = *(unsigned __int8 *)(v22 + 23);
  if (*(char *)(v22 + 23) < 0)
  {
    if (!*(_QWORD *)(v22 + 8))
      goto LABEL_23;
  }
  else if (!*(_BYTE *)(v22 + 23))
  {
    goto LABEL_23;
  }
  v24 = *(_QWORD *)(v22 + 8);
  if ((v23 & 0x80u) == 0)
    v24 = v23;
  v19 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_23:
  v25 = *((_QWORD *)this + 18);
  v26 = *(unsigned __int8 *)(v25 + 23);
  if (*(char *)(v25 + 23) < 0)
  {
    if (!*(_QWORD *)(v25 + 8))
      goto LABEL_28;
  }
  else if (!*(_BYTE *)(v25 + 23))
  {
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(v25 + 8);
  if ((v26 & 0x80u) == 0)
    v27 = v26;
  v19 += v27 + ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_28:
  v28 = *((_QWORD *)this + 19);
  v29 = *(unsigned __int8 *)(v28 + 23);
  if (*(char *)(v28 + 23) < 0)
  {
    if (!*(_QWORD *)(v28 + 8))
      goto LABEL_33;
  }
  else if (!*(_BYTE *)(v28 + 23))
  {
    goto LABEL_33;
  }
  v30 = *(_QWORD *)(v28 + 8);
  if ((v29 & 0x80u) == 0)
    v30 = v29;
  v19 += v30 + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_33:
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
  {
    v31 = (CoreML::Specification::Metadata *)*((_QWORD *)this + 20);
    if (v31)
    {
      v32 = CoreML::Specification::Metadata::ByteSizeLong(v31);
      v19 += v32 + ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 2;
    }
  }
  *((_DWORD *)this + 42) = v19;
  return v19;
}

CoreML::Specification::Pipeline *CoreML::Specification::PipelineClassifier::ByteSizeLong(CoreML::Specification::PipelineClassifier *this)
{
  CoreML::Specification::Pipeline *result;
  uint64_t v3;

  if (this == (CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_)
  {
    result = 0;
  }
  else
  {
    result = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 2);
    if (result)
    {
      v3 = CoreML::Specification::Pipeline::ByteSizeLong(result);
      result = (CoreML::Specification::Pipeline *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  *((_DWORD *)this + 6) = (_DWORD)result;
  return result;
}

CoreML::Specification::Pipeline *CoreML::Specification::PipelineRegressor::ByteSizeLong(CoreML::Specification::PipelineRegressor *this)
{
  CoreML::Specification::Pipeline *result;
  uint64_t v3;

  if (this == (CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_)
  {
    result = 0;
  }
  else
  {
    result = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 2);
    if (result)
    {
      v3 = CoreML::Specification::Pipeline::ByteSizeLong(result);
      result = (CoreML::Specification::Pipeline *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  *((_DWORD *)this + 6) = (_DWORD)result;
  return result;
}

uint64_t CoreML::Specification::SerializedModel::ByteSizeLong(CoreML::Specification::SerializedModel *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v5 = *((_QWORD *)this + 3);
  v6 = *(unsigned __int8 *)(v5 + 23);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v7 = v6;
  v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::FeatureDescription::ByteSizeLong(CoreML::Specification::FeatureDescription *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CoreML::Specification::FeatureType *v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
  {
    v9 = (CoreML::Specification::FeatureType *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = CoreML::Specification::FeatureType::ByteSizeLong(v9);
      v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 10) = v5;
  return v5;
}

uint64_t CoreML::Specification::FunctionDescription::ByteSizeLong(CoreML::Specification::FunctionDescription *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((unsigned int *)this + 12);
  v7 = v4 + v6;
  if ((_DWORD)v6)
  {
    v8 = 0;
    do
    {
      v9 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 7) + 8 * v8 + 8));
      v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v8;
    }
    while ((_DWORD)v6 != v8);
  }
  v10 = *((unsigned int *)this + 18);
  v11 = v7 + v10;
  if ((_DWORD)v10)
  {
    v12 = 0;
    do
    {
      v13 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 10) + 8 * v12 + 8));
      v11 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6);
      ++v12;
    }
    while ((_DWORD)v10 != v12);
  }
  v14 = *((_QWORD *)this + 11);
  v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0)
  {
    if (!*(_QWORD *)(v14 + 8))
      goto LABEL_17;
  }
  else if (!*(_BYTE *)(v14 + 23))
  {
    goto LABEL_17;
  }
  v16 = *(_QWORD *)(v14 + 8);
  if ((v15 & 0x80u) == 0)
    v16 = v15;
  v11 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_17:
  v17 = *((_QWORD *)this + 12);
  v18 = *(unsigned __int8 *)(v17 + 23);
  if (*(char *)(v17 + 23) < 0)
  {
    if (!*(_QWORD *)(v17 + 8))
      goto LABEL_22;
  }
  else if (!*(_BYTE *)(v17 + 23))
  {
    goto LABEL_22;
  }
  v19 = *(_QWORD *)(v17 + 8);
  if ((v18 & 0x80u) == 0)
    v19 = v18;
  v11 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_22:
  v20 = *((_QWORD *)this + 13);
  v21 = *(unsigned __int8 *)(v20 + 23);
  if (*(char *)(v20 + 23) < 0)
  {
    if (!*(_QWORD *)(v20 + 8))
      goto LABEL_27;
  }
  else if (!*(_BYTE *)(v20 + 23))
  {
    goto LABEL_27;
  }
  v22 = *(_QWORD *)(v20 + 8);
  if ((v21 & 0x80u) == 0)
    v22 = v21;
  v11 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_27:
  *((_DWORD *)this + 28) = v11;
  return v11;
}

uint64_t CoreML::Specification::Metadata::ByteSizeLong(CoreML::Specification::Metadata *this)
{
  uint64_t *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v21[3];

  v2 = (uint64_t *)*((_QWORD *)this + 5);
  v3 = *v2;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v21, v2);
  v4 = 0;
  v5 = 2 * v3;
  while (v21[0])
  {
    v6 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*((_QWORD *)v21[0] + 3), *((_QWORD *)v21[0] + 3) + 24, *((google::protobuf::Arena **)this + 2));
    if (v4 != (_DWORD *)v6)
    {
      if (v4)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v4 = (_DWORD *)v6;
    }
    v7 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(v4);
    v5 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v21);
  }
  if (v4)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  v8 = *((_QWORD *)this + 6);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_15;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_15;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_15:
  v11 = *((_QWORD *)this + 7);
  v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(_QWORD *)(v11 + 8))
      goto LABEL_20;
  }
  else if (!*(_BYTE *)(v11 + 23))
  {
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v11 + 8);
  if ((v12 & 0x80u) == 0)
    v13 = v12;
  v5 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_20:
  v14 = *((_QWORD *)this + 8);
  v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0)
  {
    if (!*(_QWORD *)(v14 + 8))
      goto LABEL_25;
  }
  else if (!*(_BYTE *)(v14 + 23))
  {
    goto LABEL_25;
  }
  v16 = *(_QWORD *)(v14 + 8);
  if ((v15 & 0x80u) == 0)
    v16 = v15;
  v5 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_25:
  v17 = *((_QWORD *)this + 9);
  v18 = *(unsigned __int8 *)(v17 + 23);
  if (*(char *)(v17 + 23) < 0)
  {
    if (!*(_QWORD *)(v17 + 8))
      goto LABEL_30;
  }
  else if (!*(_BYTE *)(v17 + 23))
  {
    goto LABEL_30;
  }
  v19 = *(_QWORD *)(v17 + 8);
  if ((v18 & 0x80u) == 0)
    v19 = v18;
  v5 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_30:
  *((_DWORD *)this + 20) = v5;
  return v5;
}

void sub_19C99CA44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(uint64_t a1, uint64_t a2, google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)result = &off_1E3D5A1B8;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_DWORD *)(v4 + 8);
  v6 = (int)(v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6)) + 1;
  return v6 + v3;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_19CB39696);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E3D5AC38;
  *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E3D5AC38;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 16);
  if ((__int128 *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v2 = *(_QWORD *)(result + 24);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  *(_DWORD *)(result + 40) &= 0xFFFFFFFC;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::IsInitialized()
{
  return 1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  std::string **v7;
  const std::string *v8;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(__int128 **)(a1 + 16) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      v7 = (std::string **)(a1 + 24);
      if (*(__int128 **)(a1 + 24) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 24), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v8 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 24), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)v8);
      else
        std::string::operator=(*v7, v8);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergePartialFromCodedStream(uint64_t a1, char **this, unsigned int a3)
{
  google::protobuf::Arena **v5;
  google::protobuf::Arena **v6;
  char *v7;
  unint64_t TagFallback;
  __int128 *v9;
  int v10;
  char *v11;
  __int128 *v12;
  uint64_t result;

  v5 = (google::protobuf::Arena **)(a1 + 16);
  v6 = (google::protobuf::Arena **)(a1 + 24);
  while (1)
  {
    while (1)
    {
      v7 = *this;
      if (*this >= this[1])
      {
        LODWORD(TagFallback) = 0;
      }
      else
      {
        TagFallback = *v7;
        if ((*v7 & 0x80000000) == 0)
        {
          *this = v7 + 1;
          goto LABEL_7;
        }
      }
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)this, TagFallback);
LABEL_7:
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 40) |= 1u;
      v9 = *(__int128 **)(a1 + 16);
      if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v9 = *(__int128 **)(a1 + 16);
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)this, (std::string *)v9);
      if (!(_DWORD)result)
        return result;
      v10 = *(_DWORD *)(a1 + 40) | 1;
      *(_DWORD *)(a1 + 40) = v10;
      v11 = *this;
      if (*this < this[1] && *v11 == 18)
      {
        *this = v11 + 1;
LABEL_20:
        *(_DWORD *)(a1 + 40) = v10 | 2;
        v12 = *(__int128 **)(a1 + 24);
        if (v12 == &google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v6, *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v12 = *(__int128 **)(a1 + 24);
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)this, (std::string *)v12);
        if (!(_DWORD)result)
          return result;
        *(_DWORD *)(a1 + 40) |= 2u;
        if (*this == this[1] && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if ((_DWORD)TagFallback == 18)
    {
      v10 = *(_DWORD *)(a1 + 40);
      goto LABEL_20;
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)this, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return google::protobuf::internal::WireFormatLite::WriteString(2u, v5, a2);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_DWORD *)(v4 + 8);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

char *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v5;
  char *v6;
  const void **v7;

  v5 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v6 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v5, a3 + 1);
  v7 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v6 = 18;
  return google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v7, v6 + 1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

void google::protobuf::internal::ArenaStringPtr::CreateInstance(google::protobuf::Arena **a1, google::protobuf::Arena **a2, uint64_t a3)
{
  std::string *v6;
  google::protobuf::Arena *v7;

  v6 = (std::string *)operator new();
  v7 = (google::protobuf::Arena *)v6;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *a1 = v7;
  if (a2)
    google::protobuf::Arena::Own<std::string>(a2, v7);
}

void sub_19C99D1F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<std::string>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<std::string>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<std::string>(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 23) < 0)
      operator delete(*(void **)result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

void google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryLite(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::value(uint64_t a1)
{
  int v3;
  const char *v4;
  int v5;
  std::string __p;

  if (!*(_QWORD *)(a1 + 8))
  {
    v3 = 3;
    v4 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    v5 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(a1 + 24);
}

void sub_19C99D360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(_QWORD *a1)
{
  *a1 = &off_1E3D5A260;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
  {
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[3]);
  }
  return a1;
}

uint64_t google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(uint64_t result)
{
  if ((__int128 *)result != &google::protobuf::internal::fixed_address_empty_string && result != 0)
  {
    if (*(char *)(result + 23) < 0)
      operator delete(*(void **)result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t CoreML::Specification::Model::MergePartialFromCodedStream(CoreML::Specification::Model *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  unsigned int TagFallback;
  unsigned int v13;
  CoreML::Specification::GLMRegressor *v14;
  CoreML::Specification::OneHotEncoder *v15;
  CoreML::Specification::GLMClassifier *v16;
  CoreML::Specification::CoreMLModels::TextClassifier *v17;
  CoreML::Specification::ModelDescription *v18;
  char *v19;
  int v20;
  CoreML::Specification::ItemSimilarityRecommender *v21;
  CoreML::Specification::PipelineClassifier *v22;
  CoreML::Specification::SerializedModel *v23;
  CoreML::Specification::ClassConfidenceThresholding *v24;
  CoreML::Specification::CustomModel *v25;
  CoreML::Specification::Pipeline *v26;
  char *v27;
  int v28;
  char *v29;
  unint64_t Varint64Fallback;
  CoreML::Specification::Imputer *v31;
  CoreML::Specification::FeatureVectorizer *v32;
  CoreML::Specification::DictVectorizer *v33;
  CoreML::Specification::Scaler *v34;
  CoreML::Specification::CategoricalMapping *v35;
  CoreML::Specification::Normalizer *v36;
  CoreML::Specification::ArrayFeatureExtractor *v37;
  CoreML::Specification::NonMaximumSuppression *v38;
  CoreML::Specification::SupportVectorClassifier *v39;
  CoreML::Specification::TreeEnsembleClassifier *v40;
  CoreML::Specification::NeuralNetworkClassifier *v41;
  CoreML::Specification::KNearestNeighborsClassifier *v42;
  CoreML::Specification::CoreMLModels::WordTagger *v43;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint *v44;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *v45;
  CoreML::Specification::CoreMLModels::Gazetteer *v46;
  CoreML::Specification::CoreMLModels::WordEmbedding *v47;
  CoreML::Specification::CoreMLModels::AudioFeaturePrint *v48;
  CoreML::Specification::NeuralNetwork *v49;
  CoreML::Specification::Identity *v50;
  char *v51;
  int v52;
  CoreML::Specification::MILSpec::Program *v53;
  CoreML::Specification::LinkedModel *v54;
  CoreML::Specification::SupportVectorRegressor *v55;
  CoreML::Specification::TreeEnsembleRegressor *v56;
  CoreML::Specification::NeuralNetworkRegressor *v57;
  CoreML::Specification::BayesianProbitRegressor *v58;
  CoreML::Specification::PipelineRegressor *v59;
  char *v60;
  int v61;
  char *v62;
  int VarintSizeAsIntFallback;
  char *v64;
  int v65;
  char *v66;
  int v67;
  char *v68;
  int v69;
  char *v70;
  int v71;
  char *v72;
  int v73;
  char *v74;
  int v75;
  char *v76;
  int v77;
  char *v78;
  int v79;
  char *v80;
  int v81;
  char *v82;
  int v83;
  char *v84;
  int v85;
  char *v86;
  int v87;
  char *v88;
  int v89;
  char *v90;
  int v91;
  char *v92;
  int v93;
  char *v94;
  int v95;
  char *v96;
  int v97;
  char *v98;
  int v99;
  char *v100;
  int v101;
  char *v102;
  int v103;
  char *v104;
  int v105;
  char *v106;
  int v107;
  char *v108;
  int v109;
  char *v110;
  int v111;
  char *v112;
  int v113;
  char *v114;
  int v115;
  char *v116;
  int v117;
  char v118;
  int v119;
  unsigned int v120;
  int v121;
  BOOL v122;
  int v123;
  uint64_t result;
  int v125;
  unsigned int v126;
  int v127;
  char *v128;
  int v129;
  char *v130;
  int v131;
  char *v132;
  int v133;
  char *v134;
  int v135;
  char *v136;
  int v137;
  char *v138;
  int v139;
  char *v140;
  int v141;
  int v142;
  unsigned int v143;
  int v144;
  int v145;
  unsigned int v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  unsigned int v152;
  int v153;
  int v154;
  unsigned int v155;
  int v156;
  int v157;
  unsigned int v158;
  int v159;
  int v160;
  unsigned int v161;
  int v162;
  int v163;
  unsigned int v164;
  int v165;
  int v166;
  unsigned int v167;
  int v168;
  CoreML::Specification::Identity *v169;
  unsigned int v170;
  int v171;
  int v172;
  google::protobuf::io::CodedInputStream *v173;
  int v174;
  int v175;
  unsigned int v176;
  int v177;
  int v178;
  unsigned int v179;
  int v180;
  int v181;
  unsigned int v182;
  int v183;
  int v184;
  unsigned int v185;
  int v186;
  int v187;
  int v188;
  unsigned int v189;
  int v190;
  int v191;
  unsigned int v192;
  int v193;
  int v194;
  unsigned int v195;
  int v196;
  int v197;
  unsigned int v198;
  int v199;
  int v200;
  unsigned int v201;
  int v202;
  int v203;
  unsigned int v204;
  int v205;
  int v206;
  unsigned int v207;
  int v208;
  int v209;
  unsigned int v210;
  int v211;
  int v212;
  unsigned int v213;
  int v214;
  int v215;
  unsigned int v216;
  int v217;
  int v218;
  unsigned int v219;
  int v220;
  int v221;
  unsigned int v222;
  int v223;
  int v224;
  unsigned int v225;
  int v226;
  int v227;
  unsigned int v228;
  int v229;
  int v230;
  unsigned int v231;
  int v232;
  int v233;
  unsigned int v234;
  int v235;
  int v236;
  unsigned int v237;
  int v238;
  int v239;
  unsigned int v240;
  int v241;
  int v242;
  unsigned int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  unsigned int v248;
  int v249;
  int v250;
  unsigned int v251;
  int v252;
  uint64_t Varint32Fallback;

  while (1)
  {
    while (1)
    {
      v5 = *(unsigned __int8 **)a2;
      v6 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v6)
      {
        LODWORD(v8) = 0;
      }
      else
      {
        v7 = v5 + 1;
        v8 = *v5;
        if ((char)*v5 >= 1)
        {
          *(_QWORD *)a2 = v7;
          v9 = v8 | 0x100000000;
          if ((v9 & 0x100000000) == 0)
            goto LABEL_8;
          goto LABEL_16;
        }
        if ((unint64_t)v7 < v6)
        {
          v10 = *v7;
          if ((v8 & ~v10) >= 0x80)
          {
            *(_QWORD *)a2 = v5 + 2;
            v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
            goto LABEL_16;
          }
        }
      }
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x5DC2) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_8;
LABEL_16:
      v13 = v9 >> 3;
      if (v9 >> 3 <= 0x22B)
        break;
      if (v9 >> 3 <= 0x383)
      {
        switch(v13)
        {
          case 0x258u:
            if (v9 != 194)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 600)
            {
              v15 = (CoreML::Specification::OneHotEncoder *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 600;
              v15 = (CoreML::Specification::OneHotEncoder *)operator new();
              CoreML::Specification::OneHotEncoder::OneHotEncoder(v15);
              *((_QWORD *)this + 4) = v15;
            }
            v62 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v62 < 0)
            {
              VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (VarintSizeAsIntFallback < 0)
                return 0;
            }
            else
            {
              VarintSizeAsIntFallback = *v62;
              *(_QWORD *)a2 = v62 + 1;
            }
            v142 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
            v144 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v144--, 1);
            *((_DWORD *)a2 + 13) = v144;
            if (v144 < 0 != v122)
              return 0;
            v123 = v142;
            result = CoreML::Specification::OneHotEncoder::MergePartialFromCodedStream(v15, a2, v143);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x259u:
            if (v9 != 202)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 601)
            {
              v31 = (CoreML::Specification::Imputer *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 601;
              v31 = (CoreML::Specification::Imputer *)operator new();
              CoreML::Specification::Imputer::Imputer(v31);
              *((_QWORD *)this + 4) = v31;
            }
            v64 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v64 < 0)
            {
              v65 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v65 < 0)
                return 0;
            }
            else
            {
              v65 = *v64;
              *(_QWORD *)a2 = v64 + 1;
            }
            v145 = google::protobuf::io::CodedInputStream::PushLimit(a2, v65);
            v147 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v147--, 1);
            *((_DWORD *)a2 + 13) = v147;
            if (v147 < 0 != v122)
              return 0;
            v123 = v145;
            result = CoreML::Specification::Imputer::MergePartialFromCodedStream(v31, a2, v146);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x25Au:
            if (v9 != 210)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 602)
            {
              v32 = (CoreML::Specification::FeatureVectorizer *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 602;
              v32 = (CoreML::Specification::FeatureVectorizer *)operator new();
              CoreML::Specification::FeatureVectorizer::FeatureVectorizer(v32);
              *((_QWORD *)this + 4) = v32;
            }
            v66 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v66 < 0)
            {
              v67 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v67 < 0)
                return 0;
            }
            else
            {
              v67 = *v66;
              *(_QWORD *)a2 = v66 + 1;
            }
            v148 = google::protobuf::io::CodedInputStream::PushLimit(a2, v67);
            v150 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v150--, 1);
            *((_DWORD *)a2 + 13) = v150;
            if (v150 < 0 != v122)
              return 0;
            v123 = v148;
            result = CoreML::Specification::FeatureVectorizer::MergePartialFromCodedStream(v32, a2, v149);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x25Bu:
            if (v9 != 218)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 603)
            {
              v33 = (CoreML::Specification::DictVectorizer *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 603;
              v33 = (CoreML::Specification::DictVectorizer *)operator new();
              CoreML::Specification::DictVectorizer::DictVectorizer(v33);
              *((_QWORD *)this + 4) = v33;
            }
            v68 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v68 < 0)
            {
              v69 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v69 < 0)
                return 0;
            }
            else
            {
              v69 = *v68;
              *(_QWORD *)a2 = v68 + 1;
            }
            v151 = google::protobuf::io::CodedInputStream::PushLimit(a2, v69);
            v153 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v153--, 1);
            *((_DWORD *)a2 + 13) = v153;
            if (v153 < 0 != v122)
              return 0;
            v123 = v151;
            result = CoreML::Specification::DictVectorizer::MergePartialFromCodedStream(v33, a2, v152);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x25Cu:
            if (v9 != 226)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 604)
            {
              v34 = (CoreML::Specification::Scaler *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 604;
              v34 = (CoreML::Specification::Scaler *)operator new();
              CoreML::Specification::Scaler::Scaler(v34);
              *((_QWORD *)this + 4) = v34;
            }
            v70 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v70 < 0)
            {
              v71 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v71 < 0)
                return 0;
            }
            else
            {
              v71 = *v70;
              *(_QWORD *)a2 = v70 + 1;
            }
            v154 = google::protobuf::io::CodedInputStream::PushLimit(a2, v71);
            v156 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v156--, 1);
            *((_DWORD *)a2 + 13) = v156;
            if (v156 < 0 != v122)
              return 0;
            v123 = v154;
            result = CoreML::Specification::Scaler::MergePartialFromCodedStream(v34, (char **)a2, v155);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x25Du:
          case 0x260u:
            goto LABEL_8;
          case 0x25Eu:
            if (v9 != 242)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 606)
            {
              v35 = (CoreML::Specification::CategoricalMapping *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 606;
              v35 = (CoreML::Specification::CategoricalMapping *)operator new();
              CoreML::Specification::CategoricalMapping::CategoricalMapping(v35);
              *((_QWORD *)this + 4) = v35;
            }
            v72 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v72 < 0)
            {
              v73 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v73 < 0)
                return 0;
            }
            else
            {
              v73 = *v72;
              *(_QWORD *)a2 = v72 + 1;
            }
            v157 = google::protobuf::io::CodedInputStream::PushLimit(a2, v73);
            v159 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v159--, 1);
            *((_DWORD *)a2 + 13) = v159;
            if (v159 < 0 != v122)
              return 0;
            v123 = v157;
            result = CoreML::Specification::CategoricalMapping::MergePartialFromCodedStream(v35, a2, v158);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x25Fu:
            if (v9 != 250)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 607)
            {
              v36 = (CoreML::Specification::Normalizer *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 607;
              v36 = (CoreML::Specification::Normalizer *)operator new();
              CoreML::Specification::Normalizer::Normalizer(v36);
              *((_QWORD *)this + 4) = v36;
            }
            v74 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v74 < 0)
            {
              v75 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v75 < 0)
                return 0;
            }
            else
            {
              v75 = *v74;
              *(_QWORD *)a2 = v74 + 1;
            }
            v160 = google::protobuf::io::CodedInputStream::PushLimit(a2, v75);
            v162 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v162--, 1);
            *((_DWORD *)a2 + 13) = v162;
            if (v162 < 0 != v122)
              return 0;
            v123 = v160;
            result = CoreML::Specification::Normalizer::MergePartialFromCodedStream(v36, (char **)a2, v161);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x261u:
            if (v9 != 10)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 609)
            {
              v37 = (CoreML::Specification::ArrayFeatureExtractor *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 609;
              v37 = (CoreML::Specification::ArrayFeatureExtractor *)operator new();
              CoreML::Specification::ArrayFeatureExtractor::ArrayFeatureExtractor(v37);
              *((_QWORD *)this + 4) = v37;
            }
            v76 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v76 < 0)
            {
              v77 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v77 < 0)
                return 0;
            }
            else
            {
              v77 = *v76;
              *(_QWORD *)a2 = v76 + 1;
            }
            v163 = google::protobuf::io::CodedInputStream::PushLimit(a2, v77);
            v165 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v165--, 1);
            *((_DWORD *)a2 + 13) = v165;
            if (v165 < 0 != v122)
              return 0;
            v123 = v163;
            result = CoreML::Specification::ArrayFeatureExtractor::MergePartialFromCodedStream(v37, a2, v164);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x262u:
            if (v9 != 18)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 610)
            {
              v38 = (CoreML::Specification::NonMaximumSuppression *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 610;
              v38 = (CoreML::Specification::NonMaximumSuppression *)operator new();
              CoreML::Specification::NonMaximumSuppression::NonMaximumSuppression(v38);
              *((_QWORD *)this + 4) = v38;
            }
            v78 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v78 < 0)
            {
              v79 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v79 < 0)
                return 0;
            }
            else
            {
              v79 = *v78;
              *(_QWORD *)a2 = v78 + 1;
            }
            v166 = google::protobuf::io::CodedInputStream::PushLimit(a2, v79);
            v168 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v168--, 1);
            *((_DWORD *)a2 + 13) = v168;
            if (v168 < 0 != v122)
              return 0;
            v123 = v166;
            result = CoreML::Specification::NonMaximumSuppression::MergePartialFromCodedStream(v38, a2, v167);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          default:
            if (v13 == 556)
            {
              if (v9 != 98)
                goto LABEL_8;
              if (*((_DWORD *)this + 11) == 556)
              {
                v54 = (CoreML::Specification::LinkedModel *)*((_QWORD *)this + 4);
              }
              else
              {
                CoreML::Specification::Model::clear_Type((uint64_t)this);
                *((_DWORD *)this + 11) = 556;
                v54 = (CoreML::Specification::LinkedModel *)operator new();
                CoreML::Specification::LinkedModel::LinkedModel(v54);
                *((_QWORD *)this + 4) = v54;
              }
              v116 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v116 < 0)
              {
                v117 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v117 < 0)
                  return 0;
              }
              else
              {
                v117 = *v116;
                *(_QWORD *)a2 = v116 + 1;
              }
              v230 = google::protobuf::io::CodedInputStream::PushLimit(a2, v117);
              v232 = *((_DWORD *)a2 + 13);
              v122 = __OFSUB__(v232--, 1);
              *((_DWORD *)a2 + 13) = v232;
              if (v232 < 0 != v122)
                return 0;
              v123 = v230;
              result = CoreML::Specification::LinkedModel::MergePartialFromCodedStream(v54, a2, v231);
              if (!(_DWORD)result)
                return result;
            }
            else
            {
              if (v13 != 560 || v9 != 130)
                goto LABEL_8;
              if (*((_DWORD *)this + 11) == 560)
              {
                v24 = (CoreML::Specification::ClassConfidenceThresholding *)*((_QWORD *)this + 4);
              }
              else
              {
                CoreML::Specification::Model::clear_Type((uint64_t)this);
                *((_DWORD *)this + 11) = 560;
                v24 = (CoreML::Specification::ClassConfidenceThresholding *)operator new();
                CoreML::Specification::ClassConfidenceThresholding::ClassConfidenceThresholding(v24);
                *((_QWORD *)this + 4) = v24;
              }
              v114 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v114 < 0)
              {
                v115 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v115 < 0)
                  return 0;
              }
              else
              {
                v115 = *v114;
                *(_QWORD *)a2 = v114 + 1;
              }
              v227 = google::protobuf::io::CodedInputStream::PushLimit(a2, v115);
              v229 = *((_DWORD *)a2 + 13);
              v122 = __OFSUB__(v229--, 1);
              *((_DWORD *)a2 + 13) = v229;
              if (v229 < 0 != v122)
                return 0;
              v123 = v227;
              result = CoreML::Specification::ClassConfidenceThresholding::MergePartialFromCodedStream(v24, a2, v228);
              if (!(_DWORD)result)
                return result;
            }
            break;
        }
        goto LABEL_466;
      }
      switch(v13)
      {
        case 0x7D0u:
          if (v9 != 130)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 2000)
          {
            v17 = (CoreML::Specification::CoreMLModels::TextClassifier *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2000;
            v17 = (CoreML::Specification::CoreMLModels::TextClassifier *)operator new();
            CoreML::Specification::CoreMLModels::TextClassifier::TextClassifier(v17);
            *((_QWORD *)this + 4) = v17;
          }
          v82 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v82 < 0)
          {
            v83 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v83 < 0)
              return 0;
          }
          else
          {
            v83 = *v82;
            *(_QWORD *)a2 = v82 + 1;
          }
          v178 = google::protobuf::io::CodedInputStream::PushLimit(a2, v83);
          v180 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v180--, 1);
          *((_DWORD *)a2 + 13) = v180;
          if (v180 < 0 != v122)
            return 0;
          v123 = v178;
          result = CoreML::Specification::CoreMLModels::TextClassifier::MergePartialFromCodedStream(v17, a2, v179);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        case 0x7D1u:
          if (v9 != 138)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 2001)
          {
            v43 = (CoreML::Specification::CoreMLModels::WordTagger *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2001;
            v43 = (CoreML::Specification::CoreMLModels::WordTagger *)operator new();
            CoreML::Specification::CoreMLModels::WordTagger::WordTagger(v43);
            *((_QWORD *)this + 4) = v43;
          }
          v98 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v98 < 0)
          {
            v99 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v99 < 0)
              return 0;
          }
          else
          {
            v99 = *v98;
            *(_QWORD *)a2 = v98 + 1;
          }
          v203 = google::protobuf::io::CodedInputStream::PushLimit(a2, v99);
          v205 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v205--, 1);
          *((_DWORD *)a2 + 13) = v205;
          if (v205 < 0 != v122)
            return 0;
          v123 = v203;
          result = CoreML::Specification::CoreMLModels::WordTagger::MergePartialFromCodedStream(v43, a2, v204);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        case 0x7D2u:
          if (v9 != 146)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 2002)
          {
            v44 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2002;
            v44 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)operator new();
            CoreML::Specification::CoreMLModels::VisionFeaturePrint::VisionFeaturePrint(v44);
            *((_QWORD *)this + 4) = v44;
          }
          v100 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v100 < 0)
          {
            v101 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v101 < 0)
              return 0;
          }
          else
          {
            v101 = *v100;
            *(_QWORD *)a2 = v100 + 1;
          }
          v206 = google::protobuf::io::CodedInputStream::PushLimit(a2, v101);
          v208 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v208--, 1);
          *((_DWORD *)a2 + 13) = v208;
          if (v208 < 0 != v122)
            return 0;
          v123 = v206;
          result = CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergePartialFromCodedStream(v44, a2, v207);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        case 0x7D3u:
          if (v9 != 154)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 2003)
          {
            v45 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2003;
            v45 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)operator new();
            CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SoundAnalysisPreprocessing(v45);
            *((_QWORD *)this + 4) = v45;
          }
          v102 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v102 < 0)
          {
            v103 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v103 < 0)
              return 0;
          }
          else
          {
            v103 = *v102;
            *(_QWORD *)a2 = v102 + 1;
          }
          v209 = google::protobuf::io::CodedInputStream::PushLimit(a2, v103);
          v211 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v211--, 1);
          *((_DWORD *)a2 + 13) = v211;
          if (v211 < 0 != v122)
            return 0;
          v123 = v209;
          result = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergePartialFromCodedStream(v45, a2, v210);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        case 0x7D4u:
          if (v9 != 162)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 2004)
          {
            v46 = (CoreML::Specification::CoreMLModels::Gazetteer *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2004;
            v46 = (CoreML::Specification::CoreMLModels::Gazetteer *)operator new();
            CoreML::Specification::CoreMLModels::Gazetteer::Gazetteer(v46);
            *((_QWORD *)this + 4) = v46;
          }
          v104 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v104 < 0)
          {
            v105 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v105 < 0)
              return 0;
          }
          else
          {
            v105 = *v104;
            *(_QWORD *)a2 = v104 + 1;
          }
          v212 = google::protobuf::io::CodedInputStream::PushLimit(a2, v105);
          v214 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v214--, 1);
          *((_DWORD *)a2 + 13) = v214;
          if (v214 < 0 != v122)
            return 0;
          v123 = v212;
          result = CoreML::Specification::CoreMLModels::Gazetteer::MergePartialFromCodedStream(v46, a2, v213);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        case 0x7D5u:
          if (v9 != 170)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 2005)
          {
            v47 = (CoreML::Specification::CoreMLModels::WordEmbedding *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2005;
            v47 = (CoreML::Specification::CoreMLModels::WordEmbedding *)operator new();
            CoreML::Specification::CoreMLModels::WordEmbedding::WordEmbedding(v47);
            *((_QWORD *)this + 4) = v47;
          }
          v106 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v106 < 0)
          {
            v107 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v107 < 0)
              return 0;
          }
          else
          {
            v107 = *v106;
            *(_QWORD *)a2 = v106 + 1;
          }
          v215 = google::protobuf::io::CodedInputStream::PushLimit(a2, v107);
          v217 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v217--, 1);
          *((_DWORD *)a2 + 13) = v217;
          if (v217 < 0 != v122)
            return 0;
          v123 = v215;
          result = CoreML::Specification::CoreMLModels::WordEmbedding::MergePartialFromCodedStream(v47, a2, v216);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        case 0x7D6u:
          if (v9 != 178)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 2006)
          {
            v48 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2006;
            v48 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)operator new();
            CoreML::Specification::CoreMLModels::AudioFeaturePrint::AudioFeaturePrint(v48);
            *((_QWORD *)this + 4) = v48;
          }
          v108 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v108 < 0)
          {
            v109 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v109 < 0)
              return 0;
          }
          else
          {
            v109 = *v108;
            *(_QWORD *)a2 = v108 + 1;
          }
          v218 = google::protobuf::io::CodedInputStream::PushLimit(a2, v109);
          v220 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v220--, 1);
          *((_DWORD *)a2 + 13) = v220;
          if (v220 < 0 != v122)
            return 0;
          v123 = v218;
          result = CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergePartialFromCodedStream(v48, a2, v219);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        default:
          if (v13 == 900)
          {
            if (v9 != 34)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) != 900)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 900;
              v50 = (CoreML::Specification::Identity *)operator new();
              CoreML::Specification::Identity::Identity(v50);
              *((_QWORD *)this + 4) = v50;
            }
            v51 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v51 < 0)
            {
              v52 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v52 < 0)
                return 0;
            }
            else
            {
              v52 = *v51;
              *(_QWORD *)a2 = v51 + 1;
            }
            v169 = (CoreML::Specification::Identity *)google::protobuf::io::CodedInputStream::PushLimit(a2, v52);
            v171 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v171--, 1);
            *((_DWORD *)a2 + 13) = v171;
            if (v171 < 0 != v122)
              return 0;
            v172 = (int)v169;
            result = CoreML::Specification::Identity::MergePartialFromCodedStream(v169, (char **)a2, v170);
            if (!(_DWORD)result)
              return result;
            v173 = a2;
            v174 = v172;
            goto LABEL_467;
          }
          if (v13 != 3000 || v9 != 194)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 3000)
          {
            v23 = (CoreML::Specification::SerializedModel *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 3000;
            v23 = (CoreML::Specification::SerializedModel *)operator new();
            CoreML::Specification::SerializedModel::SerializedModel(v23);
            *((_QWORD *)this + 4) = v23;
          }
          v86 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v86 < 0)
          {
            v87 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v87 < 0)
              return 0;
          }
          else
          {
            v87 = *v86;
            *(_QWORD *)a2 = v86 + 1;
          }
          v184 = google::protobuf::io::CodedInputStream::PushLimit(a2, v87);
          v186 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v186--, 1);
          *((_DWORD *)a2 + 13) = v186;
          if (v186 < 0 != v122)
            return 0;
          v187 = v184;
          result = CoreML::Specification::SerializedModel::MergePartialFromCodedStream(v23, (char **)a2, v185);
          if (!(_DWORD)result)
            return result;
          if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v187))
            return 0;
          break;
      }
    }
    if (v9 >> 3 > 0x18F)
    {
      if (v9 >> 3 <= 0x1F3)
      {
        switch(v13)
        {
          case 0x190u:
            if (v9 != 130)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 400)
            {
              v16 = (CoreML::Specification::GLMClassifier *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 400;
              v16 = (CoreML::Specification::GLMClassifier *)operator new();
              CoreML::Specification::GLMClassifier::GLMClassifier(v16);
              *((_QWORD *)this + 4) = v16;
            }
            v80 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v80 < 0)
            {
              v81 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v81 < 0)
                return 0;
            }
            else
            {
              v81 = *v80;
              *(_QWORD *)a2 = v80 + 1;
            }
            v175 = google::protobuf::io::CodedInputStream::PushLimit(a2, v81);
            v177 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v177--, 1);
            *((_DWORD *)a2 + 13) = v177;
            if (v177 < 0 != v122)
              return 0;
            v123 = v175;
            result = CoreML::Specification::GLMClassifier::MergePartialFromCodedStream(v16, a2, v176);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x191u:
            if (v9 != 138)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 401)
            {
              v39 = (CoreML::Specification::SupportVectorClassifier *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 401;
              v39 = (CoreML::Specification::SupportVectorClassifier *)operator new();
              CoreML::Specification::SupportVectorClassifier::SupportVectorClassifier(v39);
              *((_QWORD *)this + 4) = v39;
            }
            v90 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v90 < 0)
            {
              v91 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v91 < 0)
                return 0;
            }
            else
            {
              v91 = *v90;
              *(_QWORD *)a2 = v90 + 1;
            }
            v191 = google::protobuf::io::CodedInputStream::PushLimit(a2, v91);
            v193 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v193--, 1);
            *((_DWORD *)a2 + 13) = v193;
            if (v193 < 0 != v122)
              return 0;
            v123 = v191;
            result = CoreML::Specification::SupportVectorClassifier::MergePartialFromCodedStream(v39, a2, v192);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x192u:
            if (v9 != 146)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 402)
            {
              v40 = (CoreML::Specification::TreeEnsembleClassifier *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 402;
              v40 = (CoreML::Specification::TreeEnsembleClassifier *)operator new();
              CoreML::Specification::TreeEnsembleClassifier::TreeEnsembleClassifier(v40);
              *((_QWORD *)this + 4) = v40;
            }
            v92 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v92 < 0)
            {
              v93 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v93 < 0)
                return 0;
            }
            else
            {
              v93 = *v92;
              *(_QWORD *)a2 = v92 + 1;
            }
            v194 = google::protobuf::io::CodedInputStream::PushLimit(a2, v93);
            v196 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v196--, 1);
            *((_DWORD *)a2 + 13) = v196;
            if (v196 < 0 != v122)
              return 0;
            v123 = v194;
            result = CoreML::Specification::TreeEnsembleClassifier::MergePartialFromCodedStream(v40, a2, v195);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x193u:
            if (v9 != 154)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 403)
            {
              v41 = (CoreML::Specification::NeuralNetworkClassifier *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 403;
              v41 = (CoreML::Specification::NeuralNetworkClassifier *)operator new();
              CoreML::Specification::NeuralNetworkClassifier::NeuralNetworkClassifier(v41);
              *((_QWORD *)this + 4) = v41;
            }
            v94 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v94 < 0)
            {
              v95 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v95 < 0)
                return 0;
            }
            else
            {
              v95 = *v94;
              *(_QWORD *)a2 = v94 + 1;
            }
            v197 = google::protobuf::io::CodedInputStream::PushLimit(a2, v95);
            v199 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v199--, 1);
            *((_DWORD *)a2 + 13) = v199;
            if (v199 < 0 != v122)
              return 0;
            v123 = v197;
            result = CoreML::Specification::NeuralNetworkClassifier::MergePartialFromCodedStream(v41, a2, v198);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          case 0x194u:
            if (v9 != 162)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 404)
            {
              v42 = (CoreML::Specification::KNearestNeighborsClassifier *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 404;
              v42 = (CoreML::Specification::KNearestNeighborsClassifier *)operator new();
              CoreML::Specification::KNearestNeighborsClassifier::KNearestNeighborsClassifier(v42);
              *((_QWORD *)this + 4) = v42;
            }
            v96 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v96 < 0)
            {
              v97 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v97 < 0)
                return 0;
            }
            else
            {
              v97 = *v96;
              *(_QWORD *)a2 = v96 + 1;
            }
            v200 = google::protobuf::io::CodedInputStream::PushLimit(a2, v97);
            v202 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v202--, 1);
            *((_DWORD *)a2 + 13) = v202;
            if (v202 < 0 != v122)
              return 0;
            v123 = v200;
            result = CoreML::Specification::KNearestNeighborsClassifier::MergePartialFromCodedStream(v42, a2, v201);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          default:
            goto LABEL_8;
        }
      }
      if (v9 >> 3 > 0x1F5)
      {
        if (v13 == 502)
        {
          if (v9 == 178)
          {
            if (*((_DWORD *)this + 11) == 502)
            {
              v53 = (CoreML::Specification::MILSpec::Program *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 502;
              v53 = (CoreML::Specification::MILSpec::Program *)operator new();
              CoreML::Specification::MILSpec::Program::Program(v53);
              *((_QWORD *)this + 4) = v53;
            }
            v112 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v112 < 0)
            {
              v113 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v113 < 0)
                return 0;
            }
            else
            {
              v113 = *v112;
              *(_QWORD *)a2 = v112 + 1;
            }
            v224 = google::protobuf::io::CodedInputStream::PushLimit(a2, v113);
            v226 = *((_DWORD *)a2 + 13);
            v122 = __OFSUB__(v226--, 1);
            *((_DWORD *)a2 + 13) = v226;
            if (v226 < 0 != v122)
              return 0;
            v123 = v224;
            result = CoreML::Specification::MILSpec::Program::MergePartialFromCodedStream(v53, a2, v225);
            if (!(_DWORD)result)
              return result;
            goto LABEL_466;
          }
        }
        else if (v13 == 555 && v9 == 90)
        {
          if (*((_DWORD *)this + 11) == 555)
          {
            v25 = (CoreML::Specification::CustomModel *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 555;
            v25 = (CoreML::Specification::CustomModel *)operator new();
            CoreML::Specification::CustomModel::CustomModel(v25);
            *((_QWORD *)this + 4) = v25;
          }
          v88 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v88 < 0)
          {
            v89 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v89 < 0)
              return 0;
          }
          else
          {
            v89 = *v88;
            *(_QWORD *)a2 = v88 + 1;
          }
          v188 = google::protobuf::io::CodedInputStream::PushLimit(a2, v89);
          v190 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v190--, 1);
          *((_DWORD *)a2 + 13) = v190;
          if (v190 < 0 != v122)
            return 0;
          v123 = v188;
          result = CoreML::Specification::CustomModel::MergePartialFromCodedStream(v25, a2, v189);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        }
      }
      else if (v13 == 500)
      {
        if (v9 == 162)
        {
          if (*((_DWORD *)this + 11) == 500)
          {
            v49 = (CoreML::Specification::NeuralNetwork *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 500;
            v49 = (CoreML::Specification::NeuralNetwork *)operator new();
            CoreML::Specification::NeuralNetwork::NeuralNetwork(v49);
            *((_QWORD *)this + 4) = v49;
          }
          v110 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v110 < 0)
          {
            v111 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v111 < 0)
              return 0;
          }
          else
          {
            v111 = *v110;
            *(_QWORD *)a2 = v110 + 1;
          }
          v221 = google::protobuf::io::CodedInputStream::PushLimit(a2, v111);
          v223 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v223--, 1);
          *((_DWORD *)a2 + 13) = v223;
          if (v223 < 0 != v122)
            return 0;
          v123 = v221;
          result = CoreML::Specification::NeuralNetwork::MergePartialFromCodedStream(v49, a2, v222);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        }
      }
      else if (v9 == 170)
      {
        if (*((_DWORD *)this + 11) == 501)
        {
          v21 = (CoreML::Specification::ItemSimilarityRecommender *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 501;
          v21 = (CoreML::Specification::ItemSimilarityRecommender *)operator new();
          CoreML::Specification::ItemSimilarityRecommender::ItemSimilarityRecommender(v21);
          *((_QWORD *)this + 4) = v21;
        }
        v84 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v84 < 0)
        {
          v85 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v85 < 0)
            return 0;
        }
        else
        {
          v85 = *v84;
          *(_QWORD *)a2 = v84 + 1;
        }
        v181 = google::protobuf::io::CodedInputStream::PushLimit(a2, v85);
        v183 = *((_DWORD *)a2 + 13);
        v122 = __OFSUB__(v183--, 1);
        *((_DWORD *)a2 + 13) = v183;
        if (v183 < 0 != v122)
          return 0;
        v123 = v181;
        result = CoreML::Specification::ItemSimilarityRecommender::MergePartialFromCodedStream(v21, a2, v182);
        if (!(_DWORD)result)
          return result;
        goto LABEL_466;
      }
      goto LABEL_8;
    }
    if (v9 >> 3 > 0xC8)
      break;
    if (v9 >> 3 > 9)
    {
      if (v13 == 10)
      {
        if (v9 != 80)
          goto LABEL_8;
        v29 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v29 < 0)
        {
          Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v118 & 1) == 0)
            return 0;
        }
        else
        {
          Varint64Fallback = *v29;
          *(_QWORD *)a2 = v29 + 1;
        }
        *((_BYTE *)this + 28) = Varint64Fallback != 0;
      }
      else
      {
        if (v13 == 200 && v9 == 66)
        {
          if (*((_DWORD *)this + 11) == 200)
          {
            v22 = (CoreML::Specification::PipelineClassifier *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 200;
            v22 = (CoreML::Specification::PipelineClassifier *)operator new();
            CoreML::Specification::PipelineClassifier::PipelineClassifier(v22);
            *((_QWORD *)this + 4) = v22;
          }
          v60 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v60 < 0)
          {
            v61 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v61 < 0)
              return 0;
          }
          else
          {
            v61 = *v60;
            *(_QWORD *)a2 = v60 + 1;
          }
          v125 = google::protobuf::io::CodedInputStream::PushLimit(a2, v61);
          v127 = *((_DWORD *)a2 + 13);
          v122 = __OFSUB__(v127--, 1);
          *((_DWORD *)a2 + 13) = v127;
          if (v127 < 0 != v122)
            return 0;
          v123 = v125;
          result = CoreML::Specification::PipelineClassifier::MergePartialFromCodedStream(v22, a2, v126);
          if (!(_DWORD)result)
            return result;
          goto LABEL_466;
        }
LABEL_8:
        if ((_DWORD)v9)
          v11 = (v9 & 7) == 4;
        else
          v11 = 1;
        if (v11)
          return 1;
        if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
      }
    }
    else if (v13 == 1)
    {
      if (v9 != 8)
        goto LABEL_8;
      v27 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v28 = 0;
      }
      else
      {
        v28 = *v27;
        if ((*v27 & 0x80000000) == 0)
        {
          *(_QWORD *)a2 = v27 + 1;
          goto LABEL_471;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v28);
      v28 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_471:
      *((_DWORD *)this + 6) = v28;
    }
    else
    {
      if (v13 != 2 || v9 != 18)
        goto LABEL_8;
      v18 = (CoreML::Specification::ModelDescription *)*((_QWORD *)this + 2);
      if (!v18)
      {
        v18 = (CoreML::Specification::ModelDescription *)operator new();
        CoreML::Specification::ModelDescription::ModelDescription(v18);
        *((_QWORD *)this + 2) = v18;
      }
      v19 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
      {
        v20 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v20 < 0)
          return 0;
      }
      else
      {
        v20 = *v19;
        *(_QWORD *)a2 = v19 + 1;
      }
      v119 = google::protobuf::io::CodedInputStream::PushLimit(a2, v20);
      v121 = *((_DWORD *)a2 + 13);
      v122 = __OFSUB__(v121--, 1);
      *((_DWORD *)a2 + 13) = v121;
      if (v121 < 0 != v122)
        return 0;
      v123 = v119;
      result = CoreML::Specification::ModelDescription::MergePartialFromCodedStream(v18, a2, v120);
      if (!(_DWORD)result)
        return result;
LABEL_466:
      v173 = a2;
      v174 = v123;
LABEL_467:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v173, v174))
        return 0;
    }
  }
  switch(v13)
  {
    case 0x12Cu:
      if (v9 != 98)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 300)
      {
        v14 = (CoreML::Specification::GLMRegressor *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 300;
        v14 = (CoreML::Specification::GLMRegressor *)operator new();
        CoreML::Specification::GLMRegressor::GLMRegressor(v14);
        *((_QWORD *)this + 4) = v14;
      }
      v128 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v128 < 0)
      {
        v129 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v129 < 0)
          return 0;
      }
      else
      {
        v129 = *v128;
        *(_QWORD *)a2 = v128 + 1;
      }
      v242 = google::protobuf::io::CodedInputStream::PushLimit(a2, v129);
      v244 = *((_DWORD *)a2 + 13);
      v122 = __OFSUB__(v244--, 1);
      *((_DWORD *)a2 + 13) = v244;
      if (v244 < 0 != v122)
        return 0;
      v123 = v242;
      result = CoreML::Specification::GLMRegressor::MergePartialFromCodedStream(v14, a2, v243);
      if ((_DWORD)result)
        goto LABEL_466;
      break;
    case 0x12Du:
      if (v9 != 106)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 301)
      {
        v55 = (CoreML::Specification::SupportVectorRegressor *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 301;
        v55 = (CoreML::Specification::SupportVectorRegressor *)operator new();
        CoreML::Specification::SupportVectorRegressor::SupportVectorRegressor(v55);
        *((_QWORD *)this + 4) = v55;
      }
      v132 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v132 < 0)
      {
        v133 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v133 < 0)
          return 0;
      }
      else
      {
        v133 = *v132;
        *(_QWORD *)a2 = v132 + 1;
      }
      v247 = google::protobuf::io::CodedInputStream::PushLimit(a2, v133);
      v249 = *((_DWORD *)a2 + 13);
      v122 = __OFSUB__(v249--, 1);
      *((_DWORD *)a2 + 13) = v249;
      if (v249 < 0 != v122)
        return 0;
      v123 = v247;
      result = CoreML::Specification::SupportVectorRegressor::MergePartialFromCodedStream(v55, a2, v248);
      if ((_DWORD)result)
        goto LABEL_466;
      break;
    case 0x12Eu:
      if (v9 != 114)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 302)
      {
        v56 = (CoreML::Specification::TreeEnsembleRegressor *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 302;
        v56 = (CoreML::Specification::TreeEnsembleRegressor *)operator new();
        CoreML::Specification::TreeEnsembleRegressor::TreeEnsembleRegressor(v56);
        *((_QWORD *)this + 4) = v56;
      }
      v134 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v134 < 0)
      {
        v135 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v135 < 0)
          return 0;
      }
      else
      {
        v135 = *v134;
        *(_QWORD *)a2 = v134 + 1;
      }
      v233 = google::protobuf::io::CodedInputStream::PushLimit(a2, v135);
      v235 = *((_DWORD *)a2 + 13);
      v122 = __OFSUB__(v235--, 1);
      *((_DWORD *)a2 + 13) = v235;
      if (v235 < 0 != v122)
        return 0;
      v123 = v233;
      result = CoreML::Specification::TreeEnsembleRegressor::MergePartialFromCodedStream(v56, a2, v234);
      if ((_DWORD)result)
        goto LABEL_466;
      break;
    case 0x12Fu:
      if (v9 != 122)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 303)
      {
        v57 = (CoreML::Specification::NeuralNetworkRegressor *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 303;
        v57 = (CoreML::Specification::NeuralNetworkRegressor *)operator new();
        CoreML::Specification::NeuralNetworkRegressor::NeuralNetworkRegressor(v57);
        *((_QWORD *)this + 4) = v57;
      }
      v136 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v136 < 0)
      {
        v137 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v137 < 0)
          return 0;
      }
      else
      {
        v137 = *v136;
        *(_QWORD *)a2 = v136 + 1;
      }
      v250 = google::protobuf::io::CodedInputStream::PushLimit(a2, v137);
      v252 = *((_DWORD *)a2 + 13);
      v122 = __OFSUB__(v252--, 1);
      *((_DWORD *)a2 + 13) = v252;
      if (v252 < 0 != v122)
        return 0;
      v123 = v250;
      result = CoreML::Specification::NeuralNetworkRegressor::MergePartialFromCodedStream(v57, a2, v251);
      if ((_DWORD)result)
        goto LABEL_466;
      break;
    case 0x130u:
      if (v9 != 130)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 304)
      {
        v58 = (CoreML::Specification::BayesianProbitRegressor *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 304;
        v58 = (CoreML::Specification::BayesianProbitRegressor *)operator new();
        CoreML::Specification::BayesianProbitRegressor::BayesianProbitRegressor(v58);
        *((_QWORD *)this + 4) = v58;
      }
      v138 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v138 < 0)
      {
        v139 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v139 < 0)
          return 0;
      }
      else
      {
        v139 = *v138;
        *(_QWORD *)a2 = v138 + 1;
      }
      v236 = google::protobuf::io::CodedInputStream::PushLimit(a2, v139);
      v238 = *((_DWORD *)a2 + 13);
      v122 = __OFSUB__(v238--, 1);
      *((_DWORD *)a2 + 13) = v238;
      if (v238 < 0 != v122)
        return 0;
      v123 = v236;
      result = CoreML::Specification::BayesianProbitRegressor::MergePartialFromCodedStream(v58, a2, v237);
      if ((_DWORD)result)
        goto LABEL_466;
      break;
    default:
      if (v13 == 201)
      {
        if (v9 != 74)
          goto LABEL_8;
        if (*((_DWORD *)this + 11) == 201)
        {
          v59 = (CoreML::Specification::PipelineRegressor *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 201;
          v59 = (CoreML::Specification::PipelineRegressor *)operator new();
          CoreML::Specification::PipelineRegressor::PipelineRegressor(v59);
          *((_QWORD *)this + 4) = v59;
        }
        v140 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v140 < 0)
        {
          v141 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v141 < 0)
            return 0;
        }
        else
        {
          v141 = *v140;
          *(_QWORD *)a2 = v140 + 1;
        }
        v239 = google::protobuf::io::CodedInputStream::PushLimit(a2, v141);
        v241 = *((_DWORD *)a2 + 13);
        v122 = __OFSUB__(v241--, 1);
        *((_DWORD *)a2 + 13) = v241;
        if (v241 < 0 != v122)
          return 0;
        v123 = v239;
        result = CoreML::Specification::PipelineRegressor::MergePartialFromCodedStream(v59, a2, v240);
        if ((_DWORD)result)
          goto LABEL_466;
      }
      else
      {
        if (v13 != 202 || v9 != 82)
          goto LABEL_8;
        if (*((_DWORD *)this + 11) == 202)
        {
          v26 = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 202;
          v26 = (CoreML::Specification::Pipeline *)operator new();
          CoreML::Specification::Pipeline::Pipeline(v26);
          *((_QWORD *)this + 4) = v26;
        }
        v130 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v130 < 0)
        {
          v131 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v131 < 0)
            return 0;
        }
        else
        {
          v131 = *v130;
          *(_QWORD *)a2 = v130 + 1;
        }
        v245 = google::protobuf::io::CodedInputStream::PushLimit(a2, v131);
        v246 = *((_DWORD *)a2 + 13);
        v122 = __OFSUB__(v246--, 1);
        *((_DWORD *)a2 + 13) = v246;
        if (v246 < 0 != v122)
          return 0;
        v123 = v245;
        result = CoreML::Specification::Pipeline::MergePartialFromCodedStream(v26, a2);
        if ((_DWORD)result)
          goto LABEL_466;
      }
      break;
  }
  return result;
}

void sub_19C99F268(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Model::clear_Type(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 44);
  if (v2 > 559)
  {
    if (v2 > 899)
    {
      switch(v2)
      {
        case 2000:
        case 2001:
        case 2002:
        case 2003:
        case 2004:
        case 2005:
        case 2006:
          goto LABEL_10;
        default:
          if (v2 == 900 || v2 == 3000)
            goto LABEL_10;
          break;
      }
    }
    else
    {
      switch(v2)
      {
        case 600:
        case 601:
        case 602:
        case 603:
        case 604:
        case 606:
        case 607:
        case 609:
        case 610:
          goto LABEL_10;
        case 605:
        case 608:
          goto LABEL_12;
        default:
          if (v2 == 560)
            goto LABEL_10;
          break;
      }
    }
    goto LABEL_12;
  }
  if (v2 > 399)
  {
    if (v2 <= 499)
    {
      switch(v2)
      {
        case 400:
        case 401:
        case 402:
        case 403:
        case 404:
          goto LABEL_10;
        default:
          goto LABEL_12;
      }
      goto LABEL_12;
    }
    if (v2 > 502 && v2 != 555 && v2 != 556)
      goto LABEL_12;
LABEL_10:
    this = *(_QWORD *)(this + 32);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    goto LABEL_12;
  }
  if (v2 <= 299)
  {
    if (v2 != 200 && v2 != 201 && v2 != 202)
      goto LABEL_12;
    goto LABEL_10;
  }
  switch(v2)
  {
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
      goto LABEL_10;
    default:
      break;
  }
LABEL_12:
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

CoreML::Specification::PipelineClassifier *CoreML::Specification::PipelineClassifier::PipelineClassifier(CoreML::Specification::PipelineClassifier *this)
{
  *(_QWORD *)this = &off_1E3D51710;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_19C99F6D0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::PipelineClassifier::MergePartialFromCodedStream(CoreML::Specification::PipelineClassifier *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::Pipeline *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 2);
      if (!v11)
      {
        v11 = (CoreML::Specification::Pipeline *)operator new();
        CoreML::Specification::Pipeline::Pipeline(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v15 = *((_DWORD *)a2 + 13);
      v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        v17 = v14;
        result = CoreML::Specification::Pipeline::MergePartialFromCodedStream(v11, a2);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C99F83C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

CoreML::Specification::PipelineRegressor *CoreML::Specification::PipelineRegressor::PipelineRegressor(CoreML::Specification::PipelineRegressor *this)
{
  *(_QWORD *)this = &off_1E3D50D90;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_19C99F8B0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::PipelineRegressor::MergePartialFromCodedStream(CoreML::Specification::PipelineRegressor *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::Pipeline *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 2);
      if (!v11)
      {
        v11 = (CoreML::Specification::Pipeline *)operator new();
        CoreML::Specification::Pipeline::Pipeline(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v15 = *((_DWORD *)a2 + 13);
      v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        v17 = v14;
        result = CoreML::Specification::Pipeline::MergePartialFromCodedStream(v11, a2);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C99FA1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

CoreML::Specification::Pipeline *CoreML::Specification::Pipeline::Pipeline(CoreML::Specification::Pipeline *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_QWORD *)this = &off_1E3D591F8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 7) = 0;
  if (this != (CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_19C99FAAC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v2);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::SerializedModel *CoreML::Specification::SerializedModel::SerializedModel(CoreML::Specification::SerializedModel *this)
{
  *(_QWORD *)this = &off_1E3D4F5D0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::SerializedModel *)&CoreML::Specification::_SerializedModel_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_19C99FB2C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SerializedModel::MergePartialFromCodedStream(CoreML::Specification::SerializedModel *this, char **a2, unsigned int a3)
{
  std::string **v4;
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  std::string *v11;
  uint64_t result;
  unsigned int *v13;
  std::string::size_type size;
  std::string *v15;

  v4 = (std::string **)((char *)this + 24);
  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_24;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_24;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 18)
          goto LABEL_24;
        v15 = *v4;
        if (*v4 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v4;
        }
        if ((google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v15) & 1) == 0)
          return 0;
      }
      if (v8 >> 3 != 1 || v8 != 10)
        break;
      v11 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v11);
      if (!(_DWORD)result)
        return result;
      v13 = (unsigned int *)*v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = *(unsigned int **)v13;
        size = (*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, size, 0, (uint64_t)"CoreML.Specification.SerializedModel.identifier"))return 0;
    }
LABEL_24:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

void CoreML::Specification::Model::~Model(CoreML::Specification::Model *this)
{
  CoreML::Specification::Model::~Model(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E3D57AD0;
  if (this != (CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*((_DWORD *)this + 11))
    CoreML::Specification::Model::clear_Type((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::Model::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Model");
}

CoreML::Specification::Model *CoreML::Specification::Model::New(CoreML::Specification::Model *this)
{
  return CoreML::Specification::Model::New(this, 0);
}

CoreML::Specification::Model *CoreML::Specification::Model::New(CoreML::Specification::Model *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Model *v3;

  v3 = (CoreML::Specification::Model *)operator new();
  CoreML::Specification::Model::Model(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Model>(a2, v3);
  return v3;
}

void sub_19C99FD38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4065E65A88);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Model::Clear(CoreML::Specification::Model *this)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)((char *)this + 16);
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)((char *)v3 + 5) = 0;
  *v3 = 0;
  return CoreML::Specification::Model::clear_Type((uint64_t)this);
}

uint64_t CoreML::Specification::Model::IsInitialized(CoreML::Specification::Model *this)
{
  return 1;
}

uint64_t CoreML::Specification::Model::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  signed int v6;
  uint64_t v7;
  int v8;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
    this = google::protobuf::internal::WireFormatLite::WriteInt32(1, v6, a2, a4);
  if ((_UNKNOWN *)v5 != &CoreML::Specification::_Model_default_instance_)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  if (*(_BYTE *)(v5 + 28))
    this = google::protobuf::internal::WireFormatLite::WriteBool(10, 1u, a2, a4);
  v8 = *(_DWORD *)(v5 + 44);
  if (v8 == 200)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xC8, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 201)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xC9, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 202)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xCA, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 300)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x12C, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 301)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x12D, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 302)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x12E, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 303)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x12F, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 304)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x130, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 400)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x190, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 401)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x191, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 402)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x192, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 403)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x193, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 404)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x194, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 500)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x1F4, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 501)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x1F5, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 502)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x1F6, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 555)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x22B, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 556)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x22C, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 560)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x230, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 600)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x258, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 601)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x259, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 602)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x25A, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 603)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x25B, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 604)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x25C, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 606)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x25E, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 607)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x25F, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 609)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x261, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 610)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x262, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 900)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x384, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2000)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D0, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2001)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D1, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2002)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D2, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2003)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D3, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2004)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D4, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2005)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D5, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2006)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D6, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 3000)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xBB8, *(_QWORD *)(v5 + 32), a2, a4);
  return this;
}

uint64_t CoreML::Specification::Model::GetCachedSize(CoreML::Specification::Model *this)
{
  return *((unsigned int *)this + 10);
}

void CoreML::Specification::Model::MergeFrom(CoreML::Specification::Model *this, const CoreML::Specification::Model *a2)
{
  uint64_t v4;
  const CoreML::Specification::ModelDescription *v5;
  CoreML::Specification::ModelDescription *v7;
  const CoreML::Specification::ModelDescription *v8;
  int v9;
  int v10;
  CoreML::Specification::OneHotEncoder *v11;
  CoreML::Specification::GLMClassifier *v12;
  CoreML::Specification::CoreMLModels::TextClassifier *v13;
  CoreML::Specification::GLMRegressor *v14;
  CoreML::Specification::LinkedModel *v15;
  CoreML::Specification::Pipeline *v16;
  CoreML::Specification::SerializedModel *v17;
  CoreML::Specification::ItemSimilarityRecommender *v18;
  CoreML::Specification::ClassConfidenceThresholding *v19;
  CoreML::Specification::Imputer *v20;
  CoreML::Specification::FeatureVectorizer *v21;
  CoreML::Specification::DictVectorizer *v22;
  CoreML::Specification::Scaler *v23;
  CoreML::Specification::CategoricalMapping *v24;
  uint64_t v25;
  CoreML::Specification::ArrayFeatureExtractor *v26;
  CoreML::Specification::NonMaximumSuppression *v27;
  CoreML::Specification::SupportVectorClassifier *v28;
  CoreML::Specification::TreeEnsembleClassifier *v29;
  CoreML::Specification::NeuralNetworkClassifier *v30;
  CoreML::Specification::KNearestNeighborsClassifier *v31;
  CoreML::Specification::CoreMLModels::WordTagger *v32;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint *v33;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *v34;
  CoreML::Specification::CoreMLModels::Gazetteer *v35;
  CoreML::Specification::CoreMLModels::WordEmbedding *v36;
  CoreML::Specification::CoreMLModels::AudioFeaturePrint *v37;
  CoreML::Specification::SupportVectorRegressor *v38;
  CoreML::Specification::TreeEnsembleRegressor *v39;
  CoreML::Specification::NeuralNetworkRegressor *v40;
  CoreML::Specification::BayesianProbitRegressor *v41;
  CoreML::Specification::MILSpec::Program *v42;
  CoreML::Specification::CustomModel *v43;
  CoreML::Specification::PipelineClassifier *v44;
  CoreML::Specification::PipelineRegressor *v45;
  uint64_t *v46;
  CoreML::Specification::NeuralNetwork *v47;
  CoreML::Specification::protobuf_OneHotEncoder_2eproto *v48;
  const CoreML::Specification::OneHotEncoder *v49;
  CoreML::Specification::protobuf_Imputer_2eproto *v50;
  const CoreML::Specification::Imputer *v51;
  CoreML::Specification::protobuf_FeatureVectorizer_2eproto *v52;
  const CoreML::Specification::FeatureVectorizer *v53;
  CoreML::Specification::protobuf_DictVectorizer_2eproto *v54;
  const CoreML::Specification::DictVectorizer *v55;
  CoreML::Specification::protobuf_Scaler_2eproto *v56;
  const CoreML::Specification::Scaler *v57;
  CoreML::Specification::protobuf_CategoricalMapping_2eproto *v58;
  const CoreML::Specification::CategoricalMapping *v59;
  CoreML::Specification::protobuf_Normalizer_2eproto *v60;
  uint64_t *v61;
  CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto *v62;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v63;
  CoreML::Specification::protobuf_NonMaximumSuppression_2eproto *v64;
  const CoreML::Specification::NonMaximumSuppression *v65;
  CoreML::Specification::protobuf_GLMClassifier_2eproto *v66;
  const CoreML::Specification::GLMClassifier *v67;
  CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto *v68;
  const CoreML::Specification::CoreMLModels::TextClassifier *v69;
  CoreML::Specification::protobuf_GLMRegressor_2eproto *v70;
  const CoreML::Specification::GLMRegressor *v71;
  CoreML::Specification::protobuf_LinkedModel_2eproto *v72;
  const CoreML::Specification::LinkedModel *v73;
  CoreML::Specification::Pipeline *v74;
  const CoreML::Specification::Pipeline *v75;
  CoreML::Specification::SerializedModel *v76;
  const CoreML::Specification::SerializedModel *v77;
  CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto *v78;
  const CoreML::Specification::ItemSimilarityRecommender *v79;
  CoreML::Specification::protobuf_SVM_2eproto *v80;
  const CoreML::Specification::SupportVectorClassifier *v81;
  CoreML::Specification::protobuf_TreeEnsemble_2eproto *v82;
  const CoreML::Specification::TreeEnsembleClassifier *v83;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v84;
  const CoreML::Specification::NeuralNetworkClassifier *v85;
  CoreML::Specification::protobuf_NearestNeighbors_2eproto *v86;
  const CoreML::Specification::KNearestNeighborsClassifier *v87;
  CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto *v88;
  const CoreML::Specification::CoreMLModels::WordTagger *v89;
  CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto *v90;
  const CoreML::Specification::CoreMLModels::VisionFeaturePrint *v91;
  CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto *v92;
  const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *v93;
  CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto *v94;
  const CoreML::Specification::CoreMLModels::Gazetteer *v95;
  CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto *v96;
  const CoreML::Specification::CoreMLModels::WordEmbedding *v97;
  CoreML::Specification::CoreMLModels::AudioFeaturePrint *v98;
  const CoreML::Specification::CoreMLModels::AudioFeaturePrint *v99;
  CoreML::Specification::protobuf_SVM_2eproto *v100;
  const CoreML::Specification::SupportVectorRegressor *v101;
  CoreML::Specification::protobuf_TreeEnsemble_2eproto *v102;
  const CoreML::Specification::TreeEnsembleRegressor *v103;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v104;
  const CoreML::Specification::NeuralNetworkRegressor *v105;
  CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto *v106;
  const CoreML::Specification::BayesianProbitRegressor *v107;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v108;
  const CoreML::Specification::MILSpec::Program *v109;
  CoreML::Specification::protobuf_CustomModel_2eproto *v110;
  const CoreML::Specification::CustomModel *v111;
  CoreML::Specification::PipelineClassifier *v112;
  const CoreML::Specification::PipelineClassifier *v113;
  CoreML::Specification::PipelineRegressor *v114;
  const CoreML::Specification::PipelineRegressor *v115;
  CoreML::Specification::protobuf_Identity_2eproto *v116;
  uint64_t *v117;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v118;
  const CoreML::Specification::NeuralNetwork *v119;
  CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto *v120;
  const CoreML::Specification::ClassConfidenceThresholding *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::ModelDescription *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_ && v5 != 0)
  {
    v7 = (CoreML::Specification::ModelDescription *)*((_QWORD *)this + 2);
    if (!v7)
    {
      v7 = (CoreML::Specification::ModelDescription *)operator new();
      CoreML::Specification::ModelDescription::ModelDescription(v7);
      *((_QWORD *)this + 2) = v7;
      v5 = (const CoreML::Specification::ModelDescription *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_;
    CoreML::Specification::ModelDescription::MergeFrom(v7, v8);
  }
  v9 = *((_DWORD *)a2 + 6);
  if (v9)
    *((_DWORD *)this + 6) = v9;
  if (*((_BYTE *)a2 + 28))
    *((_BYTE *)this + 28) = 1;
  v10 = *((_DWORD *)a2 + 11);
  if (v10 > 559)
  {
    if (v10 <= 899)
    {
      switch(v10)
      {
        case 600:
          if (*((_DWORD *)this + 11) == 600)
          {
            v11 = (CoreML::Specification::OneHotEncoder *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 600;
            v11 = (CoreML::Specification::OneHotEncoder *)operator new();
            v48 = CoreML::Specification::OneHotEncoder::OneHotEncoder(v11);
            *((_QWORD *)this + 4) = v11;
            if (*((_DWORD *)a2 + 11) != 600)
            {
              CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults(v48);
              v49 = (const CoreML::Specification::OneHotEncoder *)&CoreML::Specification::_OneHotEncoder_default_instance_;
              goto LABEL_186;
            }
          }
          v49 = (const CoreML::Specification::OneHotEncoder *)*((_QWORD *)a2 + 4);
LABEL_186:
          CoreML::Specification::OneHotEncoder::MergeFrom((std::string *)v11, v49);
          return;
        case 601:
          if (*((_DWORD *)this + 11) == 601)
          {
            v20 = (CoreML::Specification::Imputer *)*((_QWORD *)this + 4);
LABEL_114:
            v51 = (const CoreML::Specification::Imputer *)*((_QWORD *)a2 + 4);
            goto LABEL_188;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 601;
          v20 = (CoreML::Specification::Imputer *)operator new();
          v50 = CoreML::Specification::Imputer::Imputer(v20);
          *((_QWORD *)this + 4) = v20;
          if (*((_DWORD *)a2 + 11) == 601)
            goto LABEL_114;
          CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(v50);
          v51 = (const CoreML::Specification::Imputer *)&CoreML::Specification::_Imputer_default_instance_;
LABEL_188:
          CoreML::Specification::Imputer::MergeFrom(v20, v51);
          return;
        case 602:
          if (*((_DWORD *)this + 11) == 602)
          {
            v21 = (CoreML::Specification::FeatureVectorizer *)*((_QWORD *)this + 4);
LABEL_116:
            v53 = (const CoreML::Specification::FeatureVectorizer *)*((_QWORD *)a2 + 4);
            goto LABEL_190;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 602;
          v21 = (CoreML::Specification::FeatureVectorizer *)operator new();
          v52 = CoreML::Specification::FeatureVectorizer::FeatureVectorizer(v21);
          *((_QWORD *)this + 4) = v21;
          if (*((_DWORD *)a2 + 11) == 602)
            goto LABEL_116;
          CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults(v52);
          v53 = (const CoreML::Specification::FeatureVectorizer *)&CoreML::Specification::_FeatureVectorizer_default_instance_;
LABEL_190:
          CoreML::Specification::FeatureVectorizer::MergeFrom(v21, v53);
          return;
        case 603:
          if (*((_DWORD *)this + 11) == 603)
          {
            v22 = (CoreML::Specification::DictVectorizer *)*((_QWORD *)this + 4);
LABEL_118:
            v55 = (const CoreML::Specification::DictVectorizer *)*((_QWORD *)a2 + 4);
            goto LABEL_192;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 603;
          v22 = (CoreML::Specification::DictVectorizer *)operator new();
          v54 = CoreML::Specification::DictVectorizer::DictVectorizer(v22);
          *((_QWORD *)this + 4) = v22;
          if (*((_DWORD *)a2 + 11) == 603)
            goto LABEL_118;
          CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(v54);
          v55 = (const CoreML::Specification::DictVectorizer *)&CoreML::Specification::_DictVectorizer_default_instance_;
LABEL_192:
          CoreML::Specification::DictVectorizer::MergeFrom((std::string *)v22, v55);
          return;
        case 604:
          if (*((_DWORD *)this + 11) == 604)
          {
            v23 = (CoreML::Specification::Scaler *)*((_QWORD *)this + 4);
LABEL_120:
            v57 = (const CoreML::Specification::Scaler *)*((_QWORD *)a2 + 4);
            goto LABEL_194;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 604;
          v23 = (CoreML::Specification::Scaler *)operator new();
          v56 = CoreML::Specification::Scaler::Scaler(v23);
          *((_QWORD *)this + 4) = v23;
          if (*((_DWORD *)a2 + 11) == 604)
            goto LABEL_120;
          CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(v56);
          v57 = (const CoreML::Specification::Scaler *)&CoreML::Specification::_Scaler_default_instance_;
LABEL_194:
          CoreML::Specification::Scaler::MergeFrom((uint64_t *)v23, v57);
          return;
        case 605:
        case 608:
          return;
        case 606:
          if (*((_DWORD *)this + 11) == 606)
          {
            v24 = (CoreML::Specification::CategoricalMapping *)*((_QWORD *)this + 4);
LABEL_122:
            v59 = (const CoreML::Specification::CategoricalMapping *)*((_QWORD *)a2 + 4);
            goto LABEL_196;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 606;
          v24 = (CoreML::Specification::CategoricalMapping *)operator new();
          v58 = CoreML::Specification::CategoricalMapping::CategoricalMapping(v24);
          *((_QWORD *)this + 4) = v24;
          if (*((_DWORD *)a2 + 11) == 606)
            goto LABEL_122;
          CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(v58);
          v59 = (const CoreML::Specification::CategoricalMapping *)&CoreML::Specification::_CategoricalMapping_default_instance_;
LABEL_196:
          CoreML::Specification::CategoricalMapping::MergeFrom(v24, v59);
          return;
        case 607:
          if (*((_DWORD *)this + 11) == 607)
          {
            v25 = *((_QWORD *)this + 4);
LABEL_124:
            v61 = (uint64_t *)*((_QWORD *)a2 + 4);
            goto LABEL_198;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 607;
          v25 = operator new();
          v60 = CoreML::Specification::Normalizer::Normalizer((CoreML::Specification::Normalizer *)v25);
          *((_QWORD *)this + 4) = v25;
          if (*((_DWORD *)a2 + 11) == 607)
            goto LABEL_124;
          CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(v60);
          v61 = &CoreML::Specification::_Normalizer_default_instance_;
LABEL_198:
          v122 = v61[1];
          if ((v122 & 1) != 0)
            google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v25 + 8), v122 & 0xFFFFFFFFFFFFFFFELL);
          v123 = *((_DWORD *)v61 + 4);
          if (v123)
            *(_DWORD *)(v25 + 16) = v123;
          return;
        case 609:
          if (*((_DWORD *)this + 11) == 609)
          {
            v26 = (CoreML::Specification::ArrayFeatureExtractor *)*((_QWORD *)this + 4);
LABEL_126:
            v63 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)a2 + 4);
            goto LABEL_203;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 609;
          v26 = (CoreML::Specification::ArrayFeatureExtractor *)operator new();
          v62 = CoreML::Specification::ArrayFeatureExtractor::ArrayFeatureExtractor(v26);
          *((_QWORD *)this + 4) = v26;
          if (*((_DWORD *)a2 + 11) == 609)
            goto LABEL_126;
          CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults(v62);
          v63 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&CoreML::Specification::_ArrayFeatureExtractor_default_instance_;
LABEL_203:
          CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v26, v63);
          return;
        case 610:
          if (*((_DWORD *)this + 11) == 610)
          {
            v27 = (CoreML::Specification::NonMaximumSuppression *)*((_QWORD *)this + 4);
LABEL_128:
            v65 = (const CoreML::Specification::NonMaximumSuppression *)*((_QWORD *)a2 + 4);
            goto LABEL_205;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 610;
          v27 = (CoreML::Specification::NonMaximumSuppression *)operator new();
          v64 = CoreML::Specification::NonMaximumSuppression::NonMaximumSuppression(v27);
          *((_QWORD *)this + 4) = v27;
          if (*((_DWORD *)a2 + 11) == 610)
            goto LABEL_128;
          CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(v64);
          v65 = (const CoreML::Specification::NonMaximumSuppression *)&CoreML::Specification::_NonMaximumSuppression_default_instance_;
LABEL_205:
          CoreML::Specification::NonMaximumSuppression::MergeFrom(v27, v65);
          return;
        default:
          if (v10 != 560)
            return;
          if (*((_DWORD *)this + 11) == 560)
          {
            v19 = (CoreML::Specification::ClassConfidenceThresholding *)*((_QWORD *)this + 4);
LABEL_184:
            v121 = (const CoreML::Specification::ClassConfidenceThresholding *)*((_QWORD *)a2 + 4);
            goto LABEL_263;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 560;
          v19 = (CoreML::Specification::ClassConfidenceThresholding *)operator new();
          v120 = CoreML::Specification::ClassConfidenceThresholding::ClassConfidenceThresholding(v19);
          *((_QWORD *)this + 4) = v19;
          if (*((_DWORD *)a2 + 11) == 560)
            goto LABEL_184;
          CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults(v120);
          v121 = (const CoreML::Specification::ClassConfidenceThresholding *)&CoreML::Specification::_ClassConfidenceThresholding_default_instance_;
LABEL_263:
          CoreML::Specification::ClassConfidenceThresholding::MergeFrom((std::string *)v19, v121);
          break;
      }
      return;
    }
    switch(v10)
    {
      case 2000:
        if (*((_DWORD *)this + 11) == 2000)
        {
          v13 = (CoreML::Specification::CoreMLModels::TextClassifier *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2000;
          v13 = (CoreML::Specification::CoreMLModels::TextClassifier *)operator new();
          v68 = CoreML::Specification::CoreMLModels::TextClassifier::TextClassifier(v13);
          *((_QWORD *)this + 4) = v13;
          if (*((_DWORD *)a2 + 11) != 2000)
          {
            CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(v68);
            v69 = (const CoreML::Specification::CoreMLModels::TextClassifier *)&CoreML::Specification::CoreMLModels::_TextClassifier_default_instance_;
            goto LABEL_209;
          }
        }
        v69 = (const CoreML::Specification::CoreMLModels::TextClassifier *)*((_QWORD *)a2 + 4);
LABEL_209:
        CoreML::Specification::CoreMLModels::TextClassifier::MergeFrom(v13, v69);
        return;
      case 2001:
        if (*((_DWORD *)this + 11) == 2001)
        {
          v32 = (CoreML::Specification::CoreMLModels::WordTagger *)*((_QWORD *)this + 4);
LABEL_152:
          v89 = (const CoreML::Specification::CoreMLModels::WordTagger *)*((_QWORD *)a2 + 4);
          goto LABEL_229;
        }
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2001;
        v32 = (CoreML::Specification::CoreMLModels::WordTagger *)operator new();
        v88 = CoreML::Specification::CoreMLModels::WordTagger::WordTagger(v32);
        *((_QWORD *)this + 4) = v32;
        if (*((_DWORD *)a2 + 11) == 2001)
          goto LABEL_152;
        CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(v88);
        v89 = (const CoreML::Specification::CoreMLModels::WordTagger *)&CoreML::Specification::CoreMLModels::_WordTagger_default_instance_;
LABEL_229:
        CoreML::Specification::CoreMLModels::WordTagger::MergeFrom(v32, v89);
        return;
      case 2002:
        if (*((_DWORD *)this + 11) == 2002)
        {
          v33 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)*((_QWORD *)this + 4);
LABEL_154:
          v91 = (const CoreML::Specification::CoreMLModels::VisionFeaturePrint *)*((_QWORD *)a2 + 4);
          goto LABEL_231;
        }
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2002;
        v33 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)operator new();
        v90 = CoreML::Specification::CoreMLModels::VisionFeaturePrint::VisionFeaturePrint(v33);
        *((_QWORD *)this + 4) = v33;
        if (*((_DWORD *)a2 + 11) == 2002)
          goto LABEL_154;
        CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(v90);
        v91 = (const CoreML::Specification::CoreMLModels::VisionFeaturePrint *)&CoreML::Specification::CoreMLModels::_VisionFeaturePrint_default_instance_;
LABEL_231:
        CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergeFrom((std::string *)v33, v91);
        return;
      case 2003:
        if (*((_DWORD *)this + 11) == 2003)
        {
          v34 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)*((_QWORD *)this + 4);
LABEL_156:
          v93 = (const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)*((_QWORD *)a2 + 4);
          goto LABEL_233;
        }
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2003;
        v34 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)operator new();
        v92 = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SoundAnalysisPreprocessing(v34);
        *((_QWORD *)this + 4) = v34;
        if (*((_DWORD *)a2 + 11) == 2003)
          goto LABEL_156;
        CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(v92);
        v93 = (const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)&CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_default_instance_;
LABEL_233:
        CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergeFrom((std::string *)v34, v93);
        return;
      case 2004:
        if (*((_DWORD *)this + 11) == 2004)
        {
          v35 = (CoreML::Specification::CoreMLModels::Gazetteer *)*((_QWORD *)this + 4);
LABEL_158:
          v95 = (const CoreML::Specification::CoreMLModels::Gazetteer *)*((_QWORD *)a2 + 4);
          goto LABEL_235;
        }
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2004;
        v35 = (CoreML::Specification::CoreMLModels::Gazetteer *)operator new();
        v94 = CoreML::Specification::CoreMLModels::Gazetteer::Gazetteer(v35);
        *((_QWORD *)this + 4) = v35;
        if (*((_DWORD *)a2 + 11) == 2004)
          goto LABEL_158;
        CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(v94);
        v95 = (const CoreML::Specification::CoreMLModels::Gazetteer *)&CoreML::Specification::CoreMLModels::_Gazetteer_default_instance_;
LABEL_235:
        CoreML::Specification::CoreMLModels::Gazetteer::MergeFrom(v35, v95);
        return;
      case 2005:
        if (*((_DWORD *)this + 11) == 2005)
        {
          v36 = (CoreML::Specification::CoreMLModels::WordEmbedding *)*((_QWORD *)this + 4);
LABEL_160:
          v97 = (const CoreML::Specification::CoreMLModels::WordEmbedding *)*((_QWORD *)a2 + 4);
          goto LABEL_237;
        }
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2005;
        v36 = (CoreML::Specification::CoreMLModels::WordEmbedding *)operator new();
        v96 = CoreML::Specification::CoreMLModels::WordEmbedding::WordEmbedding(v36);
        *((_QWORD *)this + 4) = v36;
        if (*((_DWORD *)a2 + 11) == 2005)
          goto LABEL_160;
        CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults(v96);
        v97 = (const CoreML::Specification::CoreMLModels::WordEmbedding *)&CoreML::Specification::CoreMLModels::_WordEmbedding_default_instance_;
LABEL_237:
        CoreML::Specification::CoreMLModels::WordEmbedding::MergeFrom(v36, v97);
        return;
      case 2006:
        if (*((_DWORD *)this + 11) == 2006)
        {
          v37 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)*((_QWORD *)this + 4);
LABEL_162:
          v99 = (const CoreML::Specification::CoreMLModels::AudioFeaturePrint *)*((_QWORD *)a2 + 4);
          goto LABEL_239;
        }
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2006;
        v37 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)operator new();
        v98 = CoreML::Specification::CoreMLModels::AudioFeaturePrint::AudioFeaturePrint(v37);
        *((_QWORD *)this + 4) = v37;
        if (*((_DWORD *)a2 + 11) == 2006)
          goto LABEL_162;
        CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(v98);
        v99 = (const CoreML::Specification::CoreMLModels::AudioFeaturePrint *)&CoreML::Specification::CoreMLModels::_AudioFeaturePrint_default_instance_;
LABEL_239:
        CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergeFrom((uint64_t *)v37, v99);
        return;
      default:
        if (v10 != 900)
        {
          if (v10 != 3000)
            return;
          if (*((_DWORD *)this + 11) == 3000)
          {
            v17 = (CoreML::Specification::SerializedModel *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 3000;
            v17 = (CoreML::Specification::SerializedModel *)operator new();
            v76 = CoreML::Specification::SerializedModel::SerializedModel(v17);
            *((_QWORD *)this + 4) = v17;
            if (*((_DWORD *)a2 + 11) != 3000)
            {
              CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v76);
              v77 = (const CoreML::Specification::SerializedModel *)&CoreML::Specification::_SerializedModel_default_instance_;
              goto LABEL_217;
            }
          }
          v77 = (const CoreML::Specification::SerializedModel *)*((_QWORD *)a2 + 4);
LABEL_217:
          CoreML::Specification::SerializedModel::MergeFrom(v17, v77);
          return;
        }
        if (*((_DWORD *)this + 11) == 900)
        {
          v46 = (uint64_t *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 900;
          v46 = (uint64_t *)operator new();
          v116 = CoreML::Specification::Identity::Identity((CoreML::Specification::Identity *)v46);
          *((_QWORD *)this + 4) = v46;
          if (*((_DWORD *)a2 + 11) != 900)
          {
            CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(v116);
            v117 = &CoreML::Specification::_Identity_default_instance_;
LABEL_257:
            v124 = v117[1];
            if ((v124 & 1) != 0)
              google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v46 + 1, v124 & 0xFFFFFFFFFFFFFFFELL);
            return;
          }
        }
        v117 = (uint64_t *)*((_QWORD *)a2 + 4);
        goto LABEL_257;
    }
  }
  if (v10 <= 399)
  {
    if (v10 > 299)
    {
      switch(v10)
      {
        case 300:
          if (*((_DWORD *)this + 11) == 300)
          {
            v14 = (CoreML::Specification::GLMRegressor *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 300;
            v14 = (CoreML::Specification::GLMRegressor *)operator new();
            v70 = CoreML::Specification::GLMRegressor::GLMRegressor(v14);
            *((_QWORD *)this + 4) = v14;
            if (*((_DWORD *)a2 + 11) != 300)
            {
              CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(v70);
              v71 = (const CoreML::Specification::GLMRegressor *)&CoreML::Specification::_GLMRegressor_default_instance_;
              goto LABEL_211;
            }
          }
          v71 = (const CoreML::Specification::GLMRegressor *)*((_QWORD *)a2 + 4);
LABEL_211:
          CoreML::Specification::GLMRegressor::MergeFrom((uint64_t *)v14, v71);
          return;
        case 301:
          if (*((_DWORD *)this + 11) == 301)
          {
            v38 = (CoreML::Specification::SupportVectorRegressor *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 301;
            v38 = (CoreML::Specification::SupportVectorRegressor *)operator new();
            v100 = CoreML::Specification::SupportVectorRegressor::SupportVectorRegressor(v38);
            *((_QWORD *)this + 4) = v38;
            if (*((_DWORD *)a2 + 11) != 301)
            {
              CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v100);
              v101 = (const CoreML::Specification::SupportVectorRegressor *)&CoreML::Specification::_SupportVectorRegressor_default_instance_;
LABEL_241:
              CoreML::Specification::SupportVectorRegressor::MergeFrom((std::string *)v38, v101);
              return;
            }
          }
          v101 = (const CoreML::Specification::SupportVectorRegressor *)*((_QWORD *)a2 + 4);
          goto LABEL_241;
        case 302:
          if (*((_DWORD *)this + 11) == 302)
          {
            v39 = (CoreML::Specification::TreeEnsembleRegressor *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 302;
            v39 = (CoreML::Specification::TreeEnsembleRegressor *)operator new();
            v102 = CoreML::Specification::TreeEnsembleRegressor::TreeEnsembleRegressor(v39);
            *((_QWORD *)this + 4) = v39;
            if (*((_DWORD *)a2 + 11) != 302)
            {
              CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(v102);
              v103 = (const CoreML::Specification::TreeEnsembleRegressor *)&CoreML::Specification::_TreeEnsembleRegressor_default_instance_;
LABEL_243:
              CoreML::Specification::TreeEnsembleRegressor::MergeFrom((std::string *)v39, v103);
              return;
            }
          }
          v103 = (const CoreML::Specification::TreeEnsembleRegressor *)*((_QWORD *)a2 + 4);
          goto LABEL_243;
        case 303:
          if (*((_DWORD *)this + 11) == 303)
          {
            v40 = (CoreML::Specification::NeuralNetworkRegressor *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 303;
            v40 = (CoreML::Specification::NeuralNetworkRegressor *)operator new();
            v104 = CoreML::Specification::NeuralNetworkRegressor::NeuralNetworkRegressor(v40);
            *((_QWORD *)this + 4) = v40;
            if (*((_DWORD *)a2 + 11) != 303)
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v104);
              v105 = (const CoreML::Specification::NeuralNetworkRegressor *)&CoreML::Specification::_NeuralNetworkRegressor_default_instance_;
LABEL_245:
              CoreML::Specification::NeuralNetworkRegressor::MergeFrom(v40, v105);
              return;
            }
          }
          v105 = (const CoreML::Specification::NeuralNetworkRegressor *)*((_QWORD *)a2 + 4);
          goto LABEL_245;
        case 304:
          if (*((_DWORD *)this + 11) == 304)
          {
            v41 = (CoreML::Specification::BayesianProbitRegressor *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 304;
            v41 = (CoreML::Specification::BayesianProbitRegressor *)operator new();
            v106 = CoreML::Specification::BayesianProbitRegressor::BayesianProbitRegressor(v41);
            *((_QWORD *)this + 4) = v41;
            if (*((_DWORD *)a2 + 11) != 304)
            {
              CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(v106);
              v107 = (const CoreML::Specification::BayesianProbitRegressor *)&CoreML::Specification::_BayesianProbitRegressor_default_instance_;
LABEL_247:
              CoreML::Specification::BayesianProbitRegressor::MergeFrom(v41, v107);
              return;
            }
          }
          v107 = (const CoreML::Specification::BayesianProbitRegressor *)*((_QWORD *)a2 + 4);
          goto LABEL_247;
        default:
          return;
      }
    }
    if (v10 != 200)
    {
      if (v10 != 201)
      {
        if (v10 != 202)
          return;
        if (*((_DWORD *)this + 11) == 202)
        {
          v16 = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 202;
          v16 = (CoreML::Specification::Pipeline *)operator new();
          v74 = CoreML::Specification::Pipeline::Pipeline(v16);
          *((_QWORD *)this + 4) = v16;
          if (*((_DWORD *)a2 + 11) != 202)
          {
            CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v74);
            v75 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
            goto LABEL_215;
          }
        }
        v75 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 4);
LABEL_215:
        CoreML::Specification::Pipeline::MergeFrom(v16, v75);
        return;
      }
      if (*((_DWORD *)this + 11) == 201)
      {
        v45 = (CoreML::Specification::PipelineRegressor *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 201;
        v45 = (CoreML::Specification::PipelineRegressor *)operator new();
        v114 = CoreML::Specification::PipelineRegressor::PipelineRegressor(v45);
        *((_QWORD *)this + 4) = v45;
        if (*((_DWORD *)a2 + 11) != 201)
        {
          CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v114);
          v115 = (const CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_;
          goto LABEL_255;
        }
      }
      v115 = (const CoreML::Specification::PipelineRegressor *)*((_QWORD *)a2 + 4);
LABEL_255:
      CoreML::Specification::PipelineRegressor::MergeFrom((std::string *)v45, v115);
      return;
    }
    if (*((_DWORD *)this + 11) == 200)
    {
      v44 = (CoreML::Specification::PipelineClassifier *)*((_QWORD *)this + 4);
    }
    else
    {
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 200;
      v44 = (CoreML::Specification::PipelineClassifier *)operator new();
      v112 = CoreML::Specification::PipelineClassifier::PipelineClassifier(v44);
      *((_QWORD *)this + 4) = v44;
      if (*((_DWORD *)a2 + 11) != 200)
      {
        CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v112);
        v113 = (const CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_;
        goto LABEL_253;
      }
    }
    v113 = (const CoreML::Specification::PipelineClassifier *)*((_QWORD *)a2 + 4);
LABEL_253:
    CoreML::Specification::PipelineClassifier::MergeFrom(v44, v113);
    return;
  }
  if (v10 > 499)
  {
    if (v10 > 501)
    {
      if (v10 != 502)
      {
        if (v10 != 555)
        {
          if (v10 != 556)
            return;
          if (*((_DWORD *)this + 11) == 556)
          {
            v15 = (CoreML::Specification::LinkedModel *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 556;
            v15 = (CoreML::Specification::LinkedModel *)operator new();
            v72 = CoreML::Specification::LinkedModel::LinkedModel(v15);
            *((_QWORD *)this + 4) = v15;
            if (*((_DWORD *)a2 + 11) != 556)
            {
              CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(v72);
              v73 = (const CoreML::Specification::LinkedModel *)&CoreML::Specification::_LinkedModel_default_instance_;
              goto LABEL_213;
            }
          }
          v73 = (const CoreML::Specification::LinkedModel *)*((_QWORD *)a2 + 4);
LABEL_213:
          CoreML::Specification::LinkedModel::MergeFrom(v15, v73);
          return;
        }
        if (*((_DWORD *)this + 11) == 555)
        {
          v43 = (CoreML::Specification::CustomModel *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 555;
          v43 = (CoreML::Specification::CustomModel *)operator new();
          v110 = CoreML::Specification::CustomModel::CustomModel(v43);
          *((_QWORD *)this + 4) = v43;
          if (*((_DWORD *)a2 + 11) != 555)
          {
            CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(v110);
            v111 = (const CoreML::Specification::CustomModel *)&CoreML::Specification::_CustomModel_default_instance_;
            goto LABEL_251;
          }
        }
        v111 = (const CoreML::Specification::CustomModel *)*((_QWORD *)a2 + 4);
LABEL_251:
        CoreML::Specification::CustomModel::MergeFrom(v43, v111);
        return;
      }
      if (*((_DWORD *)this + 11) == 502)
      {
        v42 = (CoreML::Specification::MILSpec::Program *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 502;
        v42 = (CoreML::Specification::MILSpec::Program *)operator new();
        v108 = CoreML::Specification::MILSpec::Program::Program(v42);
        *((_QWORD *)this + 4) = v42;
        if (*((_DWORD *)a2 + 11) != 502)
        {
          CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v108);
          v109 = (const CoreML::Specification::MILSpec::Program *)&CoreML::Specification::MILSpec::_Program_default_instance_;
          goto LABEL_249;
        }
      }
      v109 = (const CoreML::Specification::MILSpec::Program *)*((_QWORD *)a2 + 4);
LABEL_249:
      CoreML::Specification::MILSpec::Program::MergeFrom(v42, v109);
      return;
    }
    if (v10 != 500)
    {
      if (*((_DWORD *)this + 11) == 501)
      {
        v18 = (CoreML::Specification::ItemSimilarityRecommender *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 501;
        v18 = (CoreML::Specification::ItemSimilarityRecommender *)operator new();
        v78 = CoreML::Specification::ItemSimilarityRecommender::ItemSimilarityRecommender(v18);
        *((_QWORD *)this + 4) = v18;
        if (*((_DWORD *)a2 + 11) != 501)
        {
          CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(v78);
          v79 = (const CoreML::Specification::ItemSimilarityRecommender *)&CoreML::Specification::_ItemSimilarityRecommender_default_instance_;
          goto LABEL_219;
        }
      }
      v79 = (const CoreML::Specification::ItemSimilarityRecommender *)*((_QWORD *)a2 + 4);
LABEL_219:
      CoreML::Specification::ItemSimilarityRecommender::MergeFrom(v18, v79);
      return;
    }
    if (*((_DWORD *)this + 11) == 500)
    {
      v47 = (CoreML::Specification::NeuralNetwork *)*((_QWORD *)this + 4);
    }
    else
    {
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 500;
      v47 = (CoreML::Specification::NeuralNetwork *)operator new();
      v118 = CoreML::Specification::NeuralNetwork::NeuralNetwork(v47);
      *((_QWORD *)this + 4) = v47;
      if (*((_DWORD *)a2 + 11) != 500)
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v118);
        v119 = (const CoreML::Specification::NeuralNetwork *)&CoreML::Specification::_NeuralNetwork_default_instance_;
        goto LABEL_261;
      }
    }
    v119 = (const CoreML::Specification::NeuralNetwork *)*((_QWORD *)a2 + 4);
LABEL_261:
    CoreML::Specification::NeuralNetwork::MergeFrom(v47, v119);
    return;
  }
  switch(v10)
  {
    case 400:
      if (*((_DWORD *)this + 11) == 400)
      {
        v12 = (CoreML::Specification::GLMClassifier *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 400;
        v12 = (CoreML::Specification::GLMClassifier *)operator new();
        v66 = CoreML::Specification::GLMClassifier::GLMClassifier(v12);
        *((_QWORD *)this + 4) = v12;
        if (*((_DWORD *)a2 + 11) != 400)
        {
          CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(v66);
          v67 = (const CoreML::Specification::GLMClassifier *)&CoreML::Specification::_GLMClassifier_default_instance_;
          goto LABEL_207;
        }
      }
      v67 = (const CoreML::Specification::GLMClassifier *)*((_QWORD *)a2 + 4);
LABEL_207:
      CoreML::Specification::GLMClassifier::MergeFrom((std::string *)v12, v67);
      return;
    case 401:
      if (*((_DWORD *)this + 11) == 401)
      {
        v28 = (CoreML::Specification::SupportVectorClassifier *)*((_QWORD *)this + 4);
LABEL_144:
        v81 = (const CoreML::Specification::SupportVectorClassifier *)*((_QWORD *)a2 + 4);
        goto LABEL_221;
      }
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 401;
      v28 = (CoreML::Specification::SupportVectorClassifier *)operator new();
      v80 = CoreML::Specification::SupportVectorClassifier::SupportVectorClassifier(v28);
      *((_QWORD *)this + 4) = v28;
      if (*((_DWORD *)a2 + 11) == 401)
        goto LABEL_144;
      CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v80);
      v81 = (const CoreML::Specification::SupportVectorClassifier *)&CoreML::Specification::_SupportVectorClassifier_default_instance_;
LABEL_221:
      CoreML::Specification::SupportVectorClassifier::MergeFrom((std::string *)v28, v81);
      return;
    case 402:
      if (*((_DWORD *)this + 11) == 402)
      {
        v29 = (CoreML::Specification::TreeEnsembleClassifier *)*((_QWORD *)this + 4);
LABEL_146:
        v83 = (const CoreML::Specification::TreeEnsembleClassifier *)*((_QWORD *)a2 + 4);
        goto LABEL_223;
      }
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 402;
      v29 = (CoreML::Specification::TreeEnsembleClassifier *)operator new();
      v82 = CoreML::Specification::TreeEnsembleClassifier::TreeEnsembleClassifier(v29);
      *((_QWORD *)this + 4) = v29;
      if (*((_DWORD *)a2 + 11) == 402)
        goto LABEL_146;
      CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(v82);
      v83 = (const CoreML::Specification::TreeEnsembleClassifier *)&CoreML::Specification::_TreeEnsembleClassifier_default_instance_;
LABEL_223:
      CoreML::Specification::TreeEnsembleClassifier::MergeFrom((std::string *)v29, v83);
      return;
    case 403:
      if (*((_DWORD *)this + 11) == 403)
      {
        v30 = (CoreML::Specification::NeuralNetworkClassifier *)*((_QWORD *)this + 4);
LABEL_148:
        v85 = (const CoreML::Specification::NeuralNetworkClassifier *)*((_QWORD *)a2 + 4);
        goto LABEL_225;
      }
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 403;
      v30 = (CoreML::Specification::NeuralNetworkClassifier *)operator new();
      v84 = CoreML::Specification::NeuralNetworkClassifier::NeuralNetworkClassifier(v30);
      *((_QWORD *)this + 4) = v30;
      if (*((_DWORD *)a2 + 11) == 403)
        goto LABEL_148;
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v84);
      v85 = (const CoreML::Specification::NeuralNetworkClassifier *)&CoreML::Specification::_NeuralNetworkClassifier_default_instance_;
LABEL_225:
      CoreML::Specification::NeuralNetworkClassifier::MergeFrom(v30, v85);
      return;
    case 404:
      if (*((_DWORD *)this + 11) == 404)
      {
        v31 = (CoreML::Specification::KNearestNeighborsClassifier *)*((_QWORD *)this + 4);
LABEL_150:
        v87 = (const CoreML::Specification::KNearestNeighborsClassifier *)*((_QWORD *)a2 + 4);
        goto LABEL_227;
      }
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 404;
      v31 = (CoreML::Specification::KNearestNeighborsClassifier *)operator new();
      v86 = CoreML::Specification::KNearestNeighborsClassifier::KNearestNeighborsClassifier(v31);
      *((_QWORD *)this + 4) = v31;
      if (*((_DWORD *)a2 + 11) == 404)
        goto LABEL_150;
      CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(v86);
      v87 = (const CoreML::Specification::KNearestNeighborsClassifier *)&CoreML::Specification::_KNearestNeighborsClassifier_default_instance_;
LABEL_227:
      CoreML::Specification::KNearestNeighborsClassifier::MergeFrom(v31, v87);
      break;
    default:
      return;
  }
}

void sub_19C9A1610(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ModelDescription::MergeFrom(CoreML::Specification::ModelDescription *this, const CoreML::Specification::ModelDescription *a2)
{
  uint64_t v4;
  unsigned int v5;
  const CoreML::Specification::FeatureDescription **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  unsigned int v10;
  const CoreML::Specification::FeatureDescription **v11;
  unsigned int *v12;
  signed int v13;
  signed int *v14;
  unsigned int v15;
  const CoreML::Specification::FeatureDescription **v16;
  unsigned int *v17;
  signed int v18;
  signed int *v19;
  unsigned int v20;
  const CoreML::Specification::FunctionDescription **v21;
  unsigned int *v22;
  signed int v23;
  signed int *v24;
  unsigned int v25;
  const CoreML::Specification::FeatureDescription **v26;
  unsigned int *v27;
  signed int v28;
  signed int *v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t v34;
  __int128 *v35;
  const CoreML::Specification::Metadata *v36;
  CoreML::Specification::Metadata *v37;
  const CoreML::Specification::Metadata *v38;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (const CoreML::Specification::FeatureDescription **)(*((_QWORD *)a2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 16), *((_DWORD *)a2 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 2, (CoreML::Specification::FeatureDescription **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (signed int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_DWORD *)a2 + 12);
  if (v10)
  {
    v11 = (const CoreML::Specification::FeatureDescription **)(*((_QWORD *)a2 + 7) + 8);
    v12 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 40), *((_DWORD *)a2 + 12));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 5, (CoreML::Specification::FeatureDescription **)v12, v11, v10, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    v13 = *((_DWORD *)this + 12) + v10;
    *((_DWORD *)this + 12) = v13;
    v14 = (signed int *)*((_QWORD *)this + 7);
    if (*v14 < v13)
      *v14 = v13;
  }
  v15 = *((_DWORD *)a2 + 18);
  if (v15)
  {
    v16 = (const CoreML::Specification::FeatureDescription **)(*((_QWORD *)a2 + 10) + 8);
    v17 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 64), *((_DWORD *)a2 + 18));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 8, (CoreML::Specification::FeatureDescription **)v17, v16, v15, **((_DWORD **)this + 10) - *((_DWORD *)this + 18));
    v18 = *((_DWORD *)this + 18) + v15;
    *((_DWORD *)this + 18) = v18;
    v19 = (signed int *)*((_QWORD *)this + 10);
    if (*v19 < v18)
      *v19 = v18;
  }
  v20 = *((_DWORD *)a2 + 24);
  if (v20)
  {
    v21 = (const CoreML::Specification::FunctionDescription **)(*((_QWORD *)a2 + 13) + 8);
    v22 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 88), *((_DWORD *)a2 + 24));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FunctionDescription>::TypeHandler>((google::protobuf::Arena **)this + 11, (CoreML::Specification::FunctionDescription **)v22, v21, v20, **((_DWORD **)this + 13) - *((_DWORD *)this + 24));
    v23 = *((_DWORD *)this + 24) + v20;
    *((_DWORD *)this + 24) = v23;
    v24 = (signed int *)*((_QWORD *)this + 13);
    if (*v24 < v23)
      *v24 = v23;
  }
  v25 = *((_DWORD *)a2 + 30);
  if (v25)
  {
    v26 = (const CoreML::Specification::FeatureDescription **)(*((_QWORD *)a2 + 16) + 8);
    v27 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 112), *((_DWORD *)a2 + 30));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 14, (CoreML::Specification::FeatureDescription **)v27, v26, v25, **((_DWORD **)this + 16) - *((_DWORD *)this + 30));
    v28 = *((_DWORD *)this + 30) + v25;
    *((_DWORD *)this + 30) = v28;
    v29 = (signed int *)*((_QWORD *)this + 16);
    if (*v29 < v28)
      *v29 = v28;
  }
  v30 = *((_QWORD *)a2 + 17);
  if (*(char *)(v30 + 23) < 0)
  {
    if (!*(_QWORD *)(v30 + 8))
      goto LABEL_26;
  }
  else if (!*(_BYTE *)(v30 + 23))
  {
    goto LABEL_26;
  }
  v31 = (__int128 *)*((_QWORD *)this + 17);
  if (v31 != (__int128 *)v30)
  {
    if (v31 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 17, v30);
    else
      std::string::operator=(*((std::string **)this + 17), (const std::string *)v30);
  }
LABEL_26:
  v32 = *((_QWORD *)a2 + 18);
  if (*(char *)(v32 + 23) < 0)
  {
    if (!*(_QWORD *)(v32 + 8))
      goto LABEL_34;
  }
  else if (!*(_BYTE *)(v32 + 23))
  {
    goto LABEL_34;
  }
  v33 = (__int128 *)*((_QWORD *)this + 18);
  if (v33 != (__int128 *)v32)
  {
    if (v33 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, v32);
    else
      std::string::operator=(*((std::string **)this + 18), (const std::string *)v32);
  }
LABEL_34:
  v34 = *((_QWORD *)a2 + 19);
  if (*(char *)(v34 + 23) < 0)
  {
    if (!*(_QWORD *)(v34 + 8))
      goto LABEL_42;
  }
  else if (!*(_BYTE *)(v34 + 23))
  {
    goto LABEL_42;
  }
  v35 = (__int128 *)*((_QWORD *)this + 19);
  if (v35 != (__int128 *)v34)
  {
    if (v35 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 19, v34);
    else
      std::string::operator=(*((std::string **)this + 19), (const std::string *)v34);
  }
LABEL_42:
  if (a2 != (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
  {
    v36 = (const CoreML::Specification::Metadata *)*((_QWORD *)a2 + 20);
    if (v36)
    {
      v37 = (CoreML::Specification::Metadata *)*((_QWORD *)this + 20);
      if (!v37)
      {
        v37 = (CoreML::Specification::Metadata *)operator new();
        CoreML::Specification::Metadata::Metadata(v37);
        *((_QWORD *)this + 20) = v37;
        v36 = (const CoreML::Specification::Metadata *)*((_QWORD *)a2 + 20);
      }
      if (v36)
        v38 = v36;
      else
        v38 = (const CoreML::Specification::Metadata *)&CoreML::Specification::_Metadata_default_instance_;
      CoreML::Specification::Metadata::MergeFrom(v37, v38);
    }
  }
}

void sub_19C9A1C2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40FB0D5B10);
  _Unwind_Resume(a1);
}

void CoreML::Specification::PipelineClassifier::MergeFrom(CoreML::Specification::PipelineClassifier *this, const CoreML::Specification::PipelineClassifier *a2)
{
  uint64_t v4;
  const CoreML::Specification::Pipeline *v5;
  CoreML::Specification::Pipeline *v7;
  const CoreML::Specification::Pipeline *v8;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_
    && v5 != 0)
  {
    v7 = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 2);
    if (!v7)
    {
      v7 = (CoreML::Specification::Pipeline *)operator new();
      CoreML::Specification::Pipeline::Pipeline(v7);
      *((_QWORD *)this + 2) = v7;
      v5 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
    CoreML::Specification::Pipeline::MergeFrom(v7, v8);
  }
}

void sub_19C9A1CF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::PipelineRegressor::MergeFrom(std::string *this, const CoreML::Specification::PipelineRegressor *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::Pipeline *v5;
  CoreML::Specification::Pipeline *v7;
  const CoreML::Specification::Pipeline *v8;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_
    && v5 != 0)
  {
    v7 = (CoreML::Specification::Pipeline *)v3->__r_.__value_.__r.__words[2];
    if (!v7)
    {
      v7 = (CoreML::Specification::Pipeline *)operator new();
      CoreML::Specification::Pipeline::Pipeline(v7);
      v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
      v5 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
    return (std::string *)CoreML::Specification::Pipeline::MergeFrom(v7, v8);
  }
  return this;
}

void sub_19C9A1DC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Pipeline::MergeFrom(CoreML::Specification::Pipeline *this, const CoreML::Specification::Pipeline *a2)
{
  const CoreML::Specification::Pipeline *v2;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  CoreML::Specification::Model **v12;
  CoreML::Specification::Model **v13;
  CoreML::Specification::Model *v14;
  CoreML::Specification::Model *v15;
  CoreML::Specification::Model *v16;
  google::protobuf::Arena *v17;
  int v18;
  uint64_t v19;
  CoreML::Specification::Model **v20;
  CoreML::Specification::Model **v21;
  CoreML::Specification::Model *v22;
  CoreML::Specification::Model *Aligned;
  google::protobuf::Arena **v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  int *v28;
  unsigned int v29;
  const std::string **v30;
  unsigned int *v31;
  signed int v32;
  signed int *v33;
  const CoreML::Specification::Pipeline *v34;
  uint64_t v35;

  v2 = a2;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)v2 + 6);
  if (v5)
  {
    v34 = v2;
    v35 = *((_QWORD *)v2 + 4);
    v6 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::Pipeline *)((char *)this + 16), v5);
    v7 = v6;
    v8 = **((int **)this + 4);
    v9 = *((int *)this + 6);
    v10 = v8 - v9;
    if ((int)v8 - (int)v9 >= v5)
      v11 = v5;
    else
      v11 = v10;
    if ((int)v11 >= 1)
    {
      v12 = (CoreML::Specification::Model **)(v35 + 8);
      v13 = (CoreML::Specification::Model **)v6;
      do
      {
        v15 = *v12++;
        v14 = v15;
        v16 = *v13++;
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Model>::Merge(v14, v16);
        --v11;
      }
      while (v11);
    }
    if (v10 < v5)
    {
      v17 = (google::protobuf::Arena *)*((_QWORD *)this + 2);
      v18 = v9 + v5 - v8;
      v19 = 8 * v8 - 8 * v9;
      v20 = (CoreML::Specification::Model **)((char *)v7 + v19);
      v21 = (CoreML::Specification::Model **)(v19 + v35 + 8);
      do
      {
        v22 = *v21;
        if (v17)
        {
          CoreML::Specification::Model::Model(Aligned);
          v24 = google::protobuf::Arena::AllocateAligned(v17, 0, 24);
          *v24 = Aligned;
          v24[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::Model>;
          v25 = (unint64_t *)((char *)v17 + 32);
          do
            v26 = __ldxr(v25);
          while (__stxr((unint64_t)v24, v25));
          v24[2] = (google::protobuf::Arena *)v26;
        }
        else
        {
          Aligned = (CoreML::Specification::Model *)operator new();
          CoreML::Specification::Model::Model(Aligned);
        }
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Model>::Merge(v22, Aligned);
        *v20++ = Aligned;
        ++v21;
        --v18;
      }
      while (v18);
    }
    v27 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v27;
    v28 = (int *)*((_QWORD *)this + 4);
    v2 = v34;
    if (*v28 < v27)
      *v28 = v27;
  }
  v29 = *((_DWORD *)v2 + 12);
  if (v29)
  {
    v30 = (const std::string **)(*((_QWORD *)v2 + 7) + 8);
    v31 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::Pipeline *)((char *)this + 40), v29);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)((char *)this + 40), (std::string **)v31, v30, v29, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    v32 = *((_DWORD *)this + 12) + v29;
    *((_DWORD *)this + 12) = v32;
    v33 = (signed int *)*((_QWORD *)this + 7);
    if (*v33 < v32)
      *v33 = v32;
  }
}

void sub_19C9A1FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4065E65A88);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SerializedModel::MergeFrom(CoreML::Specification::SerializedModel *this, const CoreML::Specification::SerializedModel *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  std::string *v8;
  std::string **v9;
  std::string *v10;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (__int128 *)*((_QWORD *)this + 2);
  if (v6 != (__int128 *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      return;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    return;
  }
  v10 = (std::string *)*((_QWORD *)this + 3);
  v9 = (std::string **)((char *)this + 24);
  v8 = v10;
  if (v10 != (std::string *)v7)
  {
    if (v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v9, v7);
    else
      std::string::operator=(v8, (const std::string *)v7);
  }
}

std::string *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(std::string *result, std::string **a2, const std::string **a3, unsigned int a4, unsigned int a5)
{
  google::protobuf::Arena **v9;
  uint64_t v10;
  const std::string **v11;
  std::string **v12;
  const std::string *v13;
  const std::string *v14;
  std::string *v15;
  BOOL v16;
  int v17;
  google::protobuf::Arena *v18;
  std::string **v19;
  const std::string **v20;
  const std::string *v21;
  std::string *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;

  v9 = (google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20;
      if (v18)
      {
        Aligned->__r_.__value_.__l.__size_ = 0;
        Aligned->__r_.__value_.__r.__words[2] = 0;
        Aligned->__r_.__value_.__r.__words[0] = 0;
        v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
        *v23 = (google::protobuf::Arena *)Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
        v24 = (unint64_t *)((char *)v18 + 32);
        do
          v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
      }
      else
      {
        Aligned = (std::string *)operator new();
        Aligned->__r_.__value_.__l.__size_ = 0;
        Aligned->__r_.__value_.__r.__words[2] = 0;
        Aligned->__r_.__value_.__r.__words[0] = 0;
      }
      result = std::string::operator=(Aligned, v21);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

void google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Model>::Merge(CoreML::Specification::Model *a1, CoreML::Specification::Model *this)
{
  CoreML::Specification::Model::MergeFrom(this, a1);
}

CoreML::Specification::Model *CoreML::Specification::Model::Model(CoreML::Specification::Model *this)
{
  *(_QWORD *)this = &off_1E3D57AD0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *(_QWORD *)((char *)this + 21) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_19C9A227C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::Model>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FunctionDescription>::TypeHandler>(google::protobuf::Arena **a1, CoreML::Specification::FunctionDescription **a2, const CoreML::Specification::FunctionDescription **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  const CoreML::Specification::FunctionDescription **v11;
  CoreML::Specification::FunctionDescription **v12;
  const CoreML::Specification::FunctionDescription *v13;
  const CoreML::Specification::FunctionDescription *v14;
  CoreML::Specification::FunctionDescription *v15;
  BOOL v16;
  int v17;
  google::protobuf::Arena *v18;
  CoreML::Specification::FunctionDescription **v19;
  const CoreML::Specification::FunctionDescription **v20;
  const CoreML::Specification::FunctionDescription *v21;
  CoreML::Specification::FunctionDescription *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FunctionDescription>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20;
      if (v18)
      {
        CoreML::Specification::FunctionDescription::FunctionDescription(Aligned);
        v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
        *v23 = Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::FunctionDescription>;
        v24 = (unint64_t *)((char *)v18 + 32);
        do
          v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
      }
      else
      {
        Aligned = (CoreML::Specification::FunctionDescription *)operator new();
        CoreML::Specification::FunctionDescription::FunctionDescription(Aligned);
      }
      google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FunctionDescription>::Merge(v21, Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
}

void sub_19C9A23B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40FD9EAC30);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Metadata::MergeFrom(CoreML::Specification::Metadata *this, const CoreML::Specification::Metadata *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  std::string *v12;
  std::string **v13;
  std::string *v14;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom((uint64_t)this + 16, *((_QWORD **)a2 + 5));
  v5 = *((_QWORD *)a2 + 6);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (__int128 *)*((_QWORD *)this + 6);
  if (v6 != (__int128 *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v5);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 7);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_19;
  }
  v8 = (__int128 *)*((_QWORD *)this + 7);
  if (v8 != (__int128 *)v7)
  {
    if (v8 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, v7);
    else
      std::string::operator=(*((std::string **)this + 7), (const std::string *)v7);
  }
LABEL_19:
  v9 = *((_QWORD *)a2 + 8);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(_QWORD *)(v9 + 8))
      goto LABEL_27;
  }
  else if (!*(_BYTE *)(v9 + 23))
  {
    goto LABEL_27;
  }
  v10 = (__int128 *)*((_QWORD *)this + 8);
  if (v10 != (__int128 *)v9)
  {
    if (v10 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, v9);
    else
      std::string::operator=(*((std::string **)this + 8), (const std::string *)v9);
  }
LABEL_27:
  v11 = *((_QWORD *)a2 + 9);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(_QWORD *)(v11 + 8))
      return;
  }
  else if (!*(_BYTE *)(v11 + 23))
  {
    return;
  }
  v14 = (std::string *)*((_QWORD *)this + 9);
  v13 = (std::string **)((char *)this + 72);
  v12 = v14;
  if (v14 != (std::string *)v11)
  {
    if (v12 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v13, v11);
    else
      std::string::operator=(v12, (const std::string *)v11);
  }
}

void google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FunctionDescription>::Merge(const CoreML::Specification::FunctionDescription *a1, CoreML::Specification::FunctionDescription *a2)
{
  CoreML::Specification::FunctionDescription::MergeFrom(a2, a1);
}

CoreML::Specification::FunctionDescription *CoreML::Specification::FunctionDescription::FunctionDescription(CoreML::Specification::FunctionDescription *this)
{
  *(_QWORD *)this = &off_1E3D51EC8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  if (this != (CoreML::Specification::FunctionDescription *)&CoreML::Specification::_FunctionDescription_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 28) = 0;
  return this;
}

void sub_19C9A2600(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::FunctionDescription>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void CoreML::Specification::FunctionDescription::MergeFrom(CoreML::Specification::FunctionDescription *this, const CoreML::Specification::FunctionDescription *a2)
{
  uint64_t v4;
  unsigned int v5;
  const CoreML::Specification::FeatureDescription **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  unsigned int v10;
  const CoreML::Specification::FeatureDescription **v11;
  unsigned int *v12;
  signed int v13;
  signed int *v14;
  unsigned int v15;
  const CoreML::Specification::FeatureDescription **v16;
  unsigned int *v17;
  signed int v18;
  signed int *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  std::string *v25;
  std::string **v26;
  std::string *v27;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (const CoreML::Specification::FeatureDescription **)(*((_QWORD *)a2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::FunctionDescription *)((char *)this + 16), *((_DWORD *)a2 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 2, (CoreML::Specification::FeatureDescription **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (signed int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_DWORD *)a2 + 12);
  if (v10)
  {
    v11 = (const CoreML::Specification::FeatureDescription **)(*((_QWORD *)a2 + 7) + 8);
    v12 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::FunctionDescription *)((char *)this + 40), *((_DWORD *)a2 + 12));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 5, (CoreML::Specification::FeatureDescription **)v12, v11, v10, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    v13 = *((_DWORD *)this + 12) + v10;
    *((_DWORD *)this + 12) = v13;
    v14 = (signed int *)*((_QWORD *)this + 7);
    if (*v14 < v13)
      *v14 = v13;
  }
  v15 = *((_DWORD *)a2 + 18);
  if (v15)
  {
    v16 = (const CoreML::Specification::FeatureDescription **)(*((_QWORD *)a2 + 10) + 8);
    v17 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::FunctionDescription *)((char *)this + 64), *((_DWORD *)a2 + 18));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 8, (CoreML::Specification::FeatureDescription **)v17, v16, v15, **((_DWORD **)this + 10) - *((_DWORD *)this + 18));
    v18 = *((_DWORD *)this + 18) + v15;
    *((_DWORD *)this + 18) = v18;
    v19 = (signed int *)*((_QWORD *)this + 10);
    if (*v19 < v18)
      *v19 = v18;
  }
  v20 = *((_QWORD *)a2 + 11);
  if (*(char *)(v20 + 23) < 0)
  {
    if (!*(_QWORD *)(v20 + 8))
      goto LABEL_20;
  }
  else if (!*(_BYTE *)(v20 + 23))
  {
    goto LABEL_20;
  }
  v21 = (__int128 *)*((_QWORD *)this + 11);
  if (v21 != (__int128 *)v20)
  {
    if (v21 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, v20);
    else
      std::string::operator=(*((std::string **)this + 11), (const std::string *)v20);
  }
LABEL_20:
  v22 = *((_QWORD *)a2 + 12);
  if (*(char *)(v22 + 23) < 0)
  {
    if (!*(_QWORD *)(v22 + 8))
      goto LABEL_28;
  }
  else if (!*(_BYTE *)(v22 + 23))
  {
    goto LABEL_28;
  }
  v23 = (__int128 *)*((_QWORD *)this + 12);
  if (v23 != (__int128 *)v22)
  {
    if (v23 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 12, v22);
    else
      std::string::operator=(*((std::string **)this + 12), (const std::string *)v22);
  }
LABEL_28:
  v24 = *((_QWORD *)a2 + 13);
  if (*(char *)(v24 + 23) < 0)
  {
    if (!*(_QWORD *)(v24 + 8))
      return;
  }
  else if (!*(_BYTE *)(v24 + 23))
  {
    return;
  }
  v27 = (std::string *)*((_QWORD *)this + 13);
  v26 = (std::string **)((char *)this + 104);
  v25 = v27;
  if (v27 != (std::string *)v24)
  {
    if (v25 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v26, v24);
    else
      std::string::operator=(v25, (const std::string *)v24);
  }
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Model>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Model>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Model>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *CoreML::Specification::ModelDescription::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ModelDescription");
}

CoreML::Specification::ModelDescription *CoreML::Specification::ModelDescription::New(CoreML::Specification::ModelDescription *this)
{
  return CoreML::Specification::ModelDescription::New(this, 0);
}

CoreML::Specification::ModelDescription *CoreML::Specification::ModelDescription::New(CoreML::Specification::ModelDescription *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::ModelDescription *v3;

  v3 = (CoreML::Specification::ModelDescription *)operator new();
  CoreML::Specification::ModelDescription::ModelDescription(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::ModelDescription>(a2, v3);
  return v3;
}

void sub_19C9A2A18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40E043F9A7);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ModelDescription::SerializeWithCachedSizes(CoreML::Specification::ModelDescription *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  int i;
  int v8;
  int j;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  int k;
  int v16;
  int m;
  uint64_t result;
  uint64_t v19;
  int v20;
  int n;
  uint64_t v22;

  v6 = *((_DWORD *)this + 6);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i + 8), a2, a4);
  }
  v8 = *((_DWORD *)this + 12);
  if (v8)
  {
    for (j = 0; j != v8; ++j)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xA, *(_QWORD *)(*((_QWORD *)this + 7) + 8 * j + 8), a2, a4);
  }
  v10 = (unsigned int *)*((_QWORD *)this + 17);
  if (*((char *)v10 + 23) < 0)
  {
    v11 = *((_QWORD *)v10 + 1);
    if (!v11)
      goto LABEL_13;
    v10 = *(unsigned int **)v10;
    goto LABEL_12;
  }
  LODWORD(v11) = *((unsigned __int8 *)v10 + 23);
  if (*((_BYTE *)v10 + 23))
  {
LABEL_12:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v10, v11, 1, (uint64_t)"CoreML.Specification.ModelDescription.predictedFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xBu, *((_QWORD *)this + 17), a2);
  }
LABEL_13:
  v12 = (unsigned int *)*((_QWORD *)this + 18);
  if (*((char *)v12 + 23) < 0)
  {
    v13 = *((_QWORD *)v12 + 1);
    if (!v13)
      goto LABEL_19;
    v12 = *(unsigned int **)v12;
    goto LABEL_18;
  }
  LODWORD(v13) = *((unsigned __int8 *)v12 + 23);
  if (*((_BYTE *)v12 + 23))
  {
LABEL_18:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, v13, 1, (uint64_t)"CoreML.Specification.ModelDescription.predictedProbabilitiesName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xCu, *((_QWORD *)this + 18), a2);
  }
LABEL_19:
  v14 = *((_DWORD *)this + 18);
  if (v14)
  {
    for (k = 0; k != v14; ++k)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xD, *(_QWORD *)(*((_QWORD *)this + 10) + 8 * k + 8), a2, a4);
  }
  v16 = *((_DWORD *)this + 24);
  if (v16)
  {
    for (m = 0; m != v16; ++m)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x14, *(_QWORD *)(*((_QWORD *)this + 13) + 8 * m + 8), a2, a4);
  }
  result = *((_QWORD *)this + 19);
  if (*(char *)(result + 23) < 0)
  {
    v19 = *(_QWORD *)(result + 8);
    if (!v19)
      goto LABEL_31;
    result = *(_QWORD *)result;
    goto LABEL_30;
  }
  LODWORD(v19) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v19, 1, (uint64_t)"CoreML.Specification.ModelDescription.defaultFunctionName");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0x15u, *((_QWORD *)this + 19), a2);
  }
LABEL_31:
  v20 = *((_DWORD *)this + 30);
  if (v20)
  {
    for (n = 0; n != v20; ++n)
      result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x32, *(_QWORD *)(*((_QWORD *)this + 16) + 8 * n + 8), a2, a4);
  }
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
  {
    v22 = *((_QWORD *)this + 20);
    if (v22)
      return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x64, v22, a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::ModelDescription::GetCachedSize(CoreML::Specification::ModelDescription *this)
{
  return *((unsigned int *)this + 42);
}

uint64_t CoreML::Specification::FeatureDescription::Clear(CoreML::Specification::FeatureDescription *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((__int128 *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t CoreML::Specification::FunctionDescription::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  CoreML::Specification::FeatureDescription **v3;
  CoreML::Specification::FeatureDescription *v4;
  uint64_t v5;
  CoreML::Specification::FeatureDescription **v6;
  CoreML::Specification::FeatureDescription *v7;
  uint64_t v8;
  CoreML::Specification::FeatureDescription **v9;
  CoreML::Specification::FeatureDescription *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = this;
  v2 = *(unsigned int *)(this + 24);
  if ((int)v2 >= 1)
  {
    v3 = (CoreML::Specification::FeatureDescription **)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v4 = *v3++;
      this = CoreML::Specification::FeatureDescription::Clear(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 24) = 0;
  }
  v5 = *(unsigned int *)(v1 + 48);
  if ((int)v5 >= 1)
  {
    v6 = (CoreML::Specification::FeatureDescription **)(*(_QWORD *)(v1 + 56) + 8);
    do
    {
      v7 = *v6++;
      this = CoreML::Specification::FeatureDescription::Clear(v7);
      --v5;
    }
    while (v5);
    *(_DWORD *)(v1 + 48) = 0;
  }
  v8 = *(unsigned int *)(v1 + 72);
  if ((int)v8 >= 1)
  {
    v9 = (CoreML::Specification::FeatureDescription **)(*(_QWORD *)(v1 + 80) + 8);
    do
    {
      v10 = *v9++;
      this = CoreML::Specification::FeatureDescription::Clear(v10);
      --v8;
    }
    while (v8);
    *(_DWORD *)(v1 + 72) = 0;
  }
  v11 = *(_QWORD *)(v1 + 88);
  if ((__int128 *)v11 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v11 + 23) < 0)
    {
      **(_BYTE **)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v11 = 0;
      *(_BYTE *)(v11 + 23) = 0;
    }
  }
  v12 = *(_QWORD *)(v1 + 96);
  if ((__int128 *)v12 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v12 + 23) < 0)
    {
      **(_BYTE **)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v12 = 0;
      *(_BYTE *)(v12 + 23) = 0;
    }
  }
  v13 = *(_QWORD *)(v1 + 104);
  if ((__int128 *)v13 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v13 + 23) < 0)
    {
      **(_BYTE **)v13 = 0;
      *(_QWORD *)(v13 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v13 = 0;
      *(_BYTE *)(v13 + 23) = 0;
    }
  }
  return this;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::ModelDescription>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::ModelDescription>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::ModelDescription>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::FunctionDescription::~FunctionDescription(CoreML::Specification::FunctionDescription *this)
{
  CoreML::Specification::FunctionDescription::~FunctionDescription(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E3D51EC8;
  v2 = *((_QWORD *)this + 11);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 12);
  if ((__int128 *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1A1AD6260](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 13);
  if ((__int128 *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1A1AD6260](v6, 0x1012C40EC159624);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::FunctionDescription::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.FunctionDescription");
}

CoreML::Specification::FunctionDescription *CoreML::Specification::FunctionDescription::New(CoreML::Specification::FunctionDescription *this)
{
  return CoreML::Specification::FunctionDescription::New(this, 0);
}

CoreML::Specification::FunctionDescription *CoreML::Specification::FunctionDescription::New(CoreML::Specification::FunctionDescription *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::FunctionDescription *v3;

  v3 = (CoreML::Specification::FunctionDescription *)operator new();
  CoreML::Specification::FunctionDescription::FunctionDescription(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::FunctionDescription>(a2, v3);
  return v3;
}

void sub_19C9A2F0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40FD9EAC30);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FunctionDescription::IsInitialized(CoreML::Specification::FunctionDescription *this)
{
  return 1;
}

uint64_t CoreML::Specification::FunctionDescription::MergePartialFromCodedStream(CoreML::Specification::FunctionDescription *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v4;
  std::string **v5;
  char *v6;
  char *v7;
  std::string **v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int TagFallback;
  std::string *v13;
  uint64_t result;
  std::string *v15;
  std::string::size_type size;
  uint64_t v17;
  std::string *v18;
  std::string *v19;
  CoreML::Specification::FeatureDescription *v20;
  char *v21;
  int VarintSizeAsIntFallback;
  BOOL v23;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  const char *v29;
  char *v30;

  v30 = (char *)this + 64;
  v4 = (std::string **)((char *)this + 104);
  v5 = (std::string **)((char *)this + 96);
  v6 = (char *)this + 40;
  v7 = (char *)this + 16;
  v8 = (std::string **)((char *)this + 88);
  while (2)
  {
    while (1)
    {
      v9 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        break;
      v10 = *v9;
      if (*v9 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v9 + 1;
      v11 = v10 | 0x100000000;
      if ((v11 & 0x100000000) != 0)
        goto LABEL_8;
LABEL_36:
      if ((_DWORD)v11)
        v23 = (v11 & 7) == 4;
      else
        v23 = 1;
      if (v23)
        return 1;
      if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v11, a3) & 1) == 0)
        goto LABEL_54;
    }
    LODWORD(v10) = 0;
LABEL_7:
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
    v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v11 & 0x100000000) == 0)
      goto LABEL_36;
LABEL_8:
    switch(v11 >> 3)
    {
      case 1u:
        if (v11 != 10)
          goto LABEL_36;
        v13 = *v8;
        if (*v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v8;
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v13);
        if (!(_DWORD)result)
          return result;
        v15 = *v8;
        if (SHIBYTE((*v8)->__r_.__value_.__r.__words[2]) < 0)
        {
          v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
          size = (*v8)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v8)->__r_.__value_.__r.__words[2]);
        }
        v29 = "CoreML.Specification.FunctionDescription.name";
        goto LABEL_53;
      case 2u:
        if (v11 != 18)
          goto LABEL_36;
        v17 = (uint64_t)v7;
        goto LABEL_33;
      case 3u:
        if (v11 != 26)
          goto LABEL_36;
        v17 = (uint64_t)v6;
        goto LABEL_33;
      case 4u:
        if (v11 != 34)
          goto LABEL_36;
        v18 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v18 = *v5;
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v18);
        if (!(_DWORD)result)
          return result;
        v15 = *v5;
        if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
        {
          v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
          size = (*v5)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
        }
        v29 = "CoreML.Specification.FunctionDescription.predictedFeatureName";
        goto LABEL_53;
      case 5u:
        if (v11 != 42)
          goto LABEL_36;
        v19 = *v4;
        if (*v4 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v19 = *v4;
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v19);
        if (!(_DWORD)result)
          return result;
        v15 = *v4;
        if (SHIBYTE((*v4)->__r_.__value_.__r.__words[2]) < 0)
        {
          v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
          size = (*v4)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v4)->__r_.__value_.__r.__words[2]);
        }
        v29 = "CoreML.Specification.FunctionDescription.predictedProbabilitiesName";
LABEL_53:
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v15, size, 0, (uint64_t)v29))
          goto LABEL_54;
        continue;
      case 6u:
        if (v11 != 50)
          goto LABEL_36;
        v17 = (uint64_t)v30;
LABEL_33:
        v20 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v17);
        v21 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_54;
        }
        else
        {
          VarintSizeAsIntFallback = *v21;
          *(_QWORD *)a2 = v21 + 1;
        }
        v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v26 = *((_DWORD *)a2 + 13);
        v27 = __OFSUB__(v26--, 1);
        *((_DWORD *)a2 + 13) = v26;
        if (v26 < 0 != v27)
          goto LABEL_54;
        v28 = v24;
        result = CoreML::Specification::FeatureDescription::MergePartialFromCodedStream(v20, a2, v25);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
          continue;
LABEL_54:
        result = 0;
        break;
      default:
        goto LABEL_36;
    }
    return result;
  }
}

uint64_t CoreML::Specification::FunctionDescription::SerializeWithCachedSizes(CoreML::Specification::FunctionDescription *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v6;
  uint64_t v7;
  int v8;
  int i;
  int v10;
  int j;
  unsigned int *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  int k;

  v6 = (unsigned int *)*((_QWORD *)this + 11);
  if (*((char *)v6 + 23) < 0)
  {
    v7 = *((_QWORD *)v6 + 1);
    if (!v7)
      goto LABEL_7;
    v6 = *(unsigned int **)v6;
    goto LABEL_6;
  }
  LODWORD(v7) = *((unsigned __int8 *)v6 + 23);
  if (*((_BYTE *)v6 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v6, v7, 1, (uint64_t)"CoreML.Specification.FunctionDescription.name");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((_QWORD *)this + 11), a2);
  }
LABEL_7:
  v8 = *((_DWORD *)this + 6);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i + 8), a2, a4);
  }
  v10 = *((_DWORD *)this + 12);
  if (v10)
  {
    for (j = 0; j != v10; ++j)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*((_QWORD *)this + 7) + 8 * j + 8), a2, a4);
  }
  v12 = (unsigned int *)*((_QWORD *)this + 12);
  if (*((char *)v12 + 23) < 0)
  {
    v13 = *((_QWORD *)v12 + 1);
    if (!v13)
      goto LABEL_19;
    v12 = *(unsigned int **)v12;
    goto LABEL_18;
  }
  LODWORD(v13) = *((unsigned __int8 *)v12 + 23);
  if (*((_BYTE *)v12 + 23))
  {
LABEL_18:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, v13, 1, (uint64_t)"CoreML.Specification.FunctionDescription.predictedFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(4u, *((_QWORD *)this + 12), a2);
  }
LABEL_19:
  result = *((_QWORD *)this + 13);
  if (*(char *)(result + 23) < 0)
  {
    v15 = *(_QWORD *)(result + 8);
    if (!v15)
      goto LABEL_25;
    result = *(_QWORD *)result;
    goto LABEL_24;
  }
  LODWORD(v15) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_24:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v15, 1, (uint64_t)"CoreML.Specification.FunctionDescription.predictedProbabilitiesName");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(5u, *((_QWORD *)this + 13), a2);
  }
LABEL_25:
  v16 = *((_DWORD *)this + 18);
  if (v16)
  {
    for (k = 0; k != v16; ++k)
      result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(*((_QWORD *)this + 10) + 8 * k + 8), a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::FunctionDescription::GetCachedSize(CoreML::Specification::FunctionDescription *this)
{
  return *((unsigned int *)this + 28);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::FunctionDescription>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::FunctionDescription>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::FunctionDescription>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *CoreML::Specification::Metadata::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Metadata");
}

CoreML::Specification::Metadata *CoreML::Specification::Metadata::New(CoreML::Specification::Metadata *this)
{
  return CoreML::Specification::Metadata::New(this, 0);
}

CoreML::Specification::Metadata *CoreML::Specification::Metadata::New(CoreML::Specification::Metadata *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Metadata *v3;

  v3 = (CoreML::Specification::Metadata *)operator new();
  CoreML::Specification::Metadata::Metadata(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Metadata>(a2, v3);
  return v3;
}

void sub_19C9A3580(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40FB0D5B10);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Metadata::Clear(CoreML::Specification::Metadata *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  google::protobuf::Map<std::string,std::string>::clear((_QWORD *)this + 3);
  v2 = *((_QWORD *)this + 6);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 7);
  if ((__int128 *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 8);
  if ((__int128 *)v4 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
  v5 = *((_QWORD *)this + 9);
  if ((__int128 *)v5 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
}

uint64_t CoreML::Specification::Metadata::IsInitialized(CoreML::Specification::Metadata *this)
{
  return 1;
}

uint64_t CoreML::Specification::Metadata::SerializeWithCachedSizes(CoreML::Specification::Metadata *this, google::protobuf::io::CodedOutputStream *a2)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  google::protobuf::io::CodedOutputStream *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  google::protobuf::io::CodedOutputStream *v24;
  uint64_t v25;
  unsigned __int8 *v26[3];

  v4 = (unsigned int *)*((_QWORD *)this + 6);
  if (*((char *)v4 + 23) < 0)
  {
    v5 = *((_QWORD *)v4 + 1);
    if (!v5)
      goto LABEL_7;
    v4 = *(unsigned int **)v4;
    goto LABEL_6;
  }
  LODWORD(v5) = *((unsigned __int8 *)v4 + 23);
  if (*((_BYTE *)v4 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v4, v5, 1, (uint64_t)"CoreML.Specification.Metadata.shortDescription");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((_QWORD *)this + 6), a2);
  }
LABEL_7:
  v6 = (unsigned int *)*((_QWORD *)this + 7);
  if (*((char *)v6 + 23) < 0)
  {
    v7 = *((_QWORD *)v6 + 1);
    if (!v7)
      goto LABEL_13;
    v6 = *(unsigned int **)v6;
    goto LABEL_12;
  }
  LODWORD(v7) = *((unsigned __int8 *)v6 + 23);
  if (*((_BYTE *)v6 + 23))
  {
LABEL_12:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v6, v7, 1, (uint64_t)"CoreML.Specification.Metadata.versionString");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2u, *((_QWORD *)this + 7), a2);
  }
LABEL_13:
  v8 = (unsigned int *)*((_QWORD *)this + 8);
  if (*((char *)v8 + 23) < 0)
  {
    v9 = *((_QWORD *)v8 + 1);
    if (!v9)
      goto LABEL_19;
    v8 = *(unsigned int **)v8;
    goto LABEL_18;
  }
  LODWORD(v9) = *((unsigned __int8 *)v8 + 23);
  if (*((_BYTE *)v8 + 23))
  {
LABEL_18:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v8, v9, 1, (uint64_t)"CoreML.Specification.Metadata.author");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(3u, *((_QWORD *)this + 8), a2);
  }
LABEL_19:
  result = *((_QWORD *)this + 9);
  if (*(char *)(result + 23) < 0)
  {
    v11 = *(_QWORD *)(result + 8);
    if (!v11)
      goto LABEL_25;
    result = *(_QWORD *)result;
    goto LABEL_24;
  }
  LODWORD(v11) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_24:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v11, 1, (uint64_t)"CoreML.Specification.Metadata.license");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(4u, *((_QWORD *)this + 9), a2);
  }
LABEL_25:
  v12 = (unint64_t *)*((_QWORD *)this + 5);
  v13 = *v12;
  if (!*v12)
    return result;
  if (*((_BYTE *)a2 + 26))
  {
    if (v13 < 2 || !*((_BYTE *)a2 + 27))
    {
LABEL_36:
      result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v26, v12);
      v17 = 0;
      while (v26[0])
      {
        v19 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*((_QWORD *)v26[0] + 3), *((_QWORD *)v26[0] + 3) + 24, *((google::protobuf::Arena **)this + 2));
        if (v17 != v19)
        {
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          v17 = v19;
        }
        google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x64, v17, a2, v18);
        CoreML::Specification::Metadata::SerializeWithCachedSizes(google::protobuf::io::CodedOutputStream *)const::Utf8Check::Check(*((unsigned int **)v26[0] + 3));
        result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v26);
      }
      if (v17)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      return result;
    }
  }
  else if (v13 < 2 || !google::protobuf::io::CodedOutputStream::default_serialization_deterministic_)
  {
    goto LABEL_36;
  }
  v14 = operator new[]();
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v26, *((_QWORD **)this + 5));
  v15 = v26[0];
  if (v26[0])
  {
    v16 = 0;
    do
    {
      *(_QWORD *)(v14 + 8 * v16) = *((_QWORD *)v15 + 3);
      google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v26);
      ++v16;
      v15 = v26[0];
    }
    while (v26[0]);
  }
  else
  {
    v16 = 0;
  }
  v20 = 126 - 2 * __clz(v16);
  if (v16)
    v21 = v20;
  else
    v21 = 0;
  std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**,false>(v14, (char *)(v14 + 8 * v16), v21, 1);
  if (v16)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v25 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*(_QWORD *)(v14 + 8 * v22), *(_QWORD *)(v14 + 8 * v22) + 24, *((google::protobuf::Arena **)this + 2));
      if (v23 != v25)
      {
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        v23 = v25;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x64, v23, a2, v24);
      CoreML::Specification::Metadata::SerializeWithCachedSizes(google::protobuf::io::CodedOutputStream *)const::Utf8Check::Check(*(unsigned int **)(v14 + 8 * v22++));
    }
    while (v16 != v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  return MEMORY[0x1A1AD6248](v14, 0x60C8044C4A2DFLL);
}

void sub_19C9A39B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1A1AD6248](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Metadata::GetCachedSize(CoreML::Specification::Metadata *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL4 v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _QWORD *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  char *v97;

  v6 = (char *)result;
LABEL_2:
  v94 = a2 - 8;
  v90 = a2 - 24;
  v91 = a2 - 16;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = a2 - v7;
    v10 = (a2 - v7) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(_QWORD **)v94;
        v41 = *(_QWORD **)v7;
        result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v94, *(_QWORD **)v7);
        if ((_DWORD)result)
        {
          *(_QWORD *)v7 = v40;
          *(_QWORD *)v94 = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v94);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v94);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v7 + 3, (_QWORD **)v94);
      default:
        if (v9 <= 191)
        {
          v42 = v7 + 8;
          v44 = v7 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v7;
              do
              {
                v48 = *(_QWORD **)v46;
                v47 = (_QWORD *)*((_QWORD *)v46 + 1);
                v46 = v42;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v47, v48);
                if ((_DWORD)result)
                {
                  v49 = v45;
                  while (1)
                  {
                    *(_QWORD *)&v7[v49 + 8] = v48;
                    if (!v49)
                      break;
                    v48 = *(_QWORD **)&v7[v49 - 8];
                    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v47, v48);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v7[v49 + 8];
                      goto LABEL_73;
                    }
                  }
                  v50 = v7;
LABEL_73:
                  *(_QWORD *)v50 = v47;
                }
                v42 = v46 + 8;
                v45 += 8;
              }
              while (v46 + 8 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v86 = *(_QWORD **)v8;
              v85 = (_QWORD *)*((_QWORD *)v8 + 1);
              v8 = v42;
              result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v85, v86);
              if ((_DWORD)result)
              {
                v87 = v8;
                do
                {
                  *(_QWORD *)v87 = v86;
                  v86 = (_QWORD *)*((_QWORD *)v87 - 2);
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v85, v86);
                  v87 -= 8;
                }
                while ((result & 1) != 0);
                *(_QWORD *)v87 = v85;
              }
              v42 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v97 = v7;
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            v88 = a2;
            v89 = a2 - v7;
            do
            {
              v53 = v52;
              if (v9 >= 16 && v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v97[8 * v54];
                v56 = 2 * v52 + 2;
                v95 = v52;
                if (v56 >= v10)
                {
                  v58 = *(_QWORD **)v55;
                }
                else
                {
                  v57 = *(_QWORD **)v55;
                  v58 = (_QWORD *)*((_QWORD *)v55 + 1);
                  v59 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v55, v58);
                  if (v59)
                    v55 += 8;
                  else
                    v58 = v57;
                  if (v59)
                    v54 = v56;
                }
                v60 = &v97[8 * v53];
                v61 = *(_QWORD **)v60;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v58, *(_QWORD **)v60);
                v9 = v89;
                if ((result & 1) == 0)
                {
                  do
                  {
                    v62 = v55;
                    *(_QWORD *)v60 = v58;
                    if (v51 < v54)
                      break;
                    v63 = (2 * v54) | 1;
                    v55 = &v97[8 * v63];
                    v64 = 2 * v54 + 2;
                    if (v64 >= v10)
                    {
                      v58 = *(_QWORD **)v55;
                      v54 = (2 * v54) | 1;
                    }
                    else
                    {
                      v58 = *(_QWORD **)v55;
                      v65 = (_QWORD *)*((_QWORD *)v55 + 1);
                      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v55, v65))
                      {
                        v58 = v65;
                        v55 += 8;
                        v54 = v64;
                      }
                      else
                      {
                        v54 = v63;
                      }
                    }
                    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v58, v61);
                    v60 = v62;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v62 = v61;
                  a2 = v88;
                  v9 = v89;
                  v53 = v95;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v66 = (unint64_t)v9 >> 3;
            v67 = v97;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = v66 - 2;
              v93 = *(_QWORD **)v67;
              if (v66 < 2)
                v70 = v66 - 1;
              v71 = v70 >> 1;
              do
              {
                v72 = &v67[8 * v69 + 8];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 >= v66)
                {
                  v77 = *(_QWORD **)v72;
                  v69 = (2 * v69) | 1;
                }
                else
                {
                  v75 = *(_QWORD **)v72;
                  v76 = *(_QWORD **)&v67[8 * v69 + 16];
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v72, v76);
                  if ((_DWORD)result)
                    v77 = v76;
                  else
                    v77 = v75;
                  if ((_DWORD)result)
                  {
                    v72 += 8;
                    v69 = v74;
                  }
                  else
                  {
                    v69 = v73;
                  }
                }
                *(_QWORD *)v67 = v77;
                v67 = v72;
              }
              while (v69 <= v71);
              a2 = v68 - 8;
              if (v72 == v68 - 8)
              {
                *(_QWORD *)v72 = v93;
              }
              else
              {
                *(_QWORD *)v72 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v93;
                v78 = v72 - v97 + 8;
                if (v78 >= 9)
                {
                  v79 = (unint64_t)((v78 >> 3) - 2) >> 1;
                  v80 = &v97[8 * v79];
                  v81 = *(_QWORD **)v80;
                  v82 = *(_QWORD **)v72;
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v80, *(_QWORD **)v72);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v83 = v80;
                      *(_QWORD *)v72 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v97[8 * v79];
                      v81 = *(_QWORD **)v80;
                      result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v80, v82);
                      v72 = v83;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v83 = v82;
                  }
                }
              }
              v84 = v66-- <= 2;
              v67 = v97;
            }
            while (!v84);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7[8 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12, (_QWORD **)v7, (_QWORD **)v94);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v12, (_QWORD **)v94);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 1, (_QWORD **)v12 - 1, (_QWORD **)v91);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 2, (_QWORD **)&v7[8 * v11 + 8], (_QWORD **)v90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12 - 1, (_QWORD **)v12, (_QWORD **)&v7[8 * v11 + 8]);
          v13 = *(_QWORD **)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD **)v7;
        v15 = v7;
        if ((a4 & 1) == 0)
        {
          v15 = v7;
          if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*((_QWORD **)v7 - 1), *(_QWORD **)v7))
          {
            result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, *(_QWORD **)v94);
            if ((result & 1) != 0)
            {
              do
              {
                v30 = (_QWORD *)*((_QWORD *)v7 + 1);
                v7 += 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v30);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v31 = v7 + 8;
              do
              {
                v7 = v31;
                if (v31 >= a2)
                  break;
                v31 += 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, *(_QWORD **)v7);
              }
              while (!(_DWORD)result);
            }
            v32 = a2;
            if (v7 < a2)
            {
              v32 = a2;
              do
              {
                v33 = (_QWORD *)*((_QWORD *)v32 - 1);
                v32 -= 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v33);
              }
              while ((result & 1) != 0);
            }
            v34 = a2;
            if (v7 < v32)
            {
              v35 = *(_QWORD **)v7;
              v36 = *(_QWORD **)v32;
              do
              {
                *(_QWORD *)v7 = v36;
                *(_QWORD *)v32 = v35;
                do
                {
                  v37 = (_QWORD *)*((_QWORD *)v7 + 1);
                  v7 += 8;
                  v35 = v37;
                }
                while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v37));
                do
                {
                  v38 = (_QWORD *)*((_QWORD *)v32 - 1);
                  v32 -= 8;
                  v36 = v38;
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v38);
                }
                while ((result & 1) != 0);
              }
              while (v7 < v32);
            }
            v39 = v7 - 8;
            a2 = v34;
            if (v7 - 8 != v8)
              *(_QWORD *)v8 = *(_QWORD *)v39;
            a4 = 0;
            *(_QWORD *)v39 = v14;
            continue;
          }
        }
        do
        {
          v16 = v15;
          v18 = (_QWORD *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v17 = v18;
        }
        while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v18, v14));
        v96 = a3;
        v19 = a2;
        if (v16 == v8)
        {
          v19 = a2;
          do
          {
            if (v15 >= v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v21, v14));
        }
        else
        {
          do
          {
            v20 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v20, v14));
        }
        v6 = v8;
        v22 = a2;
        if (v15 < v19)
        {
          v23 = *(_QWORD **)v19;
          v24 = v15;
          v25 = v19;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v17;
            do
            {
              v16 = v24;
              v26 = (_QWORD *)*((_QWORD *)v24 + 1);
              v24 += 8;
              v17 = v26;
            }
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v26, v14));
            do
            {
              v27 = (_QWORD *)*((_QWORD *)v25 - 1);
              v25 -= 8;
              v23 = v27;
            }
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v27, v14));
          }
          while (v24 < v25);
        }
        if (v16 != v6)
          *(_QWORD *)v6 = *(_QWORD *)v16;
        *(_QWORD *)v16 = v14;
        v28 = v15 >= v19;
        a2 = v22;
        a3 = v96;
        if (!v28)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**,false>(v6, v16, v96, a4 & 1);
          a4 = 0;
          v7 = v16 + 8;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v6, (_QWORD **)v16);
        v7 = v16 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v16 + 1, (_QWORD **)v22);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v16;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL CoreML::Specification::Metadata::SerializeWithCachedSizes(google::protobuf::io::CodedOutputStream *)const::Utf8Check::Check(unsigned int *a1)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  v1 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    a1 = *(unsigned int **)a1;
    v2 = *((_QWORD *)v1 + 1);
  }
  else
  {
    LODWORD(v2) = *((unsigned __int8 *)a1 + 23);
  }
  google::protobuf::internal::WireFormatLite::VerifyUtf8String(a1, v2, 1, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.key");
  if (*((char *)v1 + 47) < 0)
  {
    v3 = (unsigned int *)*((_QWORD *)v1 + 3);
    v4 = *((_QWORD *)v1 + 4);
  }
  else
  {
    v3 = v1 + 6;
    LODWORD(v4) = *((unsigned __int8 *)v1 + 47);
  }
  return google::protobuf::internal::WireFormatLite::VerifyUtf8String(v3, v4, 1, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.value");
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(_QWORD **a1, _QWORD **a2, _QWORD **a3)
{
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  _BOOL8 result;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v6 = *a2;
  v7 = *a1;
  v8 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a2, *a1);
  v9 = *a3;
  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a3, v6);
  if (v8)
  {
    if (result)
    {
      *a1 = v9;
    }
    else
    {
      *a1 = v6;
      *a2 = v7;
      v13 = *a3;
      result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a3, v7);
      if (!result)
        return result;
      *a2 = v13;
    }
    *a3 = v7;
  }
  else if (result)
  {
    *a2 = v9;
    *a3 = v6;
    v11 = *a2;
    v12 = *a1;
    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a2, *a1);
    if (result)
    {
      *a1 = v11;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(_QWORD **a1, _QWORD **a2, _QWORD **a3, _QWORD **a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _BOOL8 result;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a2, a3);
  v8 = *a4;
  v9 = *a3;
  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a4, *a3);
  if (result)
  {
    *a3 = v8;
    *a4 = v9;
    v11 = *a3;
    v12 = *a2;
    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a3, *a2);
    if (result)
    {
      *a2 = v11;
      *a3 = v12;
      v13 = *a2;
      v14 = *a1;
      result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a2, *a1);
      if (result)
      {
        *a1 = v13;
        *a2 = v14;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(_QWORD **a1, _QWORD **a2, _QWORD **a3, _QWORD **a4, _QWORD **a5)
{
  _QWORD *v10;
  _QWORD *v11;
  _BOOL8 result;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a2, a3, a4);
  v10 = *a5;
  v11 = *a4;
  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a5, *a4);
  if (result)
  {
    *a4 = v10;
    *a5 = v11;
    v13 = *a4;
    v14 = *a3;
    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a4, *a3);
    if (result)
    {
      *a3 = v13;
      *a4 = v14;
      v15 = *a3;
      v16 = *a2;
      result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a3, *a2);
      if (result)
      {
        *a2 = v15;
        *a3 = v16;
        v17 = *a2;
        v18 = *a1;
        result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a2, *a1);
        if (result)
        {
          *a1 = v17;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD **v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(_QWORD **)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(_QWORD **)((char *)a1 + v14 - 16);
        v16 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v12, v13);
        v14 = v15;
        if (!v16)
        {
          v17 = (_QWORD **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

double google::protobuf::Map<std::string,std::string>::erase(_QWORD *a1, unsigned __int8 *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  result = *(double *)&v6;
  if ((_QWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    *(_QWORD *)&result = google::protobuf::Map<std::string,std::string>::erase((uint64_t)&v6, a1, &v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(google::protobuf::Arena *a1)
{
  uint64_t result;

  if (a1)
  else
    result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 32) = a1;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E3D5AC38;
  return result;
}

__n128 google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  google::protobuf::Arena **v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  v3 = google::protobuf::Map<std::string,std::string>::operator[](*(_QWORD *)(a1 + 8), a1 + 16);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  v5 = *(_QWORD *)(v4 + 24);
  if ((__int128 *)v5 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v4 + 24), *(google::protobuf::Arena ***)(v4 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
    v5 = *(_QWORD *)(v4 + 24);
    v3 = *(google::protobuf::Arena ***)(a1 + 40);
  }
  if (*((char *)v3 + 23) < 0)
    operator delete(*v3);
  result = *(__n128 *)v5;
  v3[2] = *(google::protobuf::Arena **)(v5 + 16);
  *(__n128 *)v3 = result;
  *(_BYTE *)(v5 + 23) = 0;
  *(_BYTE *)v5 = 0;
  return result;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Metadata>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Metadata>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Metadata>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *CoreML::Specification::FeatureDescription::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.FeatureDescription");
}

CoreML::Specification::FeatureDescription *CoreML::Specification::FeatureDescription::New(CoreML::Specification::FeatureDescription *this)
{
  return CoreML::Specification::FeatureDescription::New(this, 0);
}

CoreML::Specification::FeatureDescription *CoreML::Specification::FeatureDescription::New(CoreML::Specification::FeatureDescription *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::FeatureDescription *v3;

  v3 = (CoreML::Specification::FeatureDescription *)operator new();
  CoreML::Specification::FeatureDescription::FeatureDescription(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::FeatureDescription>(a2, v3);
  return v3;
}

void sub_19C9A47F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FeatureDescription::IsInitialized(CoreML::Specification::FeatureDescription *this)
{
  return 1;
}

uint64_t CoreML::Specification::FeatureDescription::SerializeWithCachedSizes(CoreML::Specification::FeatureDescription *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v6 = (unsigned int *)*((_QWORD *)this + 2);
  if (*((char *)v6 + 23) < 0)
  {
    v7 = *((_QWORD *)v6 + 1);
    if (!v7)
      goto LABEL_7;
    v6 = *(unsigned int **)v6;
    goto LABEL_6;
  }
  LODWORD(v7) = *((unsigned __int8 *)v6 + 23);
  if (*((_BYTE *)v6 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v6, v7, 1, (uint64_t)"CoreML.Specification.FeatureDescription.name");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  result = *((_QWORD *)this + 3);
  if (*(char *)(result + 23) < 0)
  {
    v9 = *(_QWORD *)(result + 8);
    if (!v9)
      goto LABEL_13;
    result = *(_QWORD *)result;
    goto LABEL_12;
  }
  LODWORD(v9) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_12:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v9, 1, (uint64_t)"CoreML.Specification.FeatureDescription.shortDescription");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2u, *((_QWORD *)this + 3), a2);
  }
LABEL_13:
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
  {
    v10 = *((_QWORD *)this + 4);
    if (v10)
      return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, v10, a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::FeatureDescription::GetCachedSize(CoreML::Specification::FeatureDescription *this)
{
  return *((unsigned int *)this + 10);
}

void CoreML::Specification::FeatureDescription::MergeFrom(CoreML::Specification::FeatureDescription *this, const CoreML::Specification::FeatureDescription *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  const CoreML::Specification::FeatureType *v9;
  CoreML::Specification::FeatureType *v10;
  const CoreML::Specification::FeatureType *v11;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (__int128 *)*((_QWORD *)this + 2);
  if (v6 != (__int128 *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_19;
  }
  v8 = (__int128 *)*((_QWORD *)this + 3);
  if (v8 != (__int128 *)v7)
  {
    if (v8 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v7);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v7);
  }
LABEL_19:
  if (a2 != (const CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
  {
    v9 = (const CoreML::Specification::FeatureType *)*((_QWORD *)a2 + 4);
    if (v9)
    {
      v10 = (CoreML::Specification::FeatureType *)*((_QWORD *)this + 4);
      if (!v10)
      {
        v10 = (CoreML::Specification::FeatureType *)operator new();
        CoreML::Specification::FeatureType::FeatureType(v10);
        *((_QWORD *)this + 4) = v10;
        v9 = (const CoreML::Specification::FeatureType *)*((_QWORD *)a2 + 4);
      }
      if (v9)
        v11 = v9;
      else
        v11 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
      CoreML::Specification::FeatureType::MergeFrom((std::string *)v10, v11);
    }
  }
}

void sub_19C9A4A4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::FeatureDescription>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureDescription>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureDescription>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::PipelineRegressor::~PipelineRegressor(CoreML::Specification::PipelineRegressor *this)
{
  CoreML::Specification::PipelineRegressor::~PipelineRegressor(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E3D50D90;
  if (this != (CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::PipelineRegressor::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.PipelineRegressor");
}

CoreML::Specification::PipelineRegressor *CoreML::Specification::PipelineRegressor::New(CoreML::Specification::PipelineRegressor *this)
{
  return CoreML::Specification::PipelineRegressor::New(this, 0);
}

CoreML::Specification::PipelineRegressor *CoreML::Specification::PipelineRegressor::New(CoreML::Specification::PipelineRegressor *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::PipelineRegressor *v3;

  v3 = (CoreML::Specification::PipelineRegressor *)operator new();
  CoreML::Specification::PipelineRegressor::PipelineRegressor(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::PipelineRegressor>(a2, v3);
  return v3;
}

void sub_19C9A4B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::PipelineRegressor::Clear(CoreML::Specification::PipelineRegressor *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 2) = 0;
  return result;
}

uint64_t CoreML::Specification::PipelineRegressor::IsInitialized(CoreML::Specification::PipelineRegressor *this)
{
  return 1;
}

uint64_t *CoreML::Specification::PipelineRegressor::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if (this != &CoreML::Specification::_PipelineRegressor_default_instance_)
  {
    v5 = this[2];
    if (v5)
      return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::PipelineRegressor::GetCachedSize(CoreML::Specification::PipelineRegressor *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::PipelineRegressor>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineRegressor>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineRegressor>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::PipelineClassifier::~PipelineClassifier(CoreML::Specification::PipelineClassifier *this)
{
  CoreML::Specification::PipelineClassifier::~PipelineClassifier(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E3D51710;
  if (this != (CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::PipelineClassifier::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.PipelineClassifier");
}

CoreML::Specification::PipelineClassifier *CoreML::Specification::PipelineClassifier::New(CoreML::Specification::PipelineClassifier *this)
{
  return CoreML::Specification::PipelineClassifier::New(this, 0);
}

CoreML::Specification::PipelineClassifier *CoreML::Specification::PipelineClassifier::New(CoreML::Specification::PipelineClassifier *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::PipelineClassifier *v3;

  v3 = (CoreML::Specification::PipelineClassifier *)operator new();
  CoreML::Specification::PipelineClassifier::PipelineClassifier(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::PipelineClassifier>(a2, v3);
  return v3;
}

void sub_19C9A4D44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::PipelineClassifier::Clear(CoreML::Specification::PipelineClassifier *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 2) = 0;
  return result;
}

uint64_t CoreML::Specification::PipelineClassifier::IsInitialized(CoreML::Specification::PipelineClassifier *this)
{
  return 1;
}

uint64_t *CoreML::Specification::PipelineClassifier::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if (this != &CoreML::Specification::_PipelineClassifier_default_instance_)
  {
    v5 = this[2];
    if (v5)
      return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::PipelineClassifier::GetCachedSize(CoreML::Specification::PipelineClassifier *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::PipelineClassifier>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineClassifier>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineClassifier>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::SerializedModel::~SerializedModel(CoreML::Specification::SerializedModel *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E3D4F5D0;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::SerializedModel::SharedDtor((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E3D4F5D0;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::SerializedModel::SharedDtor((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::SerializedModel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SerializedModel");
}

CoreML::Specification::SerializedModel *CoreML::Specification::SerializedModel::New(CoreML::Specification::SerializedModel *this)
{
  return CoreML::Specification::SerializedModel::New(this, 0);
}

CoreML::Specification::SerializedModel *CoreML::Specification::SerializedModel::New(CoreML::Specification::SerializedModel *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::SerializedModel *v3;

  v3 = (CoreML::Specification::SerializedModel *)operator new();
  CoreML::Specification::SerializedModel::SerializedModel(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::SerializedModel>(a2, v3);
  return v3;
}

void sub_19C9A4F84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SerializedModel::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 16);
  if ((__int128 *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v2 = *(_QWORD *)(this + 24);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  return this;
}

uint64_t CoreML::Specification::SerializedModel::IsInitialized(CoreML::Specification::SerializedModel *this)
{
  return 1;
}

uint64_t CoreML::Specification::SerializedModel::SerializeWithCachedSizes(CoreML::Specification::SerializedModel *this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      goto LABEL_7;
    result = *(_QWORD *)result;
    goto LABEL_6;
  }
  LODWORD(v5) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v5, 1, (uint64_t)"CoreML.Specification.SerializedModel.identifier");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  v6 = *((_QWORD *)this + 3);
  if ((*(char *)(v6 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v6 + 23))
      return result;
    return google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(2u, v6, a2);
  }
  if (*(_QWORD *)(v6 + 8))
    return google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(2u, v6, a2);
  return result;
}

uint64_t CoreML::Specification::SerializedModel::GetCachedSize(CoreML::Specification::SerializedModel *this)
{
  return *((unsigned int *)this + 8);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::SerializedModel>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::SerializedModel>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::SerializedModel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t CoreML::Specification::SerializedModel::SharedDtor(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
  }
  v4 = *(_QWORD *)(v1 + 24);
  if ((__int128 *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    JUMPOUT(0x1A1AD6260);
  }
  return this;
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(_QWORD *a1)
{
  unsigned int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = (uint64_t *)(v2 + 2);
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        v5 = *v3;
        if (*v3)
        {
          if (*(char *)(v5 + 23) < 0)
            operator delete(*(void **)v5);
          MEMORY[0x1A1AD6260](v5, 0x1012C40EC159624);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Pipeline>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Pipeline>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Pipeline>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

CoreML::Specification::ModelDescription *CoreML::Specification::ModelDescription::ModelDescription(CoreML::Specification::ModelDescription *this, const CoreML::Specification::ModelDescription *a2)
{
  uint64_t *v4;
  google::protobuf::Arena **v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  signed int v9;
  signed int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  signed int v14;
  signed int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  signed int v19;
  signed int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  signed int v24;
  signed int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  signed int v29;
  signed int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CoreML::Specification::Metadata *v38;

  *(_QWORD *)this = &off_1E3D501B0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (google::protobuf::Arena **)((char *)this + 16);
  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = *((_DWORD *)a2 + 6);
  if (v6)
  {
    v7 = *((_QWORD *)a2 + 4);
    v8 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 16), *((_DWORD *)a2 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v5, (CoreML::Specification::FeatureDescription **)v8, (const CoreML::Specification::FeatureDescription **)(v7 + 8), v6, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v9 = *((_DWORD *)this + 6) + v6;
    *((_DWORD *)this + 6) = v9;
    v10 = (signed int *)*((_QWORD *)this + 4);
    if (*v10 < v9)
      *v10 = v9;
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v11 = *((_DWORD *)a2 + 12);
  if (v11)
  {
    v12 = *((_QWORD *)a2 + 7);
    v13 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 40), *((_DWORD *)a2 + 12));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 5, (CoreML::Specification::FeatureDescription **)v13, (const CoreML::Specification::FeatureDescription **)(v12 + 8), v11, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    v14 = *((_DWORD *)this + 12) + v11;
    *((_DWORD *)this + 12) = v14;
    v15 = (signed int *)*((_QWORD *)this + 7);
    if (*v15 < v14)
      *v15 = v14;
  }
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  v16 = *((_DWORD *)a2 + 18);
  if (v16)
  {
    v17 = *((_QWORD *)a2 + 10);
    v18 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 64), *((_DWORD *)a2 + 18));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 8, (CoreML::Specification::FeatureDescription **)v18, (const CoreML::Specification::FeatureDescription **)(v17 + 8), v16, **((_DWORD **)this + 10) - *((_DWORD *)this + 18));
    v19 = *((_DWORD *)this + 18) + v16;
    *((_DWORD *)this + 18) = v19;
    v20 = (signed int *)*((_QWORD *)this + 10);
    if (*v20 < v19)
      *v20 = v19;
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v21 = *((_DWORD *)a2 + 24);
  if (v21)
  {
    v22 = *((_QWORD *)a2 + 13);
    v23 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 88), *((_DWORD *)a2 + 24));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FunctionDescription>::TypeHandler>((google::protobuf::Arena **)this + 11, (CoreML::Specification::FunctionDescription **)v23, (const CoreML::Specification::FunctionDescription **)(v22 + 8), v21, **((_DWORD **)this + 13) - *((_DWORD *)this + 24));
    v24 = *((_DWORD *)this + 24) + v21;
    *((_DWORD *)this + 24) = v24;
    v25 = (signed int *)*((_QWORD *)this + 13);
    if (*v25 < v24)
      *v25 = v24;
  }
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  v26 = *((_DWORD *)a2 + 30);
  if (v26)
  {
    v27 = *((_QWORD *)a2 + 16);
    v28 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 112), *((_DWORD *)a2 + 30));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)this + 14, (CoreML::Specification::FeatureDescription **)v28, (const CoreML::Specification::FeatureDescription **)(v27 + 8), v26, **((_DWORD **)this + 16) - *((_DWORD *)this + 30));
    v29 = *((_DWORD *)this + 30) + v26;
    *((_DWORD *)this + 30) = v29;
    v30 = (signed int *)*((_QWORD *)this + 16);
    if (*v30 < v29)
      *v30 = v29;
  }
  *((_DWORD *)this + 42) = 0;
  v31 = *((_QWORD *)a2 + 1);
  if ((v31 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v31 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  v32 = *((_QWORD *)a2 + 17);
  if (*(char *)(v32 + 23) < 0)
    v33 = *(_QWORD *)(v32 + 8);
  else
    v33 = *(unsigned __int8 *)(v32 + 23);
  if ((__int128 *)v32 != &google::protobuf::internal::fixed_address_empty_string && v33)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 17, v32);
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  v34 = *((_QWORD *)a2 + 18);
  if (*(char *)(v34 + 23) < 0)
    v35 = *(_QWORD *)(v34 + 8);
  else
    v35 = *(unsigned __int8 *)(v34 + 23);
  if ((__int128 *)v34 != &google::protobuf::internal::fixed_address_empty_string && v35)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, v34);
  *((_QWORD *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  v36 = *((_QWORD *)a2 + 19);
  if (*(char *)(v36 + 23) < 0)
    v37 = *(_QWORD *)(v36 + 8);
  else
    v37 = *(unsigned __int8 *)(v36 + 23);
  if ((__int128 *)v36 != &google::protobuf::internal::fixed_address_empty_string && v37)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 19, v36);
  v38 = 0;
  if (a2 != (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_
    && *((_QWORD *)a2 + 20))
  {
    v38 = (CoreML::Specification::Metadata *)operator new();
    CoreML::Specification::Metadata::Metadata(v38, *((const CoreML::Specification::Metadata **)a2 + 20));
  }
  *((_QWORD *)this + 20) = v38;
  return this;
}

void sub_19C9A5650(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  MEMORY[0x1A1AD6260](v7, 0x10A1C40FB0D5B10);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v6);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v3);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::Model *CoreML::Specification::Model::Model(CoreML::Specification::Model *this, const CoreML::Specification::Model *a2)
{
  uint64_t v4;
  CoreML::Specification::ModelDescription *v6;
  int v7;
  int v8;
  CoreML::Specification::OneHotEncoder *v9;
  CoreML::Specification::protobuf_OneHotEncoder_2eproto *v10;
  const CoreML::Specification::OneHotEncoder *v11;
  CoreML::Specification::GLMClassifier *v12;
  CoreML::Specification::protobuf_GLMClassifier_2eproto *v13;
  const CoreML::Specification::GLMClassifier *v14;
  CoreML::Specification::CoreMLModels::TextClassifier *v15;
  CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto *v16;
  const CoreML::Specification::CoreMLModels::TextClassifier *v17;
  CoreML::Specification::GLMRegressor *v18;
  CoreML::Specification::protobuf_GLMRegressor_2eproto *v19;
  const CoreML::Specification::GLMRegressor *v20;
  CoreML::Specification::LinkedModel *v21;
  CoreML::Specification::protobuf_LinkedModel_2eproto *v22;
  const CoreML::Specification::LinkedModel *v23;
  CoreML::Specification::Pipeline *v24;
  CoreML::Specification::Pipeline *v25;
  const CoreML::Specification::Pipeline *v26;
  CoreML::Specification::SerializedModel *v27;
  CoreML::Specification::SerializedModel *v28;
  const CoreML::Specification::SerializedModel *v29;
  CoreML::Specification::ItemSimilarityRecommender *v30;
  CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto *v31;
  const CoreML::Specification::ItemSimilarityRecommender *v32;
  CoreML::Specification::ClassConfidenceThresholding *v33;
  CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto *v34;
  const CoreML::Specification::ClassConfidenceThresholding *v35;
  CoreML::Specification::Imputer *v36;
  CoreML::Specification::protobuf_Imputer_2eproto *v37;
  const CoreML::Specification::Imputer *v38;
  CoreML::Specification::FeatureVectorizer *v39;
  CoreML::Specification::protobuf_FeatureVectorizer_2eproto *v40;
  const CoreML::Specification::FeatureVectorizer *v41;
  CoreML::Specification::DictVectorizer *v42;
  CoreML::Specification::protobuf_DictVectorizer_2eproto *v43;
  const CoreML::Specification::DictVectorizer *v44;
  CoreML::Specification::Scaler *v45;
  CoreML::Specification::protobuf_Scaler_2eproto *v46;
  const CoreML::Specification::Scaler *v47;
  CoreML::Specification::CategoricalMapping *v48;
  CoreML::Specification::protobuf_CategoricalMapping_2eproto *v49;
  const CoreML::Specification::CategoricalMapping *v50;
  uint64_t v51;
  CoreML::Specification::protobuf_Normalizer_2eproto *v52;
  uint64_t *v53;
  CoreML::Specification::ArrayFeatureExtractor *v54;
  CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto *v55;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v56;
  CoreML::Specification::NonMaximumSuppression *v57;
  CoreML::Specification::protobuf_NonMaximumSuppression_2eproto *v58;
  const CoreML::Specification::NonMaximumSuppression *v59;
  CoreML::Specification::SupportVectorClassifier *v60;
  CoreML::Specification::protobuf_SVM_2eproto *v61;
  const CoreML::Specification::SupportVectorClassifier *v62;
  CoreML::Specification::TreeEnsembleClassifier *v63;
  CoreML::Specification::protobuf_TreeEnsemble_2eproto *v64;
  const CoreML::Specification::TreeEnsembleClassifier *v65;
  CoreML::Specification::NeuralNetworkClassifier *v66;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v67;
  const CoreML::Specification::NeuralNetworkClassifier *v68;
  CoreML::Specification::KNearestNeighborsClassifier *v69;
  CoreML::Specification::protobuf_NearestNeighbors_2eproto *v70;
  const CoreML::Specification::KNearestNeighborsClassifier *v71;
  CoreML::Specification::CoreMLModels::WordTagger *v72;
  CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto *v73;
  const CoreML::Specification::CoreMLModels::WordTagger *v74;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint *v75;
  CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto *v76;
  const CoreML::Specification::CoreMLModels::VisionFeaturePrint *v77;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *v78;
  CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto *v79;
  const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *v80;
  CoreML::Specification::CoreMLModels::Gazetteer *v81;
  CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto *v82;
  const CoreML::Specification::CoreMLModels::Gazetteer *v83;
  CoreML::Specification::CoreMLModels::WordEmbedding *v84;
  CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto *v85;
  const CoreML::Specification::CoreMLModels::WordEmbedding *v86;
  CoreML::Specification::CoreMLModels::AudioFeaturePrint *v87;
  CoreML::Specification::CoreMLModels::AudioFeaturePrint *v88;
  const CoreML::Specification::CoreMLModels::AudioFeaturePrint *v89;
  CoreML::Specification::SupportVectorRegressor *v90;
  CoreML::Specification::protobuf_SVM_2eproto *v91;
  const CoreML::Specification::SupportVectorRegressor *v92;
  CoreML::Specification::TreeEnsembleRegressor *v93;
  CoreML::Specification::protobuf_TreeEnsemble_2eproto *v94;
  const CoreML::Specification::TreeEnsembleRegressor *v95;
  CoreML::Specification::NeuralNetworkRegressor *v96;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v97;
  const CoreML::Specification::NeuralNetworkRegressor *v98;
  CoreML::Specification::BayesianProbitRegressor *v99;
  CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto *v100;
  const CoreML::Specification::BayesianProbitRegressor *v101;
  CoreML::Specification::MILSpec::Program *v102;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v103;
  const CoreML::Specification::MILSpec::Program *v104;
  CoreML::Specification::CustomModel *v105;
  CoreML::Specification::protobuf_CustomModel_2eproto *v106;
  const CoreML::Specification::CustomModel *v107;
  CoreML::Specification::PipelineClassifier *v108;
  CoreML::Specification::PipelineClassifier *v109;
  const CoreML::Specification::PipelineClassifier *v110;
  CoreML::Specification::PipelineRegressor *v111;
  CoreML::Specification::PipelineRegressor *v112;
  const CoreML::Specification::PipelineRegressor *v113;
  uint64_t *v114;
  CoreML::Specification::protobuf_Identity_2eproto *v115;
  uint64_t *v116;
  CoreML::Specification::NeuralNetwork *v117;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v118;
  const CoreML::Specification::NeuralNetwork *v119;
  uint64_t v120;
  int v121;
  uint64_t v122;

  *(_QWORD *)this = &off_1E3D57AD0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == (const CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_
    || *((_QWORD *)a2 + 2) == 0)
  {
    v6 = 0;
  }
  else
  {
    v6 = (CoreML::Specification::ModelDescription *)operator new();
    CoreML::Specification::ModelDescription::ModelDescription(v6, *((const CoreML::Specification::ModelDescription **)a2 + 2));
  }
  *((_QWORD *)this + 2) = v6;
  v7 = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 28) = *((_BYTE *)a2 + 28);
  *((_DWORD *)this + 6) = v7;
  *((_DWORD *)this + 11) = 0;
  v8 = *((_DWORD *)a2 + 11);
  if (v8 <= 559)
  {
    if (v8 <= 399)
    {
      if (v8 <= 299)
      {
        switch(v8)
        {
          case 200:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 200;
            v108 = (CoreML::Specification::PipelineClassifier *)operator new();
            v109 = CoreML::Specification::PipelineClassifier::PipelineClassifier(v108);
            *((_QWORD *)this + 4) = v108;
            if (*((_DWORD *)a2 + 11) == 200)
            {
              v110 = (const CoreML::Specification::PipelineClassifier *)*((_QWORD *)a2 + 4);
            }
            else
            {
              CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v109);
              v110 = (const CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_;
            }
            CoreML::Specification::PipelineClassifier::MergeFrom(v108, v110);
            break;
          case 201:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 201;
            v111 = (CoreML::Specification::PipelineRegressor *)operator new();
            v112 = CoreML::Specification::PipelineRegressor::PipelineRegressor(v111);
            *((_QWORD *)this + 4) = v111;
            if (*((_DWORD *)a2 + 11) == 201)
            {
              v113 = (const CoreML::Specification::PipelineRegressor *)*((_QWORD *)a2 + 4);
            }
            else
            {
              CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v112);
              v113 = (const CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_;
            }
            CoreML::Specification::PipelineRegressor::MergeFrom((std::string *)v111, v113);
            break;
          case 202:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 202;
            v24 = (CoreML::Specification::Pipeline *)operator new();
            v25 = CoreML::Specification::Pipeline::Pipeline(v24);
            *((_QWORD *)this + 4) = v24;
            if (*((_DWORD *)a2 + 11) == 202)
            {
              v26 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 4);
            }
            else
            {
              CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v25);
              v26 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
            }
            CoreML::Specification::Pipeline::MergeFrom(v24, v26);
            break;
        }
      }
      else
      {
        switch(v8)
        {
          case 300:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 300;
            v18 = (CoreML::Specification::GLMRegressor *)operator new();
            v19 = CoreML::Specification::GLMRegressor::GLMRegressor(v18);
            *((_QWORD *)this + 4) = v18;
            if (*((_DWORD *)a2 + 11) == 300)
            {
              v20 = (const CoreML::Specification::GLMRegressor *)*((_QWORD *)a2 + 4);
            }
            else
            {
              CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(v19);
              v20 = (const CoreML::Specification::GLMRegressor *)&CoreML::Specification::_GLMRegressor_default_instance_;
            }
            CoreML::Specification::GLMRegressor::MergeFrom((uint64_t *)v18, v20);
            break;
          case 301:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 301;
            v90 = (CoreML::Specification::SupportVectorRegressor *)operator new();
            v91 = CoreML::Specification::SupportVectorRegressor::SupportVectorRegressor(v90);
            *((_QWORD *)this + 4) = v90;
            if (*((_DWORD *)a2 + 11) == 301)
            {
              v92 = (const CoreML::Specification::SupportVectorRegressor *)*((_QWORD *)a2 + 4);
            }
            else
            {
              CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v91);
              v92 = (const CoreML::Specification::SupportVectorRegressor *)&CoreML::Specification::_SupportVectorRegressor_default_instance_;
            }
            CoreML::Specification::SupportVectorRegressor::MergeFrom((std::string *)v90, v92);
            break;
          case 302:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 302;
            v93 = (CoreML::Specification::TreeEnsembleRegressor *)operator new();
            v94 = CoreML::Specification::TreeEnsembleRegressor::TreeEnsembleRegressor(v93);
            *((_QWORD *)this + 4) = v93;
            if (*((_DWORD *)a2 + 11) == 302)
            {
              v95 = (const CoreML::Specification::TreeEnsembleRegressor *)*((_QWORD *)a2 + 4);
            }
            else
            {
              CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(v94);
              v95 = (const CoreML::Specification::TreeEnsembleRegressor *)&CoreML::Specification::_TreeEnsembleRegressor_default_instance_;
            }
            CoreML::Specification::TreeEnsembleRegressor::MergeFrom((std::string *)v93, v95);
            break;
          case 303:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 303;
            v96 = (CoreML::Specification::NeuralNetworkRegressor *)operator new();
            v97 = CoreML::Specification::NeuralNetworkRegressor::NeuralNetworkRegressor(v96);
            *((_QWORD *)this + 4) = v96;
            if (*((_DWORD *)a2 + 11) == 303)
            {
              v98 = (const CoreML::Specification::NeuralNetworkRegressor *)*((_QWORD *)a2 + 4);
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v97);
              v98 = (const CoreML::Specification::NeuralNetworkRegressor *)&CoreML::Specification::_NeuralNetworkRegressor_default_instance_;
            }
            CoreML::Specification::NeuralNetworkRegressor::MergeFrom(v96, v98);
            break;
          case 304:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 304;
            v99 = (CoreML::Specification::BayesianProbitRegressor *)operator new();
            v100 = CoreML::Specification::BayesianProbitRegressor::BayesianProbitRegressor(v99);
            *((_QWORD *)this + 4) = v99;
            if (*((_DWORD *)a2 + 11) == 304)
            {
              v101 = (const CoreML::Specification::BayesianProbitRegressor *)*((_QWORD *)a2 + 4);
            }
            else
            {
              CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(v100);
              v101 = (const CoreML::Specification::BayesianProbitRegressor *)&CoreML::Specification::_BayesianProbitRegressor_default_instance_;
            }
            CoreML::Specification::BayesianProbitRegressor::MergeFrom(v99, v101);
            break;
          default:
            return this;
        }
      }
    }
    else if (v8 > 499)
    {
      if (v8 <= 501)
      {
        if (v8 == 500)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 500;
          v117 = (CoreML::Specification::NeuralNetwork *)operator new();
          v118 = CoreML::Specification::NeuralNetwork::NeuralNetwork(v117);
          *((_QWORD *)this + 4) = v117;
          if (*((_DWORD *)a2 + 11) == 500)
          {
            v119 = (const CoreML::Specification::NeuralNetwork *)*((_QWORD *)a2 + 4);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v118);
            v119 = (const CoreML::Specification::NeuralNetwork *)&CoreML::Specification::_NeuralNetwork_default_instance_;
          }
          CoreML::Specification::NeuralNetwork::MergeFrom(v117, v119);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 501;
          v30 = (CoreML::Specification::ItemSimilarityRecommender *)operator new();
          v31 = CoreML::Specification::ItemSimilarityRecommender::ItemSimilarityRecommender(v30);
          *((_QWORD *)this + 4) = v30;
          if (*((_DWORD *)a2 + 11) == 501)
          {
            v32 = (const CoreML::Specification::ItemSimilarityRecommender *)*((_QWORD *)a2 + 4);
          }
          else
          {
            CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(v31);
            v32 = (const CoreML::Specification::ItemSimilarityRecommender *)&CoreML::Specification::_ItemSimilarityRecommender_default_instance_;
          }
          CoreML::Specification::ItemSimilarityRecommender::MergeFrom(v30, v32);
        }
      }
      else
      {
        switch(v8)
        {
          case 502:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 502;
            v102 = (CoreML::Specification::MILSpec::Program *)operator new();
            v103 = CoreML::Specification::MILSpec::Program::Program(v102);
            *((_QWORD *)this + 4) = v102;
            if (*((_DWORD *)a2 + 11) == 502)
            {
              v104 = (const CoreML::Specification::MILSpec::Program *)*((_QWORD *)a2 + 4);
            }
            else
            {
              CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v103);
              v104 = (const CoreML::Specification::MILSpec::Program *)&CoreML::Specification::MILSpec::_Program_default_instance_;
            }
            CoreML::Specification::MILSpec::Program::MergeFrom(v102, v104);
            break;
          case 555:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 555;
            v105 = (CoreML::Specification::CustomModel *)operator new();
            v106 = CoreML::Specification::CustomModel::CustomModel(v105);
            *((_QWORD *)this + 4) = v105;
            if (*((_DWORD *)a2 + 11) == 555)
            {
              v107 = (const CoreML::Specification::CustomModel *)*((_QWORD *)a2 + 4);
            }
            else
            {
              CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(v106);
              v107 = (const CoreML::Specification::CustomModel *)&CoreML::Specification::_CustomModel_default_instance_;
            }
            CoreML::Specification::CustomModel::MergeFrom(v105, v107);
            break;
          case 556:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 556;
            v21 = (CoreML::Specification::LinkedModel *)operator new();
            v22 = CoreML::Specification::LinkedModel::LinkedModel(v21);
            *((_QWORD *)this + 4) = v21;
            if (*((_DWORD *)a2 + 11) == 556)
            {
              v23 = (const CoreML::Specification::LinkedModel *)*((_QWORD *)a2 + 4);
            }
            else
            {
              CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(v22);
              v23 = (const CoreML::Specification::LinkedModel *)&CoreML::Specification::_LinkedModel_default_instance_;
            }
            CoreML::Specification::LinkedModel::MergeFrom(v21, v23);
            break;
        }
      }
    }
    else
    {
      switch(v8)
      {
        case 400:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 400;
          v12 = (CoreML::Specification::GLMClassifier *)operator new();
          v13 = CoreML::Specification::GLMClassifier::GLMClassifier(v12);
          *((_QWORD *)this + 4) = v12;
          if (*((_DWORD *)a2 + 11) == 400)
          {
            v14 = (const CoreML::Specification::GLMClassifier *)*((_QWORD *)a2 + 4);
          }
          else
          {
            CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(v13);
            v14 = (const CoreML::Specification::GLMClassifier *)&CoreML::Specification::_GLMClassifier_default_instance_;
          }
          CoreML::Specification::GLMClassifier::MergeFrom((std::string *)v12, v14);
          break;
        case 401:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 401;
          v60 = (CoreML::Specification::SupportVectorClassifier *)operator new();
          v61 = CoreML::Specification::SupportVectorClassifier::SupportVectorClassifier(v60);
          *((_QWORD *)this + 4) = v60;
          if (*((_DWORD *)a2 + 11) == 401)
          {
            v62 = (const CoreML::Specification::SupportVectorClassifier *)*((_QWORD *)a2 + 4);
          }
          else
          {
            CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v61);
            v62 = (const CoreML::Specification::SupportVectorClassifier *)&CoreML::Specification::_SupportVectorClassifier_default_instance_;
          }
          CoreML::Specification::SupportVectorClassifier::MergeFrom((std::string *)v60, v62);
          break;
        case 402:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 402;
          v63 = (CoreML::Specification::TreeEnsembleClassifier *)operator new();
          v64 = CoreML::Specification::TreeEnsembleClassifier::TreeEnsembleClassifier(v63);
          *((_QWORD *)this + 4) = v63;
          if (*((_DWORD *)a2 + 11) == 402)
          {
            v65 = (const CoreML::Specification::TreeEnsembleClassifier *)*((_QWORD *)a2 + 4);
          }
          else
          {
            CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(v64);
            v65 = (const CoreML::Specification::TreeEnsembleClassifier *)&CoreML::Specification::_TreeEnsembleClassifier_default_instance_;
          }
          CoreML::Specification::TreeEnsembleClassifier::MergeFrom((std::string *)v63, v65);
          break;
        case 403:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 403;
          v66 = (CoreML::Specification::NeuralNetworkClassifier *)operator new();
          v67 = CoreML::Specification::NeuralNetworkClassifier::NeuralNetworkClassifier(v66);
          *((_QWORD *)this + 4) = v66;
          if (*((_DWORD *)a2 + 11) == 403)
          {
            v68 = (const CoreML::Specification::NeuralNetworkClassifier *)*((_QWORD *)a2 + 4);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v67);
            v68 = (const CoreML::Specification::NeuralNetworkClassifier *)&CoreML::Specification::_NeuralNetworkClassifier_default_instance_;
          }
          CoreML::Specification::NeuralNetworkClassifier::MergeFrom(v66, v68);
          break;
        case 404:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 404;
          v69 = (CoreML::Specification::KNearestNeighborsClassifier *)operator new();
          v70 = CoreML::Specification::KNearestNeighborsClassifier::KNearestNeighborsClassifier(v69);
          *((_QWORD *)this + 4) = v69;
          if (*((_DWORD *)a2 + 11) == 404)
          {
            v71 = (const CoreML::Specification::KNearestNeighborsClassifier *)*((_QWORD *)a2 + 4);
          }
          else
          {
            CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(v70);
            v71 = (const CoreML::Specification::KNearestNeighborsClassifier *)&CoreML::Specification::_KNearestNeighborsClassifier_default_instance_;
          }
          CoreML::Specification::KNearestNeighborsClassifier::MergeFrom(v69, v71);
          break;
        default:
          return this;
      }
    }
  }
  else if (v8 > 899)
  {
    switch(v8)
    {
      case 2000:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2000;
        v15 = (CoreML::Specification::CoreMLModels::TextClassifier *)operator new();
        v16 = CoreML::Specification::CoreMLModels::TextClassifier::TextClassifier(v15);
        *((_QWORD *)this + 4) = v15;
        if (*((_DWORD *)a2 + 11) == 2000)
        {
          v17 = (const CoreML::Specification::CoreMLModels::TextClassifier *)*((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(v16);
          v17 = (const CoreML::Specification::CoreMLModels::TextClassifier *)&CoreML::Specification::CoreMLModels::_TextClassifier_default_instance_;
        }
        CoreML::Specification::CoreMLModels::TextClassifier::MergeFrom(v15, v17);
        break;
      case 2001:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2001;
        v72 = (CoreML::Specification::CoreMLModels::WordTagger *)operator new();
        v73 = CoreML::Specification::CoreMLModels::WordTagger::WordTagger(v72);
        *((_QWORD *)this + 4) = v72;
        if (*((_DWORD *)a2 + 11) == 2001)
        {
          v74 = (const CoreML::Specification::CoreMLModels::WordTagger *)*((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(v73);
          v74 = (const CoreML::Specification::CoreMLModels::WordTagger *)&CoreML::Specification::CoreMLModels::_WordTagger_default_instance_;
        }
        CoreML::Specification::CoreMLModels::WordTagger::MergeFrom(v72, v74);
        break;
      case 2002:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2002;
        v75 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)operator new();
        v76 = CoreML::Specification::CoreMLModels::VisionFeaturePrint::VisionFeaturePrint(v75);
        *((_QWORD *)this + 4) = v75;
        if (*((_DWORD *)a2 + 11) == 2002)
        {
          v77 = (const CoreML::Specification::CoreMLModels::VisionFeaturePrint *)*((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(v76);
          v77 = (const CoreML::Specification::CoreMLModels::VisionFeaturePrint *)&CoreML::Specification::CoreMLModels::_VisionFeaturePrint_default_instance_;
        }
        CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergeFrom((std::string *)v75, v77);
        break;
      case 2003:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2003;
        v78 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)operator new();
        v79 = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SoundAnalysisPreprocessing(v78);
        *((_QWORD *)this + 4) = v78;
        if (*((_DWORD *)a2 + 11) == 2003)
        {
          v80 = (const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)*((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(v79);
          v80 = (const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)&CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_default_instance_;
        }
        CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergeFrom((std::string *)v78, v80);
        break;
      case 2004:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2004;
        v81 = (CoreML::Specification::CoreMLModels::Gazetteer *)operator new();
        v82 = CoreML::Specification::CoreMLModels::Gazetteer::Gazetteer(v81);
        *((_QWORD *)this + 4) = v81;
        if (*((_DWORD *)a2 + 11) == 2004)
        {
          v83 = (const CoreML::Specification::CoreMLModels::Gazetteer *)*((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(v82);
          v83 = (const CoreML::Specification::CoreMLModels::Gazetteer *)&CoreML::Specification::CoreMLModels::_Gazetteer_default_instance_;
        }
        CoreML::Specification::CoreMLModels::Gazetteer::MergeFrom(v81, v83);
        break;
      case 2005:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2005;
        v84 = (CoreML::Specification::CoreMLModels::WordEmbedding *)operator new();
        v85 = CoreML::Specification::CoreMLModels::WordEmbedding::WordEmbedding(v84);
        *((_QWORD *)this + 4) = v84;
        if (*((_DWORD *)a2 + 11) == 2005)
        {
          v86 = (const CoreML::Specification::CoreMLModels::WordEmbedding *)*((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults(v85);
          v86 = (const CoreML::Specification::CoreMLModels::WordEmbedding *)&CoreML::Specification::CoreMLModels::_WordEmbedding_default_instance_;
        }
        CoreML::Specification::CoreMLModels::WordEmbedding::MergeFrom(v84, v86);
        break;
      case 2006:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2006;
        v87 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)operator new();
        v88 = CoreML::Specification::CoreMLModels::AudioFeaturePrint::AudioFeaturePrint(v87);
        *((_QWORD *)this + 4) = v87;
        if (*((_DWORD *)a2 + 11) == 2006)
        {
          v89 = (const CoreML::Specification::CoreMLModels::AudioFeaturePrint *)*((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(v88);
          v89 = (const CoreML::Specification::CoreMLModels::AudioFeaturePrint *)&CoreML::Specification::CoreMLModels::_AudioFeaturePrint_default_instance_;
        }
        CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergeFrom((uint64_t *)v87, v89);
        break;
      default:
        if (v8 == 900)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 900;
          v114 = (uint64_t *)operator new();
          v115 = CoreML::Specification::Identity::Identity((CoreML::Specification::Identity *)v114);
          *((_QWORD *)this + 4) = v114;
          if (*((_DWORD *)a2 + 11) == 900)
          {
            v116 = (uint64_t *)*((_QWORD *)a2 + 4);
          }
          else
          {
            CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(v115);
            v116 = &CoreML::Specification::_Identity_default_instance_;
          }
          v122 = v116[1];
          if ((v122 & 1) != 0)
            google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v114 + 1, v122 & 0xFFFFFFFFFFFFFFFELL);
        }
        else if (v8 == 3000)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 3000;
          v27 = (CoreML::Specification::SerializedModel *)operator new();
          v28 = CoreML::Specification::SerializedModel::SerializedModel(v27);
          *((_QWORD *)this + 4) = v27;
          if (*((_DWORD *)a2 + 11) == 3000)
          {
            v29 = (const CoreML::Specification::SerializedModel *)*((_QWORD *)a2 + 4);
          }
          else
          {
            CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v28);
            v29 = (const CoreML::Specification::SerializedModel *)&CoreML::Specification::_SerializedModel_default_instance_;
          }
          CoreML::Specification::SerializedModel::MergeFrom(v27, v29);
        }
        break;
    }
  }
  else
  {
    switch(v8)
    {
      case 600:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 600;
        v9 = (CoreML::Specification::OneHotEncoder *)operator new();
        v10 = CoreML::Specification::OneHotEncoder::OneHotEncoder(v9);
        *((_QWORD *)this + 4) = v9;
        if (*((_DWORD *)a2 + 11) == 600)
        {
          v11 = (const CoreML::Specification::OneHotEncoder *)*((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults(v10);
          v11 = (const CoreML::Specification::OneHotEncoder *)&CoreML::Specification::_OneHotEncoder_default_instance_;
        }
        CoreML::Specification::OneHotEncoder::MergeFrom((std::string *)v9, v11);
        break;
      case 601:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 601;
        v36 = (CoreML::Specification::Imputer *)operator new();
        v37 = CoreML::Specification::Imputer::Imputer(v36);
        *((_QWORD *)this + 4) = v36;
        if (*((_DWORD *)a2 + 11) == 601)
        {
          v38 = (const CoreML::Specification::Imputer *)*((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(v37);
          v38 = (const CoreML::Specification::Imputer *)&CoreML::Specification::_Imputer_default_instance_;
        }
        CoreML::Specification::Imputer::MergeFrom(v36, v38);
        break;
      case 602:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 602;
        v39 = (CoreML::Specification::FeatureVectorizer *)operator new();
        v40 = CoreML::Specification::FeatureVectorizer::FeatureVectorizer(v39);
        *((_QWORD *)this + 4) = v39;
        if (*((_DWORD *)a2 + 11) == 602)
        {
          v41 = (const CoreML::Specification::FeatureVectorizer *)*((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults(v40);
          v41 = (const CoreML::Specification::FeatureVectorizer *)&CoreML::Specification::_FeatureVectorizer_default_instance_;
        }
        CoreML::Specification::FeatureVectorizer::MergeFrom(v39, v41);
        break;
      case 603:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 603;
        v42 = (CoreML::Specification::DictVectorizer *)operator new();
        v43 = CoreML::Specification::DictVectorizer::DictVectorizer(v42);
        *((_QWORD *)this + 4) = v42;
        if (*((_DWORD *)a2 + 11) == 603)
        {
          v44 = (const CoreML::Specification::DictVectorizer *)*((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(v43);
          v44 = (const CoreML::Specification::DictVectorizer *)&CoreML::Specification::_DictVectorizer_default_instance_;
        }
        CoreML::Specification::DictVectorizer::MergeFrom((std::string *)v42, v44);
        break;
      case 604:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 604;
        v45 = (CoreML::Specification::Scaler *)operator new();
        v46 = CoreML::Specification::Scaler::Scaler(v45);
        *((_QWORD *)this + 4) = v45;
        if (*((_DWORD *)a2 + 11) == 604)
        {
          v47 = (const CoreML::Specification::Scaler *)*((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(v46);
          v47 = (const CoreML::Specification::Scaler *)&CoreML::Specification::_Scaler_default_instance_;
        }
        CoreML::Specification::Scaler::MergeFrom((uint64_t *)v45, v47);
        break;
      case 605:
      case 608:
        return this;
      case 606:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 606;
        v48 = (CoreML::Specification::CategoricalMapping *)operator new();
        v49 = CoreML::Specification::CategoricalMapping::CategoricalMapping(v48);
        *((_QWORD *)this + 4) = v48;
        if (*((_DWORD *)a2 + 11) == 606)
        {
          v50 = (const CoreML::Specification::CategoricalMapping *)*((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(v49);
          v50 = (const CoreML::Specification::CategoricalMapping *)&CoreML::Specification::_CategoricalMapping_default_instance_;
        }
        CoreML::Specification::CategoricalMapping::MergeFrom(v48, v50);
        break;
      case 607:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 607;
        v51 = operator new();
        v52 = CoreML::Specification::Normalizer::Normalizer((CoreML::Specification::Normalizer *)v51);
        *((_QWORD *)this + 4) = v51;
        if (*((_DWORD *)a2 + 11) == 607)
        {
          v53 = (uint64_t *)*((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(v52);
          v53 = &CoreML::Specification::_Normalizer_default_instance_;
        }
        v120 = v53[1];
        if ((v120 & 1) != 0)
          google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v51 + 8), v120 & 0xFFFFFFFFFFFFFFFELL);
        v121 = *((_DWORD *)v53 + 4);
        if (v121)
          *(_DWORD *)(v51 + 16) = v121;
        break;
      case 609:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 609;
        v54 = (CoreML::Specification::ArrayFeatureExtractor *)operator new();
        v55 = CoreML::Specification::ArrayFeatureExtractor::ArrayFeatureExtractor(v54);
        *((_QWORD *)this + 4) = v54;
        if (*((_DWORD *)a2 + 11) == 609)
        {
          v56 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults(v55);
          v56 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&CoreML::Specification::_ArrayFeatureExtractor_default_instance_;
        }
        CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v54, v56);
        break;
      case 610:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 610;
        v57 = (CoreML::Specification::NonMaximumSuppression *)operator new();
        v58 = CoreML::Specification::NonMaximumSuppression::NonMaximumSuppression(v57);
        *((_QWORD *)this + 4) = v57;
        if (*((_DWORD *)a2 + 11) == 610)
        {
          v59 = (const CoreML::Specification::NonMaximumSuppression *)*((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(v58);
          v59 = (const CoreML::Specification::NonMaximumSuppression *)&CoreML::Specification::_NonMaximumSuppression_default_instance_;
        }
        CoreML::Specification::NonMaximumSuppression::MergeFrom(v57, v59);
        break;
      default:
        if (v8 == 560)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 560;
          v33 = (CoreML::Specification::ClassConfidenceThresholding *)operator new();
          v34 = CoreML::Specification::ClassConfidenceThresholding::ClassConfidenceThresholding(v33);
          *((_QWORD *)this + 4) = v33;
          if (*((_DWORD *)a2 + 11) == 560)
          {
            v35 = (const CoreML::Specification::ClassConfidenceThresholding *)*((_QWORD *)a2 + 4);
          }
          else
          {
            CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults(v34);
            v35 = (const CoreML::Specification::ClassConfidenceThresholding *)&CoreML::Specification::_ClassConfidenceThresholding_default_instance_;
          }
          CoreML::Specification::ClassConfidenceThresholding::MergeFrom((std::string *)v33, v35);
        }
        break;
    }
  }
  return this;
}

void sub_19C9A66B8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1A1AD6260](v2, 0x10A1C40280AC348);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateConvolutionLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  unint64_t *inited;
  char *v7;
  uint64_t *v8;
  std::string *v9;
  __int128 v10;
  uint64_t *v11;
  std::string *v12;
  __int128 v13;
  int v14;
  int v15;
  std::string *v16;
  __int128 v17;
  void *v18;
  int v19;
  uint64_t v20;
  std::string *v21;
  __int128 v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  std::string *v29;
  __int128 v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t *v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  std::string *v49;
  __int128 v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  std::string::size_type size;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  std::string::size_type v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  std::string::size_type v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  __int128 v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  std::string::size_type v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  __int128 v97;
  std::string *v98;
  std::string::size_type v99;
  std::string *v100;
  __int128 v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  std::string::size_type v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  std::string::size_type v111;
  std::string *v112;
  __int128 v113;
  std::string *v114;
  __int128 v115;
  std::string *v116;
  std::string::size_type v117;
  std::string *v118;
  __int128 v119;
  std::string *v120;
  __int128 v121;
  std::string *v122;
  __int128 v123;
  unint64_t v124;
  std::string *v125;
  __int128 v126;
  std::string *v127;
  std::string::size_type v128;
  std::string *v129;
  __int128 v130;
  std::string *v131;
  __int128 v132;
  std::string *v133;
  std::string::size_type v134;
  std::string *v135;
  __int128 v136;
  std::string *v137;
  __int128 v138;
  unint64_t v139;
  unint64_t __val;
  unint64_t v141;
  std::string v142;
  std::string v143;
  std::string v144;
  std::string v145;
  std::string v146;
  std::string v147;
  std::string v148;
  std::string v149;
  std::string v150;
  std::string v151;
  std::string v152;
  std::string v153;
  std::string v154;
  std::string v155;
  std::string v156;
  std::string v157;
  __int128 v158;
  std::string::size_type v159;
  void *v160[2];
  char v161;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v160, "Convolution");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)v160, (uint64_t)v7);
        if (v161 < 0)
          operator delete(v160[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(&v158, "Convolution");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)&v158, 4, -1, (uint64_t)v7);
        if (SHIBYTE(v159) < 0)
          operator delete((void *)v158);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      else if (*(_DWORD *)(a3 + 24) != 1)
      {
        std::operator+<char>();
        v9 = std::string::append(&v157, "' does not support weight as input tensor when RANK5_ARRAY_MAPPING == true.");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v159 = v9->__r_.__value_.__r.__words[2];
        v158 = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
        goto LABEL_37;
      }
      if (*(_DWORD *)(a3 + 140) == 100)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v8 = &CoreML::Specification::_ConvolutionLayerParams_default_instance_;
      }
      if (!*((_DWORD *)v8 + 43))
      {
        std::operator+<char>();
        v12 = std::string::append(&v157, "' is not set.");
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        v159 = v12->__r_.__value_.__r.__words[2];
        v158 = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
        goto LABEL_37;
      }
      if (*(_DWORD *)(a3 + 140) == 100)
      {
        v11 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v11 = &CoreML::Specification::_ConvolutionLayerParams_default_instance_;
      }
      v14 = *((unsigned __int8 *)v11 + 152);
      v15 = *(_DWORD *)(a3 + 24);
      if (*((_BYTE *)v11 + 152) && v15 != 1)
      {
        std::operator+<char>();
        v16 = std::string::append(&v157, "' does not support weight as input tensor.");
        v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v159 = v16->__r_.__value_.__r.__words[2];
        v158 = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
LABEL_37:
        *this = (void *)13;
        std::operator+<char>();
LABEL_38:
        if ((SHIBYTE(v159) & 0x80000000) == 0)
          return;
        v18 = (void *)v158;
        goto LABEL_40;
      }
      if (v15 != 1)
      {
        v19 = *((_DWORD *)v11 + 16);
        if (v19 >= 1)
        {
          v20 = v11[9];
          if (*(_QWORD *)(v20 + 8) > 1uLL || v19 >= 2 && *(_QWORD *)(v20 + 16) >= 2uLL)
          {
            std::operator+<char>();
            v21 = std::string::append(&v157, "' , dilated convolution does not support weight as input tensor.");
            v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
            v159 = v21->__r_.__value_.__r.__words[2];
            v158 = v22;
            v21->__r_.__value_.__l.__size_ = 0;
            v21->__r_.__value_.__r.__words[2] = 0;
            v21->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v157.__r_.__value_.__l.__data_);
            goto LABEL_37;
          }
        }
      }
      if ((unint64_t)v11[18] <= 1)
        v23 = 1;
      else
        v23 = v11[18];
      v24 = *((_DWORD *)v11 + 4);
      if (v24 < 1)
      {
        v26 = 3;
      }
      else
      {
        v25 = v11[3];
        v26 = *(_QWORD *)(v25 + 8);
        if (v24 != 1)
        {
          v27 = *(_QWORD *)(v25 + 16);
          goto LABEL_57;
        }
      }
      v27 = 3;
LABEL_57:
      if (v15 > 1)
        goto LABEL_58;
      v28 = *((unsigned __int8 *)v11 + 153);
      if (v15 != 1 && *((_BYTE *)v11 + 153))
      {
        std::operator+<char>();
        v29 = std::string::append(&v157, "' with dynamic weight does not support static bias.");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v159 = v29->__r_.__value_.__r.__words[2];
        v158 = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
        goto LABEL_37;
      }
      __val = v11[17];
      v141 = v11[16];
      v139 = v27;
      if (v11[14])
        v31 = (uint64_t *)v11[14];
      else
        v31 = &CoreML::Specification::_WeightParams_default_instance_;
      v32 = CoreML::valueType(v31);
      if (v11[15])
        v33 = (uint64_t *)v11[15];
      else
        v33 = &CoreML::Specification::_WeightParams_default_instance_;
      v34 = CoreML::valueType(v33);
      if (v28)
        v35 = v34 == 4;
      else
        v35 = 0;
      v36 = v35;
      if (v32 == 4 || v36)
      {
        std::operator+<char>();
        v39 = std::string::append(&v157, "'  has invalid weights/bias fields.");
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v159 = v39->__r_.__value_.__r.__words[2];
        v158 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
        goto LABEL_37;
      }
      if (v28 && (v32 == 1 && !v34 || !v32 && v34 == 1))
      {
        std::operator+<char>();
        v37 = std::string::append(&v157, "has unmatched precisions of weights/bias They should either be half or full precision.");
        v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v159 = v37->__r_.__value_.__r.__words[2];
        v158 = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        *this = (void *)13;
        std::operator+<char>();
LABEL_102:
        if (SHIBYTE(v159) < 0)
          operator delete((void *)v158);
        if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v18 = (void *)v157.__r_.__value_.__r.__words[0];
LABEL_40:
        operator delete(v18);
        return;
      }
      v41 = v141;
      if (v14)
        v41 = v141 / v23;
      v42 = v41 * __val;
      v43 = v139 * v26 * v42;
      if (v32 > 1)
      {
        if (v32 != 2)
        {
          std::operator+<char>();
          v49 = std::string::append(&v157, "has not specified weights.");
          v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          v159 = v49->__r_.__value_.__r.__words[2];
          v158 = v50;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          *this = (void *)13;
          std::operator+<char>();
          goto LABEL_102;
        }
        v46 = v139 * v26 * v42;
        v47 = v34;
        std::string::basic_string[abi:ne180100]<0>(&v158, "Convolution");
        v48 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(&v157, "weight");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v31, v46, v141, (const void **)&v158, v48, (uint64_t)&v157);
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
        if (SHIBYTE(v159) < 0)
          operator delete((void *)v158);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        v34 = v47;
        if (*((char *)this + 31) < 0)
        {
          operator delete(this[1]);
          v34 = v47;
        }
      }
      else
      {
        if (v32)
        {
          v44 = v31[5];
          if (*(char *)(v44 + 23) < 0)
            v45 = *(_QWORD *)(v44 + 8);
          else
            v45 = *(unsigned __int8 *)(v44 + 23);
          v51 = v45 >> 1;
        }
        else
        {
          v51 = *((int *)v31 + 4);
        }
        if (v51 != v43)
        {
          if (v14)
          {
            std::operator+<char>();
            v55 = std::string::append(&v147, "' has weight matrix of size ");
            v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
            v148.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v56;
            v55->__r_.__value_.__l.__size_ = 0;
            v55->__r_.__value_.__r.__words[2] = 0;
            v55->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v146, v51);
            if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v57 = &v146;
            else
              v57 = (std::string *)v146.__r_.__value_.__r.__words[0];
            if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v146.__r_.__value_.__r.__words[2]);
            else
              size = v146.__r_.__value_.__l.__size_;
            v59 = std::string::append(&v148, (const std::string::value_type *)v57, size);
            v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
            v149.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v60;
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            v61 = std::string::append(&v149, " to encode a ");
            v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
            v150.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v62;
            v61->__r_.__value_.__l.__size_ = 0;
            v61->__r_.__value_.__r.__words[2] = 0;
            v61->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v145, __val);
            if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v63 = &v145;
            else
              v63 = (std::string *)v145.__r_.__value_.__r.__words[0];
            if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v64 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
            else
              v64 = v145.__r_.__value_.__l.__size_;
            v65 = std::string::append(&v150, (const std::string::value_type *)v63, v64);
            v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
            v151.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v66;
            v65->__r_.__value_.__l.__size_ = 0;
            v65->__r_.__value_.__r.__words[2] = 0;
            v65->__r_.__value_.__r.__words[0] = 0;
            v67 = std::string::append(&v151, " × ");
            v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
            v152.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v68;
            v67->__r_.__value_.__l.__size_ = 0;
            v67->__r_.__value_.__r.__words[2] = 0;
            v67->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v144, v141 / v23);
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v69 = &v144;
            else
              v69 = (std::string *)v144.__r_.__value_.__r.__words[0];
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v70 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
            else
              v70 = v144.__r_.__value_.__l.__size_;
            v71 = std::string::append(&v152, (const std::string::value_type *)v69, v70);
            v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
            v153.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v72;
            v71->__r_.__value_.__l.__size_ = 0;
            v71->__r_.__value_.__r.__words[2] = 0;
            v71->__r_.__value_.__r.__words[0] = 0;
            v73 = std::string::append(&v153, " × ");
            v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
            v154.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v74;
            v73->__r_.__value_.__l.__size_ = 0;
            v73->__r_.__value_.__r.__words[2] = 0;
            v73->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v143, v26);
            if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v75 = &v143;
            else
              v75 = (std::string *)v143.__r_.__value_.__r.__words[0];
            if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v76 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
            else
              v76 = v143.__r_.__value_.__l.__size_;
            v77 = std::string::append(&v154, (const std::string::value_type *)v75, v76);
            v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
            v155.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v78;
            v77->__r_.__value_.__l.__size_ = 0;
            v77->__r_.__value_.__r.__words[2] = 0;
            v77->__r_.__value_.__r.__words[0] = 0;
            v79 = std::string::append(&v155, " × ");
            v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
            v156.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v80;
            v79->__r_.__value_.__l.__size_ = 0;
            v79->__r_.__value_.__r.__words[2] = 0;
            v79->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v142, v139);
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v81 = &v142;
            else
              v81 = (std::string *)v142.__r_.__value_.__r.__words[0];
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v82 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
            else
              v82 = v142.__r_.__value_.__l.__size_;
            v83 = std::string::append(&v156, (const std::string::value_type *)v81, v82);
            v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
            v157.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v84;
            v83->__r_.__value_.__l.__size_ = 0;
            v83->__r_.__value_.__r.__words[2] = 0;
            v83->__r_.__value_.__r.__words[0] = 0;
            v85 = std::string::append(&v157, " convolution.");
            v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
            v159 = v85->__r_.__value_.__r.__words[2];
            v158 = v86;
            v85->__r_.__value_.__l.__size_ = 0;
            v85->__r_.__value_.__r.__words[2] = 0;
            v85->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v157.__r_.__value_.__l.__data_);
            if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v142.__r_.__value_.__l.__data_);
            if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v156.__r_.__value_.__l.__data_);
            if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v155.__r_.__value_.__l.__data_);
            if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v143.__r_.__value_.__l.__data_);
            if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v154.__r_.__value_.__l.__data_);
            if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v153.__r_.__value_.__l.__data_);
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v144.__r_.__value_.__l.__data_);
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v152.__r_.__value_.__l.__data_);
            if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v151.__r_.__value_.__l.__data_);
            if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v145.__r_.__value_.__l.__data_);
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v150.__r_.__value_.__l.__data_);
            if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v149.__r_.__value_.__l.__data_);
            if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v146.__r_.__value_.__l.__data_);
            if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v148.__r_.__value_.__l.__data_);
            if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v147.__r_.__value_.__l.__data_);
          }
          else
          {
            std::operator+<char>();
            v90 = std::string::append(&v147, "' has weight matrix of size ");
            v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
            v148.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v91;
            v90->__r_.__value_.__l.__size_ = 0;
            v90->__r_.__value_.__r.__words[2] = 0;
            v90->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v146, v51);
            if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v92 = &v146;
            else
              v92 = (std::string *)v146.__r_.__value_.__r.__words[0];
            if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v93 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
            else
              v93 = v146.__r_.__value_.__l.__size_;
            v94 = std::string::append(&v148, (const std::string::value_type *)v92, v93);
            v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
            v149.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v95;
            v94->__r_.__value_.__l.__size_ = 0;
            v94->__r_.__value_.__r.__words[2] = 0;
            v94->__r_.__value_.__r.__words[0] = 0;
            v96 = std::string::append(&v149, " to encode a ");
            v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
            v150.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v97;
            v96->__r_.__value_.__l.__size_ = 0;
            v96->__r_.__value_.__r.__words[2] = 0;
            v96->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v145, v141);
            if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v98 = &v145;
            else
              v98 = (std::string *)v145.__r_.__value_.__r.__words[0];
            if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v99 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
            else
              v99 = v145.__r_.__value_.__l.__size_;
            v100 = std::string::append(&v150, (const std::string::value_type *)v98, v99);
            v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
            v151.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v101;
            v100->__r_.__value_.__l.__size_ = 0;
            v100->__r_.__value_.__r.__words[2] = 0;
            v100->__r_.__value_.__r.__words[0] = 0;
            v102 = std::string::append(&v151, " × ");
            v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
            v152.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v103;
            v102->__r_.__value_.__l.__size_ = 0;
            v102->__r_.__value_.__r.__words[2] = 0;
            v102->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v144, __val);
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v104 = &v144;
            else
              v104 = (std::string *)v144.__r_.__value_.__r.__words[0];
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v105 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
            else
              v105 = v144.__r_.__value_.__l.__size_;
            v106 = std::string::append(&v152, (const std::string::value_type *)v104, v105);
            v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
            v153.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v107;
            v106->__r_.__value_.__l.__size_ = 0;
            v106->__r_.__value_.__r.__words[2] = 0;
            v106->__r_.__value_.__r.__words[0] = 0;
            v108 = std::string::append(&v153, " × ");
            v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
            v154.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v109;
            v108->__r_.__value_.__l.__size_ = 0;
            v108->__r_.__value_.__r.__words[2] = 0;
            v108->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v143, v26);
            if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v110 = &v143;
            else
              v110 = (std::string *)v143.__r_.__value_.__r.__words[0];
            if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v111 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
            else
              v111 = v143.__r_.__value_.__l.__size_;
            v112 = std::string::append(&v154, (const std::string::value_type *)v110, v111);
            v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
            v155.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v113;
            v112->__r_.__value_.__l.__size_ = 0;
            v112->__r_.__value_.__r.__words[2] = 0;
            v112->__r_.__value_.__r.__words[0] = 0;
            v114 = std::string::append(&v155, " × ");
            v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
            v156.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v115;
            v114->__r_.__value_.__l.__size_ = 0;
            v114->__r_.__value_.__r.__words[2] = 0;
            v114->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v142, v139);
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v116 = &v142;
            else
              v116 = (std::string *)v142.__r_.__value_.__r.__words[0];
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v117 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
            else
              v117 = v142.__r_.__value_.__l.__size_;
            v118 = std::string::append(&v156, (const std::string::value_type *)v116, v117);
            v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
            v157.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v119;
            v118->__r_.__value_.__l.__size_ = 0;
            v118->__r_.__value_.__r.__words[2] = 0;
            v118->__r_.__value_.__r.__words[0] = 0;
            v120 = std::string::append(&v157, " convolution.");
            v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
            v159 = v120->__r_.__value_.__r.__words[2];
            v158 = v121;
            v120->__r_.__value_.__l.__size_ = 0;
            v120->__r_.__value_.__r.__words[2] = 0;
            v120->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v157.__r_.__value_.__l.__data_);
            if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v142.__r_.__value_.__l.__data_);
            if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v156.__r_.__value_.__l.__data_);
            if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v155.__r_.__value_.__l.__data_);
            if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v143.__r_.__value_.__l.__data_);
            if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v154.__r_.__value_.__l.__data_);
            if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v153.__r_.__value_.__l.__data_);
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v144.__r_.__value_.__l.__data_);
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v152.__r_.__value_.__l.__data_);
            if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v151.__r_.__value_.__l.__data_);
            if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v145.__r_.__value_.__l.__data_);
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v150.__r_.__value_.__l.__data_);
            if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v149.__r_.__value_.__l.__data_);
            if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v146.__r_.__value_.__l.__data_);
            if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v148.__r_.__value_.__l.__data_);
            if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v147.__r_.__value_.__l.__data_);
          }
          *this = (void *)13;
          std::operator+<char>();
          goto LABEL_38;
        }
      }
      if (!v28)
        goto LABEL_58;
      if (v34 > 1)
      {
        if (v34 != 2)
        {
          std::operator+<char>();
          v122 = std::string::append(&v157, "has not specified bias.");
          v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
          v159 = v122->__r_.__value_.__r.__words[2];
          v158 = v123;
          v122->__r_.__value_.__l.__size_ = 0;
          v122->__r_.__value_.__r.__words[2] = 0;
          v122->__r_.__value_.__r.__words[0] = 0;
          *this = (void *)13;
          std::operator+<char>();
          goto LABEL_102;
        }
        v87 = (uint64_t *)v11[15];
        std::string::basic_string[abi:ne180100]<0>(&v158, "Convolution");
        v88 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(&v157, "bias");
        if (v87)
          v89 = v87;
        else
          v89 = &CoreML::Specification::_WeightParams_default_instance_;
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v89, v141, 1, (const void **)&v158, v88, (uint64_t)&v157);
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
        if (SHIBYTE(v159) < 0)
          operator delete((void *)v158);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      else
      {
        v52 = (uint64_t *)v11[15];
        if (!v52)
          v52 = &CoreML::Specification::_WeightParams_default_instance_;
        if (v34)
        {
          v53 = v52[5];
          if (*(char *)(v53 + 23) < 0)
            v54 = *(_QWORD *)(v53 + 8);
          else
            v54 = *(unsigned __int8 *)(v53 + 23);
          v124 = v54 >> 1;
        }
        else
        {
          v124 = *((int *)v52 + 4);
        }
        if (v124 != v141)
        {
          std::operator+<char>();
          v125 = std::string::append(&v153, "' has a bias vector of size ");
          v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
          v154.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v126;
          v125->__r_.__value_.__l.__size_ = 0;
          v125->__r_.__value_.__r.__words[2] = 0;
          v125->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v152, v124);
          if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v127 = &v152;
          else
            v127 = (std::string *)v152.__r_.__value_.__r.__words[0];
          if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v128 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
          else
            v128 = v152.__r_.__value_.__l.__size_;
          v129 = std::string::append(&v154, (const std::string::value_type *)v127, v128);
          v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
          v155.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v130;
          v129->__r_.__value_.__l.__size_ = 0;
          v129->__r_.__value_.__r.__words[2] = 0;
          v129->__r_.__value_.__r.__words[0] = 0;
          v131 = std::string::append(&v155, " but should be ");
          v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
          v156.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v132;
          v131->__r_.__value_.__l.__size_ = 0;
          v131->__r_.__value_.__r.__words[2] = 0;
          v131->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v151, v141);
          if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v133 = &v151;
          else
            v133 = (std::string *)v151.__r_.__value_.__r.__words[0];
          if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v134 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
          else
            v134 = v151.__r_.__value_.__l.__size_;
          v135 = std::string::append(&v156, (const std::string::value_type *)v133, v134);
          v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
          v157.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v136;
          v135->__r_.__value_.__l.__size_ = 0;
          v135->__r_.__value_.__r.__words[2] = 0;
          v135->__r_.__value_.__r.__words[0] = 0;
          v137 = std::string::append(&v157, ".");
          v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
          v159 = v137->__r_.__value_.__r.__words[2];
          v158 = v138;
          v137->__r_.__value_.__l.__size_ = 0;
          v137->__r_.__value_.__r.__words[2] = 0;
          v137->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v157.__r_.__value_.__l.__data_);
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v151.__r_.__value_.__l.__data_);
          if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v156.__r_.__value_.__l.__data_);
          if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v155.__r_.__value_.__l.__data_);
          if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v152.__r_.__value_.__l.__data_);
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v154.__r_.__value_.__l.__data_);
          if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v153.__r_.__value_.__l.__data_);
          *this = (void *)13;
          std::operator+<char>();
          goto LABEL_38;
        }
      }
LABEL_58:
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void sub_19C9A7AB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void CoreML::validateInputCount(CoreML *this, const CoreML::Specification::NeuralNetworkLayer *a2, int a3, int a4)
{
  __int128 *v8;
  __int128 v9;
  __int128 *v10;
  __int128 v11;
  __int128 *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  void *v67;
  char v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  void *v80;
  __int128 v81;
  _QWORD v82[3];

  v82[2] = *MEMORY[0x1E0C80C00];
  v80 = 0;
  v81 = 0uLL;
  if (a4 >= 1 && a4 == a3 && *((_DWORD *)a2 + 6) != a4)
  {
    v12 = (__int128 *)*((_QWORD *)a2 + 14);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *v12;
      v72.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v13;
    }
    v14 = std::string::insert(&v72, 0, "Layer '");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v73, "' of type ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v71, *((_DWORD *)a2 + 35));
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v71;
    else
      v18 = (std::string *)v71.__r_.__value_.__r.__words[0];
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      size = v71.__r_.__value_.__l.__size_;
    v20 = std::string::append(&v74, (const std::string::value_type *)v18, size);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v75, " has ");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v70, *((_DWORD *)a2 + 6));
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v70;
    else
      v24 = (std::string *)v70.__r_.__value_.__r.__words[0];
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    else
      v25 = v70.__r_.__value_.__l.__size_;
    v26 = std::string::append(&v76, (const std::string::value_type *)v24, v25);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v28 = std::string::append(&v77, " inputs but expects exactly ");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v69, a4);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v69;
    else
      v30 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      v31 = v69.__r_.__value_.__l.__size_;
  }
  else if (a3 < 1 || *((_DWORD *)a2 + 6) >= a3)
  {
    if (a4 < 1 || *((_DWORD *)a2 + 6) <= a4)
    {
      CoreML::Result::Result(this);
      return;
    }
    v10 = (__int128 *)*((_QWORD *)a2 + 14);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *v10;
      v72.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v11;
    }
    v48 = std::string::insert(&v72, 0, "Layer '");
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    v50 = std::string::append(&v73, "' of type ");
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v71, *((_DWORD *)a2 + 35));
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = &v71;
    else
      v52 = (std::string *)v71.__r_.__value_.__r.__words[0];
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      v53 = v71.__r_.__value_.__l.__size_;
    v54 = std::string::append(&v74, (const std::string::value_type *)v52, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    v56 = std::string::append(&v75, " has ");
    v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v70, *((_DWORD *)a2 + 6));
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = &v70;
    else
      v58 = (std::string *)v70.__r_.__value_.__r.__words[0];
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    else
      v59 = v70.__r_.__value_.__l.__size_;
    v60 = std::string::append(&v76, (const std::string::value_type *)v58, v59);
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    v62 = std::string::append(&v77, " inputs but expects at most ");
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v69, a4);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v69;
    else
      v30 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      v31 = v69.__r_.__value_.__l.__size_;
  }
  else
  {
    v8 = (__int128 *)*((_QWORD *)a2 + 14);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      v72.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v9;
    }
    v32 = std::string::insert(&v72, 0, "Layer '");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v73, "' of type ");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v71, *((_DWORD *)a2 + 35));
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v71;
    else
      v36 = (std::string *)v71.__r_.__value_.__r.__words[0];
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      v37 = v71.__r_.__value_.__l.__size_;
    v38 = std::string::append(&v74, (const std::string::value_type *)v36, v37);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    v40 = std::string::append(&v75, " has ");
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v70, *((_DWORD *)a2 + 6));
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v70;
    else
      v42 = (std::string *)v70.__r_.__value_.__r.__words[0];
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    else
      v43 = v70.__r_.__value_.__l.__size_;
    v44 = std::string::append(&v76, (const std::string::value_type *)v42, v43);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v46 = std::string::append(&v77, " inputs but expects at least ");
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v69, a3);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v69;
    else
      v30 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      v31 = v69.__r_.__value_.__l.__size_;
  }
  v64 = std::string::append(&v78, (const std::string::value_type *)v30, v31);
  v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  v66 = std::string::append(&v79, ".");
  v67 = (void *)v66->__r_.__value_.__r.__words[0];
  v82[0] = v66->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v82 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
  v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)((char *)&v81 + 7) = *(_QWORD *)((char *)v82 + 7);
  v80 = v67;
  *(_QWORD *)&v81 = v82[0];
  HIBYTE(v81) = v68;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  *(_QWORD *)this = 13;
  std::operator+<char>();
  if (SHIBYTE(v81) < 0)
    operator delete(v80);
}

void sub_19C9A84E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  _Unwind_Resume(exception_object);
}

void sub_19C9A8658()
{
  uint64_t v0;

  if (*(char *)(v0 - 73) < 0)
    JUMPOUT(0x19C9A8634);
  JUMPOUT(0x19C9A8638);
}

void CoreML::validateOutputCount(CoreML *this, const CoreML::Specification::NeuralNetworkLayer *a2, int a3, int a4)
{
  int v8;
  BOOL v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *p_p;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type size;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  void *v57;
  char v58;
  std::string __p;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  void *v69;
  __int128 v70;
  _QWORD v71[3];

  v71[2] = *MEMORY[0x1E0C80C00];
  v69 = 0;
  v70 = 0uLL;
  v8 = *((_DWORD *)a2 + 12);
  if (a4 < 1 || a4 != a3 || (v9 = v8 == a4, v8 = a4, v9))
  {
    if (v8 >= a3)
    {
      if (a4 < 1 || v8 <= a4)
      {
        CoreML::Result::Result(this);
        return;
      }
      std::operator+<char>();
      v26 = std::string::append(&v62, "' of type ");
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v61, *((_DWORD *)a2 + 35));
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &v61;
      else
        v28 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      else
        size = v61.__r_.__value_.__l.__size_;
      v30 = std::string::append(&v63, (const std::string::value_type *)v28, size);
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      v32 = std::string::append(&v64, " has ");
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v60, *((_DWORD *)a2 + 12));
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v60;
      else
        v34 = (std::string *)v60.__r_.__value_.__r.__words[0];
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      else
        v35 = v60.__r_.__value_.__l.__size_;
      v36 = std::string::append(&v65, (const std::string::value_type *)v34, v35);
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      v38 = std::string::append(&v66, " outputs but expects at most ");
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&__p, a4);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v25 = __p.__r_.__value_.__l.__size_;
    }
    else
    {
      std::operator+<char>();
      v10 = std::string::append(&v62, "' of type ");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v61, *((_DWORD *)a2 + 35));
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v61;
      else
        v12 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      else
        v13 = v61.__r_.__value_.__l.__size_;
      v14 = std::string::append(&v63, (const std::string::value_type *)v12, v13);
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      v16 = std::string::append(&v64, " has ");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v60, *((_DWORD *)a2 + 12));
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v60;
      else
        v18 = (std::string *)v60.__r_.__value_.__r.__words[0];
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      else
        v19 = v60.__r_.__value_.__l.__size_;
      v20 = std::string::append(&v65, (const std::string::value_type *)v18, v19);
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      v22 = std::string::append(&v66, " outputs but expects at least ");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&__p, a3);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v25 = __p.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    std::operator+<char>();
    v40 = std::string::append(&v62, "' of type ");
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v61, *((_DWORD *)a2 + 35));
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v61;
    else
      v42 = (std::string *)v61.__r_.__value_.__r.__words[0];
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    else
      v43 = v61.__r_.__value_.__l.__size_;
    v44 = std::string::append(&v63, (const std::string::value_type *)v42, v43);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v46 = std::string::append(&v64, " has ");
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v60, *((_DWORD *)a2 + 12));
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v60;
    else
      v48 = (std::string *)v60.__r_.__value_.__r.__words[0];
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    else
      v49 = v60.__r_.__value_.__l.__size_;
    v50 = std::string::append(&v65, (const std::string::value_type *)v48, v49);
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    v52 = std::string::append(&v66, " outputs but expects exactly ");
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a4);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v25 = __p.__r_.__value_.__l.__size_;
  }
  v54 = std::string::append(&v67, (const std::string::value_type *)p_p, v25);
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  v56 = std::string::append(&v68, ".");
  v57 = (void *)v56->__r_.__value_.__r.__words[0];
  v71[0] = v56->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v71 + 7) = *(std::string::size_type *)((char *)&v56->__r_.__value_.__r.__words[1] + 7);
  v58 = HIBYTE(v56->__r_.__value_.__r.__words[2]);
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)((char *)&v70 + 7) = *(_QWORD *)((char *)v71 + 7);
  v69 = v57;
  *(_QWORD *)&v70 = v71[0];
  HIBYTE(v70) = v58;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  *(_QWORD *)this = 13;
  std::operator+<char>();
  if (SHIBYTE(v70) < 0)
    operator delete(v69);
}

void sub_19C9A8C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (*(char *)(v59 - 105) < 0)
    operator delete(*(void **)(v59 - 128));
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v59 - 137) < 0)
    operator delete(*(void **)(v59 - 160));
  if (a59 < 0)
    operator delete(a54);
  if (a20 < 0)
    operator delete(a15);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a26 < 0)
    operator delete(a21);
  if (a38 < 0)
    operator delete(a33);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void sub_19C9A8DE0()
{
  uint64_t v0;

  if (*(char *)(v0 - 73) < 0)
    JUMPOUT(0x19C9A8DC4);
  JUMPOUT(0x19C9A8DC8);
}

void CoreML::validateInputOutputRankEquality(CoreML::Result *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  __int128 *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  void *v23;
  char v24;
  std::string __p;
  std::string v26;
  std::string v27;
  std::string v28;
  void *v29;
  __int128 v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)(a2[4] + 8);
  v9 = (_QWORD *)(a4 + 8);
  if ((_QWORD *)(a4 + 8) == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(a4, v8)|| v9 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(a4, *(_QWORD **)(a2[7] + 8))|| (v10 = *(_DWORD *)std::map<std::string,std::string>::at(a4, v8), v10 == *(_DWORD *)std::map<std::string,std::string>::at(a4, *(_QWORD **)(a2[7] + 8))))
  {
    CoreML::Result::Result(a1);
  }
  else
  {
    v29 = 0;
    v30 = 0uLL;
    v11 = (__int128 *)a2[14];
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v12 = *v11;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
    }
    v13 = std::string::insert(&__p, 0, "Layer '");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v26, "' of type '");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = *(char *)(a3 + 23);
    if (v17 >= 0)
      v18 = (const std::string::value_type *)a3;
    else
      v18 = *(const std::string::value_type **)a3;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(a3 + 23);
    else
      v19 = *(_QWORD *)(a3 + 8);
    v20 = std::string::append(&v27, v18, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v28, "' expects equal ranks for its input and output, but they are not equal.");
    v23 = (void *)v22->__r_.__value_.__r.__words[0];
    v31[0] = v22->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
    v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)((char *)&v30 + 7) = *(_QWORD *)((char *)v31 + 7);
    v29 = v23;
    *(_QWORD *)&v30 = v31[0];
    HIBYTE(v30) = v24;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
    if (SHIBYTE(v30) < 0)
      operator delete(v29);
  }
}

void sub_19C9A906C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  _Unwind_Resume(exception_object);
}

void CoreML::validateRankCount(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  _QWORD *v12;
  int v13;
  void **v14;
  _QWORD *v15;
  int v16;
  void **v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  CoreML::Result::Result((CoreML::Result *)a1);
  v12 = *(_QWORD **)(a2[4] + 8);
  if ((_QWORD *)(a6 + 8) != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(a6, v12))
  {
    v13 = *(_DWORD *)std::map<std::string,std::string>::at(a6, v12);
    std::string::basic_string[abi:ne180100]<0>(__p, "input");
    CoreML::checkRank((CoreML::Result *)&v20, a2[14], a3, a4, a5, (uint64_t)__p, v13);
    *(_QWORD *)a1 = v20;
    v14 = (void **)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      operator delete(*v14);
    *(_OWORD *)v14 = v21;
    *(_QWORD *)(a1 + 24) = v22;
    HIBYTE(v22) = 0;
    LOBYTE(v21) = 0;
    if (v19 < 0)
      operator delete(__p[0]);
  }
  if ((*(_DWORD *)a1 & 0xFFFFFFEF) == 0)
  {
    v15 = *(_QWORD **)(a2[7] + 8);
    if ((_QWORD *)(a6 + 8) != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(a6, v15))
    {
      v16 = *(_DWORD *)std::map<std::string,std::string>::at(a6, v15);
      std::string::basic_string[abi:ne180100]<0>(__p, "output");
      CoreML::checkRank((CoreML::Result *)&v20, a2[14], a3, a4, a5, (uint64_t)__p, v16);
      *(_QWORD *)a1 = v20;
      v17 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        operator delete(*v17);
      *(_OWORD *)v17 = v21;
      *(_QWORD *)(a1 + 24) = v22;
      HIBYTE(v22) = 0;
      LOBYTE(v21) = 0;
      if (v19 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_19C9A9294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 31) < 0)
    operator delete(*(void **)(v15 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::valueType(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  v1 = a1[5];
  if (*(char *)(v1 + 23) < 0)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = *(unsigned __int8 *)(v1 + 23);
  v3 = a1[6];
  v4 = *(unsigned __int8 *)(v3 + 23);
  if (*(char *)(v3 + 23) < 0)
    v5 = *(_QWORD *)(v3 + 8);
  else
    v5 = *(unsigned __int8 *)(v3 + 23);
  v6 = *((_DWORD *)a1 + 4);
  v7 = a1[7];
  v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0)
    v9 = *(_QWORD *)(v7 + 8);
  else
    v9 = *(unsigned __int8 *)(v7 + 23);
  if (v6 <= 0)
    v10 = 1;
  else
    v10 = 2;
  if (v2)
    v11 = v10;
  else
    v11 = v6 > 0;
  if (v5)
    ++v11;
  if (v9)
    v12 = v11 + 1;
  else
    v12 = v11;
  if (v12 > 1)
    return 4;
  if (v12)
    v13 = 0;
  else
    v13 = 5;
  if (v6 <= 0 && v12)
  {
    if ((*(_BYTE *)(v1 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v1 + 8))
        return 1;
    }
    else if (*(_BYTE *)(v1 + 23))
    {
      return 1;
    }
    if ((v4 & 0x80) != 0)
      v4 = *(_QWORD *)(v3 + 8);
    v14 = a1[8];
    if (a1 != &CoreML::Specification::_WeightParams_default_instance_ && v4 && v14)
    {
      return 2;
    }
    else
    {
      if ((v8 & 0x80) != 0)
        v8 = *(_QWORD *)(v7 + 8);
      if (v14)
        v15 = v8 == 0;
      else
        v15 = 1;
      if (v15 || a1 == &CoreML::Specification::_WeightParams_default_instance_)
        return 5;
      else
        return 3;
    }
  }
  return v13;
}

void CoreML::validateGeneralWeightParams(uint64_t a1, uint64_t a2, unint64_t a3, int a4, const void **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  size_t v25;
  std::string *v26;
  const void *v27;
  int v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  int v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  uint64_t v42;
  size_t v43;
  std::string *v44;
  const void *v45;
  int v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  int v53;
  const std::string::value_type *v54;
  std::string::size_type v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  std::string::size_type v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  size_t v78;
  std::string *v79;
  const void *v80;
  int v81;
  const std::string::value_type *v82;
  std::string::size_type v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  int v88;
  const std::string::value_type *v89;
  std::string::size_type v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  __int128 v94;
  size_t v95;
  std::string *v96;
  const void *v97;
  int v98;
  const std::string::value_type *v99;
  std::string::size_type v100;
  std::string *v101;
  __int128 v102;
  std::string *v103;
  __int128 v104;
  int v105;
  const std::string::value_type *v106;
  std::string::size_type v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  __int128 v111;
  std::string *v112;
  std::string::size_type size;
  std::string *v114;
  __int128 v115;
  std::string *v116;
  __int128 v117;
  size_t v118;
  std::string *v119;
  const void *v120;
  int v121;
  const std::string::value_type *v122;
  std::string::size_type v123;
  std::string *v124;
  __int128 v125;
  std::string *v126;
  __int128 v127;
  int v128;
  const std::string::value_type *v129;
  std::string::size_type v130;
  std::string *v131;
  __int128 v132;
  std::string *v133;
  __int128 v134;
  std::string v135;
  std::string v136;
  std::string v137;
  std::string v138;
  std::string v139;
  std::string v140;
  std::string v141;
  std::string v142;
  std::string v143;
  std::string v144;
  __int128 v145;
  std::string::size_type v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;

  CoreML::Result::Result((CoreML::Result *)&v147);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0)
    v16 = *(_QWORD *)(v14 + 8);
  else
    v16 = *(unsigned __int8 *)(v14 + 23);
  v17 = *(int *)(a2 + 16);
  v18 = *(_QWORD *)(a2 + 48);
  v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0)
    v20 = *(_QWORD *)(v18 + 8);
  else
    v20 = *(unsigned __int8 *)(v18 + 23);
  v21 = *(_QWORD *)(a2 + 56);
  if (*(char *)(v21 + 23) < 0)
    v22 = *(_QWORD *)(v21 + 8);
  else
    v22 = *(unsigned __int8 *)(v21 + 23);
  if ((int)v17 <= 0)
    v23 = 1;
  else
    v23 = 2;
  if (v16)
    v24 = v23;
  else
    v24 = (int)v17 > 0;
  if (v20)
    ++v24;
  if (v22)
    ++v24;
  if (v24 <= 1)
  {
    if ((int)v17 <= 0 && v24)
    {
      if ((v15 & 0x80) != 0)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
          goto LABEL_56;
      }
      else if (*(_BYTE *)(v14 + 23))
      {
LABEL_56:
        v17 = v15 >> 1;
        goto LABEL_58;
      }
      if ((v19 & 0x80) != 0)
        v19 = *(_QWORD *)(v18 + 8);
      if ((uint64_t *)a2 != &CoreML::Specification::_WeightParams_default_instance_)
      {
        if (v19)
        {
          v72 = *(_QWORD *)(a2 + 64);
          if (v72)
          {
            if (!CoreML::hasSufficientBytesInQuantizedWeightParam((uint64_t *)a2, a3))
            {
              if (*((char *)a5 + 23) >= 0)
                v95 = *((unsigned __int8 *)a5 + 23);
              else
                v95 = (size_t)a5[1];
              v96 = &v139;
              std::string::basic_string[abi:ne180100]((uint64_t)&v139, v95 + 7);
              if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v96 = (std::string *)v139.__r_.__value_.__r.__words[0];
              if (v95)
              {
                if (*((char *)a5 + 23) >= 0)
                  v97 = a5;
                else
                  v97 = *a5;
                memmove(v96, v97, v95);
              }
              strcpy((char *)v96 + v95, "Layer '");
              v98 = *(char *)(a6 + 23);
              if (v98 >= 0)
                v99 = (const std::string::value_type *)a6;
              else
                v99 = *(const std::string::value_type **)a6;
              if (v98 >= 0)
                v100 = *(unsigned __int8 *)(a6 + 23);
              else
                v100 = *(_QWORD *)(a6 + 8);
              v101 = std::string::append(&v139, v99, v100);
              v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
              v140.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v102;
              v101->__r_.__value_.__l.__size_ = 0;
              v101->__r_.__value_.__r.__words[2] = 0;
              v101->__r_.__value_.__r.__words[0] = 0;
              v103 = std::string::append(&v140, "' has insufficient bytes for quantized ");
              v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
              v141.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v104;
              v103->__r_.__value_.__l.__size_ = 0;
              v103->__r_.__value_.__r.__words[2] = 0;
              v103->__r_.__value_.__r.__words[0] = 0;
              v105 = *(char *)(a7 + 23);
              if (v105 >= 0)
                v106 = (const std::string::value_type *)a7;
              else
                v106 = *(const std::string::value_type **)a7;
              if (v105 >= 0)
                v107 = *(unsigned __int8 *)(a7 + 23);
              else
                v107 = *(_QWORD *)(a7 + 8);
              v108 = std::string::append(&v141, v106, v107);
              v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
              v142.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v109;
              v108->__r_.__value_.__l.__size_ = 0;
              v108->__r_.__value_.__r.__words[2] = 0;
              v108->__r_.__value_.__r.__words[0] = 0;
              v110 = std::string::append(&v142, " with ");
              v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
              v143.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v111;
              v110->__r_.__value_.__l.__size_ = 0;
              v110->__r_.__value_.__r.__words[2] = 0;
              v110->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v138, a3);
              if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v112 = &v138;
              else
                v112 = (std::string *)v138.__r_.__value_.__r.__words[0];
              if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v138.__r_.__value_.__r.__words[2]);
              else
                size = v138.__r_.__value_.__l.__size_;
              v114 = std::string::append(&v143, (const std::string::value_type *)v112, size);
              v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
              v144.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v115;
              v114->__r_.__value_.__l.__size_ = 0;
              v114->__r_.__value_.__r.__words[2] = 0;
              v114->__r_.__value_.__r.__words[0] = 0;
              v116 = std::string::append(&v144, "units.");
              v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
              v146 = v116->__r_.__value_.__r.__words[2];
              v145 = v117;
              v116->__r_.__value_.__l.__size_ = 0;
              v116->__r_.__value_.__r.__words[2] = 0;
              v116->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v144.__r_.__value_.__l.__data_);
              if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v138.__r_.__value_.__l.__data_);
              if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v143.__r_.__value_.__l.__data_);
              if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v142.__r_.__value_.__l.__data_);
              if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v141.__r_.__value_.__l.__data_);
              if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v140.__r_.__value_.__l.__data_);
              if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v139.__r_.__value_.__l.__data_);
              *(_QWORD *)a1 = 13;
              std::operator+<char>();
              goto LABEL_160;
            }
            v73 = *(_QWORD *)(v72 + 16);
            if ((unint64_t)(v73 - 1) > 7)
              goto LABEL_210;
            v74 = *(_DWORD *)(v72 + 36);
            if (v74 == 102)
            {
              v77 = *(_DWORD *)(*(_QWORD *)(v72 + 24) + 16);
              v76 = 1 << v73;
            }
            else
            {
              if (v74 != 101)
                goto LABEL_210;
              v75 = *(_QWORD *)(v72 + 24);
              v76 = *(_DWORD *)(v75 + 16);
              if (v76 != 1 && v76 != a4)
                goto LABEL_210;
              v77 = *(_DWORD *)(v75 + 40);
              if (!v77)
                goto LABEL_59;
            }
            if (v77 == v76)
              goto LABEL_59;
LABEL_210:
            if (*((char *)a5 + 23) >= 0)
              v118 = *((unsigned __int8 *)a5 + 23);
            else
              v118 = (size_t)a5[1];
            v119 = &v141;
            std::string::basic_string[abi:ne180100]((uint64_t)&v141, v118 + 7);
            if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v119 = (std::string *)v141.__r_.__value_.__r.__words[0];
            if (v118)
            {
              if (*((char *)a5 + 23) >= 0)
                v120 = a5;
              else
                v120 = *a5;
              memmove(v119, v120, v118);
            }
            strcpy((char *)v119 + v118, "Layer '");
            v121 = *(char *)(a6 + 23);
            if (v121 >= 0)
              v122 = (const std::string::value_type *)a6;
            else
              v122 = *(const std::string::value_type **)a6;
            if (v121 >= 0)
              v123 = *(unsigned __int8 *)(a6 + 23);
            else
              v123 = *(_QWORD *)(a6 + 8);
            v124 = std::string::append(&v141, v122, v123);
            v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
            v142.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v125;
            v124->__r_.__value_.__l.__size_ = 0;
            v124->__r_.__value_.__r.__words[2] = 0;
            v124->__r_.__value_.__r.__words[0] = 0;
            v126 = std::string::append(&v142, "' has invalid quantization parameters for quantized ");
            v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
            v143.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v127;
            v126->__r_.__value_.__l.__size_ = 0;
            v126->__r_.__value_.__r.__words[2] = 0;
            v126->__r_.__value_.__r.__words[0] = 0;
            v128 = *(char *)(a7 + 23);
            if (v128 >= 0)
              v129 = (const std::string::value_type *)a7;
            else
              v129 = *(const std::string::value_type **)a7;
            if (v128 >= 0)
              v130 = *(unsigned __int8 *)(a7 + 23);
            else
              v130 = *(_QWORD *)(a7 + 8);
            v131 = std::string::append(&v143, v129, v130);
            v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
            v144.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v132;
            v131->__r_.__value_.__l.__size_ = 0;
            v131->__r_.__value_.__r.__words[2] = 0;
            v131->__r_.__value_.__r.__words[0] = 0;
            v133 = std::string::append(&v144, ".");
            v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
            v146 = v133->__r_.__value_.__r.__words[2];
            v145 = v134;
            v133->__r_.__value_.__l.__size_ = 0;
            v133->__r_.__value_.__r.__words[2] = 0;
            v133->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v144.__r_.__value_.__l.__data_);
            if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v143.__r_.__value_.__l.__data_);
            if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v142.__r_.__value_.__l.__data_);
            if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v141.__r_.__value_.__l.__data_);
            goto LABEL_159;
          }
        }
      }
    }
    else if (v24)
    {
LABEL_58:
      if (v17 != a3)
      {
        if (*((char *)a5 + 23) >= 0)
          v43 = *((unsigned __int8 *)a5 + 23);
        else
          v43 = (size_t)a5[1];
        v44 = &v137;
        std::string::basic_string[abi:ne180100]((uint64_t)&v137, v43 + 7);
        if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v44 = (std::string *)v137.__r_.__value_.__r.__words[0];
        if (v43)
        {
          if (*((char *)a5 + 23) >= 0)
            v45 = a5;
          else
            v45 = *a5;
          memmove(v44, v45, v43);
        }
        strcpy((char *)v44 + v43, "Layer '");
        v46 = *(char *)(a6 + 23);
        if (v46 >= 0)
          v47 = (const std::string::value_type *)a6;
        else
          v47 = *(const std::string::value_type **)a6;
        if (v46 >= 0)
          v48 = *(unsigned __int8 *)(a6 + 23);
        else
          v48 = *(_QWORD *)(a6 + 8);
        v49 = std::string::append(&v137, v47, v48);
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v138.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        v51 = std::string::append(&v138, "' has incorrect ");
        v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v139.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        v53 = *(char *)(a7 + 23);
        if (v53 >= 0)
          v54 = (const std::string::value_type *)a7;
        else
          v54 = *(const std::string::value_type **)a7;
        if (v53 >= 0)
          v55 = *(unsigned __int8 *)(a7 + 23);
        else
          v55 = *(_QWORD *)(a7 + 8);
        v56 = std::string::append(&v139, v54, v55);
        v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v140.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        v58 = std::string::append(&v140, " size ");
        v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        v141.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v136, v17);
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v60 = &v136;
        else
          v60 = (std::string *)v136.__r_.__value_.__r.__words[0];
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
        else
          v61 = v136.__r_.__value_.__l.__size_;
        v62 = std::string::append(&v141, (const std::string::value_type *)v60, v61);
        v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
        v142.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v63;
        v62->__r_.__value_.__l.__size_ = 0;
        v62->__r_.__value_.__r.__words[2] = 0;
        v62->__r_.__value_.__r.__words[0] = 0;
        v64 = std::string::append(&v142, " (expected ");
        v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v143.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v135, a3);
        if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = &v135;
        else
          v66 = (std::string *)v135.__r_.__value_.__r.__words[0];
        if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v67 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
        else
          v67 = v135.__r_.__value_.__l.__size_;
        v68 = std::string::append(&v143, (const std::string::value_type *)v66, v67);
        v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
        v144.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v69;
        v68->__r_.__value_.__l.__size_ = 0;
        v68->__r_.__value_.__r.__words[2] = 0;
        v68->__r_.__value_.__r.__words[0] = 0;
        v70 = std::string::append(&v144, ").");
        v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
        v146 = v70->__r_.__value_.__r.__words[2];
        v145 = v71;
        v70->__r_.__value_.__l.__size_ = 0;
        v70->__r_.__value_.__r.__words[2] = 0;
        v70->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v144.__r_.__value_.__l.__data_);
        if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v135.__r_.__value_.__l.__data_);
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v143.__r_.__value_.__l.__data_);
        if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v142.__r_.__value_.__l.__data_);
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v136.__r_.__value_.__l.__data_);
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v141.__r_.__value_.__l.__data_);
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v139.__r_.__value_.__l.__data_);
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v138.__r_.__value_.__l.__data_);
        if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v137.__r_.__value_.__l.__data_);
        *(_QWORD *)a1 = 13;
        std::operator+<char>();
        goto LABEL_160;
      }
LABEL_59:
      v42 = v149;
      *(_QWORD *)a1 = v147;
      *(_OWORD *)(a1 + 8) = v148;
      *(_QWORD *)(a1 + 24) = v42;
      v148 = 0uLL;
      v149 = 0;
      goto LABEL_162;
    }
    if (*((char *)a5 + 23) >= 0)
      v78 = *((unsigned __int8 *)a5 + 23);
    else
      v78 = (size_t)a5[1];
    v79 = &v141;
    std::string::basic_string[abi:ne180100]((uint64_t)&v141, v78 + 7);
    if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v79 = (std::string *)v141.__r_.__value_.__r.__words[0];
    if (v78)
    {
      if (*((char *)a5 + 23) >= 0)
        v80 = a5;
      else
        v80 = *a5;
      memmove(v79, v80, v78);
    }
    strcpy((char *)v79 + v78, "Layer '");
    v81 = *(char *)(a6 + 23);
    if (v81 >= 0)
      v82 = (const std::string::value_type *)a6;
    else
      v82 = *(const std::string::value_type **)a6;
    if (v81 >= 0)
      v83 = *(unsigned __int8 *)(a6 + 23);
    else
      v83 = *(_QWORD *)(a6 + 8);
    v84 = std::string::append(&v141, v82, v83);
    v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    v142.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    v86 = std::string::append(&v142, "' has empty ");
    v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    v143.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    v88 = *(char *)(a7 + 23);
    if (v88 >= 0)
      v89 = (const std::string::value_type *)a7;
    else
      v89 = *(const std::string::value_type **)a7;
    if (v88 >= 0)
      v90 = *(unsigned __int8 *)(a7 + 23);
    else
      v90 = *(_QWORD *)(a7 + 8);
    v91 = std::string::append(&v143, v89, v90);
    v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v92;
    v91->__r_.__value_.__l.__size_ = 0;
    v91->__r_.__value_.__r.__words[2] = 0;
    v91->__r_.__value_.__r.__words[0] = 0;
    v93 = std::string::append(&v144, ".");
    v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    v146 = v93->__r_.__value_.__r.__words[2];
    v145 = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__r_.__value_.__l.__data_);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v142.__r_.__value_.__l.__data_);
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v141.__r_.__value_.__l.__data_);
    goto LABEL_159;
  }
  if (*((char *)a5 + 23) >= 0)
    v25 = *((unsigned __int8 *)a5 + 23);
  else
    v25 = (size_t)a5[1];
  v26 = &v141;
  std::string::basic_string[abi:ne180100]((uint64_t)&v141, v25 + 7);
  if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v26 = (std::string *)v141.__r_.__value_.__r.__words[0];
  if (v25)
  {
    if (*((char *)a5 + 23) >= 0)
      v27 = a5;
    else
      v27 = *a5;
    memmove(v26, v27, v25);
  }
  strcpy((char *)v26 + v25, "Layer '");
  v28 = *(char *)(a6 + 23);
  if (v28 >= 0)
    v29 = (const std::string::value_type *)a6;
  else
    v29 = *(const std::string::value_type **)a6;
  if (v28 >= 0)
    v30 = *(unsigned __int8 *)(a6 + 23);
  else
    v30 = *(_QWORD *)(a6 + 8);
  v31 = std::string::append(&v141, v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v142.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v142, "' has unspecified ");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v143.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = *(char *)(a7 + 23);
  if (v35 >= 0)
    v36 = (const std::string::value_type *)a7;
  else
    v36 = *(const std::string::value_type **)a7;
  if (v35 >= 0)
    v37 = *(unsigned __int8 *)(a7 + 23);
  else
    v37 = *(_QWORD *)(a7 + 8);
  v38 = std::string::append(&v143, v36, v37);
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v144.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v40 = std::string::append(&v144, ".");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v146 = v40->__r_.__value_.__r.__words[2];
  v145 = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
LABEL_159:
  *(_QWORD *)a1 = 13;
  std::operator+<char>();
LABEL_160:
  if (SHIBYTE(v146) < 0)
    operator delete((void *)v145);
LABEL_162:
  if (SHIBYTE(v149) < 0)
    operator delete((void *)v148);
}

void sub_19C9A9FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 81) < 0)
    operator delete(*(void **)(v61 - 104));
  _Unwind_Resume(exception_object);
}

void CoreML::checkRank(CoreML::Result *this, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  std::string *v13;
  __int128 v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  int v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  int v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  int v61;
  const std::string::value_type *v62;
  std::string::size_type v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  int v68;
  const std::string::value_type *v69;
  std::string::size_type v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  std::string::size_type size;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  void *v84;
  char v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  void *v97;
  __int128 v98;
  _QWORD v99[3];

  v99[2] = *MEMORY[0x1E0C80C00];
  v97 = 0;
  v98 = 0uLL;
  if (a5 < 1 || a5 != a4 || a7 == a5)
  {
    if (a7 >= a4)
    {
      if (a5 < 1 || a7 <= a5)
      {
        CoreML::Result::Result(this);
        return;
      }
      std::operator+<char>();
      v59 = std::string::append(&v88, "' of type '");
      v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      v61 = *(char *)(a3 + 23);
      if (v61 >= 0)
        v62 = (const std::string::value_type *)a3;
      else
        v62 = *(const std::string::value_type **)a3;
      if (v61 >= 0)
        v63 = *(unsigned __int8 *)(a3 + 23);
      else
        v63 = *(_QWORD *)(a3 + 8);
      v64 = std::string::append(&v89, v62, v63);
      v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      v66 = std::string::append(&v90, "' has ");
      v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      v68 = *(char *)(a6 + 23);
      if (v68 >= 0)
        v69 = (const std::string::value_type *)a6;
      else
        v69 = *(const std::string::value_type **)a6;
      if (v68 >= 0)
        v70 = *(unsigned __int8 *)(a6 + 23);
      else
        v70 = *(_QWORD *)(a6 + 8);
      v71 = std::string::append(&v91, v69, v70);
      v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      v73 = std::string::append(&v92, " rank ");
      v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v87, a7);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v75 = &v87;
      else
        v75 = (std::string *)v87.__r_.__value_.__r.__words[0];
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      else
        size = v87.__r_.__value_.__l.__size_;
      v77 = std::string::append(&v93, (const std::string::value_type *)v75, size);
      v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      v79 = std::string::append(&v94, " but expects rank at most ");
      v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v95.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v86, a5);
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v86;
      else
        v35 = (std::string *)v86.__r_.__value_.__r.__words[0];
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      else
        v36 = v86.__r_.__value_.__l.__size_;
    }
    else
    {
      std::operator+<char>();
      v37 = std::string::append(&v88, "' of type '");
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      v39 = *(char *)(a3 + 23);
      if (v39 >= 0)
        v40 = (const std::string::value_type *)a3;
      else
        v40 = *(const std::string::value_type **)a3;
      if (v39 >= 0)
        v41 = *(unsigned __int8 *)(a3 + 23);
      else
        v41 = *(_QWORD *)(a3 + 8);
      v42 = std::string::append(&v89, v40, v41);
      v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      v44 = std::string::append(&v90, "' has ");
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      v46 = *(char *)(a6 + 23);
      if (v46 >= 0)
        v47 = (const std::string::value_type *)a6;
      else
        v47 = *(const std::string::value_type **)a6;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(a6 + 23);
      else
        v48 = *(_QWORD *)(a6 + 8);
      v49 = std::string::append(&v91, v47, v48);
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      v51 = std::string::append(&v92, " rank ");
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v87, a7);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = &v87;
      else
        v53 = (std::string *)v87.__r_.__value_.__r.__words[0];
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      else
        v54 = v87.__r_.__value_.__l.__size_;
      v55 = std::string::append(&v93, (const std::string::value_type *)v53, v54);
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      v57 = std::string::append(&v94, " but expects rank at least ");
      v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v95.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v86, a4);
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v86;
      else
        v35 = (std::string *)v86.__r_.__value_.__r.__words[0];
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      else
        v36 = v86.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    std::operator+<char>();
    v13 = std::string::append(&v88, "' of type '");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = *(char *)(a3 + 23);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)a3;
    else
      v16 = *(const std::string::value_type **)a3;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a3 + 23);
    else
      v17 = *(_QWORD *)(a3 + 8);
    v18 = std::string::append(&v89, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v90, "' has ");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = *(char *)(a6 + 23);
    if (v22 >= 0)
      v23 = (const std::string::value_type *)a6;
    else
      v23 = *(const std::string::value_type **)a6;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(a6 + 23);
    else
      v24 = *(_QWORD *)(a6 + 8);
    v25 = std::string::append(&v91, v23, v24);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v92, " rank ");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v87, a7);
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v87;
    else
      v29 = (std::string *)v87.__r_.__value_.__r.__words[0];
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
    else
      v30 = v87.__r_.__value_.__l.__size_;
    v31 = std::string::append(&v93, (const std::string::value_type *)v29, v30);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v94.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v33 = std::string::append(&v94, " but expects rank exactly ");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v95.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v86, a5);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &v86;
    else
      v35 = (std::string *)v86.__r_.__value_.__r.__words[0];
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    else
      v36 = v86.__r_.__value_.__l.__size_;
  }
  v81 = std::string::append(&v95, (const std::string::value_type *)v35, v36);
  v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
  v96.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v82;
  v81->__r_.__value_.__l.__size_ = 0;
  v81->__r_.__value_.__r.__words[2] = 0;
  v81->__r_.__value_.__r.__words[0] = 0;
  v83 = std::string::append(&v96, ".");
  v84 = (void *)v83->__r_.__value_.__r.__words[0];
  v99[0] = v83->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v99 + 7) = *(std::string::size_type *)((char *)&v83->__r_.__value_.__r.__words[1] + 7);
  v85 = HIBYTE(v83->__r_.__value_.__r.__words[2]);
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)((char *)&v98 + 7) = *(_QWORD *)((char *)v99 + 7);
  v97 = v84;
  *(_QWORD *)&v98 = v99[0];
  HIBYTE(v98) = v85;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  *(_QWORD *)this = 13;
  std::operator+<char>();
  if (SHIBYTE(v98) < 0)
    operator delete(v97);
}

void sub_19C9AA930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (*(char *)(v61 - 185) < 0)
    operator delete(*(void **)(v61 - 208));
  if (a21 < 0)
    operator delete(a16);
  if (a61 < 0)
    operator delete(a56);
  if (a54 < 0)
    operator delete(a49);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_19C9AAAA4()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    JUMPOUT(0x19C9AAA80);
  JUMPOUT(0x19C9AAA84);
}

void CoreML::NeuralNetworkSpecValidator::validateConvolution3DLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  uint64_t *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t *v27;
  int v28;
  uint64_t *v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  int v33;
  std::string *v34;
  __int128 v35;
  void *v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  int v65;
  int v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  unint64_t v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  std::string::size_type size;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  std::string::size_type v94;
  std::string *v95;
  __int128 v96;
  std::string *v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  int v103;
  std::string v104;
  std::string v105;
  std::string v106;
  std::string v107;
  std::string v108;
  std::string v109;
  std::string v110;
  __int128 v111;
  std::string::size_type v112;
  void *v113[2];
  char v114;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v113, "Convolution3D");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)v113, (uint64_t)v7);
        if (v114 < 0)
          operator delete(v113[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Convolution3D");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)&v111, 5, -1, (uint64_t)v7);
        if (SHIBYTE(v112) < 0)
          operator delete((void *)v111);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 1471)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        v8 = &CoreML::Specification::_Convolution3DLayerParams_default_instance_;
      }
      if (*(_DWORD *)(a3 + 24) == 1)
      {
        v9 = *((_DWORD *)v8 + 14);
        v10 = *((_DWORD *)v8 + 15);
        v11 = *((_DWORD *)v8 + 16);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Input Channels");
        CoreML::validatePositive((CoreML::Result *)this, v10, (const void **)&v111);
        if (SHIBYTE(v112) < 0)
          operator delete((void *)v111);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Output Channels");
        CoreML::validatePositive((CoreML::Result *)this, v9, (const void **)&v111);
        if (SHIBYTE(v112) < 0)
          operator delete((void *)v111);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Groups");
        CoreML::validatePositive((CoreML::Result *)this, v11, (const void **)&v111);
        if (SHIBYTE(v112) < 0)
          operator delete((void *)v111);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        v12 = *((_DWORD *)v8 + 17);
        v13 = *((_DWORD *)v8 + 18);
        v14 = *((_DWORD *)v8 + 19);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Kernel Depth");
        CoreML::validatePositive((CoreML::Result *)this, v12, (const void **)&v111);
        if (SHIBYTE(v112) < 0)
          operator delete((void *)v111);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Kernel Height");
        CoreML::validatePositive((CoreML::Result *)this, v13, (const void **)&v111);
        if (SHIBYTE(v112) < 0)
          operator delete((void *)v111);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Kernel Width");
        CoreML::validatePositive((CoreML::Result *)this, v14, (const void **)&v111);
        if (SHIBYTE(v112) < 0)
          operator delete((void *)v111);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        v103 = v14;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        v15 = *((_DWORD *)v8 + 20);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Stride Depth");
        CoreML::validatePositive((CoreML::Result *)this, v15, (const void **)&v111);
        if (SHIBYTE(v112) < 0)
          operator delete((void *)v111);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        v16 = *((_DWORD *)v8 + 21);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Stride Height");
        CoreML::validatePositive((CoreML::Result *)this, v16, (const void **)&v111);
        if (SHIBYTE(v112) < 0)
          operator delete((void *)v111);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        v17 = *((_DWORD *)v8 + 22);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Stride Width");
        CoreML::validatePositive((CoreML::Result *)this, v17, (const void **)&v111);
        if (SHIBYTE(v112) < 0)
          operator delete((void *)v111);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        v18 = *((_DWORD *)v8 + 23);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Dilation Depth");
        CoreML::validatePositive((CoreML::Result *)this, v18, (const void **)&v111);
        if (SHIBYTE(v112) < 0)
          operator delete((void *)v111);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        v19 = *((_DWORD *)v8 + 24);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Dilation Height");
        CoreML::validatePositive((CoreML::Result *)this, v19, (const void **)&v111);
        if (SHIBYTE(v112) < 0)
          operator delete((void *)v111);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        v20 = *((_DWORD *)v8 + 25);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Dilation Width");
        CoreML::validatePositive((CoreML::Result *)this, v20, (const void **)&v111);
        if (SHIBYTE(v112) < 0)
          operator delete((void *)v111);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        v21 = *((_DWORD *)v8 + 28);
        if (v21 < 0)
        {
          std::to_string(&v109, v21);
          v39 = std::string::insert(&v109, 0, "Custom Padding Front must be non-negative, got '");
          v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v110.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          v41 = std::string::append(&v110, "'.");
          v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v112 = v41->__r_.__value_.__r.__words[2];
          v111 = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v109.__r_.__value_.__l.__data_);
          goto LABEL_193;
        }
        v22 = *((_DWORD *)v8 + 29);
        if (v22 < 0)
        {
          std::to_string(&v109, v22);
          v43 = std::string::insert(&v109, 0, "Custom Padding Back must be non-negative, got '");
          v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v110.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          v45 = std::string::append(&v110, "'.");
          v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
          v112 = v45->__r_.__value_.__r.__words[2];
          v111 = v46;
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v109.__r_.__value_.__l.__data_);
          goto LABEL_193;
        }
        v23 = *((_DWORD *)v8 + 30);
        if (v23 < 0)
        {
          std::to_string(&v109, v23);
          v47 = std::string::insert(&v109, 0, "Custom Padding Top must be non-negative, got '");
          v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v110.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          v49 = std::string::append(&v110, "'.");
          v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          v112 = v49->__r_.__value_.__r.__words[2];
          v111 = v50;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v109.__r_.__value_.__l.__data_);
          goto LABEL_193;
        }
        v24 = *((_DWORD *)v8 + 31);
        if (v24 < 0)
        {
          std::to_string(&v109, v24);
          v51 = std::string::insert(&v109, 0, "Custom Padding Bottom must be non-negative, got '");
          v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v110.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          v53 = std::string::append(&v110, "'.");
          v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          v112 = v53->__r_.__value_.__r.__words[2];
          v111 = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v109.__r_.__value_.__l.__data_);
          goto LABEL_193;
        }
        v25 = *((_DWORD *)v8 + 32);
        if (v25 < 0)
        {
          std::to_string(&v109, v25);
          v55 = std::string::insert(&v109, 0, "customPadding Left must be non-negative, got '");
          v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          v110.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          v57 = std::string::append(&v110, "'.");
          v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          v112 = v57->__r_.__value_.__r.__words[2];
          v111 = v58;
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v109.__r_.__value_.__l.__data_);
          goto LABEL_193;
        }
        v26 = *((_DWORD *)v8 + 33);
        if (v26 < 0)
        {
          std::to_string(&v109, v26);
          v59 = std::string::insert(&v109, 0, "customPadding Right must be non-negative, got '");
          v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
          v110.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v60;
          v59->__r_.__value_.__l.__size_ = 0;
          v59->__r_.__value_.__r.__words[2] = 0;
          v59->__r_.__value_.__r.__words[0] = 0;
          v61 = std::string::append(&v110, "'.");
          v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
          v112 = v61->__r_.__value_.__r.__words[2];
          v111 = v62;
          v61->__r_.__value_.__l.__size_ = 0;
          v61->__r_.__value_.__r.__words[2] = 0;
          v61->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v109.__r_.__value_.__l.__data_);
          goto LABEL_193;
        }
        if (v8[5])
          v27 = (uint64_t *)v8[5];
        else
          v27 = &CoreML::Specification::_WeightParams_default_instance_;
        v100 = (uint64_t)v27;
        v28 = CoreML::valueType(v27);
        if (v8[6])
          v29 = (uint64_t *)v8[6];
        else
          v29 = &CoreML::Specification::_WeightParams_default_instance_;
        v30 = CoreML::valueType(v29);
        v101 = v30;
        v102 = *((unsigned __int8 *)v8 + 104);
        if (*((_BYTE *)v8 + 104))
          v31 = v30 == 4;
        else
          v31 = 0;
        v32 = v31;
        if (v28 == 4 || v32)
        {
          std::operator+<char>();
          v63 = std::string::append(&v110, "'  has invalid weights/bias fields.");
          v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
          v112 = v63->__r_.__value_.__r.__words[2];
          v111 = v64;
          v63->__r_.__value_.__l.__size_ = 0;
          v63->__r_.__value_.__r.__words[2] = 0;
          v63->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
        }
        else
        {
          v33 = v28;
          if (*((_BYTE *)v8 + 104) && (v28 == 1 && !v30 || !v28 && v30 == 1))
          {
            std::operator+<char>();
            v34 = std::string::append(&v110, "' has unmatched precisions of weights/bias They should either be half or full precision.");
            v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
            v112 = v34->__r_.__value_.__r.__words[2];
            v111 = v35;
            v34->__r_.__value_.__l.__size_ = 0;
            v34->__r_.__value_.__r.__words[2] = 0;
            v34->__r_.__value_.__r.__words[0] = 0;
            *this = (void *)13;
            std::operator+<char>();
LABEL_109:
            if (SHIBYTE(v112) < 0)
              operator delete((void *)v111);
            if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              return;
            v36 = (void *)v110.__r_.__value_.__r.__words[0];
LABEL_118:
            operator delete(v36);
            return;
          }
          v65 = *((_DWORD *)v8 + 4);
          if (!v65)
          {
            if (v28 != 2)
            {
              if (*((_BYTE *)v8 + 105))
                v66 = v9;
              else
                v66 = v10;
              if (!*((_BYTE *)v8 + 105))
                v10 = v9;
              goto LABEL_174;
            }
LABEL_158:
            std::operator+<char>();
            v67 = std::string::append(&v109, "' has invalid weights field. Quantized ");
            v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
            v110.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v68;
            v67->__r_.__value_.__l.__size_ = 0;
            v67->__r_.__value_.__r.__words[2] = 0;
            v67->__r_.__value_.__r.__words[0] = 0;
            v69 = std::string::append(&v110, "weights are not supported.");
            v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
            v112 = v69->__r_.__value_.__r.__words[2];
            v111 = v70;
            v69->__r_.__value_.__l.__size_ = 0;
            v69->__r_.__value_.__r.__words[2] = 0;
            v69->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v110.__r_.__value_.__l.__data_);
            if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v109.__r_.__value_.__l.__data_);
            goto LABEL_193;
          }
          if (*((_BYTE *)v8 + 105))
          {
            if (v65 == 3)
            {
              v66 = v9;
              if (v33 != 2)
              {
LABEL_174:
                std::string::basic_string[abi:ne180100]<0>(&v111, "Convolution3D ");
                v99 = *(_QWORD *)(a3 + 112);
                std::string::basic_string[abi:ne180100]<0>(&v110, "weights");
                CoreML::validateGeneralWeightParams((uint64_t)this, v100, v13 * v12 * v103 * v66 / v11 * v10, v9, (const void **)&v111, v99, (uint64_t)&v110);
                if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v110.__r_.__value_.__l.__data_);
                if (SHIBYTE(v112) < 0)
                  operator delete((void *)v111);
                if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
                  return;
                if (*((char *)this + 31) < 0)
                  operator delete(this[1]);
                if (!v102)
                {
LABEL_199:
                  CoreML::Result::Result((CoreML::Result *)this);
                  return;
                }
                if (v101 <= 1)
                {
                  v75 = (uint64_t *)v8[6];
                  if (!v75)
                    v75 = &CoreML::Specification::_WeightParams_default_instance_;
                  if (v101)
                  {
                    v76 = v75[5];
                    if (*(char *)(v76 + 23) < 0)
                      v77 = *(_QWORD *)(v76 + 8);
                    else
                      v77 = *(unsigned __int8 *)(v76 + 23);
                    v84 = v77 >> 1;
                  }
                  else
                  {
                    LODWORD(v84) = *((_DWORD *)v75 + 4);
                  }
                  if ((_DWORD)v84 == v9)
                    goto LABEL_199;
                  std::operator+<char>();
                  v85 = std::string::append(&v106, "' has a bias vector of size ");
                  v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
                  v107.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v86;
                  v85->__r_.__value_.__l.__size_ = 0;
                  v85->__r_.__value_.__r.__words[2] = 0;
                  v85->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v105, v84);
                  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v87 = &v105;
                  else
                    v87 = (std::string *)v105.__r_.__value_.__r.__words[0];
                  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = HIBYTE(v105.__r_.__value_.__r.__words[2]);
                  else
                    size = v105.__r_.__value_.__l.__size_;
                  v89 = std::string::append(&v107, (const std::string::value_type *)v87, size);
                  v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
                  v108.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v90;
                  v89->__r_.__value_.__l.__size_ = 0;
                  v89->__r_.__value_.__r.__words[2] = 0;
                  v89->__r_.__value_.__r.__words[0] = 0;
                  v91 = std::string::append(&v108, " but should be ");
                  v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
                  v109.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v92;
                  v91->__r_.__value_.__l.__size_ = 0;
                  v91->__r_.__value_.__r.__words[2] = 0;
                  v91->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v104, v9);
                  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v93 = &v104;
                  else
                    v93 = (std::string *)v104.__r_.__value_.__r.__words[0];
                  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v94 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
                  else
                    v94 = v104.__r_.__value_.__l.__size_;
                  v95 = std::string::append(&v109, (const std::string::value_type *)v93, v94);
                  v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
                  v110.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v96;
                  v95->__r_.__value_.__l.__size_ = 0;
                  v95->__r_.__value_.__r.__words[2] = 0;
                  v95->__r_.__value_.__r.__words[0] = 0;
                  v97 = std::string::append(&v110, ".");
                  v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
                  v112 = v97->__r_.__value_.__r.__words[2];
                  v111 = v98;
                  v97->__r_.__value_.__l.__size_ = 0;
                  v97->__r_.__value_.__r.__words[2] = 0;
                  v97->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v110.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v104.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v109.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v108.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v105.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v107.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v106.__r_.__value_.__l.__data_);
                  *this = (void *)13;
                  std::operator+<char>();
LABEL_116:
                  if ((SHIBYTE(v112) & 0x80000000) == 0)
                    return;
                  v36 = (void *)v111;
                  goto LABEL_118;
                }
                if (v101 != 2)
                {
                  std::operator+<char>();
                  v82 = std::string::append(&v110, "has not specified bias.");
                  v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
                  v112 = v82->__r_.__value_.__r.__words[2];
                  v111 = v83;
                  v82->__r_.__value_.__l.__size_ = 0;
                  v82->__r_.__value_.__r.__words[2] = 0;
                  v82->__r_.__value_.__r.__words[0] = 0;
                  *this = (void *)13;
                  std::operator+<char>();
                  goto LABEL_109;
                }
                std::operator+<char>();
                v78 = std::string::append(&v109, "' has invalid bias field. Quantized ");
                v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
                v110.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v79;
                v78->__r_.__value_.__l.__size_ = 0;
                v78->__r_.__value_.__r.__words[2] = 0;
                v78->__r_.__value_.__r.__words[0] = 0;
                v80 = std::string::append(&v110, "bias is not supported.");
                v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
                v112 = v80->__r_.__value_.__r.__words[2];
                v111 = v81;
                v80->__r_.__value_.__l.__size_ = 0;
                v80->__r_.__value_.__r.__words[2] = 0;
                v80->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v110.__r_.__value_.__l.__data_);
                if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v109.__r_.__value_.__l.__data_);
LABEL_193:
                *this = (void *)13;
                std::operator+<char>();
                goto LABEL_116;
              }
              goto LABEL_158;
            }
            std::operator+<char>();
            v73 = std::string::append(&v110, "' , if set, output shape must be of length 3.");
            v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
            v112 = v73->__r_.__value_.__r.__words[2];
            v111 = v74;
            v73->__r_.__value_.__l.__size_ = 0;
            v73->__r_.__value_.__r.__words[2] = 0;
            v73->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v110.__r_.__value_.__l.__data_);
          }
          else
          {
            std::operator+<char>();
            v71 = std::string::append(&v110, "' Output Shape is supported for Deconvolution layer.");
            v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
            v112 = v71->__r_.__value_.__r.__words[2];
            v111 = v72;
            v71->__r_.__value_.__l.__size_ = 0;
            v71->__r_.__value_.__r.__words[2] = 0;
            v71->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v110.__r_.__value_.__l.__data_);
          }
        }
      }
      else
      {
        std::operator+<char>();
        v37 = std::string::append(&v110, "', convolution3D does not support weight as input tensor.");
        v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v112 = v37->__r_.__value_.__r.__words[2];
        v111 = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
      }
      *this = (void *)13;
      std::operator+<char>();
      goto LABEL_116;
    }
  }
}

void sub_19C9ABB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;

  if (*(char *)(v51 - 121) < 0)
    operator delete(*(void **)(v51 - 144));
  _Unwind_Resume(exception_object);
}

void CoreML::validatePositive(CoreML::Result *this, int a2, const void **a3)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string __p;
  std::string v16;
  std::string v17;
  void *v18[2];
  std::string::size_type v19;

  if (a2 <= 0)
  {
    if (*((char *)a3 + 23) >= 0)
      v6 = *((unsigned __int8 *)a3 + 23);
    else
      v6 = (size_t)a3[1];
    v7 = &v16;
    std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 23);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if (v6)
    {
      if (*((char *)a3 + 23) >= 0)
        v8 = a3;
      else
        v8 = *a3;
      memmove(v7, v8, v6);
    }
    strcpy((char *)v7 + v6, " must be positive, got ");
    std::to_string(&__p, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v11 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v17, ".");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v19 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)v18 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    *(_QWORD *)this = 13;
    std::operator+<char>();
    if (SHIBYTE(v19) < 0)
      operator delete(v18[0]);
  }
  else
  {
    CoreML::Result::Result(this);
  }
}

void sub_19C9ABF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateInnerProductLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  const CoreML::Specification::WeightParams *v10;
  uint64_t *v11;
  void *v12[2];
  char v13;
  void *__p[2];
  char v15;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "InnerProduct");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v15 < 0)
          operator delete(__p[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v12, "InnerProduct");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)v12, 1, 5, (uint64_t)v7);
        if (v13 < 0)
          operator delete(v12[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 140)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        v8 = &CoreML::Specification::_InnerProductLayerParams_default_instance_;
      }
      if (*((_BYTE *)v8 + 49))
      {
        if (v8[2])
          v9 = (uint64_t *)v8[2];
        else
          v9 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(v12, "InnerProduct");
        CoreML::validateInt8Requirements((CoreML::Result *)this, (uint64_t)v9, (uint64_t)v12);
        if (v13 < 0)
          operator delete(v12[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (v8[2])
        v10 = (const CoreML::Specification::WeightParams *)v8[2];
      else
        v10 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      if (v8[3])
        v11 = (uint64_t *)v8[3];
      else
        v11 = &CoreML::Specification::_WeightParams_default_instance_;
      validateInnerProductWeightsBias(this, (const CoreML::Specification::WeightParams *)a3, v10, v11);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19C9AC188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void validateInnerProductWeightsBias(void **this, const CoreML::Specification::WeightParams *a2, const CoreML::Specification::WeightParams *a3, uint64_t *a4)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  BOOL v44;
  BOOL v46;
  int v47;
  size_t v48;
  std::string *v49;
  void **v50;
  uint64_t v51;
  int v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  size_t v59;
  std::string *v60;
  void **v61;
  uint64_t v62;
  int v63;
  const std::string::value_type *v64;
  std::string::size_type v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  void *v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  std::string::size_type v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  std::string::size_type v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  __int128 v84;
  std::string *p_p;
  std::string::size_type v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  __int128 v90;
  const std::string::value_type *v91;
  std::string::size_type v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  std::string::size_type size;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  std::string::size_type v111;
  std::string *v112;
  __int128 v113;
  std::string *v114;
  __int128 v115;
  std::string __p;
  std::string v117;
  std::string v118;
  std::string v119;
  std::string v120;
  std::string v121;
  std::string v122;
  std::string v123;
  std::string v124;
  std::string v125;
  std::string v126;
  std::string v127;
  __int128 v128;
  std::string::size_type v129;
  void **v130;
  size_t v131;
  uint64_t v132;

  v130 = 0;
  v131 = 0;
  v132 = 0;
  v8 = *((_DWORD *)a2 + 35);
  if (v8 == 140)
  {
    v13 = *((_QWORD *)a2 + 16);
    v11 = *(_QWORD *)(v13 + 32);
    v10 = *(_QWORD *)(v13 + 40);
    v12 = *(unsigned __int8 *)(v13 + 48);
    MEMORY[0x1A1AD5EAC](&v130, "Inner product");
  }
  else
  {
    if (v8 != 1045)
    {
      CoreML::Result::Result((CoreML::Result *)this);
      goto LABEL_233;
    }
    v9 = *((_QWORD *)a2 + 16);
    v11 = *(_QWORD *)(v9 + 32);
    v10 = *(_QWORD *)(v9 + 40);
    v12 = *(unsigned __int8 *)(v9 + 50);
    MEMORY[0x1A1AD5EAC](&v130, "BatchedMatMul");
  }
  v14 = *((_QWORD *)a3 + 5);
  v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0)
    v16 = *(_QWORD *)(v14 + 8);
  else
    v16 = *(unsigned __int8 *)(v14 + 23);
  v17 = *((int *)a3 + 4);
  v18 = *((_QWORD *)a3 + 6);
  v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0)
    v20 = *(_QWORD *)(v18 + 8);
  else
    v20 = *(unsigned __int8 *)(v18 + 23);
  v21 = *((_QWORD *)a3 + 7);
  v22 = *(unsigned __int8 *)(v21 + 23);
  if (*(char *)(v21 + 23) < 0)
    v23 = *(_QWORD *)(v21 + 8);
  else
    v23 = *(unsigned __int8 *)(v21 + 23);
  if ((int)v17 <= 0)
    v24 = 1;
  else
    v24 = 2;
  if (v16)
    v25 = v24;
  else
    v25 = (int)v17 > 0;
  if (v20)
    ++v25;
  if (v23)
    v26 = v25 + 1;
  else
    v26 = v25;
  if (v26 > 1)
  {
    v27 = 4;
    goto LABEL_54;
  }
  if (v26)
    v27 = 0;
  else
    v27 = 5;
  if ((int)v17 <= 0 && v26)
  {
    if ((v15 & 0x80) != 0)
    {
      if (*(_QWORD *)(v14 + 8))
        goto LABEL_35;
    }
    else if (*(_BYTE *)(v14 + 23))
    {
LABEL_35:
      v27 = 1;
      goto LABEL_54;
    }
    if ((v19 & 0x80) != 0)
      v19 = *(_QWORD *)(v18 + 8);
    v28 = *((_QWORD *)a3 + 8);
    if (a3 != (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_
      && v19
      && v28)
    {
      v27 = 2;
    }
    else
    {
      if ((v22 & 0x80) != 0)
        v22 = *(_QWORD *)(v21 + 8);
      if (v28)
        v29 = v22 == 0;
      else
        v29 = 1;
      if (v29
        || a3 == (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_)
      {
        v27 = 5;
      }
      else
      {
        v27 = 3;
      }
    }
  }
LABEL_54:
  v31 = a4[5];
  if (*(char *)(v31 + 23) < 0)
    v32 = *(_QWORD *)(v31 + 8);
  else
    v32 = *(unsigned __int8 *)(v31 + 23);
  v33 = a4[6];
  v34 = *(unsigned __int8 *)(v33 + 23);
  if (*(char *)(v33 + 23) < 0)
    v35 = *(_QWORD *)(v33 + 8);
  else
    v35 = *(unsigned __int8 *)(v33 + 23);
  v36 = *((_DWORD *)a4 + 4);
  v37 = a4[7];
  v38 = *(unsigned __int8 *)(v37 + 23);
  if (*(char *)(v37 + 23) < 0)
    v39 = *(_QWORD *)(v37 + 8);
  else
    v39 = *(unsigned __int8 *)(v37 + 23);
  if (v36 <= 0)
    v40 = 1;
  else
    v40 = 2;
  if (v32)
    v41 = v40;
  else
    v41 = v36 > 0;
  if (v35)
    ++v41;
  if (v39)
    ++v41;
  if (v41 > 1)
  {
    v42 = 4;
    goto LABEL_101;
  }
  if (v41)
    v42 = 0;
  else
    v42 = 5;
  if (v36 <= 0 && v41)
  {
    if ((*(_BYTE *)(v31 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v31 + 8))
        goto LABEL_82;
    }
    else if (*(_BYTE *)(v31 + 23))
    {
LABEL_82:
      v42 = 1;
      goto LABEL_101;
    }
    if ((v34 & 0x80) != 0)
      v34 = *(_QWORD *)(v33 + 8);
    v43 = a4[8];
    if (a4 != &CoreML::Specification::_WeightParams_default_instance_ && v34 && v43)
    {
      v42 = 2;
    }
    else
    {
      if ((v38 & 0x80) != 0)
        v38 = *(_QWORD *)(v37 + 8);
      if (v43)
        v44 = v38 == 0;
      else
        v44 = 1;
      if (v44 || a4 == &CoreML::Specification::_WeightParams_default_instance_)
        v42 = 5;
      else
        v42 = 3;
    }
  }
LABEL_101:
  if (v12)
    v46 = v42 == 4;
  else
    v46 = 0;
  v47 = v46;
  if (v27 == 4 || v47)
  {
    if (v132 >= 0)
      v59 = HIBYTE(v132);
    else
      v59 = v131;
    v60 = &v126;
    std::string::basic_string[abi:ne180100]((uint64_t)&v126, v59 + 8);
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v60 = (std::string *)v126.__r_.__value_.__r.__words[0];
    if (v59)
    {
      if (v132 >= 0)
        v61 = (void **)&v130;
      else
        v61 = v130;
      memmove(v60, v61, v59);
    }
    strcpy((char *)v60 + v59, " layer '");
    v62 = *((_QWORD *)a2 + 14);
    v63 = *(char *)(v62 + 23);
    if (v63 >= 0)
      v64 = (const std::string::value_type *)*((_QWORD *)a2 + 14);
    else
      v64 = *(const std::string::value_type **)v62;
    if (v63 >= 0)
      v65 = *(unsigned __int8 *)(v62 + 23);
    else
      v65 = *(_QWORD *)(v62 + 8);
    v66 = std::string::append(&v126, v64, v65);
    v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v127.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    v68 = std::string::append(&v127, "' has invalid weights/bias fields.");
    v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v129 = v68->__r_.__value_.__r.__words[2];
    v128 = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    *this = (void *)13;
    std::operator+<char>();
LABEL_148:
    if (SHIBYTE(v129) < 0)
      operator delete((void *)v128);
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v127.__r_.__value_.__l.__data_);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    {
      v70 = (void *)v126.__r_.__value_.__r.__words[0];
LABEL_154:
      operator delete(v70);
      goto LABEL_233;
    }
    goto LABEL_233;
  }
  if (v12 && (v27 == 1 && !v42 || !v27 && v42 == 1))
  {
    if (v132 >= 0)
      v48 = HIBYTE(v132);
    else
      v48 = v131;
    v49 = &v126;
    std::string::basic_string[abi:ne180100]((uint64_t)&v126, v48 + 8);
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v49 = (std::string *)v126.__r_.__value_.__r.__words[0];
    if (v48)
    {
      if (v132 >= 0)
        v50 = (void **)&v130;
      else
        v50 = v130;
      memmove(v49, v50, v48);
    }
    strcpy((char *)v49 + v48, " layer '");
    v51 = *((_QWORD *)a2 + 14);
    v52 = *(char *)(v51 + 23);
    if (v52 >= 0)
      v53 = (const std::string::value_type *)*((_QWORD *)a2 + 14);
    else
      v53 = *(const std::string::value_type **)v51;
    if (v52 >= 0)
      v54 = *(unsigned __int8 *)(v51 + 23);
    else
      v54 = *(_QWORD *)(v51 + 8);
    v55 = std::string::append(&v126, v53, v54);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v127.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = std::string::append(&v127, "has unmatched precisions of weights/bias They should either be half or full precision.");
    v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v129 = v57->__r_.__value_.__r.__words[2];
    v128 = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    *this = (void *)13;
    std::operator+<char>();
    goto LABEL_148;
  }
  if (v27 > 1)
  {
    if (v27 == 2)
    {
      v97 = *((_QWORD *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(&v128, "weight");
      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)a3, v11 * v10, v10, (const void **)&v130, v97, (uint64_t)&v128);
      if (SHIBYTE(v129) < 0)
        operator delete((void *)v128);
      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
        goto LABEL_233;
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
    }
LABEL_217:
    if (v12)
    {
      if (v42 > 1)
      {
        if (v42 == 2)
        {
          v100 = *((_QWORD *)a2 + 14);
          std::string::basic_string[abi:ne180100]<0>(&v128, "bias");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)a4, v10, 1, (const void **)&v130, v100, (uint64_t)&v128);
          if (SHIBYTE(v129) < 0)
            operator delete((void *)v128);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            goto LABEL_233;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
        }
      }
      else
      {
        if (v42)
        {
          v98 = a4[5];
          if (*(char *)(v98 + 23) < 0)
            v99 = *(_QWORD *)(v98 + 8);
          else
            v99 = *(unsigned __int8 *)(v98 + 23);
          v101 = v99 >> 1;
        }
        else
        {
          v101 = *((int *)a4 + 4);
        }
        if (v101 != v10)
        {
          std::operator+<char>();
          v102 = std::string::append(&v123, "' has incorrect bias vector size ");
          v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
          v124.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v103;
          v102->__r_.__value_.__l.__size_ = 0;
          v102->__r_.__value_.__r.__words[2] = 0;
          v102->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v122, v101);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v104 = &v122;
          else
            v104 = (std::string *)v122.__r_.__value_.__r.__words[0];
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v122.__r_.__value_.__r.__words[2]);
          else
            size = v122.__r_.__value_.__l.__size_;
          v106 = std::string::append(&v124, (const std::string::value_type *)v104, size);
          v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
          v125.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v107;
          v106->__r_.__value_.__l.__size_ = 0;
          v106->__r_.__value_.__r.__words[2] = 0;
          v106->__r_.__value_.__r.__words[0] = 0;
          v108 = std::string::append(&v125, " (expected ");
          v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
          v126.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v109;
          v108->__r_.__value_.__l.__size_ = 0;
          v108->__r_.__value_.__r.__words[2] = 0;
          v108->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v121, v10);
          if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v110 = &v121;
          else
            v110 = (std::string *)v121.__r_.__value_.__r.__words[0];
          if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v111 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
          else
            v111 = v121.__r_.__value_.__l.__size_;
          v112 = std::string::append(&v126, (const std::string::value_type *)v110, v111);
          v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
          v127.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v113;
          v112->__r_.__value_.__l.__size_ = 0;
          v112->__r_.__value_.__r.__words[2] = 0;
          v112->__r_.__value_.__r.__words[0] = 0;
          v114 = std::string::append(&v127, ").");
          v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
          v129 = v114->__r_.__value_.__r.__words[2];
          v128 = v115;
          v114->__r_.__value_.__l.__size_ = 0;
          v114->__r_.__value_.__r.__words[2] = 0;
          v114->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v127.__r_.__value_.__l.__data_);
          if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v121.__r_.__value_.__l.__data_);
          if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v126.__r_.__value_.__l.__data_);
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v125.__r_.__value_.__l.__data_);
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v122.__r_.__value_.__l.__data_);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v124.__r_.__value_.__l.__data_);
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v123.__r_.__value_.__l.__data_);
          *this = (void *)13;
          std::operator+<char>();
          if (SHIBYTE(v129) < 0)
          {
            v70 = (void *)v128;
            goto LABEL_154;
          }
          goto LABEL_233;
        }
      }
    }
    CoreML::Result::Result((CoreML::Result *)this);
    goto LABEL_233;
  }
  if (v27)
  {
    if ((v15 & 0x80) != 0)
      v15 = *(_QWORD *)(v14 + 8);
    v17 = v15 >> 1;
  }
  if (v11 * v10 == v17)
    goto LABEL_217;
  std::operator+<char>();
  v71 = std::string::append(&v119, " has incorrect weight matrix size ");
  v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
  v120.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v72;
  v71->__r_.__value_.__l.__size_ = 0;
  v71->__r_.__value_.__r.__words[2] = 0;
  v71->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v118, v17);
  if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v73 = &v118;
  else
    v73 = (std::string *)v118.__r_.__value_.__r.__words[0];
  if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v74 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
  else
    v74 = v118.__r_.__value_.__l.__size_;
  v75 = std::string::append(&v120, (const std::string::value_type *)v73, v74);
  v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  v121.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  v77 = std::string::append(&v121, " to encode a ");
  v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
  v122.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v78;
  v77->__r_.__value_.__l.__size_ = 0;
  v77->__r_.__value_.__r.__words[2] = 0;
  v77->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v117, v11);
  if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v79 = &v117;
  else
    v79 = (std::string *)v117.__r_.__value_.__r.__words[0];
  if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v80 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
  else
    v80 = v117.__r_.__value_.__l.__size_;
  v81 = std::string::append(&v122, (const std::string::value_type *)v79, v80);
  v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
  v123.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v82;
  v81->__r_.__value_.__l.__size_ = 0;
  v81->__r_.__value_.__r.__words[2] = 0;
  v81->__r_.__value_.__r.__words[0] = 0;
  v83 = std::string::append(&v123, " × ");
  v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v84;
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v86 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v86 = __p.__r_.__value_.__l.__size_;
  v87 = std::string::append(&v124, (const std::string::value_type *)p_p, v86);
  v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
  v125.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v88;
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  v89 = std::string::append(&v125, " ");
  v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
  v126.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v90;
  v89->__r_.__value_.__l.__size_ = 0;
  v89->__r_.__value_.__r.__words[2] = 0;
  v89->__r_.__value_.__r.__words[0] = 0;
  if (v132 >= 0)
    v91 = (const std::string::value_type *)&v130;
  else
    v91 = (const std::string::value_type *)v130;
  if (v132 >= 0)
    v92 = HIBYTE(v132);
  else
    v92 = v131;
  v93 = std::string::append(&v126, v91, v92);
  v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  v95 = std::string::append(&v127, ".");
  v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
  v129 = v95->__r_.__value_.__r.__words[2];
  v128 = v96;
  v95->__r_.__value_.__l.__size_ = 0;
  v95->__r_.__value_.__r.__words[2] = 0;
  v95->__r_.__value_.__r.__words[0] = 0;
  *this = (void *)13;
  std::operator+<char>();
  if (SHIBYTE(v129) < 0)
    operator delete((void *)v128);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v125.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117.__r_.__value_.__l.__data_);
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v122.__r_.__value_.__l.__data_);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
  {
    v70 = (void *)v119.__r_.__value_.__r.__words[0];
    goto LABEL_154;
  }
LABEL_233:
  if (SHIBYTE(v132) < 0)
    operator delete(v130);
}

void sub_19C9ACCD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  if (*(char *)(v1 - 81) < 0)
    operator delete(*(void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateBatchnormLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  unint64_t *inited;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  _BOOL4 v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  _BOOL4 v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  _BOOL4 v114;
  int v115;
  unsigned int v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  _BOOL4 v128;
  int v129;
  unsigned int v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  _BOOL4 v153;
  int v154;
  unsigned int v155;
  std::string *v156;
  __int128 v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v161;
  uint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t *v167;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t *v172;
  unint64_t *v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t *v177;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t *v181;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v182;
  std::string *v183;
  __int128 v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t *v188;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t *v193;
  std::string v194;
  void *v195[2];
  std::string::size_type v196;
  void *__p[2];
  char v198;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Batchnorm");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v198 < 0)
          operator delete(__p[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v195, "Batchnorm");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)v195, 3, -1, (uint64_t)v7);
        if (SHIBYTE(v196) < 0)
          operator delete(v195[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 160)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v8 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
      }
      v9 = (uint64_t *)v8[2];
      if (v9)
        v10 = v9;
      else
        v10 = &CoreML::Specification::_WeightParams_default_instance_;
      v11 = v10[5];
      if (*(char *)(v11 + 23) < 0)
        v12 = *(_QWORD *)(v11 + 8);
      else
        v12 = *(unsigned __int8 *)(v11 + 23);
      v13 = v10[6];
      if (*(char *)(v13 + 23) < 0)
        v14 = *(_QWORD *)(v13 + 8);
      else
        v14 = *(unsigned __int8 *)(v13 + 23);
      v15 = *((_DWORD *)v10 + 4);
      v16 = v10[7];
      if (*(char *)(v16 + 23) < 0)
        v17 = *(_QWORD *)(v16 + 8);
      else
        v17 = *(unsigned __int8 *)(v16 + 23);
      v18 = 1;
      if (v15 <= 0)
        v19 = 1;
      else
        v19 = 2;
      if (v12)
        v20 = v19;
      else
        v20 = v15 > 0;
      if (v14)
        ++v20;
      if (v17)
        v21 = v20 + 1;
      else
        v21 = v20;
      v22 = *(_DWORD *)(a3 + 140);
      if (v15 < 1 || v21 != 1)
      {
        if (v22 == 160)
        {
          v24 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v24 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
        }
        v25 = (uint64_t *)v24[3];
        if (v25)
          v26 = v25;
        else
          v26 = &CoreML::Specification::_WeightParams_default_instance_;
        v27 = v26[5];
        if (*(char *)(v27 + 23) < 0)
          v28 = *(_QWORD *)(v27 + 8);
        else
          v28 = *(unsigned __int8 *)(v27 + 23);
        v29 = v26[6];
        if (*(char *)(v29 + 23) < 0)
          v30 = *(_QWORD *)(v29 + 8);
        else
          v30 = *(unsigned __int8 *)(v29 + 23);
        v31 = *((_DWORD *)v26 + 4);
        v32 = v26[7];
        if (*(char *)(v32 + 23) < 0)
          v33 = *(_QWORD *)(v32 + 8);
        else
          v33 = *(unsigned __int8 *)(v32 + 23);
        if (v31 <= 0)
          v34 = 1;
        else
          v34 = 2;
        if (v28)
          v35 = v34;
        else
          v35 = v31 > 0;
        if (v30)
          ++v35;
        if (v33)
          v36 = v35 + 1;
        else
          v36 = v35;
        v22 = *(_DWORD *)(a3 + 140);
        if (v31 < 1 || v36 != 1)
        {
          if (v22 == 160)
          {
            v37 = *(uint64_t **)(a3 + 128);
          }
          else
          {
            inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            v37 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
          }
          v38 = (uint64_t *)v37[4];
          if (v38)
            v39 = v38;
          else
            v39 = &CoreML::Specification::_WeightParams_default_instance_;
          v40 = v39[5];
          if (*(char *)(v40 + 23) < 0)
            v41 = *(_QWORD *)(v40 + 8);
          else
            v41 = *(unsigned __int8 *)(v40 + 23);
          v42 = v39[6];
          if (*(char *)(v42 + 23) < 0)
            v43 = *(_QWORD *)(v42 + 8);
          else
            v43 = *(unsigned __int8 *)(v42 + 23);
          v44 = *((_DWORD *)v39 + 4);
          v45 = v39[7];
          if (*(char *)(v45 + 23) < 0)
            v46 = *(_QWORD *)(v45 + 8);
          else
            v46 = *(unsigned __int8 *)(v45 + 23);
          if (v44 <= 0)
            v47 = 1;
          else
            v47 = 2;
          if (v41)
            v48 = v47;
          else
            v48 = v44 > 0;
          if (v43)
            ++v48;
          if (v46)
            v49 = v48 + 1;
          else
            v49 = v48;
          v22 = *(_DWORD *)(a3 + 140);
          if (v44 < 1 || v49 != 1)
          {
            if (v22 == 160)
            {
              v50 = *(uint64_t **)(a3 + 128);
            }
            else
            {
              inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
              v50 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
            }
            v51 = (uint64_t *)v50[5];
            if (v51)
              v52 = v51;
            else
              v52 = &CoreML::Specification::_WeightParams_default_instance_;
            v53 = v52[5];
            if (*(char *)(v53 + 23) < 0)
              v54 = *(_QWORD *)(v53 + 8);
            else
              v54 = *(unsigned __int8 *)(v53 + 23);
            v55 = v52[6];
            if (*(char *)(v55 + 23) < 0)
              v56 = *(_QWORD *)(v55 + 8);
            else
              v56 = *(unsigned __int8 *)(v55 + 23);
            v57 = *((_DWORD *)v52 + 4);
            v58 = v52[7];
            if (*(char *)(v58 + 23) < 0)
              v59 = *(_QWORD *)(v58 + 8);
            else
              v59 = *(unsigned __int8 *)(v58 + 23);
            if (v57 <= 0)
              v60 = 1;
            else
              v60 = 2;
            if (v54)
              v61 = v60;
            else
              v61 = v57 > 0;
            if (v56)
              ++v61;
            if (v59)
              ++v61;
            v62 = v61 == 1;
            v18 = v57 > 0 && v62;
            v22 = *(_DWORD *)(a3 + 140);
          }
        }
      }
      if (v22 == 160)
      {
        v63 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v63 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
      }
      v64 = (uint64_t *)v63[2];
      if (v64)
        v65 = v64;
      else
        v65 = &CoreML::Specification::_WeightParams_default_instance_;
      v66 = v65[5];
      v67 = *(unsigned __int8 *)(v66 + 23);
      if (*(char *)(v66 + 23) < 0)
        v68 = *(_QWORD *)(v66 + 8);
      else
        v68 = *(unsigned __int8 *)(v66 + 23);
      v69 = v65[6];
      if (*(char *)(v69 + 23) < 0)
        v70 = *(_QWORD *)(v69 + 8);
      else
        v70 = *(unsigned __int8 *)(v69 + 23);
      v71 = *((_DWORD *)v65 + 4);
      v72 = v65[7];
      if (*(char *)(v72 + 23) < 0)
        v73 = *(_QWORD *)(v72 + 8);
      else
        v73 = *(unsigned __int8 *)(v72 + 23);
      if (v71 <= 0)
        v74 = 1;
      else
        v74 = 2;
      if (v68)
        v75 = v74;
      else
        v75 = v71 > 0;
      if (v70)
        ++v75;
      if (v73)
        ++v75;
      if (v71 <= 0 && v75 == 1)
      {
        if ((v67 & 0x80) != 0)
          v67 = *(_QWORD *)(v66 + 8);
        if (v67)
          goto LABEL_224;
      }
      if (*(_DWORD *)(a3 + 140) == 160)
      {
        v76 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v76 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
      }
      v77 = (uint64_t *)v76[3];
      if (v77)
        v78 = v77;
      else
        v78 = &CoreML::Specification::_WeightParams_default_instance_;
      v79 = v78[5];
      v80 = *(unsigned __int8 *)(v79 + 23);
      if (*(char *)(v79 + 23) < 0)
        v81 = *(_QWORD *)(v79 + 8);
      else
        v81 = *(unsigned __int8 *)(v79 + 23);
      v82 = v78[6];
      if (*(char *)(v82 + 23) < 0)
        v83 = *(_QWORD *)(v82 + 8);
      else
        v83 = *(unsigned __int8 *)(v82 + 23);
      v84 = *((_DWORD *)v78 + 4);
      v85 = v78[7];
      if (*(char *)(v85 + 23) < 0)
        v86 = *(_QWORD *)(v85 + 8);
      else
        v86 = *(unsigned __int8 *)(v85 + 23);
      if (v84 <= 0)
        v87 = 1;
      else
        v87 = 2;
      if (v81)
        v88 = v87;
      else
        v88 = v84 > 0;
      if (v83)
        ++v88;
      if (v86)
        ++v88;
      if (v84 <= 0 && v88 == 1)
      {
        if ((v80 & 0x80) != 0)
          v80 = *(_QWORD *)(v79 + 8);
        if (v80)
          goto LABEL_224;
      }
      if (*(_DWORD *)(a3 + 140) == 160)
      {
        v89 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v89 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
      }
      v90 = (uint64_t *)v89[4];
      if (v90)
        v91 = v90;
      else
        v91 = &CoreML::Specification::_WeightParams_default_instance_;
      v92 = v91[5];
      v93 = *(unsigned __int8 *)(v92 + 23);
      if (*(char *)(v92 + 23) < 0)
        v94 = *(_QWORD *)(v92 + 8);
      else
        v94 = *(unsigned __int8 *)(v92 + 23);
      v95 = v91[6];
      if (*(char *)(v95 + 23) < 0)
        v96 = *(_QWORD *)(v95 + 8);
      else
        v96 = *(unsigned __int8 *)(v95 + 23);
      v97 = *((_DWORD *)v91 + 4);
      v98 = v91[7];
      if (*(char *)(v98 + 23) < 0)
        v99 = *(_QWORD *)(v98 + 8);
      else
        v99 = *(unsigned __int8 *)(v98 + 23);
      if (v97 <= 0)
        v100 = 1;
      else
        v100 = 2;
      if (v94)
        v101 = v100;
      else
        v101 = v97 > 0;
      if (v96)
        ++v101;
      if (v99)
        ++v101;
      if (v97 > 0 || v101 != 1)
        goto LABEL_253;
      if ((v93 & 0x80) != 0)
        v93 = *(_QWORD *)(v92 + 8);
      if (v93)
      {
LABEL_224:
        v102 = 1;
      }
      else
      {
LABEL_253:
        if (*(_DWORD *)(a3 + 140) == 160)
        {
          v118 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v118 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
        }
        v132 = (uint64_t *)v118[5];
        if (v132)
          v133 = v132;
        else
          v133 = &CoreML::Specification::_WeightParams_default_instance_;
        v134 = v133[5];
        v135 = *(unsigned __int8 *)(v134 + 23);
        if (*(char *)(v134 + 23) < 0)
          v136 = *(_QWORD *)(v134 + 8);
        else
          v136 = *(unsigned __int8 *)(v134 + 23);
        v141 = v133[6];
        if (*(char *)(v141 + 23) < 0)
          v142 = *(_QWORD *)(v141 + 8);
        else
          v142 = *(unsigned __int8 *)(v141 + 23);
        v143 = *((_DWORD *)v133 + 4);
        v144 = v133[7];
        if (*(char *)(v144 + 23) < 0)
          v145 = *(_QWORD *)(v144 + 8);
        else
          v145 = *(unsigned __int8 *)(v144 + 23);
        v102 = 0;
        if (v143 <= 0)
          v146 = 1;
        else
          v146 = 2;
        if (v136)
          v147 = v146;
        else
          v147 = v143 > 0;
        if (v142)
          ++v147;
        if (v145)
          ++v147;
        if (v143 <= 0 && v147 == 1)
        {
          if ((v135 & 0x80) != 0)
            v135 = *(_QWORD *)(v134 + 8);
          v102 = v135 != 0;
        }
      }
      if (*(_DWORD *)(a3 + 140) == 160)
      {
        v103 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v103 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
      }
      v104 = (uint64_t *)v103[2];
      if (v104)
        v105 = v104;
      else
        v105 = &CoreML::Specification::_WeightParams_default_instance_;
      v106 = v105[5];
      if (*(char *)(v106 + 23) < 0)
        v107 = *(_QWORD *)(v106 + 8);
      else
        v107 = *(unsigned __int8 *)(v106 + 23);
      v108 = v105[6];
      if (*(char *)(v108 + 23) < 0)
        v109 = *(_QWORD *)(v108 + 8);
      else
        v109 = *(unsigned __int8 *)(v108 + 23);
      v110 = *((_DWORD *)v105 + 4);
      v111 = v105[7];
      if (*(char *)(v111 + 23) < 0)
        v112 = *(_QWORD *)(v111 + 8);
      else
        v112 = *(unsigned __int8 *)(v111 + 23);
      v113 = v110 <= 0;
      v114 = v110 > 0;
      if (v113)
        v115 = 1;
      else
        v115 = 2;
      if (v107)
        v116 = v115;
      else
        v116 = v114;
      if (v109)
        ++v116;
      if (v112)
        ++v116;
      if (v116 > 1)
        goto LABEL_333;
      if (*(_DWORD *)(a3 + 140) == 160)
      {
        v117 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v117 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
      }
      v119 = (uint64_t *)v117[3];
      if (v119)
        v120 = v119;
      else
        v120 = &CoreML::Specification::_WeightParams_default_instance_;
      v121 = v120[5];
      if (*(char *)(v121 + 23) < 0)
        v122 = *(_QWORD *)(v121 + 8);
      else
        v122 = *(unsigned __int8 *)(v121 + 23);
      v123 = v120[6];
      if (*(char *)(v123 + 23) < 0)
        v124 = *(_QWORD *)(v123 + 8);
      else
        v124 = *(unsigned __int8 *)(v123 + 23);
      v125 = *((_DWORD *)v120 + 4);
      v126 = v120[7];
      if (*(char *)(v126 + 23) < 0)
        v127 = *(_QWORD *)(v126 + 8);
      else
        v127 = *(unsigned __int8 *)(v126 + 23);
      v113 = v125 <= 0;
      v128 = v125 > 0;
      if (v113)
        v129 = 1;
      else
        v129 = 2;
      if (v122)
        v130 = v129;
      else
        v130 = v128;
      if (v124)
        ++v130;
      if (v127)
        ++v130;
      if (v130 > 1)
        goto LABEL_333;
      if (*(_DWORD *)(a3 + 140) == 160)
      {
        v131 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v131 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
      }
      v137 = (uint64_t *)v131[4];
      if (v137)
        v138 = v137;
      else
        v138 = &CoreML::Specification::_WeightParams_default_instance_;
      v139 = v138[5];
      if (*(char *)(v139 + 23) < 0)
        v140 = *(_QWORD *)(v139 + 8);
      else
        v140 = *(unsigned __int8 *)(v139 + 23);
      v148 = v138[6];
      if (*(char *)(v148 + 23) < 0)
        v149 = *(_QWORD *)(v148 + 8);
      else
        v149 = *(unsigned __int8 *)(v148 + 23);
      v150 = *((_DWORD *)v138 + 4);
      v151 = v138[7];
      if (*(char *)(v151 + 23) < 0)
        v152 = *(_QWORD *)(v151 + 8);
      else
        v152 = *(unsigned __int8 *)(v151 + 23);
      v113 = v150 <= 0;
      v153 = v150 > 0;
      if (v113)
        v154 = 1;
      else
        v154 = 2;
      if (v140)
        v155 = v154;
      else
        v155 = v153;
      if (v149)
        ++v155;
      if (v152)
        ++v155;
      if (v155 > 1
        || (*(_DWORD *)(a3 + 140) != 160
          ? (CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited),
             v158 = &CoreML::Specification::_BatchnormLayerParams_default_instance_)
          : (v158 = *(uint64_t **)(a3 + 128)),
            (v159 = (uint64_t *)v158[5]) != 0
          ? (v160 = v159)
          : (v160 = &CoreML::Specification::_WeightParams_default_instance_),
            (v161 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::valueType(v160),
             (v18 & v102 & 1) != 0)
         || (_DWORD)v161 == 4))
      {
LABEL_333:
        std::operator+<char>();
        v156 = std::string::append(&v194, "' parameters have values for both full and half precision. Parameters should either be specified in half or full precision, mixed parameters are not supported.");
        v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
        v196 = v156->__r_.__value_.__r.__words[2];
        *(_OWORD *)v195 = v157;
        v156->__r_.__value_.__l.__size_ = 0;
        v156->__r_.__value_.__r.__words[2] = 0;
        v156->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v194.__r_.__value_.__l.__data_);
      }
      else
      {
        if (*(_DWORD *)(a3 + 140) == 160)
        {
          v162 = *(uint64_t **)(a3 + 128);
          v163 = v162[6];
        }
        else
        {
          v164 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v161);
          v163 = xmmword_1ED004618;
          if (*(_DWORD *)(a3 + 140) == 160)
          {
            v162 = *(uint64_t **)(a3 + 128);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v164);
            v162 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
          }
        }
        v165 = (uint64_t *)v162[2];
        std::string::basic_string[abi:ne180100]<0>(v195, "BatchNorm");
        v166 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(&v194, "gamma");
        if (v165)
          v167 = v165;
        else
          v167 = &CoreML::Specification::_WeightParams_default_instance_;
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v167, v163, 1, (const void **)v195, v166, (uint64_t)&v194);
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v194.__r_.__value_.__l.__data_);
        if (SHIBYTE(v196) < 0)
          operator delete(v195[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (*(_DWORD *)(a3 + 140) == 160)
        {
          v169 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v168);
          v169 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
        }
        v170 = (uint64_t *)v169[3];
        std::string::basic_string[abi:ne180100]<0>(v195, "BatchNorm");
        v171 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(&v194, "beta");
        if (v170)
          v172 = v170;
        else
          v172 = &CoreML::Specification::_WeightParams_default_instance_;
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v172, v163, 1, (const void **)v195, v171, (uint64_t)&v194);
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v194.__r_.__value_.__l.__data_);
        if (SHIBYTE(v196) < 0)
          operator delete(v195[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (*(_DWORD *)(a3 + 140) == 160)
        {
          v174 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          v173 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v173);
          v174 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
        }
        if (*((_BYTE *)v174 + 56))
        {
LABEL_377:
          CoreML::Result::Result((CoreML::Result *)this);
          return;
        }
        if (*(_DWORD *)(a3 + 140) == 160)
        {
          v175 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v173);
          v175 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
        }
        v176 = (uint64_t *)v175[4];
        if (v176)
          v177 = v176;
        else
          v177 = &CoreML::Specification::_WeightParams_default_instance_;
        v178 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::valueType(v177);
        if ((_DWORD)v178 != 5)
        {
          if (*(_DWORD *)(a3 + 140) == 160)
          {
            v179 = *(uint64_t **)(a3 + 128);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v178);
            v179 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
          }
          v180 = (uint64_t *)v179[4];
          v181 = v180 ? v180 : &CoreML::Specification::_WeightParams_default_instance_;
          v182 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::valueType(v181);
          if ((_DWORD)v182 != 5)
          {
            if (*(_DWORD *)(a3 + 140) == 160)
            {
              v185 = *(uint64_t **)(a3 + 128);
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v182);
              v185 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
            }
            v186 = (uint64_t *)v185[4];
            std::string::basic_string[abi:ne180100]<0>(v195, "BatchNorm");
            v187 = *(_QWORD *)(a3 + 112);
            std::string::basic_string[abi:ne180100]<0>(&v194, "mean");
            if (v186)
              v188 = v186;
            else
              v188 = &CoreML::Specification::_WeightParams_default_instance_;
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v188, v163, 1, (const void **)v195, v187, (uint64_t)&v194);
            if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v194.__r_.__value_.__l.__data_);
            if (SHIBYTE(v196) < 0)
              operator delete(v195[0]);
            if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
              return;
            if (*((char *)this + 31) < 0)
              operator delete(this[1]);
            if (*(_DWORD *)(a3 + 140) == 160)
            {
              v190 = *(uint64_t **)(a3 + 128);
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v189);
              v190 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
            }
            v191 = (uint64_t *)v190[5];
            std::string::basic_string[abi:ne180100]<0>(v195, "BatchNorm");
            v192 = *(_QWORD *)(a3 + 112);
            std::string::basic_string[abi:ne180100]<0>(&v194, "variance");
            if (v191)
              v193 = v191;
            else
              v193 = &CoreML::Specification::_WeightParams_default_instance_;
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v193, v163, 1, (const void **)v195, v192, (uint64_t)&v194);
            if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v194.__r_.__value_.__l.__data_);
            if (SHIBYTE(v196) < 0)
              operator delete(v195[0]);
            if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
              return;
            if (*((char *)this + 31) < 0)
              operator delete(this[1]);
            goto LABEL_377;
          }
        }
        std::operator+<char>();
        v183 = std::string::append(&v194, "' is missing mean and variance.");
        v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
        v196 = v183->__r_.__value_.__r.__words[2];
        *(_OWORD *)v195 = v184;
        v183->__r_.__value_.__l.__size_ = 0;
        v183->__r_.__value_.__r.__words[2] = 0;
        v183->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v194.__r_.__value_.__l.__data_);
      }
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v196) < 0)
        operator delete(v195[0]);
    }
  }
}

void sub_19C9ADD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateActivation(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  unint64_t *inited;
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  BOOL v41;
  _BOOL4 v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  BOOL v66;
  unsigned int v68;
  const char *v69;
  size_t v70;
  uint64_t v71;
  void *v72[2];
  char v73;
  void *__p[2];
  char v75;
  void *v76;
  char v77;
  void *v78[2];
  _QWORD v79[11];
  char v80;
  uint64_t v81;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (!*(_BYTE *)a2)
      {
LABEL_36:
        if (*(_DWORD *)(a3 + 140) == 130)
        {
          v10 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v10 = &CoreML::Specification::_ActivationParams_default_instance_;
        }
        v11 = *((_DWORD *)v10 + 7);
        v12 = (v11 - 10);
        if (v12 <= 0x3D)
        {
          if (((1 << (v11 - 10)) & 0x10040100C0300421) != 0)
          {
LABEL_41:
            CoreML::Result::Result((CoreML::Result *)this);
            return;
          }
          if (v12 == 15)
          {
            v20 = &CoreML::Specification::_WeightParams_default_instance_;
            if (*(_QWORD *)(v10[2] + 16))
              v20 = *(uint64_t **)(v10[2] + 16);
            v21 = v20[5];
            if (*(char *)(v21 + 23) < 0)
              v22 = *(_QWORD *)(v21 + 8);
            else
              v22 = *(unsigned __int8 *)(v21 + 23);
            v26 = v20[6];
            if (*(char *)(v26 + 23) < 0)
              v27 = *(_QWORD *)(v26 + 8);
            else
              v27 = *(unsigned __int8 *)(v26 + 23);
            v32 = *((_DWORD *)v20 + 4);
            v33 = v20[7];
            if (*(char *)(v33 + 23) < 0)
              v34 = *(_QWORD *)(v33 + 8);
            else
              v34 = *(unsigned __int8 *)(v33 + 23);
            v41 = v32 <= 0;
            v42 = v32 > 0;
            if (v41)
              v43 = 1;
            else
              v43 = 2;
            if (v22)
              v44 = v43;
            else
              v44 = v42;
            if (v27)
              ++v44;
            if (v34)
              ++v44;
            if (v44 < 2)
              goto LABEL_41;
            goto LABEL_187;
          }
          if (v12 == 61)
          {
            v13 = v10[2];
            if (*(_QWORD *)(v13 + 16))
              v14 = *(uint64_t **)(v13 + 16);
            else
              v14 = &CoreML::Specification::_WeightParams_default_instance_;
            v15 = v14[5];
            v16 = *(unsigned __int8 *)(v15 + 23);
            if (*(char *)(v15 + 23) < 0)
              v17 = *(_QWORD *)(v15 + 8);
            else
              v17 = *(unsigned __int8 *)(v15 + 23);
            v23 = v14[6];
            v24 = *(unsigned __int8 *)(v23 + 23);
            if (*(char *)(v23 + 23) < 0)
              v25 = *(_QWORD *)(v23 + 8);
            else
              v25 = *(unsigned __int8 *)(v23 + 23);
            v28 = *((_DWORD *)v14 + 4);
            v29 = v14[7];
            v30 = *(unsigned __int8 *)(v29 + 23);
            if (*(char *)(v29 + 23) < 0)
              v31 = *(_QWORD *)(v29 + 8);
            else
              v31 = *(unsigned __int8 *)(v29 + 23);
            v35 = v28 > 0;
            if (v28 <= 0)
              v36 = 1;
            else
              v36 = 2;
            if (v17)
              v37 = v36;
            else
              v37 = v28 > 0;
            if (v25)
              ++v37;
            if (v31)
              v38 = v37 + 1;
            else
              v38 = v37;
            if (v38 <= 1)
            {
              if (v38)
                v39 = 0;
              else
                v39 = 5;
              if (v28 <= 0 && v38)
              {
                if ((v16 & 0x80) != 0)
                  v40 = *(_QWORD *)(v15 + 8);
                else
                  v40 = *(unsigned __int8 *)(v15 + 23);
                if (v40)
                {
                  v39 = 1;
                }
                else
                {
                  if ((v24 & 0x80) != 0)
                    v45 = *(_QWORD *)(v23 + 8);
                  else
                    v45 = *(unsigned __int8 *)(v23 + 23);
                  v46 = v14[8];
                  if (v14 != &CoreML::Specification::_WeightParams_default_instance_ && v45 && v46)
                  {
                    v39 = 2;
                  }
                  else
                  {
                    if ((v30 & 0x80) != 0)
                      v47 = *(_QWORD *)(v29 + 8);
                    else
                      v47 = *(unsigned __int8 *)(v29 + 23);
                    if (v46)
                      v48 = v47 == 0;
                    else
                      v48 = 1;
                    if (v48 || v14 == &CoreML::Specification::_WeightParams_default_instance_)
                      v39 = 5;
                    else
                      v39 = 3;
                  }
                }
              }
            }
            else
            {
              v39 = 4;
            }
            v50 = *(uint64_t **)(v13 + 24);
            if (!v50)
              v50 = &CoreML::Specification::_WeightParams_default_instance_;
            v51 = v50[5];
            v52 = *(unsigned __int8 *)(v51 + 23);
            if (*(char *)(v51 + 23) < 0)
              v53 = *(_QWORD *)(v51 + 8);
            else
              v53 = *(unsigned __int8 *)(v51 + 23);
            v54 = v50[6];
            v55 = *(unsigned __int8 *)(v54 + 23);
            if (*(char *)(v54 + 23) < 0)
              v56 = *(_QWORD *)(v54 + 8);
            else
              v56 = *(unsigned __int8 *)(v54 + 23);
            v57 = *((_DWORD *)v50 + 4);
            v58 = v50[7];
            v59 = *(unsigned __int8 *)(v58 + 23);
            if (*(char *)(v58 + 23) < 0)
              v60 = *(_QWORD *)(v58 + 8);
            else
              v60 = *(unsigned __int8 *)(v58 + 23);
            if (v57 <= 0)
              v61 = 1;
            else
              v61 = 2;
            if (v53)
              v62 = v61;
            else
              v62 = v57 > 0;
            if (v56)
              ++v62;
            if (v60)
              v63 = v62 + 1;
            else
              v63 = v62;
            if (v63 <= 1)
            {
              if (v63)
                v64 = 0;
              else
                v64 = 5;
              if (v57 <= 0 && v63)
              {
                if ((v52 & 0x80) != 0)
                  v52 = *(_QWORD *)(v51 + 8);
                if (v52)
                {
                  v64 = 1;
                }
                else
                {
                  if ((v55 & 0x80) != 0)
                    v55 = *(_QWORD *)(v54 + 8);
                  v65 = v50[8];
                  if (v50 != &CoreML::Specification::_WeightParams_default_instance_ && v55 && v65)
                  {
                    v64 = 2;
                  }
                  else
                  {
                    if ((v59 & 0x80) != 0)
                      v59 = *(_QWORD *)(v58 + 8);
                    if (v65)
                      v66 = v59 == 0;
                    else
                      v66 = 1;
                    if (v66 || v50 == &CoreML::Specification::_WeightParams_default_instance_)
                      v64 = 5;
                    else
                      v64 = 3;
                  }
                }
              }
            }
            else
            {
              v64 = 4;
            }
            if (v39 == v64)
            {
              if ((v16 & 0x80) != 0)
              {
                v16 = *(_QWORD *)(v15 + 8);
                if ((v24 & 0x80) == 0)
                {
LABEL_177:
                  if ((v30 & 0x80) == 0)
                    goto LABEL_178;
LABEL_195:
                  v30 = *(_QWORD *)(v29 + 8);
LABEL_178:
                  if (v16)
                    v68 = v36;
                  else
                    v68 = v35;
                  if (v24)
                    ++v68;
                  if (v30)
                    ++v68;
                  if (v68 <= 1 && CoreML::valueType(v50) != 4)
                    goto LABEL_41;
                  goto LABEL_187;
                }
              }
              else if ((v24 & 0x80) == 0)
              {
                goto LABEL_177;
              }
              v24 = *(_QWORD *)(v23 + 8);
              if ((v30 & 0x80) == 0)
                goto LABEL_178;
              goto LABEL_195;
            }
LABEL_187:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v78);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Nonlinearity type ", 18);
            v69 = MLActivationParamsNonlinearityType_Name(*((_DWORD *)v10 + 7));
            v70 = strlen(v69);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v69, v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)" has inconsistent weight parameter types.", 41);
            std::stringbuf::str();
            *this = (void *)13;
            std::operator+<char>();
LABEL_188:
            if (v77 < 0)
              operator delete(v76);
            v78[0] = *(void **)MEMORY[0x1E0DE4F50];
            v71 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
            *(void **)((char *)v78 + *((_QWORD *)v78[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
            v79[0] = v71;
            v79[1] = MEMORY[0x1E0DE4FB8] + 16;
            if (v80 < 0)
              operator delete((void *)v79[9]);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1A1AD61C4](&v81);
            return;
          }
        }
        if (v11 == 5)
          goto LABEL_41;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Nonlinearity type ", 18);
        v18 = MLActivationParamsNonlinearityType_Name(*((_DWORD *)v10 + 7));
        v19 = strlen(v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v18, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)" is not supported in this version of CoreML.", 44);
        std::stringbuf::str();
        *this = (void *)13;
        std::operator+<char>();
        goto LABEL_188;
      }
      if (*(_DWORD *)(a3 + 140) == 130)
      {
        v7 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v7 = &CoreML::Specification::_ActivationParams_default_instance_;
      }
      if (*((_DWORD *)v7 + 7) == 25)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ActivationPReLU");
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)a2 + 32);
        if (v75 < 0)
          operator delete(__p[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v78, "ActivationPReLU");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)v78, 3, -1, (uint64_t)a2 + 32);
        if (SHIBYTE(v79[0]) < 0)
          operator delete(v78[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 130)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v8 = &CoreML::Specification::_ActivationParams_default_instance_;
      }
      if (*((_DWORD *)v8 + 7) != 71)
        goto LABEL_36;
      std::string::basic_string[abi:ne180100]<0>(v72, "ActivationParametricSoftplus");
      v9 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)v72, (uint64_t)v9);
      if (v73 < 0)
        operator delete(v72[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v78, "ActivationParametricSoftplus");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)v78, 3, -1, (uint64_t)v9);
        if (SHIBYTE(v79[0]) < 0)
          operator delete(v78[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          goto LABEL_36;
        }
      }
    }
  }
}

void sub_19C9AE594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a27);
  _Unwind_Resume(a1);
}

const char *MLActivationParamsNonlinearityType_Name(int a1)
{
  if (a1 > 30)
  {
    if (a1 <= 49)
    {
      switch(a1)
      {
        case 31:
          return "MLActivationParamsNonlinearityType_scaledTanh";
        case 40:
          return "MLActivationParamsNonlinearityType_sigmoid";
        case 41:
          return "MLActivationParamsNonlinearityType_sigmoidHard";
        default:
          return "INVALID";
      }
    }
    else if (a1 > 69)
    {
      if (a1 != 70)
      {
        if (a1 == 71)
          return "MLActivationParamsNonlinearityType_parametricSoftplus";
        return "INVALID";
      }
      return "MLActivationParamsNonlinearityType_softplus";
    }
    else
    {
      if (a1 != 50)
      {
        if (a1 == 60)
          return "MLActivationParamsNonlinearityType_softsign";
        return "INVALID";
      }
      return "MLActivationParamsNonlinearityType_ELU";
    }
  }
  else if (a1 <= 14)
  {
    if (!a1)
      return "INVALID";
    if (a1 != 5)
    {
      if (a1 == 10)
        return "MLActivationParamsNonlinearityType_ReLU";
      return "INVALID";
    }
    return "MLActivationParamsNonlinearityType_linear";
  }
  else if (a1 > 24)
  {
    if (a1 != 25)
    {
      if (a1 == 30)
        return "MLActivationParamsNonlinearityType_tanh";
      return "INVALID";
    }
    return "MLActivationParamsNonlinearityType_PReLU";
  }
  else
  {
    if (a1 != 15)
    {
      if (a1 == 20)
        return "MLActivationParamsNonlinearityType_thresholdedReLU";
      return "INVALID";
    }
    return "MLActivationParamsNonlinearityType_leakyReLU";
  }
}

void CoreML::NeuralNetworkSpecValidator::validatePoolingLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  uint64_t *v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  void *v12[2];
  std::string::size_type v13;
  void *__p[2];
  char v15;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Pooling");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v15 < 0)
          operator delete(__p[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v12, "Pooling");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)v12, 4, -1, (uint64_t)v7);
        if (SHIBYTE(v13) < 0)
          operator delete(v12[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 120)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        v8 = &CoreML::Specification::_PoolingLayerParams_default_instance_;
      }
      if (*((_DWORD *)v8 + 21))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v9 = std::string::append(&v11, "' is not set.");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)v12 = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v11.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0)
          operator delete(v12[0]);
      }
    }
  }
}

void sub_19C9AE954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validatePooling3dLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  const CoreML::Specification::Pooling3DLayerParams *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  void *v22[2];
  char v23;
  void *__p;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  void *v39[2];
  char v40;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (!*(_BYTE *)a2)
        goto LABEL_18;
      std::string::basic_string[abi:ne180100]<0>(v39, "Pooling3d");
      v7 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)v39, (uint64_t)v7);
      if (v40 < 0)
        operator delete(v39[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Pooling3d");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)&__p, 5, -1, (uint64_t)v7);
        if (SHIBYTE(v26) < 0)
          operator delete(__p);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
LABEL_18:
          if (*(_DWORD *)(a3 + 140) == 1465)
          {
            v8 = *(const CoreML::Specification::Pooling3DLayerParams **)(a3 + 128);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
            v8 = (const CoreML::Specification::Pooling3DLayerParams *)&CoreML::Specification::_Pooling3DLayerParams_default_instance_;
          }
          CoreML::Specification::Pooling3DLayerParams::Pooling3DLayerParams((CoreML::Specification::Pooling3DLayerParams *)&__p, v8);
          v9 = v26;
          std::string::basic_string[abi:ne180100]<0>(v22, "Kernel Depth");
          CoreML::validatePositive((CoreML::Result *)this, v9, (const void **)v22);
          if (v23 < 0)
            operator delete(v22[0]);
          if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
          {
            if (*((char *)this + 31) < 0)
              operator delete(this[1]);
            v10 = v27;
            std::string::basic_string[abi:ne180100]<0>(v22, "Kernel Height");
            CoreML::validatePositive((CoreML::Result *)this, v10, (const void **)v22);
            if (v23 < 0)
              operator delete(v22[0]);
            if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
            {
              if (*((char *)this + 31) < 0)
                operator delete(this[1]);
              v11 = v28;
              std::string::basic_string[abi:ne180100]<0>(v22, "Kernel Width");
              CoreML::validatePositive((CoreML::Result *)this, v11, (const void **)v22);
              if (v23 < 0)
                operator delete(v22[0]);
              if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
              {
                if (*((char *)this + 31) < 0)
                  operator delete(this[1]);
                v12 = v29;
                std::string::basic_string[abi:ne180100]<0>(v22, "Stride Depth");
                CoreML::validatePositive((CoreML::Result *)this, v12, (const void **)v22);
                if (v23 < 0)
                  operator delete(v22[0]);
                if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                {
                  if (*((char *)this + 31) < 0)
                    operator delete(this[1]);
                  v13 = v30;
                  std::string::basic_string[abi:ne180100]<0>(v22, "Stride Height");
                  CoreML::validatePositive((CoreML::Result *)this, v13, (const void **)v22);
                  if (v23 < 0)
                    operator delete(v22[0]);
                  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                  {
                    if (*((char *)this + 31) < 0)
                      operator delete(this[1]);
                    v14 = v31;
                    std::string::basic_string[abi:ne180100]<0>(v22, "Stride Width");
                    CoreML::validatePositive((CoreML::Result *)this, v14, (const void **)v22);
                    if (v23 < 0)
                      operator delete(v22[0]);
                    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                    {
                      if (*((char *)this + 31) < 0)
                        operator delete(this[1]);
                      v15 = v38;
                      v16 = v32;
                      std::string::basic_string[abi:ne180100]<0>(v22, "Front");
                      CoreML::validatePooling3dPadding((CoreML::Result *)this, v15, v16);
                      if (v23 < 0)
                        operator delete(v22[0]);
                      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                      {
                        if (*((char *)this + 31) < 0)
                          operator delete(this[1]);
                        v17 = v33;
                        std::string::basic_string[abi:ne180100]<0>(v22, "Back");
                        CoreML::validatePooling3dPadding((CoreML::Result *)this, v15, v17);
                        if (v23 < 0)
                          operator delete(v22[0]);
                        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                        {
                          if (*((char *)this + 31) < 0)
                            operator delete(this[1]);
                          v18 = v34;
                          std::string::basic_string[abi:ne180100]<0>(v22, "Top");
                          CoreML::validatePooling3dPadding((CoreML::Result *)this, v15, v18);
                          if (v23 < 0)
                            operator delete(v22[0]);
                          if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                          {
                            if (*((char *)this + 31) < 0)
                              operator delete(this[1]);
                            v19 = v35;
                            std::string::basic_string[abi:ne180100]<0>(v22, "Bottom");
                            CoreML::validatePooling3dPadding((CoreML::Result *)this, v15, v19);
                            if (v23 < 0)
                              operator delete(v22[0]);
                            if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                            {
                              if (*((char *)this + 31) < 0)
                                operator delete(this[1]);
                              v20 = v36;
                              std::string::basic_string[abi:ne180100]<0>(v22, "Left");
                              CoreML::validatePooling3dPadding((CoreML::Result *)this, v15, v20);
                              if (v23 < 0)
                                operator delete(v22[0]);
                              if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                              {
                                if (*((char *)this + 31) < 0)
                                  operator delete(this[1]);
                                v21 = v37;
                                std::string::basic_string[abi:ne180100]<0>(v22, "Right");
                                CoreML::validatePooling3dPadding((CoreML::Result *)this, v15, v21);
                                if (v23 < 0)
                                  operator delete(v22[0]);
                                if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                                {
                                  if (*((char *)this + 31) < 0)
                                    operator delete(this[1]);
                                  CoreML::Result::Result((CoreML::Result *)this);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          __p = &off_1E3D52848;
          google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v25);
        }
      }
    }
  }
}

void sub_19C9AEF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a16);
  _Unwind_Resume(a1);
}

void CoreML::validatePooling3dPadding(CoreML::Result *this, int a2, int a3)
{
  std::string *v6;
  __int128 v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  __int128 v35;
  std::string::size_type v36;

  if (!a2)
  {
    if (a3 < 0)
    {
      std::operator+<char>();
      v20 = std::string::append(&v32, " must be non-negative, got ");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v31, a3);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v31;
      else
        v22 = (std::string *)v31.__r_.__value_.__r.__words[0];
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      else
        size = v31.__r_.__value_.__l.__size_;
      v24 = std::string::append(&v33, (const std::string::value_type *)v22, size);
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      v26 = std::string::append(&v34, ".");
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v36 = v26->__r_.__value_.__r.__words[2];
      v35 = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      *(_QWORD *)this = 13;
      std::operator+<char>();
      goto LABEL_47;
    }
LABEL_31:
    CoreML::Result::Result(this);
    return;
  }
  if (!a3)
    goto LABEL_31;
  std::operator+<char>();
  v6 = std::string::append(&v30, " cannot be non-zero (got ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v29, a3);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v29;
  else
    v8 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  else
    v9 = v29.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v31, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v32, ") unless padding type is CUSTOM (got ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v28, a2);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v28;
  else
    v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  else
    v15 = v28.__r_.__value_.__l.__size_;
  v16 = std::string::append(&v33, (const std::string::value_type *)v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v34, ").");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v36 = v18->__r_.__value_.__r.__words[2];
  v35 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  *(_QWORD *)this = 13;
  std::operator+<char>();
LABEL_47:
  if (SHIBYTE(v36) < 0)
    operator delete((void *)v35);
}

void sub_19C9AF2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (*(char *)(v47 - 57) < 0)
    operator delete(*(void **)(v47 - 80));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateGlobalPooling3dLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, const CoreML::Specification::NeuralNetworkLayer *a3)
{
  char *v6;
  void *v7[2];
  char v8;
  void *__p[2];
  char v10;

  CoreML::validateInputCount((CoreML *)this, a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (!*(_BYTE *)a2)
        goto LABEL_18;
      std::string::basic_string[abi:ne180100]<0>(__p, "Pooling3d");
      v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, a3, (uint64_t)__p, (uint64_t)v6);
      if (v10 < 0)
        operator delete(__p[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v7, "Pooling3d");
        CoreML::validateRankCount((uint64_t)this, a3, (uint64_t)v7, 5, -1, (uint64_t)v6);
        if (v8 < 0)
          operator delete(v7[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
LABEL_18:
          CoreML::Result::Result((CoreML::Result *)this);
        }
      }
    }
  }
}

void sub_19C9AF568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validatePaddingLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  std::string *v10;
  __int128 v11;
  uint64_t *v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string __p;
  std::string v22;
  std::string v23;
  std::string v24;
  __int128 v25;
  std::string::size_type v26;
  void *v27[2];
  char v28;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v27, "Padding");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)v27, (uint64_t)v7);
        if (v28 < 0)
          operator delete(v27[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(&v25, "Padding");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)&v25, 2, -1, (uint64_t)v7);
        if (SHIBYTE(v26) < 0)
          operator delete((void *)v25);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 200)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        v8 = &CoreML::Specification::_PaddingLayerParams_default_instance_;
      }
      v9 = (uint64_t *)v8[2];
      if (!v9)
        v9 = &CoreML::Specification::_BorderAmounts_default_instance_;
      if ((*((_DWORD *)v9 + 6) | 2) == 2)
      {
        if (*((_DWORD *)v8 + 9))
        {
          CoreML::Result::Result((CoreML::Result *)this);
          return;
        }
        std::operator+<char>();
        v19 = std::string::append(&v24, " padding type is not set.");
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v26 = v19->__r_.__value_.__r.__words[2];
        v25 = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v24.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
      }
      else
      {
        std::operator+<char>();
        v10 = std::string::append(&v22, " specifies ");
        v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        v12 = (uint64_t *)v8[2];
        if (!v12)
          v12 = &CoreML::Specification::_BorderAmounts_default_instance_;
        std::to_string(&__p, *((_DWORD *)v12 + 6));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v15 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        v17 = std::string::append(&v24, " padding amounts but it must either specify 2 (for x and y axes), or 0 for the default values.");
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v26 = v17->__r_.__value_.__r.__words[2];
        v25 = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v24.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
      }
      if (SHIBYTE(v26) < 0)
        operator delete((void *)v25);
    }
  }
}

void sub_19C9AF8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLRNLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  uint64_t *v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  void *v12[2];
  std::string::size_type v13;
  void *__p[2];
  char v15;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "LRNLayer");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v15 < 0)
          operator delete(__p[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v12, "LRNLayer");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)v12, 3, -1, (uint64_t)v7);
        if (SHIBYTE(v13) < 0)
          operator delete(v12[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 180)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        v8 = &CoreML::Specification::_LRNLayerParams_default_instance_;
      }
      if (*((float *)v8 + 8) >= 0.0)
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v9 = std::string::append(&v11, "' must be positive.");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)v12 = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v11.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0)
          operator delete(v12[0]);
      }
    }
  }
}

void sub_19C9AFB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSplitLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  _QWORD **v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  void *v21;
  char v22;
  std::string v23;
  std::string v24;
  void *v25;
  _BYTE v26[15];
  char v27;
  void *__p[2];
  char v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 2, -1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (!*(_BYTE *)a2)
        goto LABEL_28;
      std::string::basic_string[abi:ne180100]<0>(__p, "Split");
      v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)a2 + 32);
      if (v29 < 0)
        operator delete(__p[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
        return;
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      std::string::basic_string[abi:ne180100]<0>(&v25, "Split");
      CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)&v25, 3, -1, (uint64_t)a2 + 32);
      if (v27 < 0)
        operator delete(v25);
      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
        return;
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      v7 = *(_QWORD **)(*(_QWORD *)(a3 + 56) + 8);
      v8 = (_QWORD *)((char *)a2 + 40);
      if ((_QWORD *)((char *)a2 + 40) == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 32, v7)|| ((v9 = (int *)std::map<std::string,std::string>::at((uint64_t)a2 + 32, v7), (v10 = *(_QWORD *)(a3 + 56)) != 0)? (v11 = (_QWORD **)(v10 + 8)): (v11 = 0), v12 = *(int *)(a3 + 48), !(_DWORD)v12))
      {
LABEL_28:
        CoreML::Result::Result((CoreML::Result *)this);
        return;
      }
      v13 = *v9;
      v14 = 8 * v12;
      while (1)
      {
        v15 = *v11;
        if (v8 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v6, *v11)&& v13 != *(_DWORD *)std::map<std::string,std::string>::at((uint64_t)v6, v15))
        {
          break;
        }
        ++v11;
        v14 -= 8;
        if (!v14)
          goto LABEL_28;
      }
      v16 = *(__int128 **)(a3 + 112);
      if (*((char *)v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
      }
      else
      {
        v17 = *v16;
        v23.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
        *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v17;
      }
      v18 = std::string::insert(&v23, 0, "Layer '");
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v20 = std::string::append(&v24, "' of type 'Split' must have equal ranks for its outputs, but they are not equal.");
      v21 = (void *)v20->__r_.__value_.__r.__words[0];
      v30[0] = v20->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)&v26[7] = *(_QWORD *)((char *)v30 + 7);
      v25 = v21;
      *(_QWORD *)v26 = v30[0];
      v27 = v22;
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      *this = (void *)13;
      std::operator+<char>();
      if (v27 < 0)
        operator delete(v25);
    }
  }
}

void sub_19C9AFEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateAddLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 1, -1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void CoreML::NeuralNetworkSpecValidator::validateUnaryFunctionLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, const CoreML::Specification::NeuralNetworkLayer *a3)
{
  void *__p[2];
  char v7;

  CoreML::validateInputCount((CoreML *)this, a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (!*(_BYTE *)a2)
        goto LABEL_13;
      std::string::basic_string[abi:ne180100]<0>(__p, "Unary");
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, a3, (uint64_t)__p, (uint64_t)a2 + 32);
      if (v7 < 0)
        operator delete(__p[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
LABEL_13:
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19C9B00AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateUpsampleLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  int *v8;
  int v9;
  int v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  __int128 v33;
  std::string::size_type v34;
  void *v35[2];
  char v36;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v35, "Upsample");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)v35, (uint64_t)v7);
        if (v36 < 0)
          operator delete(v35[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(&v33, "Upsample");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)&v33, 3, -1, (uint64_t)v7);
        if (SHIBYTE(v34) < 0)
          operator delete((void *)v33);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 210)
      {
        v8 = *(int **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        v8 = (int *)&CoreML::Specification::_UpsampleLayerParams_default_instance_;
      }
      v9 = v8[4];
      v10 = v8[10];
      if (v9)
      {
        if (v9 != 2 || v10)
        {
LABEL_36:
          std::operator+<char>();
          v13 = std::string::append(&v29, "'. Only one of scalingFactor and fractionalScalingFactor can be set, and if set, must be of size 2. Found scalingFactor of size ");
          v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          v30.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v28, v8[4]);
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v15 = &v28;
          else
            v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
          else
            size = v28.__r_.__value_.__l.__size_;
          v17 = std::string::append(&v30, (const std::string::value_type *)v15, size);
          v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          v31.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          v19 = std::string::append(&v31, " and fractionalScalingFactor of size ");
          v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v32.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v27, v8[10]);
          if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v21 = &v27;
          else
            v21 = (std::string *)v27.__r_.__value_.__r.__words[0];
          if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
          else
            v22 = v27.__r_.__value_.__l.__size_;
          v23 = std::string::append(&v32, (const std::string::value_type *)v21, v22);
          v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          v34 = v23->__r_.__value_.__r.__words[2];
          v33 = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v27.__r_.__value_.__l.__data_);
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v32.__r_.__value_.__l.__data_);
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v31.__r_.__value_.__l.__data_);
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v30.__r_.__value_.__l.__data_);
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
          *this = (void *)13;
          std::operator+<char>();
          goto LABEL_61;
        }
      }
      else if (v10)
      {
        if (v10 != 2)
          goto LABEL_36;
        if (v8[15] && v8[16])
        {
LABEL_35:
          CoreML::Result::Result((CoreML::Result *)this);
          return;
        }
        std::operator+<char>();
        v11 = std::string::append(&v32, "'. Fractional upsample only compatible with align_corners=true or align_corners=false");
        v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v34 = v11->__r_.__value_.__r.__words[2];
        v33 = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
LABEL_32:
        *this = (void *)13;
        std::operator+<char>();
LABEL_61:
        if (SHIBYTE(v34) < 0)
          operator delete((void *)v33);
        return;
      }
      if (!v8[16] || v8[15])
        goto LABEL_35;
      std::operator+<char>();
      v25 = std::string::append(&v32, "' of type Upsample uses Nearest Neighbors but uses linear upsampling mode other than DEFAULT.");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v34 = v25->__r_.__value_.__r.__words[2];
      v33 = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      goto LABEL_32;
    }
  }
}

void sub_19C9B04F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 73) < 0)
    operator delete(*(void **)(v40 - 96));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateBiasLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _BOOL4 v18;
  int v19;
  unsigned int v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  __int128 v33;
  std::string *p_p;
  std::string::size_type size;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string __p;
  std::string v41;
  std::string v42;
  std::string v43;
  __int128 v44;
  std::string::size_type v45;
  void *v46[2];
  char v47;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v46, "Bias");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)v46, (uint64_t)v7);
        if (v47 < 0)
          operator delete(v46[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(&v44, "Bias");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)&v44, 3, -1, (uint64_t)v7);
        if (SHIBYTE(v45) < 0)
          operator delete((void *)v44);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 250)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        v8 = &CoreML::Specification::_BiasLayerParams_default_instance_;
      }
      if (v8[5])
        v9 = (uint64_t *)v8[5];
      else
        v9 = &CoreML::Specification::_WeightParams_default_instance_;
      v10 = v9[5];
      if (*(char *)(v10 + 23) < 0)
        v11 = *(_QWORD *)(v10 + 8);
      else
        v11 = *(unsigned __int8 *)(v10 + 23);
      v12 = v9[6];
      if (*(char *)(v12 + 23) < 0)
        v13 = *(_QWORD *)(v12 + 8);
      else
        v13 = *(unsigned __int8 *)(v12 + 23);
      v14 = *((_DWORD *)v9 + 4);
      v15 = v9[7];
      if (*(char *)(v15 + 23) < 0)
        v16 = *(_QWORD *)(v15 + 8);
      else
        v16 = *(unsigned __int8 *)(v15 + 23);
      v17 = v14 <= 0;
      v18 = v14 > 0;
      if (v17)
        v19 = 1;
      else
        v19 = 2;
      if (v11)
        v20 = v19;
      else
        v20 = v18;
      if (v13)
        ++v20;
      if (v16)
        ++v20;
      if (v20 <= 1)
      {
        v23 = *((unsigned int *)v8 + 4);
        if ((v23 | 2) == 3)
        {
          v24 = v8[3];
          v25 = (uint64_t *)(v24 + 8);
          v26 = 1;
          v27 = v23;
          do
          {
            v28 = *v25++;
            v26 *= v28;
            --v27;
          }
          while (v27);
          if ((_DWORD)v23 == 3 && (v29 = *(_QWORD *)(v24 + 8), v29 >= 2))
          {
            std::string::basic_string[abi:ne180100]<0>(&v44, "Bias");
            v30 = *(_QWORD *)(a3 + 112);
            std::string::basic_string[abi:ne180100]<0>(&v43, "bias");
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v9, v26, v29, (const void **)&v44, v30, (uint64_t)&v43);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v44, "Bias");
            v31 = *(_QWORD *)(a3 + 112);
            std::string::basic_string[abi:ne180100]<0>(&v43, "bias");
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v9, v26, 1, (const void **)&v44, v31, (uint64_t)&v43);
          }
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v43.__r_.__value_.__l.__data_);
          if (SHIBYTE(v45) < 0)
            operator delete((void *)v44);
          if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
          {
            if (*((char *)this + 31) < 0)
              operator delete(this[1]);
            CoreML::Result::Result((CoreML::Result *)this);
          }
          return;
        }
        std::operator+<char>();
        v32 = std::string::append(&v41, "' cannot be ");
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&__p, *((_DWORD *)v8 + 4));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v36 = std::string::append(&v42, (const std::string::value_type *)p_p, size);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        v38 = std::string::append(&v43, " dimensional. Must be 1D or 3D.");
        v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v45 = v38->__r_.__value_.__r.__words[2];
        v44 = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
      }
      else
      {
        std::operator+<char>();
        v21 = std::string::append(&v43, "' has both full precision and half precision weights and/or bias fields populated");
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v45 = v21->__r_.__value_.__r.__words[2];
        v44 = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
      }
      if (SHIBYTE(v45) < 0)
        operator delete((void *)v44);
    }
  }
}

void sub_19C9B0A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a33 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 73) < 0)
    operator delete(*(void **)(v33 - 96));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateL2NormLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, const CoreML::Specification::NeuralNetworkLayer *a3)
{
  char *v6;
  void *v7[2];
  char v8;
  void *__p[2];
  char v10;

  CoreML::validateInputCount((CoreML *)this, a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (!*(_BYTE *)a2)
        goto LABEL_18;
      std::string::basic_string[abi:ne180100]<0>(__p, "L2Normalize");
      v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, a3, (uint64_t)__p, (uint64_t)v6);
      if (v10 < 0)
        operator delete(__p[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v7, "L2Normalize");
        CoreML::validateRankCount((uint64_t)this, a3, (uint64_t)v7, 3, -1, (uint64_t)v6);
        if (v8 < 0)
          operator delete(v7[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
LABEL_18:
          CoreML::Result::Result((CoreML::Result *)this);
        }
      }
    }
  }
}

void sub_19C9B0C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReshapeLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  uint64_t *v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  void *v12[2];
  std::string::size_type v13;
  void *__p[2];
  char v15;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Reshape");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v15 < 0)
          operator delete(__p[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v12, "Reshape");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)v12, 5, 5, (uint64_t)v7);
        if (SHIBYTE(v13) < 0)
          operator delete(v12[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 300)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        v8 = &CoreML::Specification::_ReshapeLayerParams_default_instance_;
      }
      if ((*((_DWORD *)v8 + 4) - 3) >= 2)
      {
        std::operator+<char>();
        v9 = std::string::append(&v11, "' target shape must be 3D or 4D.");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)v12 = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v11.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0)
          operator delete(v12[0]);
      }
      else
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19C9B0EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateFlattenLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, const CoreML::Specification::NeuralNetworkLayer *a3)
{
  char *v6;
  void *v7[2];
  char v8;
  void *__p[2];
  char v10;

  CoreML::validateInputCount((CoreML *)this, a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (!*(_BYTE *)a2)
        goto LABEL_18;
      std::string::basic_string[abi:ne180100]<0>(__p, "Flatten");
      v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, a3, (uint64_t)__p, (uint64_t)v6);
      if (v10 < 0)
        operator delete(__p[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v7, "Flatten");
        CoreML::validateRankCount((uint64_t)this, a3, (uint64_t)v7, 3, -1, (uint64_t)v6);
        if (v8 < 0)
          operator delete(v7[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
LABEL_18:
          CoreML::Result::Result((CoreML::Result *)this);
        }
      }
    }
  }
}

void sub_19C9B1054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validatePermuteLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  uint64_t *v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  void *v12[2];
  std::string::size_type v13;
  void *__p[2];
  char v15;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Permute");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v15 < 0)
          operator delete(__p[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v12, "Permute");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)v12, 5, 5, (uint64_t)v7);
        if (SHIBYTE(v13) < 0)
          operator delete(v12[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 310)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        v8 = &CoreML::Specification::_PermuteLayerParams_default_instance_;
      }
      if (*((_DWORD *)v8 + 4) == 4)
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v9 = std::string::append(&v11, "' must have 4D axis parameters.");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)v12 = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v11.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0)
          operator delete(v12[0]);
      }
    }
  }
}

void sub_19C9B1280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReduceLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  int v7;
  uint64_t *v8;
  int v9;
  __int128 *v10;
  __int128 v11;
  __int128 *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string *v17;
  __int128 v18;
  void *v19;
  char v20;
  std::string v21;
  std::string v22;
  void *v23;
  __int128 v24;
  void *__p[2];
  char v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2 && *(int *)(a3 + 72) >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Reduce");
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)a2 + 32);
        if (v26 < 0)
          operator delete(__p[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 80) + 8) + 36);
          v23 = 0;
          v24 = 0uLL;
          if (*(_DWORD *)(a3 + 140) == 280)
          {
            v8 = *(uint64_t **)(a3 + 128);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
            v8 = &CoreML::Specification::_ReduceLayerParams_default_instance_;
          }
          v9 = *((_DWORD *)v8 + 6);
          switch(v9)
          {
            case 0:
              if (v7 > 2)
                goto LABEL_28;
              goto LABEL_25;
            case 1:
              if (v7 > 1)
                goto LABEL_28;
              goto LABEL_25;
            case 2:
            case 3:
            case 4:
              if (v7 > 0)
                goto LABEL_28;
LABEL_25:
              v12 = *(__int128 **)(a3 + 112);
              if (*((char *)v12 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
              }
              else
              {
                v13 = *v12;
                v21.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
                *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v13;
              }
              v14 = std::string::insert(&v21, 0, "Reduce layer '");
              v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
              v22.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v15;
              v14->__r_.__value_.__l.__size_ = 0;
              v14->__r_.__value_.__r.__words[2] = 0;
              v14->__r_.__value_.__r.__words[0] = 0;
              v16 = std::string::append(&v22, "': input's rank is smaller than the dimensions provided in the axis parameter");
              break;
            default:
              if (v9 != 0x80000000 && v9 != 0x7FFFFFFF)
                goto LABEL_28;
              v10 = *(__int128 **)(a3 + 112);
              if (*((char *)v10 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
              }
              else
              {
                v11 = *v10;
                v21.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
                *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
              }
              v17 = std::string::insert(&v21, 0, "Reduce layer: '");
              v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
              v22.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v18;
              v17->__r_.__value_.__l.__size_ = 0;
              v17->__r_.__value_.__r.__words[2] = 0;
              v17->__r_.__value_.__r.__words[0] = 0;
              v16 = std::string::append(&v22, "': unknown value for parameter 'axis'.");
              break;
          }
          v19 = (void *)v16->__r_.__value_.__r.__words[0];
          v27[0] = v16->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
          v20 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)((char *)&v24 + 7) = *(_QWORD *)((char *)v27 + 7);
          v23 = v19;
          *(_QWORD *)&v24 = v27[0];
          HIBYTE(v24) = v20;
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v22.__r_.__value_.__l.__data_);
          if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v21.__r_.__value_.__l.__data_);
          *this = (void *)13;
          std::operator+<char>();
          if (SHIBYTE(v24) < 0)
            operator delete(v23);
        }
      }
      else
      {
LABEL_28:
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19C9B15D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReorganizeDataLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  uint64_t *v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  void *v12[2];
  std::string::size_type v13;
  void *__p[2];
  char v15;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ReorganizeData");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v15 < 0)
          operator delete(__p[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v12, "ReorganizeData");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)v12, 3, -1, (uint64_t)v7);
        if (SHIBYTE(v13) < 0)
          operator delete(v12[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 345)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        v8 = &CoreML::Specification::_ReorganizeDataLayerParams_default_instance_;
      }
      if (*((int *)v8 + 4) > 1)
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v9 = std::string::append(&v11, "' must be > 1.");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)v12 = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v11.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0)
          operator delete(v12[0]);
      }
    }
  }
}

void sub_19C9B1844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSliceLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *inited;
  int v7;
  uint64_t *v8;
  int v9;
  char v10;
  __int128 *v11;
  __int128 v12;
  __int128 *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string *v18;
  __int128 v19;
  void *v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string v29;
  std::string v30;
  void *__p[3];
  void *v32[2];
  char v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
    return;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
    return;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  if (*(_BYTE *)a2 && *(int *)(a3 + 72) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "Slice");
    CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)v32, (uint64_t)a2 + 32);
    if (v33 < 0)
      operator delete(v32[0]);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
      return;
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 80) + 8) + 36);
    memset(__p, 0, sizeof(__p));
    if (*(_DWORD *)(a3 + 140) == 350)
    {
      v8 = *(uint64_t **)(a3 + 128);
    }
    else
    {
      inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
      v8 = &CoreML::Specification::_SliceLayerParams_default_instance_;
    }
    v9 = *((_DWORD *)v8 + 10);
    if (v9)
    {
      if (v9 == 1)
      {
        if (v7 > 1)
          goto LABEL_22;
      }
      else
      {
        if (v9 != 2)
        {
          v13 = *(__int128 **)(a3 + 112);
          if (*((char *)v13 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
          }
          else
          {
            v14 = *v13;
            v29.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
            *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v14;
          }
          v18 = std::string::insert(&v29, 0, "Slice layer: '");
          v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v30.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          v17 = std::string::append(&v30, "': unknown value for parameter 'axis'.");
          goto LABEL_34;
        }
        if (v7 > 0)
        {
LABEL_22:
          v10 = 1;
          goto LABEL_41;
        }
      }
    }
    else if (v7 > 2)
    {
      goto LABEL_22;
    }
    v11 = *(__int128 **)(a3 + 112);
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v12 = *v11;
      v29.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v12;
    }
    v15 = std::string::insert(&v29, 0, "Slice layer '");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v30, "': input's rank is smaller than the dimension provided in the axis parameter");
LABEL_34:
    v20 = (void *)v17->__r_.__value_.__r.__words[0];
    v34[0] = v17->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
    v21 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v20;
    __p[1] = (void *)v34[0];
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v34 + 7);
    HIBYTE(__p[2]) = v21;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    *this = (void *)13;
    inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
    v10 = 0;
LABEL_41:
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    if ((v10 & 1) == 0)
      return;
  }
  if (*(_DWORD *)(a3 + 140) == 350)
  {
    v22 = *(uint64_t **)(a3 + 128);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
    v22 = &CoreML::Specification::_SliceLayerParams_default_instance_;
  }
  if (*((int *)v22 + 8) <= 0)
  {
    std::operator+<char>();
    v27 = std::string::append(&v30, "' must be > 1.");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    __p[2] = (void *)v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
  else
  {
    v23 = v22[2];
    v24 = v22[3];
    if ((v24 < 1 || v24 >= v23)
      && ((v24 & 0x8000000000000000) == 0 || (v23 & 0x8000000000000000) == 0 || v24 >= v23))
    {
      CoreML::Result::Result((CoreML::Result *)this);
      return;
    }
    std::operator+<char>();
    v25 = std::string::append(&v30, " has an end index before the start index.");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __p[2] = (void *)v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
  *this = (void *)13;
  std::operator+<char>();
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_19C9B1CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLoadConstantLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  const CoreML::Specification::NeuralNetworkLayer *v6;
  _QWORD *v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _BOOL4 v19;
  int v20;
  unsigned int v21;
  std::string *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t i;
  unint64_t v27;
  uint64_t v28;
  std::string *v29;
  __int128 v30;
  std::string __p;
  void *v32[2];
  std::string::size_type v33;

  if ((*(_DWORD *)CoreML::Result::Result((CoreML::Result *)this) & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        v7 = *(_QWORD **)(*(_QWORD *)(a3 + 56) + 8);
        v6 = (const CoreML::Specification::NeuralNetworkLayer *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 32, v7);
        if ((const CoreML::Specification::NeuralNetworkLayer *)((char *)a2 + 40) != v6)
        {
          v8 = *(_DWORD *)std::map<std::string,std::string>::at((uint64_t)a2 + 32, v7);
          std::string::basic_string[abi:ne180100]<0>(v32, "LoadConstant");
          std::string::basic_string[abi:ne180100]<0>(&__p, "output");
          CoreML::checkRank((CoreML::Result *)this, *(_QWORD *)(a3 + 112), (uint64_t)v32, 5, 5, (uint64_t)&__p, v8);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v33) < 0)
            operator delete(v32[0]);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            return;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 290)
      {
        v9 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        v9 = &CoreML::Specification::_LoadConstantLayerParams_default_instance_;
      }
      if (v9[5])
        v10 = (uint64_t *)v9[5];
      else
        v10 = &CoreML::Specification::_WeightParams_default_instance_;
      v11 = v10[5];
      if (*(char *)(v11 + 23) < 0)
        v12 = *(_QWORD *)(v11 + 8);
      else
        v12 = *(unsigned __int8 *)(v11 + 23);
      v13 = v10[6];
      if (*(char *)(v13 + 23) < 0)
        v14 = *(_QWORD *)(v13 + 8);
      else
        v14 = *(unsigned __int8 *)(v13 + 23);
      v15 = *((_DWORD *)v10 + 4);
      v16 = v10[7];
      if (*(char *)(v16 + 23) < 0)
        v17 = *(_QWORD *)(v16 + 8);
      else
        v17 = *(unsigned __int8 *)(v16 + 23);
      v18 = v15 <= 0;
      v19 = v15 > 0;
      if (v18)
        v20 = 1;
      else
        v20 = 2;
      if (v12)
        v21 = v20;
      else
        v21 = v19;
      if (v14)
        ++v21;
      if (v17)
        ++v21;
      if (v21 <= 1)
      {
        if (*((_DWORD *)v9 + 4) == 3)
        {
          v24 = v9[3];
          v25 = 1;
          for (i = 8; i != 32; i += 8)
            v25 *= *(_QWORD *)(v24 + i);
          v27 = *(_QWORD *)(v24 + 8);
          std::string::basic_string[abi:ne180100]<0>(v32, "LoadConstant");
          v28 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(&__p, "constants");
          if (v27 < 2)
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v10, v25, 1, (const void **)v32, v28, (uint64_t)&__p);
          else
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v10, v25, v27, (const void **)v32, v28, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v33) < 0)
            operator delete(v32[0]);
          if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
          {
            if (*((char *)this + 31) < 0)
              operator delete(this[1]);
            CoreML::Result::Result((CoreML::Result *)this);
          }
          return;
        }
        std::operator+<char>();
        v29 = std::string::append(&__p, "' must be a 3D constant.");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v33 = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)v32 = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        std::operator+<char>();
        v22 = std::string::append(&__p, "' has both full precision and half precision weight fields populated");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v33 = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)v32 = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v33) < 0)
        operator delete(v32[0]);
    }
  }
}

void sub_19C9B2150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateScaleLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  BOOL v46;
  int v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  std::string::size_type v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  std::string::size_type size;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  __int128 v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  void *__p[2];
  std::string::size_type v95;
  void *v96[2];
  char v97;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v96, "Scale");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)v96, (uint64_t)v7);
        if (v97 < 0)
          operator delete(v96[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(__p, "Scale");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)__p, 3, -1, (uint64_t)v7);
        if (SHIBYTE(v95) < 0)
          operator delete(__p[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 245)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        v8 = &CoreML::Specification::_ScaleLayerParams_default_instance_;
      }
      if (v8[8])
        v9 = (uint64_t *)v8[8];
      else
        v9 = &CoreML::Specification::_WeightParams_default_instance_;
      v10 = v9[5];
      v11 = *(unsigned __int8 *)(v10 + 23);
      if (*(char *)(v10 + 23) < 0)
        v12 = *(_QWORD *)(v10 + 8);
      else
        v12 = *(unsigned __int8 *)(v10 + 23);
      v13 = v9[6];
      v14 = *(unsigned __int8 *)(v13 + 23);
      if (*(char *)(v13 + 23) < 0)
        v15 = *(_QWORD *)(v13 + 8);
      else
        v15 = *(unsigned __int8 *)(v13 + 23);
      v16 = *((_DWORD *)v9 + 4);
      v17 = v9[7];
      v18 = *(unsigned __int8 *)(v17 + 23);
      if (*(char *)(v17 + 23) < 0)
        v19 = *(_QWORD *)(v17 + 8);
      else
        v19 = *(unsigned __int8 *)(v17 + 23);
      v20 = *((unsigned __int8 *)v8 + 80);
      if (v16 <= 0)
        v21 = 1;
      else
        v21 = 2;
      if (v12)
        v22 = v21;
      else
        v22 = v16 > 0;
      if (v15)
        ++v22;
      if (v19)
        v23 = v22 + 1;
      else
        v23 = v22;
      if (v23 <= 1)
      {
        if (v23)
          v24 = 0;
        else
          v24 = 5;
        if (v16 <= 0 && v23)
        {
          if ((v11 & 0x80) != 0)
            v11 = *(_QWORD *)(v10 + 8);
          if (v11)
          {
            v24 = 1;
          }
          else
          {
            if ((v14 & 0x80) != 0)
              v14 = *(_QWORD *)(v13 + 8);
            v25 = v9[8];
            if (v9 != &CoreML::Specification::_WeightParams_default_instance_ && v14 && v25)
            {
              v24 = 2;
            }
            else
            {
              if ((v18 & 0x80) != 0)
                v18 = *(_QWORD *)(v17 + 8);
              if (v25)
                v26 = v18 == 0;
              else
                v26 = 1;
              if (v26 || v9 == &CoreML::Specification::_WeightParams_default_instance_)
                v24 = 5;
              else
                v24 = 3;
            }
          }
        }
      }
      else
      {
        v24 = 4;
      }
      v28 = (uint64_t *)v8[9];
      if (!v28)
        v28 = &CoreML::Specification::_WeightParams_default_instance_;
      v29 = v28[5];
      v30 = *(unsigned __int8 *)(v29 + 23);
      if (*(char *)(v29 + 23) < 0)
        v31 = *(_QWORD *)(v29 + 8);
      else
        v31 = *(unsigned __int8 *)(v29 + 23);
      v32 = v28[6];
      v33 = *(unsigned __int8 *)(v32 + 23);
      if (*(char *)(v32 + 23) < 0)
        v34 = *(_QWORD *)(v32 + 8);
      else
        v34 = *(unsigned __int8 *)(v32 + 23);
      v35 = *((_DWORD *)v28 + 4);
      v36 = v28[7];
      v37 = *(unsigned __int8 *)(v36 + 23);
      if (*(char *)(v36 + 23) < 0)
        v38 = *(_QWORD *)(v36 + 8);
      else
        v38 = *(unsigned __int8 *)(v36 + 23);
      if (v35 <= 0)
        v39 = 1;
      else
        v39 = 2;
      if (v31)
        v40 = v39;
      else
        v40 = v35 > 0;
      if (v34)
        ++v40;
      if (v38)
        v41 = v40 + 1;
      else
        v41 = v40;
      if (v41 <= 1)
      {
        if (v41)
          v42 = 0;
        else
          v42 = 5;
        if (v35 <= 0 && v41)
        {
          if ((v30 & 0x80) != 0)
            v30 = *(_QWORD *)(v29 + 8);
          if (v30)
          {
            v42 = 1;
          }
          else
          {
            if ((v33 & 0x80) != 0)
              v33 = *(_QWORD *)(v32 + 8);
            v43 = v28[8];
            if (v28 != &CoreML::Specification::_WeightParams_default_instance_ && v33 && v43)
            {
              v42 = 2;
            }
            else
            {
              if ((v37 & 0x80) != 0)
                v37 = *(_QWORD *)(v36 + 8);
              if (v43)
                v44 = v37 == 0;
              else
                v44 = 1;
              if (v44 || v28 == &CoreML::Specification::_WeightParams_default_instance_)
                v42 = 5;
              else
                v42 = 3;
            }
          }
        }
      }
      else
      {
        v42 = 4;
      }
      if (*((_BYTE *)v8 + 80))
        v46 = v42 == 4;
      else
        v46 = 0;
      v47 = v46;
      if (v24 == 4 || v47)
      {
        std::operator+<char>();
        v50 = std::string::append(&v93, "' has invalid scale/bias fields.");
        v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v95 = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
        goto LABEL_141;
      }
      if (*((_BYTE *)v8 + 80) && (v24 == 1 && !v42 || !v24 && v42 == 1))
      {
        std::operator+<char>();
        v48 = std::string::append(&v93, "' has invalid scale/bias fields. Field value types should match and should either be half or full precision.");
        v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v95 = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
LABEL_141:
        *this = (void *)13;
        std::operator+<char>();
        goto LABEL_142;
      }
      v52 = *((_DWORD *)v8 + 4);
      if ((v52 | 2) == 3)
      {
        v53 = v8[3];
        v54 = (uint64_t *)(v53 + 8);
        v55 = 1;
        v56 = *((unsigned int *)v8 + 4);
        do
        {
          v57 = *v54++;
          v55 *= v57;
          --v56;
        }
        while (v56);
        if (v52 == 3 && (v58 = *(_QWORD *)(v53 + 8), v58 >= 2))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "Scale");
          v59 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(&v93, "scale");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v9, v55, v58, (const void **)__p, v59, (uint64_t)&v93);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "Scale");
          v60 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(&v93, "scale");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v9, v55, 1, (const void **)__p, v60, (uint64_t)&v93);
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
        if (SHIBYTE(v95) < 0)
          operator delete(__p[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (!v20)
        {
LABEL_194:
          CoreML::Result::Result((CoreML::Result *)this);
          return;
        }
        v61 = *((_DWORD *)v8 + 10);
        if ((v61 | 2) == 3)
        {
          v62 = v8[6];
          v63 = (uint64_t *)(v62 + 8);
          v64 = 1;
          v65 = *((unsigned int *)v8 + 10);
          do
          {
            v66 = *v63++;
            v64 *= v66;
            --v65;
          }
          while (v65);
          if (v61 == 3 && (v67 = *(_QWORD *)(v62 + 8), v67 >= 2))
          {
            v68 = (uint64_t *)v8[9];
            std::string::basic_string[abi:ne180100]<0>(__p, "Scale");
            v69 = *(_QWORD *)(a3 + 112);
            std::string::basic_string[abi:ne180100]<0>(&v93, "bias");
            if (v68)
              v70 = v68;
            else
              v70 = &CoreML::Specification::_WeightParams_default_instance_;
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v70, v64, v67, (const void **)__p, v69, (uint64_t)&v93);
          }
          else
          {
            v79 = (uint64_t *)v8[9];
            std::string::basic_string[abi:ne180100]<0>(__p, "Scale");
            v80 = *(_QWORD *)(a3 + 112);
            std::string::basic_string[abi:ne180100]<0>(&v93, "bias");
            if (v79)
              v81 = v79;
            else
              v81 = &CoreML::Specification::_WeightParams_default_instance_;
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v81, v64, 1, (const void **)__p, v80, (uint64_t)&v93);
          }
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v93.__r_.__value_.__l.__data_);
          if (SHIBYTE(v95) < 0)
            operator delete(__p[0]);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            return;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          goto LABEL_194;
        }
        std::operator+<char>();
        v82 = std::string::append(&v91, "' is ");
        v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v83;
        v82->__r_.__value_.__l.__size_ = 0;
        v82->__r_.__value_.__r.__words[2] = 0;
        v82->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v90, *((_DWORD *)v8 + 10));
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v84 = &v90;
        else
          v84 = (std::string *)v90.__r_.__value_.__r.__words[0];
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v90.__r_.__value_.__r.__words[2]);
        else
          size = v90.__r_.__value_.__l.__size_;
        v86 = std::string::append(&v92, (const std::string::value_type *)v84, size);
        v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        v88 = std::string::append(&v93, " dimensional but should be either 1D or 3D.");
        v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
        v95 = v88->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v89;
        v88->__r_.__value_.__l.__size_ = 0;
        v88->__r_.__value_.__r.__words[2] = 0;
        v88->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v90.__r_.__value_.__l.__data_);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
      }
      else
      {
        std::operator+<char>();
        v71 = std::string::append(&v91, "' is ");
        v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v90, *((_DWORD *)v8 + 4));
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v73 = &v90;
        else
          v73 = (std::string *)v90.__r_.__value_.__r.__words[0];
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v74 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
        else
          v74 = v90.__r_.__value_.__l.__size_;
        v75 = std::string::append(&v92, (const std::string::value_type *)v73, v74);
        v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        v77 = std::string::append(&v93, " dimensional but should be 1D or 3D.");
        v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        v95 = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v90.__r_.__value_.__l.__data_);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
      }
      *this = (void *)13;
      std::operator+<char>();
LABEL_142:
      if (SHIBYTE(v95) < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_19C9B2AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a33 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSimpleRecurrentLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  BOOL v62;
  BOOL v64;
  int v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  const CoreML::Specification::ActivationParams *v83;
  const CoreML::Specification::ActivationParams *v84;
  std::string v85;
  void *v86[2];
  std::string::size_type v87;
  void *__p[2];
  char v89;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 2, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
    return;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 2, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
    return;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  if (*(_BYTE *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "SimpleRecurrent");
    v7 = (char *)a2 + 32;
    CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)v7);
    if (v89 < 0)
      operator delete(__p[0]);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
      return;
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    std::string::basic_string[abi:ne180100]<0>(v86, "SimpleRecurrent");
    CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)v86, 5, 5, (uint64_t)v7);
    if (SHIBYTE(v87) < 0)
      operator delete(v86[0]);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
      return;
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
  }
  if (*(_DWORD *)(a3 + 140) == 400)
  {
    v8 = *(uint64_t **)(a3 + 128);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v8 = &CoreML::Specification::_SimpleRecurrentLayerParams_default_instance_;
  }
  if (v8[3])
    v9 = (uint64_t *)v8[3];
  else
    v9 = &CoreML::Specification::_WeightParams_default_instance_;
  v10 = v9[5];
  v11 = *(unsigned __int8 *)(v10 + 23);
  if (*(char *)(v10 + 23) < 0)
    v12 = *(_QWORD *)(v10 + 8);
  else
    v12 = *(unsigned __int8 *)(v10 + 23);
  v13 = v9[6];
  v14 = *(unsigned __int8 *)(v13 + 23);
  if (*(char *)(v13 + 23) < 0)
    v15 = *(_QWORD *)(v13 + 8);
  else
    v15 = *(unsigned __int8 *)(v13 + 23);
  v16 = *((_DWORD *)v9 + 4);
  v17 = v9[7];
  v18 = *(unsigned __int8 *)(v17 + 23);
  if (*(char *)(v17 + 23) < 0)
    v19 = *(_QWORD *)(v17 + 8);
  else
    v19 = *(unsigned __int8 *)(v17 + 23);
  v20 = *((unsigned __int8 *)v8 + 65);
  if (v16 <= 0)
    v21 = 1;
  else
    v21 = 2;
  if (v12)
    v22 = v21;
  else
    v22 = v16 > 0;
  if (v15)
    ++v22;
  if (v19)
    v23 = v22 + 1;
  else
    v23 = v22;
  if (v23 <= 1)
  {
    if (v23)
      v24 = 0;
    else
      v24 = 5;
    if (v16 <= 0 && v23)
    {
      if ((v11 & 0x80) != 0)
        v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v24 = 1;
      }
      else
      {
        if ((v14 & 0x80) != 0)
          v14 = *(_QWORD *)(v13 + 8);
        v25 = v9[8];
        if (v9 != &CoreML::Specification::_WeightParams_default_instance_ && v14 && v25)
        {
          v24 = 2;
        }
        else
        {
          if ((v18 & 0x80) != 0)
            v18 = *(_QWORD *)(v17 + 8);
          if (v25)
            v26 = v18 == 0;
          else
            v26 = 1;
          if (v26 || v9 == &CoreML::Specification::_WeightParams_default_instance_)
            v24 = 5;
          else
            v24 = 3;
        }
      }
    }
  }
  else
  {
    v24 = 4;
  }
  if (v8[4])
    v28 = (uint64_t *)v8[4];
  else
    v28 = &CoreML::Specification::_WeightParams_default_instance_;
  v29 = v28[5];
  v30 = *(unsigned __int8 *)(v29 + 23);
  if (*(char *)(v29 + 23) < 0)
    v31 = *(_QWORD *)(v29 + 8);
  else
    v31 = *(unsigned __int8 *)(v29 + 23);
  v32 = v28[6];
  v33 = *(unsigned __int8 *)(v32 + 23);
  if (*(char *)(v32 + 23) < 0)
    v34 = *(_QWORD *)(v32 + 8);
  else
    v34 = *(unsigned __int8 *)(v32 + 23);
  v35 = *((_DWORD *)v28 + 4);
  v36 = v28[7];
  v37 = *(unsigned __int8 *)(v36 + 23);
  if (*(char *)(v36 + 23) < 0)
    v38 = *(_QWORD *)(v36 + 8);
  else
    v38 = *(unsigned __int8 *)(v36 + 23);
  if (v35 <= 0)
    v39 = 1;
  else
    v39 = 2;
  if (v31)
    v40 = v39;
  else
    v40 = v35 > 0;
  if (v34)
    ++v40;
  if (v38)
    v41 = v40 + 1;
  else
    v41 = v40;
  if (v41 <= 1)
  {
    if (v41)
      v42 = 0;
    else
      v42 = 5;
    if (v35 <= 0 && v41)
    {
      if ((v30 & 0x80) != 0)
        v30 = *(_QWORD *)(v29 + 8);
      if (v30)
      {
        v42 = 1;
      }
      else
      {
        if ((v33 & 0x80) != 0)
          v33 = *(_QWORD *)(v32 + 8);
        v43 = v28[8];
        if (v28 != &CoreML::Specification::_WeightParams_default_instance_ && v33 && v43)
        {
          v42 = 2;
        }
        else
        {
          if ((v37 & 0x80) != 0)
            v37 = *(_QWORD *)(v36 + 8);
          if (v43)
            v44 = v37 == 0;
          else
            v44 = 1;
          if (v44 || v28 == &CoreML::Specification::_WeightParams_default_instance_)
            v42 = 5;
          else
            v42 = 3;
        }
      }
    }
  }
  else
  {
    v42 = 4;
  }
  v46 = (uint64_t *)v8[5];
  if (!v46)
    v46 = &CoreML::Specification::_WeightParams_default_instance_;
  v47 = v46[5];
  v48 = *(unsigned __int8 *)(v47 + 23);
  if (*(char *)(v47 + 23) < 0)
    v49 = *(_QWORD *)(v47 + 8);
  else
    v49 = *(unsigned __int8 *)(v47 + 23);
  v50 = v46[6];
  v51 = *(unsigned __int8 *)(v50 + 23);
  if (*(char *)(v50 + 23) < 0)
    v52 = *(_QWORD *)(v50 + 8);
  else
    v52 = *(unsigned __int8 *)(v50 + 23);
  v53 = *((_DWORD *)v46 + 4);
  v54 = v46[7];
  v55 = *(unsigned __int8 *)(v54 + 23);
  if (*(char *)(v54 + 23) < 0)
    v56 = *(_QWORD *)(v54 + 8);
  else
    v56 = *(unsigned __int8 *)(v54 + 23);
  if (v53 <= 0)
    v57 = 1;
  else
    v57 = 2;
  if (v49)
    v58 = v57;
  else
    v58 = v53 > 0;
  if (v52)
    ++v58;
  if (v56)
    v59 = v58 + 1;
  else
    v59 = v58;
  if (v59 <= 1)
  {
    if (v59)
      v60 = 0;
    else
      v60 = 5;
    if (v53 <= 0 && v59)
    {
      if ((v48 & 0x80) != 0)
        v48 = *(_QWORD *)(v47 + 8);
      if (v48)
      {
        v60 = 1;
      }
      else
      {
        if ((v51 & 0x80) != 0)
          v51 = *(_QWORD *)(v50 + 8);
        v61 = v46[8];
        if (v46 != &CoreML::Specification::_WeightParams_default_instance_ && v51 && v61)
        {
          v60 = 2;
        }
        else
        {
          if ((v55 & 0x80) != 0)
            v55 = *(_QWORD *)(v54 + 8);
          if (v61)
            v62 = v55 == 0;
          else
            v62 = 1;
          if (v62 || v46 == &CoreML::Specification::_WeightParams_default_instance_)
            v60 = 5;
          else
            v60 = 3;
        }
      }
    }
  }
  else
  {
    v60 = 4;
  }
  if (*((_BYTE *)v8 + 65))
    v64 = v60 == 4;
  else
    v64 = 0;
  v65 = v64;
  if (v24 == 4 || v42 == 4 || v65)
  {
    std::operator+<char>();
    v68 = std::string::append(&v85, "' has invalid weightMatrix/recusionMatrix/Bias fields.");
    v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v87 = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)v86 = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    goto LABEL_194;
  }
  if (v24 != 2 && v42 != 2 && (v24 != v42 || *((_BYTE *)v8 + 65) && v60 != 2 && v24 != v60))
  {
    std::operator+<char>();
    v66 = std::string::append(&v85, "' has invalid weightMatrix/recusionMatrix/Bias fields. Field value types should match and should either be half or full precision.");
    v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v87 = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)v86 = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
LABEL_194:
    *this = (void *)13;
    std::operator+<char>();
    if (SHIBYTE(v87) < 0)
      operator delete(v86[0]);
    return;
  }
  v71 = v8[6];
  v70 = v8[7];
  std::string::basic_string[abi:ne180100]<0>(v86, "SimpleRNN");
  v72 = *(_QWORD *)(a3 + 112);
  std::string::basic_string[abi:ne180100]<0>(&v85, "WeightMatrix");
  CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v9, v70 * v71, v70, (const void **)v86, v72, (uint64_t)&v85);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v87) < 0)
    operator delete(v86[0]);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    v73 = v8[7];
    v74 = (uint64_t *)v8[4];
    std::string::basic_string[abi:ne180100]<0>(v86, "SimpleRNN");
    v75 = *(_QWORD *)(a3 + 112);
    std::string::basic_string[abi:ne180100]<0>(&v85, "RecursionMatrix");
    if (v74)
      v76 = v74;
    else
      v76 = &CoreML::Specification::_WeightParams_default_instance_;
    CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v76, v73 * v73, v73, (const void **)v86, v75, (uint64_t)&v85);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    if (SHIBYTE(v87) < 0)
      operator delete(v86[0]);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (v20)
      {
        v78 = (uint64_t *)v8[5];
        v79 = v8[7];
        std::string::basic_string[abi:ne180100]<0>(v86, "SimpleRNN");
        v80 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(&v85, "BiasVector");
        if (v78)
          v81 = v78;
        else
          v81 = &CoreML::Specification::_WeightParams_default_instance_;
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v81, v79, 1, (const void **)v86, v80, (uint64_t)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        if (SHIBYTE(v87) < 0)
          operator delete(v86[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 400)
      {
        v82 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v77);
        v82 = &CoreML::Specification::_SimpleRecurrentLayerParams_default_instance_;
      }
      v83 = (const CoreML::Specification::ActivationParams *)v82[2];
      if (v83)
        v84 = v83;
      else
        v84 = (const CoreML::Specification::ActivationParams *)&CoreML::Specification::_ActivationParams_default_instance_;
      CoreML::validateRecurrentActivationParams((CoreML *)this, v84);
    }
  }
}

void sub_19C9B3390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::validateRecurrentActivationParams(CoreML *this, const CoreML::Specification::ActivationParams *a2)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  const char *v9;
  size_t v10;
  uint64_t v11;
  void *__p;
  char v13;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  v3 = *((_DWORD *)a2 + 7);
  v4 = v3 > 0x29;
  v5 = (1 << v3) & 0x300C0000420;
  if (!v4 && v5 != 0)
    return CoreML::Result::Result(this);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Recurrent non-linearity type ", 29);
  v9 = MLActivationParamsNonlinearityType_Name(*((_DWORD *)a2 + 7));
  v10 = strlen(v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is not supported in this version of CoreML.", 44);
  std::stringbuf::str();
  *(_QWORD *)this = 13;
  std::operator+<char>();
  if (v13 < 0)
    operator delete(__p);
  v14[0] = *MEMORY[0x1E0DE4F50];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v15[0] = v11;
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return (CoreML::Result *)MEMORY[0x1A1AD61C4](&v17);
}

void sub_19C9B3574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateGRULayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  int *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  BOOL v42;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  BOOL v62;
  int *v64;
  int *v65;
  int *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  int v84;
  uint64_t v86;
  BOOL v87;
  BOOL v88;
  int *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int *v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  int v110;
  uint64_t v112;
  BOOL v113;
  BOOL v114;
  int *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int *v121;
  int v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  int v136;
  uint64_t v138;
  BOOL v139;
  BOOL v140;
  int *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int *v147;
  int v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  unsigned int v161;
  int v162;
  uint64_t v164;
  BOOL v165;
  BOOL v166;
  int *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int *v173;
  int v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  unsigned int v187;
  int v188;
  uint64_t v190;
  BOOL v191;
  BOOL v192;
  int *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  int *v199;
  int v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  unsigned int v213;
  int v214;
  uint64_t v216;
  BOOL v217;
  BOOL v218;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  int *v223;
  int v224;
  int v225;
  int v226;
  int *v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  std::string *v253;
  __int128 v254;
  uint64_t v255;
  const CoreML::Specification::ActivationParams **v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  std::string v260;
  void *v261[2];
  std::string::size_type v262;
  void *__p[2];
  char v264;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 2, 2);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "GRU");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v264 < 0)
          operator delete(__p[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)v261, 5, 5, (uint64_t)v7);
        if (SHIBYTE(v262) < 0)
          operator delete(v261[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 410)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        v8 = &CoreML::Specification::_GRULayerParams_default_instance_;
      }
      v9 = (uint64_t *)v8[5];
      if (!v9)
        v9 = &CoreML::Specification::_WeightParams_default_instance_;
      v10 = v9[5];
      v11 = *(unsigned __int8 *)(v10 + 23);
      if (*(char *)(v10 + 23) < 0)
        v12 = *(_QWORD *)(v10 + 8);
      else
        v12 = *(unsigned __int8 *)(v10 + 23);
      v13 = v9[6];
      v14 = *(unsigned __int8 *)(v13 + 23);
      if (*(char *)(v13 + 23) < 0)
        v15 = *(_QWORD *)(v13 + 8);
      else
        v15 = *(unsigned __int8 *)(v13 + 23);
      v16 = *((_DWORD *)v9 + 4);
      v17 = v9[7];
      v18 = *(unsigned __int8 *)(v17 + 23);
      if (*(char *)(v17 + 23) < 0)
        v19 = *(_QWORD *)(v17 + 8);
      else
        v19 = *(unsigned __int8 *)(v17 + 23);
      if (v16 <= 0)
        v20 = 1;
      else
        v20 = 2;
      if (v12)
        v21 = v20;
      else
        v21 = v16 > 0;
      if (v15)
        ++v21;
      if (v19)
        ++v21;
      if (v21 <= 1)
      {
        if (v21)
          v22 = 0;
        else
          v22 = 5;
        if (v16 <= 0 && v21)
        {
          if ((v11 & 0x80) != 0)
            v11 = *(_QWORD *)(v10 + 8);
          if (v11)
          {
            v22 = 1;
          }
          else
          {
            if ((v14 & 0x80) != 0)
              v14 = *(_QWORD *)(v13 + 8);
            v23 = v9[8];
            if (v9 != &CoreML::Specification::_WeightParams_default_instance_ && v14 && v23)
            {
              v22 = 2;
            }
            else
            {
              if ((v18 & 0x80) != 0)
                v18 = *(_QWORD *)(v17 + 8);
              if (v23)
                v24 = v18 == 0;
              else
                v24 = 1;
              if (v24 || v9 == &CoreML::Specification::_WeightParams_default_instance_)
                v22 = 5;
              else
                v22 = 3;
            }
          }
        }
      }
      else
      {
        v22 = 4;
      }
      v259 = *((unsigned __int8 *)v8 + 129);
      v26 = (int *)operator new(4uLL);
      *v26 = v22;
      v27 = (uint64_t *)v8[8];
      if (!v27)
        v27 = &CoreML::Specification::_WeightParams_default_instance_;
      v28 = v27[5];
      v29 = *(unsigned __int8 *)(v28 + 23);
      if (*(char *)(v28 + 23) < 0)
        v30 = *(_QWORD *)(v28 + 8);
      else
        v30 = *(unsigned __int8 *)(v28 + 23);
      v31 = v27[6];
      v32 = *(unsigned __int8 *)(v31 + 23);
      if (*(char *)(v31 + 23) < 0)
        v33 = *(_QWORD *)(v31 + 8);
      else
        v33 = *(unsigned __int8 *)(v31 + 23);
      v34 = *((_DWORD *)v27 + 4);
      v35 = v27[7];
      v36 = *(unsigned __int8 *)(v35 + 23);
      if (*(char *)(v35 + 23) < 0)
        v37 = *(_QWORD *)(v35 + 8);
      else
        v37 = *(unsigned __int8 *)(v35 + 23);
      if (v34 <= 0)
        v38 = 1;
      else
        v38 = 2;
      if (v30)
        v39 = v38;
      else
        v39 = v34 > 0;
      if (v33)
        ++v39;
      if (v37)
        ++v39;
      if (v39 <= 1)
      {
        if (v39)
          v40 = 0;
        else
          v40 = 5;
        if (v34 <= 0 && v39)
        {
          if ((v29 & 0x80) != 0)
            v29 = *(_QWORD *)(v28 + 8);
          if (v29)
          {
            v40 = 1;
          }
          else
          {
            if ((v32 & 0x80) != 0)
              v32 = *(_QWORD *)(v31 + 8);
            v41 = v27[8];
            if (v27 != &CoreML::Specification::_WeightParams_default_instance_ && v32 && v41)
            {
              v40 = 2;
            }
            else
            {
              if ((v36 & 0x80) != 0)
                v36 = *(_QWORD *)(v35 + 8);
              if (v41)
                v42 = v36 == 0;
              else
                v42 = 1;
              if (v42 || v27 == &CoreML::Specification::_WeightParams_default_instance_)
                v40 = 5;
              else
                v40 = 3;
            }
          }
        }
      }
      else
      {
        v40 = 4;
      }
      v44 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(2uLL);
      v46 = v45;
      v44[1] = v40;
      *v44 = *v26;
      operator delete(v26);
      v47 = (uint64_t *)v8[6];
      if (!v47)
        v47 = &CoreML::Specification::_WeightParams_default_instance_;
      v48 = v47[5];
      v49 = *(unsigned __int8 *)(v48 + 23);
      if (*(char *)(v48 + 23) < 0)
        v50 = *(_QWORD *)(v48 + 8);
      else
        v50 = *(unsigned __int8 *)(v48 + 23);
      v51 = v47[6];
      v52 = *(unsigned __int8 *)(v51 + 23);
      if (*(char *)(v51 + 23) < 0)
        v53 = *(_QWORD *)(v51 + 8);
      else
        v53 = *(unsigned __int8 *)(v51 + 23);
      v54 = *((_DWORD *)v47 + 4);
      v55 = v47[7];
      v56 = *(unsigned __int8 *)(v55 + 23);
      if (*(char *)(v55 + 23) < 0)
        v57 = *(_QWORD *)(v55 + 8);
      else
        v57 = *(unsigned __int8 *)(v55 + 23);
      if (v54 <= 0)
        v58 = 1;
      else
        v58 = 2;
      if (v50)
        v59 = v58;
      else
        v59 = v54 > 0;
      if (v53)
        ++v59;
      if (v57)
        ++v59;
      if (v59 <= 1)
      {
        if (v59)
          v60 = 0;
        else
          v60 = 5;
        if (v54 <= 0 && v59)
        {
          if ((v49 & 0x80) != 0)
            v49 = *(_QWORD *)(v48 + 8);
          if (v49)
          {
            v60 = 1;
          }
          else
          {
            if ((v52 & 0x80) != 0)
              v52 = *(_QWORD *)(v51 + 8);
            v61 = v47[8];
            if (v47 != &CoreML::Specification::_WeightParams_default_instance_ && v52 && v61)
            {
              v60 = 2;
            }
            else
            {
              if ((v56 & 0x80) != 0)
                v56 = *(_QWORD *)(v55 + 8);
              if (v61)
                v62 = v56 == 0;
              else
                v62 = 1;
              if (v62 || v47 == &CoreML::Specification::_WeightParams_default_instance_)
                v60 = 5;
              else
                v60 = 3;
            }
          }
        }
      }
      else
      {
        v60 = 4;
      }
      v64 = &v44[v46];
      if (v46 < 3)
      {
        v67 = 3;
        if ((unint64_t)((4 * v46) >> 1) > 3)
          v67 = (4 * v46) >> 1;
        if ((unint64_t)(4 * v46) >= 0x7FFFFFFFFFFFFFFCLL)
          v68 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
          v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v68);
        else
          v69 = 0;
        v70 = 0;
        v64 = (int *)(v68 + 4 * v69);
        *(_DWORD *)(v68 + 8) = v60;
        v65 = (int *)(v68 + 12);
        do
        {
          *(_DWORD *)(v68 + 8 + v70 * 4 - 4) = v44[v70 + 1];
          --v70;
        }
        while (v70 != -2);
        v66 = (int *)v68;
        operator delete(v44);
      }
      else
      {
        v44[2] = v60;
        v65 = v44 + 3;
        v66 = v44;
      }
      v71 = (uint64_t *)v8[9];
      if (!v71)
        v71 = &CoreML::Specification::_WeightParams_default_instance_;
      v72 = v71[5];
      v73 = *(unsigned __int8 *)(v72 + 23);
      if (*(char *)(v72 + 23) < 0)
        v74 = *(_QWORD *)(v72 + 8);
      else
        v74 = *(unsigned __int8 *)(v72 + 23);
      v75 = v71[6];
      v76 = *(unsigned __int8 *)(v75 + 23);
      if (*(char *)(v75 + 23) < 0)
        v77 = *(_QWORD *)(v75 + 8);
      else
        v77 = *(unsigned __int8 *)(v75 + 23);
      v78 = *((_DWORD *)v71 + 4);
      v79 = v71[7];
      v80 = *(unsigned __int8 *)(v79 + 23);
      if (*(char *)(v79 + 23) < 0)
        v81 = *(_QWORD *)(v79 + 8);
      else
        v81 = *(unsigned __int8 *)(v79 + 23);
      if (v78 <= 0)
        v82 = 1;
      else
        v82 = 2;
      if (v74)
        v83 = v82;
      else
        v83 = v78 > 0;
      if (v77)
        ++v83;
      if (v81)
        ++v83;
      if (v83 <= 1)
      {
        if (v83)
          v84 = 0;
        else
          v84 = 5;
        if (v78 <= 0 && v83 != 0)
        {
          if ((v73 & 0x80) != 0)
            v73 = *(_QWORD *)(v72 + 8);
          if (v73)
          {
            v84 = 1;
          }
          else
          {
            if ((v76 & 0x80) != 0)
              v76 = *(_QWORD *)(v75 + 8);
            v86 = v71[8];
            if (v71 == &CoreML::Specification::_WeightParams_default_instance_
              || (v76 ? (v87 = v86 == 0) : (v87 = 1), v87))
            {
              if ((v80 & 0x80) != 0)
                v80 = *(_QWORD *)(v79 + 8);
              if (v86)
                v88 = v80 == 0;
              else
                v88 = 1;
              if (v88 || v71 == &CoreML::Specification::_WeightParams_default_instance_)
                v84 = 5;
              else
                v84 = 3;
            }
            else
            {
              v84 = 2;
            }
          }
        }
      }
      else
      {
        v84 = 4;
      }
      if (v65 >= v64)
      {
        v91 = v65 - v66;
        v92 = v91 + 1;
        if ((unint64_t)(v91 + 1) >> 62)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        if (((char *)v64 - (char *)v66) >> 1 > v92)
          v92 = ((char *)v64 - (char *)v66) >> 1;
        if ((unint64_t)((char *)v64 - (char *)v66) >= 0x7FFFFFFFFFFFFFFCLL)
          v93 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v93 = v92;
        if (v93)
          v93 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v93);
        else
          v94 = 0;
        v95 = (int *)(v93 + 4 * v91);
        v64 = (int *)(v93 + 4 * v94);
        *v95 = v84;
        v90 = v95 + 1;
        while (v65 != v66)
        {
          v96 = *--v65;
          *--v95 = v96;
        }
        operator delete(v66);
        v66 = v95;
      }
      else
      {
        *v65 = v84;
        v90 = v65 + 1;
      }
      v97 = (uint64_t *)v8[7];
      if (!v97)
        v97 = &CoreML::Specification::_WeightParams_default_instance_;
      v98 = v97[5];
      v99 = *(unsigned __int8 *)(v98 + 23);
      if (*(char *)(v98 + 23) < 0)
        v100 = *(_QWORD *)(v98 + 8);
      else
        v100 = *(unsigned __int8 *)(v98 + 23);
      v101 = v97[6];
      v102 = *(unsigned __int8 *)(v101 + 23);
      if (*(char *)(v101 + 23) < 0)
        v103 = *(_QWORD *)(v101 + 8);
      else
        v103 = *(unsigned __int8 *)(v101 + 23);
      v104 = *((_DWORD *)v97 + 4);
      v105 = v97[7];
      v106 = *(unsigned __int8 *)(v105 + 23);
      if (*(char *)(v105 + 23) < 0)
        v107 = *(_QWORD *)(v105 + 8);
      else
        v107 = *(unsigned __int8 *)(v105 + 23);
      if (v104 <= 0)
        v108 = 1;
      else
        v108 = 2;
      if (v100)
        v109 = v108;
      else
        v109 = v104 > 0;
      if (v103)
        ++v109;
      if (v107)
        ++v109;
      if (v109 <= 1)
      {
        if (v109)
          v110 = 0;
        else
          v110 = 5;
        if (v104 <= 0 && v109 != 0)
        {
          if ((v99 & 0x80) != 0)
            v99 = *(_QWORD *)(v98 + 8);
          if (v99)
          {
            v110 = 1;
          }
          else
          {
            if ((v102 & 0x80) != 0)
              v102 = *(_QWORD *)(v101 + 8);
            v112 = v97[8];
            if (v97 == &CoreML::Specification::_WeightParams_default_instance_
              || (v102 ? (v113 = v112 == 0) : (v113 = 1), v113))
            {
              if ((v106 & 0x80) != 0)
                v106 = *(_QWORD *)(v105 + 8);
              if (v112)
                v114 = v106 == 0;
              else
                v114 = 1;
              if (v114 || v97 == &CoreML::Specification::_WeightParams_default_instance_)
                v110 = 5;
              else
                v110 = 3;
            }
            else
            {
              v110 = 2;
            }
          }
        }
      }
      else
      {
        v110 = 4;
      }
      if (v90 >= v64)
      {
        v117 = v90 - v66;
        v118 = v117 + 1;
        if ((unint64_t)(v117 + 1) >> 62)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        if (((char *)v64 - (char *)v66) >> 1 > v118)
          v118 = ((char *)v64 - (char *)v66) >> 1;
        if ((unint64_t)((char *)v64 - (char *)v66) >= 0x7FFFFFFFFFFFFFFCLL)
          v119 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v119 = v118;
        if (v119)
          v119 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v119);
        else
          v120 = 0;
        v121 = (int *)(v119 + 4 * v117);
        v64 = (int *)(v119 + 4 * v120);
        *v121 = v110;
        v116 = v121 + 1;
        while (v90 != v66)
        {
          v122 = *--v90;
          *--v121 = v122;
        }
        operator delete(v66);
        v66 = v121;
      }
      else
      {
        *v90 = v110;
        v116 = v90 + 1;
      }
      v123 = (uint64_t *)v8[10];
      if (!v123)
        v123 = &CoreML::Specification::_WeightParams_default_instance_;
      v124 = v123[5];
      v125 = *(unsigned __int8 *)(v124 + 23);
      if (*(char *)(v124 + 23) < 0)
        v126 = *(_QWORD *)(v124 + 8);
      else
        v126 = *(unsigned __int8 *)(v124 + 23);
      v127 = v123[6];
      v128 = *(unsigned __int8 *)(v127 + 23);
      if (*(char *)(v127 + 23) < 0)
        v129 = *(_QWORD *)(v127 + 8);
      else
        v129 = *(unsigned __int8 *)(v127 + 23);
      v130 = *((_DWORD *)v123 + 4);
      v131 = v123[7];
      v132 = *(unsigned __int8 *)(v131 + 23);
      if (*(char *)(v131 + 23) < 0)
        v133 = *(_QWORD *)(v131 + 8);
      else
        v133 = *(unsigned __int8 *)(v131 + 23);
      if (v130 <= 0)
        v134 = 1;
      else
        v134 = 2;
      if (v126)
        v135 = v134;
      else
        v135 = v130 > 0;
      if (v129)
        ++v135;
      if (v133)
        ++v135;
      if (v135 <= 1)
      {
        if (v135)
          v136 = 0;
        else
          v136 = 5;
        if (v130 <= 0 && v135 != 0)
        {
          if ((v125 & 0x80) != 0)
            v125 = *(_QWORD *)(v124 + 8);
          if (v125)
          {
            v136 = 1;
          }
          else
          {
            if ((v128 & 0x80) != 0)
              v128 = *(_QWORD *)(v127 + 8);
            v138 = v123[8];
            if (v123 == &CoreML::Specification::_WeightParams_default_instance_
              || (v128 ? (v139 = v138 == 0) : (v139 = 1), v139))
            {
              if ((v132 & 0x80) != 0)
                v132 = *(_QWORD *)(v131 + 8);
              if (v138)
                v140 = v132 == 0;
              else
                v140 = 1;
              if (v140 || v123 == &CoreML::Specification::_WeightParams_default_instance_)
                v136 = 5;
              else
                v136 = 3;
            }
            else
            {
              v136 = 2;
            }
          }
        }
      }
      else
      {
        v136 = 4;
      }
      if (v116 >= v64)
      {
        v143 = v116 - v66;
        v144 = v143 + 1;
        if ((unint64_t)(v143 + 1) >> 62)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        if (((char *)v64 - (char *)v66) >> 1 > v144)
          v144 = ((char *)v64 - (char *)v66) >> 1;
        if ((unint64_t)((char *)v64 - (char *)v66) >= 0x7FFFFFFFFFFFFFFCLL)
          v145 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v145 = v144;
        if (v145)
          v145 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v145);
        else
          v146 = 0;
        v147 = (int *)(v145 + 4 * v143);
        v64 = (int *)(v145 + 4 * v146);
        *v147 = v136;
        v142 = v147 + 1;
        while (v116 != v66)
        {
          v148 = *--v116;
          *--v147 = v148;
        }
        operator delete(v66);
        v66 = v147;
      }
      else
      {
        *v116 = v136;
        v142 = v116 + 1;
      }
      if (v259)
      {
        v149 = (uint64_t *)v8[11];
        if (!v149)
          v149 = &CoreML::Specification::_WeightParams_default_instance_;
        v150 = v149[5];
        v151 = *(unsigned __int8 *)(v150 + 23);
        if (*(char *)(v150 + 23) < 0)
          v152 = *(_QWORD *)(v150 + 8);
        else
          v152 = *(unsigned __int8 *)(v150 + 23);
        v153 = v149[6];
        v154 = *(unsigned __int8 *)(v153 + 23);
        if (*(char *)(v153 + 23) < 0)
          v155 = *(_QWORD *)(v153 + 8);
        else
          v155 = *(unsigned __int8 *)(v153 + 23);
        v156 = *((_DWORD *)v149 + 4);
        v157 = v149[7];
        v158 = *(unsigned __int8 *)(v157 + 23);
        if (*(char *)(v157 + 23) < 0)
          v159 = *(_QWORD *)(v157 + 8);
        else
          v159 = *(unsigned __int8 *)(v157 + 23);
        if (v156 <= 0)
          v160 = 1;
        else
          v160 = 2;
        if (v152)
          v161 = v160;
        else
          v161 = v156 > 0;
        if (v155)
          ++v161;
        if (v159)
          ++v161;
        if (v161 <= 1)
        {
          if (v161)
            v162 = 0;
          else
            v162 = 5;
          if (v156 <= 0 && v161 != 0)
          {
            if ((v151 & 0x80) != 0)
              v151 = *(_QWORD *)(v150 + 8);
            if (v151)
            {
              v162 = 1;
            }
            else
            {
              if ((v154 & 0x80) != 0)
                v154 = *(_QWORD *)(v153 + 8);
              v164 = v149[8];
              if (v149 == &CoreML::Specification::_WeightParams_default_instance_
                || (v154 ? (v165 = v164 == 0) : (v165 = 1), v165))
              {
                if ((v158 & 0x80) != 0)
                  v158 = *(_QWORD *)(v157 + 8);
                if (v164)
                  v166 = v158 == 0;
                else
                  v166 = 1;
                if (v166 || v149 == &CoreML::Specification::_WeightParams_default_instance_)
                  v162 = 5;
                else
                  v162 = 3;
              }
              else
              {
                v162 = 2;
              }
            }
          }
        }
        else
        {
          v162 = 4;
        }
        if (v142 >= v64)
        {
          v169 = v142 - v66;
          v170 = v169 + 1;
          if ((unint64_t)(v169 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if (((char *)v64 - (char *)v66) >> 1 > v170)
            v170 = ((char *)v64 - (char *)v66) >> 1;
          if ((unint64_t)((char *)v64 - (char *)v66) >= 0x7FFFFFFFFFFFFFFCLL)
            v171 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v171 = v170;
          if (v171)
            v171 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v171);
          else
            v172 = 0;
          v173 = (int *)(v171 + 4 * v169);
          v64 = (int *)(v171 + 4 * v172);
          *v173 = v162;
          v168 = v173 + 1;
          if (v142 == v66)
            goto LABEL_454;
          do
          {
            v174 = *--v142;
            *--v173 = v174;
          }
          while (v142 != v66);
          if (v66)
LABEL_454:
            operator delete(v66);
          v66 = v173;
        }
        else
        {
          *v142 = v162;
          v168 = v142 + 1;
        }
        v175 = (uint64_t *)v8[12];
        if (!v175)
          v175 = &CoreML::Specification::_WeightParams_default_instance_;
        v176 = v175[5];
        v177 = *(unsigned __int8 *)(v176 + 23);
        if (*(char *)(v176 + 23) < 0)
          v178 = *(_QWORD *)(v176 + 8);
        else
          v178 = *(unsigned __int8 *)(v176 + 23);
        v179 = v175[6];
        v180 = *(unsigned __int8 *)(v179 + 23);
        if (*(char *)(v179 + 23) < 0)
          v181 = *(_QWORD *)(v179 + 8);
        else
          v181 = *(unsigned __int8 *)(v179 + 23);
        v182 = *((_DWORD *)v175 + 4);
        v183 = v175[7];
        v184 = *(unsigned __int8 *)(v183 + 23);
        if (*(char *)(v183 + 23) < 0)
          v185 = *(_QWORD *)(v183 + 8);
        else
          v185 = *(unsigned __int8 *)(v183 + 23);
        if (v182 <= 0)
          v186 = 1;
        else
          v186 = 2;
        if (v178)
          v187 = v186;
        else
          v187 = v182 > 0;
        if (v181)
          ++v187;
        if (v185)
          ++v187;
        if (v187 <= 1)
        {
          if (v187)
            v188 = 0;
          else
            v188 = 5;
          if (v182 <= 0 && v187 != 0)
          {
            if ((v177 & 0x80) != 0)
              v177 = *(_QWORD *)(v176 + 8);
            if (v177)
            {
              v188 = 1;
            }
            else
            {
              if ((v180 & 0x80) != 0)
                v180 = *(_QWORD *)(v179 + 8);
              v190 = v175[8];
              if (v175 == &CoreML::Specification::_WeightParams_default_instance_
                || (v180 ? (v191 = v190 == 0) : (v191 = 1), v191))
              {
                if ((v184 & 0x80) != 0)
                  v184 = *(_QWORD *)(v183 + 8);
                if (v190)
                  v192 = v184 == 0;
                else
                  v192 = 1;
                if (v192 || v175 == &CoreML::Specification::_WeightParams_default_instance_)
                  v188 = 5;
                else
                  v188 = 3;
              }
              else
              {
                v188 = 2;
              }
            }
          }
        }
        else
        {
          v188 = 4;
        }
        if (v168 >= v64)
        {
          v195 = v168 - v66;
          v196 = v195 + 1;
          if ((unint64_t)(v195 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if (((char *)v64 - (char *)v66) >> 1 > v196)
            v196 = ((char *)v64 - (char *)v66) >> 1;
          if ((unint64_t)((char *)v64 - (char *)v66) >= 0x7FFFFFFFFFFFFFFCLL)
            v197 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v197 = v196;
          if (v197)
            v197 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v197);
          else
            v198 = 0;
          v199 = (int *)(v197 + 4 * v195);
          v64 = (int *)(v197 + 4 * v198);
          *v199 = v188;
          v194 = v199 + 1;
          if (v168 == v66)
            goto LABEL_523;
          do
          {
            v200 = *--v168;
            *--v199 = v200;
          }
          while (v168 != v66);
          if (v66)
LABEL_523:
            operator delete(v66);
          v66 = v199;
        }
        else
        {
          *v168 = v188;
          v194 = v168 + 1;
        }
        v201 = (uint64_t *)v8[13];
        if (!v201)
          v201 = &CoreML::Specification::_WeightParams_default_instance_;
        v202 = v201[5];
        v203 = *(unsigned __int8 *)(v202 + 23);
        if (*(char *)(v202 + 23) < 0)
          v204 = *(_QWORD *)(v202 + 8);
        else
          v204 = *(unsigned __int8 *)(v202 + 23);
        v205 = v201[6];
        v206 = *(unsigned __int8 *)(v205 + 23);
        if (*(char *)(v205 + 23) < 0)
          v207 = *(_QWORD *)(v205 + 8);
        else
          v207 = *(unsigned __int8 *)(v205 + 23);
        v208 = *((_DWORD *)v201 + 4);
        v209 = v201[7];
        v210 = *(unsigned __int8 *)(v209 + 23);
        if (*(char *)(v209 + 23) < 0)
          v211 = *(_QWORD *)(v209 + 8);
        else
          v211 = *(unsigned __int8 *)(v209 + 23);
        if (v208 <= 0)
          v212 = 1;
        else
          v212 = 2;
        if (v204)
          v213 = v212;
        else
          v213 = v208 > 0;
        if (v207)
          ++v213;
        if (v211)
          ++v213;
        if (v213 <= 1)
        {
          if (v213)
            v214 = 0;
          else
            v214 = 5;
          if (v208 <= 0 && v213 != 0)
          {
            if ((v203 & 0x80) != 0)
              v203 = *(_QWORD *)(v202 + 8);
            if (v203)
            {
              v214 = 1;
            }
            else
            {
              if ((v206 & 0x80) != 0)
                v206 = *(_QWORD *)(v205 + 8);
              v216 = v201[8];
              if (v201 == &CoreML::Specification::_WeightParams_default_instance_
                || (v206 ? (v217 = v216 == 0) : (v217 = 1), v217))
              {
                if ((v210 & 0x80) != 0)
                  v210 = *(_QWORD *)(v209 + 8);
                if (v216)
                  v218 = v210 == 0;
                else
                  v218 = 1;
                if (v218 || v201 == &CoreML::Specification::_WeightParams_default_instance_)
                  v214 = 5;
                else
                  v214 = 3;
              }
              else
              {
                v214 = 2;
              }
            }
          }
        }
        else
        {
          v214 = 4;
        }
        if (v194 >= v64)
        {
          v220 = v194 - v66;
          v221 = v220 + 1;
          if ((unint64_t)(v220 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if (((char *)v64 - (char *)v66) >> 1 > v221)
            v221 = ((char *)v64 - (char *)v66) >> 1;
          if ((unint64_t)((char *)v64 - (char *)v66) >= 0x7FFFFFFFFFFFFFFCLL)
            v222 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v222 = v221;
          if (v222)
            v222 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v222);
          v223 = (int *)(v222 + 4 * v220);
          *v223 = v214;
          v142 = v223 + 1;
          if (v194 == v66)
            goto LABEL_591;
          do
          {
            v224 = *--v194;
            *--v223 = v224;
          }
          while (v194 != v66);
          if (v66)
LABEL_591:
            operator delete(v66);
          v66 = v223;
        }
        else
        {
          *v194 = v214;
          v142 = v194 + 1;
        }
      }
      if (v66 != v142)
      {
        v225 = 0;
        v226 = 0;
        v227 = v66;
        while (1)
        {
          v228 = *v227 ? v225 : v225 + 1;
          if (*v227 == 1)
            ++v226;
          else
            v225 = v228;
          if (v225 * v226 >= 1)
            break;
          if (++v227 == v142)
            goto LABEL_603;
        }
        std::operator+<char>();
        v253 = std::string::append(&v260, "' has invalid weight/recursion matrix or bias fields. Field value types should match and should be either half or full precision");
        v254 = *(_OWORD *)&v253->__r_.__value_.__l.__data_;
        v262 = v253->__r_.__value_.__r.__words[2];
        *(_OWORD *)v261 = v254;
        v253->__r_.__value_.__l.__size_ = 0;
        v253->__r_.__value_.__r.__words[2] = 0;
        v253->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v260.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v262) < 0)
          operator delete(v261[0]);
        goto LABEL_698;
      }
LABEL_603:
      v230 = v8[14];
      v229 = v8[15];
      if (v8[5])
        v231 = (uint64_t *)v8[5];
      else
        v231 = &CoreML::Specification::_WeightParams_default_instance_;
      std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
      v232 = *(_QWORD *)(a3 + 112);
      std::string::basic_string[abi:ne180100]<0>(&v260, "update gate weight matrix");
      v233 = v229 * v230;
      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v231, v233, v229, (const void **)v261, v232, (uint64_t)&v260);
      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v260.__r_.__value_.__l.__data_);
      if (SHIBYTE(v262) < 0)
        operator delete(v261[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (v8[6])
          v234 = (uint64_t *)v8[6];
        else
          v234 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
        v235 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(&v260, "reset gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v234, v233, v229, (const void **)v261, v235, (uint64_t)&v260);
        if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v260.__r_.__value_.__l.__data_);
        if (SHIBYTE(v262) < 0)
          operator delete(v261[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          if (v8[7])
            v236 = (uint64_t *)v8[7];
          else
            v236 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
          v237 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(&v260, "output gate weight matrix");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v236, v233, v229, (const void **)v261, v237, (uint64_t)&v260);
          if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v260.__r_.__value_.__l.__data_);
          if (SHIBYTE(v262) < 0)
            operator delete(v261[0]);
          if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
          {
            if (*((char *)this + 31) < 0)
              operator delete(this[1]);
            v238 = v8[15];
            if (v8[8])
              v239 = (uint64_t *)v8[8];
            else
              v239 = &CoreML::Specification::_WeightParams_default_instance_;
            std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
            v240 = *(_QWORD *)(a3 + 112);
            std::string::basic_string[abi:ne180100]<0>(&v260, "update gate recursion matrix");
            v241 = v238 * v238;
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v239, v241, v229, (const void **)v261, v240, (uint64_t)&v260);
            if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v260.__r_.__value_.__l.__data_);
            if (SHIBYTE(v262) < 0)
              operator delete(v261[0]);
            if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
            {
              if (*((char *)this + 31) < 0)
                operator delete(this[1]);
              if (v8[9])
                v242 = (uint64_t *)v8[9];
              else
                v242 = &CoreML::Specification::_WeightParams_default_instance_;
              std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
              v243 = *(_QWORD *)(a3 + 112);
              std::string::basic_string[abi:ne180100]<0>(&v260, "reset gate recursion matrix");
              CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v242, v241, v229, (const void **)v261, v243, (uint64_t)&v260);
              if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v260.__r_.__value_.__l.__data_);
              if (SHIBYTE(v262) < 0)
                operator delete(v261[0]);
              if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
              {
                if (*((char *)this + 31) < 0)
                  operator delete(this[1]);
                if (v8[10])
                  v244 = (uint64_t *)v8[10];
                else
                  v244 = &CoreML::Specification::_WeightParams_default_instance_;
                std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
                v245 = *(_QWORD *)(a3 + 112);
                std::string::basic_string[abi:ne180100]<0>(&v260, "output gate recursion matrix");
                CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v244, v241, v229, (const void **)v261, v245, (uint64_t)&v260);
                if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v260.__r_.__value_.__l.__data_);
                if (SHIBYTE(v262) < 0)
                  operator delete(v261[0]);
                if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                {
                  if (*((char *)this + 31) < 0)
                    operator delete(this[1]);
                  if (!v259)
                    goto LABEL_701;
                  v246 = v8[15];
                  if (v8[11])
                    v247 = (uint64_t *)v8[11];
                  else
                    v247 = &CoreML::Specification::_WeightParams_default_instance_;
                  std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
                  v248 = *(_QWORD *)(a3 + 112);
                  std::string::basic_string[abi:ne180100]<0>(&v260, "update gate bias vector");
                  CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v247, v246, 1, (const void **)v261, v248, (uint64_t)&v260);
                  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v260.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v262) < 0)
                    operator delete(v261[0]);
                  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                  {
                    if (*((char *)this + 31) < 0)
                      operator delete(this[1]);
                    if (v8[12])
                      v249 = (uint64_t *)v8[12];
                    else
                      v249 = &CoreML::Specification::_WeightParams_default_instance_;
                    std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
                    v250 = *(_QWORD *)(a3 + 112);
                    std::string::basic_string[abi:ne180100]<0>(&v260, "reset gate bias vector");
                    CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v249, v246, 1, (const void **)v261, v250, (uint64_t)&v260);
                    if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v260.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v262) < 0)
                      operator delete(v261[0]);
                    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                    {
                      if (*((char *)this + 31) < 0)
                        operator delete(this[1]);
                      if (v8[13])
                        v251 = (uint64_t *)v8[13];
                      else
                        v251 = &CoreML::Specification::_WeightParams_default_instance_;
                      std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
                      v252 = *(_QWORD *)(a3 + 112);
                      std::string::basic_string[abi:ne180100]<0>(&v260, "output gate bias vector");
                      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v251, v246, 1, (const void **)v261, v252, (uint64_t)&v260);
                      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v260.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v262) < 0)
                        operator delete(v261[0]);
                      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0 && *((char *)this + 31) < 0)
                      {
                        operator delete(this[1]);
                        goto LABEL_701;
                      }
                      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                      {
LABEL_701:
                        v255 = v8[4];
                        if (v255)
                          v256 = (const CoreML::Specification::ActivationParams **)(v255 + 8);
                        else
                          v256 = 0;
                        v257 = *((int *)v8 + 6);
                        if ((_DWORD)v257)
                        {
                          v258 = 8 * v257;
                          while (1)
                          {
                            CoreML::validateRecurrentActivationParams((CoreML *)this, *v256);
                            if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
                              break;
                            if (*((char *)this + 31) < 0)
                              operator delete(this[1]);
                            ++v256;
                            v258 -= 8;
                            if (!v258)
                              goto LABEL_710;
                          }
                        }
                        else
                        {
LABEL_710:
                          CoreML::Result::Result((CoreML::Result *)this);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_698:
      if (v66)
        operator delete(v66);
    }
  }
}

void sub_19C9B4B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (v21)
    operator delete(v21);
  _Unwind_Resume(exception_object);
}

void sub_19C9B4C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    JUMPOUT(0x19C9B4C40);
  JUMPOUT(0x19C9B4C44);
}

void CoreML::NeuralNetworkSpecValidator::validateUniDirectionalLSTMLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *inited;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  const CoreML::Specification::ActivationParams **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t *v15;
  const CoreML::Specification::LSTMParams *v16;
  const CoreML::Specification::LSTMParams *v17;
  uint64_t *v18;
  const CoreML::Specification::UniDirectionalLSTMLayerParams *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  std::string *v85;
  __int128 v86;
  std::string v87;
  void *v88[2];
  std::string::size_type v89;
  void *__p[2];
  char v91;
  int v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  void (**v97)(CoreML::Specification::LSTMParams *__hidden);
  uint64_t v98;
  char v99;
  char v100;
  void *v101[2];
  char v102;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 3);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
    return;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 3, 3);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
    return;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  if (*(_BYTE *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v101, "UniDirectionalLSTM");
    v7 = (char *)a2 + 32;
    CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)v101, (uint64_t)v7);
    if (v102 < 0)
      operator delete(v101[0]);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
      return;
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    std::string::basic_string[abi:ne180100]<0>(__p, "UniDirectionalLSTM");
    CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)__p, 5, 5, (uint64_t)v7);
    if (v91 < 0)
      operator delete(__p[0]);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
      return;
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
  }
  if (*(_DWORD *)(a3 + 140) == 420)
  {
    v8 = *(uint64_t **)(a3 + 128);
  }
  else
  {
    inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
    v8 = &CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_;
  }
  v9 = v8[4];
  if (v9)
    v10 = (const CoreML::Specification::ActivationParams **)(v9 + 8);
  else
    v10 = 0;
  v11 = *((int *)v8 + 6);
  if (!(_DWORD)v11)
  {
LABEL_31:
    if (*(_DWORD *)(a3 + 140) == 420)
    {
      v13 = *(uint64_t **)(a3 + 128);
      if (v13[6])
        v14 = (uint64_t *)v13[6];
      else
        v14 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
    }
    else
    {
      v15 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
      if (qword_1ED005FB0)
        v14 = (uint64_t *)qword_1ED005FB0;
      else
        v14 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      if (*(_DWORD *)(a3 + 140) == 420)
      {
        v13 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v15);
        v13 = &CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_;
      }
    }
    v16 = (const CoreML::Specification::LSTMParams *)v13[5];
    if (v16)
      v17 = v16;
    else
      v17 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
    CoreML::Specification::LSTMParams::LSTMParams((CoreML::Specification::LSTMParams *)&v97, v17);
    CoreML::validateLSTMWeightParams((CoreML::Result *)this, v14, v99, v100);
    v97 = &off_1E3D4CC40;
    v18 = google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v98);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
      return;
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    if (*(_DWORD *)(a3 + 140) == 420)
    {
      v19 = *(const CoreML::Specification::UniDirectionalLSTMLayerParams **)(a3 + 128);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v18);
      v19 = (const CoreML::Specification::UniDirectionalLSTMLayerParams *)&CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_;
    }
    CoreML::Specification::UniDirectionalLSTMLayerParams::UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)__p, v19);
    if (v92 != 3)
    {
      std::operator+<char>();
      v85 = std::string::append(&v87, " must provide 3 activations");
      v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v89 = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)v88 = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v89) < 0)
        operator delete(v88[0]);
      goto LABEL_242;
    }
    v21 = v95;
    v20 = v96;
    v22 = v94;
    if (!v94)
      v22 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
    v23 = (uint64_t *)v22[2];
    if (v23)
      v24 = v23;
    else
      v24 = &CoreML::Specification::_WeightParams_default_instance_;
    std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
    v25 = *(_QWORD *)(a3 + 112);
    std::string::basic_string[abi:ne180100]<0>(&v87, "input gate weight matrix");
    v26 = v21 * v20;
    CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v24, v26, v20, (const void **)v88, v25, (uint64_t)&v87);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    if (SHIBYTE(v89) < 0)
      operator delete(v88[0]);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      v27 = v94;
      if (!v94)
        v27 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      v28 = (uint64_t *)v27[3];
      if (v28)
        v29 = v28;
      else
        v29 = &CoreML::Specification::_WeightParams_default_instance_;
      std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
      v30 = *(_QWORD *)(a3 + 112);
      std::string::basic_string[abi:ne180100]<0>(&v87, "forget gate weight matrix");
      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v29, v26, v20, (const void **)v88, v30, (uint64_t)&v87);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      if (SHIBYTE(v89) < 0)
        operator delete(v88[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        v31 = v94;
        if (!v94)
          v31 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
        v32 = (uint64_t *)v31[4];
        if (v32)
          v33 = v32;
        else
          v33 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
        v34 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(&v87, "block input gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v33, v26, v20, (const void **)v88, v34, (uint64_t)&v87);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v87.__r_.__value_.__l.__data_);
        if (SHIBYTE(v89) < 0)
          operator delete(v88[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          v35 = v94;
          if (!v94)
            v35 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
          v36 = (uint64_t *)v35[5];
          if (v36)
            v37 = v36;
          else
            v37 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
          v38 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(&v87, "output gate weight matrix");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v37, v26, v20, (const void **)v88, v38, (uint64_t)&v87);
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v87.__r_.__value_.__l.__data_);
          if (SHIBYTE(v89) < 0)
            operator delete(v88[0]);
          if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
          {
            if (*((char *)this + 31) < 0)
              operator delete(this[1]);
            v39 = v94;
            if (!v94)
              v39 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
            v40 = (uint64_t *)v39[6];
            if (v40)
              v41 = v40;
            else
              v41 = &CoreML::Specification::_WeightParams_default_instance_;
            std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
            v42 = *(_QWORD *)(a3 + 112);
            std::string::basic_string[abi:ne180100]<0>(&v87, "input gate recursion matrix");
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v41, v20 * v20, v20, (const void **)v88, v42, (uint64_t)&v87);
            if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v87.__r_.__value_.__l.__data_);
            if (SHIBYTE(v89) < 0)
              operator delete(v88[0]);
            if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
            {
              if (*((char *)this + 31) < 0)
                operator delete(this[1]);
              v43 = v94;
              if (!v94)
                v43 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
              v44 = (uint64_t *)v43[7];
              if (v44)
                v45 = v44;
              else
                v45 = &CoreML::Specification::_WeightParams_default_instance_;
              std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
              v46 = *(_QWORD *)(a3 + 112);
              std::string::basic_string[abi:ne180100]<0>(&v87, "forget gate recursion matrix");
              CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v45, v20 * v20, v20, (const void **)v88, v46, (uint64_t)&v87);
              if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v87.__r_.__value_.__l.__data_);
              if (SHIBYTE(v89) < 0)
                operator delete(v88[0]);
              if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
              {
                if (*((char *)this + 31) < 0)
                  operator delete(this[1]);
                v47 = v94;
                if (!v94)
                  v47 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                v48 = (uint64_t *)v47[8];
                if (v48)
                  v49 = v48;
                else
                  v49 = &CoreML::Specification::_WeightParams_default_instance_;
                std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                v50 = *(_QWORD *)(a3 + 112);
                std::string::basic_string[abi:ne180100]<0>(&v87, "block input gate recursion matrix");
                CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v49, v20 * v20, v20, (const void **)v88, v50, (uint64_t)&v87);
                if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v87.__r_.__value_.__l.__data_);
                if (SHIBYTE(v89) < 0)
                  operator delete(v88[0]);
                if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                {
                  if (*((char *)this + 31) < 0)
                    operator delete(this[1]);
                  v51 = v94;
                  if (!v94)
                    v51 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                  v52 = (uint64_t *)v51[9];
                  if (v52)
                    v53 = v52;
                  else
                    v53 = &CoreML::Specification::_WeightParams_default_instance_;
                  std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                  v54 = *(_QWORD *)(a3 + 112);
                  std::string::basic_string[abi:ne180100]<0>(&v87, "output gate recursion matrix");
                  CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v53, v20 * v20, v20, (const void **)v88, v54, (uint64_t)&v87);
                  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v87.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v89) < 0)
                    operator delete(v88[0]);
                  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                  {
                    if (*((char *)this + 31) < 0)
                      operator delete(this[1]);
                    v55 = v93;
                    if (!v93)
                      v55 = &CoreML::Specification::_LSTMParams_default_instance_;
                    if (*((_BYTE *)v55 + 21))
                    {
                      v56 = v94;
                      if (!v94)
                        v56 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                      v57 = (uint64_t *)v56[10];
                      if (v57)
                        v58 = v57;
                      else
                        v58 = &CoreML::Specification::_WeightParams_default_instance_;
                      std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                      v59 = *(_QWORD *)(a3 + 112);
                      std::string::basic_string[abi:ne180100]<0>(&v87, "input gate bias vector");
                      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v58, v20, 1, (const void **)v88, v59, (uint64_t)&v87);
                      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v87.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v89) < 0)
                        operator delete(v88[0]);
                      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
                        goto LABEL_242;
                      if (*((char *)this + 31) < 0)
                        operator delete(this[1]);
                      v60 = v94;
                      if (!v94)
                        v60 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                      v61 = (uint64_t *)v60[11];
                      if (v61)
                        v62 = v61;
                      else
                        v62 = &CoreML::Specification::_WeightParams_default_instance_;
                      std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                      v63 = *(_QWORD *)(a3 + 112);
                      std::string::basic_string[abi:ne180100]<0>(&v87, "forget gate bias vector");
                      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v62, v20, 1, (const void **)v88, v63, (uint64_t)&v87);
                      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v87.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v89) < 0)
                        operator delete(v88[0]);
                      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
                        goto LABEL_242;
                      if (*((char *)this + 31) < 0)
                        operator delete(this[1]);
                      v64 = v94;
                      if (!v94)
                        v64 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                      v65 = (uint64_t *)v64[12];
                      if (v65)
                        v66 = v65;
                      else
                        v66 = &CoreML::Specification::_WeightParams_default_instance_;
                      std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                      v67 = *(_QWORD *)(a3 + 112);
                      std::string::basic_string[abi:ne180100]<0>(&v87, "block input bias vector");
                      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v66, v20, 1, (const void **)v88, v67, (uint64_t)&v87);
                      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v87.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v89) < 0)
                        operator delete(v88[0]);
                      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
                        goto LABEL_242;
                      if (*((char *)this + 31) < 0)
                        operator delete(this[1]);
                      v68 = v94;
                      if (!v94)
                        v68 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                      v69 = (uint64_t *)v68[13];
                      if (v69)
                        v70 = v69;
                      else
                        v70 = &CoreML::Specification::_WeightParams_default_instance_;
                      std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                      v71 = *(_QWORD *)(a3 + 112);
                      std::string::basic_string[abi:ne180100]<0>(&v87, "output gate bias vector");
                      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v70, v20, 1, (const void **)v88, v71, (uint64_t)&v87);
                      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v87.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v89) < 0)
                        operator delete(v88[0]);
                      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
                        goto LABEL_242;
                      if (*((char *)this + 31) < 0)
                        operator delete(this[1]);
                    }
                    v72 = v93;
                    if (!v93)
                      v72 = &CoreML::Specification::_LSTMParams_default_instance_;
                    if (*((_BYTE *)v72 + 23))
                    {
                      v73 = v94;
                      if (!v94)
                        v73 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                      v74 = (uint64_t *)v73[14];
                      if (v74)
                        v75 = v74;
                      else
                        v75 = &CoreML::Specification::_WeightParams_default_instance_;
                      std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                      v76 = *(_QWORD *)(a3 + 112);
                      std::string::basic_string[abi:ne180100]<0>(&v87, "input gate peep hole vector");
                      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v75, v20, 1, (const void **)v88, v76, (uint64_t)&v87);
                      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v87.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v89) < 0)
                        operator delete(v88[0]);
                      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
                        goto LABEL_242;
                      if (*((char *)this + 31) < 0)
                        operator delete(this[1]);
                      v77 = v94;
                      if (!v94)
                        v77 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                      v78 = (uint64_t *)v77[15];
                      if (v78)
                        v79 = v78;
                      else
                        v79 = &CoreML::Specification::_WeightParams_default_instance_;
                      std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                      v80 = *(_QWORD *)(a3 + 112);
                      std::string::basic_string[abi:ne180100]<0>(&v87, "forget gate peep hole vector");
                      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v79, v20, 1, (const void **)v88, v80, (uint64_t)&v87);
                      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v87.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v89) < 0)
                        operator delete(v88[0]);
                      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
                        goto LABEL_242;
                      if (*((char *)this + 31) < 0)
                        operator delete(this[1]);
                      v81 = v94;
                      if (!v94)
                        v81 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                      v82 = (uint64_t *)v81[16];
                      if (v82)
                        v83 = v82;
                      else
                        v83 = &CoreML::Specification::_WeightParams_default_instance_;
                      std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                      v84 = *(_QWORD *)(a3 + 112);
                      std::string::basic_string[abi:ne180100]<0>(&v87, "output gate peep hole vector");
                      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v83, v20, 1, (const void **)v88, v84, (uint64_t)&v87);
                      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v87.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v89) < 0)
                        operator delete(v88[0]);
                      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
                        goto LABEL_242;
                      if (*((char *)this + 31) < 0)
                        operator delete(this[1]);
                    }
                    CoreML::Result::Result((CoreML::Result *)this);
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_242:
    CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)__p);
    return;
  }
  v12 = 8 * v11;
  while (1)
  {
    inited = CoreML::validateRecurrentActivationParams((CoreML *)this, *v10);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
      break;
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    ++v10;
    v12 -= 8;
    if (!v12)
      goto LABEL_31;
  }
}

void sub_19C9B58E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)&a22);
  _Unwind_Resume(a1);
}

void CoreML::validateLSTMWeightParams(CoreML::Result *a1, _QWORD *a2, char a3, char a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  char v19;
  int v20;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  int *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  BOOL v41;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  BOOL v60;
  int *v62;
  int *v63;
  int *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  int v81;
  uint64_t v83;
  BOOL v84;
  BOOL v85;
  int *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int *v92;
  int v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  int v106;
  uint64_t v108;
  BOOL v109;
  BOOL v110;
  int *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  int *v117;
  int v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unsigned int v130;
  int v131;
  uint64_t v133;
  BOOL v134;
  BOOL v135;
  int *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int *v142;
  int v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  unsigned int v155;
  int v156;
  uint64_t v158;
  BOOL v159;
  BOOL v160;
  int *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  int *v167;
  int v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unsigned int v180;
  int v181;
  uint64_t v183;
  BOOL v184;
  BOOL v185;
  int *v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  int *v192;
  int v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  BOOL v208;
  int *v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  int *v215;
  int v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  unsigned int v228;
  int v229;
  uint64_t v231;
  BOOL v232;
  BOOL v233;
  int *v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  int *v240;
  int v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  unsigned int v253;
  int v254;
  uint64_t v256;
  BOOL v257;
  BOOL v258;
  int *v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  int *v265;
  int v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  unsigned int v278;
  int v279;
  uint64_t v281;
  BOOL v282;
  BOOL v283;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  int *v289;
  int v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  unsigned int v302;
  int v303;
  uint64_t v304;
  BOOL v305;
  int *v307;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  int *v312;
  int v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  unsigned int v325;
  int v326;
  uint64_t v328;
  BOOL v329;
  BOOL v330;
  int *v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  int *v337;
  int v338;
  uint64_t *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  unsigned int v350;
  int v351;
  uint64_t v353;
  BOOL v354;
  BOOL v355;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  int *v360;
  int v361;
  int v362;
  int v363;
  int *v364;
  int v365;
  void *__p;
  char v368;

  v6 = (uint64_t *)a2[2];
  if (!v6)
    v6 = &CoreML::Specification::_WeightParams_default_instance_;
  v7 = v6[5];
  v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0)
    v9 = *(_QWORD *)(v7 + 8);
  else
    v9 = *(unsigned __int8 *)(v7 + 23);
  v10 = v6[6];
  v11 = *(unsigned __int8 *)(v10 + 23);
  if (*(char *)(v10 + 23) < 0)
    v12 = *(_QWORD *)(v10 + 8);
  else
    v12 = *(unsigned __int8 *)(v10 + 23);
  v13 = *((_DWORD *)v6 + 4);
  v14 = v6[7];
  v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0)
    v16 = *(_QWORD *)(v14 + 8);
  else
    v16 = *(unsigned __int8 *)(v14 + 23);
  if (v13 <= 0)
    v17 = 1;
  else
    v17 = 2;
  if (v9)
    v18 = v17;
  else
    v18 = v13 > 0;
  if (v12)
    ++v18;
  if (v16)
    ++v18;
  if (v18 <= 1)
  {
    if (v18)
      v20 = 0;
    else
      v20 = 5;
    if (v13 > 0 || v18 == 0)
    {
      v19 = a4;
    }
    else
    {
      if ((v8 & 0x80) != 0)
        v8 = *(_QWORD *)(v7 + 8);
      v19 = a4;
      if (v8)
      {
        v20 = 1;
      }
      else
      {
        if ((v11 & 0x80) != 0)
          v11 = *(_QWORD *)(v10 + 8);
        v22 = v6[8];
        if (v6 == &CoreML::Specification::_WeightParams_default_instance_ || (v11 ? (v23 = v22 == 0) : (v23 = 1), v23))
        {
          if ((v15 & 0x80) != 0)
            v15 = *(_QWORD *)(v14 + 8);
          if (v22)
            v24 = v15 == 0;
          else
            v24 = 1;
          if (v24 || v6 == &CoreML::Specification::_WeightParams_default_instance_)
            v20 = 5;
          else
            v20 = 3;
        }
        else
        {
          v20 = 2;
        }
      }
    }
  }
  else
  {
    v19 = a4;
    v20 = 4;
  }
  v26 = (int *)operator new(4uLL);
  *v26 = v20;
  v27 = (uint64_t *)a2[3];
  if (!v27)
    v27 = &CoreML::Specification::_WeightParams_default_instance_;
  v28 = v27[5];
  if (*(char *)(v28 + 23) < 0)
    v29 = *(_QWORD *)(v28 + 8);
  else
    v29 = *(unsigned __int8 *)(v28 + 23);
  v30 = v27[6];
  v31 = *(unsigned __int8 *)(v30 + 23);
  if (*(char *)(v30 + 23) < 0)
    v32 = *(_QWORD *)(v30 + 8);
  else
    v32 = *(unsigned __int8 *)(v30 + 23);
  v33 = *((_DWORD *)v27 + 4);
  v34 = v27[7];
  v35 = *(unsigned __int8 *)(v34 + 23);
  if (*(char *)(v34 + 23) < 0)
    v36 = *(_QWORD *)(v34 + 8);
  else
    v36 = *(unsigned __int8 *)(v34 + 23);
  if (v33 <= 0)
    v37 = 1;
  else
    v37 = 2;
  if (v29)
    v38 = v37;
  else
    v38 = v33 > 0;
  if (v32)
    ++v38;
  if (v36)
    ++v38;
  if (v38 > 1)
  {
    v39 = 4;
    goto LABEL_105;
  }
  if (v38)
    v39 = 0;
  else
    v39 = 5;
  if (v33 <= 0 && v38)
  {
    if ((*(_BYTE *)(v28 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v28 + 8))
        goto LABEL_86;
    }
    else if (*(_BYTE *)(v28 + 23))
    {
LABEL_86:
      v39 = 1;
      goto LABEL_105;
    }
    if ((v31 & 0x80) != 0)
      v31 = *(_QWORD *)(v30 + 8);
    v40 = v27[8];
    if (v27 != &CoreML::Specification::_WeightParams_default_instance_ && v31 && v40)
    {
      v39 = 2;
    }
    else
    {
      if ((v35 & 0x80) != 0)
        v35 = *(_QWORD *)(v34 + 8);
      if (v40)
        v41 = v35 == 0;
      else
        v41 = 1;
      if (v41 || v27 == &CoreML::Specification::_WeightParams_default_instance_)
        v39 = 5;
      else
        v39 = 3;
    }
  }
LABEL_105:
  v43 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(2uLL);
  v45 = v44;
  v43[1] = v39;
  *v43 = *v26;
  operator delete(v26);
  v46 = (uint64_t *)a2[4];
  if (!v46)
    v46 = &CoreML::Specification::_WeightParams_default_instance_;
  v47 = v46[5];
  if (*(char *)(v47 + 23) < 0)
    v48 = *(_QWORD *)(v47 + 8);
  else
    v48 = *(unsigned __int8 *)(v47 + 23);
  v49 = v46[6];
  v50 = *(unsigned __int8 *)(v49 + 23);
  if (*(char *)(v49 + 23) < 0)
    v51 = *(_QWORD *)(v49 + 8);
  else
    v51 = *(unsigned __int8 *)(v49 + 23);
  v52 = *((_DWORD *)v46 + 4);
  v53 = v46[7];
  v54 = *(unsigned __int8 *)(v53 + 23);
  if (*(char *)(v53 + 23) < 0)
    v55 = *(_QWORD *)(v53 + 8);
  else
    v55 = *(unsigned __int8 *)(v53 + 23);
  if (v52 <= 0)
    v56 = 1;
  else
    v56 = 2;
  if (v48)
    v57 = v56;
  else
    v57 = v52 > 0;
  if (v51)
    ++v57;
  if (v55)
    ++v57;
  if (v57 > 1)
  {
    v58 = 4;
    goto LABEL_154;
  }
  if (v57)
    v58 = 0;
  else
    v58 = 5;
  if (v52 <= 0 && v57)
  {
    if ((*(_BYTE *)(v47 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v47 + 8))
        goto LABEL_135;
    }
    else if (*(_BYTE *)(v47 + 23))
    {
LABEL_135:
      v58 = 1;
      goto LABEL_154;
    }
    if ((v50 & 0x80) != 0)
      v50 = *(_QWORD *)(v49 + 8);
    v59 = v46[8];
    if (v46 != &CoreML::Specification::_WeightParams_default_instance_ && v50 && v59)
    {
      v58 = 2;
    }
    else
    {
      if ((v54 & 0x80) != 0)
        v54 = *(_QWORD *)(v53 + 8);
      if (v59)
        v60 = v54 == 0;
      else
        v60 = 1;
      if (v60 || v46 == &CoreML::Specification::_WeightParams_default_instance_)
        v58 = 5;
      else
        v58 = 3;
    }
  }
LABEL_154:
  v62 = &v43[v45];
  if (v45 < 3)
  {
    v65 = 3;
    if ((unint64_t)((4 * v45) >> 1) > 3)
      v65 = (4 * v45) >> 1;
    if ((unint64_t)(4 * v45) >= 0x7FFFFFFFFFFFFFFCLL)
      v66 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v66 = v65;
    if (v66)
      v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v66);
    else
      v67 = 0;
    v68 = 0;
    v62 = (int *)(v66 + 4 * v67);
    *(_DWORD *)(v66 + 8) = v58;
    v63 = (int *)(v66 + 12);
    do
    {
      *(_DWORD *)(v66 + 8 + v68 * 4 - 4) = v43[v68 + 1];
      --v68;
    }
    while (v68 != -2);
    v64 = (int *)v66;
    operator delete(v43);
  }
  else
  {
    v43[2] = v58;
    v63 = v43 + 3;
    v64 = v43;
  }
  v69 = (uint64_t *)a2[5];
  if (!v69)
    v69 = &CoreML::Specification::_WeightParams_default_instance_;
  v70 = v69[5];
  if (*(char *)(v70 + 23) < 0)
    v71 = *(_QWORD *)(v70 + 8);
  else
    v71 = *(unsigned __int8 *)(v70 + 23);
  v72 = v69[6];
  v73 = *(unsigned __int8 *)(v72 + 23);
  if (*(char *)(v72 + 23) < 0)
    v74 = *(_QWORD *)(v72 + 8);
  else
    v74 = *(unsigned __int8 *)(v72 + 23);
  v75 = *((_DWORD *)v69 + 4);
  v76 = v69[7];
  v77 = *(unsigned __int8 *)(v76 + 23);
  if (*(char *)(v76 + 23) < 0)
    v78 = *(_QWORD *)(v76 + 8);
  else
    v78 = *(unsigned __int8 *)(v76 + 23);
  if (v75 <= 0)
    v79 = 1;
  else
    v79 = 2;
  if (v71)
    v80 = v79;
  else
    v80 = v75 > 0;
  if (v74)
    ++v80;
  if (v78)
    ++v80;
  if (v80 > 1)
  {
    v81 = 4;
    goto LABEL_220;
  }
  if (v80)
    v81 = 0;
  else
    v81 = 5;
  if (v75 <= 0 && v80 != 0)
  {
    if ((*(_BYTE *)(v70 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v70 + 8))
        goto LABEL_199;
    }
    else if (*(_BYTE *)(v70 + 23))
    {
LABEL_199:
      v81 = 1;
      goto LABEL_220;
    }
    if ((v73 & 0x80) != 0)
      v73 = *(_QWORD *)(v72 + 8);
    v83 = v69[8];
    if (v69 == &CoreML::Specification::_WeightParams_default_instance_ || (v73 ? (v84 = v83 == 0) : (v84 = 1), v84))
    {
      if ((v77 & 0x80) != 0)
        v77 = *(_QWORD *)(v76 + 8);
      if (v83)
        v85 = v77 == 0;
      else
        v85 = 1;
      if (v85 || v69 == &CoreML::Specification::_WeightParams_default_instance_)
        v81 = 5;
      else
        v81 = 3;
    }
    else
    {
      v81 = 2;
    }
  }
LABEL_220:
  if (v63 >= v62)
  {
    v88 = v63 - v64;
    v89 = v88 + 1;
    if ((unint64_t)(v88 + 1) >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    if (((char *)v62 - (char *)v64) >> 1 > v89)
      v89 = ((char *)v62 - (char *)v64) >> 1;
    if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL)
      v90 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v90 = v89;
    if (v90)
      v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v90);
    else
      v91 = 0;
    v92 = (int *)(v90 + 4 * v88);
    v62 = (int *)(v90 + 4 * v91);
    *v92 = v81;
    v87 = v92 + 1;
    while (v63 != v64)
    {
      v93 = *--v63;
      *--v92 = v93;
    }
    operator delete(v64);
    v64 = v92;
  }
  else
  {
    *v63 = v81;
    v87 = v63 + 1;
  }
  v94 = (uint64_t *)a2[6];
  if (!v94)
    v94 = &CoreML::Specification::_WeightParams_default_instance_;
  v95 = v94[5];
  if (*(char *)(v95 + 23) < 0)
    v96 = *(_QWORD *)(v95 + 8);
  else
    v96 = *(unsigned __int8 *)(v95 + 23);
  v97 = v94[6];
  v98 = *(unsigned __int8 *)(v97 + 23);
  if (*(char *)(v97 + 23) < 0)
    v99 = *(_QWORD *)(v97 + 8);
  else
    v99 = *(unsigned __int8 *)(v97 + 23);
  v100 = *((_DWORD *)v94 + 4);
  v101 = v94[7];
  v102 = *(unsigned __int8 *)(v101 + 23);
  if (*(char *)(v101 + 23) < 0)
    v103 = *(_QWORD *)(v101 + 8);
  else
    v103 = *(unsigned __int8 *)(v101 + 23);
  if (v100 <= 0)
    v104 = 1;
  else
    v104 = 2;
  if (v96)
    v105 = v104;
  else
    v105 = v100 > 0;
  if (v99)
    ++v105;
  if (v103)
    ++v105;
  if (v105 > 1)
  {
    v106 = 4;
    goto LABEL_288;
  }
  if (v105)
    v106 = 0;
  else
    v106 = 5;
  if (v100 <= 0 && v105 != 0)
  {
    if ((*(_BYTE *)(v95 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v95 + 8))
        goto LABEL_267;
    }
    else if (*(_BYTE *)(v95 + 23))
    {
LABEL_267:
      v106 = 1;
      goto LABEL_288;
    }
    if ((v98 & 0x80) != 0)
      v98 = *(_QWORD *)(v97 + 8);
    v108 = v94[8];
    if (v94 == &CoreML::Specification::_WeightParams_default_instance_ || (v98 ? (v109 = v108 == 0) : (v109 = 1), v109))
    {
      if ((v102 & 0x80) != 0)
        v102 = *(_QWORD *)(v101 + 8);
      if (v108)
        v110 = v102 == 0;
      else
        v110 = 1;
      if (v110 || v94 == &CoreML::Specification::_WeightParams_default_instance_)
        v106 = 5;
      else
        v106 = 3;
    }
    else
    {
      v106 = 2;
    }
  }
LABEL_288:
  if (v87 >= v62)
  {
    v113 = v87 - v64;
    v114 = v113 + 1;
    if ((unint64_t)(v113 + 1) >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    if (((char *)v62 - (char *)v64) >> 1 > v114)
      v114 = ((char *)v62 - (char *)v64) >> 1;
    if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL)
      v115 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v115 = v114;
    if (v115)
      v115 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v115);
    else
      v116 = 0;
    v117 = (int *)(v115 + 4 * v113);
    v62 = (int *)(v115 + 4 * v116);
    *v117 = v106;
    v112 = v117 + 1;
    while (v87 != v64)
    {
      v118 = *--v87;
      *--v117 = v118;
    }
    operator delete(v64);
    v64 = v117;
  }
  else
  {
    *v87 = v106;
    v112 = v87 + 1;
  }
  v119 = (uint64_t *)a2[7];
  if (!v119)
    v119 = &CoreML::Specification::_WeightParams_default_instance_;
  v120 = v119[5];
  if (*(char *)(v120 + 23) < 0)
    v121 = *(_QWORD *)(v120 + 8);
  else
    v121 = *(unsigned __int8 *)(v120 + 23);
  v122 = v119[6];
  v123 = *(unsigned __int8 *)(v122 + 23);
  if (*(char *)(v122 + 23) < 0)
    v124 = *(_QWORD *)(v122 + 8);
  else
    v124 = *(unsigned __int8 *)(v122 + 23);
  v125 = *((_DWORD *)v119 + 4);
  v126 = v119[7];
  v127 = *(unsigned __int8 *)(v126 + 23);
  if (*(char *)(v126 + 23) < 0)
    v128 = *(_QWORD *)(v126 + 8);
  else
    v128 = *(unsigned __int8 *)(v126 + 23);
  if (v125 <= 0)
    v129 = 1;
  else
    v129 = 2;
  if (v121)
    v130 = v129;
  else
    v130 = v125 > 0;
  if (v124)
    ++v130;
  if (v128)
    ++v130;
  if (v130 > 1)
  {
    v131 = 4;
    goto LABEL_356;
  }
  if (v130)
    v131 = 0;
  else
    v131 = 5;
  if (v125 <= 0 && v130 != 0)
  {
    if ((*(_BYTE *)(v120 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v120 + 8))
        goto LABEL_335;
    }
    else if (*(_BYTE *)(v120 + 23))
    {
LABEL_335:
      v131 = 1;
      goto LABEL_356;
    }
    if ((v123 & 0x80) != 0)
      v123 = *(_QWORD *)(v122 + 8);
    v133 = v119[8];
    if (v119 == &CoreML::Specification::_WeightParams_default_instance_
      || (v123 ? (v134 = v133 == 0) : (v134 = 1), v134))
    {
      if ((v127 & 0x80) != 0)
        v127 = *(_QWORD *)(v126 + 8);
      if (v133)
        v135 = v127 == 0;
      else
        v135 = 1;
      if (v135 || v119 == &CoreML::Specification::_WeightParams_default_instance_)
        v131 = 5;
      else
        v131 = 3;
    }
    else
    {
      v131 = 2;
    }
  }
LABEL_356:
  if (v112 >= v62)
  {
    v138 = v112 - v64;
    v139 = v138 + 1;
    if ((unint64_t)(v138 + 1) >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    if (((char *)v62 - (char *)v64) >> 1 > v139)
      v139 = ((char *)v62 - (char *)v64) >> 1;
    if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL)
      v140 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v140 = v139;
    if (v140)
      v140 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v140);
    else
      v141 = 0;
    v142 = (int *)(v140 + 4 * v138);
    v62 = (int *)(v140 + 4 * v141);
    *v142 = v131;
    v137 = v142 + 1;
    while (v112 != v64)
    {
      v143 = *--v112;
      *--v142 = v143;
    }
    operator delete(v64);
    v64 = v142;
  }
  else
  {
    *v112 = v131;
    v137 = v112 + 1;
  }
  v144 = (uint64_t *)a2[8];
  if (!v144)
    v144 = &CoreML::Specification::_WeightParams_default_instance_;
  v145 = v144[5];
  if (*(char *)(v145 + 23) < 0)
    v146 = *(_QWORD *)(v145 + 8);
  else
    v146 = *(unsigned __int8 *)(v145 + 23);
  v147 = v144[6];
  v148 = *(unsigned __int8 *)(v147 + 23);
  if (*(char *)(v147 + 23) < 0)
    v149 = *(_QWORD *)(v147 + 8);
  else
    v149 = *(unsigned __int8 *)(v147 + 23);
  v150 = *((_DWORD *)v144 + 4);
  v151 = v144[7];
  v152 = *(unsigned __int8 *)(v151 + 23);
  if (*(char *)(v151 + 23) < 0)
    v153 = *(_QWORD *)(v151 + 8);
  else
    v153 = *(unsigned __int8 *)(v151 + 23);
  if (v150 <= 0)
    v154 = 1;
  else
    v154 = 2;
  if (v146)
    v155 = v154;
  else
    v155 = v150 > 0;
  if (v149)
    ++v155;
  if (v153)
    ++v155;
  if (v155 > 1)
  {
    v156 = 4;
    goto LABEL_424;
  }
  if (v155)
    v156 = 0;
  else
    v156 = 5;
  if (v150 <= 0 && v155 != 0)
  {
    if ((*(_BYTE *)(v145 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v145 + 8))
        goto LABEL_403;
    }
    else if (*(_BYTE *)(v145 + 23))
    {
LABEL_403:
      v156 = 1;
      goto LABEL_424;
    }
    if ((v148 & 0x80) != 0)
      v148 = *(_QWORD *)(v147 + 8);
    v158 = v144[8];
    if (v144 == &CoreML::Specification::_WeightParams_default_instance_
      || (v148 ? (v159 = v158 == 0) : (v159 = 1), v159))
    {
      if ((v152 & 0x80) != 0)
        v152 = *(_QWORD *)(v151 + 8);
      if (v158)
        v160 = v152 == 0;
      else
        v160 = 1;
      if (v160 || v144 == &CoreML::Specification::_WeightParams_default_instance_)
        v156 = 5;
      else
        v156 = 3;
    }
    else
    {
      v156 = 2;
    }
  }
LABEL_424:
  if (v137 >= v62)
  {
    v163 = v137 - v64;
    v164 = v163 + 1;
    if ((unint64_t)(v163 + 1) >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    if (((char *)v62 - (char *)v64) >> 1 > v164)
      v164 = ((char *)v62 - (char *)v64) >> 1;
    if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL)
      v165 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v165 = v164;
    if (v165)
      v165 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v165);
    else
      v166 = 0;
    v167 = (int *)(v165 + 4 * v163);
    v62 = (int *)(v165 + 4 * v166);
    *v167 = v156;
    v162 = v167 + 1;
    if (v137 == v64)
      goto LABEL_438;
    do
    {
      v168 = *--v137;
      *--v167 = v168;
    }
    while (v137 != v64);
    if (v64)
LABEL_438:
      operator delete(v64);
    v64 = v167;
  }
  else
  {
    *v137 = v156;
    v162 = v137 + 1;
  }
  v169 = (uint64_t *)a2[9];
  if (!v169)
    v169 = &CoreML::Specification::_WeightParams_default_instance_;
  v170 = v169[5];
  if (*(char *)(v170 + 23) < 0)
    v171 = *(_QWORD *)(v170 + 8);
  else
    v171 = *(unsigned __int8 *)(v170 + 23);
  v172 = v169[6];
  v173 = *(unsigned __int8 *)(v172 + 23);
  if (*(char *)(v172 + 23) < 0)
    v174 = *(_QWORD *)(v172 + 8);
  else
    v174 = *(unsigned __int8 *)(v172 + 23);
  v175 = *((_DWORD *)v169 + 4);
  v176 = v169[7];
  v177 = *(unsigned __int8 *)(v176 + 23);
  if (*(char *)(v176 + 23) < 0)
    v178 = *(_QWORD *)(v176 + 8);
  else
    v178 = *(unsigned __int8 *)(v176 + 23);
  if (v175 <= 0)
    v179 = 1;
  else
    v179 = 2;
  if (v171)
    v180 = v179;
  else
    v180 = v175 > 0;
  if (v174)
    ++v180;
  if (v178)
    ++v180;
  if (v180 > 1)
  {
    v181 = 4;
    goto LABEL_493;
  }
  if (v180)
    v181 = 0;
  else
    v181 = 5;
  if (v175 <= 0 && v180 != 0)
  {
    if ((*(_BYTE *)(v170 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v170 + 8))
        goto LABEL_472;
    }
    else if (*(_BYTE *)(v170 + 23))
    {
LABEL_472:
      v181 = 1;
      goto LABEL_493;
    }
    if ((v173 & 0x80) != 0)
      v173 = *(_QWORD *)(v172 + 8);
    v183 = v169[8];
    if (v169 == &CoreML::Specification::_WeightParams_default_instance_
      || (v173 ? (v184 = v183 == 0) : (v184 = 1), v184))
    {
      if ((v177 & 0x80) != 0)
        v177 = *(_QWORD *)(v176 + 8);
      if (v183)
        v185 = v177 == 0;
      else
        v185 = 1;
      if (v185 || v169 == &CoreML::Specification::_WeightParams_default_instance_)
        v181 = 5;
      else
        v181 = 3;
    }
    else
    {
      v181 = 2;
    }
  }
LABEL_493:
  if (v162 >= v62)
  {
    v188 = v162 - v64;
    v189 = v188 + 1;
    if ((unint64_t)(v188 + 1) >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    if (((char *)v62 - (char *)v64) >> 1 > v189)
      v189 = ((char *)v62 - (char *)v64) >> 1;
    if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL)
      v190 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v190 = v189;
    if (v190)
      v190 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v190);
    else
      v191 = 0;
    v192 = (int *)(v190 + 4 * v188);
    v62 = (int *)(v190 + 4 * v191);
    *v192 = v181;
    v187 = v192 + 1;
    if (v162 == v64)
      goto LABEL_507;
    do
    {
      v193 = *--v162;
      *--v192 = v193;
    }
    while (v162 != v64);
    if (v64)
LABEL_507:
      operator delete(v64);
    v64 = v192;
  }
  else
  {
    *v162 = v181;
    v187 = v162 + 1;
  }
  if (a3)
  {
    v194 = (uint64_t *)a2[10];
    if (!v194)
      v194 = &CoreML::Specification::_WeightParams_default_instance_;
    v195 = v194[5];
    if (*(char *)(v195 + 23) < 0)
      v196 = *(_QWORD *)(v195 + 8);
    else
      v196 = *(unsigned __int8 *)(v195 + 23);
    v197 = v194[6];
    v198 = *(unsigned __int8 *)(v197 + 23);
    if (*(char *)(v197 + 23) < 0)
      v199 = *(_QWORD *)(v197 + 8);
    else
      v199 = *(unsigned __int8 *)(v197 + 23);
    v200 = *((_DWORD *)v194 + 4);
    v201 = v194[7];
    v202 = *(unsigned __int8 *)(v201 + 23);
    if (*(char *)(v201 + 23) < 0)
      v203 = *(_QWORD *)(v201 + 8);
    else
      v203 = *(unsigned __int8 *)(v201 + 23);
    if (v200 <= 0)
      v204 = 1;
    else
      v204 = 2;
    if (v196)
      v205 = v204;
    else
      v205 = v200 > 0;
    if (v199)
      ++v205;
    if (v203)
      ++v205;
    if (v205 > 1)
    {
      v206 = 4;
      goto LABEL_559;
    }
    if (v205)
      v206 = 0;
    else
      v206 = 5;
    if (v200 <= 0 && v205)
    {
      if ((*(_BYTE *)(v195 + 23) & 0x80) != 0)
      {
        if (*(_QWORD *)(v195 + 8))
          goto LABEL_540;
      }
      else if (*(_BYTE *)(v195 + 23))
      {
LABEL_540:
        v206 = 1;
        goto LABEL_559;
      }
      if ((v198 & 0x80) != 0)
        v198 = *(_QWORD *)(v197 + 8);
      v207 = v194[8];
      if (v194 != &CoreML::Specification::_WeightParams_default_instance_ && v198 && v207)
      {
        v206 = 2;
      }
      else
      {
        if ((v202 & 0x80) != 0)
          v202 = *(_QWORD *)(v201 + 8);
        if (v207)
          v208 = v202 == 0;
        else
          v208 = 1;
        if (v208 || v194 == &CoreML::Specification::_WeightParams_default_instance_)
          v206 = 5;
        else
          v206 = 3;
      }
    }
LABEL_559:
    if (v187 >= v62)
    {
      v211 = v187 - v64;
      v212 = v211 + 1;
      if ((unint64_t)(v211 + 1) >> 62)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      if (((char *)v62 - (char *)v64) >> 1 > v212)
        v212 = ((char *)v62 - (char *)v64) >> 1;
      if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL)
        v213 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v213 = v212;
      if (v213)
        v213 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v213);
      else
        v214 = 0;
      v215 = (int *)(v213 + 4 * v211);
      v62 = (int *)(v213 + 4 * v214);
      *v215 = v206;
      v210 = v215 + 1;
      if (v187 == v64)
        goto LABEL_573;
      do
      {
        v216 = *--v187;
        *--v215 = v216;
      }
      while (v187 != v64);
      if (v64)
LABEL_573:
        operator delete(v64);
      v64 = v215;
    }
    else
    {
      *v187 = v206;
      v210 = v187 + 1;
    }
    v217 = (uint64_t *)a2[11];
    if (!v217)
      v217 = &CoreML::Specification::_WeightParams_default_instance_;
    v218 = v217[5];
    if (*(char *)(v218 + 23) < 0)
      v219 = *(_QWORD *)(v218 + 8);
    else
      v219 = *(unsigned __int8 *)(v218 + 23);
    v220 = v217[6];
    v221 = *(unsigned __int8 *)(v220 + 23);
    if (*(char *)(v220 + 23) < 0)
      v222 = *(_QWORD *)(v220 + 8);
    else
      v222 = *(unsigned __int8 *)(v220 + 23);
    v223 = *((_DWORD *)v217 + 4);
    v224 = v217[7];
    v225 = *(unsigned __int8 *)(v224 + 23);
    if (*(char *)(v224 + 23) < 0)
      v226 = *(_QWORD *)(v224 + 8);
    else
      v226 = *(unsigned __int8 *)(v224 + 23);
    if (v223 <= 0)
      v227 = 1;
    else
      v227 = 2;
    if (v219)
      v228 = v227;
    else
      v228 = v223 > 0;
    if (v222)
      ++v228;
    if (v226)
      ++v228;
    if (v228 > 1)
    {
      v229 = 4;
      goto LABEL_628;
    }
    if (v228)
      v229 = 0;
    else
      v229 = 5;
    if (v223 <= 0 && v228 != 0)
    {
      if ((*(_BYTE *)(v218 + 23) & 0x80) != 0)
      {
        if (*(_QWORD *)(v218 + 8))
          goto LABEL_607;
      }
      else if (*(_BYTE *)(v218 + 23))
      {
LABEL_607:
        v229 = 1;
        goto LABEL_628;
      }
      if ((v221 & 0x80) != 0)
        v221 = *(_QWORD *)(v220 + 8);
      v231 = v217[8];
      if (v217 == &CoreML::Specification::_WeightParams_default_instance_
        || (v221 ? (v232 = v231 == 0) : (v232 = 1), v232))
      {
        if ((v225 & 0x80) != 0)
          v225 = *(_QWORD *)(v224 + 8);
        if (v231)
          v233 = v225 == 0;
        else
          v233 = 1;
        if (v233 || v217 == &CoreML::Specification::_WeightParams_default_instance_)
          v229 = 5;
        else
          v229 = 3;
      }
      else
      {
        v229 = 2;
      }
    }
LABEL_628:
    if (v210 >= v62)
    {
      v236 = v210 - v64;
      v237 = v236 + 1;
      if ((unint64_t)(v236 + 1) >> 62)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      if (((char *)v62 - (char *)v64) >> 1 > v237)
        v237 = ((char *)v62 - (char *)v64) >> 1;
      if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL)
        v238 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v238 = v237;
      if (v238)
        v238 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v238);
      else
        v239 = 0;
      v240 = (int *)(v238 + 4 * v236);
      v62 = (int *)(v238 + 4 * v239);
      *v240 = v229;
      v235 = v240 + 1;
      if (v210 == v64)
        goto LABEL_642;
      do
      {
        v241 = *--v210;
        *--v240 = v241;
      }
      while (v210 != v64);
      if (v64)
LABEL_642:
        operator delete(v64);
      v64 = v240;
    }
    else
    {
      *v210 = v229;
      v235 = v210 + 1;
    }
    v242 = (uint64_t *)a2[12];
    if (!v242)
      v242 = &CoreML::Specification::_WeightParams_default_instance_;
    v243 = v242[5];
    if (*(char *)(v243 + 23) < 0)
      v244 = *(_QWORD *)(v243 + 8);
    else
      v244 = *(unsigned __int8 *)(v243 + 23);
    v245 = v242[6];
    v246 = *(unsigned __int8 *)(v245 + 23);
    if (*(char *)(v245 + 23) < 0)
      v247 = *(_QWORD *)(v245 + 8);
    else
      v247 = *(unsigned __int8 *)(v245 + 23);
    v248 = *((_DWORD *)v242 + 4);
    v249 = v242[7];
    v250 = *(unsigned __int8 *)(v249 + 23);
    if (*(char *)(v249 + 23) < 0)
      v251 = *(_QWORD *)(v249 + 8);
    else
      v251 = *(unsigned __int8 *)(v249 + 23);
    if (v248 <= 0)
      v252 = 1;
    else
      v252 = 2;
    if (v244)
      v253 = v252;
    else
      v253 = v248 > 0;
    if (v247)
      ++v253;
    if (v251)
      ++v253;
    if (v253 > 1)
    {
      v254 = 4;
      goto LABEL_697;
    }
    if (v253)
      v254 = 0;
    else
      v254 = 5;
    if (v248 <= 0 && v253 != 0)
    {
      if ((*(_BYTE *)(v243 + 23) & 0x80) != 0)
      {
        if (*(_QWORD *)(v243 + 8))
          goto LABEL_676;
      }
      else if (*(_BYTE *)(v243 + 23))
      {
LABEL_676:
        v254 = 1;
        goto LABEL_697;
      }
      if ((v246 & 0x80) != 0)
        v246 = *(_QWORD *)(v245 + 8);
      v256 = v242[8];
      if (v242 == &CoreML::Specification::_WeightParams_default_instance_
        || (v246 ? (v257 = v256 == 0) : (v257 = 1), v257))
      {
        if ((v250 & 0x80) != 0)
          v250 = *(_QWORD *)(v249 + 8);
        if (v256)
          v258 = v250 == 0;
        else
          v258 = 1;
        if (v258 || v242 == &CoreML::Specification::_WeightParams_default_instance_)
          v254 = 5;
        else
          v254 = 3;
      }
      else
      {
        v254 = 2;
      }
    }
LABEL_697:
    if (v235 >= v62)
    {
      v261 = v235 - v64;
      v262 = v261 + 1;
      if ((unint64_t)(v261 + 1) >> 62)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      if (((char *)v62 - (char *)v64) >> 1 > v262)
        v262 = ((char *)v62 - (char *)v64) >> 1;
      if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL)
        v263 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v263 = v262;
      if (v263)
        v263 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v263);
      else
        v264 = 0;
      v265 = (int *)(v263 + 4 * v261);
      v62 = (int *)(v263 + 4 * v264);
      *v265 = v254;
      v260 = v265 + 1;
      if (v235 == v64)
        goto LABEL_711;
      do
      {
        v266 = *--v235;
        *--v265 = v266;
      }
      while (v235 != v64);
      if (v64)
LABEL_711:
        operator delete(v64);
      v64 = v265;
    }
    else
    {
      *v235 = v254;
      v260 = v235 + 1;
    }
    v267 = (uint64_t *)a2[13];
    if (!v267)
      v267 = &CoreML::Specification::_WeightParams_default_instance_;
    v268 = v267[5];
    if (*(char *)(v268 + 23) < 0)
      v269 = *(_QWORD *)(v268 + 8);
    else
      v269 = *(unsigned __int8 *)(v268 + 23);
    v270 = v267[6];
    v271 = *(unsigned __int8 *)(v270 + 23);
    if (*(char *)(v270 + 23) < 0)
      v272 = *(_QWORD *)(v270 + 8);
    else
      v272 = *(unsigned __int8 *)(v270 + 23);
    v273 = *((_DWORD *)v267 + 4);
    v274 = v267[7];
    v275 = *(unsigned __int8 *)(v274 + 23);
    if (*(char *)(v274 + 23) < 0)
      v276 = *(_QWORD *)(v274 + 8);
    else
      v276 = *(unsigned __int8 *)(v274 + 23);
    if (v273 <= 0)
      v277 = 1;
    else
      v277 = 2;
    if (v269)
      v278 = v277;
    else
      v278 = v273 > 0;
    if (v272)
      ++v278;
    if (v276)
      ++v278;
    if (v278 > 1)
    {
      v279 = 4;
      goto LABEL_766;
    }
    if (v278)
      v279 = 0;
    else
      v279 = 5;
    if (v273 > 0 || v278 == 0)
    {
LABEL_766:
      if (v260 >= v62)
      {
        v285 = v260 - v64;
        v286 = v285 + 1;
        if ((unint64_t)(v285 + 1) >> 62)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        if (((char *)v62 - (char *)v64) >> 1 > v286)
          v286 = ((char *)v62 - (char *)v64) >> 1;
        if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL)
          v287 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v287 = v286;
        if (v287)
          v287 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v287);
        else
          v288 = 0;
        v289 = (int *)(v287 + 4 * v285);
        v62 = (int *)(v287 + 4 * v288);
        *v289 = v279;
        v187 = v289 + 1;
        if (v260 == v64)
          goto LABEL_780;
        do
        {
          v290 = *--v260;
          *--v289 = v290;
        }
        while (v260 != v64);
        if (v64)
LABEL_780:
          operator delete(v64);
        v64 = v289;
      }
      else
      {
        *v260 = v279;
        v187 = v260 + 1;
      }
      goto LABEL_782;
    }
    if ((*(_BYTE *)(v268 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v268 + 8))
        goto LABEL_745;
    }
    else if (*(_BYTE *)(v268 + 23))
    {
LABEL_745:
      v279 = 1;
      goto LABEL_766;
    }
    if ((v271 & 0x80) != 0)
      v271 = *(_QWORD *)(v270 + 8);
    v281 = v267[8];
    if (v267 == &CoreML::Specification::_WeightParams_default_instance_
      || (v271 ? (v282 = v281 == 0) : (v282 = 1), v282))
    {
      if ((v275 & 0x80) != 0)
        v275 = *(_QWORD *)(v274 + 8);
      if (v281)
        v283 = v275 == 0;
      else
        v283 = 1;
      if (v283 || v267 == &CoreML::Specification::_WeightParams_default_instance_)
        v279 = 5;
      else
        v279 = 3;
    }
    else
    {
      v279 = 2;
    }
    goto LABEL_766;
  }
LABEL_782:
  if (!v19)
    goto LABEL_985;
  v291 = (uint64_t *)a2[14];
  if (!v291)
    v291 = &CoreML::Specification::_WeightParams_default_instance_;
  v292 = v291[5];
  if (*(char *)(v292 + 23) < 0)
    v293 = *(_QWORD *)(v292 + 8);
  else
    v293 = *(unsigned __int8 *)(v292 + 23);
  v294 = v291[6];
  v295 = *(unsigned __int8 *)(v294 + 23);
  if (*(char *)(v294 + 23) < 0)
    v296 = *(_QWORD *)(v294 + 8);
  else
    v296 = *(unsigned __int8 *)(v294 + 23);
  v297 = *((_DWORD *)v291 + 4);
  v298 = v291[7];
  v299 = *(unsigned __int8 *)(v298 + 23);
  if (*(char *)(v298 + 23) < 0)
    v300 = *(_QWORD *)(v298 + 8);
  else
    v300 = *(unsigned __int8 *)(v298 + 23);
  if (v297 <= 0)
    v301 = 1;
  else
    v301 = 2;
  if (v293)
    v302 = v301;
  else
    v302 = v297 > 0;
  if (v296)
    ++v302;
  if (v300)
    ++v302;
  if (v302 > 1)
  {
    v303 = 4;
    goto LABEL_832;
  }
  if (v302)
    v303 = 0;
  else
    v303 = 5;
  if (v297 <= 0 && v302)
  {
    if ((*(_BYTE *)(v292 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v292 + 8))
        goto LABEL_813;
    }
    else if (*(_BYTE *)(v292 + 23))
    {
LABEL_813:
      v303 = 1;
      goto LABEL_832;
    }
    if ((v295 & 0x80) != 0)
      v295 = *(_QWORD *)(v294 + 8);
    v304 = v291[8];
    if (v291 != &CoreML::Specification::_WeightParams_default_instance_ && v295 && v304)
    {
      v303 = 2;
    }
    else
    {
      if ((v299 & 0x80) != 0)
        v299 = *(_QWORD *)(v298 + 8);
      if (v304)
        v305 = v299 == 0;
      else
        v305 = 1;
      if (v305 || v291 == &CoreML::Specification::_WeightParams_default_instance_)
        v303 = 5;
      else
        v303 = 3;
    }
  }
LABEL_832:
  if (v187 >= v62)
  {
    v308 = v187 - v64;
    v309 = v308 + 1;
    if ((unint64_t)(v308 + 1) >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    if (((char *)v62 - (char *)v64) >> 1 > v309)
      v309 = ((char *)v62 - (char *)v64) >> 1;
    if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL)
      v310 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v310 = v309;
    if (v310)
      v310 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v310);
    else
      v311 = 0;
    v312 = (int *)(v310 + 4 * v308);
    v62 = (int *)(v310 + 4 * v311);
    *v312 = v303;
    v307 = v312 + 1;
    if (v187 == v64)
      goto LABEL_846;
    do
    {
      v313 = *--v187;
      *--v312 = v313;
    }
    while (v187 != v64);
    if (v64)
LABEL_846:
      operator delete(v64);
    v64 = v312;
  }
  else
  {
    *v187 = v303;
    v307 = v187 + 1;
  }
  v314 = (uint64_t *)a2[15];
  if (!v314)
    v314 = &CoreML::Specification::_WeightParams_default_instance_;
  v315 = v314[5];
  if (*(char *)(v315 + 23) < 0)
    v316 = *(_QWORD *)(v315 + 8);
  else
    v316 = *(unsigned __int8 *)(v315 + 23);
  v317 = v314[6];
  v318 = *(unsigned __int8 *)(v317 + 23);
  if (*(char *)(v317 + 23) < 0)
    v319 = *(_QWORD *)(v317 + 8);
  else
    v319 = *(unsigned __int8 *)(v317 + 23);
  v320 = *((_DWORD *)v314 + 4);
  v321 = v314[7];
  v322 = *(unsigned __int8 *)(v321 + 23);
  if (*(char *)(v321 + 23) < 0)
    v323 = *(_QWORD *)(v321 + 8);
  else
    v323 = *(unsigned __int8 *)(v321 + 23);
  if (v320 <= 0)
    v324 = 1;
  else
    v324 = 2;
  if (v316)
    v325 = v324;
  else
    v325 = v320 > 0;
  if (v319)
    ++v325;
  if (v323)
    ++v325;
  if (v325 > 1)
  {
    v326 = 4;
    goto LABEL_901;
  }
  if (v325)
    v326 = 0;
  else
    v326 = 5;
  if (v320 <= 0 && v325 != 0)
  {
    if ((*(_BYTE *)(v315 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v315 + 8))
        goto LABEL_880;
    }
    else if (*(_BYTE *)(v315 + 23))
    {
LABEL_880:
      v326 = 1;
      goto LABEL_901;
    }
    if ((v318 & 0x80) != 0)
      v318 = *(_QWORD *)(v317 + 8);
    v328 = v314[8];
    if (v314 == &CoreML::Specification::_WeightParams_default_instance_
      || (v318 ? (v329 = v328 == 0) : (v329 = 1), v329))
    {
      if ((v322 & 0x80) != 0)
        v322 = *(_QWORD *)(v321 + 8);
      if (v328)
        v330 = v322 == 0;
      else
        v330 = 1;
      if (v330 || v314 == &CoreML::Specification::_WeightParams_default_instance_)
        v326 = 5;
      else
        v326 = 3;
    }
    else
    {
      v326 = 2;
    }
  }
LABEL_901:
  if (v307 >= v62)
  {
    v333 = v307 - v64;
    v334 = v333 + 1;
    if ((unint64_t)(v333 + 1) >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    if (((char *)v62 - (char *)v64) >> 1 > v334)
      v334 = ((char *)v62 - (char *)v64) >> 1;
    if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL)
      v335 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v335 = v334;
    if (v335)
      v335 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v335);
    else
      v336 = 0;
    v337 = (int *)(v335 + 4 * v333);
    v62 = (int *)(v335 + 4 * v336);
    *v337 = v326;
    v332 = v337 + 1;
    if (v307 == v64)
      goto LABEL_915;
    do
    {
      v338 = *--v307;
      *--v337 = v338;
    }
    while (v307 != v64);
    if (v64)
LABEL_915:
      operator delete(v64);
    v64 = v337;
  }
  else
  {
    *v307 = v326;
    v332 = v307 + 1;
  }
  v339 = (uint64_t *)a2[16];
  if (!v339)
    v339 = &CoreML::Specification::_WeightParams_default_instance_;
  v340 = v339[5];
  if (*(char *)(v340 + 23) < 0)
    v341 = *(_QWORD *)(v340 + 8);
  else
    v341 = *(unsigned __int8 *)(v340 + 23);
  v342 = v339[6];
  v343 = *(unsigned __int8 *)(v342 + 23);
  if (*(char *)(v342 + 23) < 0)
    v344 = *(_QWORD *)(v342 + 8);
  else
    v344 = *(unsigned __int8 *)(v342 + 23);
  v345 = *((_DWORD *)v339 + 4);
  v346 = v339[7];
  v347 = *(unsigned __int8 *)(v346 + 23);
  if (*(char *)(v346 + 23) < 0)
    v348 = *(_QWORD *)(v346 + 8);
  else
    v348 = *(unsigned __int8 *)(v346 + 23);
  if (v345 <= 0)
    v349 = 1;
  else
    v349 = 2;
  if (v341)
    v350 = v349;
  else
    v350 = v345 > 0;
  if (v344)
    ++v350;
  if (v348)
    ++v350;
  if (v350 > 1)
  {
    v351 = 4;
    goto LABEL_970;
  }
  if (v350)
    v351 = 0;
  else
    v351 = 5;
  if (v345 <= 0 && v350 != 0)
  {
    if ((*(_BYTE *)(v340 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v340 + 8))
        goto LABEL_949;
    }
    else if (*(_BYTE *)(v340 + 23))
    {
LABEL_949:
      v351 = 1;
      goto LABEL_970;
    }
    if ((v343 & 0x80) != 0)
      v343 = *(_QWORD *)(v342 + 8);
    v353 = v339[8];
    if (v339 == &CoreML::Specification::_WeightParams_default_instance_
      || (v343 ? (v354 = v353 == 0) : (v354 = 1), v354))
    {
      if ((v347 & 0x80) != 0)
        v347 = *(_QWORD *)(v346 + 8);
      if (v353)
        v355 = v347 == 0;
      else
        v355 = 1;
      if (v355 || v339 == &CoreML::Specification::_WeightParams_default_instance_)
        v351 = 5;
      else
        v351 = 3;
    }
    else
    {
      v351 = 2;
    }
  }
LABEL_970:
  if (v332 >= v62)
  {
    v357 = v332 - v64;
    v358 = v357 + 1;
    if ((unint64_t)(v357 + 1) >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    if (((char *)v62 - (char *)v64) >> 1 > v358)
      v358 = ((char *)v62 - (char *)v64) >> 1;
    if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL)
      v359 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v359 = v358;
    if (v359)
      v359 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v359);
    v360 = (int *)(v359 + 4 * v357);
    *v360 = v351;
    v187 = v360 + 1;
    if (v332 == v64)
      goto LABEL_983;
    do
    {
      v361 = *--v332;
      *--v360 = v361;
    }
    while (v332 != v64);
    if (v64)
LABEL_983:
      operator delete(v64);
    v64 = v360;
  }
  else
  {
    *v332 = v351;
    v187 = v332 + 1;
  }
LABEL_985:
  if (v64 == v187)
  {
LABEL_995:
    CoreML::Result::Result(a1);
  }
  else
  {
    v362 = 0;
    v363 = 0;
    v364 = v64;
    while (1)
    {
      v365 = *v364 ? v362 : v362 + 1;
      if (*v364 == 1)
        ++v363;
      else
        v362 = v365;
      if (v362 * v363 >= 1)
        break;
      if (++v364 == v187)
        goto LABEL_995;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "LSTM weight parameters have inconsistent field value types. Types should match and should be either half or full precision");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
    if (v368 < 0)
      operator delete(__p);
  }
  if (v64)
    operator delete(v64);
}

void sub_19C9B733C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  if (v15)
    operator delete(v15);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateBiDirectionalLSTMLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *inited;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  const CoreML::Specification::ActivationParams **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  const CoreML::Specification::ActivationParams **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t *v20;
  const CoreML::Specification::LSTMParams *v21;
  const CoreML::Specification::LSTMParams *v22;
  uint64_t *v23;
  const CoreML::Specification::BiDirectionalLSTMLayerParams *v24;
  const CoreML::Specification::LSTMParams *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  std::string *v93;
  void *v94;
  char v95;
  std::string v96;
  void *v97;
  __int128 v98;
  void (**v99)(CoreML::Specification::LSTMParams *__hidden);
  uint64_t v100[3];
  void *__p[2];
  char v102;
  int v103;
  int v104;
  uint64_t v105;
  const CoreML::Specification::LSTMParams *v106;
  uint64_t v107;
  unint64_t v108;
  void (**v109)(CoreML::Specification::LSTMParams *__hidden);
  uint64_t v110;
  char v111;
  char v112;
  void *v113[2];
  char v114;
  _BYTE v115[15];
  char v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 5);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
    return;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 5, 5);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
    return;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  if (*(_BYTE *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v113, "BiDirectionalLSTM");
    v7 = (char *)a2 + 32;
    CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)v113, (uint64_t)v7);
    if (v114 < 0)
      operator delete(v113[0]);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
      return;
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    std::string::basic_string[abi:ne180100]<0>(__p, "BiDirectionalLSTM");
    CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)__p, 5, 5, (uint64_t)v7);
    if (v102 < 0)
      operator delete(__p[0]);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
      return;
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
  }
  if (*(_DWORD *)(a3 + 140) == 430)
  {
    v8 = *(uint64_t **)(a3 + 128);
  }
  else
  {
    inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
    v8 = &CoreML::Specification::_BiDirectionalLSTMLayerParams_default_instance_;
  }
  v9 = v8[4];
  if (v9)
    v10 = (const CoreML::Specification::ActivationParams **)(v9 + 8);
  else
    v10 = 0;
  v11 = *((int *)v8 + 6);
  if (!(_DWORD)v11)
  {
LABEL_31:
    if (*(_DWORD *)(a3 + 140) == 430)
    {
      v13 = *(uint64_t **)(a3 + 128);
    }
    else
    {
      inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
      v13 = &CoreML::Specification::_BiDirectionalLSTMLayerParams_default_instance_;
    }
    v14 = v13[7];
    if (v14)
      v15 = (const CoreML::Specification::ActivationParams **)(v14 + 8);
    else
      v15 = 0;
    v16 = *((int *)v13 + 12);
    if ((_DWORD)v16)
    {
      v17 = 8 * v16;
      do
      {
        inited = CoreML::validateRecurrentActivationParams((CoreML *)this, *v15);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        ++v15;
        v17 -= 8;
      }
      while (v17);
    }
    if (*(_DWORD *)(a3 + 140) == 420)
    {
      v18 = *(uint64_t **)(a3 + 128);
      if (v18[6])
        v19 = (uint64_t *)v18[6];
      else
        v19 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
    }
    else
    {
      v20 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
      if (qword_1ED005FB0)
        v19 = (uint64_t *)qword_1ED005FB0;
      else
        v19 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      if (*(_DWORD *)(a3 + 140) == 420)
      {
        v18 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v20);
        v18 = &CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_;
      }
    }
    v21 = (const CoreML::Specification::LSTMParams *)v18[5];
    if (v21)
      v22 = v21;
    else
      v22 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
    CoreML::Specification::LSTMParams::LSTMParams((CoreML::Specification::LSTMParams *)&v109, v22);
    CoreML::validateLSTMWeightParams((CoreML::Result *)this, v19, v111, v112);
    v109 = &off_1E3D4CC40;
    v23 = google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v110);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
      return;
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    if (*(_DWORD *)(a3 + 140) == 430)
    {
      v24 = *(const CoreML::Specification::BiDirectionalLSTMLayerParams **)(a3 + 128);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v23);
      v24 = (const CoreML::Specification::BiDirectionalLSTMLayerParams *)&CoreML::Specification::_BiDirectionalLSTMLayerParams_default_instance_;
    }
    CoreML::Specification::BiDirectionalLSTMLayerParams::BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)__p, v24);
    if (v106)
      v25 = v106;
    else
      v25 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
    CoreML::Specification::LSTMParams::LSTMParams((CoreML::Specification::LSTMParams *)&v99, v25);
    v97 = 0;
    v98 = 0uLL;
    if (v103 == 3)
    {
      if (v104 == 3)
      {
        v27 = v107;
        v26 = v108;
        v28 = *(_QWORD **)(v105 + 8);
        v29 = *(_QWORD **)(v105 + 16);
        if (v28[2])
          v30 = (uint64_t *)v28[2];
        else
          v30 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
        v31 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v115, "forward input gate weight matrix");
        v32 = v27 * v26;
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v30, v32, v26, (const void **)&v96.__r_.__value_.__l.__data_, v31, (uint64_t)v115);
        if (v116 < 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_380;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (v28[3])
          v33 = (uint64_t *)v28[3];
        else
          v33 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
        v34 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v115, "forward forget gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v33, v32, v26, (const void **)&v96.__r_.__value_.__l.__data_, v34, (uint64_t)v115);
        if (v116 < 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_380;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (v28[4])
          v35 = (uint64_t *)v28[4];
        else
          v35 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
        v36 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v115, "forward block input gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v35, v32, v26, (const void **)&v96.__r_.__value_.__l.__data_, v36, (uint64_t)v115);
        if (v116 < 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_380;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (v28[5])
          v37 = (uint64_t *)v28[5];
        else
          v37 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
        v38 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v115, "forward output gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v37, v32, v26, (const void **)&v96.__r_.__value_.__l.__data_, v38, (uint64_t)v115);
        if (v116 < 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_380;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (v28[6])
          v39 = (uint64_t *)v28[6];
        else
          v39 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
        v40 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v115, "forward input gate recursion matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v39, v26 * v26, v26, (const void **)&v96.__r_.__value_.__l.__data_, v40, (uint64_t)v115);
        if (v116 < 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_380;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (v28[7])
          v41 = (uint64_t *)v28[7];
        else
          v41 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
        v42 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v115, "forward forget gate recursion matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v41, v26 * v26, v26, (const void **)&v96.__r_.__value_.__l.__data_, v42, (uint64_t)v115);
        if (v116 < 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_380;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (v28[8])
          v43 = (uint64_t *)v28[8];
        else
          v43 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
        v44 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v115, "forward block input gate recursion matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v43, v26 * v26, v26, (const void **)&v96.__r_.__value_.__l.__data_, v44, (uint64_t)v115);
        if (v116 < 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_380;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (v28[9])
          v45 = (uint64_t *)v28[9];
        else
          v45 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
        v46 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v115, "forward output gate recursion matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v45, v26 * v26, v26, (const void **)&v96.__r_.__value_.__l.__data_, v46, (uint64_t)v115);
        if (v116 < 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_380;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (v29[2])
          v47 = (uint64_t *)v29[2];
        else
          v47 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
        v48 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v115, "backward input gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v47, v32, v26, (const void **)&v96.__r_.__value_.__l.__data_, v48, (uint64_t)v115);
        if (v116 < 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_380;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (v29[3])
          v49 = (uint64_t *)v29[3];
        else
          v49 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
        v50 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v115, "backward forget gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v49, v32, v26, (const void **)&v96.__r_.__value_.__l.__data_, v50, (uint64_t)v115);
        if (v116 < 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_380;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (v29[4])
          v51 = (uint64_t *)v29[4];
        else
          v51 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
        v52 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v115, "backward block input gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v51, v32, v26, (const void **)&v96.__r_.__value_.__l.__data_, v52, (uint64_t)v115);
        if (v116 < 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_380;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (v29[5])
          v53 = (uint64_t *)v29[5];
        else
          v53 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
        v54 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v115, "backward output gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v53, v32, v26, (const void **)&v96.__r_.__value_.__l.__data_, v54, (uint64_t)v115);
        if (v116 < 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_380;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (v29[6])
          v55 = (uint64_t *)v29[6];
        else
          v55 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
        v56 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v115, "backward input gate recursion matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v55, v26 * v26, v26, (const void **)&v96.__r_.__value_.__l.__data_, v56, (uint64_t)v115);
        if (v116 < 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_380;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (v29[7])
          v57 = (uint64_t *)v29[7];
        else
          v57 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
        v58 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v115, "backward forget gate recursion matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v57, v26 * v26, v26, (const void **)&v96.__r_.__value_.__l.__data_, v58, (uint64_t)v115);
        if (v116 < 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_380;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (v29[8])
          v59 = (uint64_t *)v29[8];
        else
          v59 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
        v60 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v115, "backward block input gate recursion matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v59, v26 * v26, v26, (const void **)&v96.__r_.__value_.__l.__data_, v60, (uint64_t)v115);
        if (v116 < 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_380;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (v29[9])
          v61 = (uint64_t *)v29[9];
        else
          v61 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
        v62 = *(_QWORD *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v115, "backward output gate recursion matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v61, v26 * v26, v26, (const void **)&v96.__r_.__value_.__l.__data_, v62, (uint64_t)v115);
        if (v116 < 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_380;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        v63 = &CoreML::Specification::_LSTMParams_default_instance_;
        if (v106)
          v63 = (uint64_t *)v106;
        if (*((_BYTE *)v63 + 21))
        {
          if (v28[10])
            v64 = (uint64_t *)v28[10];
          else
            v64 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
          v65 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v115, "forward input gate bias vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v64, v26, 1, (const void **)&v96.__r_.__value_.__l.__data_, v65, (uint64_t)v115);
          if (v116 < 0)
            operator delete(*(void **)v115);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            goto LABEL_380;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          if (v28[11])
            v66 = (uint64_t *)v28[11];
          else
            v66 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
          v67 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v115, "forward forget gate bias vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v66, v26, 1, (const void **)&v96.__r_.__value_.__l.__data_, v67, (uint64_t)v115);
          if (v116 < 0)
            operator delete(*(void **)v115);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            goto LABEL_380;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          if (v28[12])
            v68 = (uint64_t *)v28[12];
          else
            v68 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
          v69 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v115, "forward block input bias vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v68, v26, 1, (const void **)&v96.__r_.__value_.__l.__data_, v69, (uint64_t)v115);
          if (v116 < 0)
            operator delete(*(void **)v115);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            goto LABEL_380;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          if (v28[13])
            v70 = (uint64_t *)v28[13];
          else
            v70 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
          v71 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v115, "forward output gate bias vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v70, v26, 1, (const void **)&v96.__r_.__value_.__l.__data_, v71, (uint64_t)v115);
          if (v116 < 0)
            operator delete(*(void **)v115);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            goto LABEL_380;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          if (v29[10])
            v72 = (uint64_t *)v29[10];
          else
            v72 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
          v73 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v115, "backward input gate bias vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v72, v26, 1, (const void **)&v96.__r_.__value_.__l.__data_, v73, (uint64_t)v115);
          if (v116 < 0)
            operator delete(*(void **)v115);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            goto LABEL_380;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          if (v29[11])
            v74 = (uint64_t *)v29[11];
          else
            v74 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
          v75 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v115, "backward forget gate bias vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v74, v26, 1, (const void **)&v96.__r_.__value_.__l.__data_, v75, (uint64_t)v115);
          if (v116 < 0)
            operator delete(*(void **)v115);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            goto LABEL_380;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          if (v29[12])
            v76 = (uint64_t *)v29[12];
          else
            v76 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
          v77 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v115, "backward block input bias vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v76, v26, 1, (const void **)&v96.__r_.__value_.__l.__data_, v77, (uint64_t)v115);
          if (v116 < 0)
            operator delete(*(void **)v115);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            goto LABEL_380;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          if (v29[13])
            v78 = (uint64_t *)v29[13];
          else
            v78 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
          v79 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v115, "backward output gate bias vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v78, v26, 1, (const void **)&v96.__r_.__value_.__l.__data_, v79, (uint64_t)v115);
          if (v116 < 0)
            operator delete(*(void **)v115);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            goto LABEL_380;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
        }
        v80 = &CoreML::Specification::_LSTMParams_default_instance_;
        if (v106)
          v80 = (uint64_t *)v106;
        if (*((_BYTE *)v80 + 23))
        {
          if (v28[14])
            v81 = (uint64_t *)v28[14];
          else
            v81 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
          v82 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v115, "forward input gate peephole vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v81, v26, 1, (const void **)&v96.__r_.__value_.__l.__data_, v82, (uint64_t)v115);
          if (v116 < 0)
            operator delete(*(void **)v115);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            goto LABEL_380;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          if (v28[15])
            v83 = (uint64_t *)v28[15];
          else
            v83 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
          v84 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v115, "forward forget gate peephole vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v83, v26, 1, (const void **)&v96.__r_.__value_.__l.__data_, v84, (uint64_t)v115);
          if (v116 < 0)
            operator delete(*(void **)v115);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            goto LABEL_380;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          if (v28[16])
            v85 = (uint64_t *)v28[16];
          else
            v85 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
          v86 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v115, "forward output gate peephole vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v85, v26, 1, (const void **)&v96.__r_.__value_.__l.__data_, v86, (uint64_t)v115);
          if (v116 < 0)
            operator delete(*(void **)v115);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            goto LABEL_380;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          if (v29[14])
            v87 = (uint64_t *)v29[14];
          else
            v87 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
          v88 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v115, "backward input gate peephole vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v87, v26, 1, (const void **)&v96.__r_.__value_.__l.__data_, v88, (uint64_t)v115);
          if (v116 < 0)
            operator delete(*(void **)v115);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            goto LABEL_380;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          if (v29[15])
            v89 = (uint64_t *)v29[15];
          else
            v89 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
          v90 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v115, "backward forget gate peephole vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v89, v26, 1, (const void **)&v96.__r_.__value_.__l.__data_, v90, (uint64_t)v115);
          if (v116 < 0)
            operator delete(*(void **)v115);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            goto LABEL_380;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          if (v29[16])
            v91 = (uint64_t *)v29[16];
          else
            v91 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(&v96, "Bidirectional LSTM");
          v92 = *(_QWORD *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v115, "backward output gate peephole vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v91, v26, 1, (const void **)&v96.__r_.__value_.__l.__data_, v92, (uint64_t)v115);
          if (v116 < 0)
            operator delete(*(void **)v115);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            goto LABEL_380;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
        }
        CoreML::Result::Result((CoreML::Result *)this);
LABEL_380:
        v99 = &off_1E3D4CC40;
        google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v100);
        CoreML::Specification::BiDirectionalLSTMLayerParams::~BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)__p);
        return;
      }
      std::operator+<char>();
      v93 = std::string::append(&v96, " backward lstm must provide 3 activations");
    }
    else
    {
      std::operator+<char>();
      v93 = std::string::append(&v96, " forward lstm must provide 3 activations");
    }
    v94 = (void *)v93->__r_.__value_.__r.__words[0];
    *(_QWORD *)v115 = v93->__r_.__value_.__l.__size_;
    *(_QWORD *)&v115[7] = *(std::string::size_type *)((char *)&v93->__r_.__value_.__r.__words[1] + 7);
    v95 = HIBYTE(v93->__r_.__value_.__r.__words[2]);
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)((char *)&v98 + 7) = *(_QWORD *)&v115[7];
    v97 = v94;
    *(_QWORD *)&v98 = *(_QWORD *)v115;
    HIBYTE(v98) = v95;
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
    *this = (void *)13;
    std::operator+<char>();
    if (SHIBYTE(v98) < 0)
      operator delete(v97);
    goto LABEL_380;
  }
  v12 = 8 * v11;
  while (1)
  {
    inited = CoreML::validateRecurrentActivationParams((CoreML *)this, *v10);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
      break;
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    ++v10;
    v12 -= 8;
    if (!v12)
      goto LABEL_31;
  }
}

void sub_19C9B8964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (*(char *)(v31 - 97) < 0)
    operator delete(*(void **)(v31 - 120));
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a23);
  CoreML::Specification::BiDirectionalLSTMLayerParams::~BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)&a26);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateCropLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v10;
  int v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  std::string *v16;
  __int128 v17;
  uint64_t *v18;
  std::string *v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t *v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  __int128 *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::string::size_type v40;
  char v41;
  std::string v42;
  std::string v43;
  std::string v44;
  _BYTE __p[24];
  void *v46[2];
  char v47;
  std::string v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v46, "Crop");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)v46, (uint64_t)a2 + 32);
        if (v47 < 0)
          operator delete(v46[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(__p, "Crop");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)__p, 3, -1, (uint64_t)a2 + 32);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (*(int *)(a3 + 24) >= 2)
        {
          v8 = *(_QWORD *)(a3 + 32);
          v9 = *(_QWORD **)(v8 + 8);
          v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 32, v9);
          v10 = (const CoreML::Specification::NeuralNetworkLayer *)((char *)a2 + 40);
          if (v10 != v6)
          {
            v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v7, *(_QWORD **)(v8 + 16));
            if (v10 != v6)
            {
              v11 = *(_DWORD *)std::map<std::string,std::string>::at((uint64_t)v7, v9);
              v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::map<std::string,std::string>::at((uint64_t)v7, *(_QWORD **)(*(_QWORD *)(a3 + 32) + 16));
              if (v11 != *(_DWORD *)v6)
              {
                v35 = *(__int128 **)(a3 + 112);
                if (*((char *)v35 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)v35, *((_QWORD *)v35 + 1));
                }
                else
                {
                  v36 = *v35;
                  v43.__r_.__value_.__r.__words[2] = *((_QWORD *)v35 + 2);
                  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v36;
                }
                v37 = std::string::insert(&v43, 0, "Layer '");
                v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
                v44.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v38;
                v37->__r_.__value_.__l.__size_ = 0;
                v37->__r_.__value_.__r.__words[2] = 0;
                v37->__r_.__value_.__r.__words[0] = 0;
                v39 = std::string::append(&v44, "' of type 'Crop' expects equal ranks for its inputs, but they are not equal.");
                v40 = v39->__r_.__value_.__r.__words[0];
                v48.__r_.__value_.__r.__words[0] = v39->__r_.__value_.__l.__size_;
                *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v39->__r_.__value_.__r.__words[1] + 7);
                v41 = HIBYTE(v39->__r_.__value_.__r.__words[2]);
                v39->__r_.__value_.__l.__size_ = 0;
                v39->__r_.__value_.__r.__words[2] = 0;
                v39->__r_.__value_.__r.__words[0] = 0;
                *(_QWORD *)&__p[15] = *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 7);
                *(_QWORD *)__p = v40;
                *(_QWORD *)&__p[8] = v48.__r_.__value_.__r.__words[0];
                __p[23] = v41;
                if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v44.__r_.__value_.__l.__data_);
                if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v43.__r_.__value_.__l.__data_);
                *this = (void *)13;
                std::operator+<char>();
                goto LABEL_73;
              }
            }
          }
        }
      }
      v12 = *(_DWORD *)(a3 + 140);
      if (*(_DWORD *)(a3 + 24) == 1)
      {
        if (v12 == 190)
        {
          v13 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
          v13 = &CoreML::Specification::_CropLayerParams_default_instance_;
        }
        v15 = (uint64_t *)v13[5];
        if (!v15)
          v15 = &CoreML::Specification::_BorderAmounts_default_instance_;
        if (*((_DWORD *)v15 + 6) != 2)
        {
          std::operator+<char>();
          v16 = std::string::append(&v48, "' is of length ");
          v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
          v43.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v17;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          if (*(_DWORD *)(a3 + 140) == 190)
          {
            v18 = *(uint64_t **)(a3 + 128);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v16);
            v18 = &CoreML::Specification::_CropLayerParams_default_instance_;
          }
          v22 = (uint64_t *)v18[5];
          if (!v22)
            v22 = &CoreML::Specification::_BorderAmounts_default_instance_;
          std::to_string(&v42, *((_DWORD *)v22 + 6));
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = &v42;
          else
            v23 = (std::string *)v42.__r_.__value_.__r.__words[0];
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
          else
            size = v42.__r_.__value_.__l.__size_;
          v25 = std::string::append(&v43, (const std::string::value_type *)v23, size);
          v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          v44.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          v27 = std::string::append(&v44, " but requires exactly two crop constraints (for X,Y axes).");
          v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          *(_QWORD *)&__p[16] = *((_QWORD *)&v27->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v44.__r_.__value_.__l.__data_);
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v42.__r_.__value_.__l.__data_);
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v43.__r_.__value_.__l.__data_);
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v48.__r_.__value_.__l.__data_);
LABEL_72:
          *this = (void *)13;
          std::operator+<char>();
LABEL_73:
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          return;
        }
      }
      else
      {
        if (v12 == 190)
        {
          v14 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
          v14 = &CoreML::Specification::_CropLayerParams_default_instance_;
        }
        if (*((_DWORD *)v14 + 4) != 2)
        {
          std::operator+<char>();
          v19 = std::string::append(&v48, "' is of length ");
          v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v43.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          if (*(_DWORD *)(a3 + 140) == 190)
          {
            v21 = *(uint64_t **)(a3 + 128);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v19);
            v21 = &CoreML::Specification::_CropLayerParams_default_instance_;
          }
          std::to_string(&v42, *((_DWORD *)v21 + 4));
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = &v42;
          else
            v29 = (std::string *)v42.__r_.__value_.__r.__words[0];
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v30 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
          else
            v30 = v42.__r_.__value_.__l.__size_;
          v31 = std::string::append(&v43, (const std::string::value_type *)v29, v30);
          v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
          v44.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v32;
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          v33 = std::string::append(&v44, " but requires exactly two offsets (for X,Y axes).");
          v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
          *(_QWORD *)&__p[16] = *((_QWORD *)&v33->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v34;
          v33->__r_.__value_.__l.__size_ = 0;
          v33->__r_.__value_.__r.__words[2] = 0;
          v33->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v44.__r_.__value_.__l.__data_);
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v42.__r_.__value_.__l.__data_);
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v43.__r_.__value_.__l.__data_);
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v48.__r_.__value_.__l.__data_);
          goto LABEL_72;
        }
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void sub_19C9B9160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateDotLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, const CoreML::Specification::NeuralNetworkLayer *a3)
{
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  __int128 *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  void *v17;
  char v18;
  std::string v19;
  std::string v20;
  void *v21;
  _BYTE v22[15];
  char v23;
  void *__p[2];
  char v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  CoreML::validateInputCount((CoreML *)this, a3, 2, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (!*(_BYTE *)a2)
        goto LABEL_21;
      std::string::basic_string[abi:ne180100]<0>(__p, "DotProduct");
      v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, a3, (uint64_t)__p, (uint64_t)a2 + 32);
      if (v25 < 0)
        operator delete(__p[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(&v21, "DotProduct");
        CoreML::validateRankCount((uint64_t)this, a3, (uint64_t)&v21, 3, -1, (uint64_t)a2 + 32);
        if (v23 < 0)
          operator delete(v21);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          v7 = *((_QWORD *)a3 + 4);
          v8 = *(_QWORD **)(v7 + 8);
          v9 = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 32, v8);
          v10 = (_QWORD *)((char *)a2 + 40);
          if (v10 == v9
            || v10 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v6, *(_QWORD **)(v7 + 16))|| (v11 = *(_DWORD *)std::map<std::string,std::string>::at((uint64_t)v6, v8), v11 == *(_DWORD *)std::map<std::string,std::string>::at((uint64_t)v6, *(_QWORD **)(*((_QWORD *)a3 + 4) + 16))))
          {
LABEL_21:
            CoreML::Result::Result((CoreML::Result *)this);
            return;
          }
          v12 = (__int128 *)*((_QWORD *)a3 + 14);
          if (*((char *)v12 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
          }
          else
          {
            v13 = *v12;
            v19.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
            *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
          }
          v14 = std::string::insert(&v19, 0, "Layer '");
          v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          v20.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          v16 = std::string::append(&v20, "' of type 'DotProduct' expects equal ranks for its inputs, but they are not equal.");
          v17 = (void *)v16->__r_.__value_.__r.__words[0];
          v26[0] = v16->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
          v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)&v22[7] = *(_QWORD *)((char *)v26 + 7);
          v21 = v17;
          *(_QWORD *)v22 = v26[0];
          v23 = v18;
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v20.__r_.__value_.__l.__data_);
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v19.__r_.__value_.__l.__data_);
          *this = (void *)13;
          std::operator+<char>();
          if (v23 < 0)
            operator delete(v21);
        }
      }
    }
  }
}

void sub_19C9B950C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateMvnLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, const CoreML::Specification::NeuralNetworkLayer *a3)
{
  char *v6;
  void *v7[2];
  char v8;
  void *__p[2];
  char v10;

  CoreML::validateInputCount((CoreML *)this, a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (!*(_BYTE *)a2)
        goto LABEL_18;
      std::string::basic_string[abi:ne180100]<0>(__p, "MeanVarianceNormalize");
      v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, a3, (uint64_t)__p, (uint64_t)v6);
      if (v10 < 0)
        operator delete(__p[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v7, "MeanVarianceNormalize");
        CoreML::validateRankCount((uint64_t)this, a3, (uint64_t)v7, 3, -1, (uint64_t)v6);
        if (v8 < 0)
          operator delete(v7[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
LABEL_18:
          CoreML::Result::Result((CoreML::Result *)this);
        }
      }
    }
  }
}

void sub_19C9B96C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateEmbeddingLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  const CoreML::Specification::WeightParams *v10;
  const CoreML::Specification::WeightParams *v11;
  uint64_t *v12;
  void *v13[2];
  char v14;
  void *__p[2];
  char v16;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Embedding");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v16 < 0)
          operator delete(__p[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v13, "Embedding");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)v13, 4, -1, (uint64_t)v7);
        if (v14 < 0)
          operator delete(v13[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 150)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        v8 = &CoreML::Specification::_EmbeddingLayerParams_default_instance_;
      }
      v10 = (const CoreML::Specification::WeightParams *)v8[2];
      v9 = (uint64_t *)v8[3];
      if (v10)
        v11 = v10;
      else
        v11 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      if (v9)
        v12 = v9;
      else
        v12 = &CoreML::Specification::_WeightParams_default_instance_;
      validateEmbeddingWeightsBias(this, (const CoreML::Specification::WeightParams *)a3, v11, v12);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19C9B98A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void validateEmbeddingWeightsBias(void **this, const CoreML::Specification::WeightParams *a2, const CoreML::Specification::WeightParams *a3, uint64_t *a4)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  BOOL v46;
  int v47;
  size_t v48;
  std::string *v49;
  const void *v50;
  uint64_t v51;
  int v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  void *v59;
  size_t v60;
  std::string *v61;
  const void *v62;
  uint64_t v63;
  int v64;
  const std::string::value_type *v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  std::string v73;
  std::string v74;
  void *__p[2];
  std::string::size_type v76;
  void *v77;
  size_t v78;
  uint64_t v79;

  v77 = 0;
  v78 = 0;
  v79 = 0;
  v8 = *((_DWORD *)a2 + 35);
  if (v8 == 150)
  {
    v13 = *((_QWORD *)a2 + 16);
    v11 = *(_QWORD *)(v13 + 32);
    v10 = *(_QWORD *)(v13 + 40);
    v12 = *(unsigned __int8 *)(v13 + 48);
    MEMORY[0x1A1AD5EAC](&v77, "Embedding");
  }
  else
  {
    if (v8 != 1040)
    {
      CoreML::Result::Result((CoreML::Result *)this);
      goto LABEL_172;
    }
    v9 = *((_QWORD *)a2 + 16);
    v11 = *(_QWORD *)(v9 + 32);
    v10 = *(_QWORD *)(v9 + 40);
    v12 = *(unsigned __int8 *)(v9 + 48);
    MEMORY[0x1A1AD5EAC](&v77, "EmbeddingND");
  }
  v14 = *((_QWORD *)a3 + 5);
  if (*(char *)(v14 + 23) < 0)
    v15 = *(_QWORD *)(v14 + 8);
  else
    v15 = *(unsigned __int8 *)(v14 + 23);
  v16 = *((_QWORD *)a3 + 6);
  v17 = *(unsigned __int8 *)(v16 + 23);
  if (*(char *)(v16 + 23) < 0)
    v18 = *(_QWORD *)(v16 + 8);
  else
    v18 = *(unsigned __int8 *)(v16 + 23);
  v19 = *((_DWORD *)a3 + 4);
  v20 = *((_QWORD *)a3 + 7);
  v21 = *(unsigned __int8 *)(v20 + 23);
  if (*(char *)(v20 + 23) < 0)
    v22 = *(_QWORD *)(v20 + 8);
  else
    v22 = *(unsigned __int8 *)(v20 + 23);
  if (v19 <= 0)
    v23 = 1;
  else
    v23 = 2;
  if (v15)
    v24 = v23;
  else
    v24 = v19 > 0;
  if (v18)
    ++v24;
  if (v22)
    v25 = v24 + 1;
  else
    v25 = v24;
  if (v25 > 1)
  {
    v26 = 4;
    goto LABEL_54;
  }
  if (v25)
    v26 = 0;
  else
    v26 = 5;
  if (v19 <= 0 && v25)
  {
    if ((*(_BYTE *)(v14 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v14 + 8))
        goto LABEL_35;
    }
    else if (*(_BYTE *)(v14 + 23))
    {
LABEL_35:
      v26 = 1;
      goto LABEL_54;
    }
    if ((v17 & 0x80) != 0)
      v17 = *(_QWORD *)(v16 + 8);
    v27 = *((_QWORD *)a3 + 8);
    if (a3 != (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_
      && v17
      && v27)
    {
      v26 = 2;
    }
    else
    {
      if ((v21 & 0x80) != 0)
        v21 = *(_QWORD *)(v20 + 8);
      if (v27)
        v28 = v21 == 0;
      else
        v28 = 1;
      if (v28
        || a3 == (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_)
      {
        v26 = 5;
      }
      else
      {
        v26 = 3;
      }
    }
  }
LABEL_54:
  v30 = a4[5];
  if (*(char *)(v30 + 23) < 0)
    v31 = *(_QWORD *)(v30 + 8);
  else
    v31 = *(unsigned __int8 *)(v30 + 23);
  v32 = a4[6];
  v33 = *(unsigned __int8 *)(v32 + 23);
  if (*(char *)(v32 + 23) < 0)
    v34 = *(_QWORD *)(v32 + 8);
  else
    v34 = *(unsigned __int8 *)(v32 + 23);
  v35 = *((_DWORD *)a4 + 4);
  v36 = a4[7];
  v37 = *(unsigned __int8 *)(v36 + 23);
  if (*(char *)(v36 + 23) < 0)
    v38 = *(_QWORD *)(v36 + 8);
  else
    v38 = *(unsigned __int8 *)(v36 + 23);
  if (v35 <= 0)
    v39 = 1;
  else
    v39 = 2;
  if (v31)
    v40 = v39;
  else
    v40 = v35 > 0;
  if (v34)
    ++v40;
  if (v38)
    v41 = v40 + 1;
  else
    v41 = v40;
  if (v41 > 1)
  {
    v42 = 4;
    goto LABEL_102;
  }
  if (v41)
    v42 = 0;
  else
    v42 = 5;
  if (v35 <= 0 && v41)
  {
    if ((*(_BYTE *)(v30 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v30 + 8))
        goto LABEL_83;
    }
    else if (*(_BYTE *)(v30 + 23))
    {
LABEL_83:
      v42 = 1;
      goto LABEL_102;
    }
    if ((v33 & 0x80) != 0)
      v33 = *(_QWORD *)(v32 + 8);
    v43 = a4[8];
    if (a4 != &CoreML::Specification::_WeightParams_default_instance_ && v33 && v43)
    {
      v42 = 2;
    }
    else
    {
      if ((v37 & 0x80) != 0)
        v37 = *(_QWORD *)(v36 + 8);
      if (v43)
        v44 = v37 == 0;
      else
        v44 = 1;
      if (v44 || a4 == &CoreML::Specification::_WeightParams_default_instance_)
        v42 = 5;
      else
        v42 = 3;
    }
  }
LABEL_102:
  if (v12)
    v46 = v42 == 4;
  else
    v46 = 0;
  v47 = v46;
  if (v26 == 4 || v47)
  {
    if (v79 >= 0)
      v60 = HIBYTE(v79);
    else
      v60 = v78;
    v61 = &v73;
    std::string::basic_string[abi:ne180100]((uint64_t)&v73, v60 + 2);
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v61 = (std::string *)v73.__r_.__value_.__r.__words[0];
    if (v60)
    {
      if (v79 >= 0)
        v62 = &v77;
      else
        v62 = v77;
      memmove(v61, v62, v60);
    }
    strcpy((char *)v61 + v60, " '");
    v63 = *((_QWORD *)a2 + 14);
    v64 = *(char *)(v63 + 23);
    if (v64 >= 0)
      v65 = (const std::string::value_type *)*((_QWORD *)a2 + 14);
    else
      v65 = *(const std::string::value_type **)v63;
    if (v64 >= 0)
      v66 = *(unsigned __int8 *)(v63 + 23);
    else
      v66 = *(_QWORD *)(v63 + 8);
    v67 = std::string::append(&v73, v65, v66);
    v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    v69 = std::string::append(&v74, "' has invalid weights/bias fields. Field value types should match and should either be half or full precision.");
    v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    v76 = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    *this = (void *)13;
    std::operator+<char>();
    if (SHIBYTE(v76) < 0)
    {
      v59 = __p[0];
      goto LABEL_159;
    }
  }
  else if (v12 && (v26 == 1 && !v42 || !v26 && v42 == 1))
  {
    if (v79 >= 0)
      v48 = HIBYTE(v79);
    else
      v48 = v78;
    v49 = &v73;
    std::string::basic_string[abi:ne180100]((uint64_t)&v73, v48 + 8);
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v49 = (std::string *)v73.__r_.__value_.__r.__words[0];
    if (v48)
    {
      if (v79 >= 0)
        v50 = &v77;
      else
        v50 = v77;
      memmove(v49, v50, v48);
    }
    strcpy((char *)v49 + v48, " layer '");
    v51 = *((_QWORD *)a2 + 14);
    v52 = *(char *)(v51 + 23);
    if (v52 >= 0)
      v53 = (const std::string::value_type *)*((_QWORD *)a2 + 14);
    else
      v53 = *(const std::string::value_type **)v51;
    if (v52 >= 0)
      v54 = *(unsigned __int8 *)(v51 + 23);
    else
      v54 = *(_QWORD *)(v51 + 8);
    v55 = std::string::append(&v73, v53, v54);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = std::string::append(&v74, "has unmatched precisions of weights/bias They should either be half or full precision.");
    v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v76 = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    *this = (void *)13;
    std::operator+<char>();
    if (SHIBYTE(v76) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    {
      v59 = (void *)v73.__r_.__value_.__r.__words[0];
LABEL_159:
      operator delete(v59);
    }
  }
  else
  {
    v71 = *((_QWORD *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(__p, "weight");
    CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)a3, v11 * v10, v10, (const void **)&v77, v71, (uint64_t)__p);
    if (SHIBYTE(v76) < 0)
      operator delete(__p[0]);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (v12)
      {
        v72 = *((_QWORD *)a2 + 14);
        std::string::basic_string[abi:ne180100]<0>(__p, "bias");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)a4, v10, 1, (const void **)&v77, v72, (uint64_t)__p);
        if (SHIBYTE(v76) < 0)
          operator delete(__p[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_172;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
LABEL_172:
  if (SHIBYTE(v79) < 0)
    operator delete(v77);
}

void sub_19C9B9EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateEmbeddingNDLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  const CoreML::Specification::WeightParams *v10;
  const CoreML::Specification::WeightParams *v11;
  uint64_t *v12;
  void *v13[2];
  char v14;
  void *__p[2];
  char v16;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "EmbeddingND");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v16 < 0)
          operator delete(__p[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v13, "EmbeddingND");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)v13, 2, 5, (uint64_t)v7);
        if (v14 < 0)
          operator delete(v13[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 1040)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        v8 = &CoreML::Specification::_EmbeddingNDLayerParams_default_instance_;
      }
      v10 = (const CoreML::Specification::WeightParams *)v8[2];
      v9 = (uint64_t *)v8[3];
      if (v10)
        v11 = v10;
      else
        v11 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      if (v9)
        v12 = v9;
      else
        v12 = &CoreML::Specification::_WeightParams_default_instance_;
      validateEmbeddingWeightsBias(this, (const CoreML::Specification::WeightParams *)a3, v11, v12);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19C9BA14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSequenceRepeatLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, const CoreML::Specification::NeuralNetworkLayer *a3)
{
  char *v6;
  void *v7[2];
  char v8;
  void *__p[2];
  char v10;

  CoreML::validateInputCount((CoreML *)this, a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (!*(_BYTE *)a2)
        goto LABEL_18;
      std::string::basic_string[abi:ne180100]<0>(__p, "SequenceRepeat");
      v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, a3, (uint64_t)__p, (uint64_t)v6);
      if (v10 < 0)
        operator delete(__p[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v7, "SequenceRepeat");
        CoreML::validateRankCount((uint64_t)this, a3, (uint64_t)v7, 5, -1, (uint64_t)v6);
        if (v8 < 0)
          operator delete(v7[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
LABEL_18:
          CoreML::Result::Result((CoreML::Result *)this);
        }
      }
    }
  }
}

void sub_19C9BA2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSoftmaxLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, const CoreML::Specification::NeuralNetworkLayer *a3)
{
  char *v6;
  void *v7[2];
  char v8;
  void *__p[2];
  char v10;

  CoreML::validateInputCount((CoreML *)this, a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (!*(_BYTE *)a2)
        goto LABEL_18;
      std::string::basic_string[abi:ne180100]<0>(__p, "Softmax");
      v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, a3, (uint64_t)__p, (uint64_t)v6);
      if (v10 < 0)
        operator delete(__p[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(v7, "Softmax");
        CoreML::validateRankCount((uint64_t)this, a3, (uint64_t)v7, 3, -1, (uint64_t)v6);
        if (v8 < 0)
          operator delete(v7[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
LABEL_18:
          CoreML::Result::Result((CoreML::Result *)this);
        }
      }
    }
  }
}

void sub_19C9BA444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateConcatLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  char *v6;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  void *v23;
  char v24;
  std::string v25;
  std::string v26;
  void *v27;
  _BYTE v28[15];
  char v29;
  void *__p[2];
  char v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 2, -1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (!*(_BYTE *)a2)
        goto LABEL_34;
      std::string::basic_string[abi:ne180100]<0>(__p, "Concat");
      v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)a2 + 32);
      if (v31 < 0)
        operator delete(__p[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
        return;
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_DWORD *)(a3 + 140) == 320)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v7);
        v8 = &CoreML::Specification::_ConcatLayerParams_default_instance_;
      }
      if (*((_BYTE *)v8 + 16))
      {
        std::string::basic_string[abi:ne180100]<0>(&v27, "Concat");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)&v27, 5, -1, (uint64_t)a2 + 32);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v27, "Concat");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)&v27, 3, -1, (uint64_t)a2 + 32);
      }
      if (v29 < 0)
        operator delete(v27);
      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
        return;
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      v9 = *(_QWORD **)(*(_QWORD *)(a3 + 32) + 8);
      v10 = (_QWORD *)((char *)a2 + 40);
      if ((_QWORD *)((char *)a2 + 40) == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 32, v9)|| ((v11 = (int *)std::map<std::string,std::string>::at((uint64_t)a2 + 32, v9), (v12 = *(_QWORD *)(a3 + 32)) != 0)? (v13 = (_QWORD **)(v12 + 8)): (v13 = 0), v14 = *(int *)(a3 + 24), !(_DWORD)v14))
      {
LABEL_34:
        CoreML::Result::Result((CoreML::Result *)this);
        return;
      }
      v15 = *v11;
      v16 = 8 * v14;
      while (1)
      {
        v17 = *v13;
        if (v10 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v6, *v13)&& v15 != *(_DWORD *)std::map<std::string,std::string>::at((uint64_t)v6, v17))
        {
          break;
        }
        ++v13;
        v16 -= 8;
        if (!v16)
          goto LABEL_34;
      }
      v18 = *(__int128 **)(a3 + 112);
      if (*((char *)v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
      }
      else
      {
        v19 = *v18;
        v25.__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v19;
      }
      v20 = std::string::insert(&v25, 0, "Layer '");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      v22 = std::string::append(&v26, "' of type 'Concat' expects equal ranks for its inputs, but they are not equal.");
      v23 = (void *)v22->__r_.__value_.__r.__words[0];
      v32[0] = v22->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v32 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
      v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)&v28[7] = *(_QWORD *)((char *)v32 + 7);
      v27 = v23;
      *(_QWORD *)v28 = v32[0];
      v29 = v24;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      *this = (void *)13;
      std::operator+<char>();
      if (v29 < 0)
        operator delete(v27);
    }
  }
}

void sub_19C9BA7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateCustomLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  unint64_t *inited;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  std::string *v25;
  __int128 v26;
  std::string v27;
  void *__p[2];
  std::string::size_type v29;

  CoreML::validateInputCount((CoreML *)this, a2, 1, -1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a2, 1, -1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 500)
      {
        v5 = (_QWORD *)*((_QWORD *)a2 + 16);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v5 = &CoreML::Specification::_CustomLayerParams_default_instance_;
      }
      v6 = v5[9];
      if (*(char *)(v6 + 23) < 0)
      {
        if (*(_QWORD *)(v6 + 8))
          goto LABEL_13;
      }
      else if (*(_BYTE *)(v6 + 23))
      {
LABEL_13:
        if (*((_DWORD *)a2 + 35) == 500)
        {
          v7 = (int *)*((_QWORD *)a2 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v7 = (int *)&CoreML::Specification::_CustomLayerParams_default_instance_;
        }
        v10 = *((_QWORD *)v7 + 4);
        if (v10)
          v11 = (uint64_t *)(v10 + 8);
        else
          v11 = 0;
        v12 = v7[6];
        if (!(_DWORD)v12)
        {
LABEL_45:
          CoreML::Result::Result((CoreML::Result *)this);
          return;
        }
        v13 = 8 * v12;
        while (1)
        {
          v14 = *v11;
          v15 = *(_QWORD *)(*v11 + 40);
          if (*(char *)(v15 + 23) < 0)
            v16 = *(_QWORD *)(v15 + 8);
          else
            v16 = *(unsigned __int8 *)(v15 + 23);
          v17 = *(_QWORD *)(v14 + 48);
          if (*(char *)(v17 + 23) < 0)
            v18 = *(_QWORD *)(v17 + 8);
          else
            v18 = *(unsigned __int8 *)(v17 + 23);
          v19 = *(_QWORD *)(v14 + 56);
          if (*(char *)(v19 + 23) < 0)
            v20 = *(_QWORD *)(v19 + 8);
          else
            v20 = *(unsigned __int8 *)(v19 + 23);
          v21 = *(_DWORD *)(v14 + 16);
          v22 = v21 <= 0;
          v23 = v21 > 0;
          if (v22)
            v24 = 1;
          else
            v24 = 2;
          if (v16)
            v23 = v24;
          if (v18)
            ++v23;
          if (v20)
            ++v23;
          if (v23 != 1)
            break;
          ++v11;
          v13 -= 8;
          if (!v13)
            goto LABEL_45;
        }
        std::operator+<char>();
        v25 = std::string::append(&v27, " has a weights parameter with multiple types filled in.  The WeightParams message should be treated as a oneof.");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v29 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
        goto LABEL_48;
      }
      std::operator+<char>();
      v8 = std::string::append(&v27, " has an empty 'className' field. This field is required in order for Core ML to link to the implementation for this custom class.");
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v29 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
LABEL_48:
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v29) < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_19C9BAAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateResizeBilinearLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  uint64_t *v8;
  std::string *v9;
  __int128 v10;
  std::string *p_p;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string __p;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  std::string::size_type v22;
  void *v23[2];
  char v24;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_BYTE *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v23, "ResizeBilinear");
        v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)v23, (uint64_t)v7);
        if (v24 < 0)
          operator delete(v23[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        std::string::basic_string[abi:ne180100]<0>(&v21, "ResizeBilinear");
        CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)&v21, 3, -1, (uint64_t)v7);
        if (SHIBYTE(v22) < 0)
          operator delete((void *)v21);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 211)
      {
        v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        v8 = &CoreML::Specification::_ResizeBilinearLayerParams_default_instance_;
      }
      if ((*((_DWORD *)v8 + 4) | 2) == 2)
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v9 = std::string::append(&v18, "' must be a vector of size 2 (i.e height, width) but is a vector of size ");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v19.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&__p, *((_DWORD *)v8 + 4));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v13 = std::string::append(&v19, (const std::string::value_type *)p_p, size);
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v20.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        v15 = std::string::append(&v20, ".");
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v22 = v15->__r_.__value_.__r.__words[2];
        v21 = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v20.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v19.__r_.__value_.__l.__data_);
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v22) < 0)
          operator delete((void *)v21);
      }
    }
  }
}

void sub_19C9BADA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateCropResizeLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v10;
  int v11;
  uint64_t *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  __int128 *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::size_type v26;
  char v27;
  std::string v28;
  std::string v29;
  std::string v30;
  _BYTE __p[24];
  void *v32[2];
  char v33;
  std::string v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 2, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (!*(_BYTE *)a2)
        goto LABEL_22;
      std::string::basic_string[abi:ne180100]<0>(v32, "CropResize");
      v7 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)v32, (uint64_t)a2 + 32);
      if (v33 < 0)
        operator delete(v32[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
        return;
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      std::string::basic_string[abi:ne180100]<0>(__p, "CropResize");
      CoreML::validateRankCount((uint64_t)this, (_QWORD *)a3, (uint64_t)__p, 5, -1, (uint64_t)a2 + 32);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
        return;
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      v8 = *(_QWORD *)(a3 + 32);
      v9 = *(_QWORD **)(v8 + 8);
      v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 32, v9);
      v10 = (const CoreML::Specification::NeuralNetworkLayer *)((char *)a2 + 40);
      if (v10 == v6
        || (v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v7, *(_QWORD **)(v8 + 16)), v10 == v6)|| (v11 = *(_DWORD *)std::map<std::string,std::string>::at((uint64_t)v7, v9), v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::map<std::string,std::string>::at((uint64_t)v7, *(_QWORD **)(*(_QWORD *)(a3 + 32) + 16)), v11 == *(_DWORD *)v6))
      {
LABEL_22:
        if (*(_DWORD *)(a3 + 140) == 212)
        {
          v12 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
          v12 = &CoreML::Specification::_CropResizeLayerParams_default_instance_;
        }
        if ((*((_DWORD *)v12 + 4) | 2) == 2)
        {
          CoreML::Result::Result((CoreML::Result *)this);
          return;
        }
        std::operator+<char>();
        v13 = std::string::append(&v34, "' must be a vector of size 2 (i.e height, width) but is a vector of size ");
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v28, *((_DWORD *)v12 + 4));
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &v28;
        else
          v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
        else
          size = v28.__r_.__value_.__l.__size_;
        v17 = std::string::append(&v29, (const std::string::value_type *)v15, size);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        v19 = std::string::append(&v30, ".");
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v19->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v30.__r_.__value_.__l.__data_);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v34.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
      }
      else
      {
        v21 = *(__int128 **)(a3 + 112);
        if (*((char *)v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
        }
        else
        {
          v22 = *v21;
          v29.__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 2);
          *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v22;
        }
        v23 = std::string::insert(&v29, 0, "Layer '");
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v30, "' of type 'CropResize' expects equal ranks for its inputs, but they are not equal.");
        v26 = v25->__r_.__value_.__r.__words[0];
        v34.__r_.__value_.__r.__words[0] = v25->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v34.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
        v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)&__p[15] = *(std::string::size_type *)((char *)v34.__r_.__value_.__r.__words + 7);
        *(_QWORD *)__p = v26;
        *(_QWORD *)&__p[8] = v34.__r_.__value_.__r.__words[0];
        __p[23] = v27;
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v30.__r_.__value_.__l.__data_);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
      }
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
  }
}

void sub_19C9BB24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateBranchLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  __int128 *v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type size;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  void *v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  uint64_t *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  BOOL v52;
  std::string __p[2];
  uint64_t *v54;
  uint64_t v55;
  void *v56[2];
  char *v57;
  char *v58;
  uint64_t *v59;
  _QWORD *v60[4];
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
    return;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  v6 = CoreML::Result::Result((CoreML::Result *)this);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
    return;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  if (!*(_DWORD *)(a3 + 72)
    || (v7 = *(_QWORD *)(*(_QWORD *)(a3 + 80) + 8), v8 = *(unsigned int *)(v7 + 16), (int)v8 < 1))
  {
LABEL_12:
    v11 = *(__int128 **)(*(_QWORD *)(a3 + 32) + 8);
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v12 = *v11;
      v64.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v12;
    }
    if (*(_DWORD *)(a3 + 140) == 605)
    {
      v13 = *(uint64_t **)(a3 + 128);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
      v13 = &CoreML::Specification::_BranchLayerParams_default_instance_;
    }
    v14 = (uint64_t **)((char *)a2 + 56);
    if ((_QWORD *)((char *)a2 + 64) == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 56, &v64))
    {
      v18 = *(__int128 **)(a3 + 112);
      if (*((char *)v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
      }
      else
      {
        v19 = *v18;
        v61.__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v19;
      }
      v24 = std::string::insert(&v61, 0, "Branch Layer '");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      v26 = std::string::append(&v62, "' requires the condition blob '");
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &v64;
      else
        v28 = (std::string *)v64.__r_.__value_.__r.__words[0];
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      else
        size = v64.__r_.__value_.__l.__size_;
      v30 = std::string::append(&v63, (const std::string::value_type *)v28, size);
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      v32 = std::string::append(__p, "' which is not present in the network prior to this layer.");
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v57 = (char *)v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)v56 = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
    }
    else
    {
      if (v13[2])
        v15 = (uint64_t *)v13[2];
      else
        v15 = &CoreML::Specification::_NeuralNetwork_default_instance_;
      if (v13[3])
        v16 = (uint64_t *)v13[3];
      else
        v16 = &CoreML::Specification::_NeuralNetwork_default_instance_;
      if (*((_DWORD *)v15 + 6))
      {
        v17 = *((_DWORD *)v16 + 6);
        CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)v56, (_QWORD *)a2 + 7, (uint64_t **)a2 + 1, *(_BYTE *)a2, *((_DWORD *)a2 + 20), (uint64_t **)a2 + 4);
        CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetwork>((uint64_t)this, (CoreML::Specification::NeuralNetworkLayer *)v56, (uint64_t)v15);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          if (v17 >= 1)
          {
            CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)__p, (_QWORD *)a2 + 7, (uint64_t **)a2 + 1, *(_BYTE *)a2, *((_DWORD *)a2 + 20), (uint64_t **)a2 + 4);
            CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetwork>((uint64_t)this, (CoreML::Specification::NeuralNetworkLayer *)__p, (uint64_t)v16);
            if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            {
              CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator((CoreML::NeuralNetworkSpecValidator *)__p);
              goto LABEL_86;
            }
            if (*((char *)this + 31) < 0)
              operator delete(this[1]);
            v43 = v59;
            if (v59 != (uint64_t *)v60)
            {
              do
              {
                if (*((char *)v43 + 55) < 0)
                  std::string::__init_copy_ctor_external(&v63, (const std::string::value_type *)v43[4], v43[5]);
                else
                  v63 = *(std::string *)(v43 + 4);
                if (&v55 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v54, &v63))
                {
                  v44 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, &v63, (uint64_t)&v63);
                  v45 = (_QWORD *)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v59, &v63, (uint64_t)&v63)[7];
                  v46 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v59, &v63, (uint64_t)&v63);
                  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v44 + 7, v45, v46 + 8);
                  v47 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, &v63, (uint64_t)&v63);
                  v48 = (_QWORD *)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v54, &v63, (uint64_t)&v63)[7];
                  v49 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v54, &v63, (uint64_t)&v63);
                  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v47 + 7, v48, v49 + 8);
                }
                if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v63.__r_.__value_.__l.__data_);
                v50 = (uint64_t *)v43[1];
                if (v50)
                {
                  do
                  {
                    v51 = v50;
                    v50 = (uint64_t *)*v50;
                  }
                  while (v50);
                }
                else
                {
                  do
                  {
                    v51 = (uint64_t *)v43[2];
                    v52 = *v51 == (_QWORD)v43;
                    v43 = v51;
                  }
                  while (!v52);
                }
                v43 = v51;
              }
              while (v51 != (uint64_t *)v60);
            }
            CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator((CoreML::NeuralNetworkSpecValidator *)__p);
          }
          CoreML::Result::Result((CoreML::Result *)this);
        }
LABEL_86:
        std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v60[0]);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v58);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v57);
LABEL_87:
        if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v38 = (void *)v64.__r_.__value_.__r.__words[0];
        goto LABEL_89;
      }
      v22 = *(__int128 **)(a3 + 112);
      if (*((char *)v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
      }
      else
      {
        v23 = *v22;
        v63.__r_.__value_.__r.__words[2] = *((_QWORD *)v22 + 2);
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v23;
      }
      v39 = std::string::insert(&v63, 0, "Branch Layer '");
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      v41 = std::string::append(__p, "' has an empty If branch");
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v57 = (char *)v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)v56 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
    }
    *this = (void *)13;
    std::operator+<char>();
    if (SHIBYTE(v57) < 0)
      operator delete(v56[0]);
    goto LABEL_87;
  }
  v9 = (uint64_t *)(*(_QWORD *)(v7 + 24) + 8);
  while (1)
  {
    v10 = *v9++;
    if (v10 >= 2)
      break;
    if (!--v8)
      goto LABEL_12;
  }
  v20 = *(__int128 **)(a3 + 112);
  if (*((char *)v20 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
  }
  else
  {
    v21 = *v20;
    v64.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v21;
  }
  v34 = std::string::insert(&v64, 0, "Branch Layer '");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = std::string::append(__p, "' input's length cannot be more than 1");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v57 = (char *)v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)v56 = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  *this = (void *)13;
  std::operator+<char>();
  if (SHIBYTE(v57) < 0)
  {
    v38 = v56[0];
LABEL_89:
    operator delete(v38);
  }
}

void sub_19C9BB994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (*(char *)(v44 - 89) < 0)
    operator delete(*(void **)(v44 - 112));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator(CoreML::NeuralNetworkSpecValidator *this)
{
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*((_QWORD **)this + 8));
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*((char **)this + 5));
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*((char **)this + 2));
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  uint64_t *v11;
  std::string *v12;
  _QWORD v14[2];
  char v15;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v10 = v5 + 4;
        if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, v5 + 4))
          break;
        v5 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v10, a2))
        break;
      v8 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = (uint64_t *)operator new(0x50uLL);
    v14[0] = v11;
    v14[1] = v6;
    v15 = 0;
    v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(_QWORD *)(a3 + 16);
    }
    v11[9] = 0;
    v11[8] = 0;
    v11[7] = (uint64_t)(v11 + 8);
    v15 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v7, v8, v11);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
    return v11;
  }
  return (uint64_t *)v7;
}

void sub_19C9BBC14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t *result, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;

  v6 = a2;
  v7 = (uint64_t **)result;
  v8 = result + 1;
  if (result + 1 != a2)
  {
    result = (uint64_t *)google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, a2 + 4);
    if (!(_DWORD)result)
    {
      result = (uint64_t *)google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6 + 4, a3);
      if (!(_DWORD)result)
      {
        v19 = v6;
        v20 = v6;
        v14 = &v19;
        if (v6)
          return result;
LABEL_31:
        v6 = v20;
        goto LABEL_32;
      }
      v12 = v6[1];
      if (v12)
      {
        v13 = (uint64_t *)v6[1];
        do
        {
          v14 = (uint64_t **)v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        v17 = (uint64_t **)v6;
        do
        {
          v14 = (uint64_t **)v17[2];
          v16 = *v14 == (uint64_t *)v17;
          v17 = v14;
        }
        while (!v16);
      }
      if (v14 == (uint64_t **)v8
        || (result = (uint64_t *)google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, v14 + 4), (_DWORD)result))
      {
        if (v12)
        {
          v20 = (uint64_t *)v14;
        }
        else
        {
          v20 = v6;
          v14 = (uint64_t **)(v6 + 1);
        }
LABEL_30:
        if (*v14)
          return result;
        goto LABEL_31;
      }
LABEL_29:
      result = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)v7, &v20, a3);
      v14 = (uint64_t **)result;
      goto LABEL_30;
    }
  }
  v9 = *v6;
  if (*v7 == v6)
  {
    v11 = v6;
    goto LABEL_17;
  }
  if (v9)
  {
    v10 = (uint64_t *)*v6;
    do
    {
      v11 = v10;
      v10 = (uint64_t *)v10[1];
    }
    while (v10);
  }
  else
  {
    v15 = v6;
    do
    {
      v11 = (uint64_t *)v15[2];
      v16 = *v11 == (_QWORD)v15;
      v15 = v11;
    }
    while (v16);
  }
  result = (uint64_t *)google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v11 + 4, a3);
  if (!(_DWORD)result)
    goto LABEL_29;
LABEL_17:
  if (v9)
  {
    v20 = v11;
    v14 = (uint64_t **)(v11 + 1);
    goto LABEL_30;
  }
  v20 = v6;
  v14 = (uint64_t **)v6;
LABEL_32:
  std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)&v18, (uint64_t)v7, a4);
  return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v7, (uint64_t)v6, v14, v18);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void CoreML::NeuralNetworkSpecValidator::validateTransposeLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 985)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_TransposeLayerParams_default_instance_;
      }
      if (*((_DWORD *)v5 + 4))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v6 = std::string::append(&v8, "' layer.");
        v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v8.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void sub_19C9BC050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateCopyLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  void *__p[2];
  std::string::size_type v15;

  CoreML::validateInputCount((CoreML *)this, a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      v4 = *(unsigned __int8 **)(*((_QWORD *)a2 + 4) + 8);
      v5 = *(unsigned __int8 ***)(*((_QWORD *)a2 + 7) + 8);
      v6 = v4[23];
      if ((v6 & 0x80u) == 0)
        v7 = (unsigned __int8 *)v4[23];
      else
        v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
      v9 = (char)v8;
      if ((char)v8 < 0)
        v8 = v5[1];
      if (v7 == v8)
      {
        if (v9 >= 0)
          v10 = *(unsigned __int8 **)(*((_QWORD *)a2 + 7) + 8);
        else
          v10 = *v5;
        if ((v6 & 0x80) == 0)
        {
          if (v4[23])
          {
            while (*v4 == *v10)
            {
              ++v4;
              ++v10;
              if (!--v6)
                goto LABEL_24;
            }
            goto LABEL_23;
          }
LABEL_24:
          std::operator+<char>();
          v11 = std::string::append(&v13, "' has identical input and output names.");
          v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
          v15 = v11->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v12;
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v13.__r_.__value_.__l.__data_);
          *this = (void *)13;
          std::operator+<char>();
          if (SHIBYTE(v15) < 0)
            operator delete(__p[0]);
          return;
        }
        if (!memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
          goto LABEL_24;
      }
LABEL_23:
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void sub_19C9BC218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateBatchedMatmulLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  unint64_t *inited;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  uint64_t *v14;
  std::string *v15;
  __int128 v16;
  uint64_t *v17;
  std::string *v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  const CoreML::Specification::WeightParams *v26;
  const CoreML::Specification::WeightParams *v27;
  uint64_t *v28;
  std::string v29;
  void *__p[2];
  std::string::size_type v31;

  CoreML::validateInputCount((CoreML *)this, a2, 1, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      v5 = *((_DWORD *)a2 + 6);
      v6 = *((_DWORD *)a2 + 18);
      if (v5 == 2)
      {
        if (v6 == 2 && *((_DWORD *)a2 + 24) == 1)
        {
          v7 = *((_QWORD *)a2 + 10);
          v8 = *(_DWORD *)(*(_QWORD *)(v7 + 8) + 36);
          v9 = *(_DWORD *)(*(_QWORD *)(v7 + 16) + 36);
          if (v8 > v9)
            v9 = v8;
          if (v9 <= 2)
            v9 = 2;
          if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 13) + 8) + 36) != v9)
          {
            std::operator+<char>();
            v10 = std::string::append(&v29, "': given ranks of the two inputs, rank of the output is incorrect.");
            v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
            v31 = v10->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v11;
            v10->__r_.__value_.__l.__size_ = 0;
            v10->__r_.__value_.__r.__words[2] = 0;
            v10->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v29.__r_.__value_.__l.__data_);
LABEL_33:
            *this = (void *)13;
            std::operator+<char>();
            if (SHIBYTE(v31) < 0)
              operator delete(__p[0]);
            return;
          }
        }
      }
      else
      {
        if (v5 == 1 && v6 == 1 && *((_DWORD *)a2 + 24) == 1)
        {
          if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 13) + 8) + 36) != *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 10) + 8)
                                                                                        + 36))
          {
            std::operator+<char>();
            v12 = std::string::append(&v29, "': has one input, in this case, output and input ranks must be equal but they are not.");
            v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
            v31 = v12->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v13;
            v12->__r_.__value_.__l.__size_ = 0;
            v12->__r_.__value_.__r.__words[2] = 0;
            v12->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v29.__r_.__value_.__l.__data_);
            goto LABEL_33;
          }
          goto LABEL_43;
        }
        if (v5 < 2)
          goto LABEL_43;
      }
      if (*((_DWORD *)a2 + 35) == 1045)
      {
        v14 = (uint64_t *)*((_QWORD *)a2 + 16);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v14 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
      }
      if (*((_BYTE *)v14 + 50))
      {
        std::operator+<char>();
        v15 = std::string::append(&v29, "': has two inputs and 'hasBias' flag is set to True.However, bias is only supported when the layer has 1 input.");
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v31 = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
        goto LABEL_33;
      }
      if (*((int *)a2 + 6) >= 2)
      {
        if (*((_DWORD *)a2 + 35) == 1045)
        {
          v17 = (uint64_t *)*((_QWORD *)a2 + 16);
        }
        else
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v17 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
        }
        if (*((_BYTE *)v17 + 51))
        {
          std::operator+<char>();
          v18 = std::string::append(&v29, "': cannot use dynamic quantization with 2 inputs.");
          v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v31 = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
          goto LABEL_33;
        }
      }
LABEL_43:
      if (*((_DWORD *)a2 + 35) == 1045)
      {
        v20 = (uint64_t *)*((_QWORD *)a2 + 16);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v20 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
      }
      if (*((_BYTE *)v20 + 51))
      {
        if (*((_DWORD *)a2 + 35) == 1045)
        {
          v21 = (uint64_t *)*((_QWORD *)a2 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v21 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
        }
        v22 = (uint64_t *)v21[2];
        if (v22)
          v23 = v22;
        else
          v23 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(__p, "BatchedMatMul");
        CoreML::validateInt8Requirements((CoreML::Result *)this, (uint64_t)v23, (uint64_t)__p);
        if (SHIBYTE(v31) < 0)
          operator delete(__p[0]);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 6) == 1)
      {
        if (*((_DWORD *)a2 + 35) == 1045)
        {
          v24 = (uint64_t *)*((_QWORD *)a2 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v24 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
        }
        v26 = (const CoreML::Specification::WeightParams *)v24[2];
        v25 = (uint64_t *)v24[3];
        if (v26)
          v27 = v26;
        else
          v27 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
        if (v25)
          v28 = v25;
        else
          v28 = &CoreML::Specification::_WeightParams_default_instance_;
        validateInnerProductWeightsBias(this, a2, v27, v28);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          return;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void sub_19C9BC6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateConcatNDLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  void *__p[2];
  std::string::size_type v13;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 2, -1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 980)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_ConcatNDLayerParams_default_instance_;
      }
      if (*((int *)a2 + 18) < 1
        || ((v6 = *(int *)(a2[10][1] + 36), v7 = v5[2], v7 >= -v6) ? (v8 = v7 < v6) : (v8 = 0), v8))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v9 = std::string::append(&v11, "' layer.");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v11.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void sub_19C9BC870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSoftmaxNDLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  void *__p[2];
  std::string::size_type v13;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 950)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_SoftmaxNDLayerParams_default_instance_;
      }
      if (*((int *)a2 + 18) < 1
        || ((v6 = *(int *)(a2[10][1] + 36), v7 = v5[2], v7 >= -v6) ? (v8 = v7 < v6) : (v8 = 0), v8))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v9 = std::string::append(&v11, "' layer.");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v11.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void sub_19C9BCA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReverseLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 960)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_ReverseLayerParams_default_instance_;
      }
      if (*((int *)a2 + 18) < 1 || *((_DWORD *)v5 + 4) == *(_DWORD *)(a2[10][1] + 36))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v6 = std::string::append(&v8, "' layer.");
        v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v8.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void sub_19C9BCB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateFillLikeLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void CoreML::NeuralNetworkSpecValidator::validateFillStaticLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;

  if ((*(_DWORD *)CoreML::Result::Result((CoreML::Result *)this) & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 1085)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_FillStaticLayerParams_default_instance_;
      }
      if (*((_DWORD *)v5 + 4))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v6 = std::string::append(&v8, "' layer.");
        v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v8.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void sub_19C9BCD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReshapeLikeLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 2, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void CoreML::NeuralNetworkSpecValidator::validateReshapeStaticLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 1140)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_ReshapeStaticLayerParams_default_instance_;
      }
      if (*((_DWORD *)v5 + 4))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v6 = std::string::append(&v8, "' layer.");
        v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v8.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void sub_19C9BCF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateWhereLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 3, 3);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void CoreML::NeuralNetworkSpecValidator::validateBroadcastToStaticLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 1105)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_BroadcastToStaticLayerParams_default_instance_;
      }
      if (*((_DWORD *)v5 + 4))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v6 = std::string::append(&v8, "' layer.");
        v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v8.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void sub_19C9BD15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateScatterLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  int v6;
  _QWORD *v7;
  int v8;
  int v9;
  void *v10;
  __int128 *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  void *v16;
  char v17;
  __int128 *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string __p;
  std::string v23;
  void *v24;
  __int128 v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 3, 3);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
    return;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
    return;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  if (!*(_BYTE *)a2)
    goto LABEL_16;
  v24 = 0;
  v25 = 0uLL;
  v6 = *(_DWORD *)(a3 + 72);
  if (v6 < 1)
    goto LABEL_16;
  if (v6 != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "Scatter layer must have 3 input tensor fields filled");
    *this = (void *)13;
    std::operator+<char>();
LABEL_19:
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
      v10 = (void *)v23.__r_.__value_.__r.__words[0];
LABEL_31:
      operator delete(v10);
      return;
    }
    return;
  }
  v7 = *(_QWORD **)(a3 + 80);
  v8 = *(_DWORD *)(v7[1] + 36);
  if (v8 == *(_DWORD *)(v7[3] + 36) && *(_DWORD *)(v7[2] + 36) == 1)
  {
    v9 = *(_DWORD *)(a3 + 96);
    if (v9 < 1)
      goto LABEL_16;
    if (v9 != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v23, "Scatter layer must have 1 output tensor fields filled");
      *this = (void *)13;
      std::operator+<char>();
      goto LABEL_19;
    }
    if (v8 == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 104) + 8) + 36))
    {
LABEL_16:
      CoreML::Result::Result((CoreML::Result *)this);
      return;
    }
    v18 = *(__int128 **)(a3 + 112);
    if (*((char *)v18 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
    }
    else
    {
      v19 = *v18;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
    }
    v20 = std::string::insert(&__p, 0, "Output rank of Scatter layer '");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v23, "' does not match container input.");
  }
  else
  {
    v11 = *(__int128 **)(a3 + 112);
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v12 = *v11;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
    }
    v13 = std::string::insert(&__p, 0, "Input ranks of Scatter layer '");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v23, "' are invalid.");
  }
  v16 = (void *)v15->__r_.__value_.__r.__words[0];
  v26[0] = v15->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
  v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)((char *)&v25 + 7) = *(_QWORD *)((char *)v26 + 7);
  v24 = v16;
  *(_QWORD *)&v25 = v26[0];
  HIBYTE(v25) = v17;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *this = (void *)13;
  std::operator+<char>();
  if (SHIBYTE(v25) < 0)
  {
    v10 = v24;
    goto LABEL_31;
  }
}

void sub_19C9BD490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateStackLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string v17;
  void *__p[2];
  std::string::size_type v19;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 2, -1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 925)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_StackLayerParams_default_instance_;
      }
      if (*((int *)a2 + 18) >= 1)
      {
        v6 = a2[10];
        v7 = v6[2];
        v8 = *(int *)(v6[1] + 36);
        if ((_DWORD)v8 != *(_DWORD *)(v7 + 36))
        {
          std::operator+<char>();
          v15 = std::string::append(&v17, "' layer.");
          v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          v19 = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v17.__r_.__value_.__l.__data_);
          goto LABEL_23;
        }
        v9 = v5[2];
        v10 = ~(_DWORD)v8;
        v11 = v8 + 1;
        if (v9 < v10 || v9 >= v11)
        {
          std::operator+<char>();
          v13 = std::string::append(&v17, "' layer.");
          v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          v19 = v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v17.__r_.__value_.__l.__data_);
LABEL_23:
          *this = (void *)13;
          std::operator+<char>();
          if (SHIBYTE(v19) < 0)
            operator delete(__p[0]);
          return;
        }
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void sub_19C9BD6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSplitNDLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string v16;
  void *__p[2];
  std::string::size_type v18;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 2, -1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 975)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_SplitNDLayerParams_default_instance_;
      }
      v6 = *((unsigned int *)v5 + 4);
      if ((int)v6 >= 1 || (v6 = v5[6]) != 0)
      {
        if (*((int *)a2 + 18) < 1
          || ((v7 = *(int *)(a2[10][1] + 36), v8 = v5[5], v8 >= -v7) ? (v9 = v8 < v7) : (v9 = 0), v9))
        {
          if (v6 == *((_DWORD *)a2 + 12))
          {
            CoreML::Result::Result((CoreML::Result *)this);
            return;
          }
          std::operator+<char>();
          v12 = std::string::append(&v16, "' layer.");
          v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          v18 = v12->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v13;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v16.__r_.__value_.__l.__data_);
        }
        else
        {
          std::operator+<char>();
          v10 = std::string::append(&v16, "' layer.");
          v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          v18 = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v16.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::operator+<char>();
        v14 = std::string::append(&v16, "' layer.");
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v18 = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v16.__r_.__value_.__l.__data_);
      }
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v18) < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_19C9BD984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateClipLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 660)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_ClipLayerParams_default_instance_;
      }
      if (*((float *)v5 + 4) <= *((float *)v5 + 5))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v6 = std::string::append(&v8, "' layer.");
        v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v8.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void sub_19C9BDB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSliceStaticLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string v16;
  void *__p[2];
  std::string::size_type v18;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 995)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_;
      }
      if (*((_DWORD *)v5 + 4))
      {
        if (*((_DWORD *)v5 + 16))
        {
          if (*((_DWORD *)v5 + 28))
          {
            if (*((_DWORD *)v5 + 10))
            {
              if (*((_DWORD *)v5 + 22))
              {
                CoreML::Result::Result((CoreML::Result *)this);
                return;
              }
              std::operator+<char>();
              v14 = std::string::append(&v16, "' layer.");
              v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
              v18 = v14->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = v15;
              v14->__r_.__value_.__l.__size_ = 0;
              v14->__r_.__value_.__r.__words[2] = 0;
              v14->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v16.__r_.__value_.__l.__data_);
            }
            else
            {
              std::operator+<char>();
              v12 = std::string::append(&v16, "' layer.");
              v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
              v18 = v12->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = v13;
              v12->__r_.__value_.__l.__size_ = 0;
              v12->__r_.__value_.__r.__words[2] = 0;
              v12->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v16.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            std::operator+<char>();
            v10 = std::string::append(&v16, "' layer.");
            v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
            v18 = v10->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v11;
            v10->__r_.__value_.__l.__size_ = 0;
            v10->__r_.__value_.__r.__words[2] = 0;
            v10->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v16.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::operator+<char>();
          v8 = std::string::append(&v16, "' layer.");
          v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
          v18 = v8->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v9;
          v8->__r_.__value_.__l.__size_ = 0;
          v8->__r_.__value_.__r.__words[2] = 0;
          v8->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v16.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::operator+<char>();
        v6 = std::string::append(&v16, "' layer.");
        v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v18 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v16.__r_.__value_.__l.__data_);
      }
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v18) < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_19C9BDE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSliceDynamicLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 2, 7);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void CoreML::NeuralNetworkSpecValidator::validateTileLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 1, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void CoreML::NeuralNetworkSpecValidator::validateSlidingWindowsLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  void *__p[2];
  std::string::size_type v13;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 1005)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_SlidingWindowsLayerParams_default_instance_;
      }
      if (*((int *)a2 + 18) < 1
        || ((v6 = *(int *)(a2[10][1] + 36), v7 = v5[2], v7 >= -v6) ? (v8 = v7 < v6) : (v8 = 0), v8))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v9 = std::string::append(&v11, "' layer.");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v11.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void sub_19C9BE10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReductionTypeLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t v4;
  std::string *v5;
  __int128 v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  std::string v59;
  void *__p[2];
  std::string::size_type v61;

  CoreML::validateInputCount((CoreML *)this, a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
    return;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
    return;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  if (*((int *)a2 + 18) < 1)
    goto LABEL_165;
  v4 = *(int *)(*(_QWORD *)(*((_QWORD *)a2 + 10) + 8) + 36);
  std::operator+<char>();
  v5 = std::string::append(&v59, "' layer.");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v61 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  v7 = *((_DWORD *)a2 + 35);
  v8 = 1;
  if (v7 > 1274)
  {
    if (v7 <= 1284)
    {
      if (v7 == 1275)
      {
        v45 = *((_QWORD *)a2 + 16);
        v46 = *(_QWORD *)(v45 + 24);
        if (v46)
          v47 = (_QWORD *)(v46 + 8);
        else
          v47 = 0;
        if (v46)
          v48 = v46 + 8 + 8 * *(int *)(v45 + 16);
        else
          v48 = 0;
        if (v47 != (_QWORD *)v48)
        {
          while (*v47 >= -(int)v4 && *v47 < v4)
          {
            if (++v47 == (_QWORD *)v48)
              goto LABEL_162;
          }
          goto LABEL_160;
        }
      }
      else if (v7 == 1280)
      {
        v21 = *((_QWORD *)a2 + 16);
        v22 = *(_QWORD *)(v21 + 24);
        v23 = v22 ? (_QWORD *)(v22 + 8) : 0;
        v24 = v22 ? v22 + 8 + 8 * *(int *)(v21 + 16) : 0;
        if (v23 != (_QWORD *)v24)
        {
          while (*v23 >= -(int)v4 && *v23 < v4)
          {
            if (++v23 == (_QWORD *)v24)
              goto LABEL_162;
          }
          goto LABEL_160;
        }
      }
    }
    else
    {
      switch(v7)
      {
        case 1285:
          v33 = *((_QWORD *)a2 + 16);
          v34 = *(_QWORD *)(v33 + 24);
          if (v34)
            v35 = (_QWORD *)(v34 + 8);
          else
            v35 = 0;
          if (v34)
            v36 = v34 + 8 + 8 * *(int *)(v33 + 16);
          else
            v36 = 0;
          if (v35 != (_QWORD *)v36)
          {
            while (*v35 >= -(int)v4 && *v35 < v4)
            {
              if (++v35 == (_QWORD *)v36)
                goto LABEL_162;
            }
            goto LABEL_160;
          }
          break;
        case 1290:
          v37 = *((_QWORD *)a2 + 16);
          v38 = *(_QWORD *)(v37 + 24);
          if (v38)
            v39 = (_QWORD *)(v38 + 8);
          else
            v39 = 0;
          if (v38)
            v40 = v38 + 8 + 8 * *(int *)(v37 + 16);
          else
            v40 = 0;
          if (v39 != (_QWORD *)v40)
          {
            while (*v39 >= -(int)v4 && *v39 < v4)
            {
              if (++v39 == (_QWORD *)v40)
                goto LABEL_162;
            }
            goto LABEL_160;
          }
          break;
        case 1295:
          v13 = *((_QWORD *)a2 + 16);
          v14 = *(_QWORD *)(v13 + 24);
          v15 = v14 ? (_QWORD *)(v14 + 8) : 0;
          v16 = v14 ? v14 + 8 + 8 * *(int *)(v13 + 16) : 0;
          if (v15 != (_QWORD *)v16)
          {
            while (*v15 >= -(int)v4 && *v15 < v4)
            {
              if (++v15 == (_QWORD *)v16)
                goto LABEL_162;
            }
            goto LABEL_160;
          }
          break;
      }
    }
  }
  else if (v7 <= 1259)
  {
    if (v7 == 1250)
    {
      v41 = *((_QWORD *)a2 + 16);
      v42 = *(_QWORD *)(v41 + 24);
      if (v42)
        v43 = (_QWORD *)(v42 + 8);
      else
        v43 = 0;
      if (v42)
        v44 = v42 + 8 + 8 * *(int *)(v41 + 16);
      else
        v44 = 0;
      if (v43 != (_QWORD *)v44)
      {
        while (*v43 >= -v4 && *v43 < v4)
        {
          if (++v43 == (_QWORD *)v44)
            goto LABEL_162;
        }
        goto LABEL_160;
      }
    }
    else if (v7 == 1255)
    {
      v17 = *((_QWORD *)a2 + 16);
      v18 = *(_QWORD *)(v17 + 24);
      v19 = v18 ? (_QWORD *)(v18 + 8) : 0;
      v20 = v18 ? v18 + 8 + 8 * *(int *)(v17 + 16) : 0;
      if (v19 != (_QWORD *)v20)
      {
        while (*v19 >= -v4 && *v19 < v4)
        {
          if (++v19 == (_QWORD *)v20)
            goto LABEL_162;
        }
        goto LABEL_160;
      }
    }
  }
  else
  {
    switch(v7)
    {
      case 1260:
        v25 = *((_QWORD *)a2 + 16);
        v26 = *(_QWORD *)(v25 + 24);
        if (v26)
          v27 = (_QWORD *)(v26 + 8);
        else
          v27 = 0;
        if (v26)
          v28 = v26 + 8 + 8 * *(int *)(v25 + 16);
        else
          v28 = 0;
        if (v27 != (_QWORD *)v28)
        {
          while (*v27 >= -v4 && *v27 < v4)
          {
            if (++v27 == (_QWORD *)v28)
              goto LABEL_162;
          }
          goto LABEL_160;
        }
        break;
      case 1265:
        v29 = *((_QWORD *)a2 + 16);
        v30 = *(_QWORD *)(v29 + 24);
        if (v30)
          v31 = (_QWORD *)(v30 + 8);
        else
          v31 = 0;
        if (v30)
          v32 = v30 + 8 + 8 * *(int *)(v29 + 16);
        else
          v32 = 0;
        if (v31 != (_QWORD *)v32)
        {
          while (*v31 >= -v4 && *v31 < v4)
          {
            if (++v31 == (_QWORD *)v32)
              goto LABEL_162;
          }
          goto LABEL_160;
        }
        break;
      case 1270:
        v9 = *((_QWORD *)a2 + 16);
        v10 = *(_QWORD *)(v9 + 24);
        v11 = v10 ? (_QWORD *)(v10 + 8) : 0;
        v12 = v10 ? v10 + 8 + 8 * *(int *)(v9 + 16) : 0;
        if (v11 != (_QWORD *)v12)
        {
          while (*v11 >= -v4 && *v11 < v4)
          {
            if (++v11 == (_QWORD *)v12)
              goto LABEL_162;
          }
LABEL_160:
          *this = (void *)13;
          std::operator+<char>();
          v8 = 0;
        }
        break;
    }
  }
LABEL_162:
  if (SHIBYTE(v61) < 0)
    operator delete(__p[0]);
  if ((v8 & 1) != 0)
LABEL_165:
    CoreML::Result::Result((CoreML::Result *)this);
}

void sub_19C9BE778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLoopLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  int v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t *v19;
  __int128 *v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  __int128 *v24;
  __int128 v25;
  __int128 *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  void *v40;
  __int128 *v41;
  __int128 v42;
  __int128 *v43;
  __int128 v44;
  uint64_t *v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  BOOL v51;
  uint64_t *v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  std::string::size_type v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  std::string::size_type size;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  std::string v88;
  char *v89;
  uint64_t *v90;
  _QWORD *v91[4];
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string __p;
  __int128 v97;
  char *v98;
  char *v99;
  uint64_t *v100;
  _QWORD *v101[4];
  std::string v102;
  std::string v103;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 0, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
    return;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  v6 = CoreML::Result::Result((CoreML::Result *)this);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
    return;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  if (!*(_DWORD *)(a3 + 72)
    || (v7 = *(_QWORD *)(*(_QWORD *)(a3 + 80) + 8), v8 = *(unsigned int *)(v7 + 16), (int)v8 < 1))
  {
LABEL_12:
    if (*(_DWORD *)(a3 + 140) == 615)
    {
      v11 = *(uint64_t **)(a3 + 128);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
      v11 = &CoreML::Specification::_LoopLayerParams_default_instance_;
    }
    v12 = &CoreML::Specification::_NeuralNetwork_default_instance_;
    v13 = v11[2];
    if (v11[3])
      v14 = (uint64_t *)v11[3];
    else
      v14 = &CoreML::Specification::_NeuralNetwork_default_instance_;
    if (*(char *)(v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
    }
    else
    {
      v15 = *(_OWORD *)v13;
      v103.__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 16);
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v15;
    }
    if (v11[4])
      v12 = (uint64_t *)v11[4];
    if (!*((_DWORD *)v12 + 6))
    {
      v22 = *(__int128 **)(a3 + 112);
      if (*((char *)v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
      }
      else
      {
        v23 = *v22;
        v102.__r_.__value_.__r.__words[2] = *((_QWORD *)v22 + 2);
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v23;
      }
      v28 = std::string::insert(&v102, 0, "Loop Layer '");
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      v30 = std::string::append(&v88, "' has an empty body network");
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v98 = (char *)v30->__r_.__value_.__r.__words[2];
      v97 = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v102.__r_.__value_.__l.__data_);
      goto LABEL_54;
    }
    v16 = *((_DWORD *)v14 + 6);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v103.__r_.__value_.__l.__size_)
      {
LABEL_26:
        if (v16 > 0)
          goto LABEL_27;
        goto LABEL_41;
      }
    }
    else if (*((_BYTE *)&v103.__r_.__value_.__s + 23))
    {
      goto LABEL_26;
    }
    if (v16 < 1)
    {
      if (v11[5] || *(_DWORD *)(a3 + 24))
      {
LABEL_27:
        v17 = (uint64_t **)((char *)a2 + 56);
        CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)&v97, (_QWORD *)a2 + 7, (uint64_t **)a2 + 1, *(_BYTE *)a2, *((_DWORD *)a2 + 20), (uint64_t **)a2 + 4);
        if (v16 >= 1)
        {
          CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetwork>((uint64_t)this, (CoreML::Specification::NeuralNetworkLayer *)&v97, (uint64_t)v14);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          {
LABEL_116:
            std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v101[0]);
            std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v99);
            std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v98);
LABEL_117:
            if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              return;
            v40 = (void *)v103.__r_.__value_.__r.__words[0];
            goto LABEL_119;
          }
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          if ((_QWORD *)((char *)a2 + 64) == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 56, &v103))
          {
            if (v101 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v100, &v103))
            {
              v43 = *(__int128 **)(a3 + 112);
              if (*((char *)v43 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)v43, *((_QWORD *)v43 + 1));
              }
              else
              {
                v44 = *v43;
                v94.__r_.__value_.__r.__words[2] = *((_QWORD *)v43 + 2);
                *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v44;
              }
              v78 = std::string::insert(&v94, 0, "Loop Layer '");
              v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
              v95.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v79;
              v78->__r_.__value_.__l.__size_ = 0;
              v78->__r_.__value_.__r.__words[2] = 0;
              v78->__r_.__value_.__r.__words[0] = 0;
              v80 = std::string::append(&v95, "': has conditionVar named '");
              v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v81;
              v80->__r_.__value_.__l.__size_ = 0;
              v80->__r_.__value_.__r.__words[2] = 0;
              v80->__r_.__value_.__r.__words[0] = 0;
              if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v82 = &v103;
              else
                v82 = (std::string *)v103.__r_.__value_.__r.__words[0];
              if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
              else
                size = v103.__r_.__value_.__l.__size_;
              v84 = std::string::append(&__p, (const std::string::value_type *)v82, size);
              v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
              v102.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v85;
              v84->__r_.__value_.__l.__size_ = 0;
              v84->__r_.__value_.__r.__words[2] = 0;
              v84->__r_.__value_.__r.__words[0] = 0;
              v86 = std::string::append(&v102, "' which is not produced by the condition network");
              v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
              v88.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v87;
              v86->__r_.__value_.__l.__size_ = 0;
              v86->__r_.__value_.__r.__words[2] = 0;
              v86->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v102.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v95.__r_.__value_.__l.__data_);
              if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v94.__r_.__value_.__l.__data_);
              *this = (void *)13;
              std::operator+<char>();
              if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v88.__r_.__value_.__l.__data_);
              goto LABEL_116;
            }
          }
          else
          {
            v18 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 7, &v103, (uint64_t)&v103);
            std::set<std::string>::set[abi:ne180100]((uint64_t *)&v88, (uint64_t)(v18 + 7));
            v19 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v100, &v103, (uint64_t)&v103);
            std::set<std::string>::set[abi:ne180100]((uint64_t *)&v102, (uint64_t)(v19 + 7));
            if (std::operator==[abi:ne180100]<std::string,std::less<std::string>,std::allocator<std::string>>(&v88, (unsigned __int8 *)v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__r.__words[2]))
            {
              v20 = *(__int128 **)(a3 + 112);
              if (*((char *)v20 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
              }
              else
              {
                v21 = *v20;
                v92.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
                *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v21;
              }
              v68 = std::string::insert(&v92, 0, "Loop Layer '");
              v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
              v93.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v69;
              v68->__r_.__value_.__l.__size_ = 0;
              v68->__r_.__value_.__r.__words[2] = 0;
              v68->__r_.__value_.__r.__words[0] = 0;
              v70 = std::string::append(&v93, "': has conditionVar named '");
              v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
              v94.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v71;
              v70->__r_.__value_.__l.__size_ = 0;
              v70->__r_.__value_.__r.__words[2] = 0;
              v70->__r_.__value_.__r.__words[0] = 0;
              if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v72 = &v103;
              else
                v72 = (std::string *)v103.__r_.__value_.__r.__words[0];
              if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v73 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
              else
                v73 = v103.__r_.__value_.__l.__size_;
              v74 = std::string::append(&v94, (const std::string::value_type *)v72, v73);
              v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
              v95.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v75;
              v74->__r_.__value_.__l.__size_ = 0;
              v74->__r_.__value_.__r.__words[2] = 0;
              v74->__r_.__value_.__r.__words[0] = 0;
              v76 = std::string::append(&v95, "' which is not produced by the condition network");
              v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v77;
              v76->__r_.__value_.__l.__size_ = 0;
              v76->__r_.__value_.__r.__words[2] = 0;
              v76->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v95.__r_.__value_.__l.__data_);
              if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v94.__r_.__value_.__l.__data_);
              if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v93.__r_.__value_.__l.__data_);
              if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v92.__r_.__value_.__l.__data_);
              *this = (void *)13;
              std::operator+<char>();
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v102.__r_.__value_.__l.__size_);
              std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v88.__r_.__value_.__l.__size_);
              goto LABEL_116;
            }
            std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v102.__r_.__value_.__l.__size_);
            std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v88.__r_.__value_.__l.__size_);
          }
          v45 = v100;
          if (v100 != (uint64_t *)v101)
          {
            do
            {
              if (*((char *)v45 + 55) < 0)
                std::string::__init_copy_ctor_external(&v88, (const std::string::value_type *)v45[4], v45[5]);
              else
                v88 = *(std::string *)(v45 + 4);
              v46 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 7, &v88, (uint64_t)&v88);
              v47 = (_QWORD *)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v100, &v88, (uint64_t)&v88)[7];
              v48 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v100, &v88, (uint64_t)&v88);
              std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v46 + 7, v47, v48 + 8);
              if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v88.__r_.__value_.__l.__data_);
              v49 = (uint64_t *)v45[1];
              if (v49)
              {
                do
                {
                  v50 = v49;
                  v49 = (uint64_t *)*v49;
                }
                while (v49);
              }
              else
              {
                do
                {
                  v50 = (uint64_t *)v45[2];
                  v51 = *v50 == (_QWORD)v45;
                  v45 = v50;
                }
                while (!v51);
              }
              v45 = v50;
            }
            while (v50 != (uint64_t *)v101);
          }
        }
        CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)&v88, (_QWORD *)a2 + 7, (uint64_t **)a2 + 1, *(_BYTE *)a2, *((_DWORD *)a2 + 20) + 1, (uint64_t **)a2 + 4);
        CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetwork>((uint64_t)this, (CoreML::Specification::NeuralNetworkLayer *)&v88, (uint64_t)v12);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          if (v16 <= 0)
          {
            v58 = v90;
            if (v90 != (uint64_t *)v91)
            {
              do
              {
                if (*((char *)v58 + 55) < 0)
                  std::string::__init_copy_ctor_external(&v102, (const std::string::value_type *)v58[4], v58[5]);
                else
                  v102 = *(std::string *)(v58 + 4);
                v59 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, &v102, (uint64_t)&v102);
                v60 = (_QWORD *)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v90, &v102, (uint64_t)&v102)[7];
                v61 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v90, &v102, (uint64_t)&v102);
                std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v59 + 7, v60, v61 + 8);
                if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v102.__r_.__value_.__l.__data_);
                v62 = (uint64_t *)v58[1];
                if (v62)
                {
                  do
                  {
                    v63 = v62;
                    v62 = (uint64_t *)*v62;
                  }
                  while (v62);
                }
                else
                {
                  do
                  {
                    v63 = (uint64_t *)v58[2];
                    v51 = *v63 == (_QWORD)v58;
                    v58 = v63;
                  }
                  while (!v51);
                }
                v58 = v63;
              }
              while (v63 != (uint64_t *)v91);
            }
          }
          else
          {
            v52 = v100;
            if (v100 != (uint64_t *)v101)
            {
              do
              {
                if (*((char *)v52 + 55) < 0)
                  std::string::__init_copy_ctor_external(&v102, (const std::string::value_type *)v52[4], v52[5]);
                else
                  v102 = *(std::string *)(v52 + 4);
                if (v91 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v90, &v102))
                {
                  v53 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, &v102, (uint64_t)&v102);
                  v54 = (_QWORD *)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v90, &v102, (uint64_t)&v102)[7];
                  v55 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v90, &v102, (uint64_t)&v102);
                  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v53 + 7, v54, v55 + 8);
                }
                if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v102.__r_.__value_.__l.__data_);
                v56 = (uint64_t *)v52[1];
                if (v56)
                {
                  do
                  {
                    v57 = v56;
                    v56 = (uint64_t *)*v56;
                  }
                  while (v56);
                }
                else
                {
                  do
                  {
                    v57 = (uint64_t *)v52[2];
                    v51 = *v57 == (_QWORD)v52;
                    v52 = v57;
                  }
                  while (!v51);
                }
                v52 = v57;
              }
              while (v57 != (uint64_t *)v101);
            }
          }
          CoreML::Result::Result((CoreML::Result *)this);
        }
        std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v91[0]);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v89);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v88.__r_.__value_.__r.__words[2]);
        goto LABEL_116;
      }
      v41 = *(__int128 **)(a3 + 112);
      if (*((char *)v41 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)v41, *((_QWORD *)v41 + 1));
      }
      else
      {
        v42 = *v41;
        v102.__r_.__value_.__r.__words[2] = *((_QWORD *)v41 + 2);
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v42;
      }
      v64 = std::string::insert(&v102, 0, "Loop Layer '");
      v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      v66 = std::string::append(&v88, "': has no input, no condition network and max loop iterations is 0.");
      v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v98 = (char *)v66->__r_.__value_.__r.__words[2];
      v97 = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v102.__r_.__value_.__l.__data_);
LABEL_54:
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v98) < 0)
        operator delete((void *)v97);
      goto LABEL_117;
    }
LABEL_41:
    v26 = *(__int128 **)(a3 + 112);
    if (*((char *)v26 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)v26, *((_QWORD *)v26 + 1));
    }
    else
    {
      v27 = *v26;
      v102.__r_.__value_.__r.__words[2] = *((_QWORD *)v26 + 2);
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v27;
    }
    v32 = std::string::insert(&v102, 0, "Loop Layer '");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v88, "': condition variable must be provided if condition network exists and vice versa.");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v98 = (char *)v34->__r_.__value_.__r.__words[2];
    v97 = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v88.__r_.__value_.__l.__data_);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v102.__r_.__value_.__l.__data_);
    goto LABEL_54;
  }
  v9 = (uint64_t *)(*(_QWORD *)(v7 + 24) + 8);
  while (1)
  {
    v10 = *v9++;
    if (v10 >= 2)
      break;
    if (!--v8)
      goto LABEL_12;
  }
  v24 = *(__int128 **)(a3 + 112);
  if (*((char *)v24 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)v24, *((_QWORD *)v24 + 1));
  }
  else
  {
    v25 = *v24;
    v103.__r_.__value_.__r.__words[2] = *((_QWORD *)v24 + 2);
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v25;
  }
  v36 = std::string::insert(&v103, 0, "Loop Layer '");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  v38 = std::string::append(&v88, "' input's length cannot be more than 1");
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v98 = (char *)v38->__r_.__value_.__r.__words[2];
  v97 = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  *this = (void *)13;
  std::operator+<char>();
  if (SHIBYTE(v98) < 0)
  {
    v40 = (void *)v97;
LABEL_119:
    operator delete(v40);
  }
}

void sub_19C9BF360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator((CoreML::NeuralNetworkSpecValidator *)(v59 - 240));
  if (*(char *)(v59 - 89) < 0)
    operator delete(*(void **)(v59 - 112));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_19C9BF5AC(_Unwind_Exception *a1)
{
  char **v1;

  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<std::string,std::less<std::string>,std::allocator<std::string>>(_QWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  _BOOL8 result;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;

  if (a1[2] != a3)
    return 0;
  v3 = (unsigned __int8 *)(a1 + 1);
  v4 = (unsigned __int8 *)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
    return 1;
  do
  {
    result = std::equal_to<std::string>::operator()[abi:ne180100](v4 + 32, a2 + 32);
    if (!result)
      break;
    v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = v4;
    if (v7)
    {
      do
      {
        v4 = v7;
        v7 = *(unsigned __int8 **)v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v4 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
        v9 = *(_QWORD *)v4 == (_QWORD)v8;
        v8 = v4;
      }
      while (!v9);
    }
    v10 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = *(unsigned __int8 **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        v9 = *(_QWORD *)v11 == (_QWORD)a2;
        a2 = v11;
      }
      while (!v9);
    }
    a2 = v11;
  }
  while (v4 != v3);
  return result;
}

void CoreML::NeuralNetworkSpecValidator::validateLoopContinueBreakLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  __int128 *v6;
  __int128 v7;
  __int128 *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string *v13;
  __int128 v14;
  void *v15;
  char v16;
  std::string __p;
  std::string v18;
  void *v19;
  __int128 v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)CoreML::Result::Result((CoreML::Result *)this) & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::Result::Result((CoreML::Result *)this);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 20))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        v19 = 0;
        v20 = 0uLL;
        if (*(_DWORD *)(a3 + 140) == 620)
        {
          v6 = *(__int128 **)(a3 + 112);
          if (*((char *)v6 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
          }
          else
          {
            v7 = *v6;
            __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
          }
          v10 = std::string::insert(&__p, 0, "Loop Break Layer '");
          v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          v18.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          v12 = std::string::append(&v18, "' must be inside the bodyNetwork of a loop layer.");
        }
        else
        {
          v8 = *(__int128 **)(a3 + 112);
          if (*((char *)v8 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
          }
          else
          {
            v9 = *v8;
            __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
          }
          v13 = std::string::insert(&__p, 0, "Loop Continue Layer '");
          v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          v18.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          v12 = std::string::append(&v18, "' must be inside the bodyNetwork of a loop layer.");
        }
        v15 = (void *)v12->__r_.__value_.__r.__words[0];
        v21[0] = v12->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
        v16 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)((char *)&v20 + 7) = *(_QWORD *)((char *)v21 + 7);
        v19 = v15;
        *(_QWORD *)&v20 = v21[0];
        HIBYTE(v20) = v16;
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v20) < 0)
          operator delete(v19);
      }
    }
  }
}

void sub_19C9BF8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRankPreservingReshapeLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  uint64_t *v11;
  int v12;
  int v13;
  std::string *v14;
  __int128 v15;
  uint64_t *v16;
  __int128 v17;
  uint64_t *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string __p;
  std::string v29;
  __int128 v30;
  std::string::size_type v31;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 18) && *((_DWORD *)a2 + 24))
      {
        v4 = CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        v5 = a2[14];
        if (*((char *)v5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*v5, v5[1]);
        }
        else
        {
          v6 = *(_OWORD *)v5;
          __p.__r_.__value_.__r.__words[2] = v5[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
        }
        v7 = std::string::insert(&__p, 0, "Layer '");
        v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v8;
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        v9 = std::string::append(&v29, "' must have rank specified for its input and output.");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v31 = v9->__r_.__value_.__r.__words[2];
        v30 = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *this = (void *)13;
        v4 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
        if (SHIBYTE(v31) < 0)
          operator delete((void *)v30);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (*((_DWORD *)a2 + 35) == 1150)
        {
          v11 = a2[16];
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
          v11 = &CoreML::Specification::_RankPreservingReshapeLayerParams_default_instance_;
        }
        v12 = *((_DWORD *)v11 + 4);
        if (v12)
        {
          v13 = *(_DWORD *)(a2[10][1] + 36);
          if (v13 == *(_DWORD *)(a2[13][1] + 36))
          {
            if (v13 == v12)
            {
              CoreML::Result::Result((CoreML::Result *)this);
              return;
            }
            v18 = a2[14];
            if (*((char *)v18 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*v18, v18[1]);
            }
            else
            {
              v19 = *(_OWORD *)v18;
              __p.__r_.__value_.__r.__words[2] = v18[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
            }
            v24 = std::string::insert(&__p, 0, "RankPreservingReshape Layer '");
            v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
            v29.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v25;
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            v26 = std::string::append(&v29, "': input rank must be same as the length of the target shape property.");
            v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            v31 = v26->__r_.__value_.__r.__words[2];
            v30 = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v29.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            v16 = a2[14];
            if (*((char *)v16 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*v16, v16[1]);
            }
            else
            {
              v17 = *(_OWORD *)v16;
              __p.__r_.__value_.__r.__words[2] = v16[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
            }
            v20 = std::string::insert(&__p, 0, "RankPreservingReshape Layer '");
            v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
            v29.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v21;
            v20->__r_.__value_.__l.__size_ = 0;
            v20->__r_.__value_.__r.__words[2] = 0;
            v20->__r_.__value_.__r.__words[0] = 0;
            v22 = std::string::append(&v29, "': input and output rank must be equal.");
            v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
            v31 = v22->__r_.__value_.__r.__words[2];
            v30 = v23;
            v22->__r_.__value_.__l.__size_ = 0;
            v22->__r_.__value_.__r.__words[2] = 0;
            v22->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v29.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::operator+<char>();
          v14 = std::string::append(&v29, "' layer.");
          v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          v31 = v14->__r_.__value_.__r.__words[2];
          v30 = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v31) < 0)
          operator delete((void *)v30);
      }
    }
  }
}

void sub_19C9BFD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateFlattenTo2DLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  void *__p[2];
  std::string::size_type v13;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 1130)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_FlattenTo2DLayerParams_default_instance_;
      }
      if (*((int *)a2 + 18) < 1
        || ((v6 = *(int *)(a2[10][1] + 36), v7 = v5[2], v7 >= -v6) ? (v8 = v7 < v6) : (v8 = 0), v8))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v9 = std::string::append(&v11, "' layer.");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v11.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void sub_19C9BFEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateExpandDimsLayer(void **this, uint64_t **a2)
{
  unint64_t inited;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  char *v10;
  void **v11;
  void **v12;
  void **v13;
  int v14;
  void **v15;
  uint64_t *v17;
  __int128 v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  __int32 v29;
  __int32 *v30;
  __int32 *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  __int32 v36;
  size_t v37;
  __int32 *v38;
  unint64_t v39;
  uint64_t v40;
  __int32 *v41;
  __int32 *v42;
  __int32 v43;
  __int32 v44;
  __int32 *v45;
  __int32 v46;
  __int32 *v48;
  __int32 *v49;
  __int32 *v50;
  __int32 v51;
  __int32 v52;
  BOOL v53;
  __int32 *v54;
  __int32 *v55;
  __int32 v56;
  __int32 v57;
  char v58;
  uint64_t *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  uint64_t *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  __int128 v70;
  uint64_t *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  __int128 v80;
  __int32 v81;
  std::string v82;
  std::string v83;
  std::string v84;
  void *__p[2];
  std::string::size_type v86;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 1125)
      {
        v5 = a2[16];
      }
      else
      {
        inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v5 = &CoreML::Specification::_ExpandDimsLayerParams_default_instance_;
      }
      if (*((_DWORD *)v5 + 4))
      {
        v6 = 0;
        __p[1] = 0;
        v86 = 0;
        __p[0] = &__p[1];
        while (1)
        {
          if (*((_DWORD *)a2 + 35) == 1125)
          {
            v7 = a2[16];
          }
          else
          {
            inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            v7 = &CoreML::Specification::_ExpandDimsLayerParams_default_instance_;
          }
          if (v6 >= *((int *)v7 + 4))
            break;
          if (*((_DWORD *)a2 + 35) == 1125)
          {
            v8 = a2[16];
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            v8 = &CoreML::Specification::_ExpandDimsLayerParams_default_instance_;
          }
          v9 = *(_DWORD *)(v8[3] + 8 * v6 + 8);
          v10 = (char *)__p[1];
          if (__p[1])
          {
            v11 = &__p[1];
            do
            {
              v12 = (void **)v10;
              v13 = v11;
              v14 = *((_DWORD *)v10 + 7);
              v15 = (void **)(v10 + 8);
              if (v14 >= v9)
              {
                v15 = v12;
                v11 = v12;
              }
              v10 = (char *)*v15;
            }
            while (v10);
            if (v11 != &__p[1])
            {
              if (v14 < v9)
                v12 = v13;
              if (*((_DWORD *)v12 + 7) <= v9)
              {
                v21 = a2[14];
                if (*((char *)v21 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)*v21, v21[1]);
                }
                else
                {
                  v22 = *(_OWORD *)v21;
                  v82.__r_.__value_.__r.__words[2] = v21[2];
                  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v22;
                }
                v61 = std::string::insert(&v82, 0, "ExpandDims Layer '");
                v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
                v83.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v62;
                v61->__r_.__value_.__l.__size_ = 0;
                v61->__r_.__value_.__r.__words[2] = 0;
                v61->__r_.__value_.__r.__words[0] = 0;
                v63 = std::string::append(&v83, "': all the values in the 'axes' parameter must be unique.");
                v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
                v84.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v64;
                v63->__r_.__value_.__l.__size_ = 0;
                v63->__r_.__value_.__r.__words[2] = 0;
                v63->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v83.__r_.__value_.__l.__data_);
                if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v82.__r_.__value_.__l.__data_);
                goto LABEL_109;
              }
            }
          }
          inited = (unint64_t)std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t *)__p, v9, v9);
          ++v6;
        }
        if (*((int *)a2 + 18) >= 1 && *((_DWORD *)a2 + 24) >= 1)
        {
          v19 = *(_DWORD *)(a2[10][1] + 36);
          v81 = *(_DWORD *)(a2[13][1] + 36);
          if (*((_DWORD *)a2 + 35) == 1125)
          {
            v20 = a2[16];
          }
          else
          {
            inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            v20 = &CoreML::Specification::_ExpandDimsLayerParams_default_instance_;
          }
          v27 = *((unsigned int *)v20 + 4);
          v28 = v27 + v19;
          v29 = v81;
          if (v28 != v81)
          {
            v59 = a2[14];
            if (*((char *)v59 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)*v59, v59[1]);
            }
            else
            {
              v60 = *(_OWORD *)v59;
              v82.__r_.__value_.__r.__words[2] = v59[2];
              *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v60;
            }
            v67 = std::string::insert(&v82, 0, "ExpandDims Layer '");
            v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
            v83.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v68;
            v67->__r_.__value_.__l.__size_ = 0;
            v67->__r_.__value_.__r.__words[2] = 0;
            v67->__r_.__value_.__r.__words[0] = 0;
            v69 = std::string::append(&v83, "': input rank plus the length of the axes parameter must equal output rank.");
            v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
            v84.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v70;
            v69->__r_.__value_.__l.__size_ = 0;
            v69->__r_.__value_.__r.__words[2] = 0;
            v69->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v83.__r_.__value_.__l.__data_);
            if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v82.__r_.__value_.__l.__data_);
LABEL_109:
            *this = (void *)13;
            std::operator+<char>();
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v84.__r_.__value_.__l.__data_);
            goto LABEL_130;
          }
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          do
          {
            if (*((_DWORD *)a2 + 35) == 1125)
            {
              v34 = a2[16];
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
              v34 = &CoreML::Specification::_ExpandDimsLayerParams_default_instance_;
            }
            v35 = *(_DWORD *)(v34[3] + 8 * v33 + 8);
            v36 = (v29 & (v35 >> 31)) + v35;
            v37 = v31 - v30;
            inited = (unint64_t)wmemchr(v30, v36, v37);
            if (inited)
              v38 = (__int32 *)inited;
            else
              v38 = v31;
            if (v38 != v31)
            {
              v65 = a2[14];
              if (*((char *)v65 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)*v65, v65[1]);
              }
              else
              {
                v66 = *(_OWORD *)v65;
                v82.__r_.__value_.__r.__words[2] = v65[2];
                *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v66;
              }
              v73 = std::string::insert(&v82, 0, "ExpandDims Layer '");
              v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
              v83.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v74;
              v73->__r_.__value_.__l.__size_ = 0;
              v73->__r_.__value_.__r.__words[2] = 0;
              v73->__r_.__value_.__r.__words[0] = 0;
              v75 = std::string::append(&v83, "': axes parameter list cannot have the same value more than once.");
              v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
              v84.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v76;
              v75->__r_.__value_.__l.__size_ = 0;
              v75->__r_.__value_.__r.__words[2] = 0;
              v75->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v83.__r_.__value_.__l.__data_);
              if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v82.__r_.__value_.__l.__data_);
              goto LABEL_124;
            }
            if ((unint64_t)v31 >= v32)
            {
              v39 = v37 + 1;
              if ((v37 + 1) >> 62)
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v32 - (_QWORD)v30) >> 1 > v39)
                v39 = (uint64_t)(v32 - (_QWORD)v30) >> 1;
              if (v32 - (unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                inited = 0x3FFFFFFFFFFFFFFFLL;
              else
                inited = v39;
              if (inited)
                inited = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(inited);
              else
                v40 = 0;
              v41 = (__int32 *)(inited + 4 * v37);
              *v41 = v36;
              v42 = v41 + 1;
              while (v31 != v30)
              {
                v43 = *--v31;
                *--v41 = v43;
              }
              v32 = inited + 4 * v40;
              if (v30)
                operator delete(v30);
              v30 = v41;
              v31 = v42;
              v29 = v81;
            }
            else
            {
              *v31++ = v36;
            }
            ++v33;
          }
          while (v33 != v27);
          v45 = v30 + 1;
          v44 = *v30;
          v46 = *v30;
          if (v30 != v31 && v45 != v31)
          {
            v48 = v30 + 1;
            v49 = v30;
            v50 = v30 + 1;
            do
            {
              v52 = *v50++;
              v51 = v52;
              v53 = v46 < v52;
              if (v46 <= v52)
                v46 = v51;
              if (v53)
                v49 = v48;
              v48 = v50;
            }
            while (v50 != v31);
            v46 = *v49;
            v54 = v30;
            v55 = v30 + 1;
            do
            {
              v57 = *v55++;
              v56 = v57;
              if (v57 < v44)
              {
                v44 = v56;
                v54 = v45;
              }
              v45 = v55;
            }
            while (v55 != v31);
            v44 = *v54;
          }
          if (v46 < v29 && (v44 & 0x80000000) == 0)
          {
            v58 = 1;
            goto LABEL_127;
          }
          v71 = a2[14];
          if (*((char *)v71 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)*v71, v71[1]);
          }
          else
          {
            v72 = *(_OWORD *)v71;
            v82.__r_.__value_.__r.__words[2] = v71[2];
            *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v72;
          }
          v77 = std::string::insert(&v82, 0, "ExpandDims Layer '");
          v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          v83.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          v79 = std::string::append(&v83, "': axes refers to a dimension that exceeds the output rank.");
          v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
          v84.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v80;
          v79->__r_.__value_.__l.__size_ = 0;
          v79->__r_.__value_.__r.__words[2] = 0;
          v79->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v83.__r_.__value_.__l.__data_);
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v82.__r_.__value_.__l.__data_);
LABEL_124:
          *this = (void *)13;
          std::operator+<char>();
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v84.__r_.__value_.__l.__data_);
          v58 = 0;
LABEL_127:
          if (v30)
            operator delete(v30);
          if ((v58 & 1) == 0)
          {
LABEL_130:
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)__p[1]);
            return;
          }
        }
        CoreML::Result::Result((CoreML::Result *)this);
        goto LABEL_130;
      }
      v17 = a2[14];
      if (*((char *)v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v83, (const std::string::value_type *)*v17, v17[1]);
      }
      else
      {
        v18 = *(_OWORD *)v17;
        v83.__r_.__value_.__r.__words[2] = v17[2];
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v18;
      }
      v23 = std::string::insert(&v83, 0, "ExpandDims Layer '");
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append(&v84, "': length of the 'axes' parameter cannot be 0.");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v86 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v86) < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_19C9C06CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,_QWORD *a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;

  if (v37)
    operator delete(v37);
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(a33);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<int>::__emplace_unique_key_args<int,int const&>(uint64_t *result, int a2, int a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void CoreML::NeuralNetworkSpecValidator::validateSqueezeLayer(void **this, uint64_t **a2)
{
  unint64_t inited;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  char *v11;
  void **v12;
  void **v13;
  void **v14;
  int v15;
  void **v16;
  uint64_t *v18;
  __int128 v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  __int32 v30;
  __int32 *v32;
  __int32 *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  __int32 v38;
  size_t v39;
  __int32 *v40;
  unint64_t v41;
  uint64_t v42;
  __int32 *v43;
  __int32 *v44;
  __int32 v45;
  __int32 v46;
  __int32 *v47;
  __int32 v48;
  __int32 *v50;
  __int32 *v51;
  __int32 *v52;
  __int32 v53;
  __int32 v54;
  BOOL v55;
  __int32 *v56;
  __int32 *v57;
  __int32 v58;
  __int32 v59;
  char v60;
  uint64_t *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  uint64_t *v67;
  __int128 v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  uint64_t *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  __int32 v83;
  std::string v84;
  std::string v85;
  std::string v86;
  void *__p[2];
  std::string::size_type v88;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 1120)
      {
        v5 = a2[16];
      }
      else
      {
        inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v5 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
      }
      if (*((_BYTE *)v5 + 36))
      {
LABEL_11:
        CoreML::Result::Result((CoreML::Result *)this);
        return;
      }
      if (*((_DWORD *)a2 + 35) == 1120)
      {
        v6 = a2[16];
      }
      else
      {
        inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v6 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
      }
      if (*((_DWORD *)v6 + 4))
      {
        v7 = 0;
        __p[1] = 0;
        v88 = 0;
        __p[0] = &__p[1];
        while (1)
        {
          if (*((_DWORD *)a2 + 35) == 1120)
          {
            v8 = a2[16];
          }
          else
          {
            inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            v8 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
          }
          if (v7 >= *((int *)v8 + 4))
            break;
          if (*((_DWORD *)a2 + 35) == 1120)
          {
            v9 = a2[16];
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            v9 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
          }
          v10 = *(_DWORD *)(v9[3] + 8 * v7 + 8);
          v11 = (char *)__p[1];
          if (__p[1])
          {
            v12 = &__p[1];
            do
            {
              v13 = (void **)v11;
              v14 = v12;
              v15 = *((_DWORD *)v11 + 7);
              v16 = (void **)(v11 + 8);
              if (v15 >= v10)
              {
                v16 = v13;
                v12 = v13;
              }
              v11 = (char *)*v16;
            }
            while (v11);
            if (v12 != &__p[1])
            {
              if (v15 < v10)
                v13 = v14;
              if (*((_DWORD *)v13 + 7) <= v10)
              {
                v22 = a2[14];
                if (*((char *)v22 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v84, (const std::string::value_type *)*v22, v22[1]);
                }
                else
                {
                  v23 = *(_OWORD *)v22;
                  v84.__r_.__value_.__r.__words[2] = v22[2];
                  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v23;
                }
                v63 = std::string::insert(&v84, 0, "Squeeze Layer '");
                v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
                v85.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v64;
                v63->__r_.__value_.__l.__size_ = 0;
                v63->__r_.__value_.__r.__words[2] = 0;
                v63->__r_.__value_.__r.__words[0] = 0;
                v65 = std::string::append(&v85, "': all the values in the 'axes' parameter must be unique.");
                v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
                v86.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v66;
                v65->__r_.__value_.__l.__size_ = 0;
                v65->__r_.__value_.__r.__words[2] = 0;
                v65->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v85.__r_.__value_.__l.__data_);
                if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v84.__r_.__value_.__l.__data_);
                goto LABEL_119;
              }
            }
          }
          inited = (unint64_t)std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t *)__p, v10, v10);
          ++v7;
        }
        if (*((int *)a2 + 18) >= 1 && *((_DWORD *)a2 + 24) >= 1)
        {
          v83 = *(_DWORD *)(a2[10][1] + 36);
          v20 = *(_DWORD *)(a2[13][1] + 36);
          if (*((_DWORD *)a2 + 35) == 1120)
          {
            v21 = a2[16];
          }
          else
          {
            inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            v21 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
          }
          v28 = *((unsigned int *)v21 + 4);
          v29 = v28 + v20;
          v30 = v83;
          if (v83 != 1 && v29 != v83)
          {
            v61 = a2[14];
            if (*((char *)v61 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v84, (const std::string::value_type *)*v61, v61[1]);
            }
            else
            {
              v62 = *(_OWORD *)v61;
              v84.__r_.__value_.__r.__words[2] = v61[2];
              *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v62;
            }
            v69 = std::string::insert(&v84, 0, "Squeeze Layer '");
            v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
            v85.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v70;
            v69->__r_.__value_.__l.__size_ = 0;
            v69->__r_.__value_.__r.__words[2] = 0;
            v69->__r_.__value_.__r.__words[0] = 0;
            v71 = std::string::append(&v85, "': output rank plus the length of the axes parameter must equal input rank.");
            v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
            v86.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v72;
            v71->__r_.__value_.__l.__size_ = 0;
            v71->__r_.__value_.__r.__words[2] = 0;
            v71->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v85.__r_.__value_.__l.__data_);
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v84.__r_.__value_.__l.__data_);
LABEL_119:
            *this = (void *)13;
            std::operator+<char>();
            if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v86.__r_.__value_.__l.__data_);
            goto LABEL_140;
          }
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          do
          {
            if (*((_DWORD *)a2 + 35) == 1120)
            {
              v36 = a2[16];
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
              v36 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
            }
            v37 = *(_DWORD *)(v36[3] + 8 * v35 + 8);
            v38 = (v30 & (v37 >> 31)) + v37;
            v39 = v33 - v32;
            inited = (unint64_t)wmemchr(v32, v38, v39);
            if (inited)
              v40 = (__int32 *)inited;
            else
              v40 = v33;
            if (v40 != v33)
            {
              v67 = a2[14];
              if (*((char *)v67 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v84, (const std::string::value_type *)*v67, v67[1]);
              }
              else
              {
                v68 = *(_OWORD *)v67;
                v84.__r_.__value_.__r.__words[2] = v67[2];
                *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v68;
              }
              v75 = std::string::insert(&v84, 0, "Squeeze Layer '");
              v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
              v85.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v76;
              v75->__r_.__value_.__l.__size_ = 0;
              v75->__r_.__value_.__r.__words[2] = 0;
              v75->__r_.__value_.__r.__words[0] = 0;
              v77 = std::string::append(&v85, "': axes parameter list cannot have the same value more than once.");
              v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
              v86.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v78;
              v77->__r_.__value_.__l.__size_ = 0;
              v77->__r_.__value_.__r.__words[2] = 0;
              v77->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v85.__r_.__value_.__l.__data_);
              if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v84.__r_.__value_.__l.__data_);
              goto LABEL_134;
            }
            if ((unint64_t)v33 >= v34)
            {
              v41 = v39 + 1;
              if ((v39 + 1) >> 62)
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v34 - (_QWORD)v32) >> 1 > v41)
                v41 = (uint64_t)(v34 - (_QWORD)v32) >> 1;
              if (v34 - (unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                inited = 0x3FFFFFFFFFFFFFFFLL;
              else
                inited = v41;
              if (inited)
                inited = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(inited);
              else
                v42 = 0;
              v43 = (__int32 *)(inited + 4 * v39);
              *v43 = v38;
              v44 = v43 + 1;
              while (v33 != v32)
              {
                v45 = *--v33;
                *--v43 = v45;
              }
              v34 = inited + 4 * v42;
              if (v32)
                operator delete(v32);
              v32 = v43;
              v33 = v44;
              v30 = v83;
            }
            else
            {
              *v33++ = v38;
            }
            ++v35;
          }
          while (v35 != v28);
          v47 = v32 + 1;
          v46 = *v32;
          v48 = *v32;
          if (v32 != v33 && v47 != v33)
          {
            v50 = v32 + 1;
            v51 = v32;
            v52 = v32 + 1;
            do
            {
              v54 = *v52++;
              v53 = v54;
              v55 = v48 < v54;
              if (v48 <= v54)
                v48 = v53;
              if (v55)
                v51 = v50;
              v50 = v52;
            }
            while (v52 != v33);
            v48 = *v51;
            v56 = v32;
            v57 = v32 + 1;
            do
            {
              v59 = *v57++;
              v58 = v59;
              if (v59 < v46)
              {
                v46 = v58;
                v56 = v47;
              }
              v47 = v57;
            }
            while (v57 != v33);
            v46 = *v56;
          }
          if (v48 < v30 && (v46 & 0x80000000) == 0)
          {
            v60 = 1;
            goto LABEL_137;
          }
          v73 = a2[14];
          if (*((char *)v73 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v84, (const std::string::value_type *)*v73, v73[1]);
          }
          else
          {
            v74 = *(_OWORD *)v73;
            v84.__r_.__value_.__r.__words[2] = v73[2];
            *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v74;
          }
          v79 = std::string::insert(&v84, 0, "Squeeze Layer '");
          v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
          v85.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v80;
          v79->__r_.__value_.__l.__size_ = 0;
          v79->__r_.__value_.__r.__words[2] = 0;
          v79->__r_.__value_.__r.__words[0] = 0;
          v81 = std::string::append(&v85, "': axes refers to a dimension that exceeds the input rank.");
          v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
          v86.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v82;
          v81->__r_.__value_.__l.__size_ = 0;
          v81->__r_.__value_.__r.__words[2] = 0;
          v81->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v85.__r_.__value_.__l.__data_);
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v84.__r_.__value_.__l.__data_);
LABEL_134:
          *this = (void *)13;
          std::operator+<char>();
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v86.__r_.__value_.__l.__data_);
          v60 = 0;
LABEL_137:
          if (v32)
            operator delete(v32);
          if ((v60 & 1) == 0)
          {
LABEL_140:
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)__p[1]);
            return;
          }
        }
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)__p[1]);
        goto LABEL_11;
      }
      v18 = a2[14];
      if (*((char *)v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v85, (const std::string::value_type *)*v18, v18[1]);
      }
      else
      {
        v19 = *(_OWORD *)v18;
        v85.__r_.__value_.__r.__words[2] = v18[2];
        *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v19;
      }
      v24 = std::string::insert(&v85, 0, "Squeeze Layer '");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      v26 = std::string::append(&v86, "': length of the 'axes' parameter cannot be 0.");
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v88 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v88) < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_19C9C106C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,_QWORD *a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;

  if (v37)
    operator delete(v37);
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(a33);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateRangeStaticLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  int v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if ((*(_DWORD *)CoreML::Result::Result((CoreML::Result *)this) & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((int *)a2 + 24) < 1)
        goto LABEL_15;
      v4 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 13) + 8) + 36);
      std::string::basic_string[abi:ne180100]<0>(v7, "Range");
      std::string::basic_string[abi:ne180100]<0>(__p, "output");
      CoreML::checkRank((CoreML::Result *)this, *((_QWORD *)a2 + 14), (uint64_t)v7, 1, 1, (uint64_t)__p, v4);
      if (v6 < 0)
        operator delete(__p[0]);
      if (v8 < 0)
        operator delete(v7[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
LABEL_15:
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19C9C12AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRangeDynamicLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  int v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (*((int *)a2 + 6) < 1)
    CoreML::Result::Result((CoreML::Result *)this);
  else
    CoreML::validateInputCount((CoreML *)this, a2, 1, 3);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((int *)a2 + 24) < 1)
        goto LABEL_18;
      v4 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 13) + 8) + 36);
      std::string::basic_string[abi:ne180100]<0>(v7, "Range");
      std::string::basic_string[abi:ne180100]<0>(__p, "output");
      CoreML::checkRank((CoreML::Result *)this, *((_QWORD *)a2 + 14), (uint64_t)v7, 1, 1, (uint64_t)__p, v4);
      if (v6 < 0)
        operator delete(__p[0]);
      if (v8 < 0)
        operator delete(v7[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
LABEL_18:
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19C9C141C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLoadConstantNDLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _BOOL4 v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  std::string *v20;
  __int128 v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  __int128 v27;
  void *v28;
  std::string *v29;
  __int128 v30;
  std::string v31;
  void *__p[2];
  std::string::size_type v33;

  if ((*(_DWORD *)CoreML::Result::Result((CoreML::Result *)this) & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 1070)
      {
        v5 = (uint64_t *)*((_QWORD *)a2 + 16);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_LoadConstantNDLayerParams_default_instance_;
      }
      if (v5[5])
        v6 = (uint64_t *)v5[5];
      else
        v6 = &CoreML::Specification::_WeightParams_default_instance_;
      v7 = v6[5];
      if (*(char *)(v7 + 23) < 0)
        v8 = *(_QWORD *)(v7 + 8);
      else
        v8 = *(unsigned __int8 *)(v7 + 23);
      v9 = v6[6];
      if (*(char *)(v9 + 23) < 0)
        v10 = *(_QWORD *)(v9 + 8);
      else
        v10 = *(unsigned __int8 *)(v9 + 23);
      v11 = *((_DWORD *)v6 + 4);
      v12 = v6[7];
      if (*(char *)(v12 + 23) < 0)
        v13 = *(_QWORD *)(v12 + 8);
      else
        v13 = *(unsigned __int8 *)(v12 + 23);
      v14 = v11 <= 0;
      v15 = v11 > 0;
      if (v14)
        v16 = 1;
      else
        v16 = 2;
      if (v8)
        v17 = v16;
      else
        v17 = v15;
      if (v10)
        ++v17;
      if (v13)
        v18 = v17 + 1;
      else
        v18 = v17;
      v19 = *((unsigned int *)v5 + 4);
      if (v18 <= 1)
      {
        if ((_DWORD)v19)
        {
          if (v19 <= 5)
          {
            v22 = (uint64_t *)(v5[3] + 8);
            v23 = 1;
            do
            {
              v24 = *v22++;
              v23 *= v24;
              --v19;
            }
            while (v19);
            std::string::basic_string[abi:ne180100]<0>(__p, "LoadConstantND");
            v25 = *((_QWORD *)a2 + 14);
            std::string::basic_string[abi:ne180100]<0>(&v31, "constants");
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v6, v23, 1, (const void **)__p, v25, (uint64_t)&v31);
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v31.__r_.__value_.__l.__data_);
            if (SHIBYTE(v33) < 0)
              operator delete(__p[0]);
            if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
            {
              if (*((char *)this + 31) < 0)
                operator delete(this[1]);
              CoreML::Result::Result((CoreML::Result *)this);
            }
            return;
          }
          std::operator+<char>();
          v29 = std::string::append(&v31, "'can only accept shape of length 1 to 5");
          v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          v33 = v29->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v30;
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          *this = (void *)13;
          std::operator+<char>();
          goto LABEL_54;
        }
      }
      else if ((_DWORD)v19)
      {
        std::operator+<char>();
        v20 = std::string::append(&v31, "' has both full precision and half precision weight fields populated");
        v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v33 = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        *this = (void *)13;
        std::operator+<char>();
LABEL_54:
        if (SHIBYTE(v33) < 0)
          operator delete(__p[0]);
        if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v28 = (void *)v31.__r_.__value_.__r.__words[0];
        goto LABEL_58;
      }
      std::operator+<char>();
      v26 = std::string::append(&v31, "' layer.");
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v33 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      *this = (void *)13;
      std::operator+<char>();
      if ((SHIBYTE(v33) & 0x80000000) == 0)
        return;
      v28 = __p[0];
LABEL_58:
      operator delete(v28);
    }
  }
}

void sub_19C9C1798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomNormalStaticLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;

  if ((*(_DWORD *)CoreML::Result::Result((CoreML::Result *)this) & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 1175)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_RandomNormalStaticLayerParams_default_instance_;
      }
      if (*((_DWORD *)v5 + 4))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v6 = std::string::append(&v8, "' layer.");
        v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v8.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void sub_19C9C193C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomUniformLikeLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 1190)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_RandomUniformLikeLayerParams_default_instance_;
      }
      if (*((float *)v5 + 6) <= *((float *)v5 + 7))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v6 = std::string::append(&v8, "' layer.");
        v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v8.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void sub_19C9C1AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomUniformStaticLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string v10;
  void *__p[2];
  std::string::size_type v12;

  if ((*(_DWORD *)CoreML::Result::Result((CoreML::Result *)this) & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 1195)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_RandomUniformStaticLayerParams_default_instance_;
      }
      if (*((_DWORD *)v5 + 4))
      {
        if (*((float *)v5 + 12) <= *((float *)v5 + 13))
        {
          CoreML::Result::Result((CoreML::Result *)this);
          return;
        }
        std::operator+<char>();
        v6 = std::string::append(&v10, "' layer.");
        v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v12 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v10.__r_.__value_.__l.__data_);
      }
      else
      {
        std::operator+<char>();
        v8 = std::string::append(&v10, "' layer.");
        v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v12 = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v10.__r_.__value_.__l.__data_);
      }
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v12) < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_19C9C1C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomUniformDynamicLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 1200)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_RandomUniformDynamicLayerParams_default_instance_;
      }
      if (*((float *)v5 + 6) <= *((float *)v5 + 7))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v6 = std::string::append(&v8, "' layer.");
        v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v8.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void sub_19C9C1E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliLikeLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  float v6;
  std::string *v8;
  __int128 v9;
  std::string v10;
  void *__p[2];
  std::string::size_type v12;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 1210)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_RandomBernoulliLikeLayerParams_default_instance_;
      }
      v6 = *((float *)v5 + 6);
      if (v6 >= 0.0 && v6 <= 1.0)
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v8 = std::string::append(&v10, "' layer.");
        v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v12 = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v10.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v12) < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void sub_19C9C1F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliStaticLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  float v6;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;

  if ((*(_DWORD *)CoreML::Result::Result((CoreML::Result *)this) & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 1215)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_RandomBernoulliStaticLayerParams_default_instance_;
      }
      if (*((_DWORD *)v5 + 4))
      {
        v6 = *((float *)v5 + 12);
        if (v6 >= 0.0 && v6 <= 1.0)
        {
          CoreML::Result::Result((CoreML::Result *)this);
          return;
        }
        std::operator+<char>();
        v8 = std::string::append(&v12, "' layer.");
        v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v14 = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v12.__r_.__value_.__l.__data_);
      }
      else
      {
        std::operator+<char>();
        v10 = std::string::append(&v12, "' layer.");
        v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        v14 = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v12.__r_.__value_.__l.__data_);
      }
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v14) < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_19C9C215C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliDynamicLayer(void **this, uint64_t **a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t *v5;
  float v6;
  std::string *v8;
  __int128 v9;
  std::string v10;
  void *__p[2];
  std::string::size_type v12;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*((_DWORD *)a2 + 35) == 1220)
      {
        v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        v5 = &CoreML::Specification::_RandomBernoulliDynamicLayerParams_default_instance_;
      }
      v6 = *((float *)v5 + 6);
      if (v6 >= 0.0 && v6 <= 1.0)
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        v8 = std::string::append(&v10, "' layer.");
        v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v12 = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v10.__r_.__value_.__l.__data_);
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v12) < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void sub_19C9C22DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateTopKLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  char *v6;
  _QWORD *v7;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v8;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  __int128 *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  std::string v23;
  std::string v24;
  _BYTE v25[24];
  void *__p[2];
  char v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 2, 2);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      std::string::basic_string[abi:ne180100]<0>(__p, "TopK");
      v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)a2 + 32);
      if (v27 < 0)
        operator delete(__p[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        v7 = *(_QWORD **)(*(_QWORD *)(a3 + 32) + 8);
        v8 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 32, v7);
        v9 = (const CoreML::Specification::NeuralNetworkLayer *)((char *)a2 + 40);
        if (v9 == v8
          || (v8 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v6, *(_QWORD **)(*(_QWORD *)(a3 + 56) + 16)), v9 == v8)|| (v10 = *(_DWORD *)std::map<std::string,std::string>::at((uint64_t)v6, v7), v8 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::map<std::string,std::string>::at((uint64_t)v6, *(_QWORD **)(*(_QWORD *)(a3 + 56) + 16)), v10 == *(_DWORD *)v8))
        {
          if (*(int *)(a3 + 72) < 1
            || (*(_DWORD *)(a3 + 140) != 1015
              ? (CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v8),
                 v11 = &CoreML::Specification::_TopKLayerParams_default_instance_)
              : (v11 = *(uint64_t **)(a3 + 128)),
                (v12 = *(int *)(*(_QWORD *)(*(_QWORD *)(a3 + 80) + 8) + 36), v13 = v11[2], v13 >= -v12) && v13 < v12))
          {
            CoreML::Result::Result((CoreML::Result *)this);
            return;
          }
          std::operator+<char>();
          v14 = std::string::append(&v24, "' layer.");
          v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          *(_QWORD *)&v25[16] = *((_QWORD *)&v14->__r_.__value_.__l + 2);
          *(_OWORD *)v25 = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v24.__r_.__value_.__l.__data_);
          *this = (void *)13;
          std::operator+<char>();
        }
        else
        {
          v16 = *(__int128 **)(a3 + 112);
          if (*((char *)v16 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
          }
          else
          {
            v17 = *v16;
            v23.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
            *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v17;
          }
          v18 = std::string::insert(&v23, 0, "Layer '");
          v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v24.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          v20 = std::string::append(&v24, "' of type 'TopK' expects equal ranks for its input and second output, but they are not equal.");
          v21 = v20->__r_.__value_.__r.__words[0];
          v28[0] = v20->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v28 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
          v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)&v25[15] = *(_QWORD *)((char *)v28 + 7);
          *(_QWORD *)v25 = v21;
          *(_QWORD *)&v25[8] = v28[0];
          v25[23] = v22;
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v24.__r_.__value_.__l.__data_);
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v23.__r_.__value_.__l.__data_);
          *this = (void *)13;
          std::operator+<char>();
        }
        if ((v25[23] & 0x80000000) != 0)
          operator delete(*(void **)v25);
      }
    }
  }
}

void sub_19C9C263C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateArgMaxLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  unint64_t *inited;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  void *v15[2];
  std::string::size_type v16;
  void *__p[2];
  char v18;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_DWORD *)(a3 + 140) == 1025)
      {
        v7 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v7 = &CoreML::Specification::_ArgMaxLayerParams_default_instance_;
      }
      if (*((_BYTE *)v7 + 24))
        goto LABEL_11;
      std::string::basic_string[abi:ne180100]<0>(__p, "ArgMax");
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)a2 + 32);
      if (v18 < 0)
        operator delete(__p[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
LABEL_11:
        if (*(int *)(a3 + 72) < 1
          || (*(_DWORD *)(a3 + 140) != 1025
            ? (CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited),
               v8 = &CoreML::Specification::_ArgMaxLayerParams_default_instance_)
            : (v8 = *(uint64_t **)(a3 + 128)),
              (v9 = *(int *)(*(_QWORD *)(*(_QWORD *)(a3 + 80) + 8) + 36), v10 = v8[2], v10 >= -v9)
            ? (v11 = v10 < v9)
            : (v11 = 0),
              v11))
        {
          CoreML::Result::Result((CoreML::Result *)this);
        }
        else
        {
          std::operator+<char>();
          v12 = std::string::append(&v14, "' layer.");
          v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          v16 = v12->__r_.__value_.__r.__words[2];
          *(_OWORD *)v15 = v13;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v14.__r_.__value_.__l.__data_);
          *this = (void *)13;
          std::operator+<char>();
          if (SHIBYTE(v16) < 0)
            operator delete(v15[0]);
        }
      }
    }
  }
}

void sub_19C9C289C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateArgMinLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  unint64_t *inited;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  void *v15[2];
  std::string::size_type v16;
  void *__p[2];
  char v18;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      if (*(_DWORD *)(a3 + 140) == 1020)
      {
        v7 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v7 = &CoreML::Specification::_ArgMinLayerParams_default_instance_;
      }
      if (*((_BYTE *)v7 + 24))
        goto LABEL_11;
      std::string::basic_string[abi:ne180100]<0>(__p, "ArgMin");
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)__p, (uint64_t)a2 + 32);
      if (v18 < 0)
        operator delete(__p[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
LABEL_11:
        if (*(int *)(a3 + 72) < 1
          || (*(_DWORD *)(a3 + 140) != 1020
            ? (CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited),
               v8 = &CoreML::Specification::_ArgMinLayerParams_default_instance_)
            : (v8 = *(uint64_t **)(a3 + 128)),
              (v9 = *(int *)(*(_QWORD *)(*(_QWORD *)(a3 + 80) + 8) + 36), v10 = v8[2], v10 >= -v9)
            ? (v11 = v10 < v9)
            : (v11 = 0),
              v11))
        {
          CoreML::Result::Result((CoreML::Result *)this);
        }
        else
        {
          std::operator+<char>();
          v12 = std::string::append(&v14, "' layer.");
          v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          v16 = v12->__r_.__value_.__r.__words[2];
          *(_OWORD *)v15 = v13;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v14.__r_.__value_.__l.__data_);
          *this = (void *)13;
          std::operator+<char>();
          if (SHIBYTE(v16) < 0)
            operator delete(v15[0]);
        }
      }
    }
  }
}

void sub_19C9C2AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLayerNormalizationLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int *v15;
  int *v16;
  int *v17;
  int v18;
  int v19;
  std::string *v20;
  void *v21;
  char v22;
  std::string v23;
  void *__p;
  _BYTE v25[15];
  char v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  CoreML::validateInputCount((CoreML *)this, a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      v4 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_19CB39696);
      if (*((_DWORD *)a2 + 35) == 1350)
      {
        v5 = *((_QWORD *)a2 + 16);
        v6 = *(int *)(v5 + 16);
        if ((_DWORD)v6)
        {
          if ((uint64_t *)v5 != &CoreML::Specification::_LayerNormalizationLayerParams_default_instance_)
          {
            v7 = *(_QWORD *)(v5 + 40);
            if (v7)
            {
              v8 = *(_QWORD *)(v5 + 48);
              if (v8)
              {
                if ((uint64_t *)v7 == &CoreML::Specification::_WeightParams_default_instance_ || !*(_QWORD *)(v7 + 64))
                {
                  v12 = *(_QWORD *)(v5 + 24);
                  v13 = v12 + 8;
                  v14 = v12 == 0;
                  if (v12)
                    v15 = (int *)(v12 + 8);
                  else
                    v15 = 0;
                  v16 = (int *)(v13 + 8 * v6);
                  if (v14)
                    v17 = 0;
                  else
                    v17 = v16;
                  v18 = 1;
                  while (v15 != v17)
                  {
                    v19 = *v15;
                    v15 += 2;
                    v18 *= v19;
                  }
                  if (*(_DWORD *)(v7 + 16) == v18 && *(_DWORD *)(v8 + 16) == v18)
                  {
                    CoreML::Result::Result((CoreML::Result *)this);
LABEL_21:
                    if (v26 < 0)
                      operator delete(__p);
                    return;
                  }
                  std::operator+<char>();
                  v20 = std::string::append(&v23, "' layer.");
                  v21 = (void *)v20->__r_.__value_.__r.__words[0];
                  v27[0] = v20->__r_.__value_.__l.__size_;
                  *(_QWORD *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1]
                                                                           + 7);
                  v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
                  v20->__r_.__value_.__l.__size_ = 0;
                  v20->__r_.__value_.__r.__words[2] = 0;
                  v20->__r_.__value_.__r.__words[0] = 0;
                  if (v26 < 0)
                    operator delete(__p);
                  __p = v21;
                  *(_QWORD *)v25 = v27[0];
                  *(_QWORD *)&v25[7] = *(_QWORD *)((char *)v27 + 7);
                  v26 = v22;
                  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v23.__r_.__value_.__l.__data_);
LABEL_20:
                  *this = (void *)13;
                  std::operator+<char>();
                  goto LABEL_21;
                }
              }
            }
          }
        }
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
      }
      std::operator+<char>();
      v9 = std::string::append(&v23, "' layer.");
      v10 = (void *)v9->__r_.__value_.__r.__words[0];
      v27[0] = v9->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
      v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (v26 < 0)
        operator delete(__p);
      __p = v10;
      *(_QWORD *)v25 = v27[0];
      *(_QWORD *)&v25[7] = *(_QWORD *)((char *)v27 + 7);
      v26 = v11;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      goto LABEL_20;
    }
  }
}

void sub_19C9C2E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateConstantPadLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  std::string *v12;
  __int128 v13;
  std::string *p_p;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string __p;
  std::string v31;
  std::string v32;
  std::string v33;
  __int128 v34;
  std::string::size_type v35;
  void *v36[2];
  char v37;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      std::string::basic_string[abi:ne180100]<0>(v36, "ConstantPad");
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)v36, (uint64_t)a2 + 32);
      if (v37 < 0)
        operator delete(v36[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (*(_DWORD *)(a3 + 140) == 1155)
        {
          v7 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
          v7 = &CoreML::Specification::_ConstantPaddingLayerParams_default_instance_;
        }
        if (*(_DWORD *)(a3 + 24) == 1)
        {
          v8 = *((unsigned int *)v7 + 4);
          if ((v8 & 1) != 0)
          {
            std::operator+<char>();
            v12 = std::string::append(&v31, "', length of 'padAmounts' parameter is ");
            v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
            v32.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v13;
            v12->__r_.__value_.__l.__size_ = 0;
            v12->__r_.__value_.__r.__words[2] = 0;
            v12->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&__p, v8);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              size = __p.__r_.__value_.__l.__size_;
            v16 = std::string::append(&v32, (const std::string::value_type *)p_p, size);
            v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
            v33.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
            v16->__r_.__value_.__l.__size_ = 0;
            v16->__r_.__value_.__r.__words[2] = 0;
            v16->__r_.__value_.__r.__words[0] = 0;
            v18 = std::string::append(&v33, ", an odd value, which is not allowed.");
            v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
            v35 = v18->__r_.__value_.__r.__words[2];
            v34 = v19;
            v18->__r_.__value_.__l.__size_ = 0;
            v18->__r_.__value_.__r.__words[2] = 0;
            v18->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v33.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v32.__r_.__value_.__l.__data_);
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v31.__r_.__value_.__l.__data_);
LABEL_60:
            *this = (void *)13;
            std::operator+<char>();
LABEL_61:
            if (SHIBYTE(v35) < 0)
              operator delete((void *)v34);
            return;
          }
          if (!(_DWORD)v8)
          {
            std::operator+<char>();
            v20 = std::string::append(&v33, "', length of 'padAmounts' cannot be zero when only 1 input is provided.");
            v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
            v35 = v20->__r_.__value_.__r.__words[2];
            v34 = v21;
            v20->__r_.__value_.__l.__size_ = 0;
            v20->__r_.__value_.__r.__words[2] = 0;
            v20->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v33.__r_.__value_.__l.__data_);
            *this = (void *)13;
            std::operator+<char>();
            goto LABEL_61;
          }
          if (*((_BYTE *)v7 + 40) && (int)v8 >= 2)
          {
            v9 = 0;
            v10 = (_DWORD *)(v7[3] + 16);
            while ((int)*(v10 - 2) < 1 || *v10 < 1)
            {
              v10 += 4;
              if (v8 >> 1 == ++v9)
                goto LABEL_27;
            }
            std::operator+<char>();
            v22 = std::string::append(&v31, "', 'padToGivenOutputSizeMode' is true, and both padding values corresponding to dimension ");
            v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
            v32.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v23;
            v22->__r_.__value_.__l.__size_ = 0;
            v22->__r_.__value_.__r.__words[2] = 0;
            v22->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&__p, v9);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = &__p;
            else
              v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v25 = __p.__r_.__value_.__l.__size_;
            v26 = std::string::append(&v32, (const std::string::value_type *)v24, v25);
            v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            v33.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            v28 = std::string::append(&v33, " are non zero, which is invalid. Only one value can be non-zero.");
            v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
            v35 = v28->__r_.__value_.__r.__words[2];
            v34 = v29;
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v33.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v32.__r_.__value_.__l.__data_);
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v31.__r_.__value_.__l.__data_);
            goto LABEL_60;
          }
        }
LABEL_27:
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19C9C32C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateNMSLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 2, 5);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, a2, 4, 4);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void CoreML::NeuralNetworkSpecValidator::validateArgsortLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *p_p;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string __p;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  __int128 v37;
  std::string::size_type v38;
  void *v39[2];
  char v40;

  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      std::string::basic_string[abi:ne180100]<0>(v39, "Argsort");
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (_QWORD *)a3, (uint64_t)v39, (uint64_t)a2 + 32);
      if (v40 < 0)
        operator delete(v39[0]);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        if (*(_DWORD *)(a3 + 140) == 1461)
        {
          v7 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
          v7 = &CoreML::Specification::_ArgSortLayerParams_default_instance_;
        }
        v8 = v7[2];
        if (v8 < 0)
        {
          std::operator+<char>();
          v10 = std::string::append(&v36, "', which is not supported. It must be positive.");
          v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          v38 = v10->__r_.__value_.__r.__words[2];
          v37 = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v36.__r_.__value_.__l.__data_);
          *this = (void *)13;
          std::operator+<char>();
        }
        else
        {
          if (*(int *)(a3 + 72) < 1 || (v9 = *(int *)(*(_QWORD *)(*(_QWORD *)(a3 + 80) + 8) + 36), v8 < v9))
          {
            CoreML::Result::Result((CoreML::Result *)this);
            return;
          }
          std::to_string(&v31, v8);
          v12 = std::string::insert(&v31, 0, "Value of 'axis' is ");
          v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          v32.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v13;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          v14 = std::string::append(&v32, ", but it must be in the range [0,");
          v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          v33.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&__p, v9);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          v18 = std::string::append(&v33, (const std::string::value_type *)p_p, size);
          v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v34.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          v20 = std::string::append(&v34, ") for layer of type 'ArgSort' and name '");
          v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          v35.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          v22 = *(_QWORD *)(a3 + 112);
          v23 = *(char *)(v22 + 23);
          if (v23 >= 0)
            v24 = *(const std::string::value_type **)(a3 + 112);
          else
            v24 = *(const std::string::value_type **)v22;
          if (v23 >= 0)
            v25 = *(unsigned __int8 *)(v22 + 23);
          else
            v25 = *(_QWORD *)(v22 + 8);
          v26 = std::string::append(&v35, v24, v25);
          v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v36.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          v28 = std::string::append(&v36, "'.");
          v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v38 = v28->__r_.__value_.__r.__words[2];
          v37 = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v36.__r_.__value_.__l.__data_);
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v35.__r_.__value_.__l.__data_);
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v34.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v33.__r_.__value_.__l.__data_);
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v32.__r_.__value_.__l.__data_);
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v31.__r_.__value_.__l.__data_);
          *this = (void *)13;
          std::operator+<char>();
        }
        if (SHIBYTE(v38) < 0)
          operator delete((void *)v37);
      }
    }
  }
}

void sub_19C9C3784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (*(char *)(v47 - 73) < 0)
    operator delete(*(void **)(v47 - 96));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateFailUnknownType(CoreML::NeuralNetworkSpecValidator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  __int128 v20;
  std::string::size_type v21;

  std::string::basic_string[abi:ne180100]<0>(&v16, "CoreML.Specification.NeuralNetworkLayer");
  v4 = std::string::insert(&v16, 0, "Unsupported layer type (");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v17, ") for layer '");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = *((_QWORD *)a2 + 14);
  v9 = *(char *)(v8 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)*((_QWORD *)a2 + 14);
  else
    v10 = *(const std::string::value_type **)v8;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(v8 + 23);
  else
    v11 = *(_QWORD *)(v8 + 8);
  v12 = std::string::append(&v18, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v19, "'.");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v21 = v14->__r_.__value_.__r.__words[2];
  v20 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)this = 13;
  std::operator+<char>();
  if (SHIBYTE(v21) < 0)
    operator delete((void *)v20);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_19C9C39D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void CoreML::Model::~Model(CoreML::Model *this)
{
  *(_QWORD *)this = &off_1E3D597D0;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E3D597D0;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1A1AD6260);
}

CoreML::Result *CoreML::Model::addInput@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, const CoreML::Specification::FeatureType **a3@<X2>, CoreML::Result *a4@<X8>)
{
  uint64_t v7;
  CoreML::Specification::ModelDescription *v8;
  CoreML::Specification::FeatureDescription *v9;
  std::string *v10;
  CoreML::Specification::FeatureType *Copy;
  uint64_t v12;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(CoreML::Specification::ModelDescription **)(v7 + 16);
  if (!v8)
  {
    v8 = (CoreML::Specification::ModelDescription *)operator new();
    CoreML::Specification::ModelDescription::ModelDescription(v8);
    *(_QWORD *)(v7 + 16) = v8;
  }
  v9 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((uint64_t)v8 + 16);
  v10 = (std::string *)*((_QWORD *)v9 + 2);
  if (v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v9 + 2, (uint64_t)a2);
  else
    std::string::operator=(v10, a2);
  Copy = CoreML::FeatureType::allocateCopy(a3);
  v12 = *((_QWORD *)v9 + 4);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *((_QWORD *)v9 + 4) = Copy;
  return CoreML::Result::Result(a4);
}

void sub_19C9C3B80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40E043F9A7);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::Model::addOutput@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, const CoreML::Specification::FeatureType **a3@<X2>, CoreML::Result *a4@<X8>)
{
  uint64_t v7;
  CoreML::Specification::ModelDescription *v8;
  CoreML::Specification::FeatureDescription *v9;
  std::string *v10;
  CoreML::Specification::FeatureType *Copy;
  uint64_t v12;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(CoreML::Specification::ModelDescription **)(v7 + 16);
  if (!v8)
  {
    v8 = (CoreML::Specification::ModelDescription *)operator new();
    CoreML::Specification::ModelDescription::ModelDescription(v8);
    *(_QWORD *)(v7 + 16) = v8;
  }
  v9 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((uint64_t)v8 + 40);
  v10 = (std::string *)*((_QWORD *)v9 + 2);
  if (v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v9 + 2, (uint64_t)a2);
  else
    std::string::operator=(v10, a2);
  Copy = CoreML::FeatureType::allocateCopy(a3);
  v12 = *((_QWORD *)v9 + 4);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *((_QWORD *)v9 + 4) = Copy;
  return CoreML::Result::Result(a4);
}

void sub_19C9C3C68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40E043F9A7);
  _Unwind_Resume(a1);
}

CoreML::Model *CoreML::Model::Model(CoreML::Model *this)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v7;

  *(_QWORD *)this = &off_1E3D597D0;
  *((_QWORD *)this + 1) = 0;
  v2 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  _ZNSt3__115allocate_sharedB8ne180100IN6CoreML13Specification5ModelENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((CoreML::Specification::Model **)&v7);
  std::shared_ptr<MIL::IRProgram const>::operator=[abi:ne180100]((uint64_t)v2, &v7);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_DWORD *)(*((_QWORD *)this + 1) + 24) = 9;
  return this;
}

void sub_19C9C3D24(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::Model *_ZNSt3__115allocate_sharedB8ne180100IN6CoreML13Specification5ModelENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(CoreML::Specification::Model **a1)
{
  _QWORD *v2;
  CoreML::Specification::Model *result;

  v2 = operator new(0x48uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E3D5BC68;
  result = CoreML::Specification::Model::Model((CoreML::Specification::Model *)(v2 + 3));
  *a1 = result;
  a1[1] = (CoreML::Specification::Model *)v2;
  return result;
}

void sub_19C9C3D78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

CoreML::Specification::Model *std::allocate_shared[abi:ne180100]<CoreML::Specification::Model,std::allocator<CoreML::Specification::Model>,CoreML::Specification::Model const&,void>(CoreML::Specification::Model **a1, const CoreML::Specification::Model *a2)
{
  _QWORD *v4;
  CoreML::Specification::Model *result;

  v4 = operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E3D5BC68;
  result = CoreML::Specification::Model::Model((CoreML::Specification::Model *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (CoreML::Specification::Model *)v4;
  return result;
}

void sub_19C9C3DE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

CoreML::Model *CoreML::Model::Model(CoreML::Model *this, const CoreML::Specification::Model *a2)
{
  CoreML **v3;
  CoreML::Specification::Model *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;

  *(_QWORD *)this = &off_1E3D597D0;
  *((_QWORD *)this + 1) = 0;
  v3 = (CoreML **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  std::allocate_shared[abi:ne180100]<CoreML::Specification::Model,std::allocator<CoreML::Specification::Model>,CoreML::Specification::Model const&,void>((CoreML::Specification::Model **)&v9, a2);
  std::shared_ptr<MIL::IRProgram const>::operator=[abi:ne180100]((uint64_t)v3, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  CoreML::downgradeSpecificationVersion(*v3, v4);
  return this;
}

void sub_19C9C3E94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void CoreML::Model::validate(CoreML::Model *this, const CoreML::Specification::Model *a2)
{
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  std::string::size_type v7;
  void *v8;
  int v9;
  char v10;
  uint64_t *v11;
  int v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  void *size;
  int v18;
  int v19;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *inited;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  int v32;
  int data;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  std::string::size_type v59;
  void *v60[2];
  uint64_t v61;
  std::string::size_type v62;
  void *v63[2];
  uint64_t v64;
  char v65[4];
  std::string v66;
  uint64_t v67;
  void *__p;
  char v69;
  uint64_t v70;
  std::string v71;
  uint64_t v72;
  std::string v73;

  v4 = *((_DWORD *)a2 + 6);
  if (v4)
  {
    if (v4 >= 10)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v66);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66.__r_.__value_.__r.__words[2], (uint64_t)"The model supplied is of version ", 33);
      v5 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", intended for a newer version of Xcode. This version of Xcode supports model version ", 86);
      v6 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" or earlier.", 12);
      std::stringbuf::str();
      v59 = 7;
      std::operator+<char>();
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      v66.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
      v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words
                                + *(_QWORD *)(v66.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50]
                                                                                                  + 64);
      v66.__r_.__value_.__r.__words[2] = v7;
      v67 = MEMORY[0x1E0DE4FB8] + 16;
      if (v69 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD61C4](&v70);
      goto LABEL_47;
    }
    v9 = *((_DWORD *)a2 + 11);
    v10 = 1;
    if (v9 <= 302)
    {
      if ((v9 - 200) < 3)
        goto LABEL_20;
    }
    else if (v9 > 499)
    {
      if (v9 == 500 || v9 == 502)
        goto LABEL_20;
    }
    else if (v9 == 303 || v9 == 403)
    {
      goto LABEL_20;
    }
    v10 = 0;
LABEL_20:
    v65[0] = v10;
    v65[1] = 0;
    v65[2] = v9 == 502;
    v65[3] = v9 == 502;
    if (*((_QWORD *)a2 + 2))
      v11 = (uint64_t *)*((_QWORD *)a2 + 2);
    else
      v11 = &CoreML::Specification::_ModelDescription_default_instance_;
    CoreML::validateModelDescription((uint64_t)&v62, (uint64_t)v11, v4, v65);
    v12 = v62;
    if ((v62 & 0xFFFFFFEF) != 0)
      goto LABEL_43;
    if (!*((_BYTE *)a2 + 28))
    {
LABEL_42:
      if ((v12 & 0xFFFFFFEF) == 0)
      {
        inited = CoreML::Result::Result((CoreML::Result *)&v66);
        v21 = (uint64_t *)*((_QWORD *)a2 + 2);
        if (!v21)
          v21 = &CoreML::Specification::_ModelDescription_default_instance_;
        v22 = v21[4];
        if (v22)
          v23 = v22 + 8;
        else
          v23 = 0;
        v24 = *((int *)v21 + 6);
        if (!(_DWORD)v24)
        {
LABEL_100:
          CoreML::Result::Result((CoreML::Result *)&v71);
          goto LABEL_101;
        }
        v25 = 8 * v24;
        while (1)
        {
          v26 = *(uint64_t **)(*(_QWORD *)v23 + 32);
          if (!v26)
            v26 = &CoreML::Specification::_FeatureType_default_instance_;
          if (*((_BYTE *)v26 + 16))
          {
            if (*((_DWORD *)v26 + 9) == 5)
            {
              v27 = (uint64_t *)v26[3];
            }
            else
            {
              inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
              v27 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
            }
            v28 = *((_DWORD *)v27 + 16);
            v29 = v28 > 0x3D;
            v30 = (1 << v28) & 0x2008020000000000;
            if (!v29 && v30 != 0)
            {
              v32 = *((_DWORD *)a2 + 11);
              if (v32 <= 499)
              {
                if (v32 != 303 && v32 != 403)
                {
LABEL_203:
                  std::string::basic_string[abi:ne180100]<0>(&v73, "Default optional values are only allowed for neural networks.");
                  v71.__r_.__value_.__r.__words[0] = 13;
                  std::operator+<char>();
LABEL_146:
                  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v73.__r_.__value_.__l.__data_);
LABEL_101:
                  data = (int)v71.__r_.__value_.__l.__data_;
                  v66.__r_.__value_.__r.__words[0] = v71.__r_.__value_.__r.__words[0];
                  if (SHIBYTE(v67) < 0)
                  {
                    operator delete((void *)v66.__r_.__value_.__l.__size_);
                    data = (int)v66.__r_.__value_.__l.__data_;
                  }
                  *(_OWORD *)&v66.__r_.__value_.__r.__words[1] = *(_OWORD *)&v71.__r_.__value_.__r.__words[1];
                  v67 = v72;
                  if ((data & 0xFFFFFFEF) != 0)
                    goto LABEL_184;
                  v34 = *((_DWORD *)a2 + 11);
                  if (v34 <= 402)
                  {
                    if (v34 > 301)
                    {
                      switch(v34)
                      {
                        case 302:
                          goto LABEL_183;
                        case 303:
                          goto LABEL_165;
                        case 402:
                          goto LABEL_183;
                      }
                    }
                    else if ((v34 - 200) < 3)
                    {
                      goto LABEL_183;
                    }
                  }
                  else
                  {
                    if (v34 > 501)
                    {
                      if (v34 > 899)
                      {
                        if (v34 == 900)
                          goto LABEL_183;
                        if (v34 != 3000)
                          goto LABEL_205;
                      }
                      else if (v34 != 502)
                      {
                        if (v34 != 601)
                          goto LABEL_205;
LABEL_183:
                        if (((uint64_t)v66.__r_.__value_.__l.__data_ & 0xFFFFFFEF) != 0)
                        {
LABEL_184:
                          v59 = v66.__r_.__value_.__r.__words[0];
                          *(_OWORD *)v60 = *(_OWORD *)&v66.__r_.__value_.__r.__words[1];
                          v61 = v67;
                          *(_OWORD *)&v66.__r_.__value_.__r.__words[1] = 0uLL;
                          v67 = 0;
                        }
                        else
                        {
                          if (*((_QWORD *)a2 + 2))
                            v42 = (uint64_t *)*((_QWORD *)a2 + 2);
                          else
                            v42 = &CoreML::Specification::_ModelDescription_default_instance_;
                          v43 = v42[7];
                          if (v43)
                            v44 = v43 + 8;
                          else
                            v44 = 0;
                          v45 = *((int *)v42 + 12);
                          if ((_DWORD)v45)
                          {
                            v46 = 8 * v45;
                            while (1)
                            {
                              v47 = *(uint64_t **)(*(_QWORD *)v44 + 32);
                              if (!v47)
                                v47 = &CoreML::Specification::_FeatureType_default_instance_;
                              if (*((_BYTE *)v47 + 16))
                                break;
                              v44 += 8;
                              v46 -= 8;
                              if (!v46)
                                goto LABEL_200;
                            }
                            std::string::basic_string[abi:ne180100]<0>(&v71, "Outputs cannot be optional.");
                            v59 = 12;
                            std::operator+<char>();
                            if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v71.__r_.__value_.__l.__data_);
                          }
                          else
                          {
LABEL_200:
                            CoreML::Result::Result((CoreML::Result *)&v59);
                          }
                        }
                        if (SHIBYTE(v67) < 0)
                        {
                          size = (void *)v66.__r_.__value_.__l.__size_;
LABEL_187:
                          operator delete(size);
                        }
LABEL_44:
                        if (SHIBYTE(v64) < 0)
                        {
                          v8 = v63[0];
LABEL_46:
                          operator delete(v8);
                        }
                        goto LABEL_47;
                      }
LABEL_165:
                      v35 = (uint64_t *)*((_QWORD *)a2 + 2);
                      if (!v35)
                        v35 = &CoreML::Specification::_ModelDescription_default_instance_;
                      v36 = v35[4];
                      if (v36)
                        v37 = v36 + 8;
                      else
                        v37 = 0;
                      v38 = *((int *)v35 + 6);
                      if (!(_DWORD)v38)
                        goto LABEL_179;
                      v39 = 0;
                      v40 = 8 * v38;
                      do
                      {
                        v41 = *(uint64_t **)(*(_QWORD *)v37 + 32);
                        if (!v41)
                          v41 = &CoreML::Specification::_FeatureType_default_instance_;
                        if (*((_DWORD *)v41 + 9) == 8)
                        {
                          v39 = 1;
                        }
                        else if (!*((_BYTE *)v41 + 16))
                        {
                          goto LABEL_179;
                        }
                        v37 += 8;
                        v40 -= 8;
                      }
                      while (v40);
                      if (((int)v38 < 1) | v39 & 1)
                      {
LABEL_179:
                        CoreML::Result::Result((CoreML::Result *)&v71);
LABEL_180:
                        v66.__r_.__value_.__r.__words[0] = v71.__r_.__value_.__r.__words[0];
                        if (SHIBYTE(v67) < 0)
                          operator delete((void *)v66.__r_.__value_.__l.__size_);
                        *(_OWORD *)&v66.__r_.__value_.__r.__words[1] = *(_OWORD *)&v71.__r_.__value_.__r.__words[1];
                        v67 = v72;
                        goto LABEL_183;
                      }
                      std::string::basic_string[abi:ne180100]<0>(&v73, "At least one feature for a neural network must NOT be optional.");
                      v71.__r_.__value_.__r.__words[0] = 13;
                      std::operator+<char>();
LABEL_228:
                      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v73.__r_.__value_.__l.__data_);
                      goto LABEL_180;
                    }
                    if (v34 == 403 || v34 == 500)
                      goto LABEL_165;
                    if (v34 == 501)
                      goto LABEL_183;
                  }
LABEL_205:
                  v48 = (uint64_t *)*((_QWORD *)a2 + 2);
                  if (!v48)
                    v48 = &CoreML::Specification::_ModelDescription_default_instance_;
                  v49 = v48[4];
                  if (v49)
                    v50 = v49 + 8;
                  else
                    v50 = 0;
                  v51 = *((int *)v48 + 6);
                  if ((_DWORD)v51)
                  {
                    v52 = 8 * v51;
                    while (1)
                    {
                      v53 = *(uint64_t **)(*(_QWORD *)v50 + 32);
                      if (!v53)
                        v53 = &CoreML::Specification::_FeatureType_default_instance_;
                      if (*((_BYTE *)v53 + 16))
                        break;
                      v50 += 8;
                      v52 -= 8;
                      if (!v52)
                        goto LABEL_216;
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v73, "Features cannot be optional to this type of model.");
                    v71.__r_.__value_.__r.__words[0] = 13;
                    std::operator+<char>();
                  }
                  else
                  {
LABEL_216:
                    v54 = v48[7];
                    if (v54)
                      v55 = v54 + 8;
                    else
                      v55 = 0;
                    v56 = *((int *)v48 + 12);
                    if (!(_DWORD)v56)
                      goto LABEL_179;
                    v57 = 8 * v56;
                    while (1)
                    {
                      v58 = *(uint64_t **)(*(_QWORD *)v55 + 32);
                      if (!v58)
                        v58 = &CoreML::Specification::_FeatureType_default_instance_;
                      if (*((_BYTE *)v58 + 16))
                        break;
                      v55 += 8;
                      v57 -= 8;
                      if (!v57)
                        goto LABEL_179;
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v73, "Outputs cannot be optional.");
                    v71.__r_.__value_.__r.__words[0] = 12;
                    std::operator+<char>();
                  }
                  goto LABEL_228;
                }
              }
              else if (v32 != 500 && v32 != 502 && v32 != 3000)
              {
                goto LABEL_203;
              }
              if (*((int *)a2 + 6) <= 4)
              {
                std::string::basic_string[abi:ne180100]<0>(&v73, "Default value for optional inputs is supported from specification 5 (iOS 14) onwards!");
                v71.__r_.__value_.__r.__words[0] = 12;
                std::operator+<char>();
                goto LABEL_146;
              }
            }
          }
          v23 += 8;
          v25 -= 8;
          if (!v25)
            goto LABEL_100;
        }
      }
LABEL_43:
      v59 = v62;
      *(_OWORD *)v60 = *(_OWORD *)v63;
      v61 = v64;
      v63[0] = 0;
      v63[1] = 0;
      v64 = 0;
      goto LABEL_44;
    }
    if (*((int *)a2 + 6) <= 3)
    {
      std::to_string(&v73, 4);
      v13 = std::string::insert(&v73, 0, "Model specification version for an updatable model must be '");
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v15 = std::string::append(&v71, "' or above.");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      v59 = 6;
      std::operator+<char>();
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      {
        size = (void *)v66.__r_.__value_.__r.__words[0];
        goto LABEL_187;
      }
      goto LABEL_44;
    }
    CoreML::Result::Result((CoreML::Result *)&v66);
    v18 = *((_DWORD *)a2 + 11);
    if (v18 > 402)
    {
      if ((v18 - 403) >= 2 && v18 != 500)
        goto LABEL_151;
    }
    else if ((v18 - 200) >= 3 && v18 != 303)
    {
LABEL_151:
      memset(&v73, 0, sizeof(v73));
      MEMORY[0x1A1AD5EAC](&v73, "This model type is not supported for on-device update.");
      v71.__r_.__value_.__r.__words[0] = 14;
      std::operator+<char>();
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      if (SHIBYTE(v67) < 0)
        operator delete((void *)v66.__r_.__value_.__l.__size_);
      goto LABEL_39;
    }
    v71 = v66;
    v72 = v67;
LABEL_39:
    v12 = (int)v71.__r_.__value_.__l.__data_;
    v62 = v71.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v64) < 0)
    {
      operator delete(v63[0]);
      v12 = v62;
    }
    *(_OWORD *)v63 = *(_OWORD *)&v71.__r_.__value_.__r.__words[1];
    v64 = v72;
    goto LABEL_42;
  }
  std::string::basic_string[abi:ne180100]<0>(&v66, "Model specification version field missing or corrupt.");
  v59 = 6;
  std::operator+<char>();
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = (void *)v66.__r_.__value_.__r.__words[0];
    goto LABEL_46;
  }
LABEL_47:
  if ((v59 & 0xFFFFFFEF) != 0)
  {
    *(_QWORD *)this = v59;
    *(_OWORD *)((char *)this + 8) = *(_OWORD *)v60;
    *((_QWORD *)this + 3) = v61;
    v60[0] = 0;
    v60[1] = 0;
    v61 = 0;
    goto LABEL_49;
  }
  v19 = *((_DWORD *)a2 + 11);
  if (v19 > 559)
  {
    if (v19 > 899)
    {
      switch(v19)
      {
        case 2000:
          CoreML::validate<(MLModelType)2000>((uint64_t)this, (uint64_t)a2);
          break;
        case 2001:
          CoreML::validate<(MLModelType)2001>(this, (uint64_t)a2);
          break;
        case 2002:
          CoreML::validate<(MLModelType)2002>((uint64_t)this, (uint64_t)a2);
          break;
        case 2003:
          CoreML::validate<(MLModelType)2003>((uint64_t)this, (uint64_t)a2);
          break;
        case 2004:
          CoreML::validate<(MLModelType)2004>((uint64_t)this, (uint64_t)a2);
          break;
        case 2005:
          CoreML::validate<(MLModelType)2005>((uint64_t)this, (uint64_t)a2);
          break;
        case 2006:
          CoreML::validate<(MLModelType)2006>((uint64_t)this, (uint64_t)a2);
          break;
        default:
          if (v19 == 900 || v19 == 3000)
            goto LABEL_112;
          goto LABEL_125;
      }
    }
    else
    {
      switch(v19)
      {
        case 600:
          CoreML::validate<(MLModelType)600>((uint64_t)this, (uint64_t)a2);
          break;
        case 601:
          CoreML::validate<(MLModelType)601>((uint64_t)this, (uint64_t)a2);
          break;
        case 602:
          CoreML::validate<(MLModelType)602>((uint64_t)this, (uint64_t)a2);
          break;
        case 603:
          CoreML::validate<(MLModelType)603>((uint64_t)this, (uint64_t)a2);
          break;
        case 604:
          CoreML::validate<(MLModelType)604>((uint64_t)this, (uint64_t)a2);
          break;
        case 605:
        case 608:
          goto LABEL_125;
        case 606:
          CoreML::validate<(MLModelType)606>((uint64_t)this, (uint64_t)a2);
          break;
        case 607:
          CoreML::validate<(MLModelType)607>((uint64_t)this, (uint64_t)a2);
          break;
        case 609:
          CoreML::validate<(MLModelType)609>((uint64_t)this, (uint64_t)a2);
          break;
        case 610:
          CoreML::validate<(MLModelType)610>(this, (uint64_t)a2);
          break;
        default:
          if (v19 != 560)
            goto LABEL_125;
          CoreML::validate<(MLModelType)560>((uint64_t)this, (uint64_t)a2);
          break;
      }
    }
    goto LABEL_49;
  }
  if (v19 > 399)
  {
    if (v19 <= 499)
    {
      switch(v19)
      {
        case 400:
          CoreML::validate<(MLModelType)400>((uint64_t)this, (uint64_t)a2);
          break;
        case 401:
          CoreML::validate<(MLModelType)401>((uint64_t)this, (uint64_t)a2);
          break;
        case 402:
          CoreML::validate<(MLModelType)402>(this, a2);
          break;
        case 403:
          CoreML::validate<(MLModelType)403>((unint64_t *)this, (uint64_t)a2);
          break;
        case 404:
          CoreML::validate<(MLModelType)404>((uint64_t)this, (uint64_t)a2);
          break;
        default:
          goto LABEL_125;
      }
      goto LABEL_49;
    }
    if (v19 <= 501)
    {
      if (v19 == 500)
        CoreML::validate<(MLModelType)500>((uint64_t)this, (uint64_t)a2);
      else
        CoreML::validate<(MLModelType)501>((uint64_t)this, (uint64_t)a2);
      goto LABEL_49;
    }
    switch(v19)
    {
      case 502:
LABEL_112:
        CoreML::Result::Result(this);
        goto LABEL_49;
      case 555:
        CoreML::validate<(MLModelType)555>((uint64_t)this, (uint64_t)a2);
        goto LABEL_49;
      case 556:
        CoreML::validate<(MLModelType)556>((uint64_t)this, (uint64_t)a2);
        goto LABEL_49;
    }
LABEL_125:
    std::string::basic_string[abi:ne180100]<0>(&v66, "Model did not specify a valid model-parameter type.");
    *(_QWORD *)this = 12;
    std::operator+<char>();
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    goto LABEL_49;
  }
  if (v19 <= 299)
  {
    switch(v19)
    {
      case 200:
        CoreML::validate<(MLModelType)200>(this, (uint64_t)a2);
        goto LABEL_49;
      case 201:
        CoreML::validate<(MLModelType)201>(this, a2);
        goto LABEL_49;
      case 202:
        CoreML::validate<(MLModelType)202>(this, a2);
        goto LABEL_49;
    }
    goto LABEL_125;
  }
  switch(v19)
  {
    case 300:
      CoreML::validate<(MLModelType)300>((uint64_t)this, (uint64_t)a2);
      break;
    case 301:
      CoreML::validate<(MLModelType)301>((uint64_t)this, (uint64_t)a2);
      break;
    case 302:
      CoreML::validate<(MLModelType)302>(this, a2);
      break;
    case 303:
      CoreML::validate<(MLModelType)303>((uint64_t)this, (uint64_t)a2);
      break;
    case 304:
      CoreML::validate<(MLModelType)304>((void **)this, (uint64_t)a2);
      break;
    default:
      goto LABEL_125;
  }
LABEL_49:
  if (SHIBYTE(v61) < 0)
    operator delete(v60[0]);
}

