void sub_19C9C4BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,void *__p,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (*(char *)(v34 - 97) < 0)
    operator delete(*(void **)(v34 - 120));
  if (a34 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

double CoreML::Model::load(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  double result;
  google::protobuf::MessageLite *v6;
  uint64_t v7;
  int v8;
  void **v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void **p_p;
  int v15[4];
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *__p;
  __int128 v23;
  _QWORD v24[2];
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;

  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "unable to open file for read");
    *(_QWORD *)a1 = 3;
    std::operator+<char>();
    if (SHIBYTE(v23) < 0)
      operator delete(__p);
  }
  else
  {
    v6 = *(google::protobuf::MessageLite **)(a3 + 8);
    __p = &off_1E3D598A0;
    *(_QWORD *)&v23 = &off_1E3D59870;
    *((_QWORD *)&v23 + 1) = a2;
    v24[0] = &off_1E3D59950;
    v24[1] = &v23;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v29 = 0;
    v30 = 0;
    v28 = 0x2000;
    v12 = 0;
    v13 = 0;
    p_p = &__p;
    *(_QWORD *)v15 = 0;
    *(_QWORD *)((char *)&v15[1] + 2) = 0;
    v16 = 0x7FFFFFFFLL;
    v17 = 0x647FFFFFFFLL;
    v18 = 100;
    v19 = 1;
    v20 = 0;
    v21 = 0;
    google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)&v12);
    LODWORD(v17) = 0x7FFFFFFF;
    v7 = v13 + SHIDWORD(v16);
    v13 = v7;
    v8 = v15[0] - v16;
    if (v15[0] <= (int)v16)
      v8 = 0;
    else
      v13 = v7 - v8;
    HIDWORD(v16) = v8;
    if ((google::protobuf::MessageLite::ParseFromCodedStream(v6, (google::protobuf::io::CodedInputStream *)&v12) & 1) != 0)
    {
      CoreML::Result::Result((CoreML::Result *)a1);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v10, "unable to deserialize object");
      *(_QWORD *)a1 = 5;
      std::operator+<char>();
      if (v11 < 0)
        operator delete(v10);
    }
    google::protobuf::io::CodedInputStream::~CodedInputStream((google::protobuf::io::CodedInputStream *)&v12);
    __p = &off_1E3D598A0;
    google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((google::protobuf::io::CopyingInputStreamAdaptor *)v24);
    if ((*(_DWORD *)a1 & 0xFFFFFFEF) == 0)
    {
      CoreML::Model::validate((CoreML::Model *)&__p, *(const CoreML::Specification::Model **)(a3 + 8));
      *(_QWORD *)a1 = __p;
      v9 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        operator delete(*v9);
      result = *(double *)&v23;
      *(_OWORD *)v9 = v23;
      *(_QWORD *)(a1 + 24) = v24[0];
    }
  }
  return result;
}

void sub_19C9C4EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (*(char *)(v31 + 31) < 0)
    operator delete(*(void **)(v31 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Model::save(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  CoreML::Specification::Model *v10;
  void *v11;
  google::protobuf::MessageLite *v12;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  char v18;
  void *__p;
  void (**v20)(google::protobuf::io::OstreamOutputStream::CopyingOstreamOutputStream *__hidden);
  uint64_t *v21;
  void (**v22)(google::protobuf::io::CopyingOutputStreamAdaptor *__hidden);
  void (***v23)(google::protobuf::io::OstreamOutputStream::CopyingOstreamOutputStream *__hidden);
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[408];
  _QWORD v30[20];

  v30[19] = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1E0DE4FB0];
  v5 = MEMORY[0x1E0DE4FB0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F48];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  v30[0] = MEMORY[0x1E0DE4FB0] + 64;
  v28 = v7;
  *(_QWORD *)&v29[*(_QWORD *)(v7 - 24) - 8] = v8;
  v9 = (std::ios_base *)&v29[*(_QWORD *)(v28 - 24) - 8];
  std::ios_base::init(v9, v29);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v28 = v4 + 24;
  v30[0] = v5;
  MEMORY[0x1A1AD5F3C](v29);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)&v29[*(_QWORD *)(v28 - 24) - 8], *(_DWORD *)&v29[*(_QWORD *)(v28 - 24) + 24] | 4);
  if (*(_DWORD *)&v29[*(_QWORD *)(v28 - 24) + 24])
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "unable to open file for write");
    *(_QWORD *)a1 = 3;
    std::operator+<char>();
    if (SHIBYTE(v21) < 0)
    {
      v11 = __p;
LABEL_6:
      operator delete(v11);
    }
  }
  else
  {
    CoreML::downgradeSpecificationVersion(*(CoreML **)(a2 + 8), v10);
    CoreML::Model::validate((CoreML::Model *)&v14, *(const CoreML::Specification::Model **)(a2 + 8));
    if ((v14 & 0xFFFFFFEF) != 0)
    {
      *(_QWORD *)a1 = v14;
      *(_OWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 24) = v16;
      goto LABEL_14;
    }
    v12 = *(google::protobuf::MessageLite **)(a2 + 8);
    __p = &off_1E3D59908;
    v20 = &off_1E3D598E0;
    v21 = &v28;
    v22 = &off_1E3D59990;
    v23 = &v20;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0x2000;
    if ((google::protobuf::MessageLite::SerializeToZeroCopyStream(v12, (google::protobuf::io::ZeroCopyOutputStream *)&__p) & 1) != 0)
    {
      CoreML::Result::Result((CoreML::Result *)a1);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v17, "unable to serialize object");
      *(_QWORD *)a1 = 4;
      std::operator+<char>();
      if (v18 < 0)
        operator delete(v17);
    }
    google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)&__p);
    if (SHIBYTE(v16) < 0)
    {
      v11 = (void *)v15;
      goto LABEL_6;
    }
  }
LABEL_14:
  v28 = *v6;
  *(_QWORD *)&v29[*(_QWORD *)(v28 - 24) - 8] = v6[3];
  MEMORY[0x1A1AD5F48](v29);
  std::ostream::~ostream();
  return MEMORY[0x1A1AD61C4](v30);
}

void sub_19C9C5210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a21 < 0)
    operator delete(__p);
  google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)&a22);
  if (a15 < 0)
    operator delete(a10);
  std::ofstream::~ofstream(&a34);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<CoreML::Specification::Model *,std::shared_ptr<CoreML::Specification::Model>::__shared_ptr_default_delete<CoreML::Specification::Model,CoreML::Specification::Model>,std::allocator<CoreML::Specification::Model>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<CoreML::Specification::Model *,std::shared_ptr<CoreML::Specification::Model>::__shared_ptr_default_delete<CoreML::Specification::Model,CoreML::Specification::Model>,std::allocator<CoreML::Specification::Model>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<CoreML::Specification::Model *,std::shared_ptr<CoreML::Specification::Model>::__shared_ptr_default_delete<CoreML::Specification::Model,CoreML::Specification::Model>,std::allocator<CoreML::Specification::Model>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN6CoreML13Specification5ModelEE27__shared_ptr_default_deleteIS3_S3_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void _MLModelSpecification::_MLModelSpecification(_MLModelSpecification *this, const CoreML::Specification::Model **a2)
{
  CoreML::Specification::Model *v4;
  _QWORD *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v4 = (CoreML::Specification::Model *)operator new();
  CoreML::Specification::Model::Model(v4, a2[1]);
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E3D5C5D0;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v4;
  *(_QWORD *)&v6 = v4;
  *((_QWORD *)&v6 + 1) = v5;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_OWORD *)this = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_19C9C53E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreML::Specification::Metadata>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BCA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::Specification::Metadata>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BCA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void _MLModelDescriptionSpecification::_MLModelDescriptionSpecification(_MLModelDescriptionSpecification *this, const CoreML::Specification::ModelDescription *a2)
{
  _QWORD *v4;

  v4 = operator new(0xC8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E3D5BC30;
  *(_QWORD *)this = CoreML::Specification::ModelDescription::ModelDescription((CoreML::Specification::ModelDescription *)(v4 + 3), a2);
  *((_QWORD *)this + 1) = v4;
}

void sub_19C9C54C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void CoreML::validate<(MLModelType)501>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BYTE v10[8];
  std::__shared_weak_count *v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 __p;
  uint64_t v18;

  if (*(_QWORD *)(a2 + 16))
    v4 = *(uint64_t **)(a2 + 16);
  else
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::Result::Result((CoreML::Result *)&v16);
  v5 = *(_DWORD *)(a2 + 24);
  v12 = 0;
  CoreML::validateModelDescription((uint64_t)&v13, (uint64_t)v4, v5, (char *)&v12);
  v6 = v13;
  v16 = v13;
  if (SHIBYTE(v18) < 0)
  {
    operator delete((void *)__p);
    v6 = v16;
  }
  __p = v14;
  v18 = v15;
  if ((v6 & 0xFFFFFFEF) != 0)
  {
    *(_QWORD *)a1 = v16;
    *(_OWORD *)(a1 + 8) = __p;
    *(_QWORD *)(a1 + 24) = v18;
    __p = 0uLL;
    v18 = 0;
  }
  else
  {
    CoreML::Recommender::constructAndValidateItemSimilarityRecommenderFromSpec((CoreML::Recommender *)v10, (const CoreML::Specification::Model *)a2);
    v7 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    CoreML::Result::Result((CoreML::Result *)a1);
  }
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p);
}

void sub_19C9C55FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::validate<(MLModelType)602>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  unsigned int *v12;
  unint64_t *inited;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unsigned int *v18[3];
  void *v19;
  _BYTE __p[24];
  unsigned int *v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  _BYTE v25[24];
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 16))
    v4 = *(uint64_t **)(a2 + 16);
  else
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::Result::Result((CoreML::Result *)&v19);
  v5 = *(_DWORD *)(a2 + 24);
  LODWORD(v21) = 0;
  CoreML::validateModelDescription((uint64_t)&v24, (uint64_t)v4, v5, (char *)&v21);
  v6 = (int)v24;
  v19 = v24;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    v6 = (int)v19;
  }
  *(_OWORD *)__p = *(_OWORD *)v25;
  *(_QWORD *)&__p[16] = *(_QWORD *)&v25[16];
  if ((v6 & 0xFFFFFFEF) == 0)
  {
    v7 = (unsigned int *)operator new(0x10uLL);
    *(_OWORD *)v7 = xmmword_19CB399E0;
    v18[1] = v7 + 4;
    v18[2] = v7 + 4;
    v18[0] = v7;
    CoreML::Result::Result((CoreML::Result *)&v24);
    if (*((int *)v4 + 6) >= 1)
    {
      v8 = 0;
      do
      {
        CoreML::validateSchemaTypes((CoreML::Result *)&v21, v18, *(_QWORD *)(v4[4] + 8 * v8 + 8));
        v9 = (int)v21;
        v24 = v21;
        if ((v25[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v25);
          v9 = (int)v24;
        }
        *(_OWORD *)v25 = v22;
        *(_QWORD *)&v25[16] = v23;
        if ((v9 & 0xFFFFFFEF) != 0)
          break;
        ++v8;
      }
      while (v8 < *((int *)v4 + 6));
    }
    v10 = *(_QWORD *)v25;
    v26[0] = *(_QWORD *)&v25[8];
    *(_QWORD *)((char *)v26 + 7) = *(_QWORD *)&v25[15];
    v11 = v25[23];
    v19 = v24;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    *(_QWORD *)__p = v10;
    *(_QWORD *)&__p[8] = v26[0];
    *(_QWORD *)&__p[15] = *(_QWORD *)((char *)v26 + 7);
    __p[23] = v11;
    operator delete(v7);
    if ((v19 & 0xFFFFFFEF) == 0)
    {
      v12 = (unsigned int *)operator new(4uLL);
      *v12 = 5;
      *(_QWORD *)&v22 = v12 + 1;
      *((_QWORD *)&v22 + 1) = v12 + 1;
      v21 = v12;
      CoreML::validateDescriptionsContainFeatureWithTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&v24, (uint64_t)(v4 + 5), 1, &v21);
      v19 = v24;
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      *(_OWORD *)__p = *(_OWORD *)v25;
      *(_QWORD *)&__p[16] = *(_QWORD *)&v25[16];
      v25[23] = 0;
      v25[0] = 0;
      operator delete(v12);
      if ((v19 & 0xFFFFFFEF) == 0)
      {
        v14 = 0;
        while (1)
        {
          if (*(_DWORD *)(a2 + 44) == 602)
          {
            v15 = *(uint64_t **)(a2 + 32);
          }
          else
          {
            inited = CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureVectorizer_2eproto *)inited);
            v15 = &CoreML::Specification::_FeatureVectorizer_default_instance_;
          }
          if (v14 >= *((int *)v15 + 6))
            break;
          if (*(_DWORD *)(a2 + 44) == 602)
          {
            v16 = *(uint64_t **)(a2 + 32);
          }
          else
          {
            inited = CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureVectorizer_2eproto *)inited);
            v16 = &CoreML::Specification::_FeatureVectorizer_default_instance_;
          }
          if (!*(_QWORD *)(*(_QWORD *)(v16[4] + 8 * v14++ + 8) + 24))
          {
            std::string::basic_string[abi:ne180100]<0>(&v24, "Dimension size must be greater tha zero.");
            *(_QWORD *)a1 = 13;
            std::operator+<char>();
            if ((v25[15] & 0x80000000) != 0)
              operator delete(v24);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            return;
          }
        }
      }
    }
  }
  *(_QWORD *)a1 = v19;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)&__p[16];
}

void sub_19C9C59D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  if (a28 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::validateSchemaTypes(CoreML::Result *this, unsigned int **a2, uint64_t a3)
{
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const void **v17;
  size_t v18;
  void **v19;
  const void *v20;
  void **v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  char v25;
  uint64_t v26;
  const char *v27;
  size_t v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  uint64_t v31;
  void *__p[2];
  unsigned __int8 v34;
  _QWORD v35[2];
  _QWORD v36[11];
  char v37;
  uint64_t v38;

  if (*(_QWORD *)(a3 + 32))
    v6 = *(uint64_t **)(a3 + 32);
  else
    v6 = &CoreML::Specification::_FeatureType_default_instance_;
  v7 = *a2;
  v8 = a2[1];
  if (*a2 == v8)
  {
LABEL_8:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v35);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Unsupported type \"", 18);
    v11 = *(uint64_t **)(a3 + 32);
    if (!v11)
      v11 = &CoreML::Specification::_FeatureType_default_instance_;
    v12 = *((unsigned int *)v11 + 9);
    if (v12 > 8)
      v13 = "INVALID";
    else
      v13 = (&off_1E3D670C0)[v12];
    v14 = strlen(v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v13, v14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\" for feature \"", 15);
    v17 = *(const void ***)(a3 + 16);
    if (*((char *)v17 + 23) >= 0)
      v18 = *((unsigned __int8 *)v17 + 23);
    else
      v18 = (size_t)v17[1];
    v19 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v18 + 21);
    if ((v34 & 0x80u) != 0)
      v19 = (void **)__p[0];
    if (v18)
    {
      if (*((char *)v17 + 23) >= 0)
        v20 = v17;
      else
        v20 = *v17;
      memmove(v19, v20, v18);
    }
    strcpy((char *)v19 + v18, "\". Should be one of: ");
    if ((v34 & 0x80u) == 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if ((v34 & 0x80u) == 0)
      v22 = v34;
    else
      v22 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v21, v22);
    if ((char)v34 < 0)
      operator delete(__p[0]);
    v23 = *a2;
    v24 = a2[1];
    if (*a2 != v24)
    {
      v25 = 1;
      do
      {
        if ((v25 & 1) == 0)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", ", 2);
        v26 = *v23;
        v27 = "INVALID";
        if (v26 <= 8)
          v27 = (&off_1E3D670C0)[v26];
        v28 = strlen(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v27, v28);
        v25 = 0;
        ++v23;
      }
      while (v23 != v24);
    }
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)".", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
    v30 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    *(_QWORD *)this = 8;
    std::operator+<char>();
    if ((char)v34 < 0)
      operator delete(__p[0]);
    v35[0] = *MEMORY[0x1E0DE4F50];
    v31 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v35 + *(_QWORD *)(v35[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v36[0] = v31;
    v36[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v37 < 0)
      operator delete((void *)v36[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return (CoreML::Result *)MEMORY[0x1A1AD61C4](&v38);
  }
  else
  {
    v9 = *((_DWORD *)v6 + 9);
    while (v9 != *v7)
    {
      if (++v7 == v8)
        goto LABEL_8;
    }
    return CoreML::Result::Result(this);
  }
}

void sub_19C9C5DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void CoreML::validateDescriptionsContainFeatureWithTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(uint64_t a1, uint64_t a2, int a3, unsigned int **a4)
{
  int v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _BYTE __p[24];
  uint64_t v15;
  std::string v16;
  uint64_t v17;
  void *v18[2];
  uint64_t v19;

  CoreML::Result::Result((CoreML::Result *)&v17);
  v8 = *(_DWORD *)(a2 + 8);
  if (a3 && v8 > a3)
  {
    std::to_string(&v16, a3);
    v9 = std::string::insert(&v16, 0, "Feature descriptions exceeded ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)a1 = 9;
    std::operator+<char>();
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19) < 0)
      operator delete(v18[0]);
  }
  else
  {
    if (v8 < 1)
    {
LABEL_15:
      *(_QWORD *)a1 = v17;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v18;
      v13 = v19;
    }
    else
    {
      v11 = 0;
      while (1)
      {
        CoreML::validateSchemaTypes((CoreML::Result *)__p, a4, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v11 + 8));
        v12 = *(_DWORD *)__p;
        v17 = *(_QWORD *)__p;
        if (SHIBYTE(v19) < 0)
        {
          operator delete(v18[0]);
          v12 = v17;
        }
        *(_OWORD *)v18 = *(_OWORD *)&__p[8];
        v19 = v15;
        if ((v12 & 0xFFFFFFEF) != 0)
          break;
        if (++v11 >= *(int *)(a2 + 8))
          goto LABEL_15;
      }
      *(_QWORD *)a1 = v17;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v18;
      v13 = v19;
    }
    *(_QWORD *)(a1 + 24) = v13;
  }
}

void sub_19C9C5F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void CoreML::validate<(MLModelType)401>(uint64_t a1, uint64_t a2)
{
  const CoreML::Specification::ModelDescription *v4;
  uint64_t *v5;
  unint64_t *inited;
  int data;
  uint64_t *v8;
  int v9;
  CoreML::Specification::protobuf_SVM_2eproto *v10;
  int v11;
  void *size;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  int v17;
  int *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int *v24;
  int v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  void *v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  uint64_t v57;
  std::string::size_type v58;
  __int128 __p;
  uint64_t v60;
  std::string v61;
  uint64_t v62;

  v4 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_QWORD *)(a2 + 16))
    v5 = *(uint64_t **)(a2 + 16);
  else
    v5 = &CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::Result::Result((CoreML::Result *)&v58);
  CoreML::validateDescriptionsAreAllVectorizableTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&v61, (uint64_t)(v5 + 2));
  data = (int)v61.__r_.__value_.__l.__data_;
  v58 = v61.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v60) < 0)
  {
    operator delete((void *)__p);
    data = v58;
  }
  __p = *(_OWORD *)&v61.__r_.__value_.__r.__words[1];
  v60 = v62;
  if ((data & 0xFFFFFFEF) != 0)
    goto LABEL_43;
  if (*(_DWORD *)(a2 + 44) == 401)
  {
    v8 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    inited = CoreML::Specification::protobuf_SVM_2eproto::InitDefaults((CoreML::Specification::protobuf_SVM_2eproto *)inited);
    v8 = &CoreML::Specification::_SupportVectorClassifier_default_instance_;
  }
  v9 = *((_DWORD *)v8 + 42);
  if (!v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v61, "Classifier models must provide class labels.");
    v56.__r_.__value_.__r.__words[0] = 13;
    v10 = (CoreML::Specification::protobuf_SVM_2eproto *)std::operator+<char>();
    goto LABEL_29;
  }
  if (v9 == 100)
  {
    if (!*(_DWORD *)(v8[19] + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&v61, "Classifier declared to have String class labels must provide labels.");
      v56.__r_.__value_.__r.__words[0] = 13;
      v10 = (CoreML::Specification::protobuf_SVM_2eproto *)std::operator+<char>();
      goto LABEL_29;
    }
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
    if ((_DWORD)qword_1ED002850)
    {
      std::string::basic_string[abi:ne180100]<0>(&v61, "Classifier declared with String class labels must provide exclusively String class labels.");
      v56.__r_.__value_.__r.__words[0] = 13;
      v10 = (CoreML::Specification::protobuf_SVM_2eproto *)std::operator+<char>();
      goto LABEL_29;
    }
    goto LABEL_19;
  }
  if (v9 != 101)
  {
LABEL_19:
    v11 = 0;
    goto LABEL_20;
  }
  if (!*(_DWORD *)(v8[19] + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v61, "Classifier declared to have Int64 class labels must provide labels.");
    v56.__r_.__value_.__r.__words[0] = 13;
    v10 = (CoreML::Specification::protobuf_SVM_2eproto *)std::operator+<char>();
    goto LABEL_29;
  }
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  if (dword_1ED006728)
  {
    std::string::basic_string[abi:ne180100]<0>(&v61, "Classifier declared with Int64 class labels must provide exclusively Int64 class labels.");
    v56.__r_.__value_.__r.__words[0] = 13;
    v10 = (CoreML::Specification::protobuf_SVM_2eproto *)std::operator+<char>();
LABEL_29:
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_32;
    size = (void *)v61.__r_.__value_.__r.__words[0];
    goto LABEL_31;
  }
  v11 = 1;
LABEL_20:
  if (*(_QWORD *)(a2 + 16))
    v4 = *(const CoreML::Specification::ModelDescription **)(a2 + 16);
  CoreML::validateFeatureDescriptions<CoreML::Specification::ModelDescription>((void **)&v61.__r_.__value_.__l.__data_, (uint64_t)v4, *(_DWORD *)(a2 + 24), 0, 0);
  if (((uint64_t)v61.__r_.__value_.__l.__data_ & 0xFFFFFFEF) != 0)
  {
    v56 = v61;
    v57 = v62;
    goto LABEL_32;
  }
  CoreML::validateClassifierFeatureDescriptions((void **)&v56.__r_.__value_.__l.__data_, v4, v11);
  if (SHIBYTE(v62) < 0)
  {
    size = (void *)v61.__r_.__value_.__l.__size_;
LABEL_31:
    operator delete(size);
  }
LABEL_32:
  v13 = (int)v56.__r_.__value_.__l.__data_;
  v58 = v56.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v60) < 0)
  {
    operator delete((void *)__p);
    v13 = v58;
  }
  __p = *(_OWORD *)&v56.__r_.__value_.__r.__words[1];
  v60 = v57;
  if ((v13 & 0xFFFFFFEF) != 0)
    goto LABEL_43;
  if (*(_DWORD *)(a2 + 44) == 401)
  {
    v14 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v10);
    v14 = &CoreML::Specification::_SupportVectorClassifier_default_instance_;
  }
  v15 = (uint64_t *)v14[17];
  if (!v15)
    v15 = &CoreML::Specification::_Kernel_default_instance_;
  CoreML::validateKernel((CoreML *)&v61, (const CoreML::Specification::Kernel *)v15[2], *((_DWORD *)v15 + 7));
  v16 = (int)v61.__r_.__value_.__l.__data_;
  v58 = v61.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v60) < 0)
  {
    operator delete((void *)__p);
    v16 = v58;
  }
  __p = *(_OWORD *)&v61.__r_.__value_.__r.__words[1];
  v60 = v62;
  if ((v16 & 0xFFFFFFEF) != 0)
    goto LABEL_43;
  v17 = *((_DWORD *)v14 + 42);
  switch(v17)
  {
    case 0:
      std::string::basic_string[abi:ne180100]<0>(&v61, "Int64 class labels must be supplied for SVM classifier.");
      *(_QWORD *)a1 = 13;
      std::operator+<char>();
LABEL_80:
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_44;
      v34 = (void *)v61.__r_.__value_.__r.__words[0];
      goto LABEL_82;
    case 100:
      v18 = (int *)(v14[19] + 24);
      goto LABEL_54;
    case 101:
      v18 = (int *)(v14[19] + 16);
LABEL_54:
      v19 = *v18;
      goto LABEL_56;
  }
  v19 = 0;
LABEL_56:
  v20 = *((unsigned int *)v14 + 12);
  if ((_DWORD)v20 != v19 - 1)
  {
    std::to_string(&v54, v19 - 1);
    v26 = std::string::insert(&v54, 0, "coefficient array must be size numberOfClasses - 1 (");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v28 = std::string::append(&v55, "). Instead it is size ");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v53, *((_DWORD *)v14 + 12));
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v53;
    else
      v30 = (std::string *)v53.__r_.__value_.__r.__words[0];
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    else
      v31 = v53.__r_.__value_.__l.__size_;
    goto LABEL_69;
  }
  if ((*((_DWORD *)v14 + 41) - 3) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v61, "Must specify sparse or dense support vectors");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
    goto LABEL_80;
  }
  if (*((_DWORD *)v14 + 4) != v19)
  {
    std::to_string(&v54, v19);
    v35 = std::string::insert(&v54, 0, "numberOfSupportVectoresPerClass array must be size numberOfClasses ");
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    v37 = std::string::append(&v55, " instead it is size ");
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v53, *((_DWORD *)v14 + 4));
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v53;
    else
      v30 = (std::string *)v53.__r_.__value_.__r.__words[0];
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    else
      v31 = v53.__r_.__value_.__l.__size_;
    goto LABEL_69;
  }
  v21 = *(_DWORD *)(v14[18] + 24);
  if (v19 < 1)
  {
    v22 = 0;
  }
  else
  {
    v22 = 0;
    v23 = v19;
    v24 = (int *)(v14[3] + 8);
    do
    {
      v25 = *v24++;
      v22 += v25;
      --v23;
    }
    while (v23);
  }
  if (v21 != v22)
  {
    std::to_string(&v54, v22);
    v45 = std::string::insert(&v54, 0, "sum of numberOfSupportVectorsPerClass ");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    v47 = std::string::append(&v55, " must sum to total number of support vectors ");
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v53, v21);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v53;
    else
      v30 = (std::string *)v53.__r_.__value_.__r.__words[0];
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    else
      v31 = v53.__r_.__value_.__l.__size_;
    goto LABEL_69;
  }
  if (v19 >= 2)
  {
    v39 = 0;
    while (*(_DWORD *)(*(_QWORD *)(v14[7] + 8 + 8 * v39) + 16) == v21)
    {
      if (v20 == ++v39)
        goto LABEL_95;
    }
    std::to_string(&v54, *(_DWORD *)(v14[18] + 24));
    v49 = std::string::insert(&v54, 0, "Incorrect number of coefficients: There should be ");
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    v51 = std::string::append(&v55, " not ");
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v53, *(_DWORD *)(*(_QWORD *)(v14[7] + 8 * v39 + 8) + 16));
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v53;
    else
      v30 = (std::string *)v53.__r_.__value_.__r.__words[0];
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    else
      v31 = v53.__r_.__value_.__l.__size_;
LABEL_69:
    v32 = std::string::append(&v56, (const std::string::value_type *)v30, v31);
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    {
      v34 = (void *)v54.__r_.__value_.__r.__words[0];
LABEL_82:
      operator delete(v34);
      goto LABEL_44;
    }
    goto LABEL_44;
  }
LABEL_95:
  v40 = *((_DWORD *)v14 + 22);
  v41 = *((_DWORD *)v14 + 28);
  if (!(v40 | v41))
  {
LABEL_43:
    *(_QWORD *)a1 = v58;
    *(_OWORD *)(a1 + 8) = __p;
    *(_QWORD *)(a1 + 24) = v60;
    __p = 0uLL;
    v60 = 0;
    goto LABEL_44;
  }
  v42 = v20 * v19 + ((int)v20 * v19 < 0);
  if (v40 != v41)
  {
    std::string::basic_string[abi:ne180100]<0>(&v61, "probA and probB must be same size");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
    goto LABEL_80;
  }
  if (v40 == v42 >> 1)
    goto LABEL_43;
  std::to_string(&v56, v42 >> 1);
  v43 = std::string::insert(&v56, 0, "Expected length of probA is number of class pairs: ");
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)a1 = 13;
  std::operator+<char>();
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    v34 = (void *)v56.__r_.__value_.__r.__words[0];
    goto LABEL_82;
  }
LABEL_44:
  if (SHIBYTE(v60) < 0)
    operator delete((void *)__p);
}

void sub_19C9C68FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (*(char *)(v41 - 57) < 0)
    operator delete(*(void **)(v41 - 80));
  if (a33 < 0)
    operator delete(__p);
  if (a41 < 0)
    operator delete(a36);
  _Unwind_Resume(exception_object);
}

void CoreML::validateDescriptionsAreAllVectorizableTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  unsigned int *v6;
  unsigned int *v7[3];
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  CoreML::Result::Result((CoreML::Result *)a1);
  if (*(int *)(a2 + 8) >= 1)
  {
    v4 = 0;
    v5 = (void **)(a1 + 8);
    do
    {
      v6 = (unsigned int *)operator new(0xCuLL);
      v7[1] = v6 + 3;
      v7[2] = v6 + 3;
      *(_QWORD *)v6 = 0x100000002;
      v6[2] = 5;
      v7[0] = v6;
      CoreML::validateSchemaTypes((CoreML::Result *)&v8, v7, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v4 + 8));
      *(_QWORD *)a1 = v8;
      if (*(char *)(a1 + 31) < 0)
        operator delete(*v5);
      *(_OWORD *)v5 = v9;
      *(_QWORD *)(a1 + 24) = v10;
      HIBYTE(v10) = 0;
      LOBYTE(v9) = 0;
      operator delete(v6);
      if ((*(_DWORD *)a1 & 0xFFFFFFEF) != 0)
        break;
      ++v4;
    }
    while (v4 < *(int *)(a2 + 8));
  }
}

void sub_19C9C6B6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void **v3;

  operator delete(v2);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

void CoreML::validateKernel(CoreML *this, const CoreML::Specification::Kernel *a2, int a3)
{
  void *__p[2];
  char v5;

  switch(a3)
  {
    case 1:
      goto LABEL_11;
    case 2:
      goto LABEL_9;
    case 3:
      if (*((double *)a2 + 3) < 0.0)
        goto LABEL_10;
      if ((*((_DWORD *)a2 + 8) & 0x80000000) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Degree must be greater than or equal to zero");
        *(_QWORD *)this = 13;
        std::operator+<char>();
      }
      else
      {
        CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
        a2 = (const CoreML::Specification::Kernel *)&CoreML::Specification::_RBFKernel_default_instance_;
LABEL_9:
        if (*((double *)a2 + 2) >= 0.0)
        {
LABEL_11:
          CoreML::Result::Result(this);
          return;
        }
LABEL_10:
        std::string::basic_string[abi:ne180100]<0>(__p, "Gamma must be greater than or equal to zero");
        *(_QWORD *)this = 13;
        std::operator+<char>();
      }
LABEL_13:
      if (v5 < 0)
        operator delete(__p[0]);
      return;
    case 4:
      if (*((double *)a2 + 2) < 0.0)
        goto LABEL_10;
      goto LABEL_11;
    default:
      std::string::basic_string[abi:ne180100]<0>(__p, "You must specify a supported kernel type");
      *(_QWORD *)this = 13;
      std::operator+<char>();
      goto LABEL_13;
  }
}

void sub_19C9C6D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::validateFeatureDescriptions<CoreML::Specification::ModelDescription>(void **this, uint64_t a2, int a3, char a4, char a5)
{
  uint64_t v8;
  int v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *p_p;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  std::string __p;
  std::string v30;
  std::string v31;
  std::string v32;
  __int128 v33;
  std::string::size_type v34;

  v8 = *(int *)(a2 + 24);
  if ((int)v8 > 0)
    goto LABEL_2;
  if (!a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v33, "Models must have one or more inputs.");
    *this = (void *)19;
    std::operator+<char>();
    goto LABEL_53;
  }
  if (a3 > 8)
  {
LABEL_2:
    v9 = *(_DWORD *)(a2 + 48);
    if (!a5 && v9 <= 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v33, "Models must have one or more outputs.");
      *this = (void *)12;
      std::operator+<char>();
LABEL_53:
      if ((SHIBYTE(v34) & 0x80000000) == 0)
        return;
      v18 = (void *)v33;
      goto LABEL_55;
    }
    v19 = *(_QWORD *)(a2 + 32);
    if (v19)
      v20 = (uint64_t *)(v19 + 8);
    else
      v20 = 0;
    if ((_DWORD)v8)
    {
      v21 = 8 * v8;
      while (1)
      {
        CoreML::validateFeatureDescription((CoreML::Result *)this, *v20, a3, 0);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          break;
        if (*((char *)this + 31) < 0)
          operator delete(this[1]);
        ++v20;
        v21 -= 8;
        if (!v21)
        {
          v9 = *(_DWORD *)(a2 + 48);
          goto LABEL_33;
        }
      }
    }
    else
    {
LABEL_33:
      v22 = *(_QWORD *)(a2 + 56);
      if (v22)
        v23 = (uint64_t *)(v22 + 8);
      else
        v23 = 0;
      if (v9)
      {
        v24 = 8 * v9;
        while (1)
        {
          CoreML::validateFeatureDescription((CoreML::Result *)this, *v23, a3, 1);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            break;
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          ++v23;
          v24 -= 8;
          if (!v24)
            goto LABEL_42;
        }
      }
      else
      {
LABEL_42:
        v25 = *(_QWORD *)(a2 + 80);
        if (v25)
          v26 = (uint64_t *)(v25 + 8);
        else
          v26 = 0;
        v27 = *(int *)(a2 + 72);
        if ((_DWORD)v27)
        {
          v28 = 8 * v27;
          while (1)
          {
            CoreML::validateFeatureDescription((CoreML::Result *)this, *v26, a3, 2);
            if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
              break;
            if (*((char *)this + 31) < 0)
              operator delete(this[1]);
            ++v26;
            v28 -= 8;
            if (!v28)
              goto LABEL_51;
          }
        }
        else
        {
LABEL_51:
          CoreML::Result::Result((CoreML::Result *)this);
        }
      }
    }
  }
  else
  {
    std::to_string(&v30, 9);
    v10 = std::string::insert(&v30, 0, "Empty input is only valid in specification verison >= ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v31, ". This model has version ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v32, (const std::string::value_type *)p_p, size);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v34 = v16->__r_.__value_.__r.__words[2];
    v33 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *this = (void *)6;
    std::operator+<char>();
    if (SHIBYTE(v34) < 0)
      operator delete((void *)v33);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      v18 = (void *)v30.__r_.__value_.__r.__words[0];
LABEL_55:
      operator delete(v18);
    }
  }
}

void sub_19C9C7084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void CoreML::validate<(MLModelType)301>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  CoreML::Specification::protobuf_SVM_2eproto *v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  __int128 __p;
  uint64_t v17;

  CoreML::Result::Result((CoreML::Result *)&v15);
  if (*(_QWORD *)(a2 + 16))
    v4 = *(uint64_t **)(a2 + 16);
  else
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::validateDescriptionsAreAllVectorizableTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&v12, (uint64_t)(v4 + 2));
  v5 = (int)v12;
  v15 = v12;
  if (SHIBYTE(v17) < 0)
  {
    operator delete((void *)__p);
    v5 = (int)v15;
  }
  __p = v13;
  v17 = v14;
  if ((v5 & 0xFFFFFFEF) != 0)
    goto LABEL_18;
  CoreML::validateRegressorInterface(&v12, (uint64_t)v4, *(_DWORD *)(a2 + 24), 0, 0);
  v7 = (int)v12;
  v15 = v12;
  if (SHIBYTE(v17) < 0)
  {
    operator delete((void *)__p);
    v7 = (int)v15;
  }
  __p = v13;
  v17 = v14;
  if ((v7 & 0xFFFFFFEF) != 0)
    goto LABEL_18;
  if (*(_DWORD *)(a2 + 44) == 301)
  {
    v8 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v6);
    v8 = &CoreML::Specification::_SupportVectorRegressor_default_instance_;
  }
  v9 = (uint64_t *)v8[2];
  if (!v9)
    v9 = &CoreML::Specification::_Kernel_default_instance_;
  CoreML::validateKernel((CoreML *)&v12, (const CoreML::Specification::Kernel *)v9[2], *((_DWORD *)v9 + 7));
  v10 = (int)v12;
  v15 = v12;
  if (SHIBYTE(v17) < 0)
  {
    operator delete((void *)__p);
    v10 = (int)v15;
  }
  __p = v13;
  v17 = v14;
  if ((v10 & 0xFFFFFFEF) != 0)
    goto LABEL_18;
  if ((*((_DWORD *)v8 + 13) & 0xFFFFFFFE) == 2)
  {
    v11 = (uint64_t *)v8[3];
    if (!v11)
      v11 = &CoreML::Specification::_Coefficients_default_instance_;
    if (*((_DWORD *)v11 + 4) == *(_DWORD *)(v8[5] + 24))
    {
LABEL_18:
      *(_QWORD *)a1 = v15;
      *(_OWORD *)(a1 + 8) = __p;
      *(_QWORD *)(a1 + 24) = v17;
      __p = 0uLL;
      v17 = 0;
      goto LABEL_19;
    }
    std::string::basic_string[abi:ne180100]<0>(&v12, "The number of coefficients must match the number of support vectors.");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, "Must specify sparse or dense support vectors");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
  }
  if (SHIBYTE(v13) < 0)
    operator delete(v12);
LABEL_19:
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
}

void sub_19C9C7350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::validate<(MLModelType)402>(CoreML::Result *a1, const CoreML::Specification::Model *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v7[8];
  std::__shared_weak_count *v8;

  CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec((CoreML::TreeEnsembles *)v7, a2);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return CoreML::Result::Result(a1);
}

CoreML::Result *CoreML::validate<(MLModelType)302>(CoreML::Result *a1, const CoreML::Specification::Model *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v7[8];
  std::__shared_weak_count *v8;

  CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec((CoreML::TreeEnsembles *)v7, a2);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return CoreML::Result::Result(a1);
}

void CoreML::Specification::Identity::~Identity(CoreML::Specification::Identity *this)
{
  *(_QWORD *)this = &off_1E3D59030;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D59030;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::Identity::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Identity");
}

CoreML::Specification::Identity *CoreML::Specification::Identity::New(CoreML::Specification::Identity *this)
{
  return CoreML::Specification::Identity::New(this, 0);
}

CoreML::Specification::Identity *CoreML::Specification::Identity::New(CoreML::Specification::Identity *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Identity *v3;

  v3 = (CoreML::Specification::Identity *)operator new();
  CoreML::Specification::Identity::Identity(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Identity>(a2, v3);
  return v3;
}

void sub_19C9C766C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Identity::IsInitialized(CoreML::Specification::Identity *this)
{
  return 1;
}

std::string *CoreML::Specification::Identity::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::Identity::MergePartialFromCodedStream(CoreML::Specification::Identity *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      LODWORD(TagFallback) = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::Identity::ByteSizeLong(CoreML::Specification::Identity *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

uint64_t CoreML::Specification::Identity::GetCachedSize(CoreML::Specification::Identity *this)
{
  return *((unsigned int *)this + 4);
}

CoreML::Specification::Identity *CoreML::Specification::Identity::Identity(CoreML::Specification::Identity *this)
{
  *(_QWORD *)this = &off_1E3D59030;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Identity *)&CoreML::Specification::_Identity_default_instance_)
    CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_19C9C7790(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Identity>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Identity>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Identity>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::~VisionFeaturePrint_Scene(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
  *(_QWORD *)this = &off_1E3D4D820;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D4D820;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.VisionFeaturePrint.Scene");
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
  return CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::New(this, 0);
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *v3;

  v3 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *)operator new();
  CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::VisionFeaturePrint_Scene(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene>(a2, v3);
  return v3;
}

void sub_19C9C78E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::IsInitialized(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
  return 1;
}

std::string *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
    LODWORD(v3->__r_.__value_.__r.__words[2]) = v5;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  char *v11;
  int v12;
  uint64_t Varint32Fallback;

  do
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1])
      {
        v12 = 0;
      }
      else
      {
        v12 = *v11;
        if ((*v11 & 0x80000000) == 0)
        {
          *a2 = v11 + 1;
          goto LABEL_22;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback((google::protobuf::io::CodedInputStream *)a2, v12);
      v12 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_22:
      *((_DWORD *)this + 4) = v12;
    }
    if ((_DWORD)v7)
      v10 = (v7 & 7) == 4;
    else
      v10 = 1;
    if (v10)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::ByteSizeLong(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0)
      v2 = 11;
    else
      v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v2 = 0;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  signed int v5;

  v5 = *(_DWORD *)(this + 16);
  if (v5)
    return google::protobuf::internal::WireFormatLite::WriteEnum(1, v5, a2, a4);
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::GetCachedSize(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
  return *((unsigned int *)this + 5);
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::VisionFeaturePrint_Scene(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
  *(_QWORD *)this = &off_1E3D4D820;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *)&CoreML::Specification::CoreMLModels::_VisionFeaturePrint_Scene_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  return this;
}

void sub_19C9C7AF8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::CoreMLModels::VisionFeaturePrint::~VisionFeaturePrint(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
  CoreML::Specification::CoreMLModels::VisionFeaturePrint::~VisionFeaturePrint(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D4D6F0;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::CoreMLModels::VisionFeaturePrint::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.VisionFeaturePrint");
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint *CoreML::Specification::CoreMLModels::VisionFeaturePrint::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
  return CoreML::Specification::CoreMLModels::VisionFeaturePrint::New(this, 0);
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint *CoreML::Specification::CoreMLModels::VisionFeaturePrint::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::VisionFeaturePrint *v3;

  v3 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)operator new();
  CoreML::Specification::CoreMLModels::VisionFeaturePrint::VisionFeaturePrint(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::VisionFeaturePrint>(a2, v3);
  return v3;
}

void sub_19C9C7C00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::IsInitialized(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
  return 1;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *v11;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *v12;
  char *v13;
  int v14;
  char *v15;
  int VarintSizeAsIntFallback;
  int v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t result;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int TagFallback;

  while (1)
  {
    while (1)
    {
      v5 = *(unsigned __int8 **)a2;
      v6 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v6)
      {
        LODWORD(v8) = 0;
        goto LABEL_34;
      }
      v7 = v5 + 1;
      v8 = *v5;
      if ((char)*v5 >= 1)
        break;
      if ((unint64_t)v7 < v6)
      {
        v10 = *v7;
        if ((v8 & ~v10) >= 0x80)
        {
          *(_QWORD *)a2 = v5 + 2;
          v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
          goto LABEL_8;
        }
      }
LABEL_34:
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_35;
LABEL_8:
      if (v9 >> 3 == 21)
      {
        if (v9 != 170)
          goto LABEL_35;
        if (*((_DWORD *)this + 7) == 21)
        {
          v12 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType((uint64_t)this);
          *((_DWORD *)this + 7) = 21;
          v12 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)operator new();
          CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::VisionFeaturePrint_Objects(v12);
          *((_QWORD *)this + 2) = v12;
        }
        v15 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v15;
          *(_QWORD *)a2 = v15 + 1;
        }
        v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v25 = *((_DWORD *)a2 + 13);
        v20 = __OFSUB__(v25--, 1);
        *((_DWORD *)a2 + 13) = v25;
        if (v25 < 0 != v20)
          return 0;
        v21 = v23;
        result = CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::MergePartialFromCodedStream(v12, a2, v24);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v9 >> 3 != 20 || v9 != 162)
          goto LABEL_35;
        if (*((_DWORD *)this + 7) == 20)
        {
          v11 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType((uint64_t)this);
          *((_DWORD *)this + 7) = 20;
          v11 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *)operator new();
          CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::VisionFeaturePrint_Scene(v11);
          *((_QWORD *)this + 2) = v11;
        }
        v13 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v13 < 0)
        {
          v14 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v14 < 0)
            return 0;
        }
        else
        {
          v14 = *v13;
          *(_QWORD *)a2 = v13 + 1;
        }
        v17 = google::protobuf::io::CodedInputStream::PushLimit(a2, v14);
        v19 = *((_DWORD *)a2 + 13);
        v20 = __OFSUB__(v19--, 1);
        *((_DWORD *)a2 + 13) = v19;
        if (v19 < 0 != v20)
          return 0;
        v21 = v17;
        result = CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::MergePartialFromCodedStream(v11, (char **)a2, v18);
        if (!(_DWORD)result)
          return result;
      }
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v21))
        return 0;
    }
    *(_QWORD *)a2 = v7;
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0)
      goto LABEL_8;
LABEL_35:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C9C7EB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::ByteSizeLong(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *((_DWORD *)this + 7);
  if (v2 == 21)
  {
    v6 = CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::ByteSizeLong(*((CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects **)this
                                                                                       + 2));
    result = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  else if (v2 == 20)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = *(_DWORD *)(v3 + 16);
    if (v4)
    {
      if (v4 < 0)
        v5 = 11;
      else
        v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v5 = 0;
    }
    *(_DWORD *)(v3 + 20) = v5;
    result = v5 + 3;
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 20)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x14, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 21)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x15, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::GetCachedSize(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::ByteSizeLong(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v1 = *((unsigned int *)this + 6);
  v2 = 2 * v1;
  if ((int)v1 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      v2 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  v7 = *((_DWORD *)this + 10);
  if (v7)
  {
    if (v7 < 0)
      v8 = 11;
    else
      v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v2 += v8;
  }
  *((_DWORD *)this + 11) = v2;
  return v2;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 28);
  if (v2 == 21 || v2 == 20)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::VisionFeaturePrint_Objects(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  *(_QWORD *)this = &off_1E3D4D950;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)&CoreML::Specification::CoreMLModels::_VisionFeaturePrint_Objects_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(this);
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_19C9C8140(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  char *v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  std::string *Aligned;
  google::protobuf::Arena *v19;
  google::protobuf::Arena **v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int TagFallback;
  BOOL v30;
  uint64_t Varint32Fallback;

  v5 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        v6 = *(unsigned __int8 **)a2;
        v7 = *((_QWORD *)a2 + 1);
        if (*(_QWORD *)a2 >= v7)
        {
          LODWORD(v9) = 0;
LABEL_40:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
          v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
          if ((v10 & 0x100000000) == 0)
            goto LABEL_41;
          goto LABEL_9;
        }
        v8 = v6 + 1;
        v9 = *v6;
        if ((char)*v6 < 1)
        {
          if ((unint64_t)v8 < v7)
          {
            v11 = *v8;
            if ((v9 & ~v11) >= 0x80)
            {
              *(_QWORD *)a2 = v6 + 2;
              v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
              goto LABEL_9;
            }
          }
          goto LABEL_40;
        }
        *(_QWORD *)a2 = v8;
        v10 = v9 | 0x100000000;
        if ((v10 & 0x100000000) == 0)
          goto LABEL_41;
LABEL_9:
        if (v10 >> 3 != 100)
          break;
        if (v10 != 34)
          goto LABEL_41;
        v15 = (int *)*((_QWORD *)this + 4);
        if (!v15)
        {
          v16 = *((_DWORD *)this + 6);
          v17 = *((_DWORD *)this + 7);
          goto LABEL_24;
        }
        v16 = *((_DWORD *)this + 6);
        v17 = *v15;
        if (v16 >= *v15)
        {
          if (v17 == *((_DWORD *)this + 7))
          {
LABEL_24:
            if (v16 <= v17)
            {
              google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v17 - v16 + 1);
              v15 = (int *)*((_QWORD *)this + 4);
            }
            v17 = *v15;
          }
          *v15 = v17 + 1;
          v19 = *(google::protobuf::Arena **)v5;
          if (*(_QWORD *)v5)
          {
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
            v20 = google::protobuf::Arena::AllocateAligned(v19, 0, 24);
            *v20 = (google::protobuf::Arena *)Aligned;
            v20[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
            v21 = (unint64_t *)((char *)v19 + 32);
            do
              v22 = __ldxr(v21);
            while (__stxr((unint64_t)v20, v21));
            v20[2] = (google::protobuf::Arena *)v22;
          }
          else
          {
            Aligned = (std::string *)operator new();
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
          }
          v23 = *((_QWORD *)this + 4);
          v24 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v24 + 1;
          *(_QWORD *)(v23 + 8 * v24 + 8) = Aligned;
          goto LABEL_33;
        }
        *((_DWORD *)this + 6) = v16 + 1;
        Aligned = *(std::string **)&v15[2 * v16 + 2];
LABEL_33:
        result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, Aligned);
        if (!(_DWORD)result)
          return result;
        v26 = *((_QWORD *)this + 4);
        v27 = *(unsigned int **)(v26 + 8 * *((int *)this + 6));
        if (*((char *)v27 + 23) < 0)
        {
          v27 = *(unsigned int **)v27;
          v28 = *(_QWORD *)(*(_QWORD *)(v26 + 8 * *((int *)this + 6)) + 8);
        }
        else
        {
          LODWORD(v28) = *((unsigned __int8 *)v27 + 23);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v27, v28, 0, (uint64_t)"CoreML.Specification.CoreMLModels.VisionFeaturePrint.Objects.output"))return 0;
      }
      if (v10 >> 3 != 1 || v10 != 8)
        break;
      v13 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v14 = 0;
      }
      else
      {
        v14 = *v13;
        if ((*v13 & 0x80000000) == 0)
        {
          *(_QWORD *)a2 = v13 + 1;
          goto LABEL_49;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v14);
      v14 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_49:
      *((_DWORD *)this + 10) = v14;
    }
LABEL_41:
    if ((_DWORD)v10)
      v30 = (v10 & 7) == 4;
    else
      v30 = 1;
    if (v30)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3) & 1) != 0);
  return 0;
}

std::string *CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergeFrom(std::string *this, const CoreML::Specification::CoreMLModels::VisionFeaturePrint *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *v7;
  uint64_t *v8;
  CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto *v9;
  const CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *v10;
  uint64_t v11;
  int v12;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 7);
  if (v5 == 21)
  {
    if (*(_DWORD *)(v3 + 28) == 21)
    {
      v7 = *(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects **)(v3 + 16);
    }
    else
    {
      CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType(v3);
      *(_DWORD *)(v3 + 28) = 21;
      v7 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)operator new();
      v9 = CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::VisionFeaturePrint_Objects(v7);
      *(_QWORD *)(v3 + 16) = v7;
      if (*((_DWORD *)a2 + 7) != 21)
      {
        CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(v9);
        v10 = (const CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)&CoreML::Specification::CoreMLModels::_VisionFeaturePrint_Objects_default_instance_;
        return CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::MergeFrom((std::string *)v7, v10);
      }
    }
    v10 = (const CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)*((_QWORD *)a2 + 2);
    return CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::MergeFrom((std::string *)v7, v10);
  }
  if (v5 != 20)
    return this;
  if (*(_DWORD *)(v3 + 28) == 20)
  {
    v6 = *(_QWORD *)(v3 + 16);
  }
  else
  {
    CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType(v3);
    *(_DWORD *)(v3 + 28) = 20;
    v6 = operator new();
    this = (std::string *)CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::VisionFeaturePrint_Scene((CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *)v6);
    *(_QWORD *)(v3 + 16) = v6;
    if (*((_DWORD *)a2 + 7) != 20)
    {
      this = (std::string *)CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto *)this);
      v8 = &CoreML::Specification::CoreMLModels::_VisionFeaturePrint_Scene_default_instance_;
      goto LABEL_14;
    }
  }
  v8 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_14:
  v11 = v8[1];
  if ((v11 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v6 + 8), v11 & 0xFFFFFFFFFFFFFFFELL);
  v12 = *((_DWORD *)v8 + 4);
  if (v12)
    *(_DWORD *)(v6 + 16) = v12;
  return this;
}

void sub_19C9C8564(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::MergeFrom(std::string *this, const CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *a2)
{
  std::string *v3;
  uint64_t v4;
  unsigned int v5;
  const std::string **v6;
  unsigned int *v7;
  signed int v8;
  signed int *size;
  int v10;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (const std::string **)(*((_QWORD *)a2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], *((_DWORD *)a2 + 6));
    this = google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  v10 = *((_DWORD *)a2 + 10);
  if (v10)
    LODWORD(v3[1].__r_.__value_.__r.__words[2]) = v10;
  return this;
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint *CoreML::Specification::CoreMLModels::VisionFeaturePrint::VisionFeaturePrint(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
  *(_QWORD *)this = &off_1E3D4D6F0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)&CoreML::Specification::CoreMLModels::_VisionFeaturePrint_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_19C9C86A4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::VisionFeaturePrint>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::~VisionFeaturePrint_Objects(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E3D4D950;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E3D4D950;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.VisionFeaturePrint.Objects");
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  return CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::New(this, 0);
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *v3;

  v3 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)operator new();
  CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::VisionFeaturePrint_Objects(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects>(a2, v3);
  return v3;
}

void sub_19C9C885C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::Clear(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  uint64_t result;

  result = google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16);
  *((_DWORD *)this + 10) = 0;
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::IsInitialized(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  return 1;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  signed int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;

  v5 = this;
  v6 = *(_DWORD *)(this + 40);
  if (v6)
    this = google::protobuf::internal::WireFormatLite::WriteEnum(1, v6, a2, a4);
  v7 = *(unsigned int *)(v5 + 24);
  if ((int)v7 >= 1)
  {
    v8 = -v7;
    v9 = 1;
    do
    {
      v10 = *(unsigned int **)(*(_QWORD *)(v5 + 32) + 8 * v9);
      if (*((char *)v10 + 23) < 0)
      {
        v10 = *(unsigned int **)v10;
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v9) + 8);
      }
      else
      {
        LODWORD(v11) = *((unsigned __int8 *)v10 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v10, v11, 1, (uint64_t)"CoreML.Specification.CoreMLModels.VisionFeaturePrint.Objects.output");
      this = google::protobuf::internal::WireFormatLite::WriteString(0x64u, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v9++), a2);
    }
    while (v8 + v9 != 1);
  }
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::GetCachedSize(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  return *((unsigned int *)this + 11);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::validateSizeRange(CoreML *this, const CoreML::Specification::SizeRange *a2)
{
  uint64_t v3;
  unint64_t v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *p_p;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string __p;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  std::string::size_type v22;

  v3 = *((_QWORD *)a2 + 3);
  if (v3 < 1 || (v5 = *((_QWORD *)a2 + 2), v5 <= v3))
  {
    CoreML::Result::Result(this);
  }
  else
  {
    std::to_string(&v17, v5);
    v6 = std::string::insert(&v17, 0, "Size range is invalid (");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v18, ", ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, *((_QWORD *)a2 + 3));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v19, (const std::string::value_type *)p_p, size);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v20, ").");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v22 = v14->__r_.__value_.__r.__words[2];
    v21 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)this = 12;
    std::operator+<char>();
    if (SHIBYTE(v22) < 0)
      operator delete((void *)v21);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_19C9C8B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void CoreML::validateFeatureDescription(CoreML::Result *this, uint64_t a2, int a3, int a4)
{
  CoreML::Result *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  std::string *v10;
  __int128 v11;
  void *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  __int128 v26;
  void *v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  std::string::size_type v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  uint64_t *v80;
  uint64_t j;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  const CoreML::Specification::SizeRange *v85;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v86;
  std::string *v87;
  __int128 v88;
  const std::string::value_type *v89;
  std::string::size_type v90;
  std::string *v91;
  __int128 v92;
  void *v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  __int128 v97;
  uint64_t *v98;
  uint64_t i;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  int v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  std::string::size_type v111;
  std::string *v112;
  __int128 v113;
  std::string *v114;
  __int128 v115;
  std::string *v116;
  std::string::size_type v117;
  std::string *v118;
  __int128 v119;
  std::string *v120;
  __int128 v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  unint64_t *inited;
  std::string *v136;
  __int128 v137;
  const std::string::value_type *v138;
  std::string::size_type v139;
  std::string *v140;
  __int128 v141;
  int v142;
  int v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  std::string *v147;
  __int128 v148;
  std::string *v149;
  __int128 v150;
  std::string *v151;
  std::string::size_type v152;
  std::string *v153;
  __int128 v154;
  std::string *v155;
  __int128 v156;
  int v157;
  uint64_t *v158;
  std::string *v159;
  __int128 v160;
  uint64_t *v161;
  std::string *v162;
  __int128 v163;
  std::string *v164;
  __int128 v165;
  std::string *v166;
  std::string::size_type v167;
  std::string *v168;
  __int128 v169;
  std::string *v170;
  __int128 v171;
  const std::string::value_type *v172;
  std::string::size_type v173;
  std::string *v174;
  __int128 v175;
  std::string *v176;
  __int128 v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t *v180;
  std::string *v181;
  __int128 v182;
  std::string *v183;
  __int128 v184;
  std::string *v185;
  std::string::size_type v186;
  std::string *v187;
  __int128 v188;
  std::string *v189;
  __int128 v190;
  const std::string::value_type *v191;
  std::string::size_type v192;
  std::string *v193;
  __int128 v194;
  uint64_t v195;
  uint64_t *v196;
  std::string *v197;
  __int128 v198;
  std::string *v199;
  std::string::size_type v200;
  std::string *v201;
  __int128 v202;
  std::string *v203;
  __int128 v204;
  std::string *v205;
  std::string::size_type v206;
  std::string *v207;
  __int128 v208;
  std::string *v209;
  __int128 v210;
  uint64_t *v211;
  uint64_t *v212;
  int data;
  std::string *v214;
  __int128 v215;
  const std::string::value_type *v216;
  std::string::size_type v217;
  std::string *v218;
  __int128 v219;
  void *v220;
  char v221;
  uint64_t *v222;
  std::string *v223;
  __int128 v224;
  uint64_t *v225;
  std::string *v226;
  __int128 v227;
  uint64_t *v228;
  int v229;
  std::string *v230;
  __int128 v231;
  std::string *v232;
  std::string::size_type v233;
  std::string *v234;
  __int128 v235;
  std::string *v236;
  __int128 v237;
  std::string *v238;
  std::string::size_type v239;
  std::string *v240;
  __int128 v241;
  std::string *v242;
  __int128 v243;
  std::string *v244;
  __int128 v245;
  uint64_t *v246;
  uint64_t *v247;
  std::string *v248;
  __int128 v249;
  uint64_t v250;
  unint64_t v251;
  std::string *v252;
  __int128 v253;
  std::string *v254;
  std::string::size_type v255;
  std::string *v256;
  __int128 v257;
  std::string *v258;
  __int128 v259;
  std::string *v260;
  __int128 v261;
  std::string *v262;
  __int128 v263;
  unint64_t v264;
  std::string *v265;
  __int128 v266;
  std::string *v267;
  std::string::size_type v268;
  std::string *v269;
  __int128 v270;
  std::string *v271;
  __int128 v272;
  std::string __p;
  uint64_t v274;
  std::string v275;
  std::string v276;
  std::string v277;
  std::string v278;
  std::string v279;
  _BYTE v280[24];
  uint64_t v281;
  std::string v282;

  v6 = this;
  v7 = *(_QWORD *)(a2 + 16);
  if ((*(char *)(v7 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v7 + 23))
      goto LABEL_3;
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(v280, "Feature description must have a non-empty name.");
    *(_QWORD *)v6 = 12;
    std::operator+<char>();
    if ((v280[23] & 0x80000000) == 0)
      return;
    v12 = *(void **)v280;
    goto LABEL_16;
  }
  if (!*(_QWORD *)(v7 + 8))
    goto LABEL_9;
LABEL_3:
  if ((_UNKNOWN *)a2 == &CoreML::Specification::_FeatureDescription_default_instance_
    || (v8 = *(_QWORD *)(a2 + 32)) == 0)
  {
    std::operator+<char>();
    v13 = std::string::append(&__p, " must specify a valid feature type.");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    *(_QWORD *)&v280[16] = *((_QWORD *)&v13->__r_.__value_.__l + 2);
    *(_OWORD *)v280 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)v6 = 12;
    std::operator+<char>();
    goto LABEL_12;
  }
  v9 = *(_DWORD *)(v8 + 36);
  if (v9 == 8)
  {
    if ((a4 & 0xFFFFFFFD) != 0)
    {
      std::operator+<char>();
      v10 = std::string::append(&__p, "' should only be declared in the state feature description.");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      *(_QWORD *)&v280[16] = *((_QWORD *)&v10->__r_.__value_.__l + 2);
      *(_OWORD *)v280 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v6 = 12;
      std::operator+<char>();
      goto LABEL_12;
    }
    if (a3 <= 8)
    {
      std::to_string(&v279, 9);
      v19 = std::string::insert(&v279, 0, "State types are only valid in specification verison >= ");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v282.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v282, ". This model has version ");
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v278, a3);
      if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v278;
      else
        v23 = (std::string *)v278.__r_.__value_.__r.__words[0];
      if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v278.__r_.__value_.__r.__words[2]);
      else
        size = v278.__r_.__value_.__l.__size_;
      goto LABEL_29;
    }
    if (*(_BYTE *)(v8 + 16))
    {
      std::operator+<char>();
      v28 = std::string::append(&__p, "' cannot be optional.");
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      *(_QWORD *)&v280[16] = *((_QWORD *)&v28->__r_.__value_.__l + 2);
      *(_OWORD *)v280 = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v6 = 12;
      std::operator+<char>();
      goto LABEL_12;
    }
    v80 = *(uint64_t **)(v8 + 24);
    if (*((_DWORD *)v80 + 7) != 1)
    {
      this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
      if (*(_DWORD *)(v8 + 36) == 8)
      {
        v80 = *(uint64_t **)(v8 + 24);
      }
      else
      {
        this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
        v80 = &CoreML::Specification::_StateFeatureType_default_instance_;
      }
    }
    if (*((_DWORD *)v80 + 7) == 1)
    {
      v98 = (uint64_t *)v80[2];
    }
    else
    {
      this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
      v98 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
    }
    if (!*((_DWORD *)v98 + 4))
    {
LABEL_131:
      std::operator+<char>();
      v96 = std::string::append(&__p, "' has missing shape constraints.");
      v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
      *(_QWORD *)&v280[16] = *((_QWORD *)&v96->__r_.__value_.__l + 2);
      *(_OWORD *)v280 = v97;
      v96->__r_.__value_.__l.__size_ = 0;
      v96->__r_.__value_.__r.__words[2] = 0;
      v96->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v6 = 12;
      std::operator+<char>();
LABEL_12:
      if ((v280[23] & 0x80000000) != 0)
        operator delete(*(void **)v280);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_16:
        operator delete(v12);
        return;
      }
      return;
    }
    for (i = 0; ; ++i)
    {
      if (*(_DWORD *)(v8 + 36) == 8)
      {
        v100 = *(uint64_t **)(v8 + 24);
      }
      else
      {
        this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
        v100 = &CoreML::Specification::_StateFeatureType_default_instance_;
      }
      if (*((_DWORD *)v100 + 7) == 1)
      {
        v101 = (uint64_t *)v100[2];
      }
      else
      {
        this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
        v101 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      v102 = *((int *)v101 + 4);
      v103 = *(_DWORD *)(v8 + 36);
      if (i >= v102)
        break;
      if (v103 == 8)
      {
        v104 = *(uint64_t **)(v8 + 24);
      }
      else
      {
        this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
        v104 = &CoreML::Specification::_StateFeatureType_default_instance_;
      }
      if (*((_DWORD *)v104 + 7) == 1)
      {
        v105 = (uint64_t *)v104[2];
      }
      else
      {
        this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
        v105 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      v106 = *(_QWORD *)(v105[3] + 8 * i + 8);
      if (v106 < 0)
      {
        std::operator+<char>();
        v108 = std::string::append(&v277, "' has an invalid shape. Element ");
        v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
        v278.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v109;
        v108->__r_.__value_.__l.__size_ = 0;
        v108->__r_.__value_.__r.__words[2] = 0;
        v108->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v276, i);
        if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v110 = &v276;
        else
          v110 = (std::string *)v276.__r_.__value_.__r.__words[0];
        if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v111 = HIBYTE(v276.__r_.__value_.__r.__words[2]);
        else
          v111 = v276.__r_.__value_.__l.__size_;
        v112 = std::string::append(&v278, (const std::string::value_type *)v110, v111);
        v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
        v279.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v113;
        v112->__r_.__value_.__l.__size_ = 0;
        v112->__r_.__value_.__r.__words[2] = 0;
        v112->__r_.__value_.__r.__words[0] = 0;
        v114 = std::string::append(&v279, " has non-positive value ");
        v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
        v282.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v115;
        v114->__r_.__value_.__l.__size_ = 0;
        v114->__r_.__value_.__r.__words[2] = 0;
        v114->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v275, v106);
        if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v116 = &v275;
        else
          v116 = (std::string *)v275.__r_.__value_.__r.__words[0];
        if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v117 = HIBYTE(v275.__r_.__value_.__r.__words[2]);
        else
          v117 = v275.__r_.__value_.__l.__size_;
        goto LABEL_168;
      }
    }
    if (v103 == 8)
    {
      v107 = *(uint64_t **)(v8 + 24);
    }
    else
    {
      this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
      v107 = &CoreML::Specification::_StateFeatureType_default_instance_;
    }
    if (*((_DWORD *)v107 + 7) == 1)
    {
      v145 = (uint64_t *)v107[2];
    }
    else
    {
      this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
      v145 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
    }
    if (*((_DWORD *)v145 + 9) != 65552)
    {
      std::operator+<char>();
      v147 = std::string::append(&__p, "' has an invalid or unspecified dataType. It must be specified as FLOAT16");
      v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
      *(_QWORD *)&v280[16] = *((_QWORD *)&v147->__r_.__value_.__l + 2);
      *(_OWORD *)v280 = v148;
      v147->__r_.__value_.__l.__size_ = 0;
      v147->__r_.__value_.__r.__words[2] = 0;
      v147->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v6 = 12;
      std::operator+<char>();
      goto LABEL_12;
    }
    if (*(_DWORD *)(v8 + 36) == 8)
    {
      v146 = *(uint64_t **)(v8 + 24);
    }
    else
    {
      this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
      v146 = &CoreML::Specification::_StateFeatureType_default_instance_;
    }
    if (*((_DWORD *)v146 + 7) == 1)
    {
      v161 = (uint64_t *)v146[2];
    }
    else
    {
      this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
      v161 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
    }
    if (*((_DWORD *)v161 + 15))
    {
      std::operator+<char>();
      v162 = std::string::append(&__p, "' cannot have flexible shape.");
      v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
      *(_QWORD *)&v280[16] = *((_QWORD *)&v162->__r_.__value_.__l + 2);
      *(_OWORD *)v280 = v163;
      v162->__r_.__value_.__l.__size_ = 0;
      v162->__r_.__value_.__r.__words[2] = 0;
      v162->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v6 = 12;
      std::operator+<char>();
      goto LABEL_12;
    }
    if (*(_DWORD *)(v8 + 36) == 8)
    {
      v196 = *(uint64_t **)(v8 + 24);
    }
    else
    {
      this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
      v196 = &CoreML::Specification::_StateFeatureType_default_instance_;
    }
    if (*((_DWORD *)v196 + 7) == 1)
    {
      v247 = (uint64_t *)v196[2];
    }
    else
    {
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
      v247 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
    }
    if (*((_DWORD *)v247 + 16))
    {
      std::operator+<char>();
      v248 = std::string::append(&__p, "' cannot have default optional value.");
      v249 = *(_OWORD *)&v248->__r_.__value_.__l.__data_;
      *(_QWORD *)&v280[16] = *((_QWORD *)&v248->__r_.__value_.__l + 2);
      *(_OWORD *)v280 = v249;
      v248->__r_.__value_.__l.__size_ = 0;
      v248->__r_.__value_.__r.__words[2] = 0;
      v248->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v6 = 12;
      std::operator+<char>();
      goto LABEL_12;
    }
LABEL_90:
    CoreML::Result::Result(v6);
    return;
  }
  if (a4 == 2)
  {
    std::operator+<char>();
    v15 = std::string::append(&__p, "' is not.");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    *(_QWORD *)&v280[16] = *((_QWORD *)&v15->__r_.__value_.__l + 2);
    *(_OWORD *)v280 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)v6 = 12;
    std::operator+<char>();
    goto LABEL_12;
  }
  switch(v9)
  {
    case 0:
      std::operator+<char>();
      v17 = std::string::append(&__p, "'.");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      *(_QWORD *)&v280[16] = *((_QWORD *)&v17->__r_.__value_.__l + 2);
      *(_OWORD *)v280 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v6 = 12;
      std::operator+<char>();
      goto LABEL_12;
    case 4:
      v51 = *(_QWORD *)(v8 + 24);
      v53 = *(_QWORD *)(v51 + 16);
      v52 = *(_QWORD *)(v51 + 24);
      v55 = v53 > 0 && v52 > 0;
      if (a3 < 3)
        goto LABEL_355;
      v56 = *(_DWORD *)(v51 + 52);
      if (v56 != 31)
      {
        if (v56 == 21)
        {
          v57 = *(_QWORD *)(v51 + 40);
          v58 = *(int *)(v57 + 24);
          if (!(_DWORD)v58)
            goto LABEL_262;
          v59 = *(_QWORD *)(v57 + 32);
          if (v55)
          {
            if (v59)
              v60 = v59 + 8;
            else
              v60 = 0;
            v61 = 8 * v58;
            do
            {
              if (v53 == *(_QWORD *)(*(_QWORD *)v60 + 16) && v52 == *(_QWORD *)(*(_QWORD *)v60 + 24))
                goto LABEL_355;
              v60 += 8;
              v61 -= 8;
            }
            while (v61);
            std::operator+<char>();
            v62 = std::string::append(&v277, "' has a default size of ");
            v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
            v278.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v63;
            v62->__r_.__value_.__l.__size_ = 0;
            v62->__r_.__value_.__r.__words[2] = 0;
            v62->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v276, v53);
            if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v64 = &v276;
            else
              v64 = (std::string *)v276.__r_.__value_.__r.__words[0];
            if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v65 = HIBYTE(v276.__r_.__value_.__r.__words[2]);
            else
              v65 = v276.__r_.__value_.__l.__size_;
            v66 = std::string::append(&v278, (const std::string::value_type *)v64, v65);
            v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
            v279.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v67;
            v66->__r_.__value_.__l.__size_ = 0;
            v66->__r_.__value_.__r.__words[2] = 0;
            v66->__r_.__value_.__r.__words[0] = 0;
            v68 = std::string::append(&v279, " × ");
            v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
            v282.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v69;
            v68->__r_.__value_.__l.__size_ = 0;
            v68->__r_.__value_.__r.__words[2] = 0;
            v68->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v275, v52);
            if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v70 = &v275;
            else
              v70 = (std::string *)v275.__r_.__value_.__r.__words[0];
            if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v71 = HIBYTE(v275.__r_.__value_.__r.__words[2]);
            else
              v71 = v275.__r_.__value_.__l.__size_;
            v72 = std::string::append(&v282, (const std::string::value_type *)v70, v71);
            v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v73;
            v72->__r_.__value_.__l.__size_ = 0;
            v72->__r_.__value_.__r.__words[2] = 0;
            v72->__r_.__value_.__r.__words[0] = 0;
            v74 = std::string::append(&__p, " which is not within the allowed enumerated sizes specified.");
            v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
            *(_QWORD *)&v280[16] = *((_QWORD *)&v74->__r_.__value_.__l + 2);
            *(_OWORD *)v280 = v75;
            v74->__r_.__value_.__l.__size_ = 0;
            v74->__r_.__value_.__r.__words[2] = 0;
            v74->__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)v6 = 12;
            std::operator+<char>();
            goto LABEL_312;
          }
          v195 = *(_QWORD *)(v59 + 8);
          v53 = *(_QWORD *)(v195 + 16);
          v52 = *(_QWORD *)(v195 + 24);
        }
LABEL_355:
        if (v53 <= 0)
        {
          std::operator+<char>();
          v223 = std::string::append(&v279, "' has missing or non-positive width ");
          v224 = *(_OWORD *)&v223->__r_.__value_.__l.__data_;
          v282.__r_.__value_.__r.__words[2] = v223->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v224;
          v223->__r_.__value_.__l.__size_ = 0;
          v223->__r_.__value_.__r.__words[2] = 0;
          v223->__r_.__value_.__r.__words[0] = 0;
          if (*(_DWORD *)(v8 + 36) == 4)
          {
            v225 = *(uint64_t **)(v8 + 24);
          }
          else
          {
            CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v223);
            v225 = &CoreML::Specification::_ImageFeatureType_default_instance_;
          }
          std::to_string(&v278, v225[2]);
          if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v238 = &v278;
          else
            v238 = (std::string *)v278.__r_.__value_.__r.__words[0];
          if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v239 = HIBYTE(v278.__r_.__value_.__r.__words[2]);
          else
            v239 = v278.__r_.__value_.__l.__size_;
        }
        else
        {
          if (v52 > 0)
          {
            if (*(_DWORD *)(v8 + 36) == 4)
            {
              v222 = *(uint64_t **)(v8 + 24);
            }
            else
            {
              CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
              v222 = &CoreML::Specification::_ImageFeatureType_default_instance_;
            }
            v229 = *((_DWORD *)v222 + 8);
            if (v229 <= 29)
            {
              if (v229 == 10 || v229 == 20)
                goto LABEL_90;
LABEL_420:
              std::operator+<char>();
              v244 = std::string::append(&__p, "' has missing or invalid colorspace. It must be RGB, BGR or GRAYSCALE.");
              v245 = *(_OWORD *)&v244->__r_.__value_.__l.__data_;
              *(_QWORD *)&v280[16] = *((_QWORD *)&v244->__r_.__value_.__l + 2);
              *(_OWORD *)v280 = v245;
              v244->__r_.__value_.__l.__size_ = 0;
              v244->__r_.__value_.__r.__words[2] = 0;
              v244->__r_.__value_.__r.__words[0] = 0;
              *(_QWORD *)v6 = 12;
              std::operator+<char>();
              goto LABEL_12;
            }
            if (v229 == 30)
              goto LABEL_90;
            if (v229 != 40)
              goto LABEL_420;
            if (a3 > 6)
              goto LABEL_90;
            std::to_string(&v282, 7);
            v230 = std::string::append(&v282, ". This model has version ");
            v231 = *(_OWORD *)&v230->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v230->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v231;
            v230->__r_.__value_.__l.__size_ = 0;
            v230->__r_.__value_.__r.__words[2] = 0;
            v230->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v279, a3);
            if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v232 = &v279;
            else
              v232 = (std::string *)v279.__r_.__value_.__r.__words[0];
            if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v233 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
            else
              v233 = v279.__r_.__value_.__l.__size_;
            v234 = std::string::append(&__p, (const std::string::value_type *)v232, v233);
            v235 = *(_OWORD *)&v234->__r_.__value_.__l.__data_;
            *(_QWORD *)&v280[16] = *((_QWORD *)&v234->__r_.__value_.__l + 2);
            *(_OWORD *)v280 = v235;
            v234->__r_.__value_.__l.__size_ = 0;
            v234->__r_.__value_.__r.__words[2] = 0;
            v234->__r_.__value_.__r.__words[0] = 0;
            std::operator+<char>();
            v236 = std::string::append(&v277, "' has GRAYSCALE_FLOAT16 colorspace, which is only valid in specification version >= ");
            v237 = *(_OWORD *)&v236->__r_.__value_.__l.__data_;
            v278.__r_.__value_.__r.__words[2] = v236->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v237;
            v236->__r_.__value_.__l.__size_ = 0;
            v236->__r_.__value_.__r.__words[2] = 0;
            v236->__r_.__value_.__r.__words[0] = 0;
            if (v280[23] >= 0)
              v172 = v280;
            else
              v172 = *(const std::string::value_type **)v280;
            if (v280[23] >= 0)
              v173 = v280[23];
            else
              v173 = *(_QWORD *)&v280[8];
            goto LABEL_383;
          }
          std::operator+<char>();
          v226 = std::string::append(&v279, "' has missing or non-positive height ");
          v227 = *(_OWORD *)&v226->__r_.__value_.__l.__data_;
          v282.__r_.__value_.__r.__words[2] = v226->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v227;
          v226->__r_.__value_.__l.__size_ = 0;
          v226->__r_.__value_.__r.__words[2] = 0;
          v226->__r_.__value_.__r.__words[0] = 0;
          if (*(_DWORD *)(v8 + 36) == 4)
          {
            v228 = *(uint64_t **)(v8 + 24);
          }
          else
          {
            CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v226);
            v228 = &CoreML::Specification::_ImageFeatureType_default_instance_;
          }
          std::to_string(&v278, v228[3]);
          if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v238 = &v278;
          else
            v238 = (std::string *)v278.__r_.__value_.__r.__words[0];
          if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v239 = HIBYTE(v278.__r_.__value_.__r.__words[2]);
          else
            v239 = v278.__r_.__value_.__l.__size_;
        }
        v240 = std::string::append(&v282, (const std::string::value_type *)v238, v239);
        v241 = *(_OWORD *)&v240->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v240->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v241;
        v240->__r_.__value_.__l.__size_ = 0;
        v240->__r_.__value_.__r.__words[2] = 0;
        v240->__r_.__value_.__r.__words[0] = 0;
        v242 = std::string::append(&__p, ".");
        v243 = *(_OWORD *)&v242->__r_.__value_.__l.__data_;
        *(_QWORD *)&v280[16] = *((_QWORD *)&v242->__r_.__value_.__l + 2);
        *(_OWORD *)v280 = v243;
        v242->__r_.__value_.__l.__size_ = 0;
        v242->__r_.__value_.__r.__words[2] = 0;
        v242->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)v6 = 12;
        std::operator+<char>();
        if ((v280[23] & 0x80000000) != 0)
          operator delete(*(void **)v280);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
        {
          v27 = (void *)v278.__r_.__value_.__r.__words[0];
          goto LABEL_35;
        }
LABEL_415:
        if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v282.__r_.__value_.__l.__data_);
        if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
        {
          v12 = (void *)v279.__r_.__value_.__r.__words[0];
          goto LABEL_16;
        }
        return;
      }
      v132 = *(uint64_t **)(*(_QWORD *)(v51 + 40) + 16);
      v133 = &CoreML::Specification::_SizeRange_default_instance_;
      if (v132)
        v134 = v132;
      else
        v134 = &CoreML::Specification::_SizeRange_default_instance_;
      CoreML::validateSizeRange((CoreML *)v280, (const CoreML::Specification::SizeRange *)v134);
      if ((*(_DWORD *)v280 & 0xFFFFFFEF) != 0)
      {
        std::operator+<char>();
        v136 = std::string::append(&v279, "' has an invalid flexible width range. ");
        v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
        v282.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v137;
        v136->__r_.__value_.__l.__size_ = 0;
        v136->__r_.__value_.__r.__words[2] = 0;
        v136->__r_.__value_.__r.__words[0] = 0;
        if (v281 >= 0)
          v138 = &v280[8];
        else
          v138 = *(const std::string::value_type **)&v280[8];
        if (v281 >= 0)
          v139 = HIBYTE(v281);
        else
          v139 = *(_QWORD *)&v280[16];
        v140 = std::string::append(&v282, v138, v139);
        v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v141;
        v140->__r_.__value_.__l.__size_ = 0;
        v140->__r_.__value_.__r.__words[2] = 0;
        v140->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)v6 = 12;
        this = (CoreML::Result *)std::operator+<char>();
LABEL_344:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v282.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v279.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_351;
        v220 = (void *)v279.__r_.__value_.__r.__words[0];
LABEL_350:
        operator delete(v220);
LABEL_351:
        v221 = 0;
        goto LABEL_352;
      }
      if (*(_DWORD *)(v8 + 36) == 4)
      {
        v178 = *(uint64_t **)(v8 + 24);
      }
      else
      {
        inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
        v178 = &CoreML::Specification::_ImageFeatureType_default_instance_;
      }
      if (*((_DWORD *)v178 + 13) == 31)
      {
        v211 = (uint64_t *)v178[5];
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
        v211 = &CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_;
      }
      v212 = (uint64_t *)v211[3];
      if (v212)
        v133 = v212;
      CoreML::validateSizeRange((CoreML *)&__p, (const CoreML::Specification::SizeRange *)v133);
      data = (int)__p.__r_.__value_.__l.__data_;
      *(_QWORD *)v280 = __p.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v281) < 0)
      {
        operator delete(*(void **)&v280[8]);
        data = *(_DWORD *)v280;
      }
      *(_OWORD *)&v280[8] = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
      v281 = v274;
      if ((data & 0xFFFFFFEF) != 0)
      {
        std::operator+<char>();
        v214 = std::string::append(&v279, "' has an invalid flexible height range. ");
        v215 = *(_OWORD *)&v214->__r_.__value_.__l.__data_;
        v282.__r_.__value_.__r.__words[2] = v214->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v215;
        v214->__r_.__value_.__l.__size_ = 0;
        v214->__r_.__value_.__r.__words[2] = 0;
        v214->__r_.__value_.__r.__words[0] = 0;
        if (v281 >= 0)
          v216 = &v280[8];
        else
          v216 = *(const std::string::value_type **)&v280[8];
        if (v281 >= 0)
          v217 = HIBYTE(v281);
        else
          v217 = *(_QWORD *)&v280[16];
        v218 = std::string::append(&v282, v216, v217);
        v219 = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v218->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v219;
        v218->__r_.__value_.__l.__size_ = 0;
        v218->__r_.__value_.__r.__words[2] = 0;
        v218->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)v6 = 12;
        this = (CoreML::Result *)std::operator+<char>();
        goto LABEL_344;
      }
      v250 = v134[2];
      if (v55)
      {
        if (v53 < v250 || (v251 = v134[3], (v251 & 0x8000000000000000) == 0) && v53 > v251)
        {
          std::operator+<char>();
          v252 = std::string::append(&v278, "' default width ");
          v253 = *(_OWORD *)&v252->__r_.__value_.__l.__data_;
          v279.__r_.__value_.__r.__words[2] = v252->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v253;
          v252->__r_.__value_.__l.__size_ = 0;
          v252->__r_.__value_.__r.__words[2] = 0;
          v252->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v277, v53);
          if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v254 = &v277;
          else
            v254 = (std::string *)v277.__r_.__value_.__r.__words[0];
          if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v255 = HIBYTE(v277.__r_.__value_.__r.__words[2]);
          else
            v255 = v277.__r_.__value_.__l.__size_;
          v256 = std::string::append(&v279, (const std::string::value_type *)v254, v255);
          v257 = *(_OWORD *)&v256->__r_.__value_.__l.__data_;
          v282.__r_.__value_.__r.__words[2] = v256->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v257;
          v256->__r_.__value_.__l.__size_ = 0;
          v256->__r_.__value_.__r.__words[2] = 0;
          v256->__r_.__value_.__r.__words[0] = 0;
          v258 = std::string::append(&v282, " is not within specified flexible width range");
          v259 = *(_OWORD *)&v258->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v258->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v259;
          v258->__r_.__value_.__l.__size_ = 0;
          v258->__r_.__value_.__r.__words[2] = 0;
          v258->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)v6 = 12;
          this = (CoreML::Result *)std::operator+<char>();
LABEL_464:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v282.__r_.__value_.__l.__data_);
          if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v277.__r_.__value_.__l.__data_);
          if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v279.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v278.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_351;
          v220 = (void *)v278.__r_.__value_.__r.__words[0];
          goto LABEL_350;
        }
        if (v52 < v133[2] || (v264 = v133[3], v221 = 1, (v264 & 0x8000000000000000) == 0) && v52 > v264)
        {
          std::operator+<char>();
          v265 = std::string::append(&v278, "' default height ");
          v266 = *(_OWORD *)&v265->__r_.__value_.__l.__data_;
          v279.__r_.__value_.__r.__words[2] = v265->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v266;
          v265->__r_.__value_.__l.__size_ = 0;
          v265->__r_.__value_.__r.__words[2] = 0;
          v265->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v277, v52);
          if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v267 = &v277;
          else
            v267 = (std::string *)v277.__r_.__value_.__r.__words[0];
          if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v268 = HIBYTE(v277.__r_.__value_.__r.__words[2]);
          else
            v268 = v277.__r_.__value_.__l.__size_;
          v269 = std::string::append(&v279, (const std::string::value_type *)v267, v268);
          v270 = *(_OWORD *)&v269->__r_.__value_.__l.__data_;
          v282.__r_.__value_.__r.__words[2] = v269->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v270;
          v269->__r_.__value_.__l.__size_ = 0;
          v269->__r_.__value_.__r.__words[2] = 0;
          v269->__r_.__value_.__r.__words[0] = 0;
          v271 = std::string::append(&v282, " is not within specified flexible height range");
          v272 = *(_OWORD *)&v271->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v271->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v272;
          v271->__r_.__value_.__l.__size_ = 0;
          v271->__r_.__value_.__r.__words[2] = 0;
          v271->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)v6 = 12;
          this = (CoreML::Result *)std::operator+<char>();
          goto LABEL_464;
        }
      }
      else
      {
        v52 = v133[2];
        v221 = 1;
        v53 = v250;
      }
LABEL_352:
      if (SHIBYTE(v281) < 0)
        operator delete(*(void **)&v280[8]);
      if ((v221 & 1) == 0)
        return;
      goto LABEL_355;
    case 5:
      v30 = *(_QWORD *)(v8 + 24);
      v31 = *(_DWORD *)(v30 + 16);
      if (a3 < 3)
        goto LABEL_101;
      v32 = *(_DWORD *)(v30 + 60);
      if (v32 != 31)
      {
        if (v32 == 21)
        {
          v33 = *(_QWORD *)(v30 + 40);
          v34 = *(int *)(v33 + 24);
          if (!(_DWORD)v34)
          {
LABEL_262:
            std::operator+<char>();
            v176 = std::string::append(&__p, "' has enumerated zero permitted sizes.");
            v177 = *(_OWORD *)&v176->__r_.__value_.__l.__data_;
            *(_QWORD *)&v280[16] = *((_QWORD *)&v176->__r_.__value_.__l + 2);
            *(_OWORD *)v280 = v177;
            v176->__r_.__value_.__l.__size_ = 0;
            v176->__r_.__value_.__r.__words[2] = 0;
            v176->__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)v6 = 12;
            std::operator+<char>();
            goto LABEL_12;
          }
          v35 = *(_QWORD *)(v33 + 32);
          if (v35)
            v36 = v35 + 8;
          else
            v36 = 0;
          v37 = v36 + 8 * v34;
          v38 = 8 * v34;
          v39 = v36;
          do
          {
            if (!*(_DWORD *)(*(_QWORD *)v39 + 16))
            {
              std::operator+<char>();
              v181 = std::string::append(&__p, "' has enumerated shapes with zero dimensions.");
              v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
              *(_QWORD *)&v280[16] = *((_QWORD *)&v181->__r_.__value_.__l + 2);
              *(_OWORD *)v280 = v182;
              v181->__r_.__value_.__l.__size_ = 0;
              v181->__r_.__value_.__r.__words[2] = 0;
              v181->__r_.__value_.__r.__words[0] = 0;
              *(_QWORD *)v6 = 12;
              std::operator+<char>();
              goto LABEL_12;
            }
            v39 += 8;
            v38 -= 8;
          }
          while (v38);
          if (v31)
          {
            do
            {
              if (*(_DWORD *)(*(_QWORD *)v36 + 16) == v31)
              {
                if (v31 < 1)
                  goto LABEL_102;
                v40 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v36 + 24) + 8);
                v41 = (uint64_t *)(*(_QWORD *)(v30 + 24) + 8);
                v42 = *(unsigned int *)(v30 + 16);
                while (1)
                {
                  v44 = *v41++;
                  v43 = v44;
                  v45 = *v40++;
                  if (v43 != v45)
                    break;
                  if (!--v42)
                    goto LABEL_102;
                }
              }
              v36 += 8;
            }
            while (v36 != v37);
            std::operator+<char>();
            v46 = std::string::append(&v282, "' has a default shape specified ");
            v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v47;
            v46->__r_.__value_.__l.__size_ = 0;
            v46->__r_.__value_.__r.__words[2] = 0;
            v46->__r_.__value_.__r.__words[0] = 0;
            v48 = std::string::append(&__p, " which is not within the allowed enumerated shapes specified.");
            v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
            *(_QWORD *)&v280[16] = *((_QWORD *)&v48->__r_.__value_.__l + 2);
            *(_OWORD *)v280 = v49;
            v48->__r_.__value_.__l.__size_ = 0;
            v48->__r_.__value_.__r.__words[2] = 0;
            v48->__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)v6 = 12;
            std::operator+<char>();
            if ((v280[23] & 0x80000000) == 0)
              goto LABEL_392;
            v50 = *(void **)v280;
            goto LABEL_391;
          }
LABEL_186:
          if (*(_DWORD *)(v8 + 36) == 5)
          {
            v131 = *(uint64_t **)(v8 + 24);
          }
          else
          {
            this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
            v131 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
          }
          v142 = *((_DWORD *)v131 + 9);
          if (v142 > 65599)
          {
            if (v142 == 65600)
              goto LABEL_206;
            v143 = 131104;
          }
          else
          {
            if (v142 == 65552)
            {
              if (a3 <= 6)
              {
                std::to_string(&v282, 7);
                v164 = std::string::append(&v282, ". This model has version ");
                v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v165;
                v164->__r_.__value_.__l.__size_ = 0;
                v164->__r_.__value_.__r.__words[2] = 0;
                v164->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v279, a3);
                if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v166 = &v279;
                else
                  v166 = (std::string *)v279.__r_.__value_.__r.__words[0];
                if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v167 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
                else
                  v167 = v279.__r_.__value_.__l.__size_;
                v168 = std::string::append(&__p, (const std::string::value_type *)v166, v167);
                v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
                *(_QWORD *)&v280[16] = *((_QWORD *)&v168->__r_.__value_.__l + 2);
                *(_OWORD *)v280 = v169;
                v168->__r_.__value_.__l.__size_ = 0;
                v168->__r_.__value_.__r.__words[2] = 0;
                v168->__r_.__value_.__r.__words[0] = 0;
                std::operator+<char>();
                v170 = std::string::append(&v277, "' has FLOAT16 dataType, which is only valid in specification version >= ");
                v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
                v278.__r_.__value_.__r.__words[2] = v170->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v171;
                v170->__r_.__value_.__l.__size_ = 0;
                v170->__r_.__value_.__r.__words[2] = 0;
                v170->__r_.__value_.__r.__words[0] = 0;
                if (v280[23] >= 0)
                  v172 = v280;
                else
                  v172 = *(const std::string::value_type **)v280;
                if (v280[23] >= 0)
                  v173 = v280[23];
                else
                  v173 = *(_QWORD *)&v280[8];
LABEL_383:
                std::string::append(&v278, v172, v173);
                *(_QWORD *)v6 = 12;
                std::operator+<char>();
                if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v278.__r_.__value_.__l.__data_);
                if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v277.__r_.__value_.__l.__data_);
                if ((v280[23] & 0x80000000) != 0)
                  operator delete(*(void **)v280);
                if ((SHIBYTE(v279.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_392:
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v12 = (void *)v282.__r_.__value_.__r.__words[0];
                    goto LABEL_16;
                  }
                  return;
                }
                v50 = (void *)v279.__r_.__value_.__r.__words[0];
LABEL_391:
                operator delete(v50);
                goto LABEL_392;
              }
LABEL_206:
              if (*(_DWORD *)(v8 + 36) == 5)
              {
                v144 = *(uint64_t **)(v8 + 24);
              }
              else
              {
                this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
                v144 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
              }
              v157 = *((_DWORD *)v144 + 16);
              switch(v157)
              {
                case ')':
                  if (*(_DWORD *)(v8 + 36) == 5)
                  {
                    v179 = *(uint64_t **)(v8 + 24);
                  }
                  else
                  {
                    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
                    v179 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
                  }
                  if (*((_DWORD *)v179 + 9) == 131104)
                    goto LABEL_90;
                  break;
                case '3':
                  if (*(_DWORD *)(v8 + 36) == 5)
                  {
                    v180 = *(uint64_t **)(v8 + 24);
                  }
                  else
                  {
                    this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
                    v180 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
                  }
                  if (*((_DWORD *)v180 + 9) == 65568)
                    goto LABEL_90;
                  if (*(_DWORD *)(v8 + 36) == 5)
                  {
                    v246 = *(uint64_t **)(v8 + 24);
                  }
                  else
                  {
                    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
                    v246 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
                  }
                  if (*((_DWORD *)v246 + 9) == 65552)
                    goto LABEL_90;
                  break;
                case '=':
                  if (*(_DWORD *)(v8 + 36) == 5)
                  {
                    v158 = *(uint64_t **)(v8 + 24);
                  }
                  else
                  {
                    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
                    v158 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
                  }
                  if (*((_DWORD *)v158 + 9) == 65600)
                    goto LABEL_90;
                  break;
                default:
                  goto LABEL_90;
              }
              std::operator+<char>();
              v262 = std::string::append(&__p, "' has mistmatch between dataType and the type of default optional value.");
              v263 = *(_OWORD *)&v262->__r_.__value_.__l.__data_;
              *(_QWORD *)&v280[16] = *((_QWORD *)&v262->__r_.__value_.__l + 2);
              *(_OWORD *)v280 = v263;
              v262->__r_.__value_.__l.__size_ = 0;
              v262->__r_.__value_.__r.__words[2] = 0;
              v262->__r_.__value_.__r.__words[0] = 0;
              *(_QWORD *)v6 = 12;
              std::operator+<char>();
              goto LABEL_12;
            }
            v143 = 65568;
          }
          if (v142 != v143)
          {
            std::operator+<char>();
            v174 = std::string::append(&__p, "' has an invalid or unspecified dataType. It must be specified as DOUBLE, FLOAT32, FLOAT16 or INT32");
            v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
            *(_QWORD *)&v280[16] = *((_QWORD *)&v174->__r_.__value_.__l + 2);
            *(_OWORD *)v280 = v175;
            v174->__r_.__value_.__l.__size_ = 0;
            v174->__r_.__value_.__r.__words[2] = 0;
            v174->__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)v6 = 12;
            std::operator+<char>();
            goto LABEL_12;
          }
          goto LABEL_206;
        }
LABEL_101:
        if (!(a4 | v31))
          goto LABEL_131;
        goto LABEL_102;
      }
      v123 = *(_QWORD *)(v30 + 40);
      LODWORD(v124) = *(_DWORD *)(v123 + 24);
      if ((int)v124 < 1)
      {
LABEL_177:
        if (!v31)
          goto LABEL_186;
        if (*(_DWORD *)(v30 + 16) != (_DWORD)v124)
        {
          std::operator+<char>();
          v197 = std::string::append(&v277, "' has a default ");
          v198 = *(_OWORD *)&v197->__r_.__value_.__l.__data_;
          v278.__r_.__value_.__r.__words[2] = v197->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v198;
          v197->__r_.__value_.__l.__size_ = 0;
          v197->__r_.__value_.__r.__words[2] = 0;
          v197->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v276, *(_DWORD *)(v30 + 16));
          if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v199 = &v276;
          else
            v199 = (std::string *)v276.__r_.__value_.__r.__words[0];
          if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v200 = HIBYTE(v276.__r_.__value_.__r.__words[2]);
          else
            v200 = v276.__r_.__value_.__l.__size_;
          v201 = std::string::append(&v278, (const std::string::value_type *)v199, v200);
          v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
          v279.__r_.__value_.__r.__words[2] = v201->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v202;
          v201->__r_.__value_.__l.__size_ = 0;
          v201->__r_.__value_.__r.__words[2] = 0;
          v201->__r_.__value_.__r.__words[0] = 0;
          v203 = std::string::append(&v279, "-d shape but a ");
          v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
          v282.__r_.__value_.__r.__words[2] = v203->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v204;
          v203->__r_.__value_.__l.__size_ = 0;
          v203->__r_.__value_.__r.__words[2] = 0;
          v203->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v275, *(_DWORD *)(v123 + 24));
          if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v205 = &v275;
          else
            v205 = (std::string *)v275.__r_.__value_.__r.__words[0];
          if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v206 = HIBYTE(v275.__r_.__value_.__r.__words[2]);
          else
            v206 = v275.__r_.__value_.__l.__size_;
          v207 = std::string::append(&v282, (const std::string::value_type *)v205, v206);
          v208 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v207->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v208;
          v207->__r_.__value_.__l.__size_ = 0;
          v207->__r_.__value_.__r.__words[2] = 0;
          v207->__r_.__value_.__r.__words[0] = 0;
          v209 = std::string::append(&__p, "-d shape range");
          v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
          *(_QWORD *)&v280[16] = *((_QWORD *)&v209->__r_.__value_.__l + 2);
          *(_OWORD *)v280 = v210;
          v209->__r_.__value_.__l.__size_ = 0;
          v209->__r_.__value_.__r.__words[2] = 0;
          v209->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)v6 = 12;
          std::operator+<char>();
          goto LABEL_312;
        }
        if ((int)v124 < 1)
        {
LABEL_103:
          for (j = 0; ; ++j)
          {
            if (*(_DWORD *)(v8 + 36) == 5)
            {
              v82 = *(uint64_t **)(v8 + 24);
            }
            else
            {
              this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
              v82 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
            }
            if (j >= *((int *)v82 + 4))
              goto LABEL_186;
            if (*(_DWORD *)(v8 + 36) == 5)
            {
              v83 = *(uint64_t **)(v8 + 24);
            }
            else
            {
              this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
              v83 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
            }
            v84 = *(_QWORD *)(v83[3] + 8 * j + 8);
            if (v84 < 0)
              break;
          }
          std::operator+<char>();
          v149 = std::string::append(&v277, "' has an invalid shape. Element ");
          v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
          v278.__r_.__value_.__r.__words[2] = v149->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v150;
          v149->__r_.__value_.__l.__size_ = 0;
          v149->__r_.__value_.__r.__words[2] = 0;
          v149->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v276, j);
          if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v151 = &v276;
          else
            v151 = (std::string *)v276.__r_.__value_.__r.__words[0];
          if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v152 = HIBYTE(v276.__r_.__value_.__r.__words[2]);
          else
            v152 = v276.__r_.__value_.__l.__size_;
          v153 = std::string::append(&v278, (const std::string::value_type *)v151, v152);
          v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
          v279.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v154;
          v153->__r_.__value_.__l.__size_ = 0;
          v153->__r_.__value_.__r.__words[2] = 0;
          v153->__r_.__value_.__r.__words[0] = 0;
          v155 = std::string::append(&v279, " has non-positive value ");
          v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
          v282.__r_.__value_.__r.__words[2] = v155->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v156;
          v155->__r_.__value_.__l.__size_ = 0;
          v155->__r_.__value_.__r.__words[2] = 0;
          v155->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v275, v84);
          if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v116 = &v275;
          else
            v116 = (std::string *)v275.__r_.__value_.__r.__words[0];
          if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v117 = HIBYTE(v275.__r_.__value_.__r.__words[2]);
          else
            v117 = v275.__r_.__value_.__l.__size_;
LABEL_168:
          v118 = std::string::append(&v282, (const std::string::value_type *)v116, v117);
          v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v119;
          v118->__r_.__value_.__l.__size_ = 0;
          v118->__r_.__value_.__r.__words[2] = 0;
          v118->__r_.__value_.__r.__words[0] = 0;
          v120 = std::string::append(&__p, ".");
          v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
          *(_QWORD *)&v280[16] = *((_QWORD *)&v120->__r_.__value_.__l + 2);
          *(_OWORD *)v280 = v121;
          v120->__r_.__value_.__l.__size_ = 0;
          v120->__r_.__value_.__r.__words[2] = 0;
          v120->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)v6 = 12;
          std::operator+<char>();
LABEL_312:
          if ((v280[23] & 0x80000000) != 0)
            operator delete(*(void **)v280);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v275.__r_.__value_.__l.__data_);
          if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v282.__r_.__value_.__l.__data_);
          if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v279.__r_.__value_.__l.__data_);
          if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v276.__r_.__value_.__l.__data_);
          if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v278.__r_.__value_.__l.__data_);
          if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
          {
            v12 = (void *)v277.__r_.__value_.__r.__words[0];
            goto LABEL_16;
          }
          return;
        }
        v124 = v124;
        v126 = *(_QWORD *)(v123 + 32) + 8;
        v127 = (uint64_t *)(*(_QWORD *)(v30 + 24) + 8);
        do
        {
          v129 = *v127++;
          v128 = v129;
          if (v129 < *(int *)(*(_QWORD *)v126 + 16)
            || (v130 = *(_QWORD *)(*(_QWORD *)v126 + 24), (v130 & 0x8000000000000000) == 0) && v128 > v130)
          {
            std::operator+<char>();
            v260 = std::string::append(&__p, "' has a default shape that is out of the specified shape range");
            v261 = *(_OWORD *)&v260->__r_.__value_.__l.__data_;
            *(_QWORD *)&v280[16] = *((_QWORD *)&v260->__r_.__value_.__l + 2);
            *(_OWORD *)v280 = v261;
            v260->__r_.__value_.__l.__size_ = 0;
            v260->__r_.__value_.__r.__words[2] = 0;
            v260->__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)v6 = 12;
            std::operator+<char>();
            goto LABEL_12;
          }
          v126 += 8;
          --v124;
        }
        while (v124);
LABEL_102:
        if (!v31)
          goto LABEL_186;
        goto LABEL_103;
      }
      v125 = 0;
      while (1)
      {
        CoreML::validateSizeRange((CoreML *)v280, *(const CoreML::Specification::SizeRange **)(*(_QWORD *)(v123 + 32) + 8 * v125 + 8));
        if ((*(_DWORD *)v280 & 0xFFFFFFEF) != 0)
          break;
        if (SHIBYTE(v281) < 0)
          operator delete(*(void **)&v280[8]);
        ++v125;
        v124 = *(int *)(v123 + 24);
        if (v125 >= v124)
          goto LABEL_177;
      }
      std::operator+<char>();
      v183 = std::string::append(&v277, "' has an invalid range for dimension ");
      v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
      v278.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v184;
      v183->__r_.__value_.__l.__size_ = 0;
      v183->__r_.__value_.__r.__words[2] = 0;
      v183->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v276, v125);
      if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v185 = &v276;
      else
        v185 = (std::string *)v276.__r_.__value_.__r.__words[0];
      if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v186 = HIBYTE(v276.__r_.__value_.__r.__words[2]);
      else
        v186 = v276.__r_.__value_.__l.__size_;
      v187 = std::string::append(&v278, (const std::string::value_type *)v185, v186);
      v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
      v279.__r_.__value_.__r.__words[2] = v187->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v188;
      v187->__r_.__value_.__l.__size_ = 0;
      v187->__r_.__value_.__r.__words[2] = 0;
      v187->__r_.__value_.__r.__words[0] = 0;
      v189 = std::string::append(&v279, ". ");
      v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
      v282.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v190;
      v189->__r_.__value_.__l.__size_ = 0;
      v189->__r_.__value_.__r.__words[2] = 0;
      v189->__r_.__value_.__r.__words[0] = 0;
      if (v281 >= 0)
        v191 = &v280[8];
      else
        v191 = *(const std::string::value_type **)&v280[8];
      if (v281 >= 0)
        v192 = HIBYTE(v281);
      else
        v192 = *(_QWORD *)&v280[16];
      v193 = std::string::append(&v282, v191, v192);
      v194 = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v193->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v194;
      v193->__r_.__value_.__l.__size_ = 0;
      v193->__r_.__value_.__r.__words[2] = 0;
      v193->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v6 = 12;
      std::operator+<char>();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v282.__r_.__value_.__l.__data_);
      if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v279.__r_.__value_.__l.__data_);
      if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v276.__r_.__value_.__l.__data_);
      if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v278.__r_.__value_.__l.__data_);
      if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
      {
        v93 = (void *)v277.__r_.__value_.__r.__words[0];
        goto LABEL_129;
      }
      goto LABEL_294;
    case 6:
      if (*(_DWORD *)(*(_QWORD *)(v8 + 24) + 28))
        goto LABEL_90;
      std::operator+<char>();
      v94 = std::string::append(&__p, "' must contain a key type of either Int64 or String.");
      v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
      *(_QWORD *)&v280[16] = *((_QWORD *)&v94->__r_.__value_.__l + 2);
      *(_OWORD *)v280 = v95;
      v94->__r_.__value_.__l.__size_ = 0;
      v94->__r_.__value_.__r.__words[2] = 0;
      v94->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v6 = 12;
      std::operator+<char>();
      goto LABEL_12;
    case 7:
      if (a3 <= 2)
      {
        std::to_string(&v279, 3);
        v76 = std::string::insert(&v279, 0, "Sequence types are only valid in specification verison >= ");
        v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
        v282.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v77;
        v76->__r_.__value_.__l.__size_ = 0;
        v76->__r_.__value_.__r.__words[2] = 0;
        v76->__r_.__value_.__r.__words[0] = 0;
        v78 = std::string::append(&v282, ". This model has version ");
        v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v79;
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v278, a3);
        if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v278;
        else
          v23 = (std::string *)v278.__r_.__value_.__r.__words[0];
        if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v278.__r_.__value_.__r.__words[2]);
        else
          size = v278.__r_.__value_.__l.__size_;
LABEL_29:
        v25 = std::string::append(&__p, (const std::string::value_type *)v23, size);
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        *(_QWORD *)&v280[16] = *((_QWORD *)&v25->__r_.__value_.__l + 2);
        *(_OWORD *)v280 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)v6 = 12;
        std::operator+<char>();
        if ((v280[23] & 0x80000000) != 0)
          operator delete(*(void **)v280);
        if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v278.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v27 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_35:
          operator delete(v27);
        }
        goto LABEL_415;
      }
      if (*(_QWORD *)(*(_QWORD *)(v8 + 24) + 16))
        v85 = *(const CoreML::Specification::SizeRange **)(*(_QWORD *)(v8 + 24) + 16);
      else
        v85 = (const CoreML::Specification::SizeRange *)&CoreML::Specification::_SizeRange_default_instance_;
      CoreML::validateSizeRange((CoreML *)v280, v85);
      if ((*(_DWORD *)v280 & 0xFFFFFFEF) != 0)
      {
        std::operator+<char>();
        v87 = std::string::append(&v279, "' has invalid allowed sizes. ");
        v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
        v282.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v88;
        v87->__r_.__value_.__l.__size_ = 0;
        v87->__r_.__value_.__r.__words[2] = 0;
        v87->__r_.__value_.__r.__words[0] = 0;
        if (v281 >= 0)
          v89 = &v280[8];
        else
          v89 = *(const std::string::value_type **)&v280[8];
        if (v281 >= 0)
          v90 = HIBYTE(v281);
        else
          v90 = *(_QWORD *)&v280[16];
        v91 = std::string::append(&v282, v89, v90);
        v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v92;
        v91->__r_.__value_.__l.__size_ = 0;
        v91->__r_.__value_.__r.__words[2] = 0;
        v91->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)v6 = 12;
        std::operator+<char>();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v282.__r_.__value_.__l.__data_);
        if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
        {
          v93 = (void *)v279.__r_.__value_.__r.__words[0];
LABEL_129:
          operator delete(v93);
        }
      }
      else
      {
        if (*(_DWORD *)(v8 + 36) == 7)
        {
          v122 = *(uint64_t **)(v8 + 24);
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v86);
          v122 = &CoreML::Specification::_SequenceFeatureType_default_instance_;
        }
        if (*((_DWORD *)v122 + 9))
        {
          if (SHIBYTE(v281) < 0)
            operator delete(*(void **)&v280[8]);
          goto LABEL_90;
        }
        std::operator+<char>();
        v159 = std::string::append(&v282, "' has invalid or missing type. Only Int64 and String sequences are currently supported");
        v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v159->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v160;
        v159->__r_.__value_.__l.__size_ = 0;
        v159->__r_.__value_.__r.__words[2] = 0;
        v159->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)v6 = 12;
        std::operator+<char>();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
        {
          v93 = (void *)v282.__r_.__value_.__r.__words[0];
          goto LABEL_129;
        }
      }
LABEL_294:
      if (SHIBYTE(v281) < 0)
      {
        v12 = *(void **)&v280[8];
        goto LABEL_16;
      }
      return;
    default:
      goto LABEL_90;
  }
}

void sub_19C9CAED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v47 - 89) < 0)
    operator delete(*(void **)(v47 - 112));
  if (a34 < 0)
    operator delete(a29);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (*(char *)(v47 - 113) < 0)
    operator delete(*(void **)(v47 - 136));
  _Unwind_Resume(exception_object);
}

void CoreML::validateModelDescription(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  std::string::size_type v44;
  uint64_t v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  std::string::size_type v49;
  std::string::size_type v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  std::string::size_type v60;
  std::string *v61;
  __int128 v62;
  int v63;
  void *v64;
  void *v65;
  void *v66[2];
  void *v67;
  void *v68;
  void *__p[2];
  void *v70;
  void *v71[2];
  unsigned __int8 v72;
  void *v73[2];
  unsigned __int8 v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  void *v79[11];
  char v80;
  uint64_t v81;

  CoreML::Result::Result((CoreML::Result *)&v68);
  if (*(int *)(a2 + 96) > 0)
  {
LABEL_2:
    if (*(_DWORD *)(a2 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&v65, "Multi-function model must not use top level input feature description.");
      v79[0] = (void *)12;
      std::operator+<char>();
      goto LABEL_28;
    }
    if (*(_DWORD *)(a2 + 48))
    {
      std::string::basic_string[abi:ne180100]<0>(&v65, "Multi-function model must not use top level output feature description.");
      v79[0] = (void *)12;
      std::operator+<char>();
      goto LABEL_28;
    }
    if (*(_DWORD *)(a2 + 72))
    {
      std::string::basic_string[abi:ne180100]<0>(&v65, "Multi-function model must not use top level state feature description.");
      v79[0] = (void *)12;
      std::operator+<char>();
      goto LABEL_28;
    }
    v9 = *(_QWORD *)(a2 + 136);
    if (*(char *)(v9 + 23) < 0)
    {
      if (*(_QWORD *)(v9 + 8))
        goto LABEL_19;
    }
    else if (*(_BYTE *)(v9 + 23))
    {
LABEL_19:
      std::string::basic_string[abi:ne180100]<0>(&v65, "Multi-function model must not use top level predictedFeatureName field.");
      v79[0] = (void *)12;
      std::operator+<char>();
      goto LABEL_28;
    }
    v10 = *(_QWORD *)(a2 + 144);
    if (*(char *)(v10 + 23) < 0)
      v11 = *(_QWORD *)(v10 + 8);
    else
      v11 = *(unsigned __int8 *)(v10 + 23);
    if (v11)
    {
      std::string::basic_string[abi:ne180100]<0>(&v65, "Multi-function model must not use top level predictedProbabilitiesName field.");
      v79[0] = (void *)12;
      std::operator+<char>();
    }
    else
    {
      if (!*(_DWORD *)(a2 + 120))
      {
        CoreML::Result::Result((CoreML::Result *)v79);
LABEL_30:
        v12 = (int)v79[0];
        v68 = v79[0];
        if (SHIBYTE(v70) < 0)
        {
          operator delete(__p[0]);
          v12 = (int)v68;
        }
        *(_OWORD *)__p = *(_OWORD *)&v79[1];
        v70 = v79[3];
        if ((v12 & 0xFFFFFFEF) != 0)
          goto LABEL_159;
        if (!a4[2])
        {
          std::string::basic_string[abi:ne180100]<0>(v79, "This model type doesn't support multi-function syntax.");
          v65 = (void *)17;
          std::operator+<char>();
          if ((SHIBYTE(v79[2]) & 0x80000000) == 0)
            goto LABEL_156;
          v21 = v79[0];
          goto LABEL_53;
        }
        if (a3 <= 8)
        {
          std::to_string(&v76, 9);
          v13 = std::string::insert(&v76, 0, "Multi-function syntax is only valid in specification verison >= ");
          v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          v77.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          v15 = std::string::append(&v77, ". This model has version ");
          v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          v78.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v75, a3);
          if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &v75;
          else
            v17 = (std::string *)v75.__r_.__value_.__r.__words[0];
          if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
          else
            size = v75.__r_.__value_.__l.__size_;
          v19 = std::string::append(&v78, (const std::string::value_type *)v17, size);
          v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v79[2] = (void *)v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)v79 = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          v65 = (void *)6;
          std::operator+<char>();
          if (SHIBYTE(v79[2]) < 0)
            operator delete(v79[0]);
          if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v75.__r_.__value_.__l.__data_);
          if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v78.__r_.__value_.__l.__data_);
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v77.__r_.__value_.__l.__data_);
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          {
            v21 = (void *)v76.__r_.__value_.__r.__words[0];
LABEL_53:
            operator delete(v21);
          }
LABEL_156:
          v63 = (int)v65;
          v68 = v65;
          if (SHIBYTE(v70) < 0)
          {
            operator delete(__p[0]);
            v63 = (int)v68;
          }
          *(_OWORD *)__p = *(_OWORD *)v66;
          v70 = v67;
          if ((v63 & 0xFFFFFFEF) != 0)
          {
LABEL_159:
            *(_QWORD *)a1 = v68;
            *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
            v64 = v70;
LABEL_160:
            *(_QWORD *)(a1 + 24) = v64;
            return;
          }
LABEL_162:
          *(_QWORD *)a1 = v68;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
          v64 = v70;
          goto LABEL_160;
        }
        memset(&v78, 0, sizeof(v78));
        v22 = *(_QWORD *)(a2 + 104);
        if (v22)
          v23 = (uint64_t *)(v22 + 8);
        else
          v23 = 0;
        v24 = *(int *)(a2 + 96);
        if (!(_DWORD)v24)
        {
          v46 = 0;
          v45 = 0;
LABEL_112:
          if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v45, v46, *(unsigned __int8 ***)(a2 + 152)) == v46)
          {
            std::operator+<char>();
            v47 = std::string::append(&v75, "' is not found in the function name list: ");
            v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
            v76.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v48;
            v47->__r_.__value_.__l.__size_ = 0;
            v47->__r_.__value_.__r.__words[2] = 0;
            v47->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(v71, ",");
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v79);
            v49 = v78.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v78.__r_.__value_.__l.__size_ - v78.__r_.__value_.__r.__words[0]) >= 1)
            {
              v50 = v78.__r_.__value_.__l.__size_ - 24;
              if (v78.__r_.__value_.__r.__words[0] != v78.__r_.__value_.__l.__size_ - 24)
              {
                do
                {
                  v51 = *(char *)(v49 + 23);
                  if (v51 >= 0)
                    v52 = v49;
                  else
                    v52 = *(_QWORD *)v49;
                  if (v51 >= 0)
                    v53 = *(unsigned __int8 *)(v49 + 23);
                  else
                    v53 = *(_QWORD *)(v49 + 8);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, v52, v53);
                  if ((v72 & 0x80u) == 0)
                    v54 = v71;
                  else
                    v54 = (void **)v71[0];
                  if ((v72 & 0x80u) == 0)
                    v55 = v72;
                  else
                    v55 = (uint64_t)v71[1];
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v54, v55);
                  v49 += 24;
                }
                while (v49 != v50);
                v49 = v50;
              }
              v56 = *(char *)(v49 + 23);
              if (v56 >= 0)
                v57 = v49;
              else
                v57 = *(_QWORD *)v49;
              if (v56 >= 0)
                v58 = *(unsigned __int8 *)(v49 + 23);
              else
                v58 = *(_QWORD *)(v49 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, v57, v58);
            }
            std::stringbuf::str();
            v79[0] = *(void **)MEMORY[0x1E0DE4F60];
            *(void **)((char *)v79 + *((_QWORD *)v79[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
            v79[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
            if (v80 < 0)
              operator delete(v79[9]);
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x1A1AD61C4](&v81);
            if ((v74 & 0x80u) == 0)
              v59 = v73;
            else
              v59 = (void **)v73[0];
            if ((v74 & 0x80u) == 0)
              v60 = v74;
            else
              v60 = (std::string::size_type)v73[1];
            v61 = std::string::append(&v76, (const std::string::value_type *)v59, v60);
            v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
            v77.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v62;
            v61->__r_.__value_.__l.__size_ = 0;
            v61->__r_.__value_.__r.__words[2] = 0;
            v61->__r_.__value_.__r.__words[0] = 0;
            v65 = (void *)18;
            std::operator+<char>();
            if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v77.__r_.__value_.__l.__data_);
            if ((char)v74 < 0)
              operator delete(v73[0]);
            if ((char)v72 < 0)
              operator delete(v71[0]);
            if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v76.__r_.__value_.__l.__data_);
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v75.__r_.__value_.__l.__data_);
          }
          else
          {
            CoreML::Result::Result((CoreML::Result *)&v65);
          }
LABEL_155:
          v79[0] = &v78;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v79);
          goto LABEL_156;
        }
        v25 = &v23[v24];
        while (1)
        {
          v26 = *v23;
          v27 = *(int *)(*v23 + 24);
          if ((int)v27 <= 0 && *a4 == 0)
          {
            std::string::basic_string[abi:ne180100]<0>(v79, "Models must have one or more inputs.");
            v65 = (void *)19;
            std::operator+<char>();
          }
          else
          {
            v29 = *(_DWORD *)(v26 + 48);
            if (a4[1])
              v30 = 0;
            else
              v30 = v29 <= 0;
            if (!v30)
            {
              v31 = *(_QWORD *)(v26 + 32);
              if (v31)
                v32 = (uint64_t *)(v31 + 8);
              else
                v32 = 0;
              if ((_DWORD)v27)
              {
                v33 = 8 * v27;
                while (1)
                {
                  CoreML::validateFeatureDescription((CoreML::Result *)&v65, *v32, a3, 0);
                  if ((v65 & 0xFFFFFFEF) != 0)
                    break;
                  if (SHIBYTE(v67) < 0)
                    operator delete(v66[0]);
                  ++v32;
                  v33 -= 8;
                  if (!v33)
                  {
                    v29 = *(_DWORD *)(v26 + 48);
                    goto LABEL_77;
                  }
                }
              }
              else
              {
LABEL_77:
                v34 = *(_QWORD *)(v26 + 56);
                if (v34)
                  v35 = (uint64_t *)(v34 + 8);
                else
                  v35 = 0;
                if (v29)
                {
                  v36 = 8 * v29;
                  while (1)
                  {
                    CoreML::validateFeatureDescription((CoreML::Result *)&v65, *v35, a3, 1);
                    if ((v65 & 0xFFFFFFEF) != 0)
                      break;
                    if (SHIBYTE(v67) < 0)
                      operator delete(v66[0]);
                    ++v35;
                    v36 -= 8;
                    if (!v36)
                      goto LABEL_86;
                  }
                }
                else
                {
LABEL_86:
                  v37 = *(_QWORD *)(v26 + 80);
                  if (v37)
                    v38 = (uint64_t *)(v37 + 8);
                  else
                    v38 = 0;
                  v39 = *(int *)(v26 + 72);
                  if ((_DWORD)v39)
                  {
                    v40 = 8 * v39;
                    while (1)
                    {
                      CoreML::validateFeatureDescription((CoreML::Result *)&v65, *v38, a3, 2);
                      if ((v65 & 0xFFFFFFEF) != 0)
                        break;
                      if (SHIBYTE(v67) < 0)
                        operator delete(v66[0]);
                      ++v38;
                      v40 -= 8;
                      if (!v40)
                        goto LABEL_95;
                    }
                  }
                  else
                  {
LABEL_95:
                    CoreML::Result::Result((CoreML::Result *)&v65);
                  }
                }
              }
              goto LABEL_100;
            }
            std::string::basic_string[abi:ne180100]<0>(v79, "Models must have one or more outputs.");
            v65 = (void *)12;
            std::operator+<char>();
          }
          if (SHIBYTE(v79[2]) < 0)
            operator delete(v79[0]);
LABEL_100:
          if ((v65 & 0xFFFFFFEF) != 0)
            goto LABEL_155;
          v41 = *(_QWORD *)(v26 + 88);
          v42 = (_OWORD *)v78.__r_.__value_.__l.__size_;
          if (v78.__r_.__value_.__l.__size_ >= v78.__r_.__value_.__r.__words[2])
          {
            v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v78, (__int128 *)v41);
          }
          else
          {
            if (*(char *)(v41 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v78.__r_.__value_.__l.__size_, *(const std::string::value_type **)v41, *(_QWORD *)(v41 + 8));
            }
            else
            {
              v43 = *(_OWORD *)v41;
              *(_QWORD *)(v78.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v41 + 16);
              *v42 = v43;
            }
            v44 = (std::string::size_type)v42 + 24;
          }
          v78.__r_.__value_.__l.__size_ = v44;
          if (SHIBYTE(v67) < 0)
            operator delete(v66[0]);
          if (++v23 == v25)
          {
            v46 = v78.__r_.__value_.__l.__size_;
            v45 = v78.__r_.__value_.__r.__words[0];
            goto LABEL_112;
          }
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v65, "Multi-function model must not use top level training input feature description.");
      v79[0] = (void *)12;
      std::operator+<char>();
    }
LABEL_28:
    if (SHIBYTE(v66[1]) < 0)
      operator delete(v65);
    goto LABEL_30;
  }
  v8 = *(_QWORD *)(a2 + 152);
  if (*(char *)(v8 + 23) < 0)
  {
    if (*(_QWORD *)(v8 + 8))
      goto LABEL_2;
  }
  else if (*(_BYTE *)(v8 + 23))
  {
    goto LABEL_2;
  }
  CoreML::validateFeatureDescriptions<CoreML::Specification::ModelDescription>((void **)a1, a2, a3, *a4, a4[1]);
  if ((*(_DWORD *)a1 & 0xFFFFFFEF) == 0)
  {
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
    goto LABEL_162;
  }
  if (SHIBYTE(v70) < 0)
    operator delete(__p[0]);
}

void sub_19C9CBDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void CoreML::validateRegressorInterface(void **this, uint64_t a2, int a3, char a4, char a5)
{
  uint64_t v7;
  const void **v8;
  unsigned int *v9;
  void **v10;
  void *v11;
  unsigned int *v12[3];
  void *__p;
  __int128 v14;
  void *v15;

  v7 = *(_QWORD *)(a2 + 136);
  if (*(char *)(v7 + 23) < 0)
  {
    if (*(_QWORD *)(v7 + 8))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(v7 + 23))
  {
LABEL_3:
    CoreML::validateFeatureDescriptions<CoreML::Specification::ModelDescription>(this, a2, a3, a4, a5);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
      return;
    v8 = *(const void ***)(a2 + 136);
    v9 = (unsigned int *)operator new(8uLL);
    *(_QWORD *)v9 = 0x500000002;
    v12[1] = v9 + 2;
    v12[2] = v9 + 2;
    v12[0] = v9;
    CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((CoreML::Result *)&__p, a2 + 40, v8, v12);
    *this = __p;
    v10 = this + 1;
    if (*((char *)this + 31) < 0)
      operator delete(*v10);
    *(_OWORD *)v10 = v14;
    this[3] = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    v11 = v9;
    goto LABEL_10;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Specification is missing regressor predictedFeatureName.");
  *this = (void *)12;
  std::operator+<char>();
  if ((SHIBYTE(v14) & 0x80000000) == 0)
    return;
  v11 = __p;
LABEL_10:
  operator delete(v11);
}

void sub_19C9CC08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void *v19;

  operator delete(v19);
  if (*(char *)(v18 + 31) < 0)
    operator delete(*(void **)(v18 + 8));
  _Unwind_Resume(a1);
}

void CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(CoreML::Result *a1, uint64_t a2, const void **a3, unsigned int **a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  const void *v11;
  const void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const void *v17;
  const void *v18;
  size_t v19;
  std::string *v21;
  __int128 v22;
  std::string v23;
  void *__p[2];
  std::string::size_type v25;
  char v26[8];
  void *v27;
  char v28;

  CoreML::Result::Result((CoreML::Result *)v26);
  v8 = *(unsigned int *)(a2 + 8);
  if ((int)v8 < 1)
  {
LABEL_23:
    std::operator+<char>();
    v21 = std::string::append(&v23, "' to the model is not present in the model description.");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v25 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)a1 = 10;
    std::operator+<char>();
    if (SHIBYTE(v25) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *((char *)a3 + 23);
    if (v10 >= 0)
      v11 = (const void *)*((unsigned __int8 *)a3 + 23);
    else
      v11 = a3[1];
    if (v10 >= 0)
      v12 = a3;
    else
      v12 = *a3;
    v13 = (uint64_t *)(v9 + 8);
    while (1)
    {
      v14 = *v13;
      v15 = *(_QWORD *)(*v13 + 16);
      v16 = *(char *)(v15 + 23);
      v17 = v16 >= 0 ? (const void *)*(unsigned __int8 *)(v15 + 23) : *(const void **)(v15 + 8);
      v18 = v16 >= 0 ? *(const void **)(*v13 + 16) : *(const void **)v15;
      v19 = (size_t)(v17 >= v11 ? v11 : v17);
      if (!memcmp(v12, v18, v19) && v17 == v11)
        break;
      ++v13;
      if (!--v8)
        goto LABEL_23;
    }
    CoreML::validateSchemaTypes(a1, a4, v14);
  }
  if (v28 < 0)
    operator delete(v27);
}

void sub_19C9CC238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::validateClassifierFeatureDescriptions(void **this, const CoreML::Specification::ModelDescription *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _DWORD *v8;
  void *v9;
  int v10;
  _QWORD *v11;
  void *__p;
  _QWORD *v13;
  _QWORD *v14;

  v5 = *((_QWORD *)a2 + 17);
  if ((*(char *)(v5 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v5 + 23))
      goto LABEL_3;
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(&__p, "Specification is missing classifier predictedFeatureName");
    *this = (void *)12;
    std::operator+<char>();
    if (SHIBYTE(v14) < 0)
      operator delete(__p);
    return;
  }
  if (!*(_QWORD *)(v5 + 8))
    goto LABEL_13;
LABEL_3:
  v6 = *((_QWORD *)a2 + 18);
  v7 = (char *)a2 + 40;
  v8 = operator new(4uLL);
  v9 = v8;
  if (a3)
    v10 = 1;
  else
    v10 = 3;
  *v8 = v10;
  v13 = v8 + 1;
  v14 = v8 + 1;
  __p = v8;
  CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((CoreML::Result *)this, (uint64_t)v7, (const void **)v5, (unsigned int **)&__p);
  operator delete(v9);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
    if (*(char *)(v6 + 23) < 0)
    {
      if (!*(_QWORD *)(v6 + 8))
      {
LABEL_20:
        CoreML::Result::Result((CoreML::Result *)this);
        return;
      }
    }
    else if (!*(_BYTE *)(v6 + 23))
    {
      goto LABEL_20;
    }
    v11 = operator new(8uLL);
    *v11 = 0x600000005;
    v13 = v11 + 1;
    v14 = v11 + 1;
    __p = v11;
    CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((CoreML::Result *)this, (uint64_t)v7, (const void **)v6, (unsigned int **)&__p);
    operator delete(v11);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0)
        operator delete(this[1]);
      goto LABEL_20;
    }
  }
}

void sub_19C9CC41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator(uint64_t a1, _QWORD *a2, uint64_t **a3, char a4, int a5, uint64_t **a6)
{
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t **v26;
  _QWORD v28[2];
  char v29;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  v7 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  v26 = (uint64_t **)(a1 + 32);
  *(_QWORD *)(a1 + 64) = 0;
  v8 = (uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  v9 = (uint64_t **)(a1 + 56);
  *(_QWORD *)(a1 + 72) = 0;
  if ((_QWORD *)(a1 + 56) != a2)
  {
    v11 = a2 + 1;
    v10 = (_QWORD *)*a2;
    if ((_QWORD *)*a2 != a2 + 1)
    {
      do
      {
        v12 = (char *)operator new(0x50uLL);
        v13 = (uint64_t *)v12;
        v28[0] = v12;
        v28[1] = v8;
        v29 = 0;
        if (*((char *)v10 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v12 + 32), (const std::string::value_type *)v10[4], v10[5]);
        }
        else
        {
          v14 = *((_OWORD *)v10 + 2);
          *((_QWORD *)v12 + 6) = v10[6];
          *((_OWORD *)v12 + 2) = v14;
        }
        std::set<std::string>::set[abi:ne180100](v13 + 7, (uint64_t)(v10 + 7));
        v29 = 1;
        v15 = (uint64_t *)v28[0];
        v16 = v8;
        v17 = v8;
        v18 = *v8;
        if (*v8)
        {
          do
          {
            while (1)
            {
              v16 = (uint64_t **)v18;
              if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v15 + 4, v18 + 4))
                break;
              v18 = *v16;
              v17 = v16;
              if (!*v16)
                goto LABEL_12;
            }
            v18 = v16[1];
          }
          while (v18);
          v17 = v16 + 1;
        }
LABEL_12:
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v9, (uint64_t)v16, v17, v15);
        v28[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
        v19 = (_QWORD *)v10[1];
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v10[2];
            v21 = *v20 == (_QWORD)v10;
            v10 = v20;
          }
          while (!v21);
        }
        v10 = v20;
      }
      while (v20 != v11);
    }
  }
  if (v7 != a3)
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>(v7, *a3, a3 + 1);
  *(_BYTE *)a1 = a4;
  *(_DWORD *)(a1 + 80) = a5;
  if (v26 != a6)
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>(v26, *a6, a6 + 1);
  return a1;
}

void sub_19C9CC638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char **a10, char **a11)
{
  _QWORD **v11;

  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*v11);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*a10);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*a11);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, const CoreML::Specification::NeuralNetworkLayer *a3)
{
  int v5;
  const CoreML::Specification::NeuralNetworkLayer *v6;
  const CoreML::Specification::NeuralNetworkLayer *v7;
  const CoreML::Specification::NeuralNetworkLayer *v8;
  const CoreML::Specification::NeuralNetworkLayer *v9;
  uint64_t v10;
  const CoreML::Specification::NeuralNetworkLayer *v11;
  const CoreML::Specification::NeuralNetworkLayer *v12;
  int v13;
  int v14;
  uint64_t v15;

  v5 = *((_DWORD *)a3 + 35);
  if (v5 <= 879)
  {
    if (v5 <= 604)
    {
      if (v5 > 249)
      {
        if (v5 > 329)
        {
          if (v5 > 409)
          {
            if (v5 <= 429)
            {
              if (v5 == 410)
              {
                CoreML::NeuralNetworkSpecValidator::validateGRULayer(this, a2, (uint64_t)a3);
                return;
              }
              if (v5 == 420)
              {
                CoreML::NeuralNetworkSpecValidator::validateUniDirectionalLSTMLayer(this, a2, (uint64_t)a3);
                return;
              }
            }
            else
            {
              switch(v5)
              {
                case 430:
                  CoreML::NeuralNetworkSpecValidator::validateBiDirectionalLSTMLayer(this, a2, (uint64_t)a3);
                  return;
                case 500:
                  CoreML::NeuralNetworkSpecValidator::validateCustomLayer(this, a3);
                  return;
                case 600:
                  CoreML::NeuralNetworkSpecValidator::validateCopyLayer(this, a3);
                  return;
              }
            }
          }
          else if (v5 <= 344)
          {
            if (v5 == 330)
            {
              CoreML::NeuralNetworkSpecValidator::validateSplitLayer(this, a2, (uint64_t)a3);
              return;
            }
            if (v5 == 340)
            {
              CoreML::NeuralNetworkSpecValidator::validateSequenceRepeatLayer(this, a2, a3);
              return;
            }
          }
          else
          {
            switch(v5)
            {
              case 345:
                CoreML::NeuralNetworkSpecValidator::validateReorganizeDataLayer(this, a2, (uint64_t)a3);
                return;
              case 350:
                CoreML::NeuralNetworkSpecValidator::validateSliceLayer(this, a2, (uint64_t)a3);
                return;
              case 400:
                CoreML::NeuralNetworkSpecValidator::validateSimpleRecurrentLayer(this, a2, (uint64_t)a3);
                return;
            }
          }
          goto LABEL_335;
        }
        if (v5 > 289)
        {
          if (v5 <= 300)
          {
            if (v5 == 290)
            {
              CoreML::NeuralNetworkSpecValidator::validateLoadConstantLayer(this, a2, (uint64_t)a3);
              return;
            }
            if (v5 == 300)
            {
              CoreML::NeuralNetworkSpecValidator::validateReshapeLayer(this, a2, (uint64_t)a3);
              return;
            }
          }
          else
          {
            switch(v5)
            {
              case 301:
                CoreML::NeuralNetworkSpecValidator::validateFlattenLayer(this, a2, a3);
                return;
              case 310:
                CoreML::NeuralNetworkSpecValidator::validatePermuteLayer(this, a2, (uint64_t)a3);
                return;
              case 320:
                CoreML::NeuralNetworkSpecValidator::validateConcatLayer(this, a2, (uint64_t)a3);
                return;
            }
          }
          goto LABEL_335;
        }
        if (v5 <= 260)
        {
          if (v5 == 250)
          {
            CoreML::NeuralNetworkSpecValidator::validateBiasLayer(this, a2, (uint64_t)a3);
            return;
          }
          if (v5 != 260)
            goto LABEL_335;
          v11 = a3;
        }
        else
        {
          if (v5 != 261)
          {
            if (v5 == 270)
            {
              CoreML::NeuralNetworkSpecValidator::validateDotLayer(this, a2, a3);
              return;
            }
            if (v5 == 280)
            {
              CoreML::NeuralNetworkSpecValidator::validateReduceLayer(this, a2, (uint64_t)a3);
              return;
            }
            goto LABEL_335;
          }
          v11 = a3;
        }
      }
      else
      {
        if (v5 <= 189)
        {
          if (v5 > 159)
          {
            if (v5 <= 169)
            {
              if (v5 == 160)
              {
                CoreML::NeuralNetworkSpecValidator::validateBatchnormLayer(this, a2, (uint64_t)a3);
                return;
              }
              if (v5 == 165)
              {
                CoreML::NeuralNetworkSpecValidator::validateMvnLayer(this, a2, a3);
                return;
              }
            }
            else
            {
              switch(v5)
              {
                case 170:
                  CoreML::NeuralNetworkSpecValidator::validateL2NormLayer(this, a2, a3);
                  return;
                case 175:
                  CoreML::NeuralNetworkSpecValidator::validateSoftmaxLayer(this, a2, a3);
                  return;
                case 180:
                  CoreML::NeuralNetworkSpecValidator::validateLRNLayer(this, a2, (uint64_t)a3);
                  return;
              }
            }
          }
          else if (v5 <= 129)
          {
            if (v5 == 100)
            {
              CoreML::NeuralNetworkSpecValidator::validateConvolutionLayer(this, a2, (uint64_t)a3);
              return;
            }
            if (v5 == 120)
            {
              CoreML::NeuralNetworkSpecValidator::validatePoolingLayer(this, a2, (uint64_t)a3);
              return;
            }
          }
          else
          {
            switch(v5)
            {
              case 130:
                CoreML::NeuralNetworkSpecValidator::validateActivation(this, a2, (uint64_t)a3);
                return;
              case 140:
                CoreML::NeuralNetworkSpecValidator::validateInnerProductLayer(this, a2, (uint64_t)a3);
                return;
              case 150:
                CoreML::NeuralNetworkSpecValidator::validateEmbeddingLayer(this, a2, (uint64_t)a3);
                return;
            }
          }
          goto LABEL_335;
        }
        if (v5 <= 219)
        {
          if (v5 <= 209)
          {
            if (v5 == 190)
            {
              CoreML::NeuralNetworkSpecValidator::validateCropLayer(this, a2, (uint64_t)a3);
              return;
            }
            if (v5 == 200)
            {
              CoreML::NeuralNetworkSpecValidator::validatePaddingLayer(this, a2, (uint64_t)a3);
              return;
            }
          }
          else
          {
            switch(v5)
            {
              case 210:
                CoreML::NeuralNetworkSpecValidator::validateUpsampleLayer(this, a2, (uint64_t)a3);
                return;
              case 211:
                CoreML::NeuralNetworkSpecValidator::validateResizeBilinearLayer(this, a2, (uint64_t)a3);
                return;
              case 212:
                CoreML::NeuralNetworkSpecValidator::validateCropResizeLayer(this, a2, (uint64_t)a3);
                return;
            }
          }
          goto LABEL_335;
        }
        if (v5 <= 230)
        {
          if (v5 == 220)
          {
            CoreML::NeuralNetworkSpecValidator::validateUnaryFunctionLayer(this, a2, a3);
            return;
          }
          if (v5 != 230)
            goto LABEL_335;
          v11 = a3;
        }
        else
        {
          switch(v5)
          {
            case 231:
              v11 = a3;
              break;
            case 240:
              v11 = a3;
              break;
            case 245:
              CoreML::NeuralNetworkSpecValidator::validateScaleLayer(this, a2, (uint64_t)a3);
              return;
            default:
              goto LABEL_335;
          }
        }
      }
      CoreML::NeuralNetworkSpecValidator::validateAddLayer(this, v11);
      return;
    }
    if (v5 <= 749)
    {
      if (v5 > 669)
      {
        v10 = (v5 - 685);
        if (v10 > 0x37)
          goto LABEL_245;
        if (((1 << (v5 + 83)) & 0x84200842000000) != 0)
          goto LABEL_324;
        if (v5 == 685)
        {
          v7 = a3;
          goto LABEL_56;
        }
        if (v10 == 15)
        {
          v7 = a3;
        }
        else
        {
LABEL_245:
          if (v5 == 670)
          {
            v7 = a3;
          }
          else
          {
            if (v5 != 680)
              goto LABEL_335;
            v7 = a3;
          }
        }
      }
      else
      {
        if (v5 <= 634)
        {
          if (v5 > 619)
          {
            if (v5 == 620 || v5 == 625)
            {
              CoreML::NeuralNetworkSpecValidator::validateLoopContinueBreakLayer(this, a2, (uint64_t)a3);
              return;
            }
          }
          else
          {
            if (v5 == 605)
            {
              CoreML::NeuralNetworkSpecValidator::validateBranchLayer(this, a2, (uint64_t)a3);
              return;
            }
            if (v5 == 615)
            {
              CoreML::NeuralNetworkSpecValidator::validateLoopLayer(this, a2, (uint64_t)a3);
              return;
            }
          }
          goto LABEL_335;
        }
        if (v5 <= 659)
        {
          if (v5 == 635)
          {
            CoreML::NeuralNetworkSpecValidator::validateRangeStaticLayer(this, a3);
            return;
          }
          if (v5 == 640)
          {
            CoreML::NeuralNetworkSpecValidator::validateRangeDynamicLayer(this, a3);
            return;
          }
          goto LABEL_335;
        }
        if (v5 == 660)
        {
          CoreML::NeuralNetworkSpecValidator::validateClipLayer(this, (uint64_t **)a3);
          return;
        }
        if (v5 != 665)
          goto LABEL_335;
        v7 = a3;
      }
    }
    else
    {
      if (v5 > 864)
      {
        switch(v5)
        {
          case 865:
            v6 = a3;
            goto LABEL_20;
          case 870:
            v6 = a3;
            goto LABEL_20;
          case 875:
            v6 = a3;
            goto LABEL_20;
        }
LABEL_335:
        CoreML::NeuralNetworkSpecValidator::validateFailUnknownType((CoreML::NeuralNetworkSpecValidator *)this, a3);
        return;
      }
      if ((v5 - 795) > 0x3C)
        goto LABEL_322;
      if (((1 << (v5 - 27)) & 0x1084202942100000) != 0)
      {
        if (v5 <= 849)
        {
          if (v5 != 840 && v5 != 845)
            goto LABEL_242;
LABEL_243:
          v12 = a3;
          v13 = 2;
          goto LABEL_244;
        }
        if (v5 == 855)
          goto LABEL_243;
        if (v5 != 850)
        {
LABEL_242:
          v12 = a3;
          v13 = 1;
LABEL_244:
          v14 = 2;
          goto LABEL_325;
        }
LABEL_324:
        v12 = a3;
        v13 = 1;
        v14 = 1;
LABEL_325:
        CoreML::validateInputCount((CoreML *)this, v12, v13, v14);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0)
            operator delete(this[1]);
          CoreML::validateOutputCount((CoreML *)this, a3, 1, 1);
          if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
          {
            if (*((char *)this + 31) < 0)
              operator delete(this[1]);
            CoreML::Result::Result((CoreML::Result *)this);
          }
        }
        return;
      }
      if (v5 != 795)
      {
LABEL_322:
        v15 = (v5 - 750);
        if (v15 > 0x28)
          goto LABEL_335;
        if (((1 << v15) & 0x42100421) != 0)
          goto LABEL_324;
        if (v15 != 40)
          goto LABEL_335;
      }
LABEL_334:
      v7 = a3;
    }
LABEL_56:
    CoreML::NeuralNetworkSpecValidator::validateFillLikeLayer(this, v7);
    return;
  }
  if (v5 <= 1139)
  {
    if (v5 > 994)
    {
      if (v5 <= 1079)
      {
        if (v5 <= 1024)
        {
          if (v5 <= 1004)
          {
            if (v5 == 995)
            {
              CoreML::NeuralNetworkSpecValidator::validateSliceStaticLayer(this, (uint64_t **)a3);
              return;
            }
            if (v5 == 1000)
            {
              CoreML::NeuralNetworkSpecValidator::validateSliceDynamicLayer(this, a3);
              return;
            }
          }
          else
          {
            switch(v5)
            {
              case 1005:
                CoreML::NeuralNetworkSpecValidator::validateSlidingWindowsLayer(this, (uint64_t **)a3);
                return;
              case 1015:
                CoreML::NeuralNetworkSpecValidator::validateTopKLayer(this, a2, (uint64_t)a3);
                return;
              case 1020:
                CoreML::NeuralNetworkSpecValidator::validateArgMinLayer(this, a2, (uint64_t)a3);
                return;
            }
          }
          goto LABEL_335;
        }
        if (v5 <= 1044)
        {
          if (v5 == 1025)
          {
            CoreML::NeuralNetworkSpecValidator::validateArgMaxLayer(this, a2, (uint64_t)a3);
            return;
          }
          if (v5 == 1040)
          {
            CoreML::NeuralNetworkSpecValidator::validateEmbeddingNDLayer(this, a2, (uint64_t)a3);
            return;
          }
          goto LABEL_335;
        }
        if (v5 == 1045)
        {
          CoreML::NeuralNetworkSpecValidator::validateBatchedMatmulLayer(this, a3);
          return;
        }
        if (v5 != 1065)
        {
          if (v5 == 1070)
          {
            CoreML::NeuralNetworkSpecValidator::validateLoadConstantNDLayer(this, a3);
            return;
          }
          goto LABEL_335;
        }
        v7 = a3;
        goto LABEL_56;
      }
      if (v5 <= 1109)
      {
        if (v5 <= 1089)
        {
          if (v5 != 1080)
          {
            if (v5 == 1085)
            {
              CoreML::NeuralNetworkSpecValidator::validateFillStaticLayer(this, (uint64_t **)a3);
              return;
            }
            goto LABEL_335;
          }
          v7 = a3;
        }
        else
        {
          if (v5 != 1090)
          {
            if (v5 == 1100)
            {
              v6 = a3;
              goto LABEL_20;
            }
            if (v5 == 1105)
            {
              CoreML::NeuralNetworkSpecValidator::validateBroadcastToStaticLayer(this, (uint64_t **)a3);
              return;
            }
            goto LABEL_335;
          }
          v7 = a3;
        }
        goto LABEL_56;
      }
      if (v5 <= 1124)
      {
        if (v5 != 1110)
        {
          if (v5 == 1120)
          {
            CoreML::NeuralNetworkSpecValidator::validateSqueezeLayer(this, (uint64_t **)a3);
            return;
          }
          goto LABEL_335;
        }
        v6 = a3;
      }
      else
      {
        if (v5 == 1125)
        {
          CoreML::NeuralNetworkSpecValidator::validateExpandDimsLayer(this, (uint64_t **)a3);
          return;
        }
        if (v5 == 1130)
        {
          CoreML::NeuralNetworkSpecValidator::validateFlattenTo2DLayer(this, (uint64_t **)a3);
          return;
        }
        if (v5 != 1135)
          goto LABEL_335;
        v6 = a3;
      }
LABEL_20:
      CoreML::NeuralNetworkSpecValidator::validateReshapeLikeLayer(this, v6);
      return;
    }
    if (v5 > 939)
    {
      if (v5 <= 959)
      {
        switch(v5)
        {
          case 945:
            v8 = a3;
            goto LABEL_72;
          case 946:
          case 947:
          case 948:
          case 949:
          case 951:
          case 953:
            goto LABEL_335;
          case 950:
            CoreML::NeuralNetworkSpecValidator::validateSoftmaxNDLayer(this, (uint64_t **)a3);
            return;
          case 952:
            v6 = a3;
            goto LABEL_20;
          case 954:
            v8 = a3;
            goto LABEL_72;
          default:
            if (v5 != 940)
              goto LABEL_335;
            v6 = a3;
            goto LABEL_20;
        }
      }
      if (v5 > 974)
      {
        switch(v5)
        {
          case 975:
            CoreML::NeuralNetworkSpecValidator::validateSplitNDLayer(this, (uint64_t **)a3);
            return;
          case 980:
            CoreML::NeuralNetworkSpecValidator::validateConcatNDLayer(this, (uint64_t **)a3);
            return;
          case 985:
            CoreML::NeuralNetworkSpecValidator::validateTransposeLayer(this, (uint64_t **)a3);
            return;
        }
        goto LABEL_335;
      }
      if (v5 == 960)
      {
        CoreML::NeuralNetworkSpecValidator::validateReverseLayer(this, (uint64_t **)a3);
        return;
      }
      if (v5 != 965)
        goto LABEL_335;
      v6 = a3;
      goto LABEL_20;
    }
    if (v5 <= 904)
    {
      if (v5 <= 889)
      {
        if (v5 == 880)
        {
          v6 = a3;
          goto LABEL_20;
        }
        if (v5 == 885)
        {
          v6 = a3;
          goto LABEL_20;
        }
        goto LABEL_335;
      }
      if (v5 == 890)
      {
        v6 = a3;
        goto LABEL_20;
      }
      if (v5 == 895)
      {
        v6 = a3;
        goto LABEL_20;
      }
      if (v5 != 900)
        goto LABEL_335;
      v6 = a3;
      goto LABEL_20;
    }
    if (v5 > 924)
    {
      switch(v5)
      {
        case 925:
          CoreML::NeuralNetworkSpecValidator::validateStackLayer(this, (uint64_t **)a3);
          return;
        case 930:
          v6 = a3;
          goto LABEL_20;
        case 935:
          CoreML::NeuralNetworkSpecValidator::validateScatterLayer(this, a2, (uint64_t)a3);
          return;
      }
      goto LABEL_335;
    }
    if (v5 == 905)
    {
      v6 = a3;
      goto LABEL_20;
    }
    if (v5 != 920)
      goto LABEL_335;
    v9 = a3;
LABEL_76:
    CoreML::NeuralNetworkSpecValidator::validateTileLayer(this, v9);
    return;
  }
  if (v5 <= 1274)
  {
    if (v5 <= 1199)
    {
      if (v5 <= 1169)
      {
        if (v5 > 1149)
        {
          if (v5 == 1150)
          {
            CoreML::NeuralNetworkSpecValidator::validateRankPreservingReshapeLayer(this, (uint64_t **)a3);
            return;
          }
          if (v5 == 1155)
          {
            CoreML::NeuralNetworkSpecValidator::validateConstantPadLayer(this, a2, (uint64_t)a3);
            return;
          }
          goto LABEL_335;
        }
        if (v5 == 1140)
        {
          CoreML::NeuralNetworkSpecValidator::validateReshapeStaticLayer(this, (uint64_t **)a3);
          return;
        }
        if (v5 == 1145)
        {
          v6 = a3;
          goto LABEL_20;
        }
        goto LABEL_335;
      }
      if (v5 <= 1179)
      {
        if (v5 != 1170)
        {
          if (v5 == 1175)
          {
            CoreML::NeuralNetworkSpecValidator::validateRandomNormalStaticLayer(this, (uint64_t **)a3);
            return;
          }
          goto LABEL_335;
        }
        v7 = a3;
      }
      else
      {
        if (v5 != 1180)
        {
          if (v5 == 1190)
          {
            CoreML::NeuralNetworkSpecValidator::validateRandomUniformLikeLayer(this, (uint64_t **)a3);
            return;
          }
          if (v5 == 1195)
          {
            CoreML::NeuralNetworkSpecValidator::validateRandomUniformStaticLayer(this, (uint64_t **)a3);
            return;
          }
          goto LABEL_335;
        }
        v7 = a3;
      }
      goto LABEL_56;
    }
    if (v5 <= 1249)
    {
      if (v5 <= 1214)
      {
        if (v5 == 1200)
        {
          CoreML::NeuralNetworkSpecValidator::validateRandomUniformDynamicLayer(this, (uint64_t **)a3);
          return;
        }
        if (v5 == 1210)
        {
          CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliLikeLayer(this, (uint64_t **)a3);
          return;
        }
        goto LABEL_335;
      }
      if (v5 == 1215)
      {
        CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliStaticLayer(this, (uint64_t **)a3);
        return;
      }
      if (v5 == 1220)
      {
        CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliDynamicLayer(this, (uint64_t **)a3);
        return;
      }
      if (v5 != 1230)
        goto LABEL_335;
      v7 = a3;
      goto LABEL_56;
    }
    if (v5 <= 1259)
    {
      if (v5 != 1250 && v5 != 1255)
        goto LABEL_335;
    }
    else if (v5 != 1260 && v5 != 1265 && v5 != 1270)
    {
      goto LABEL_335;
    }
LABEL_224:
    CoreML::NeuralNetworkSpecValidator::validateReductionTypeLayer(this, a3);
    return;
  }
  if (v5 > 1349)
  {
    if (v5 <= 1454)
    {
      if (v5 == 1350)
      {
        CoreML::NeuralNetworkSpecValidator::validateLayerNormalizationLayer(this, a3);
        return;
      }
      if (v5 == 1400)
      {
        CoreML::NeuralNetworkSpecValidator::validateNMSLayer(this, a3);
        return;
      }
      if (v5 != 1450)
        goto LABEL_335;
      v9 = a3;
      goto LABEL_76;
    }
    switch(v5)
    {
      case 1455:
        v9 = a3;
        goto LABEL_76;
      case 1460:
        goto LABEL_334;
      case 1461:
        CoreML::NeuralNetworkSpecValidator::validateArgsortLayer(this, a2, (uint64_t)a3);
        break;
      case 1465:
        CoreML::NeuralNetworkSpecValidator::validatePooling3dLayer(this, a2, (uint64_t)a3);
        break;
      case 1466:
        CoreML::NeuralNetworkSpecValidator::validateGlobalPooling3dLayer(this, a2, a3);
        break;
      case 1470:
        v6 = a3;
        goto LABEL_20;
      case 1471:
        CoreML::NeuralNetworkSpecValidator::validateConvolution3DLayer(this, a2, (uint64_t)a3);
        break;
      default:
        goto LABEL_335;
    }
  }
  else
  {
    if (v5 <= 1312)
    {
      if (v5 <= 1284)
      {
        if (v5 != 1275 && v5 != 1280)
          goto LABEL_335;
      }
      else if (v5 != 1285 && v5 != 1290 && v5 != 1295)
      {
        goto LABEL_335;
      }
      goto LABEL_224;
    }
    if (v5 <= 1319)
    {
      if (v5 == 1313)
      {
        v7 = a3;
      }
      else
      {
        if (v5 != 1315)
          goto LABEL_335;
        v7 = a3;
      }
      goto LABEL_56;
    }
    if (v5 == 1320)
    {
      v7 = a3;
      goto LABEL_56;
    }
    if (v5 == 1325)
    {
      v7 = a3;
      goto LABEL_56;
    }
    if (v5 != 1330)
      goto LABEL_335;
    v8 = a3;
LABEL_72:
    CoreML::NeuralNetworkSpecValidator::validateWhereLayer(this, v8);
  }
}

void CoreML::validate<(MLModelType)403>(unint64_t *inited, uint64_t a2)
{
  unint64_t *v3;
  uint64_t *v4;
  int v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  int v7;
  const CoreML::Specification::ModelDescription *v8;
  void *size;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  BOOL v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v36;
  char v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  std::string::size_type v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void **v48;
  const void *v49;
  const void *v50;
  const void *v51;
  uint64_t v52;
  int v53;
  const void *v54;
  const void *v55;
  size_t v56;
  const void *v58;
  uint64_t v59;
  int v60;
  const void *v61;
  const void *v62;
  size_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  int v71;
  int v72;
  _QWORD *v73;
  char *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  int v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  int v89;
  uint64_t v90;
  int v91;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  int v100;
  int data;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD **v104;
  int v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  __int128 v110;
  int v111;
  std::string::size_type v112;
  void *v113[2];
  std::string::size_type v114;
  char **v115;
  char *v116[2];
  std::string::size_type v117;
  void *__p[2];
  std::string::size_type v119;
  _BYTE v120[24];
  std::string::size_type v121;
  _QWORD *v122;
  uint64_t *v123;
  _QWORD *v124[2];
  char **v125;
  char *v126[2];
  std::string v127;
  std::string::size_type v128;
  std::string v129;
  std::string v130;
  _QWORD **v131;
  _QWORD *v132[6];

  v3 = inited;
  v132[3] = *(_QWORD **)MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 44) == 403)
  {
    v4 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    v4 = &CoreML::Specification::_NeuralNetworkClassifier_default_instance_;
  }
  v5 = *((_DWORD *)v4 + 25);
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v129, "Classifier models must provide class labels.");
    v117 = 13;
    v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
    goto LABEL_24;
  }
  if (v5 == 100)
  {
    if (!*(_DWORD *)(v4[11] + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&v129, "Classifier declared to have String class labels must provide labels.");
      v117 = 13;
      v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
      goto LABEL_24;
    }
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
    if ((_DWORD)qword_1ED002850)
    {
      std::string::basic_string[abi:ne180100]<0>(&v129, "Classifier declared with String class labels must provide exclusively String class labels.");
      v117 = 13;
      v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
      goto LABEL_24;
    }
LABEL_13:
    v7 = 0;
    goto LABEL_14;
  }
  if (v5 != 101)
    goto LABEL_13;
  if (!*(_DWORD *)(v4[11] + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v129, "Classifier declared to have Int64 class labels must provide labels.");
    v117 = 13;
    v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
LABEL_24:
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    {
      size = (void *)v129.__r_.__value_.__r.__words[0];
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  if (dword_1ED006728)
  {
    std::string::basic_string[abi:ne180100]<0>(&v129, "Classifier declared with Int64 class labels must provide exclusively Int64 class labels.");
    v117 = 13;
    v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
    goto LABEL_24;
  }
  v7 = 1;
LABEL_14:
  if (*(_QWORD *)(a2 + 16))
    v8 = *(const CoreML::Specification::ModelDescription **)(a2 + 16);
  else
    v8 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::validateFeatureDescriptions<CoreML::Specification::ModelDescription>((void **)&v129.__r_.__value_.__l.__data_, (uint64_t)v8, *(_DWORD *)(a2 + 24), 1, 0);
  if (((uint64_t)v129.__r_.__value_.__l.__data_ & 0xFFFFFFEF) != 0)
  {
    v117 = v129.__r_.__value_.__r.__words[0];
    *(_OWORD *)__p = *(_OWORD *)&v129.__r_.__value_.__r.__words[1];
    v119 = v130.__r_.__value_.__r.__words[0];
  }
  else
  {
    CoreML::validateClassifierFeatureDescriptions((void **)&v117, v8, v7);
    if (v130.__r_.__value_.__s.__data_[7] < 0)
    {
      size = (void *)v129.__r_.__value_.__l.__size_;
LABEL_26:
      operator delete(size);
    }
  }
LABEL_27:
  if ((v117 & 0xFFFFFFEF) != 0)
  {
    *v3 = v117;
    *(_OWORD *)(v3 + 1) = *(_OWORD *)__p;
    v3[3] = v119;
    return;
  }
  v116[0] = 0;
  v116[1] = 0;
  v115 = v116;
  if (*(_QWORD *)(a2 + 16))
    v10 = *(uint64_t **)(a2 + 16);
  else
    v10 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_DWORD *)(a2 + 44) == 403)
  {
    v11 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v11 = &CoreML::Specification::_NeuralNetworkClassifier_default_instance_;
  }
  v12 = *(unsigned __int8 *)(a2 + 28);
  CoreML::Result::Result((CoreML::Result *)&v127);
  v13 = v10[4];
  if (v13)
    v14 = (uint64_t *)(v13 + 8);
  else
    v14 = 0;
  v15 = *((int *)v10 + 6);
  v111 = v12;
  if ((_DWORD)v15)
  {
    v16 = 8 * v15 - 8;
    do
    {
      v17 = *v14++;
      v18 = *(uint64_t **)(v17 + 32);
      if (!v18)
        v18 = &CoreML::Specification::_FeatureType_default_instance_;
      v19 = *((_DWORD *)v18 + 9);
      v20 = v19 != 5;
      v21 = v19 == 5 || v16 == 0;
      v16 -= 8;
    }
    while (!v21);
  }
  else
  {
    v20 = 1;
  }
  v22 = *((_DWORD *)v11 + 20);
  v23 = *((_DWORD *)v11 + 21);
  v24 = v11[4];
  if (v24)
    v25 = (uint64_t *)(v24 + 8);
  else
    v25 = 0;
  v26 = *((int *)v11 + 6);
  if ((_DWORD)v26)
  {
    v27 = 8 * v26;
    while ((CoreML::isIOS12NeuralNetworkLayer(*v25) & 1) != 0)
    {
      ++v25;
      v27 -= 8;
      if (!v27)
        goto LABEL_56;
    }
    if (v22)
      v37 = 1;
    else
      v37 = v20;
    if ((v37 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v129, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the network contains a layer added in version 4 (iOS 13) or later. Use 'EXACT_ARRAY_MAPPING' instead.");
      v112 = 12;
      v36 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
      goto LABEL_87;
    }
    v28 = 1;
  }
  else
  {
LABEL_56:
    v28 = (v22 | v23) != 0;
  }
  if (v22)
    v29 = 1;
  else
    v29 = v23 == 0;
  v30 = v29 || v20;
  if ((v30 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v129, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the image input Shape mapping is not 'RANK5_IMAGE_MAPPING'");
    v112 = 12;
    v36 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
    goto LABEL_87;
  }
  if (!*((_DWORD *)v10 + 12))
  {
    std::string::basic_string[abi:ne180100]<0>(&v129, "Neural networks produce at least one output.");
    v112 = 12;
    v36 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
    goto LABEL_87;
  }
  if (!*((_DWORD *)v11 + 6))
  {
    std::string::basic_string[abi:ne180100]<0>(&v129, "Neural networks require at least one layer.");
    v112 = 13;
    v36 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
    goto LABEL_87;
  }
  v31 = *((unsigned int *)v10 + 6);
  if ((int)v31 >= 1)
  {
    v32 = v10[4];
    if (v32)
      v33 = v32 + 8;
    else
      v33 = 0;
    v34 = 8 * v31;
    do
    {
      v35 = *(uint64_t **)(*(_QWORD *)v33 + 32);
      if (!v35)
        v35 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_DWORD *)v35 + 9) != 8 && !*((_BYTE *)v35 + 16))
        goto LABEL_147;
      v33 += 8;
      v34 -= 8;
    }
    while (v34);
    std::string::basic_string[abi:ne180100]<0>(&v129, "Neural networks require at least one non-optional input.");
    v112 = 12;
    v36 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
LABEL_87:
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v129.__r_.__value_.__l.__data_);
    goto LABEL_89;
  }
LABEL_147:
  std::string::basic_string[abi:ne180100]<0>(&v129, "inputs");
  CoreML::validateInputOutputTypes((CoreML::Result *)&v112, *((_DWORD *)v10 + 6), v10[4], 1);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if ((v112 & 0xFFFFFFEF) != 0)
    goto LABEL_89;
  if (SHIBYTE(v114) < 0)
    operator delete(v113[0]);
  v126[0] = 0;
  v126[1] = 0;
  v125 = v126;
  if (v28)
  {
    v65 = v10[4];
    if (v65)
      v66 = v65 + 8;
    else
      v66 = 0;
    v67 = *((int *)v10 + 6);
    if ((_DWORD)v67)
    {
      v68 = 8 * v67;
      while (1)
      {
        v69 = *(_QWORD *)v66;
        v70 = *(uint64_t **)(*(_QWORD *)v66 + 32);
        if (!v70)
          v70 = &CoreML::Specification::_FeatureType_default_instance_;
        v71 = *((_DWORD *)v70 + 9);
        if (v71 == 4)
          break;
        if (v71 == 5)
        {
          if (!*((_DWORD *)v11 + 20))
          {
            v129.__r_.__value_.__r.__words[0] = *(_QWORD *)(v69 + 16);
            v74 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v125, v129.__r_.__value_.__l.__data_, (__int128 **)&v129);
            goto LABEL_168;
          }
          v72 = *(_DWORD *)(v70[3] + 16);
          v129.__r_.__value_.__r.__words[0] = *(_QWORD *)(v69 + 16);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v125, v129.__r_.__value_.__l.__data_, (__int128 **)&v129)+ 14) = v72;
        }
LABEL_170:
        v66 += 8;
        v68 -= 8;
        if (!v68)
          goto LABEL_171;
      }
      v73 = *(_QWORD **)(v69 + 16);
      if (*((_DWORD *)v11 + 21))
      {
        v129.__r_.__value_.__r.__words[0] = *(_QWORD *)(v69 + 16);
        v74 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v125, v73, (__int128 **)&v129);
        v75 = 4;
      }
      else
      {
        v129.__r_.__value_.__r.__words[0] = *(_QWORD *)(v69 + 16);
        v74 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v125, v73, (__int128 **)&v129);
LABEL_168:
        v75 = 5;
      }
      *((_DWORD *)v74 + 14) = v75;
      goto LABEL_170;
    }
LABEL_171:
    v76 = v10[7];
    if (v76)
      v77 = v76 + 8;
    else
      v77 = 0;
    v78 = *((int *)v10 + 12);
    if ((_DWORD)v78)
    {
      v79 = 8 * v78;
      do
      {
        v80 = *(uint64_t **)(*(_QWORD *)v77 + 32);
        if (!v80)
          v80 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v80 + 9) == 5)
        {
          v81 = *(_DWORD *)(v80[3] + 16);
          if (v81)
          {
            v129.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)v77 + 16);
            *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v125, v129.__r_.__value_.__l.__data_, (__int128 **)&v129)+ 14) = v81;
          }
        }
        v77 += 8;
        v79 -= 8;
      }
      while (v79);
    }
  }
  v124[0] = 0;
  v124[1] = 0;
  v123 = (uint64_t *)v124;
  v82 = v10[4];
  if (v82)
    v83 = (uint64_t *)(v82 + 8);
  else
    v83 = 0;
  v84 = *((int *)v10 + 6);
  if (!(_DWORD)v84)
  {
LABEL_219:
    CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)&v129, &v123, (uint64_t **)&v125, v28, 0, (uint64_t **)&v125);
    CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>((uint64_t)v120, (CoreML::Specification::NeuralNetworkLayer *)&v129, (uint64_t)v11);
    data = *(_DWORD *)v120;
    v127.__r_.__value_.__r.__words[0] = *(_QWORD *)v120;
    if (SHIBYTE(v128) < 0)
    {
      operator delete((void *)v127.__r_.__value_.__l.__size_);
      data = (int)v127.__r_.__value_.__l.__data_;
    }
    *(_OWORD *)&v127.__r_.__value_.__r.__words[1] = *(_OWORD *)&v120[8];
    v128 = v121;
    if ((data & 0xFFFFFFEF) == 0)
    {
      v102 = v131;
      if (v131 != v132)
      {
        do
        {
          if (v124 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v123, v102 + 4)|| v102[9] >= 2uLL)
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v115, v102 + 4, (uint64_t)(v102 + 4));
          }
          v103 = (_QWORD *)v102[1];
          if (v103)
          {
            do
            {
              v104 = (_QWORD **)v103;
              v103 = (_QWORD *)*v103;
            }
            while (v103);
          }
          else
          {
            do
            {
              v104 = (_QWORD **)v102[2];
              v21 = *v104 == v102;
              v102 = v104;
            }
            while (!v21);
          }
          v102 = v104;
        }
        while (v104 != v132);
      }
      if (!v28)
      {
        CoreML::NeuralNetworkShaper::NeuralNetworkShaper(v120, (uint64_t)v10, (uint64_t)(v11 + 2));
        std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(v122);
        std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(*(_QWORD **)&v120[16]);
      }
      if (((uint64_t)v127.__r_.__value_.__l.__data_ & 0xFFFFFFEF) == 0 && v111 != 0)
      {
        validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>((void **)v120, (uint64_t)v11);
        v106 = *(_DWORD *)v120;
        v127.__r_.__value_.__r.__words[0] = *(_QWORD *)v120;
        if (SHIBYTE(v128) < 0)
        {
          operator delete((void *)v127.__r_.__value_.__l.__size_);
          v106 = (int)v127.__r_.__value_.__l.__data_;
        }
        *(_OWORD *)&v127.__r_.__value_.__r.__words[1] = *(_OWORD *)&v120[8];
        v128 = v121;
        if ((v106 & 0xFFFFFFEF) == 0)
        {
          validateTrainingInputs<CoreML::Specification::NeuralNetworkClassifier>((CoreML::Result *)v120, (uint64_t)v10, (uint64_t)v11);
          v127.__r_.__value_.__r.__words[0] = *(_QWORD *)v120;
          if (SHIBYTE(v128) < 0)
            operator delete((void *)v127.__r_.__value_.__l.__size_);
          *(_OWORD *)&v127.__r_.__value_.__r.__words[1] = *(_OWORD *)&v120[8];
          v128 = v121;
        }
      }
    }
    v112 = v127.__r_.__value_.__r.__words[0];
    *(_OWORD *)v113 = *(_OWORD *)&v127.__r_.__value_.__r.__words[1];
    v114 = v128;
    *(_OWORD *)&v127.__r_.__value_.__r.__words[1] = 0uLL;
    v128 = 0;
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v132[0]);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v130.__r_.__value_.__r.__words[2]);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v129.__r_.__value_.__r.__words[2]);
    goto LABEL_245;
  }
  v85 = &v83[v84];
  while (1)
  {
    v86 = *v83;
    std::string::basic_string[abi:ne180100]<0>(&v129, "__input");
    v87 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v123, *(_QWORD **)(v86 + 16), *(_QWORD *)(v86 + 16));
    std::__tree<std::string>::__assign_unique<std::string const*>((uint64_t **)v87 + 7, &v129, &v130);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v129.__r_.__value_.__l.__data_);
    v88 = *(uint64_t **)(v86 + 32);
    if (!v88)
      v88 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v88 + 9) != 5)
      goto LABEL_218;
    if (v28)
    {
      CoreML::validateNdMultiArrayInputType((CoreML *)&v129, (const CoreML::Specification::ArrayFeatureType *)v88[3]);
      v89 = (int)v129.__r_.__value_.__l.__data_;
      v127.__r_.__value_.__r.__words[0] = v129.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v128) < 0)
      {
        operator delete((void *)v127.__r_.__value_.__l.__size_);
        v89 = (int)v127.__r_.__value_.__l.__data_;
      }
      *(_OWORD *)&v127.__r_.__value_.__r.__words[1] = *(_OWORD *)&v129.__r_.__value_.__r.__words[1];
      v128 = v130.__r_.__value_.__r.__words[0];
      if ((v89 & 0xFFFFFFEF) != 0)
      {
        v112 = v127.__r_.__value_.__r.__words[0];
        *(_OWORD *)v113 = *(_OWORD *)&v127.__r_.__value_.__r.__words[1];
        v114 = v128;
        *(_OWORD *)&v127.__r_.__value_.__r.__words[1] = 0uLL;
        v128 = 0;
        goto LABEL_245;
      }
      goto LABEL_218;
    }
    v90 = v88[3];
    v91 = *(_DWORD *)(v90 + 16);
    if (v91 >= 1 && (v91 | 2) != 3)
      break;
    v93 = *(_DWORD *)(v90 + 60);
    if (v93)
    {
      if (v93 == 31)
      {
        v100 = *(_DWORD *)(*(_QWORD *)(v90 + 40) + 24);
        if (v100 == 1)
          goto LABEL_218;
        v99 = v100 == 3;
        goto LABEL_216;
      }
      if (v93 != 21)
        goto LABEL_218;
      v94 = *(_QWORD *)(v90 + 40);
      v95 = *(_QWORD *)(v94 + 32);
      v96 = v95 ? v95 + 8 : 0;
      v97 = *(int *)(v94 + 24);
      if (!(_DWORD)v97)
        goto LABEL_218;
      v98 = 8 * v97;
      while ((*(_DWORD *)(*(_QWORD *)v96 + 16) | 2) == 3)
      {
        v96 += 8;
        v98 -= 8;
        if (!v98)
          goto LABEL_218;
      }
    }
    v99 = 0;
LABEL_216:
    if (v91 <= 0 && !v99)
      break;
LABEL_218:
    if (++v83 == v85)
      goto LABEL_219;
  }
  std::string::basic_string[abi:ne180100]<0>(&v129, "Input MLMultiArray to neural networks must have dimension 1 (vector) or 3 (image-like arrays).");
  v112 = 12;
  std::operator+<char>();
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
LABEL_245:
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v124[0]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v126[0]);
LABEL_89:
  if (SHIBYTE(v128) < 0)
    operator delete((void *)v127.__r_.__value_.__l.__size_);
  v38 = v112;
  v117 = v112;
  if (SHIBYTE(v119) < 0)
  {
    operator delete(__p[0]);
    v38 = v117;
  }
  *(_OWORD *)__p = *(_OWORD *)v113;
  v119 = v114;
  if ((v38 & 0xFFFFFFEF) != 0)
  {
    *v3 = v117;
    *(_OWORD *)(v3 + 1) = *(_OWORD *)__p;
    v3[3] = v119;
    __p[0] = 0;
    __p[1] = 0;
    v119 = 0;
    goto LABEL_255;
  }
  if (*(_DWORD *)(a2 + 44) == 403)
  {
    v39 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v36);
    v39 = &CoreML::Specification::_NeuralNetworkClassifier_default_instance_;
  }
  v40 = v39[8];
  if (*(char *)(v40 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)v40, *(_QWORD *)(v40 + 8));
  }
  else
  {
    v41 = *(_OWORD *)v40;
    v129.__r_.__value_.__r.__words[2] = *(_QWORD *)(v40 + 16);
    *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v41;
  }
  v42 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v42 = v129.__r_.__value_.__l.__size_;
  if (v42
    && v116 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v115, &v129))
  {
    std::operator+<char>();
    v107 = std::string::append(&v127, "' which was not found in the network.");
    v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
    *(_QWORD *)&v120[16] = *((_QWORD *)&v107->__r_.__value_.__l + 2);
    *(_OWORD *)v120 = v108;
    v107->__r_.__value_.__l.__size_ = 0;
    v107->__r_.__value_.__r.__words[2] = 0;
    v107->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v127.__r_.__value_.__l.__data_);
    goto LABEL_251;
  }
  if (*(_QWORD *)(a2 + 16))
    v43 = *(uint64_t **)(a2 + 16);
  else
    v43 = &CoreML::Specification::_ModelDescription_default_instance_;
  v44 = v43[7];
  if (v44)
    v45 = v44 + 8;
  else
    v45 = 0;
  v46 = *((int *)v43 + 12);
  if ((_DWORD)v46)
  {
    v47 = 8 * v46;
    while (1)
    {
      v48 = *(const void ***)(*(_QWORD *)v45 + 16);
      if (v116 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v115, v48))
      {
        v49 = (const void *)*((unsigned __int8 *)v48 + 23);
        v50 = v49;
        v51 = v48;
        if (*((char *)v48 + 23) < 0)
        {
          v51 = *v48;
          v50 = v48[1];
        }
        v52 = v43[17];
        v53 = *(char *)(v52 + 23);
        v54 = v53 >= 0 ? (const void *)*(unsigned __int8 *)(v52 + 23) : *(const void **)(v52 + 8);
        v55 = v53 >= 0 ? (const void *)v43[17] : *(const void **)v52;
        v56 = (size_t)(v54 >= v50 ? v50 : v54);
        if (memcmp(v51, v55, v56) || v54 != v50)
        {
          v58 = v48;
          if ((v49 & 0x80) != 0)
          {
            v58 = *v48;
            v49 = v48[1];
          }
          v59 = v43[18];
          v60 = *(char *)(v59 + 23);
          v61 = v60 >= 0 ? (const void *)*(unsigned __int8 *)(v59 + 23) : *(const void **)(v59 + 8);
          v62 = v60 >= 0 ? (const void *)v43[18] : *(const void **)v59;
          v63 = (size_t)(v61 >= v49 ? v49 : v61);
          if (memcmp(v58, v62, v63) || v61 != v49)
            break;
        }
      }
      v45 += 8;
      v47 -= 8;
      if (!v47)
        goto LABEL_146;
    }
    std::operator+<char>();
    v109 = std::string::append(&v127, "' is not produced by any layer of the neural network.");
    v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
    *(_QWORD *)&v120[16] = *((_QWORD *)&v109->__r_.__value_.__l + 2);
    *(_OWORD *)v120 = v110;
    v109->__r_.__value_.__l.__size_ = 0;
    v109->__r_.__value_.__r.__words[2] = 0;
    v109->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v127.__r_.__value_.__l.__data_);
LABEL_251:
    *v3 = 13;
    std::operator+<char>();
    if ((v120[23] & 0x80000000) != 0)
      operator delete(*(void **)v120);
  }
  else
  {
LABEL_146:
    *v3 = v117;
    *(_OWORD *)(v3 + 1) = *(_OWORD *)__p;
    v3[3] = v119;
    __p[0] = 0;
    __p[1] = 0;
    v119 = 0;
  }
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
LABEL_255:
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v116[0]);
  if (SHIBYTE(v119) < 0)
    operator delete(__p[0]);
}

void sub_19C9CE5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,char *a22,std::string *a23,void *a24,void *__pa,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,_QWORD *a43)
{
  uint64_t v43;

  if (*(char *)(v43 - 169) < 0)
    operator delete(*(void **)(v43 - 192));
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a43);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(v43 - 240));
  if (*(char *)(v43 - 193) < 0)
    operator delete(*(void **)(v43 - 216));
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a22);
  if (SHIBYTE(a27) < 0)
    operator delete(__pa);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::string>::__assign_unique<std::string const*>(uint64_t **result, std::string *a2, std::string *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v11 = result;
    v12 = v8;
    v13 = v8;
    if (v8)
    {
      v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      while (a2 != a3)
      {
        v9 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)v5, &v14, a2);
        if (!*v9)
        {
          v10 = v9;
          std::string::operator=((std::string *)(v8 + 4), a2);
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v5, v14, v10, v8);
          v8 = v12;
          v13 = v12;
          if (!v12)
          {
            ++a2;
            break;
          }
          v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next((uint64_t)v12);
        }
        ++a2;
        if (!v8)
          break;
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v11);
  }
  while (a2 != a3)
  {
    result = (uint64_t **)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5, a2, (uint64_t)a2);
    ++a2;
  }
  return result;
}

void sub_19C9CE9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CoreML::validateNdMultiArrayInputType(CoreML *this, const CoreML::Specification::ArrayFeatureType *a2)
{
  int v3;
  void *__p[2];
  char v5;

  v3 = *((_DWORD *)a2 + 4);
  if (v3 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Input MLMultiArray to neural networks must have at least 1 dimension.");
    *(_QWORD *)this = 12;
    std::operator+<char>();
  }
  else
  {
    if (*((_DWORD *)a2 + 15) != 31 || *(_DWORD *)(*((_QWORD *)a2 + 5) + 24) == v3)
    {
      CoreML::Result::Result(this);
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "For MLMultiArray input: Rank of the flexible shape range must match the rank of the default shape.");
    *(_QWORD *)this = 12;
    std::operator+<char>();
  }
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_19C9CEA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(uint64_t a1, CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int data;
  _QWORD *v19;
  uint64_t **v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t **v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  _QWORD **v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  __int128 *v46;
  __int128 v47;
  uint64_t v48;
  __int128 *v49;
  __int128 v50;
  _QWORD *v51;
  __int128 *v52;
  __int128 v53;
  _QWORD *v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  __int128 v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  __int128 *v66;
  __int128 v67;
  __int128 *v68;
  __int128 v69;
  __int128 *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  __int128 v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  __int128 v92;
  __int128 *v93;
  __int128 v94;
  std::string *v95;
  std::string::size_type size;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  __int128 v100;
  std::string *v101;
  __int128 v102;
  std::string *v103;
  __int128 v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  __int128 v110;
  __int128 *v111;
  __int128 v112;
  std::string *v113;
  std::string::size_type v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  __int128 v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  __int128 v124;
  __int128 *v125;
  __int128 v126;
  __int128 *v127;
  __int128 v128;
  std::string *v129;
  __int128 v130;
  std::string *v131;
  __int128 v132;
  std::string *v133;
  __int128 v134;
  std::string *v135;
  __int128 v136;
  _QWORD *v137;
  _QWORD *v138;
  CoreML::Specification::NeuralNetworkLayer *v139;
  uint64_t v140;
  _BYTE *v141;
  _QWORD *v142;
  uint64_t **v143;
  _QWORD *v144;
  _QWORD *v145;
  std::string v146;
  std::string v147;
  std::string v148;
  std::string v149;
  std::string v150;
  std::string v151;
  std::string v152;
  uint64_t v153;
  std::string v154;
  std::string v155;
  std::string::size_type v156;
  __int128 v157;
  uint64_t v158;

  CoreML::Result::Result((CoreML::Result *)&v156);
  v6 = *(_QWORD *)(a3 + 32);
  if (v6)
    v7 = (_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v8 = *(int *)(a3 + 24);
  if (!(_DWORD)v8)
  {
LABEL_61:
    CoreML::Result::Result((CoreML::Result *)a1);
    goto LABEL_209;
  }
  v9 = (uint64_t)a2 + 8;
  v143 = (uint64_t **)((char *)a2 + 32);
  v144 = (_QWORD *)((char *)a2 + 16);
  v141 = (char *)a2 + 8;
  v142 = (_QWORD *)((char *)a2 + 40);
  v10 = (uint64_t **)((char *)a2 + 56);
  v145 = (_QWORD *)((char *)a2 + 64);
  v137 = &v7[v8];
  v139 = a2;
  v140 = a1;
  while (1)
  {
    if ((v156 & 0xFFFFFFEF) != 0)
    {
LABEL_92:
      *(_QWORD *)a1 = v156;
      *(_OWORD *)(a1 + 8) = v157;
      *(_QWORD *)(a1 + 24) = v158;
      goto LABEL_93;
    }
    v138 = v7;
    v11 = *v7;
    if (*(_BYTE *)a2)
    {
      v12 = *(int *)(v11 + 72);
      if ((_DWORD)v12)
      {
        if (*(_DWORD *)(v11 + 24) == (_DWORD)v12)
        {
          v13 = 0;
          v14 = *(_QWORD *)(v11 + 80);
          if (v14)
            v15 = v14 + 8;
          else
            v15 = 0;
          v16 = 8 * v12;
          while (1)
          {
            v17 = *(_QWORD *)(v15 + 8 * v13);
            CoreML::validateTensorMessage((CoreML *)&v152, (const CoreML::Specification::Tensor *)*(unsigned int *)(v17 + 16), (const CoreML::Specification::NeuralNetworkLayer *)*(unsigned int *)(v17 + 36), *(_QWORD *)(v11 + 112));
            data = (int)v152.__r_.__value_.__l.__data_;
            v156 = v152.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v158) < 0)
            {
              operator delete((void *)v157);
              data = v156;
            }
            v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
            v158 = v153;
            if ((data & 0xFFFFFFEF) != 0)
              goto LABEL_62;
            v19 = *(_QWORD **)(*(_QWORD *)(v11 + 32) + 8 * v13 + 8);
            if (v144 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(v9, v19))
            {
              v20 = (uint64_t **)v9;
              v21 = *(_DWORD *)(v17 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              if (v21 != *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, v19, (__int128 **)&v152)+ 14))
              {
                v49 = *(__int128 **)(v11 + 112);
                if (*((char *)v49 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v49, *((_QWORD *)v49 + 1));
                }
                else
                {
                  v50 = *v49;
                  v149.__r_.__value_.__r.__words[2] = *((_QWORD *)v49 + 2);
                  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v50;
                }
                v51 = (_QWORD *)v140;
                v89 = std::string::insert(&v149, 0, "Layer '");
                v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
                v150.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v90;
                v89->__r_.__value_.__l.__size_ = 0;
                v89->__r_.__value_.__r.__words[2] = 0;
                v89->__r_.__value_.__r.__words[0] = 0;
                v91 = std::string::append(&v150, "''s input '");
                v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
                v151.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v92;
                v91->__r_.__value_.__l.__size_ = 0;
                v91->__r_.__value_.__r.__words[2] = 0;
                v91->__r_.__value_.__r.__words[0] = 0;
                v93 = *(__int128 **)(*(_QWORD *)(v11 + 32) + 8 * v13 + 8);
                if (*((char *)v93 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)v93, *((_QWORD *)v93 + 1));
                }
                else
                {
                  v94 = *v93;
                  v148.__r_.__value_.__r.__words[2] = *((_QWORD *)v93 + 2);
                  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v94;
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v95 = &v148;
                else
                  v95 = (std::string *)v148.__r_.__value_.__r.__words[0];
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v148.__r_.__value_.__r.__words[2]);
                else
                  size = v148.__r_.__value_.__l.__size_;
                v97 = std::string::append(&v151, (const std::string::value_type *)v95, size);
                v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
                v154.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v98;
                v97->__r_.__value_.__l.__size_ = 0;
                v97->__r_.__value_.__r.__words[2] = 0;
                v97->__r_.__value_.__r.__words[0] = 0;
                v99 = std::string::append(&v154, "' is also an input to the model. However, for this tensor the rank provided in the layer description");
                v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v100;
                v99->__r_.__value_.__l.__size_ = 0;
                v99->__r_.__value_.__r.__words[2] = 0;
                v99->__r_.__value_.__r.__words[0] = 0;
                v101 = std::string::append(&v155, " does not match the one provided in the model description");
                v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v102;
                v101->__r_.__value_.__l.__size_ = 0;
                v101->__r_.__value_.__r.__words[2] = 0;
                v101->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v155.__r_.__value_.__l.__data_);
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v154.__r_.__value_.__l.__data_);
                if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v148.__r_.__value_.__l.__data_);
                if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v151.__r_.__value_.__l.__data_);
                if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v150.__r_.__value_.__l.__data_);
                if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v149.__r_.__value_.__l.__data_);
LABEL_155:
                *v51 = 13;
                std::operator+<char>();
                goto LABEL_207;
              }
              v19 = *(_QWORD **)(*(_QWORD *)(v11 + 32) + 8 * v13 + 8);
            }
            if (v142 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v143, v19))
            {
              v22 = *(_DWORD *)(v17 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v19, (__int128 **)&v152)+ 14) = v22;
            }
            else
            {
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              if (*((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v19, (__int128 **)&v152)+ 14) != *(_DWORD *)(v17 + 36))
              {
                v52 = *(__int128 **)(*(_QWORD *)(v11 + 32) + 8 * v13 + 8);
                if (*((char *)v52 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v52, *((_QWORD *)v52 + 1));
                }
                else
                {
                  v53 = *v52;
                  v154.__r_.__value_.__r.__words[2] = *((_QWORD *)v52 + 2);
                  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v53;
                }
                v54 = (_QWORD *)v140;
                v103 = std::string::insert(&v154, 0, "Inconsistent rank for the blob named '");
                v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v104;
                v103->__r_.__value_.__l.__size_ = 0;
                v103->__r_.__value_.__r.__words[2] = 0;
                v103->__r_.__value_.__r.__words[0] = 0;
                v105 = std::string::append(&v155, "'.");
                v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v106;
                v105->__r_.__value_.__l.__size_ = 0;
                v105->__r_.__value_.__r.__words[2] = 0;
                v105->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v155.__r_.__value_.__l.__data_);
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v154.__r_.__value_.__l.__data_);
                goto LABEL_206;
              }
            }
            ++v13;
            v16 -= 8;
            v9 = (uint64_t)v141;
            if (!v16)
              goto LABEL_25;
          }
        }
        v125 = *(__int128 **)(v11 + 112);
        if (*((char *)v125 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v125, *((_QWORD *)v125 + 1));
        }
        else
        {
          v126 = *v125;
          v154.__r_.__value_.__r.__words[2] = *((_QWORD *)v125 + 2);
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v126;
        }
        v54 = (_QWORD *)v140;
        v129 = std::string::insert(&v154, 0, "Layer '");
        v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v130;
        v129->__r_.__value_.__l.__size_ = 0;
        v129->__r_.__value_.__r.__words[2] = 0;
        v129->__r_.__value_.__r.__words[0] = 0;
        v131 = std::string::append(&v155, "''s input and inputTensors have different lengths");
        v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        v152.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v132;
        v131->__r_.__value_.__l.__size_ = 0;
        v131->__r_.__value_.__r.__words[2] = 0;
        v131->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v155.__r_.__value_.__l.__data_);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        goto LABEL_206;
      }
LABEL_25:
      v23 = *(int *)(v11 + 96);
      if ((_DWORD)v23)
      {
        if (*(_DWORD *)(v11 + 48) == (_DWORD)v23)
        {
          v24 = 0;
          v25 = *(_QWORD *)(v11 + 104);
          if (v25)
            v26 = v25 + 8;
          else
            v26 = 0;
          v27 = 8 * v23;
          while (1)
          {
            v28 = *(_QWORD *)(v26 + 8 * v24);
            CoreML::validateTensorMessage((CoreML *)&v152, (const CoreML::Specification::Tensor *)*(unsigned int *)(v28 + 16), (const CoreML::Specification::NeuralNetworkLayer *)*(unsigned int *)(v28 + 36), *(_QWORD *)(v11 + 112));
            v29 = (int)v152.__r_.__value_.__l.__data_;
            v156 = v152.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v158) < 0)
            {
              operator delete((void *)v157);
              v29 = v156;
            }
            v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
            v158 = v153;
            if ((v29 & 0xFFFFFFEF) != 0)
              break;
            v30 = *(_QWORD **)(*(_QWORD *)(v11 + 56) + 8 * v24 + 8);
            if (v144 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(v9, v30))
            {
              v31 = (uint64_t **)v9;
              v32 = *(_DWORD *)(v28 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              if (v32 != *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, v30, (__int128 **)&v152)+ 14))
              {
                v66 = *(__int128 **)(v11 + 112);
                if (*((char *)v66 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v66, *((_QWORD *)v66 + 1));
                }
                else
                {
                  v67 = *v66;
                  v149.__r_.__value_.__r.__words[2] = *((_QWORD *)v66 + 2);
                  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v67;
                }
                v51 = (_QWORD *)v140;
                v107 = std::string::insert(&v149, 0, "Layer '");
                v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
                v150.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v108;
                v107->__r_.__value_.__l.__size_ = 0;
                v107->__r_.__value_.__r.__words[2] = 0;
                v107->__r_.__value_.__r.__words[0] = 0;
                v109 = std::string::append(&v150, "''s output '");
                v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
                v151.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v110;
                v109->__r_.__value_.__l.__size_ = 0;
                v109->__r_.__value_.__r.__words[2] = 0;
                v109->__r_.__value_.__r.__words[0] = 0;
                v111 = *(__int128 **)(*(_QWORD *)(v11 + 56) + 8 * v24 + 8);
                if (*((char *)v111 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)v111, *((_QWORD *)v111 + 1));
                }
                else
                {
                  v112 = *v111;
                  v148.__r_.__value_.__r.__words[2] = *((_QWORD *)v111 + 2);
                  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v112;
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v113 = &v148;
                else
                  v113 = (std::string *)v148.__r_.__value_.__r.__words[0];
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v114 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
                else
                  v114 = v148.__r_.__value_.__l.__size_;
                v115 = std::string::append(&v151, (const std::string::value_type *)v113, v114);
                v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
                v154.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v116;
                v115->__r_.__value_.__l.__size_ = 0;
                v115->__r_.__value_.__r.__words[2] = 0;
                v115->__r_.__value_.__r.__words[0] = 0;
                v117 = std::string::append(&v154, "' is also an output of the model. However, for this tensor the rank provided in the layer description");
                v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v118;
                v117->__r_.__value_.__l.__size_ = 0;
                v117->__r_.__value_.__r.__words[2] = 0;
                v117->__r_.__value_.__r.__words[0] = 0;
                v119 = std::string::append(&v155, " does not match the one provided in the model description");
                v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v120;
                v119->__r_.__value_.__l.__size_ = 0;
                v119->__r_.__value_.__r.__words[2] = 0;
                v119->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v155.__r_.__value_.__l.__data_);
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v154.__r_.__value_.__l.__data_);
                if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v148.__r_.__value_.__l.__data_);
                if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v151.__r_.__value_.__l.__data_);
                if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v150.__r_.__value_.__l.__data_);
                if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v149.__r_.__value_.__l.__data_);
                goto LABEL_155;
              }
              v30 = *(_QWORD **)(*(_QWORD *)(v11 + 56) + 8 * v24 + 8);
            }
            if (v142 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v143, v30))
            {
              v33 = *(_DWORD *)(v28 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v30, (__int128 **)&v152)+ 14) = v33;
            }
            else
            {
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              if (*((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v30, (__int128 **)&v152)+ 14) != *(_DWORD *)(v28 + 36))
              {
                v68 = *(__int128 **)(*(_QWORD *)(v11 + 56) + 8 * v24 + 8);
                if (*((char *)v68 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v68, *((_QWORD *)v68 + 1));
                }
                else
                {
                  v69 = *v68;
                  v154.__r_.__value_.__r.__words[2] = *((_QWORD *)v68 + 2);
                  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v69;
                }
                v54 = (_QWORD *)v140;
                v121 = std::string::insert(&v154, 0, "Inconsistent rank for the blob named '");
                v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v122;
                v121->__r_.__value_.__l.__size_ = 0;
                v121->__r_.__value_.__r.__words[2] = 0;
                v121->__r_.__value_.__r.__words[0] = 0;
                v123 = std::string::append(&v155, "'.");
                v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v124;
                v123->__r_.__value_.__l.__size_ = 0;
                v123->__r_.__value_.__r.__words[2] = 0;
                v123->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v155.__r_.__value_.__l.__data_);
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v154.__r_.__value_.__l.__data_);
                goto LABEL_206;
              }
            }
            ++v24;
            v27 -= 8;
            v9 = (uint64_t)v141;
            if (!v27)
              goto LABEL_42;
          }
LABEL_62:
          *(_QWORD *)v140 = v156;
          *(_OWORD *)(v140 + 8) = v157;
          *(_QWORD *)(v140 + 24) = v158;
LABEL_93:
          v157 = 0uLL;
          v158 = 0;
          goto LABEL_209;
        }
        v127 = *(__int128 **)(v11 + 112);
        if (*((char *)v127 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v127, *((_QWORD *)v127 + 1));
        }
        else
        {
          v128 = *v127;
          v154.__r_.__value_.__r.__words[2] = *((_QWORD *)v127 + 2);
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v128;
        }
        v133 = std::string::insert(&v154, 0, "Layer '");
        v54 = (_QWORD *)v140;
        v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v134;
        v133->__r_.__value_.__l.__size_ = 0;
        v133->__r_.__value_.__r.__words[2] = 0;
        v133->__r_.__value_.__r.__words[0] = 0;
        v135 = std::string::append(&v155, "''s output and \"outputTensors\" property have different lengths");
        v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
        v152.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v136;
        v135->__r_.__value_.__l.__size_ = 0;
        v135->__r_.__value_.__r.__words[2] = 0;
        v135->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v155.__r_.__value_.__l.__data_);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
LABEL_206:
        *v54 = 13;
        std::operator+<char>();
        goto LABEL_207;
      }
    }
LABEL_42:
    CoreML::NeuralNetworkSpecValidator::validateLayer((void **)&v152.__r_.__value_.__l.__data_, v139, (const CoreML::Specification::NeuralNetworkLayer *)v11);
    v34 = (int)v152.__r_.__value_.__l.__data_;
    v156 = v152.__r_.__value_.__r.__words[0];
    a1 = v140;
    if (SHIBYTE(v158) < 0)
    {
      operator delete((void *)v157);
      v34 = v156;
    }
    v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
    v158 = v153;
    if ((v34 & 0xFFFFFFEF) != 0)
      goto LABEL_92;
    v35 = *(_QWORD *)(v11 + 32);
    v36 = v35 ? (_QWORD **)(v35 + 8) : 0;
    v37 = *(int *)(v11 + 24);
    if ((_DWORD)v37)
      break;
LABEL_52:
    v40 = *(_QWORD *)(v11 + 56);
    if (v40)
      v41 = (uint64_t *)(v40 + 8);
    else
      v41 = 0;
    v42 = *(int *)(v11 + 48);
    if ((_DWORD)v42)
    {
      v43 = 8 * v42;
      while (1)
      {
        v44 = *v41;
        if (v145 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v10, (_QWORD *)*v41)&& *(_DWORD *)(v11 + 140) != 600)
        {
          break;
        }
        v45 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (_QWORD *)v44, v44);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v45 + 7, *(_QWORD **)(v11 + 112), *(_QWORD *)(v11 + 112));
        ++v41;
        v43 -= 8;
        if (!v43)
          goto LABEL_60;
      }
      v48 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (_QWORD *)v44, v44)[7];
      if (*(char *)(v48 + 55) < 0)
        std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(v48 + 32), *(_QWORD *)(v48 + 40));
      else
        v152 = *(std::string *)(v48 + 32);
      v70 = *(__int128 **)(v11 + 112);
      if (*((char *)v70 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)v70, *((_QWORD *)v70 + 1));
      }
      else
      {
        v71 = *v70;
        v147.__r_.__value_.__r.__words[2] = *((_QWORD *)v70 + 2);
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v71;
      }
      v72 = std::string::insert(&v147, 0, "Layer '");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v148, "' produces an output named '");
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v44 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v44, *(_QWORD *)(v44 + 8));
      }
      else
      {
        v76 = *(_OWORD *)v44;
        v146.__r_.__value_.__r.__words[2] = *(_QWORD *)(v44 + 16);
        *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v76;
      }
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v146;
      else
        v77 = (std::string *)v146.__r_.__value_.__r.__words[0];
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      else
        v78 = v146.__r_.__value_.__l.__size_;
      v79 = std::string::append(&v149, (const std::string::value_type *)v77, v78);
      v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v150.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      v81 = std::string::append(&v150, "' which is also an output produced by the layer '");
      v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v151.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = &v152;
      else
        v83 = (std::string *)v152.__r_.__value_.__r.__words[0];
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v84 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
      else
        v84 = v152.__r_.__value_.__l.__size_;
      v85 = std::string::append(&v151, (const std::string::value_type *)v83, v84);
      v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v154.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      v87 = std::string::append(&v154, "'.");
      v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v155.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v151.__r_.__value_.__l.__data_);
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v150.__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v148.__r_.__value_.__l.__data_);
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v147.__r_.__value_.__l.__data_);
      *(_QWORD *)v140 = 13;
      std::operator+<char>();
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      goto LABEL_207;
    }
LABEL_60:
    v7 = v138 + 1;
    a2 = v139;
    if (v138 + 1 == v137)
      goto LABEL_61;
  }
  v38 = 8 * v37;
  while (1)
  {
    v39 = (__int128 *)*v36;
    if (v145 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v10, *v36))break;
    ++v36;
    v38 -= 8;
    if (!v38)
      goto LABEL_52;
  }
  v46 = *(__int128 **)(v11 + 112);
  if (*((char *)v46 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v46, *((_QWORD *)v46 + 1));
  }
  else
  {
    v47 = *v46;
    v150.__r_.__value_.__r.__words[2] = *((_QWORD *)v46 + 2);
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v47;
  }
  v55 = std::string::insert(&v150, 0, "Layer '");
  v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v151.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  v57 = std::string::append(&v151, "' consumes an input named '");
  v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)v39 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v39, *((_QWORD *)v39 + 1));
  }
  else
  {
    v59 = *v39;
    v149.__r_.__value_.__r.__words[2] = *((_QWORD *)v39 + 2);
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v59;
  }
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v60 = &v149;
  else
    v60 = (std::string *)v149.__r_.__value_.__r.__words[0];
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v61 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
  else
    v61 = v149.__r_.__value_.__l.__size_;
  v62 = std::string::append(&v154, (const std::string::value_type *)v60, v61);
  v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v155.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  v64 = std::string::append(&v155, "' which is not present in this network.");
  v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v152.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v154.__r_.__value_.__l.__data_);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  *(_QWORD *)v140 = 13;
  std::operator+<char>();
LABEL_207:
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
LABEL_209:
  if (SHIBYTE(v158) < 0)
    operator delete((void *)v157);
}

void sub_19C9CFA10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (*(char *)(v59 - 89) < 0)
    operator delete(*(void **)(v59 - 112));
  _Unwind_Resume(exception_object);
}

void CoreML::validateTensorMessage(CoreML *this, const CoreML::Specification::Tensor *a2, const CoreML::Specification::NeuralNetworkLayer *a3, uint64_t a4)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  void *v8;
  char v9;
  std::string __p;
  std::string v11;
  void *v12;
  __int128 v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v13 = 0uLL;
  if ((int)a2 < 1 || (_DWORD)a3 == (_DWORD)a2)
  {
    CoreML::Result::Result(this);
  }
  else
  {
    if (*(char *)(a4 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    else
      __p = *(std::string *)a4;
    v5 = std::string::insert(&__p, 0, "Tensor in layer '");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v11, "': rank must match the length of dimValue");
    v8 = (void *)v7->__r_.__value_.__r.__words[0];
    v14[0] = v7->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
    v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)((char *)&v13 + 7) = *(_QWORD *)((char *)v14 + 7);
    v12 = v8;
    *(_QWORD *)&v13 = v14[0];
    HIBYTE(v13) = v9;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *(_QWORD *)this = 13;
    std::operator+<char>();
    if (SHIBYTE(v13) < 0)
      operator delete(v12);
  }
}

void sub_19C9CFE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(exception_object);
}

void CoreML::validate<(MLModelType)303>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  int v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  int data;
  uint64_t v57;
  int v58;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  int v67;
  int v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD **v71;
  int v73;
  int v74;
  char **v75;
  char *v76[2];
  void *v77;
  void *__p[2];
  uint64_t v79;
  std::string::size_type v80;
  __int128 v81;
  std::string::size_type v82;
  _QWORD *v83;
  uint64_t *v84;
  _QWORD *v85[2];
  char **v86;
  char *v87[2];
  std::string::size_type v88;
  __int128 v89;
  std::string::size_type v90;
  std::string v91;
  std::string v92;
  _QWORD **v93;
  _QWORD *v94[5];

  v94[3] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_QWORD *)(a2 + 16))
    v5 = *(uint64_t **)(a2 + 16);
  else
    v5 = &CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::validateRegressorInterface(&v77, (uint64_t)v5, *(_DWORD *)(a2 + 24), 1, 0);
  if ((v77 & 0xFFFFFFEF) != 0)
  {
    *(_QWORD *)a1 = v77;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 24) = v79;
    return;
  }
  v76[0] = 0;
  v76[1] = 0;
  v75 = v76;
  if (*(_QWORD *)(a2 + 16))
    v4 = *(uint64_t **)(a2 + 16);
  if (*(_DWORD *)(a2 + 44) == 303)
  {
    v7 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_NeuralNetworkRegressor_default_instance_;
  }
  v8 = *(unsigned __int8 *)(a2 + 28);
  CoreML::Result::Result((CoreML::Result *)&v88);
  v9 = v4[4];
  if (v9)
    v10 = (uint64_t *)(v9 + 8);
  else
    v10 = 0;
  v11 = *((int *)v4 + 6);
  if ((_DWORD)v11)
  {
    v12 = 8 * v11 - 8;
    do
    {
      v13 = *v10++;
      v14 = *(uint64_t **)(v13 + 32);
      if (!v14)
        v14 = &CoreML::Specification::_FeatureType_default_instance_;
      v15 = *((_DWORD *)v14 + 9);
      v16 = v15 != 5;
      v17 = v15 == 5 || v12 == 0;
      v12 -= 8;
    }
    while (!v17);
  }
  else
  {
    v16 = 1;
  }
  v18 = *((_DWORD *)v7 + 18);
  v19 = *((_DWORD *)v7 + 19);
  v20 = v7[4];
  if (v20)
    v21 = (uint64_t *)(v20 + 8);
  else
    v21 = 0;
  v22 = *((int *)v7 + 6);
  if ((_DWORD)v22)
  {
    v23 = 8 * v22;
    while ((CoreML::isIOS12NeuralNetworkLayer(*v21) & 1) != 0)
    {
      ++v21;
      v23 -= 8;
      if (!v23)
        goto LABEL_32;
    }
    if (v18)
      v32 = 1;
    else
      v32 = v16;
    if ((v32 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v91, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the network contains a layer added in version 4 (iOS 13) or later. Use 'EXACT_ARRAY_MAPPING' instead.");
      *(_QWORD *)a1 = 12;
      std::operator+<char>();
      goto LABEL_62;
    }
    v24 = 1;
  }
  else
  {
LABEL_32:
    v24 = (v18 | v19) != 0;
  }
  if (v18)
    v25 = 1;
  else
    v25 = v19 == 0;
  v26 = v25 || v16;
  if ((v26 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v91, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the image input Shape mapping is not 'RANK5_IMAGE_MAPPING'");
    *(_QWORD *)a1 = 12;
    std::operator+<char>();
    goto LABEL_62;
  }
  if (!*((_DWORD *)v4 + 12))
  {
    std::string::basic_string[abi:ne180100]<0>(&v91, "Neural networks produce at least one output.");
    *(_QWORD *)a1 = 12;
    std::operator+<char>();
    goto LABEL_62;
  }
  if (!*((_DWORD *)v7 + 6))
  {
    std::string::basic_string[abi:ne180100]<0>(&v91, "Neural networks require at least one layer.");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
    goto LABEL_62;
  }
  v27 = *((unsigned int *)v4 + 6);
  if ((int)v27 >= 1)
  {
    v28 = v4[4];
    if (v28)
      v29 = v28 + 8;
    else
      v29 = 0;
    v30 = 8 * v27;
    do
    {
      v31 = *(uint64_t **)(*(_QWORD *)v29 + 32);
      if (!v31)
        v31 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_DWORD *)v31 + 9) != 8 && !*((_BYTE *)v31 + 16))
        goto LABEL_69;
      v29 += 8;
      v30 -= 8;
    }
    while (v30);
    std::string::basic_string[abi:ne180100]<0>(&v91, "Neural networks require at least one non-optional input.");
    *(_QWORD *)a1 = 12;
    std::operator+<char>();
LABEL_62:
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    goto LABEL_64;
  }
LABEL_69:
  std::string::basic_string[abi:ne180100]<0>(&v91, "inputs");
  CoreML::validateInputOutputTypes((CoreML::Result *)a1, *((_DWORD *)v4 + 6), v4[4], 1);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if ((*(_DWORD *)a1 & 0xFFFFFFEF) != 0)
    goto LABEL_64;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  v74 = v8;
  v87[0] = 0;
  v87[1] = 0;
  v86 = v87;
  if (v24)
  {
    v33 = v4[4];
    if (v33)
      v34 = v33 + 8;
    else
      v34 = 0;
    v35 = *((int *)v4 + 6);
    if ((_DWORD)v35)
    {
      for (i = 8 * v35; i; i -= 8)
      {
        v37 = *(_QWORD *)v34;
        v38 = *(uint64_t **)(*(_QWORD *)v34 + 32);
        if (!v38)
          v38 = &CoreML::Specification::_FeatureType_default_instance_;
        v39 = *((_DWORD *)v38 + 9);
        if (v39 == 4)
        {
          v41 = *(_QWORD **)(v37 + 16);
          if (!*((_DWORD *)v7 + 19))
          {
            v91.__r_.__value_.__r.__words[0] = *(_QWORD *)(v37 + 16);
            v42 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v86, v41, (__int128 **)&v91);
            goto LABEL_90;
          }
          v91.__r_.__value_.__r.__words[0] = *(_QWORD *)(v37 + 16);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v86, v41, (__int128 **)&v91)+ 14) = 4;
        }
        else if (v39 == 5)
        {
          if (!*((_DWORD *)v7 + 18))
          {
            v91.__r_.__value_.__r.__words[0] = *(_QWORD *)(v37 + 16);
            v42 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v86, v91.__r_.__value_.__l.__data_, (__int128 **)&v91);
LABEL_90:
            *((_DWORD *)v42 + 14) = 5;
            goto LABEL_91;
          }
          v40 = *(_DWORD *)(v38[3] + 16);
          v91.__r_.__value_.__r.__words[0] = *(_QWORD *)(v37 + 16);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v86, v91.__r_.__value_.__l.__data_, (__int128 **)&v91)+ 14) = v40;
        }
LABEL_91:
        v34 += 8;
      }
    }
    v43 = v4[7];
    if (v43)
      v44 = v43 + 8;
    else
      v44 = 0;
    v45 = *((int *)v4 + 12);
    if ((_DWORD)v45)
    {
      v46 = 8 * v45;
      do
      {
        v47 = *(uint64_t **)(*(_QWORD *)v44 + 32);
        if (!v47)
          v47 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v47 + 9) == 5)
        {
          v48 = *(_DWORD *)(v47[3] + 16);
          if (v48)
          {
            v91.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)v44 + 16);
            *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v86, v91.__r_.__value_.__l.__data_, (__int128 **)&v91)+ 14) = v48;
          }
        }
        v44 += 8;
        v46 -= 8;
      }
      while (v46);
    }
  }
  v85[0] = 0;
  v85[1] = 0;
  v84 = (uint64_t *)v85;
  v49 = v4[4];
  if (v49)
    v50 = (uint64_t *)(v49 + 8);
  else
    v50 = 0;
  v51 = *((int *)v4 + 6);
  if (!(_DWORD)v51)
  {
LABEL_140:
    CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)&v91, &v84, (uint64_t **)&v86, v24, 0, (uint64_t **)&v86);
    CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkRegressor>((uint64_t)&v80, (CoreML::Specification::NeuralNetworkLayer *)&v91, (uint64_t)v7);
    v68 = v80;
    v88 = v80;
    if (SHIBYTE(v90) < 0)
    {
      operator delete((void *)v89);
      v68 = v88;
    }
    v89 = v81;
    v90 = v82;
    if ((v68 & 0xFFFFFFEF) == 0)
    {
      v69 = v93;
      if (v93 != v94)
      {
        do
        {
          if (v85 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v84, v69 + 4)|| v69[9] >= 2uLL)
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v75, v69 + 4, (uint64_t)(v69 + 4));
          }
          v70 = (_QWORD *)v69[1];
          if (v70)
          {
            do
            {
              v71 = (_QWORD **)v70;
              v70 = (_QWORD *)*v70;
            }
            while (v70);
          }
          else
          {
            do
            {
              v71 = (_QWORD **)v69[2];
              v17 = *v71 == v69;
              v69 = v71;
            }
            while (!v17);
          }
          v69 = v71;
        }
        while (v71 != v94);
      }
      if (!v24)
      {
        CoreML::NeuralNetworkShaper::NeuralNetworkShaper(&v80, (uint64_t)v4, (uint64_t)(v7 + 2));
        std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(v83);
        std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(*((_QWORD **)&v81 + 1));
      }
      if ((v88 & 0xFFFFFFEF) == 0 && v74 != 0)
      {
        validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetworkRegressor>((void **)&v80, (uint64_t)v7);
        v73 = v80;
        v88 = v80;
        if (SHIBYTE(v90) < 0)
        {
          operator delete((void *)v89);
          v73 = v88;
        }
        v89 = v81;
        v90 = v82;
        if ((v73 & 0xFFFFFFEF) == 0)
        {
          validateTrainingInputs<CoreML::Specification::NeuralNetworkRegressor>((CoreML::Result *)&v80, (uint64_t)v4, v7);
          v88 = v80;
          if (SHIBYTE(v90) < 0)
            operator delete((void *)v89);
          v89 = v81;
          v90 = v82;
        }
      }
    }
    *(_QWORD *)a1 = v88;
    *(_OWORD *)(a1 + 8) = v89;
    *(_QWORD *)(a1 + 24) = v90;
    v89 = 0uLL;
    v90 = 0;
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v94[0]);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v92.__r_.__value_.__r.__words[2]);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v91.__r_.__value_.__r.__words[2]);
    goto LABEL_166;
  }
  v52 = &v50[v51];
  while (1)
  {
    v53 = *v50;
    std::string::basic_string[abi:ne180100]<0>(&v91, "__input");
    v54 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v84, *(_QWORD **)(v53 + 16), *(_QWORD *)(v53 + 16));
    std::__tree<std::string>::__assign_unique<std::string const*>((uint64_t **)v54 + 7, &v91, &v92);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    v55 = *(uint64_t **)(v53 + 32);
    if (!v55)
      v55 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v55 + 9) != 5)
      goto LABEL_139;
    if (v24)
    {
      CoreML::validateNdMultiArrayInputType((CoreML *)&v91, (const CoreML::Specification::ArrayFeatureType *)v55[3]);
      data = (int)v91.__r_.__value_.__l.__data_;
      v88 = v91.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v90) < 0)
      {
        operator delete((void *)v89);
        data = v88;
      }
      v89 = *(_OWORD *)&v91.__r_.__value_.__r.__words[1];
      v90 = v92.__r_.__value_.__r.__words[0];
      if ((data & 0xFFFFFFEF) != 0)
      {
        *(_QWORD *)a1 = v88;
        *(_OWORD *)(a1 + 8) = v89;
        *(_QWORD *)(a1 + 24) = v90;
        v89 = 0uLL;
        v90 = 0;
        goto LABEL_166;
      }
      goto LABEL_139;
    }
    v57 = v55[3];
    v58 = *(_DWORD *)(v57 + 16);
    if (v58 >= 1 && (v58 | 2) != 3)
      break;
    v60 = *(_DWORD *)(v57 + 60);
    if (v60)
    {
      if (v60 == 31)
      {
        v67 = *(_DWORD *)(*(_QWORD *)(v57 + 40) + 24);
        if (v67 == 1)
          goto LABEL_139;
        v66 = v67 == 3;
        goto LABEL_137;
      }
      if (v60 != 21)
        goto LABEL_139;
      v61 = *(_QWORD *)(v57 + 40);
      v62 = *(_QWORD *)(v61 + 32);
      v63 = v62 ? v62 + 8 : 0;
      v64 = *(int *)(v61 + 24);
      if (!(_DWORD)v64)
        goto LABEL_139;
      v65 = 8 * v64;
      while ((*(_DWORD *)(*(_QWORD *)v63 + 16) | 2) == 3)
      {
        v63 += 8;
        v65 -= 8;
        if (!v65)
          goto LABEL_139;
      }
    }
    v66 = 0;
LABEL_137:
    if (v58 <= 0 && !v66)
      break;
LABEL_139:
    if (++v50 == v52)
      goto LABEL_140;
  }
  std::string::basic_string[abi:ne180100]<0>(&v91, "Input MLMultiArray to neural networks must have dimension 1 (vector) or 3 (image-like arrays).");
  *(_QWORD *)a1 = 12;
  std::operator+<char>();
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
LABEL_166:
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v85[0]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v87[0]);
LABEL_64:
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v76[0]);
  if (SHIBYTE(v79) < 0)
    operator delete(__p[0]);
}

void sub_19C9D079C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *__p, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *a14, uint64_t a15, char *a16, std::string *a17, void *a18, void *__pa, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,_QWORD *a36,uint64_t a37,uint64_t a38,char *a39)
{
  uint64_t v39;

  if (*(char *)(v39 - 161) < 0)
    operator delete(*(void **)(v39 - 184));
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a36);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a39);
  if (*(char *)(v39 - 185) < 0)
    operator delete(*(void **)(v39 - 208));
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a16);
  if (SHIBYTE(a21) < 0)
    operator delete(__pa);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkRegressor>(uint64_t a1, CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int data;
  _QWORD *v19;
  uint64_t **v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t **v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  _QWORD **v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  __int128 *v46;
  __int128 v47;
  uint64_t v48;
  __int128 *v49;
  __int128 v50;
  _QWORD *v51;
  __int128 *v52;
  __int128 v53;
  _QWORD *v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  __int128 v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  __int128 *v66;
  __int128 v67;
  __int128 *v68;
  __int128 v69;
  __int128 *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  __int128 v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  __int128 v92;
  __int128 *v93;
  __int128 v94;
  std::string *v95;
  std::string::size_type size;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  __int128 v100;
  std::string *v101;
  __int128 v102;
  std::string *v103;
  __int128 v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  __int128 v110;
  __int128 *v111;
  __int128 v112;
  std::string *v113;
  std::string::size_type v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  __int128 v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  __int128 v124;
  __int128 *v125;
  __int128 v126;
  __int128 *v127;
  __int128 v128;
  std::string *v129;
  __int128 v130;
  std::string *v131;
  __int128 v132;
  std::string *v133;
  __int128 v134;
  std::string *v135;
  __int128 v136;
  _QWORD *v137;
  _QWORD *v138;
  CoreML::Specification::NeuralNetworkLayer *v139;
  uint64_t v140;
  _BYTE *v141;
  _QWORD *v142;
  uint64_t **v143;
  _QWORD *v144;
  _QWORD *v145;
  std::string v146;
  std::string v147;
  std::string v148;
  std::string v149;
  std::string v150;
  std::string v151;
  std::string v152;
  uint64_t v153;
  std::string v154;
  std::string v155;
  std::string::size_type v156;
  __int128 v157;
  uint64_t v158;

  CoreML::Result::Result((CoreML::Result *)&v156);
  v6 = *(_QWORD *)(a3 + 32);
  if (v6)
    v7 = (_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v8 = *(int *)(a3 + 24);
  if (!(_DWORD)v8)
  {
LABEL_61:
    CoreML::Result::Result((CoreML::Result *)a1);
    goto LABEL_209;
  }
  v9 = (uint64_t)a2 + 8;
  v143 = (uint64_t **)((char *)a2 + 32);
  v144 = (_QWORD *)((char *)a2 + 16);
  v141 = (char *)a2 + 8;
  v142 = (_QWORD *)((char *)a2 + 40);
  v10 = (uint64_t **)((char *)a2 + 56);
  v145 = (_QWORD *)((char *)a2 + 64);
  v137 = &v7[v8];
  v139 = a2;
  v140 = a1;
  while (1)
  {
    if ((v156 & 0xFFFFFFEF) != 0)
    {
LABEL_92:
      *(_QWORD *)a1 = v156;
      *(_OWORD *)(a1 + 8) = v157;
      *(_QWORD *)(a1 + 24) = v158;
      goto LABEL_93;
    }
    v138 = v7;
    v11 = *v7;
    if (*(_BYTE *)a2)
    {
      v12 = *(int *)(v11 + 72);
      if ((_DWORD)v12)
      {
        if (*(_DWORD *)(v11 + 24) == (_DWORD)v12)
        {
          v13 = 0;
          v14 = *(_QWORD *)(v11 + 80);
          if (v14)
            v15 = v14 + 8;
          else
            v15 = 0;
          v16 = 8 * v12;
          while (1)
          {
            v17 = *(_QWORD *)(v15 + 8 * v13);
            CoreML::validateTensorMessage((CoreML *)&v152, (const CoreML::Specification::Tensor *)*(unsigned int *)(v17 + 16), (const CoreML::Specification::NeuralNetworkLayer *)*(unsigned int *)(v17 + 36), *(_QWORD *)(v11 + 112));
            data = (int)v152.__r_.__value_.__l.__data_;
            v156 = v152.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v158) < 0)
            {
              operator delete((void *)v157);
              data = v156;
            }
            v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
            v158 = v153;
            if ((data & 0xFFFFFFEF) != 0)
              goto LABEL_62;
            v19 = *(_QWORD **)(*(_QWORD *)(v11 + 32) + 8 * v13 + 8);
            if (v144 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(v9, v19))
            {
              v20 = (uint64_t **)v9;
              v21 = *(_DWORD *)(v17 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              if (v21 != *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, v19, (__int128 **)&v152)+ 14))
              {
                v49 = *(__int128 **)(v11 + 112);
                if (*((char *)v49 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v49, *((_QWORD *)v49 + 1));
                }
                else
                {
                  v50 = *v49;
                  v149.__r_.__value_.__r.__words[2] = *((_QWORD *)v49 + 2);
                  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v50;
                }
                v51 = (_QWORD *)v140;
                v89 = std::string::insert(&v149, 0, "Layer '");
                v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
                v150.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v90;
                v89->__r_.__value_.__l.__size_ = 0;
                v89->__r_.__value_.__r.__words[2] = 0;
                v89->__r_.__value_.__r.__words[0] = 0;
                v91 = std::string::append(&v150, "''s input '");
                v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
                v151.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v92;
                v91->__r_.__value_.__l.__size_ = 0;
                v91->__r_.__value_.__r.__words[2] = 0;
                v91->__r_.__value_.__r.__words[0] = 0;
                v93 = *(__int128 **)(*(_QWORD *)(v11 + 32) + 8 * v13 + 8);
                if (*((char *)v93 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)v93, *((_QWORD *)v93 + 1));
                }
                else
                {
                  v94 = *v93;
                  v148.__r_.__value_.__r.__words[2] = *((_QWORD *)v93 + 2);
                  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v94;
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v95 = &v148;
                else
                  v95 = (std::string *)v148.__r_.__value_.__r.__words[0];
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v148.__r_.__value_.__r.__words[2]);
                else
                  size = v148.__r_.__value_.__l.__size_;
                v97 = std::string::append(&v151, (const std::string::value_type *)v95, size);
                v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
                v154.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v98;
                v97->__r_.__value_.__l.__size_ = 0;
                v97->__r_.__value_.__r.__words[2] = 0;
                v97->__r_.__value_.__r.__words[0] = 0;
                v99 = std::string::append(&v154, "' is also an input to the model. However, for this tensor the rank provided in the layer description");
                v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v100;
                v99->__r_.__value_.__l.__size_ = 0;
                v99->__r_.__value_.__r.__words[2] = 0;
                v99->__r_.__value_.__r.__words[0] = 0;
                v101 = std::string::append(&v155, " does not match the one provided in the model description");
                v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v102;
                v101->__r_.__value_.__l.__size_ = 0;
                v101->__r_.__value_.__r.__words[2] = 0;
                v101->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v155.__r_.__value_.__l.__data_);
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v154.__r_.__value_.__l.__data_);
                if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v148.__r_.__value_.__l.__data_);
                if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v151.__r_.__value_.__l.__data_);
                if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v150.__r_.__value_.__l.__data_);
                if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v149.__r_.__value_.__l.__data_);
LABEL_155:
                *v51 = 13;
                std::operator+<char>();
                goto LABEL_207;
              }
              v19 = *(_QWORD **)(*(_QWORD *)(v11 + 32) + 8 * v13 + 8);
            }
            if (v142 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v143, v19))
            {
              v22 = *(_DWORD *)(v17 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v19, (__int128 **)&v152)+ 14) = v22;
            }
            else
            {
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              if (*((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v19, (__int128 **)&v152)+ 14) != *(_DWORD *)(v17 + 36))
              {
                v52 = *(__int128 **)(*(_QWORD *)(v11 + 32) + 8 * v13 + 8);
                if (*((char *)v52 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v52, *((_QWORD *)v52 + 1));
                }
                else
                {
                  v53 = *v52;
                  v154.__r_.__value_.__r.__words[2] = *((_QWORD *)v52 + 2);
                  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v53;
                }
                v54 = (_QWORD *)v140;
                v103 = std::string::insert(&v154, 0, "Inconsistent rank for the blob named '");
                v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v104;
                v103->__r_.__value_.__l.__size_ = 0;
                v103->__r_.__value_.__r.__words[2] = 0;
                v103->__r_.__value_.__r.__words[0] = 0;
                v105 = std::string::append(&v155, "'.");
                v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v106;
                v105->__r_.__value_.__l.__size_ = 0;
                v105->__r_.__value_.__r.__words[2] = 0;
                v105->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v155.__r_.__value_.__l.__data_);
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v154.__r_.__value_.__l.__data_);
                goto LABEL_206;
              }
            }
            ++v13;
            v16 -= 8;
            v9 = (uint64_t)v141;
            if (!v16)
              goto LABEL_25;
          }
        }
        v125 = *(__int128 **)(v11 + 112);
        if (*((char *)v125 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v125, *((_QWORD *)v125 + 1));
        }
        else
        {
          v126 = *v125;
          v154.__r_.__value_.__r.__words[2] = *((_QWORD *)v125 + 2);
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v126;
        }
        v54 = (_QWORD *)v140;
        v129 = std::string::insert(&v154, 0, "Layer '");
        v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v130;
        v129->__r_.__value_.__l.__size_ = 0;
        v129->__r_.__value_.__r.__words[2] = 0;
        v129->__r_.__value_.__r.__words[0] = 0;
        v131 = std::string::append(&v155, "''s input and inputTensors have different lengths");
        v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        v152.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v132;
        v131->__r_.__value_.__l.__size_ = 0;
        v131->__r_.__value_.__r.__words[2] = 0;
        v131->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v155.__r_.__value_.__l.__data_);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        goto LABEL_206;
      }
LABEL_25:
      v23 = *(int *)(v11 + 96);
      if ((_DWORD)v23)
      {
        if (*(_DWORD *)(v11 + 48) == (_DWORD)v23)
        {
          v24 = 0;
          v25 = *(_QWORD *)(v11 + 104);
          if (v25)
            v26 = v25 + 8;
          else
            v26 = 0;
          v27 = 8 * v23;
          while (1)
          {
            v28 = *(_QWORD *)(v26 + 8 * v24);
            CoreML::validateTensorMessage((CoreML *)&v152, (const CoreML::Specification::Tensor *)*(unsigned int *)(v28 + 16), (const CoreML::Specification::NeuralNetworkLayer *)*(unsigned int *)(v28 + 36), *(_QWORD *)(v11 + 112));
            v29 = (int)v152.__r_.__value_.__l.__data_;
            v156 = v152.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v158) < 0)
            {
              operator delete((void *)v157);
              v29 = v156;
            }
            v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
            v158 = v153;
            if ((v29 & 0xFFFFFFEF) != 0)
              break;
            v30 = *(_QWORD **)(*(_QWORD *)(v11 + 56) + 8 * v24 + 8);
            if (v144 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(v9, v30))
            {
              v31 = (uint64_t **)v9;
              v32 = *(_DWORD *)(v28 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              if (v32 != *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, v30, (__int128 **)&v152)+ 14))
              {
                v66 = *(__int128 **)(v11 + 112);
                if (*((char *)v66 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v66, *((_QWORD *)v66 + 1));
                }
                else
                {
                  v67 = *v66;
                  v149.__r_.__value_.__r.__words[2] = *((_QWORD *)v66 + 2);
                  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v67;
                }
                v51 = (_QWORD *)v140;
                v107 = std::string::insert(&v149, 0, "Layer '");
                v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
                v150.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v108;
                v107->__r_.__value_.__l.__size_ = 0;
                v107->__r_.__value_.__r.__words[2] = 0;
                v107->__r_.__value_.__r.__words[0] = 0;
                v109 = std::string::append(&v150, "''s output '");
                v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
                v151.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v110;
                v109->__r_.__value_.__l.__size_ = 0;
                v109->__r_.__value_.__r.__words[2] = 0;
                v109->__r_.__value_.__r.__words[0] = 0;
                v111 = *(__int128 **)(*(_QWORD *)(v11 + 56) + 8 * v24 + 8);
                if (*((char *)v111 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)v111, *((_QWORD *)v111 + 1));
                }
                else
                {
                  v112 = *v111;
                  v148.__r_.__value_.__r.__words[2] = *((_QWORD *)v111 + 2);
                  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v112;
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v113 = &v148;
                else
                  v113 = (std::string *)v148.__r_.__value_.__r.__words[0];
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v114 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
                else
                  v114 = v148.__r_.__value_.__l.__size_;
                v115 = std::string::append(&v151, (const std::string::value_type *)v113, v114);
                v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
                v154.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v116;
                v115->__r_.__value_.__l.__size_ = 0;
                v115->__r_.__value_.__r.__words[2] = 0;
                v115->__r_.__value_.__r.__words[0] = 0;
                v117 = std::string::append(&v154, "' is also an output of the model. However, for this tensor the rank provided in the layer description");
                v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v118;
                v117->__r_.__value_.__l.__size_ = 0;
                v117->__r_.__value_.__r.__words[2] = 0;
                v117->__r_.__value_.__r.__words[0] = 0;
                v119 = std::string::append(&v155, " does not match the one provided in the model description");
                v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v120;
                v119->__r_.__value_.__l.__size_ = 0;
                v119->__r_.__value_.__r.__words[2] = 0;
                v119->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v155.__r_.__value_.__l.__data_);
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v154.__r_.__value_.__l.__data_);
                if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v148.__r_.__value_.__l.__data_);
                if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v151.__r_.__value_.__l.__data_);
                if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v150.__r_.__value_.__l.__data_);
                if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v149.__r_.__value_.__l.__data_);
                goto LABEL_155;
              }
              v30 = *(_QWORD **)(*(_QWORD *)(v11 + 56) + 8 * v24 + 8);
            }
            if (v142 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v143, v30))
            {
              v33 = *(_DWORD *)(v28 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v30, (__int128 **)&v152)+ 14) = v33;
            }
            else
            {
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              if (*((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v30, (__int128 **)&v152)+ 14) != *(_DWORD *)(v28 + 36))
              {
                v68 = *(__int128 **)(*(_QWORD *)(v11 + 56) + 8 * v24 + 8);
                if (*((char *)v68 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v68, *((_QWORD *)v68 + 1));
                }
                else
                {
                  v69 = *v68;
                  v154.__r_.__value_.__r.__words[2] = *((_QWORD *)v68 + 2);
                  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v69;
                }
                v54 = (_QWORD *)v140;
                v121 = std::string::insert(&v154, 0, "Inconsistent rank for the blob named '");
                v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v122;
                v121->__r_.__value_.__l.__size_ = 0;
                v121->__r_.__value_.__r.__words[2] = 0;
                v121->__r_.__value_.__r.__words[0] = 0;
                v123 = std::string::append(&v155, "'.");
                v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v124;
                v123->__r_.__value_.__l.__size_ = 0;
                v123->__r_.__value_.__r.__words[2] = 0;
                v123->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v155.__r_.__value_.__l.__data_);
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v154.__r_.__value_.__l.__data_);
                goto LABEL_206;
              }
            }
            ++v24;
            v27 -= 8;
            v9 = (uint64_t)v141;
            if (!v27)
              goto LABEL_42;
          }
LABEL_62:
          *(_QWORD *)v140 = v156;
          *(_OWORD *)(v140 + 8) = v157;
          *(_QWORD *)(v140 + 24) = v158;
LABEL_93:
          v157 = 0uLL;
          v158 = 0;
          goto LABEL_209;
        }
        v127 = *(__int128 **)(v11 + 112);
        if (*((char *)v127 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v127, *((_QWORD *)v127 + 1));
        }
        else
        {
          v128 = *v127;
          v154.__r_.__value_.__r.__words[2] = *((_QWORD *)v127 + 2);
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v128;
        }
        v133 = std::string::insert(&v154, 0, "Layer '");
        v54 = (_QWORD *)v140;
        v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v134;
        v133->__r_.__value_.__l.__size_ = 0;
        v133->__r_.__value_.__r.__words[2] = 0;
        v133->__r_.__value_.__r.__words[0] = 0;
        v135 = std::string::append(&v155, "''s output and \"outputTensors\" property have different lengths");
        v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
        v152.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v136;
        v135->__r_.__value_.__l.__size_ = 0;
        v135->__r_.__value_.__r.__words[2] = 0;
        v135->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v155.__r_.__value_.__l.__data_);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
LABEL_206:
        *v54 = 13;
        std::operator+<char>();
        goto LABEL_207;
      }
    }
LABEL_42:
    CoreML::NeuralNetworkSpecValidator::validateLayer((void **)&v152.__r_.__value_.__l.__data_, v139, (const CoreML::Specification::NeuralNetworkLayer *)v11);
    v34 = (int)v152.__r_.__value_.__l.__data_;
    v156 = v152.__r_.__value_.__r.__words[0];
    a1 = v140;
    if (SHIBYTE(v158) < 0)
    {
      operator delete((void *)v157);
      v34 = v156;
    }
    v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
    v158 = v153;
    if ((v34 & 0xFFFFFFEF) != 0)
      goto LABEL_92;
    v35 = *(_QWORD *)(v11 + 32);
    v36 = v35 ? (_QWORD **)(v35 + 8) : 0;
    v37 = *(int *)(v11 + 24);
    if ((_DWORD)v37)
      break;
LABEL_52:
    v40 = *(_QWORD *)(v11 + 56);
    if (v40)
      v41 = (uint64_t *)(v40 + 8);
    else
      v41 = 0;
    v42 = *(int *)(v11 + 48);
    if ((_DWORD)v42)
    {
      v43 = 8 * v42;
      while (1)
      {
        v44 = *v41;
        if (v145 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v10, (_QWORD *)*v41)&& *(_DWORD *)(v11 + 140) != 600)
        {
          break;
        }
        v45 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (_QWORD *)v44, v44);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v45 + 7, *(_QWORD **)(v11 + 112), *(_QWORD *)(v11 + 112));
        ++v41;
        v43 -= 8;
        if (!v43)
          goto LABEL_60;
      }
      v48 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (_QWORD *)v44, v44)[7];
      if (*(char *)(v48 + 55) < 0)
        std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(v48 + 32), *(_QWORD *)(v48 + 40));
      else
        v152 = *(std::string *)(v48 + 32);
      v70 = *(__int128 **)(v11 + 112);
      if (*((char *)v70 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)v70, *((_QWORD *)v70 + 1));
      }
      else
      {
        v71 = *v70;
        v147.__r_.__value_.__r.__words[2] = *((_QWORD *)v70 + 2);
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v71;
      }
      v72 = std::string::insert(&v147, 0, "Layer '");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v148, "' produces an output named '");
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v44 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v44, *(_QWORD *)(v44 + 8));
      }
      else
      {
        v76 = *(_OWORD *)v44;
        v146.__r_.__value_.__r.__words[2] = *(_QWORD *)(v44 + 16);
        *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v76;
      }
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v146;
      else
        v77 = (std::string *)v146.__r_.__value_.__r.__words[0];
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      else
        v78 = v146.__r_.__value_.__l.__size_;
      v79 = std::string::append(&v149, (const std::string::value_type *)v77, v78);
      v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v150.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      v81 = std::string::append(&v150, "' which is also an output produced by the layer '");
      v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v151.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = &v152;
      else
        v83 = (std::string *)v152.__r_.__value_.__r.__words[0];
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v84 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
      else
        v84 = v152.__r_.__value_.__l.__size_;
      v85 = std::string::append(&v151, (const std::string::value_type *)v83, v84);
      v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v154.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      v87 = std::string::append(&v154, "'.");
      v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v155.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v151.__r_.__value_.__l.__data_);
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v150.__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v148.__r_.__value_.__l.__data_);
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v147.__r_.__value_.__l.__data_);
      *(_QWORD *)v140 = 13;
      std::operator+<char>();
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      goto LABEL_207;
    }
LABEL_60:
    v7 = v138 + 1;
    a2 = v139;
    if (v138 + 1 == v137)
      goto LABEL_61;
  }
  v38 = 8 * v37;
  while (1)
  {
    v39 = (__int128 *)*v36;
    if (v145 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v10, *v36))break;
    ++v36;
    v38 -= 8;
    if (!v38)
      goto LABEL_52;
  }
  v46 = *(__int128 **)(v11 + 112);
  if (*((char *)v46 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v46, *((_QWORD *)v46 + 1));
  }
  else
  {
    v47 = *v46;
    v150.__r_.__value_.__r.__words[2] = *((_QWORD *)v46 + 2);
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v47;
  }
  v55 = std::string::insert(&v150, 0, "Layer '");
  v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v151.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  v57 = std::string::append(&v151, "' consumes an input named '");
  v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)v39 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v39, *((_QWORD *)v39 + 1));
  }
  else
  {
    v59 = *v39;
    v149.__r_.__value_.__r.__words[2] = *((_QWORD *)v39 + 2);
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v59;
  }
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v60 = &v149;
  else
    v60 = (std::string *)v149.__r_.__value_.__r.__words[0];
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v61 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
  else
    v61 = v149.__r_.__value_.__l.__size_;
  v62 = std::string::append(&v154, (const std::string::value_type *)v60, v61);
  v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v155.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  v64 = std::string::append(&v155, "' which is not present in this network.");
  v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v152.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v154.__r_.__value_.__l.__data_);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  *(_QWORD *)v140 = 13;
  std::operator+<char>();
LABEL_207:
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
LABEL_209:
  if (SHIBYTE(v158) < 0)
    operator delete((void *)v157);
}

void sub_19C9D1930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (*(char *)(v59 - 89) < 0)
    operator delete(*(void **)(v59 - 112));
  _Unwind_Resume(exception_object);
}

void CoreML::validate<(MLModelType)500>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  std::string *v45;
  std::string::size_type v46;
  char v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;
  int v56;
  _QWORD *v57;
  char *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  int v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  int v73;
  uint64_t v74;
  int v75;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  int v84;
  int data;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD **v88;
  int v90;
  int v91;
  uint64_t v92;
  void *__p[2];
  std::string::size_type v94;
  uint64_t *v95;
  char *v96;
  uint64_t v97;
  std::string v98;
  std::string::size_type v99;
  _QWORD *v100;
  uint64_t *v101;
  _QWORD *v102[2];
  char **v103;
  char *v104[2];
  std::string v105;
  std::string v106;
  _QWORD **v107;
  _QWORD *v108[3];
  _BYTE v109[24];
  std::string::size_type v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 16))
    v4 = *(uint64_t **)(a2 + 16);
  else
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(&v105, "outputs");
  CoreML::validateInputOutputTypes((CoreML::Result *)a1, *((_DWORD *)v4 + 12), v4[7], 2);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if ((*(_DWORD *)a1 & 0xFFFFFFEF) != 0)
    return;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  v96 = 0;
  v97 = 0;
  v95 = (uint64_t *)&v96;
  if (*(_QWORD *)(a2 + 16))
    v6 = *(uint64_t **)(a2 + 16);
  else
    v6 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_DWORD *)(a2 + 44) == 500)
  {
    v7 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v5);
    v7 = &CoreML::Specification::_NeuralNetwork_default_instance_;
  }
  v8 = *(unsigned __int8 *)(a2 + 28);
  CoreML::Result::Result((CoreML::Result *)v109);
  v9 = v6[4];
  if (v9)
    v10 = (uint64_t *)(v9 + 8);
  else
    v10 = 0;
  v11 = *((int *)v6 + 6);
  v91 = v8;
  if ((_DWORD)v11)
  {
    v12 = 8 * v11 - 8;
    do
    {
      v13 = *v10++;
      v14 = *(uint64_t **)(v13 + 32);
      if (!v14)
        v14 = &CoreML::Specification::_FeatureType_default_instance_;
      v15 = *((_DWORD *)v14 + 9);
      v16 = v15 != 5;
      v17 = v15 == 5 || v12 == 0;
      v12 -= 8;
    }
    while (!v17);
  }
  else
  {
    v16 = 1;
  }
  v18 = *((_DWORD *)v7 + 18);
  v19 = *((_DWORD *)v7 + 19);
  v20 = v7[4];
  if (v20)
    v21 = (uint64_t *)(v20 + 8);
  else
    v21 = 0;
  v22 = *((int *)v7 + 6);
  if ((_DWORD)v22)
  {
    v23 = 8 * v22;
    while ((CoreML::isIOS12NeuralNetworkLayer(*v21) & 1) != 0)
    {
      ++v21;
      v23 -= 8;
      if (!v23)
        goto LABEL_36;
    }
    if (v18)
      v32 = 1;
    else
      v32 = v16;
    if ((v32 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v105, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the network contains a layer added in version 4 (iOS 13) or later. Use 'EXACT_ARRAY_MAPPING' instead.");
      v92 = 12;
      std::operator+<char>();
      goto LABEL_66;
    }
    v24 = 1;
  }
  else
  {
LABEL_36:
    v24 = (v18 | v19) != 0;
  }
  if (v18)
    v25 = 1;
  else
    v25 = v19 == 0;
  v26 = v25 || v16;
  if ((v26 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v105, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the image input Shape mapping is not 'RANK5_IMAGE_MAPPING'");
    v92 = 12;
    std::operator+<char>();
    goto LABEL_66;
  }
  if (!*((_DWORD *)v6 + 12))
  {
    std::string::basic_string[abi:ne180100]<0>(&v105, "Neural networks produce at least one output.");
    v92 = 12;
    std::operator+<char>();
    goto LABEL_66;
  }
  if (!*((_DWORD *)v7 + 6))
  {
    std::string::basic_string[abi:ne180100]<0>(&v105, "Neural networks require at least one layer.");
    v92 = 13;
    std::operator+<char>();
    goto LABEL_66;
  }
  v27 = *((unsigned int *)v6 + 6);
  if ((int)v27 >= 1)
  {
    v28 = v6[4];
    if (v28)
      v29 = v28 + 8;
    else
      v29 = 0;
    v30 = 8 * v27;
    do
    {
      v31 = *(uint64_t **)(*(_QWORD *)v29 + 32);
      if (!v31)
        v31 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_DWORD *)v31 + 9) != 8 && !*((_BYTE *)v31 + 16))
        goto LABEL_106;
      v29 += 8;
      v30 -= 8;
    }
    while (v30);
    std::string::basic_string[abi:ne180100]<0>(&v105, "Neural networks require at least one non-optional input.");
    v92 = 12;
    std::operator+<char>();
LABEL_66:
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    goto LABEL_68;
  }
LABEL_106:
  std::string::basic_string[abi:ne180100]<0>(&v105, "inputs");
  CoreML::validateInputOutputTypes((CoreML::Result *)&v92, *((_DWORD *)v6 + 6), v6[4], 1);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if ((v92 & 0xFFFFFFEF) != 0)
    goto LABEL_68;
  if (SHIBYTE(v94) < 0)
    operator delete(__p[0]);
  v104[0] = 0;
  v104[1] = 0;
  v103 = v104;
  if (v24)
  {
    v49 = v6[4];
    if (v49)
      v50 = v49 + 8;
    else
      v50 = 0;
    v51 = *((int *)v6 + 6);
    if ((_DWORD)v51)
    {
      v52 = 8 * v51;
      while (1)
      {
        v53 = *(_QWORD *)v50;
        v54 = *(uint64_t **)(*(_QWORD *)v50 + 32);
        if (!v54)
          v54 = &CoreML::Specification::_FeatureType_default_instance_;
        v55 = *((_DWORD *)v54 + 9);
        if (v55 == 4)
          break;
        if (v55 == 5)
        {
          if (!*((_DWORD *)v7 + 18))
          {
            v105.__r_.__value_.__r.__words[0] = *(_QWORD *)(v53 + 16);
            v58 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v103, v105.__r_.__value_.__l.__data_, (__int128 **)&v105);
            goto LABEL_127;
          }
          v56 = *(_DWORD *)(v54[3] + 16);
          v105.__r_.__value_.__r.__words[0] = *(_QWORD *)(v53 + 16);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v103, v105.__r_.__value_.__l.__data_, (__int128 **)&v105)+ 14) = v56;
        }
LABEL_129:
        v50 += 8;
        v52 -= 8;
        if (!v52)
          goto LABEL_130;
      }
      v57 = *(_QWORD **)(v53 + 16);
      if (*((_DWORD *)v7 + 19))
      {
        v105.__r_.__value_.__r.__words[0] = *(_QWORD *)(v53 + 16);
        v58 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v103, v57, (__int128 **)&v105);
        v59 = 4;
      }
      else
      {
        v105.__r_.__value_.__r.__words[0] = *(_QWORD *)(v53 + 16);
        v58 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v103, v57, (__int128 **)&v105);
LABEL_127:
        v59 = 5;
      }
      *((_DWORD *)v58 + 14) = v59;
      goto LABEL_129;
    }
LABEL_130:
    v60 = v6[7];
    if (v60)
      v61 = v60 + 8;
    else
      v61 = 0;
    v62 = *((int *)v6 + 12);
    if ((_DWORD)v62)
    {
      v63 = 8 * v62;
      do
      {
        v64 = *(uint64_t **)(*(_QWORD *)v61 + 32);
        if (!v64)
          v64 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v64 + 9) == 5)
        {
          v65 = *(_DWORD *)(v64[3] + 16);
          if (v65)
          {
            v105.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)v61 + 16);
            *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v103, v105.__r_.__value_.__l.__data_, (__int128 **)&v105)+ 14) = v65;
          }
        }
        v61 += 8;
        v63 -= 8;
      }
      while (v63);
    }
  }
  v102[0] = 0;
  v102[1] = 0;
  v101 = (uint64_t *)v102;
  v66 = v6[4];
  if (v66)
    v67 = (uint64_t *)(v66 + 8);
  else
    v67 = 0;
  v68 = *((int *)v6 + 6);
  if (!(_DWORD)v68)
  {
LABEL_178:
    CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)&v105, &v101, (uint64_t **)&v103, v24, 0, (uint64_t **)&v103);
    CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetwork>((uint64_t)&v98, (CoreML::Specification::NeuralNetworkLayer *)&v105, (uint64_t)v7);
    data = (int)v98.__r_.__value_.__l.__data_;
    *(_QWORD *)v109 = v98.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v110) < 0)
    {
      operator delete(*(void **)&v109[8]);
      data = *(_DWORD *)v109;
    }
    *(_OWORD *)&v109[8] = *(_OWORD *)&v98.__r_.__value_.__r.__words[1];
    v110 = v99;
    if ((data & 0xFFFFFFEF) == 0)
    {
      v86 = v107;
      if (v107 != v108)
      {
        do
        {
          if (v102 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v101, v86 + 4)|| v86[9] >= 2uLL)
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v95, v86 + 4, (uint64_t)(v86 + 4));
          }
          v87 = (_QWORD *)v86[1];
          if (v87)
          {
            do
            {
              v88 = (_QWORD **)v87;
              v87 = (_QWORD *)*v87;
            }
            while (v87);
          }
          else
          {
            do
            {
              v88 = (_QWORD **)v86[2];
              v17 = *v88 == v86;
              v86 = v88;
            }
            while (!v17);
          }
          v86 = v88;
        }
        while (v88 != v108);
      }
      if (!v24)
      {
        CoreML::NeuralNetworkShaper::NeuralNetworkShaper(&v98, (uint64_t)v6, (uint64_t)(v7 + 2));
        std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(v100);
        std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy((_QWORD *)v98.__r_.__value_.__r.__words[2]);
      }
      if ((*(_DWORD *)v109 & 0xFFFFFFEF) == 0 && v91 != 0)
      {
        validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetwork>((void **)&v98.__r_.__value_.__l.__data_, (uint64_t)v7);
        v90 = (int)v98.__r_.__value_.__l.__data_;
        *(_QWORD *)v109 = v98.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v110) < 0)
        {
          operator delete(*(void **)&v109[8]);
          v90 = *(_DWORD *)v109;
        }
        *(_OWORD *)&v109[8] = *(_OWORD *)&v98.__r_.__value_.__r.__words[1];
        v110 = v99;
        if ((v90 & 0xFFFFFFEF) == 0)
        {
          validateTrainingInputs<CoreML::Specification::NeuralNetwork>((CoreML::Result *)&v98, (uint64_t)v6, v7);
          *(_QWORD *)v109 = v98.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v110) < 0)
            operator delete(*(void **)&v109[8]);
          *(_OWORD *)&v109[8] = *(_OWORD *)&v98.__r_.__value_.__r.__words[1];
          v110 = v99;
        }
      }
    }
    v92 = *(_QWORD *)v109;
    *(_OWORD *)__p = *(_OWORD *)&v109[8];
    v94 = v110;
    *(_QWORD *)&v109[8] = 0;
    *(_QWORD *)&v109[16] = 0;
    v110 = 0;
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v108[0]);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v106.__r_.__value_.__r.__words[2]);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v105.__r_.__value_.__r.__words[2]);
    goto LABEL_204;
  }
  v69 = &v67[v68];
  while (1)
  {
    v70 = *v67;
    std::string::basic_string[abi:ne180100]<0>(&v105, "__input");
    v71 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v101, *(_QWORD **)(v70 + 16), *(_QWORD *)(v70 + 16));
    std::__tree<std::string>::__assign_unique<std::string const*>((uint64_t **)v71 + 7, &v105, &v106);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    v72 = *(uint64_t **)(v70 + 32);
    if (!v72)
      v72 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v72 + 9) != 5)
      goto LABEL_177;
    if (v24)
    {
      CoreML::validateNdMultiArrayInputType((CoreML *)&v105, (const CoreML::Specification::ArrayFeatureType *)v72[3]);
      v73 = (int)v105.__r_.__value_.__l.__data_;
      *(_QWORD *)v109 = v105.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v110) < 0)
      {
        operator delete(*(void **)&v109[8]);
        v73 = *(_DWORD *)v109;
      }
      *(_OWORD *)&v109[8] = *(_OWORD *)&v105.__r_.__value_.__r.__words[1];
      v110 = v106.__r_.__value_.__r.__words[0];
      if ((v73 & 0xFFFFFFEF) != 0)
      {
        v92 = *(_QWORD *)v109;
        *(_OWORD *)__p = *(_OWORD *)&v109[8];
        v94 = v110;
        *(_QWORD *)&v109[8] = 0;
        *(_QWORD *)&v109[16] = 0;
        v110 = 0;
        goto LABEL_204;
      }
      goto LABEL_177;
    }
    v74 = v72[3];
    v75 = *(_DWORD *)(v74 + 16);
    if (v75 >= 1 && (v75 | 2) != 3)
      break;
    v77 = *(_DWORD *)(v74 + 60);
    if (v77)
    {
      if (v77 == 31)
      {
        v84 = *(_DWORD *)(*(_QWORD *)(v74 + 40) + 24);
        if (v84 == 1)
          goto LABEL_177;
        v83 = v84 == 3;
        goto LABEL_175;
      }
      if (v77 != 21)
        goto LABEL_177;
      v78 = *(_QWORD *)(v74 + 40);
      v79 = *(_QWORD *)(v78 + 32);
      v80 = v79 ? v79 + 8 : 0;
      v81 = *(int *)(v78 + 24);
      if (!(_DWORD)v81)
        goto LABEL_177;
      v82 = 8 * v81;
      while ((*(_DWORD *)(*(_QWORD *)v80 + 16) | 2) == 3)
      {
        v80 += 8;
        v82 -= 8;
        if (!v82)
          goto LABEL_177;
      }
    }
    v83 = 0;
LABEL_175:
    if (v75 <= 0 && !v83)
      break;
LABEL_177:
    if (++v67 == v69)
      goto LABEL_178;
  }
  std::string::basic_string[abi:ne180100]<0>(&v105, "Input MLMultiArray to neural networks must have dimension 1 (vector) or 3 (image-like arrays).");
  v92 = 12;
  std::operator+<char>();
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
LABEL_204:
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v102[0]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v104[0]);
LABEL_68:
  if (SHIBYTE(v110) < 0)
    operator delete(*(void **)&v109[8]);
  if ((v92 & 0xFFFFFFEF) != 0)
    goto LABEL_71;
  v33 = *(uint64_t **)(a2 + 16);
  if (!v33)
    v33 = &CoreML::Specification::_ModelDescription_default_instance_;
  v34 = v33[7];
  v35 = v34 ? v34 + 8 : 0;
  v36 = *((int *)v33 + 12);
  if (!(_DWORD)v36)
  {
LABEL_71:
    *(_QWORD *)a1 = v92;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 24) = v94;
  }
  else
  {
    v37 = v35 + 8 * v36;
    while (1)
    {
      v38 = *(_QWORD **)(*(_QWORD *)v35 + 16);
      memset(&v105, 0, sizeof(v105));
      v39 = (uint64_t *)v96;
      v40 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(v96, v38);
      if (v40)
      {
        v41 = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v95, v38);
        if (&v96 != (char **)v41)
        {
          v42 = v41;
          v43 = (uint64_t *)v41[1];
          if (v43)
          {
            do
            {
              v44 = v43;
              v43 = (uint64_t *)*v43;
            }
            while (v43);
          }
          else
          {
            v48 = v41;
            do
            {
              v44 = (uint64_t *)v48[2];
              v17 = *v44 == (_QWORD)v48;
              v48 = v44;
            }
            while (!v17);
          }
          if (v95 == v41)
            v95 = v44;
          --v97;
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v39, v41);
          if (*((char *)v42 + 55) < 0)
            operator delete((void *)v42[4]);
          operator delete(v42);
        }
      }
      else
      {
        std::operator+<char>();
        v45 = std::string::append(&v98, "' which is not produced by any layer in the neural network.");
        v46 = v45->__r_.__value_.__r.__words[0];
        *(_QWORD *)v109 = v45->__r_.__value_.__l.__size_;
        *(_QWORD *)&v109[7] = *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7);
        v47 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        v105.__r_.__value_.__r.__words[0] = v46;
        v105.__r_.__value_.__l.__size_ = *(_QWORD *)v109;
        *(std::string::size_type *)((char *)&v105.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v109[7];
        *((_BYTE *)&v105.__r_.__value_.__s + 23) = v47;
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v98.__r_.__value_.__l.__data_);
        *(_QWORD *)a1 = 12;
        std::operator+<char>();
      }
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v105.__r_.__value_.__l.__data_);
      if (!v40)
        break;
      v35 += 8;
      if (v35 == v37)
        goto LABEL_71;
    }
    if (SHIBYTE(v94) < 0)
      operator delete(__p[0]);
  }
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v96);
}

void sub_19C9D2734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::string *a22,void *a23,uint64_t a24,char *a25,uint64_t a26,void *__pa,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,_QWORD *a42,uint64_t a43,uint64_t a44,char *a45)
{
  uint64_t v45;

  if (*(char *)(v45 - 217) < 0)
    operator delete(*(void **)(v45 - 240));
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a42);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a45);
  if (*(char *)(v45 - 121) < 0)
    operator delete(*(void **)(v45 - 144));
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a25);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetwork>(uint64_t a1, CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int data;
  _QWORD *v19;
  uint64_t **v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t **v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  _QWORD **v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  __int128 *v46;
  __int128 v47;
  uint64_t v48;
  __int128 *v49;
  __int128 v50;
  _QWORD *v51;
  __int128 *v52;
  __int128 v53;
  _QWORD *v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  __int128 v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  __int128 *v66;
  __int128 v67;
  __int128 *v68;
  __int128 v69;
  __int128 *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  __int128 v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  __int128 v92;
  __int128 *v93;
  __int128 v94;
  std::string *v95;
  std::string::size_type size;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  __int128 v100;
  std::string *v101;
  __int128 v102;
  std::string *v103;
  __int128 v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  __int128 v110;
  __int128 *v111;
  __int128 v112;
  std::string *v113;
  std::string::size_type v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  __int128 v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  __int128 v124;
  __int128 *v125;
  __int128 v126;
  __int128 *v127;
  __int128 v128;
  std::string *v129;
  __int128 v130;
  std::string *v131;
  __int128 v132;
  std::string *v133;
  __int128 v134;
  std::string *v135;
  __int128 v136;
  _QWORD *v137;
  _QWORD *v138;
  CoreML::Specification::NeuralNetworkLayer *v139;
  uint64_t v140;
  _BYTE *v141;
  _QWORD *v142;
  uint64_t **v143;
  _QWORD *v144;
  _QWORD *v145;
  std::string v146;
  std::string v147;
  std::string v148;
  std::string v149;
  std::string v150;
  std::string v151;
  std::string v152;
  uint64_t v153;
  std::string v154;
  std::string v155;
  std::string::size_type v156;
  __int128 v157;
  uint64_t v158;

  CoreML::Result::Result((CoreML::Result *)&v156);
  v6 = *(_QWORD *)(a3 + 32);
  if (v6)
    v7 = (_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v8 = *(int *)(a3 + 24);
  if (!(_DWORD)v8)
  {
LABEL_61:
    CoreML::Result::Result((CoreML::Result *)a1);
    goto LABEL_209;
  }
  v9 = (uint64_t)a2 + 8;
  v143 = (uint64_t **)((char *)a2 + 32);
  v144 = (_QWORD *)((char *)a2 + 16);
  v141 = (char *)a2 + 8;
  v142 = (_QWORD *)((char *)a2 + 40);
  v10 = (uint64_t **)((char *)a2 + 56);
  v145 = (_QWORD *)((char *)a2 + 64);
  v137 = &v7[v8];
  v139 = a2;
  v140 = a1;
  while (1)
  {
    if ((v156 & 0xFFFFFFEF) != 0)
    {
LABEL_92:
      *(_QWORD *)a1 = v156;
      *(_OWORD *)(a1 + 8) = v157;
      *(_QWORD *)(a1 + 24) = v158;
      goto LABEL_93;
    }
    v138 = v7;
    v11 = *v7;
    if (*(_BYTE *)a2)
    {
      v12 = *(int *)(v11 + 72);
      if ((_DWORD)v12)
      {
        if (*(_DWORD *)(v11 + 24) == (_DWORD)v12)
        {
          v13 = 0;
          v14 = *(_QWORD *)(v11 + 80);
          if (v14)
            v15 = v14 + 8;
          else
            v15 = 0;
          v16 = 8 * v12;
          while (1)
          {
            v17 = *(_QWORD *)(v15 + 8 * v13);
            CoreML::validateTensorMessage((CoreML *)&v152, (const CoreML::Specification::Tensor *)*(unsigned int *)(v17 + 16), (const CoreML::Specification::NeuralNetworkLayer *)*(unsigned int *)(v17 + 36), *(_QWORD *)(v11 + 112));
            data = (int)v152.__r_.__value_.__l.__data_;
            v156 = v152.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v158) < 0)
            {
              operator delete((void *)v157);
              data = v156;
            }
            v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
            v158 = v153;
            if ((data & 0xFFFFFFEF) != 0)
              goto LABEL_62;
            v19 = *(_QWORD **)(*(_QWORD *)(v11 + 32) + 8 * v13 + 8);
            if (v144 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(v9, v19))
            {
              v20 = (uint64_t **)v9;
              v21 = *(_DWORD *)(v17 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              if (v21 != *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, v19, (__int128 **)&v152)+ 14))
              {
                v49 = *(__int128 **)(v11 + 112);
                if (*((char *)v49 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v49, *((_QWORD *)v49 + 1));
                }
                else
                {
                  v50 = *v49;
                  v149.__r_.__value_.__r.__words[2] = *((_QWORD *)v49 + 2);
                  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v50;
                }
                v51 = (_QWORD *)v140;
                v89 = std::string::insert(&v149, 0, "Layer '");
                v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
                v150.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v90;
                v89->__r_.__value_.__l.__size_ = 0;
                v89->__r_.__value_.__r.__words[2] = 0;
                v89->__r_.__value_.__r.__words[0] = 0;
                v91 = std::string::append(&v150, "''s input '");
                v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
                v151.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v92;
                v91->__r_.__value_.__l.__size_ = 0;
                v91->__r_.__value_.__r.__words[2] = 0;
                v91->__r_.__value_.__r.__words[0] = 0;
                v93 = *(__int128 **)(*(_QWORD *)(v11 + 32) + 8 * v13 + 8);
                if (*((char *)v93 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)v93, *((_QWORD *)v93 + 1));
                }
                else
                {
                  v94 = *v93;
                  v148.__r_.__value_.__r.__words[2] = *((_QWORD *)v93 + 2);
                  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v94;
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v95 = &v148;
                else
                  v95 = (std::string *)v148.__r_.__value_.__r.__words[0];
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v148.__r_.__value_.__r.__words[2]);
                else
                  size = v148.__r_.__value_.__l.__size_;
                v97 = std::string::append(&v151, (const std::string::value_type *)v95, size);
                v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
                v154.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v98;
                v97->__r_.__value_.__l.__size_ = 0;
                v97->__r_.__value_.__r.__words[2] = 0;
                v97->__r_.__value_.__r.__words[0] = 0;
                v99 = std::string::append(&v154, "' is also an input to the model. However, for this tensor the rank provided in the layer description");
                v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v100;
                v99->__r_.__value_.__l.__size_ = 0;
                v99->__r_.__value_.__r.__words[2] = 0;
                v99->__r_.__value_.__r.__words[0] = 0;
                v101 = std::string::append(&v155, " does not match the one provided in the model description");
                v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v102;
                v101->__r_.__value_.__l.__size_ = 0;
                v101->__r_.__value_.__r.__words[2] = 0;
                v101->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v155.__r_.__value_.__l.__data_);
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v154.__r_.__value_.__l.__data_);
                if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v148.__r_.__value_.__l.__data_);
                if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v151.__r_.__value_.__l.__data_);
                if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v150.__r_.__value_.__l.__data_);
                if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v149.__r_.__value_.__l.__data_);
LABEL_155:
                *v51 = 13;
                std::operator+<char>();
                goto LABEL_207;
              }
              v19 = *(_QWORD **)(*(_QWORD *)(v11 + 32) + 8 * v13 + 8);
            }
            if (v142 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v143, v19))
            {
              v22 = *(_DWORD *)(v17 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v19, (__int128 **)&v152)+ 14) = v22;
            }
            else
            {
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              if (*((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v19, (__int128 **)&v152)+ 14) != *(_DWORD *)(v17 + 36))
              {
                v52 = *(__int128 **)(*(_QWORD *)(v11 + 32) + 8 * v13 + 8);
                if (*((char *)v52 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v52, *((_QWORD *)v52 + 1));
                }
                else
                {
                  v53 = *v52;
                  v154.__r_.__value_.__r.__words[2] = *((_QWORD *)v52 + 2);
                  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v53;
                }
                v54 = (_QWORD *)v140;
                v103 = std::string::insert(&v154, 0, "Inconsistent rank for the blob named '");
                v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v104;
                v103->__r_.__value_.__l.__size_ = 0;
                v103->__r_.__value_.__r.__words[2] = 0;
                v103->__r_.__value_.__r.__words[0] = 0;
                v105 = std::string::append(&v155, "'.");
                v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v106;
                v105->__r_.__value_.__l.__size_ = 0;
                v105->__r_.__value_.__r.__words[2] = 0;
                v105->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v155.__r_.__value_.__l.__data_);
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v154.__r_.__value_.__l.__data_);
                goto LABEL_206;
              }
            }
            ++v13;
            v16 -= 8;
            v9 = (uint64_t)v141;
            if (!v16)
              goto LABEL_25;
          }
        }
        v125 = *(__int128 **)(v11 + 112);
        if (*((char *)v125 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v125, *((_QWORD *)v125 + 1));
        }
        else
        {
          v126 = *v125;
          v154.__r_.__value_.__r.__words[2] = *((_QWORD *)v125 + 2);
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v126;
        }
        v54 = (_QWORD *)v140;
        v129 = std::string::insert(&v154, 0, "Layer '");
        v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v130;
        v129->__r_.__value_.__l.__size_ = 0;
        v129->__r_.__value_.__r.__words[2] = 0;
        v129->__r_.__value_.__r.__words[0] = 0;
        v131 = std::string::append(&v155, "''s input and inputTensors have different lengths");
        v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        v152.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v132;
        v131->__r_.__value_.__l.__size_ = 0;
        v131->__r_.__value_.__r.__words[2] = 0;
        v131->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v155.__r_.__value_.__l.__data_);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        goto LABEL_206;
      }
LABEL_25:
      v23 = *(int *)(v11 + 96);
      if ((_DWORD)v23)
      {
        if (*(_DWORD *)(v11 + 48) == (_DWORD)v23)
        {
          v24 = 0;
          v25 = *(_QWORD *)(v11 + 104);
          if (v25)
            v26 = v25 + 8;
          else
            v26 = 0;
          v27 = 8 * v23;
          while (1)
          {
            v28 = *(_QWORD *)(v26 + 8 * v24);
            CoreML::validateTensorMessage((CoreML *)&v152, (const CoreML::Specification::Tensor *)*(unsigned int *)(v28 + 16), (const CoreML::Specification::NeuralNetworkLayer *)*(unsigned int *)(v28 + 36), *(_QWORD *)(v11 + 112));
            v29 = (int)v152.__r_.__value_.__l.__data_;
            v156 = v152.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v158) < 0)
            {
              operator delete((void *)v157);
              v29 = v156;
            }
            v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
            v158 = v153;
            if ((v29 & 0xFFFFFFEF) != 0)
              break;
            v30 = *(_QWORD **)(*(_QWORD *)(v11 + 56) + 8 * v24 + 8);
            if (v144 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(v9, v30))
            {
              v31 = (uint64_t **)v9;
              v32 = *(_DWORD *)(v28 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              if (v32 != *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, v30, (__int128 **)&v152)+ 14))
              {
                v66 = *(__int128 **)(v11 + 112);
                if (*((char *)v66 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v66, *((_QWORD *)v66 + 1));
                }
                else
                {
                  v67 = *v66;
                  v149.__r_.__value_.__r.__words[2] = *((_QWORD *)v66 + 2);
                  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v67;
                }
                v51 = (_QWORD *)v140;
                v107 = std::string::insert(&v149, 0, "Layer '");
                v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
                v150.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v108;
                v107->__r_.__value_.__l.__size_ = 0;
                v107->__r_.__value_.__r.__words[2] = 0;
                v107->__r_.__value_.__r.__words[0] = 0;
                v109 = std::string::append(&v150, "''s output '");
                v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
                v151.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v110;
                v109->__r_.__value_.__l.__size_ = 0;
                v109->__r_.__value_.__r.__words[2] = 0;
                v109->__r_.__value_.__r.__words[0] = 0;
                v111 = *(__int128 **)(*(_QWORD *)(v11 + 56) + 8 * v24 + 8);
                if (*((char *)v111 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)v111, *((_QWORD *)v111 + 1));
                }
                else
                {
                  v112 = *v111;
                  v148.__r_.__value_.__r.__words[2] = *((_QWORD *)v111 + 2);
                  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v112;
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v113 = &v148;
                else
                  v113 = (std::string *)v148.__r_.__value_.__r.__words[0];
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v114 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
                else
                  v114 = v148.__r_.__value_.__l.__size_;
                v115 = std::string::append(&v151, (const std::string::value_type *)v113, v114);
                v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
                v154.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v116;
                v115->__r_.__value_.__l.__size_ = 0;
                v115->__r_.__value_.__r.__words[2] = 0;
                v115->__r_.__value_.__r.__words[0] = 0;
                v117 = std::string::append(&v154, "' is also an output of the model. However, for this tensor the rank provided in the layer description");
                v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v118;
                v117->__r_.__value_.__l.__size_ = 0;
                v117->__r_.__value_.__r.__words[2] = 0;
                v117->__r_.__value_.__r.__words[0] = 0;
                v119 = std::string::append(&v155, " does not match the one provided in the model description");
                v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v120;
                v119->__r_.__value_.__l.__size_ = 0;
                v119->__r_.__value_.__r.__words[2] = 0;
                v119->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v155.__r_.__value_.__l.__data_);
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v154.__r_.__value_.__l.__data_);
                if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v148.__r_.__value_.__l.__data_);
                if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v151.__r_.__value_.__l.__data_);
                if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v150.__r_.__value_.__l.__data_);
                if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v149.__r_.__value_.__l.__data_);
                goto LABEL_155;
              }
              v30 = *(_QWORD **)(*(_QWORD *)(v11 + 56) + 8 * v24 + 8);
            }
            if (v142 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v143, v30))
            {
              v33 = *(_DWORD *)(v28 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v30, (__int128 **)&v152)+ 14) = v33;
            }
            else
            {
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              if (*((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v30, (__int128 **)&v152)+ 14) != *(_DWORD *)(v28 + 36))
              {
                v68 = *(__int128 **)(*(_QWORD *)(v11 + 56) + 8 * v24 + 8);
                if (*((char *)v68 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v68, *((_QWORD *)v68 + 1));
                }
                else
                {
                  v69 = *v68;
                  v154.__r_.__value_.__r.__words[2] = *((_QWORD *)v68 + 2);
                  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v69;
                }
                v54 = (_QWORD *)v140;
                v121 = std::string::insert(&v154, 0, "Inconsistent rank for the blob named '");
                v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v122;
                v121->__r_.__value_.__l.__size_ = 0;
                v121->__r_.__value_.__r.__words[2] = 0;
                v121->__r_.__value_.__r.__words[0] = 0;
                v123 = std::string::append(&v155, "'.");
                v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v124;
                v123->__r_.__value_.__l.__size_ = 0;
                v123->__r_.__value_.__r.__words[2] = 0;
                v123->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v155.__r_.__value_.__l.__data_);
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v154.__r_.__value_.__l.__data_);
                goto LABEL_206;
              }
            }
            ++v24;
            v27 -= 8;
            v9 = (uint64_t)v141;
            if (!v27)
              goto LABEL_42;
          }
LABEL_62:
          *(_QWORD *)v140 = v156;
          *(_OWORD *)(v140 + 8) = v157;
          *(_QWORD *)(v140 + 24) = v158;
LABEL_93:
          v157 = 0uLL;
          v158 = 0;
          goto LABEL_209;
        }
        v127 = *(__int128 **)(v11 + 112);
        if (*((char *)v127 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v127, *((_QWORD *)v127 + 1));
        }
        else
        {
          v128 = *v127;
          v154.__r_.__value_.__r.__words[2] = *((_QWORD *)v127 + 2);
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v128;
        }
        v133 = std::string::insert(&v154, 0, "Layer '");
        v54 = (_QWORD *)v140;
        v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v134;
        v133->__r_.__value_.__l.__size_ = 0;
        v133->__r_.__value_.__r.__words[2] = 0;
        v133->__r_.__value_.__r.__words[0] = 0;
        v135 = std::string::append(&v155, "''s output and \"outputTensors\" property have different lengths");
        v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
        v152.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v136;
        v135->__r_.__value_.__l.__size_ = 0;
        v135->__r_.__value_.__r.__words[2] = 0;
        v135->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v155.__r_.__value_.__l.__data_);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
LABEL_206:
        *v54 = 13;
        std::operator+<char>();
        goto LABEL_207;
      }
    }
LABEL_42:
    CoreML::NeuralNetworkSpecValidator::validateLayer((CoreML::NeuralNetworkSpecValidator *)&v152, v139);
    v34 = (int)v152.__r_.__value_.__l.__data_;
    v156 = v152.__r_.__value_.__r.__words[0];
    a1 = v140;
    if (SHIBYTE(v158) < 0)
    {
      operator delete((void *)v157);
      v34 = v156;
    }
    v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
    v158 = v153;
    if ((v34 & 0xFFFFFFEF) != 0)
      goto LABEL_92;
    v35 = *(_QWORD *)(v11 + 32);
    v36 = v35 ? (_QWORD **)(v35 + 8) : 0;
    v37 = *(int *)(v11 + 24);
    if ((_DWORD)v37)
      break;
LABEL_52:
    v40 = *(_QWORD *)(v11 + 56);
    if (v40)
      v41 = (uint64_t *)(v40 + 8);
    else
      v41 = 0;
    v42 = *(int *)(v11 + 48);
    if ((_DWORD)v42)
    {
      v43 = 8 * v42;
      while (1)
      {
        v44 = *v41;
        if (v145 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v10, (_QWORD *)*v41)&& *(_DWORD *)(v11 + 140) != 600)
        {
          break;
        }
        v45 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (_QWORD *)v44, v44);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v45 + 7, *(_QWORD **)(v11 + 112), *(_QWORD *)(v11 + 112));
        ++v41;
        v43 -= 8;
        if (!v43)
          goto LABEL_60;
      }
      v48 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (_QWORD *)v44, v44)[7];
      if (*(char *)(v48 + 55) < 0)
        std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(v48 + 32), *(_QWORD *)(v48 + 40));
      else
        v152 = *(std::string *)(v48 + 32);
      v70 = *(__int128 **)(v11 + 112);
      if (*((char *)v70 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)v70, *((_QWORD *)v70 + 1));
      }
      else
      {
        v71 = *v70;
        v147.__r_.__value_.__r.__words[2] = *((_QWORD *)v70 + 2);
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v71;
      }
      v72 = std::string::insert(&v147, 0, "Layer '");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v148, "' produces an output named '");
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v44 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v44, *(_QWORD *)(v44 + 8));
      }
      else
      {
        v76 = *(_OWORD *)v44;
        v146.__r_.__value_.__r.__words[2] = *(_QWORD *)(v44 + 16);
        *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v76;
      }
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v146;
      else
        v77 = (std::string *)v146.__r_.__value_.__r.__words[0];
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      else
        v78 = v146.__r_.__value_.__l.__size_;
      v79 = std::string::append(&v149, (const std::string::value_type *)v77, v78);
      v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v150.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      v81 = std::string::append(&v150, "' which is also an output produced by the layer '");
      v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v151.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = &v152;
      else
        v83 = (std::string *)v152.__r_.__value_.__r.__words[0];
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v84 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
      else
        v84 = v152.__r_.__value_.__l.__size_;
      v85 = std::string::append(&v151, (const std::string::value_type *)v83, v84);
      v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v154.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      v87 = std::string::append(&v154, "'.");
      v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v155.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v151.__r_.__value_.__l.__data_);
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v150.__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v148.__r_.__value_.__l.__data_);
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v147.__r_.__value_.__l.__data_);
      *(_QWORD *)v140 = 13;
      std::operator+<char>();
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      goto LABEL_207;
    }
LABEL_60:
    v7 = v138 + 1;
    a2 = v139;
    if (v138 + 1 == v137)
      goto LABEL_61;
  }
  v38 = 8 * v37;
  while (1)
  {
    v39 = (__int128 *)*v36;
    if (v145 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v10, *v36))break;
    ++v36;
    v38 -= 8;
    if (!v38)
      goto LABEL_52;
  }
  v46 = *(__int128 **)(v11 + 112);
  if (*((char *)v46 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v46, *((_QWORD *)v46 + 1));
  }
  else
  {
    v47 = *v46;
    v150.__r_.__value_.__r.__words[2] = *((_QWORD *)v46 + 2);
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v47;
  }
  v55 = std::string::insert(&v150, 0, "Layer '");
  v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v151.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  v57 = std::string::append(&v151, "' consumes an input named '");
  v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)v39 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v39, *((_QWORD *)v39 + 1));
  }
  else
  {
    v59 = *v39;
    v149.__r_.__value_.__r.__words[2] = *((_QWORD *)v39 + 2);
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v59;
  }
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v60 = &v149;
  else
    v60 = (std::string *)v149.__r_.__value_.__r.__words[0];
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v61 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
  else
    v61 = v149.__r_.__value_.__l.__size_;
  v62 = std::string::append(&v154, (const std::string::value_type *)v60, v61);
  v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v155.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  v64 = std::string::append(&v155, "' which is not present in this network.");
  v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v152.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v154.__r_.__value_.__l.__data_);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  *(_QWORD *)v140 = 13;
  std::operator+<char>();
LABEL_207:
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
LABEL_209:
  if (SHIBYTE(v158) < 0)
    operator delete((void *)v157);
}

void sub_19C9D3914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (*(char *)(v59 - 89) < 0)
    operator delete(*(void **)(v59 - 112));
  _Unwind_Resume(exception_object);
}

void CoreML::Specification::OneHotEncoder::~OneHotEncoder(CoreML::Specification::OneHotEncoder *this)
{
  CoreML::Specification::OneHotEncoder::~OneHotEncoder(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D4E400;
  if (*((_DWORD *)this + 9))
    CoreML::Specification::OneHotEncoder::clear_CategoryType((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::OneHotEncoder::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.OneHotEncoder");
}

CoreML::Specification::OneHotEncoder *CoreML::Specification::OneHotEncoder::New(CoreML::Specification::OneHotEncoder *this)
{
  return CoreML::Specification::OneHotEncoder::New(this, 0);
}

CoreML::Specification::OneHotEncoder *CoreML::Specification::OneHotEncoder::New(CoreML::Specification::OneHotEncoder *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::OneHotEncoder *v3;

  v3 = (CoreML::Specification::OneHotEncoder *)operator new();
  CoreML::Specification::OneHotEncoder::OneHotEncoder(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::OneHotEncoder>(a2, v3);
  return v3;
}

void sub_19C9D3C44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C405CEF57A5);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::OneHotEncoder::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  return CoreML::Specification::OneHotEncoder::clear_CategoryType(this);
}

uint64_t CoreML::Specification::OneHotEncoder::IsInitialized(CoreML::Specification::OneHotEncoder *this)
{
  return 1;
}

uint64_t CoreML::Specification::OneHotEncoder::MergePartialFromCodedStream(CoreML::Specification::OneHotEncoder *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unsigned int v9;
  CoreML::Specification::Int64Vector *v11;
  char *v12;
  int v13;
  CoreML::Specification::StringVector *v14;
  char *v15;
  unint64_t Varint64Fallback;
  BOOL v17;
  char *v18;
  int VarintSizeAsIntFallback;
  char *v20;
  int v21;
  char v22;
  int v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t result;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t Varint32Fallback;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
      }
      else
      {
        v6 = *v5;
        if (*v5 >= 1)
        {
          *(_QWORD *)a2 = v5 + 1;
          v7 = v6 | 0x100000000;
          if ((v7 & 0x100000000) == 0)
            goto LABEL_29;
          goto LABEL_7;
        }
      }
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0)
        goto LABEL_29;
LABEL_7:
      v9 = v7 >> 3;
      if (v7 >> 3 <= 9)
        break;
      if (v9 == 10)
      {
        if (v7 != 80)
          goto LABEL_29;
        v15 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
        {
          Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v22 & 1) == 0)
            return 0;
        }
        else
        {
          Varint64Fallback = *v15;
          *(_QWORD *)a2 = v15 + 1;
        }
        *((_BYTE *)this + 16) = Varint64Fallback != 0;
      }
      else if (v9 == 11 && v7 == 88)
      {
        v12 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          v13 = 0;
        }
        else
        {
          v13 = *v12;
          if ((*v12 & 0x80000000) == 0)
          {
            *(_QWORD *)a2 = v12 + 1;
            goto LABEL_56;
          }
        }
        Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v13);
        v13 = Varint32Fallback;
        if (Varint32Fallback < 0)
          return 0;
LABEL_56:
        *((_DWORD *)this + 5) = v13;
      }
      else
      {
LABEL_29:
        if ((_DWORD)v7)
          v17 = (v7 & 7) == 4;
        else
          v17 = 1;
        if (v17)
          return 1;
        if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
      }
    }
    if (v9 == 1)
      break;
    if (v9 != 2 || v7 != 18)
      goto LABEL_29;
    if (*((_DWORD *)this + 9) == 2)
    {
      v11 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 3);
    }
    else
    {
      CoreML::Specification::OneHotEncoder::clear_CategoryType((uint64_t)this);
      *((_DWORD *)this + 9) = 2;
      v11 = (CoreML::Specification::Int64Vector *)operator new();
      CoreML::Specification::Int64Vector::Int64Vector(v11);
      *((_QWORD *)this + 3) = v11;
    }
    v18 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v18 < 0)
    {
      VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
      if (VarintSizeAsIntFallback < 0)
        return 0;
    }
    else
    {
      VarintSizeAsIntFallback = *v18;
      *(_QWORD *)a2 = v18 + 1;
    }
    v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
    v25 = *((_DWORD *)a2 + 13);
    v26 = __OFSUB__(v25--, 1);
    *((_DWORD *)a2 + 13) = v25;
    if (v25 < 0 != v26)
      return 0;
    v27 = v23;
    result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v11, a2, v24);
    if (!(_DWORD)result)
      return result;
LABEL_52:
    if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v27))
      return 0;
  }
  if (v7 != 10)
    goto LABEL_29;
  if (*((_DWORD *)this + 9) == 1)
  {
    v14 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 3);
  }
  else
  {
    CoreML::Specification::OneHotEncoder::clear_CategoryType((uint64_t)this);
    *((_DWORD *)this + 9) = 1;
    v14 = (CoreML::Specification::StringVector *)operator new();
    CoreML::Specification::StringVector::StringVector(v14);
    *((_QWORD *)this + 3) = v14;
  }
  v20 = *(char **)a2;
  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
  {
    v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
    if (v21 < 0)
      return 0;
  }
  else
  {
    v21 = *v20;
    *(_QWORD *)a2 = v20 + 1;
  }
  v29 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
  v31 = *((_DWORD *)a2 + 13);
  v26 = __OFSUB__(v31--, 1);
  *((_DWORD *)a2 + 13) = v31;
  if (v31 < 0 == v26)
  {
    v27 = v29;
    result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v14, (char **)a2, v30);
    if (!(_DWORD)result)
      return result;
    goto LABEL_52;
  }
  return 0;
}

void sub_19C9D3F6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::OneHotEncoder::ByteSizeLong(CoreML::Specification::OneHotEncoder *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = 2 * *((unsigned __int8 *)this + 16);
  v3 = *((_DWORD *)this + 5);
  if (v3)
  {
    if (v3 < 0)
      v4 = 11;
    else
      v4 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v2 += v4;
  }
  v5 = *((_DWORD *)this + 9);
  if (v5 == 2)
  {
    v6 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 3));
    goto LABEL_10;
  }
  if (v5 == 1)
  {
    v6 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 3));
LABEL_10:
    v2 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 8) = v2;
  return v2;
}

uint64_t CoreML::Specification::OneHotEncoder::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  signed int v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 24), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 2)
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 24), a2, a4);
  if (*(_BYTE *)(v5 + 16))
    this = google::protobuf::internal::WireFormatLite::WriteBool(10, 1u, a2, a4);
  v7 = *(_DWORD *)(v5 + 20);
  if (v7)
    return google::protobuf::internal::WireFormatLite::WriteEnum(11, v7, a2, a4);
  return this;
}

uint64_t CoreML::Specification::OneHotEncoder::GetCachedSize(CoreML::Specification::OneHotEncoder *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CoreML::Specification::OneHotEncoder::clear_CategoryType(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 36);
  if (v2 == 2 || v2 == 1)
  {
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

std::string *CoreML::Specification::OneHotEncoder::MergeFrom(std::string *this, const CoreML::Specification::OneHotEncoder *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  CoreML::Specification::StringVector *v7;
  CoreML::Specification::Int64Vector *v8;
  CoreML::Specification::protobuf_DataStructures_2eproto *v9;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v10;
  CoreML::Specification::protobuf_DataStructures_2eproto *v11;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v12;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_BYTE *)a2 + 16))
    *(_BYTE *)(v3 + 16) = 1;
  v5 = *((_DWORD *)a2 + 5);
  if (v5)
    *(_DWORD *)(v3 + 20) = v5;
  v6 = *((_DWORD *)a2 + 9);
  if (v6 == 2)
  {
    if (*(_DWORD *)(v3 + 36) == 2)
    {
      v8 = *(CoreML::Specification::Int64Vector **)(v3 + 24);
    }
    else
    {
      CoreML::Specification::OneHotEncoder::clear_CategoryType(v3);
      *(_DWORD *)(v3 + 36) = 2;
      v8 = (CoreML::Specification::Int64Vector *)operator new();
      v11 = CoreML::Specification::Int64Vector::Int64Vector(v8);
      *(_QWORD *)(v3 + 24) = v8;
      if (*((_DWORD *)a2 + 9) != 2)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v11);
        v12 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&CoreML::Specification::_Int64Vector_default_instance_;
        return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v8, v12);
      }
    }
    v12 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)a2 + 3);
    return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v8, v12);
  }
  if (v6 == 1)
  {
    if (*(_DWORD *)(v3 + 36) == 1)
    {
      v7 = *(CoreML::Specification::StringVector **)(v3 + 24);
    }
    else
    {
      CoreML::Specification::OneHotEncoder::clear_CategoryType(v3);
      *(_DWORD *)(v3 + 36) = 1;
      v7 = (CoreML::Specification::StringVector *)operator new();
      v9 = CoreML::Specification::StringVector::StringVector(v7);
      *(_QWORD *)(v3 + 24) = v7;
      if (*((_DWORD *)a2 + 9) != 1)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v9);
        v10 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)&CoreML::Specification::_StringVector_default_instance_;
        return CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v7, v10);
      }
    }
    v10 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((_QWORD *)a2 + 3);
    return CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v7, v10);
  }
  return this;
}

void sub_19C9D4290(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

CoreML::Specification::OneHotEncoder *CoreML::Specification::OneHotEncoder::OneHotEncoder(CoreML::Specification::OneHotEncoder *this)
{
  *(_QWORD *)this = &off_1E3D4E400;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::OneHotEncoder *)&CoreML::Specification::_OneHotEncoder_default_instance_)
    CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_19C9D4318(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::OneHotEncoder>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::OneHotEncoder>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::OneHotEncoder>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::CoreMLModels::TextClassifier::~TextClassifier(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  CoreML::Specification::CoreMLModels::TextClassifier::~TextClassifier(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;
  uint64_t v4;
  int v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E3D4D5C0;
  v2 = *((_QWORD *)this + 2);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((__int128 *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1A1AD6260](v4, 0x1012C40EC159624);
  }
  v6 = *((_DWORD *)this + 13);
  if (v6)
  {
    if (v6 == 200)
    {
      v7 = *((_QWORD *)this + 5);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    *((_DWORD *)this + 13) = 0;
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::CoreMLModels::TextClassifier::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.TextClassifier");
}

CoreML::Specification::CoreMLModels::TextClassifier *CoreML::Specification::CoreMLModels::TextClassifier::New(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  return CoreML::Specification::CoreMLModels::TextClassifier::New(this, 0);
}

CoreML::Specification::CoreMLModels::TextClassifier *CoreML::Specification::CoreMLModels::TextClassifier::New(CoreML::Specification::CoreMLModels::TextClassifier *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::TextClassifier *v3;

  v3 = (CoreML::Specification::CoreMLModels::TextClassifier *)operator new();
  CoreML::Specification::CoreMLModels::TextClassifier::TextClassifier(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::TextClassifier>(a2, v3);
  return v3;
}

void sub_19C9D4468(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40C43D3D65);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *(_QWORD *)(this + 24);
  if ((__int128 *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(_DWORD *)(this + 52) == 200)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::IsInitialized(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  return 1;
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::TextClassifier *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  std::string *v14;
  uint64_t result;
  unsigned int *v16;
  std::string::size_type size;
  CoreML::Specification::StringVector *v18;
  char *v19;
  int v20;
  std::string *v21;
  char *v22;
  int VarintSizeAsIntFallback;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  unsigned int TagFallback;
  uint64_t Varint32Fallback;

  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v7 = *(unsigned __int8 **)a2;
      v8 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v8)
      {
        LODWORD(v10) = 0;
LABEL_45:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
        v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v11 & 0x100000000) == 0)
          goto LABEL_46;
        goto LABEL_9;
      }
      v9 = v7 + 1;
      v10 = *v7;
      if ((char)*v7 >= 1)
        break;
      if ((unint64_t)v9 >= v8)
        goto LABEL_45;
      v12 = *v9;
      if ((v10 & ~v12) < 0x80)
        goto LABEL_45;
      *(_QWORD *)a2 = v7 + 2;
      v11 = (v10 + (v12 << 7) - 128) | 0x100000000;
LABEL_9:
      v13 = v11 >> 3;
      if (v11 >> 3 > 0x63)
      {
        if (v13 == 100)
        {
          if (v11 != 34)
            goto LABEL_46;
          v21 = *v5;
          if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v21 = *v5;
          }
          if ((google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v21) & 1) == 0)
            return 0;
        }
        else
        {
          if (v13 != 200 || v11 != 66)
            goto LABEL_46;
          if (*((_DWORD *)this + 13) == 200)
          {
            v18 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 5);
          }
          else
          {
            *((_DWORD *)this + 13) = 200;
            v18 = (CoreML::Specification::StringVector *)operator new();
            CoreML::Specification::StringVector::StringVector(v18);
            *((_QWORD *)this + 5) = v18;
          }
          v22 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
          {
            VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v22;
            *(_QWORD *)a2 = v22 + 1;
          }
          v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
          v26 = *((_DWORD *)a2 + 13);
          v27 = __OFSUB__(v26--, 1);
          *((_DWORD *)a2 + 13) = v26;
          if (v26 < 0 != v27)
            return 0;
          v28 = v24;
          result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v18, (char **)a2, v25);
          if (!(_DWORD)result)
            return result;
          if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
            return 0;
        }
      }
      else if (v13 == 1)
      {
        if (v11 != 8)
          goto LABEL_46;
        v19 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          v20 = 0;
          goto LABEL_53;
        }
        v20 = *v19;
        if (*v19 < 0)
        {
LABEL_53:
          Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v20);
          *((_DWORD *)this + 8) = Varint32Fallback;
          if (Varint32Fallback < 0)
            return 0;
        }
        else
        {
          *((_DWORD *)this + 8) = v20;
          *(_QWORD *)a2 = v19 + 1;
        }
      }
      else
      {
        if (v13 != 10 || v11 != 82)
          goto LABEL_46;
        v14 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v6;
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v14);
        if (!(_DWORD)result)
          return result;
        v16 = (unsigned int *)*v6;
        if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
        {
          v16 = *(unsigned int **)v16;
          size = (*v6)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v16, size, 0, (uint64_t)"CoreML.Specification.CoreMLModels.TextClassifier.language"))return 0;
      }
    }
    *(_QWORD *)a2 = v9;
    v11 = v10 | 0x100000000;
    if ((v11 & 0x100000000) != 0)
      goto LABEL_9;
LABEL_46:
    if (!(_DWORD)v11 || (v11 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v11, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C9D4814(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::ByteSizeLong(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_13:
  v9 = *((_DWORD *)this + 8);
  if (v9)
    v5 += ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (*((_DWORD *)this + 13) == 200)
  {
    v10 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 5));
    v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 12) = v5;
  return v5;
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::SerializeWithCachedSizes(CoreML::Specification::CoreMLModels::TextClassifier *this, google::protobuf::io::CodedOutputStream *a2, unsigned int a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v6 = *((unsigned int *)this + 8);
  if ((_DWORD)v6)
    google::protobuf::internal::WireFormatLite::WriteUInt32(v6, a2, a3, a4);
  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v8 = *(_QWORD *)(result + 8);
    if (!v8)
      goto LABEL_9;
    result = *(_QWORD *)result;
    goto LABEL_8;
  }
  LODWORD(v8) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_8:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v8, 1, (uint64_t)"CoreML.Specification.CoreMLModels.TextClassifier.language");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xAu, *((_QWORD *)this + 2), a2);
  }
LABEL_9:
  v9 = *((_QWORD *)this + 3);
  if ((*(char *)(v9 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v9 + 23))
      goto LABEL_12;
    goto LABEL_11;
  }
  if (*(_QWORD *)(v9 + 8))
LABEL_11:
    result = google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(0x64u, v9, a2);
LABEL_12:
  if (*((_DWORD *)this + 13) == 200)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xC8, *((_QWORD *)this + 5), a2, a4);
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::GetCachedSize(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  return *((unsigned int *)this + 12);
}

void CoreML::Specification::CoreMLModels::TextClassifier::MergeFrom(CoreML::Specification::CoreMLModels::TextClassifier *this, const CoreML::Specification::CoreMLModels::TextClassifier *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  int v9;
  CoreML::Specification::StringVector *v10;
  CoreML::Specification::protobuf_DataStructures_2eproto *v11;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v12;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (__int128 *)*((_QWORD *)this + 2);
  if (v6 != (__int128 *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_19;
  }
  v8 = (__int128 *)*((_QWORD *)this + 3);
  if (v8 != (__int128 *)v7)
  {
    if (v8 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v7);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v7);
  }
LABEL_19:
  v9 = *((_DWORD *)a2 + 8);
  if (v9)
    *((_DWORD *)this + 8) = v9;
  if (*((_DWORD *)a2 + 13) == 200)
  {
    if (*((_DWORD *)this + 13) == 200)
    {
      v10 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 5);
    }
    else
    {
      *((_DWORD *)this + 13) = 200;
      v10 = (CoreML::Specification::StringVector *)operator new();
      v11 = CoreML::Specification::StringVector::StringVector(v10);
      *((_QWORD *)this + 5) = v10;
      if (*((_DWORD *)a2 + 13) != 200)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v11);
        v12 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)&CoreML::Specification::_StringVector_default_instance_;
        goto LABEL_28;
      }
    }
    v12 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((_QWORD *)a2 + 5);
LABEL_28:
    CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v10, v12);
  }
}

void sub_19C9D4BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::TextClassifier *CoreML::Specification::CoreMLModels::TextClassifier::TextClassifier(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  *(_QWORD *)this = &off_1E3D4D5C0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::TextClassifier *)&CoreML::Specification::CoreMLModels::_TextClassifier_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  return this;
}

void sub_19C9D4C20(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::TextClassifier>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::TextClassifier>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::TextClassifier>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::ClassConfidenceThresholding::~ClassConfidenceThresholding(CoreML::Specification::ClassConfidenceThresholding *this)
{
  CoreML::Specification::ClassConfidenceThresholding::~ClassConfidenceThresholding(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D55C88;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::ClassConfidenceThresholding::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ClassConfidenceThresholding");
}

CoreML::Specification::ClassConfidenceThresholding *CoreML::Specification::ClassConfidenceThresholding::New(CoreML::Specification::ClassConfidenceThresholding *this)
{
  return CoreML::Specification::ClassConfidenceThresholding::New(this, 0);
}

CoreML::Specification::ClassConfidenceThresholding *CoreML::Specification::ClassConfidenceThresholding::New(CoreML::Specification::ClassConfidenceThresholding *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::ClassConfidenceThresholding *v3;

  v3 = (CoreML::Specification::ClassConfidenceThresholding *)operator new();
  CoreML::Specification::ClassConfidenceThresholding::ClassConfidenceThresholding(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::ClassConfidenceThresholding>(a2, v3);
  return v3;
}

void sub_19C9D4E04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ClassConfidenceThresholding::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  CoreML::Specification::PrecisionRecallCurve **v3;
  CoreML::Specification::PrecisionRecallCurve *v4;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = (CoreML::Specification::PrecisionRecallCurve **)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v4 = *v3++;
      this = CoreML::Specification::PrecisionRecallCurve::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::ClassConfidenceThresholding::IsInitialized(CoreML::Specification::ClassConfidenceThresholding *this)
{
  return 1;
}

BOOL CoreML::Specification::ClassConfidenceThresholding::MergePartialFromCodedStream(CoreML::Specification::ClassConfidenceThresholding *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  CoreML::Specification::PrecisionRecallCurve *Aligned;
  google::protobuf::Arena *v16;
  google::protobuf::Arena **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int VarintSizeAsIntFallback;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  _BOOL8 result;
  unsigned int TagFallback;

  v5 = (CoreML::Specification::ClassConfidenceThresholding *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *(unsigned __int8 **)a2;
      v7 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 < v7)
        break;
      LODWORD(v9) = 0;
LABEL_34:
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
      v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v10 & 0x100000000) == 0)
        goto LABEL_35;
LABEL_9:
      if (v10 != 34 || (v10 & 0xFFFFFFF8) != 0x320)
        goto LABEL_35;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
        goto LABEL_16;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 >= *v12)
      {
        if (v14 == *((_DWORD *)this + 7))
        {
LABEL_16:
          if (v13 <= v14)
          {
            google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
            v12 = (int *)*((_QWORD *)this + 4);
          }
          v14 = *v12;
        }
        *v12 = v14 + 1;
        v16 = *(google::protobuf::Arena **)v5;
        if (*(_QWORD *)v5)
        {
          CoreML::Specification::PrecisionRecallCurve::PrecisionRecallCurve(Aligned);
          v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
          *v17 = Aligned;
          v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::PrecisionRecallCurve>;
          v18 = (unint64_t *)((char *)v16 + 32);
          do
            v19 = __ldxr(v18);
          while (__stxr((unint64_t)v17, v18));
          v17[2] = (google::protobuf::Arena *)v19;
        }
        else
        {
          Aligned = (CoreML::Specification::PrecisionRecallCurve *)operator new();
          CoreML::Specification::PrecisionRecallCurve::PrecisionRecallCurve(Aligned);
        }
        v20 = *((_QWORD *)this + 4);
        v21 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v21 + 1;
        *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
        goto LABEL_25;
      }
      *((_DWORD *)this + 6) = v13 + 1;
      Aligned = *(CoreML::Specification::PrecisionRecallCurve **)&v12[2 * v13 + 2];
LABEL_25:
      v22 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v22;
        *(_QWORD *)a2 = v22 + 1;
      }
      v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v26 = *((_DWORD *)a2 + 13);
      v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 == v27)
      {
        v28 = v24;
        result = CoreML::Specification::PrecisionRecallCurve::MergePartialFromCodedStream(Aligned, a2, v25);
        if (!result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
          continue;
      }
      return 0;
    }
    v8 = v6 + 1;
    v9 = *v6;
    if ((char)*v6 < 1)
    {
      if ((unint64_t)v8 < v7)
      {
        v11 = *v8;
        if ((v9 & ~v11) >= 0x80)
        {
          *(_QWORD *)a2 = v6 + 2;
          v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
          goto LABEL_9;
        }
      }
      goto LABEL_34;
    }
    *(_QWORD *)a2 = v8;
    v10 = v9 | 0x100000000;
    if ((v10 & 0x100000000) != 0)
      goto LABEL_9;
LABEL_35:
    if (!(_DWORD)v10 || (v10 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C9D50F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ClassConfidenceThresholding::ByteSizeLong(CoreML::Specification::ClassConfidenceThresholding *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int *v5;

  v2 = *((unsigned int *)this + 6);
  v3 = 2 * v2;
  if ((_DWORD)v2)
  {
    v4 = 0;
    do
    {
      v5 = CoreML::Specification::PrecisionRecallCurve::ByteSizeLong(*(CoreML::Specification::PrecisionRecallCurve **)(*((_QWORD *)this + 4) + 8 * v4 + 8));
      v3 += (uint64_t)v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v4;
    }
    while ((_DWORD)v2 != v4);
  }
  *((_DWORD *)this + 10) = v3;
  return v3;
}

uint64_t CoreML::Specification::ClassConfidenceThresholding::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x64, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ClassConfidenceThresholding::GetCachedSize(CoreML::Specification::ClassConfidenceThresholding *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::PrecisionRecallCurve>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

std::string *CoreML::Specification::ClassConfidenceThresholding::MergeFrom(std::string *this, const CoreML::Specification::ClassConfidenceThresholding *a2)
{
  std::string *v3;
  uint64_t v4;
  unsigned int v5;
  const CoreML::Specification::PrecisionRecallCurve **v6;
  unsigned int *v7;
  signed int v8;
  signed int *size;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (const CoreML::Specification::PrecisionRecallCurve **)(*((_QWORD *)a2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::PrecisionRecallCurve>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  return this;
}

std::string *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::PrecisionRecallCurve>::TypeHandler>(std::string *result, std::string **a2, const CoreML::Specification::PrecisionRecallCurve **a3, unsigned int a4, unsigned int a5)
{
  google::protobuf::Arena **v9;
  uint64_t v10;
  const CoreML::Specification::PrecisionRecallCurve **v11;
  std::string **v12;
  const CoreML::Specification::PrecisionRecallCurve *v13;
  const CoreML::Specification::PrecisionRecallCurve *v14;
  std::string *v15;
  BOOL v16;
  int v17;
  google::protobuf::Arena *v18;
  CoreML::Specification::PrecisionRecallCurve **v19;
  const CoreML::Specification::PrecisionRecallCurve **v20;
  const CoreML::Specification::PrecisionRecallCurve *v21;
  CoreML::Specification::PrecisionRecallCurve *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;

  v9 = (google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::PrecisionRecallCurve>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = (CoreML::Specification::PrecisionRecallCurve **)&a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20;
      if (v18)
      {
        CoreML::Specification::PrecisionRecallCurve::PrecisionRecallCurve(Aligned);
        v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
        *v23 = Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::PrecisionRecallCurve>;
        v24 = (unint64_t *)((char *)v18 + 32);
        do
          v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
      }
      else
      {
        Aligned = (CoreML::Specification::PrecisionRecallCurve *)operator new();
        CoreML::Specification::PrecisionRecallCurve::PrecisionRecallCurve(Aligned);
      }
      result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::PrecisionRecallCurve>::Merge(v21, (std::string *)Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_19C9D53BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::PrecisionRecallCurve>::Merge(const CoreML::Specification::PrecisionRecallCurve *a1, std::string *a2)
{
  return CoreML::Specification::PrecisionRecallCurve::MergeFrom(a2, a1);
}

CoreML::Specification::ClassConfidenceThresholding *CoreML::Specification::ClassConfidenceThresholding::ClassConfidenceThresholding(CoreML::Specification::ClassConfidenceThresholding *this)
{
  *(_QWORD *)this = &off_1E3D55C88;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::ClassConfidenceThresholding *)&CoreML::Specification::_ClassConfidenceThresholding_default_instance_)
    CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_19C9D5450(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::ClassConfidenceThresholding>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::ClassConfidenceThresholding>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::ClassConfidenceThresholding>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

char *std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, __int128 **a3)
{
  void **v5;
  char *v6;
  void **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD v15[2];
  char v16;
  uint64_t v17;

  v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v17, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (char *)operator new(0xF0uLL);
    v15[0] = v6;
    v15[1] = a1 + 8;
    v16 = 0;
    v8 = (std::string *)(v6 + 32);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      *((_QWORD *)v6 + 6) = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[56] = 0;
    *((_QWORD *)v6 + 8) = 0;
    v6[72] = 1;
    *((_QWORD *)v6 + 10) = 0;
    v6[88] = 0;
    *((_QWORD *)v6 + 12) = 0;
    v6[104] = 1;
    *((_QWORD *)v6 + 14) = 0;
    v6[120] = 0;
    *((_QWORD *)v6 + 16) = 0;
    v6[136] = 1;
    *((_QWORD *)v6 + 18) = 0;
    v6[152] = 0;
    *((_QWORD *)v6 + 20) = 0;
    v6[168] = 1;
    *((_QWORD *)v6 + 22) = 0;
    v6[184] = 0;
    *((_QWORD *)v6 + 24) = 0;
    v6[200] = 1;
    *((_OWORD *)v6 + 13) = 0u;
    *((_OWORD *)v6 + 14) = 0u;
    v16 = 1;
    v11 = v17;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v11;
    *v7 = v6;
    v12 = (uint64_t *)v6;
    v13 = **(_QWORD **)a1;
    if (v13)
    {
      *(_QWORD *)a1 = v13;
      v12 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v12);
    ++*(_QWORD *)(a1 + 16);
    v15[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
  }
  return v6;
}

void sub_19C9D564C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::ShapeConstraint>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

double CoreML::NeuralNetworkShaper::shapeUnchanged(CoreML::NeuralNetworkShaper *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  char *v3;
  const CoreML::ShapeConstraint *v4;
  std::string *v5;
  CoreML::ShapeConstraint *v6;
  __int128 *v8;

  v3 = (char *)this + 32;
  v8 = *(__int128 **)(*((_QWORD *)a2 + 4) + 8);
  v4 = (const CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, v8, &v8)+ 56);
  v8 = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v5 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, v8, &v8);
  v6 = (CoreML::ShapeConstraint *)&v5[2].__r_.__value_.__r.__words[1];
  std::string::operator=(v5 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  CoreML::ShapeConstraint::copyFrom(v6, v4);
  return CoreML::ShapeConstraint::copyFrom(v4, v6);
}

void CoreML::NeuralNetworkShaper::shapeBroadcastLayer(CoreML::NeuralNetworkShaper *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  char *v3;
  char *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  BOOL hasFixedCHW;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 *v14;
  std::string *v16;
  CoreML::ShapeConstraint *v17;
  const CoreML::ShapeRange *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const CoreML::ShapeRange *v23;
  const CoreML::ShapeRange *v24;
  const CoreML::ShapeRange *v25;
  CoreML::ShapeConstraint *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v3 = (char *)this + 32;
  *(_QWORD *)&v37 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
  v4 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v37, (__int128 **)&v37);
  v5 = *(_OWORD *)(v4 + 72);
  v37 = *(_OWORD *)(v4 + 56);
  v38 = v5;
  v6 = *(_OWORD *)(v4 + 104);
  v35 = *(_OWORD *)(v4 + 88);
  v36 = v6;
  v7 = *(_OWORD *)(v4 + 136);
  v33 = *(_OWORD *)(v4 + 120);
  v34 = v7;
  v8 = *(_OWORD *)(v4 + 168);
  v31 = *(_OWORD *)(v4 + 152);
  v32 = v8;
  v9 = *(_OWORD *)(v4 + 200);
  v29 = *(_OWORD *)(v4 + 184);
  v30 = v9;
  hasFixedCHW = CoreML::ShapeConstraint::hasFixedCHW((CoreML::ShapeConstraint *)(v4 + 56));
  if (*((int *)a2 + 6) >= 2)
  {
    v11 = 2;
    do
    {
      *(_QWORD *)&v27 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8 * v11);
      v12 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (_QWORD *)v27, (__int128 **)&v27);
      v13 = v12;
      v14 = (__int128 *)(v12 + 56);
      hasFixedCHW = hasFixedCHW && CoreML::ShapeConstraint::hasFixedCHW((CoreML::ShapeConstraint *)(v12 + 56));
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v37, v14);
      v37 = v27;
      v38 = v28;
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v35, (__int128 *)(v13 + 88));
      v35 = v27;
      v36 = v28;
      CoreML::ShapeRange::unify((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v33, (uint64_t *)v13 + 15);
      v33 = v27;
      v34 = v28;
      CoreML::ShapeRange::unify((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v31, (uint64_t *)v13 + 19);
      v31 = v27;
      v32 = v28;
      CoreML::ShapeRange::unify((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v29, (uint64_t *)v13 + 23);
      v29 = v27;
      v30 = v28;
    }
    while (v11++ < *((int *)a2 + 6));
  }
  *(_QWORD *)&v27 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
  v16 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (_QWORD *)v27, (__int128 **)&v27);
  v17 = (CoreML::ShapeConstraint *)&v16[2].__r_.__value_.__r.__words[1];
  std::string::operator=(v16 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v16[2].__r_.__value_.__r.__words[1], &v37);
  CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v16[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v27);
  v18 = (const CoreML::ShapeRange *)&v16[3].__r_.__value_.__r.__words[2];
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v16[3].__r_.__value_.__r.__words[2], &v35);
  CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v16[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v27);
  if (hasFixedCHW)
  {
    v27 = v34;
    v19 = CoreML::RangeValue::value((CoreML::RangeValue *)&v27);
    CoreML::ShapeRange::setValue((uint64_t)&v16[5], v19);
    v27 = v32;
    v20 = CoreML::RangeValue::value((CoreML::RangeValue *)&v27);
    CoreML::ShapeRange::setValue((uint64_t)&v16[6].__r_.__value_.__l.__size_, v20);
    v27 = v30;
    v21 = CoreML::RangeValue::value((CoreML::RangeValue *)&v27);
    CoreML::ShapeRange::setValue((uint64_t)&v16[7].__r_.__value_.__r.__words[2], v21);
  }
  else
  {
    CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v16[5], &v33);
    CoreML::ShapeConstraint::updateChannelRange(v17, (const CoreML::ShapeRange *)&v27);
    CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v16[6].__r_.__value_.__r.__words[1], &v31);
    CoreML::ShapeConstraint::updateHeightRange(v17, (const CoreML::ShapeRange *)&v27);
    CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v16[7].__r_.__value_.__r.__words[2], &v29);
    CoreML::ShapeConstraint::updateWidthRange(v17, (const CoreML::ShapeRange *)&v27);
  }
  if (*((int *)a2 + 6) >= 1)
  {
    v22 = 0;
    v23 = (const CoreML::ShapeRange *)&v16[5];
    v24 = (const CoreML::ShapeRange *)&v16[6].__r_.__value_.__r.__words[1];
    v25 = (const CoreML::ShapeRange *)&v16[7].__r_.__value_.__r.__words[2];
    do
    {
      *(_QWORD *)&v27 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8 * v22 + 8);
      v26 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (_QWORD *)v27, (__int128 **)&v27)+ 56);
      CoreML::ShapeConstraint::updateSequenceRange(v26, v17);
      CoreML::ShapeConstraint::updateBatchRange(v26, v18);
      if (!CoreML::ShapeConstraint::hasFixedCHW(v26))
      {
        CoreML::ShapeConstraint::updateChannelRange(v26, v23);
        CoreML::ShapeConstraint::updateHeightRange(v26, v24);
        CoreML::ShapeConstraint::updateWidthRange(v26, v25);
      }
      ++v22;
    }
    while (v22 < *((int *)a2 + 6));
  }
}

_QWORD *std::vector<CoreML::ShapeRange>::vector(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = (char *)operator new(0x80uLL);
  v3 = 0;
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 128;
  do
  {
    v4 = &v2[v3];
    *v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    v4[16] = 1;
    *((_QWORD *)v4 + 3) = 0;
    v3 += 32;
  }
  while (v3 != 128);
  a1[1] = v2 + 128;
  return a1;
}

double CoreML::NeuralNetworkShaper::ProcessLayer(CoreML::NeuralNetworkShaper *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  char *v14;
  const CoreML::ShapeRange *v15;
  std::string *v16;
  const CoreML::ShapeRange *v17;
  __int128 *v18;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v19;
  const CoreML::Specification::ResizeBilinearLayerParams *v20;
  char *v21;
  char *v22;
  CoreML::ShapeConstraint *v23;
  std::string *v24;
  CoreML::ShapeConstraint *v25;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v26;
  const CoreML::Specification::SliceLayerParams *v27;
  char *v28;
  char *v29;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  const CoreML::Specification::PermuteLayerParams *v36;
  char *v37;
  uint64_t v38;
  std::string *v39;
  double result;
  BOOL v41;
  char *v42;
  char *v43;
  std::string *v44;
  CoreML::ShapeConstraint *v45;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  char *v50;
  const CoreML::ShapeRange *v51;
  uint64_t *v52;
  std::string *v53;
  std::string *v54;
  const CoreML::Specification::LoadConstantLayerParams *v55;
  char *v56;
  char *v57;
  std::string *v58;
  CoreML::ShapeConstraint *v59;
  std::string *v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  std::string *v64;
  CoreML::ShapeConstraint *v65;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v66;
  const CoreML::Specification::CropLayerParams *v67;
  char *v68;
  char *v69;
  std::string *v70;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v71;
  uint64_t *v72;
  char *v73;
  char *v74;
  std::string *v75;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v76;
  const CoreML::Specification::EmbeddingLayerParams *v77;
  char *v78;
  char *v79;
  std::string *v80;
  CoreML::ShapeConstraint *v81;
  std::string *v82;
  uint64_t *v83;
  char *v84;
  char *v85;
  std::string *v86;
  CoreML::ShapeConstraint *v87;
  std::string *v88;
  const CoreML::Specification::ReshapeLayerParams *v89;
  char *v90;
  char *v91;
  std::string *v92;
  CoreML::ShapeConstraint *v93;
  std::string *v94;
  uint64_t *v95;
  char *v96;
  char *v97;
  std::string *v98;
  CoreML::ShapeConstraint *v99;
  std::string *v100;
  uint64_t *v101;
  char *v102;
  char *v103;
  CoreML::ShapeConstraint *v104;
  std::string *v105;
  CoreML::ShapeConstraint *v106;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v107;
  const CoreML::Specification::ReduceLayerParams *v108;
  char *v109;
  char *v110;
  std::string *v111;
  CoreML::ShapeConstraint *v112;
  char *v113;
  std::string *v114;
  uint64_t *v115;
  char *v116;
  char *v117;
  CoreML::ShapeConstraint *v118;
  std::string *v119;
  CoreML::ShapeConstraint *v120;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v121;
  const CoreML::Specification::PaddingLayerParams *v122;
  char *v123;
  char *v124;
  char *v125;
  const CoreML::ShapeRange *v126;
  std::string *v127;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v128;
  const CoreML::Specification::CropResizeLayerParams *v129;
  char *v130;
  char *v131;
  CoreML::ShapeConstraint *v132;
  std::string *v133;
  CoreML::ShapeConstraint *v134;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v135;
  const CoreML::Specification::ReorganizeDataLayerParams *v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  const CoreML::ShapeRange *v141;
  std::string *v142;
  CoreML::ShapeConstraint *v143;
  std::string *v144;
  uint64_t *v145;
  char *v146;
  char *v147;
  CoreML::ShapeConstraint *v148;
  std::string *v149;
  CoreML::ShapeConstraint *v150;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v151;
  const CoreML::Specification::UpsampleLayerParams *v152;
  char *v153;
  char *v154;
  CoreML::ShapeConstraint *v155;
  std::string *v156;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v157;
  uint64_t *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t *v161;
  const CoreML::ShapeRange *v162;
  __int128 v163;
  unint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  __int128 v178;
  uint64_t *v179;
  uint64_t v180;
  const CoreML::ShapeRange *v181;
  __int128 *v182;
  const CoreML::ShapeRange *v183;
  const CoreML::ShapeRange *v184;
  uint64_t v185;
  std::string *v186;
  CoreML::ShapeConstraint *v187;
  char *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  char *v200;
  char *v201;
  unint64_t v202;
  uint64_t v203;
  int v204;
  int v205;
  int v206;
  int v207;
  unsigned int v208;
  int v209;
  __int128 v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  const CoreML::ShapeRange *v216;
  _OWORD *v217;
  __int128 v218;
  _OWORD *v219;
  __int128 v220;
  _OWORD *v221;
  __int128 v222;
  _OWORD *v223;
  __int128 v224;
  void *v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  int v230;
  int v231;
  uint64_t v232;
  int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  std::string *v238;
  char *v239;
  std::string *v240;
  uint64_t p_size;
  __int128 v242;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v243;
  const CoreML::ShapeRange *v244;
  const CoreML::ShapeRange *v245;
  const CoreML::ShapeRange *v246;
  const CoreML::ShapeRange *v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t *v251;
  uint64_t *v252;
  void (**v253)(CoreML::Specification::ReduceLayerParams *__hidden);
  char *v254;
  std::string *v255;
  char *v256;
  std::string *v257;
  char *v258;
  std::string *v259;
  char *v260;
  char *v261;
  unint64_t v262;
  uint64_t v263;
  int v264;
  int v265;
  uint64_t v266;
  int v267;
  int v268;
  uint64_t v269;
  int v270;
  int v271;
  int v272;
  int v273;
  void *exception;
  int v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  int v279;
  _OWORD *v280;
  const CoreML::ShapeRange *v281;
  const CoreML::ShapeRange *v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  uint64_t v286;
  _OWORD *v287;
  int v288;
  int v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  unsigned int v295;
  void *v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  int v302;
  int v303;
  int v304;
  std::string::size_type v305;
  int v306;
  std::string::size_type v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  __int128 v311;
  std::string::size_type v312;
  uint64_t v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v316;
  __int128 v317;
  signed int v318;
  uint64_t v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  int v323;
  signed int v324;
  unsigned int v325;
  const CoreML::ShapeRange *v326;
  int v327;
  uint64_t v328;
  __int128 v329;
  int v330;
  signed int v331;
  unsigned int v332;
  int v333;
  uint64_t v334;
  __int128 v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  __int128 v339;
  std::string::size_type v340;
  __int128 v341;
  uint64_t v342;
  uint64_t v343;
  __int128 v344;
  std::string::size_type v345;
  __int128 v346;
  uint64_t v347;
  std::string::size_type size;
  BOOL v349;
  uint64_t v350;
  uint64_t v351;
  std::string::size_type v352;
  unint64_t v353;
  std::string::size_type v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  char v358;
  uint64_t v359;
  uint64_t v360;
  __int128 v361;
  int v362;
  uint64_t v363;
  unint64_t v364;
  int v365;
  unsigned int v366;
  unint64_t v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  unsigned int v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  char v380;
  uint64_t v381;
  uint64_t v382;
  __int128 v383;
  std::string::size_type v384;
  __int128 v385;
  uint64_t v386;
  std::string::size_type v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  void *v392;
  void *v393;
  void *v394;
  unsigned int v395;
  int v396;
  unsigned int v397;
  unsigned int v398;
  int v399;
  _BOOL4 v400;
  int v401;
  int v402;
  int v403;
  _BOOL8 v404;
  uint64_t v405;
  __int128 v406;
  __int128 v407;
  unint64_t v408[2];
  __int128 v409;
  _OWORD v410[2];
  _OWORD v411[2];
  _OWORD v412[2];
  std::string __p;
  _BYTE v414[32];
  _OWORD v415[2];
  __int128 v416;
  char v417;
  uint64_t v418;
  __int128 v419;
  __int128 v420;

  v3 = *((_DWORD *)a2 + 35);
  if (v3 <= 244)
  {
    if (v3 > 179)
    {
      if (v3 > 211)
      {
        if (v3 <= 229)
        {
          if (v3 == 212)
          {
            v123 = (char *)this + 32;
            *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
            v124 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
            *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16);
            v125 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v123, (_QWORD *)v406, (__int128 **)&v406);
            v126 = (const CoreML::ShapeRange *)(v125 + 56);
            *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
            v127 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v123, (_QWORD *)v406, (__int128 **)&v406);
            std::string::operator=(v127 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v127[2].__r_.__value_.__r.__words[1], (__int128 *)(v125 + 56));
            CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v127[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v127[3].__r_.__value_.__r.__words[2], (__int128 *)(v124 + 88));
            CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v127[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v127[5], (__int128 *)(v124 + 120));
            CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)&v127[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
            if (*((_DWORD *)a2 + 35) == 212)
            {
              v129 = (const CoreML::Specification::CropResizeLayerParams *)*((_QWORD *)a2 + 16);
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v128);
              v129 = (const CoreML::Specification::CropResizeLayerParams *)&CoreML::Specification::_CropResizeLayerParams_default_instance_;
            }
            CoreML::Specification::CropResizeLayerParams::CropResizeLayerParams((CoreML::Specification::CropResizeLayerParams *)&v406, v129);
            if ((_DWORD)v407 == 2)
            {
              if (*(_QWORD *)(*((_QWORD *)&v407 + 1) + 8) <= 1uLL)
                v173 = 1;
              else
                v173 = *(_QWORD *)(*((_QWORD *)&v407 + 1) + 8);
              if (*(_QWORD *)(*((_QWORD *)&v407 + 1) + 16) <= 1uLL)
                v174 = 1;
              else
                v174 = *(_QWORD *)(*((_QWORD *)&v407 + 1) + 16);
            }
            else
            {
              v173 = 1;
              v174 = 1;
            }
            CoreML::ShapeRange::setValue((uint64_t)&v127[6].__r_.__value_.__l.__size_, v173);
            CoreML::ShapeRange::setValue((uint64_t)&v127[7].__r_.__value_.__r.__words[2], v174);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)(v124 + 120), (__int128 *)&v127[5]);
            CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v124 + 56), (const CoreML::ShapeRange *)&v419);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, v126, (__int128 *)&v127[2].__r_.__value_.__r.__words[1]);
            CoreML::ShapeConstraint::updateSequenceRange(v126, (const CoreML::ShapeRange *)&v419);
            CoreML::ShapeRange::setValue((uint64_t)(v125 + 88), 1uLL);
            LOBYTE(v419) = 0;
            *((_QWORD *)&v419 + 1) = 4;
            LOBYTE(v420) = 0;
            *((_QWORD *)&v420 + 1) = 5;
            CoreML::ShapeConstraint::updateChannelRange(v126, (const CoreML::ShapeRange *)&v419);
            CoreML::ShapeRange::setValue((uint64_t)(v125 + 184), 1uLL);
            CoreML::ShapeRange::setValue((uint64_t)(v125 + 152), 1uLL);
            CoreML::Specification::CropResizeLayerParams::~CropResizeLayerParams((CoreML::Specification::CropResizeLayerParams *)&v406);
            return result;
          }
          if (v3 == 220)
            return CoreML::NeuralNetworkShaper::shapeUnchanged(this, a2);
        }
        else if (v3 == 230 || v3 == 231 || v3 == 240)
        {
          CoreML::NeuralNetworkShaper::shapeBroadcastLayer(this, a2);
          return result;
        }
      }
      else if (v3 <= 199)
      {
        if (v3 == 180)
          return CoreML::NeuralNetworkShaper::shapeUnchanged(this, a2);
        if (v3 == 190)
        {
          v62 = (char *)this + 32;
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
          v63 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
          v64 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v62, (_QWORD *)v406, (__int128 **)&v406);
          v65 = (CoreML::ShapeConstraint *)&v64[2].__r_.__value_.__r.__words[1];
          std::string::operator=(v64 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v64[2].__r_.__value_.__r.__words[1], (__int128 *)(v63 + 56));
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v64[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v64[3].__r_.__value_.__r.__words[2], (__int128 *)(v63 + 88));
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v64[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v64[5], (__int128 *)(v63 + 120));
          CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)&v64[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v63 + 56), (const CoreML::ShapeRange *)&v64[2].__r_.__value_.__r.__words[1]);
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v63 + 56), (const CoreML::ShapeRange *)&v64[3].__r_.__value_.__r.__words[2]);
          CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v63 + 56), (const CoreML::ShapeRange *)&v64[5]);
          if (*((_DWORD *)a2 + 35) == 190)
          {
            v67 = (const CoreML::Specification::CropLayerParams *)*((_QWORD *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v66);
            v67 = (const CoreML::Specification::CropLayerParams *)&CoreML::Specification::_CropLayerParams_default_instance_;
          }
          CoreML::Specification::CropLayerParams::CropLayerParams((CoreML::Specification::CropLayerParams *)&v406, v67);
          if (*((_DWORD *)a2 + 6) == 1)
          {
            v192 = (uint64_t *)v408[1];
            if (!v408[1])
              v192 = &CoreML::Specification::_BorderAmounts_default_instance_;
            if (*((_DWORD *)v192 + 6) == 2)
            {
              v193 = v192[4];
              v195 = *(_QWORD *)(v193 + 8);
              v194 = *(_QWORD *)(v193 + 16);
              v196 = *(_DWORD *)(v195 + 16);
              v197 = *(_DWORD *)(v195 + 24);
              v198 = *(_DWORD *)(v194 + 16);
              v199 = *(_DWORD *)(v194 + 24);
            }
            else
            {
              v198 = 0;
              v199 = 0;
              v196 = 0;
              v197 = 0;
            }
            v281 = (const CoreML::ShapeRange *)(v63 + 152);
            CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v416, (uint64_t)(v63 + 152), v196);
            CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v419, (uint64_t)&v416, v197);
            CoreML::ShapeConstraint::updateHeightRange(v65, (const CoreML::ShapeRange *)&v419);
            v282 = (const CoreML::ShapeRange *)(v63 + 184);
            CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v416, (uint64_t)v282, v199);
            CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v419, (uint64_t)&v416, v198);
            CoreML::ShapeConstraint::updateWidthRange(v65, (const CoreML::ShapeRange *)&v419);
            LOBYTE(v416) = 0;
            *((_QWORD *)&v416 + 1) = (int)(v196 + v197 + 1);
            v417 = 1;
            v418 = 0;
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, v281, &v416);
            v283 = v420;
            *(_OWORD *)v281 = v419;
            *((_OWORD *)v281 + 1) = v283;
            LOBYTE(v416) = 0;
            *((_QWORD *)&v416 + 1) = (int)(v198 + v199 + 1);
            v417 = 1;
            v418 = 0;
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, v282, &v416);
            v284 = v420;
            *(_OWORD *)v282 = v419;
            *((_OWORD *)v282 + 1) = v284;
          }
          else
          {
            CoreML::ShapeConstraint::updateChannelRange(v65, (const CoreML::ShapeRange *)(v63 + 120));
            *(_QWORD *)&v419 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16);
            v200 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v62, (_QWORD *)v419, (__int128 **)&v419);
            CoreML::ShapeConstraint::updateHeightRange(v65, (const CoreML::ShapeRange *)(v200 + 152));
            *(_QWORD *)&v419 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16);
            v201 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v62, (_QWORD *)v419, (__int128 **)&v419);
            CoreML::ShapeConstraint::updateWidthRange(v65, (const CoreML::ShapeRange *)(v201 + 184));
          }
          CoreML::Specification::CropLayerParams::~CropLayerParams((CoreML::Specification::CropLayerParams *)&v406);
          return result;
        }
      }
      else
      {
        switch(v3)
        {
          case 200:
            v116 = (char *)this + 32;
            *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
            v117 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
            v118 = (CoreML::ShapeConstraint *)(v117 + 56);
            *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
            v119 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v116, (_QWORD *)v406, (__int128 **)&v406);
            v120 = (CoreML::ShapeConstraint *)&v119[2].__r_.__value_.__r.__words[1];
            std::string::operator=(v119 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v119[2].__r_.__value_.__r.__words[1], (__int128 *)(v117 + 56));
            CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v119[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v119[3].__r_.__value_.__r.__words[2], (__int128 *)(v117 + 88));
            CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v119[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
            CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v117 + 56), (const CoreML::ShapeRange *)&v119[2].__r_.__value_.__r.__words[1]);
            CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v117 + 56), (const CoreML::ShapeRange *)&v119[3].__r_.__value_.__r.__words[2]);
            CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v117 + 56), (const CoreML::ShapeRange *)&v119[5]);
            if (*((_DWORD *)a2 + 35) == 200)
            {
              v122 = (const CoreML::Specification::PaddingLayerParams *)*((_QWORD *)a2 + 16);
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v121);
              v122 = (const CoreML::Specification::PaddingLayerParams *)&CoreML::Specification::_PaddingLayerParams_default_instance_;
            }
            CoreML::Specification::PaddingLayerParams::PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)&v406, v122);
            v165 = (uint64_t *)v407;
            if (!(_QWORD)v407)
              v165 = &CoreML::Specification::_BorderAmounts_default_instance_;
            if (*((_DWORD *)v165 + 6) == 2)
            {
              v166 = v165[4];
              v168 = *(_QWORD *)(v166 + 8);
              v167 = *(_QWORD *)(v166 + 16);
              v170 = *(_QWORD *)(v168 + 16);
              v169 = *(_QWORD *)(v168 + 24);
              v172 = *(_QWORD *)(v167 + 16);
              v171 = *(_QWORD *)(v167 + 24);
            }
            else
            {
              v172 = 0;
              v171 = 0;
              v170 = 0;
              v169 = 0;
            }
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)&v119[5], (__int128 *)(v117 + 120));
            CoreML::ShapeConstraint::updateChannelRange(v120, (const CoreML::ShapeRange *)&v419);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v416, (uint64_t)(v117 + 152), v170);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v419, (uint64_t)&v416, v169);
            CoreML::ShapeConstraint::updateHeightRange(v120, (const CoreML::ShapeRange *)&v419);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v416, (uint64_t)(v117 + 184), v171);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v419, (uint64_t)&v416, v172);
            CoreML::ShapeConstraint::updateWidthRange(v120, (const CoreML::ShapeRange *)&v419);
            CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v416, (uint64_t)&v119[6].__r_.__value_.__l.__size_, v170);
            CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v419, (uint64_t)&v416, v169);
            CoreML::ShapeConstraint::updateHeightRange(v118, (const CoreML::ShapeRange *)&v419);
            CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v416, (uint64_t)&v119[7].__r_.__value_.__r.__words[2], v172);
            CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v419, (uint64_t)&v416, v171);
            CoreML::ShapeConstraint::updateWidthRange(v118, (const CoreML::ShapeRange *)&v419);
            CoreML::Specification::PaddingLayerParams::~PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)&v406);
            return result;
          case 210:
            v146 = (char *)this + 32;
            *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
            v147 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
            v148 = (CoreML::ShapeConstraint *)(v147 + 56);
            *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
            v149 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v146, (_QWORD *)v406, (__int128 **)&v406);
            v150 = (CoreML::ShapeConstraint *)&v149[2].__r_.__value_.__r.__words[1];
            std::string::operator=(v149 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v149[2].__r_.__value_.__r.__words[1], (__int128 *)(v147 + 56));
            CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v149[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v149[3].__r_.__value_.__r.__words[2], (__int128 *)(v147 + 88));
            CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v149[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v149[5], (__int128 *)(v147 + 120));
            CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)&v149[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
            CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v147 + 56), (const CoreML::ShapeRange *)&v149[2].__r_.__value_.__r.__words[1]);
            CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v147 + 56), (const CoreML::ShapeRange *)&v149[3].__r_.__value_.__r.__words[2]);
            CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v147 + 56), (const CoreML::ShapeRange *)&v149[5]);
            if (*((_DWORD *)a2 + 35) == 210)
            {
              v152 = (const CoreML::Specification::UpsampleLayerParams *)*((_QWORD *)a2 + 16);
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v151);
              v152 = (const CoreML::Specification::UpsampleLayerParams *)&CoreML::Specification::_UpsampleLayerParams_default_instance_;
            }
            CoreML::Specification::UpsampleLayerParams::UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)&v406, v152);
            if ((_DWORD)v407 == 2)
            {
              if (*(_QWORD *)(*((_QWORD *)&v407 + 1) + 8) <= 1uLL)
                v190 = 1;
              else
                v190 = *(_QWORD *)(*((_QWORD *)&v407 + 1) + 8);
              if (*(_QWORD *)(*((_QWORD *)&v407 + 1) + 16) <= 1uLL)
                v191 = 1;
              else
                v191 = *(_QWORD *)(*((_QWORD *)&v407 + 1) + 16);
            }
            else
            {
              v190 = 1;
              v191 = 1;
            }
            CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v419, (uint64_t)(v147 + 152), v190);
            CoreML::ShapeConstraint::updateHeightRange(v150, (const CoreML::ShapeRange *)&v419);
            CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v419, (uint64_t)(v147 + 184), v191);
            CoreML::ShapeConstraint::updateWidthRange(v150, (const CoreML::ShapeRange *)&v419);
            CoreML::ShapeRange::operator/((uint64_t)&v419, (uint64_t)&v149[6].__r_.__value_.__l.__size_, v190);
            CoreML::ShapeConstraint::updateHeightRange(v148, (const CoreML::ShapeRange *)&v419);
            CoreML::ShapeRange::operator/((uint64_t)&v419, (uint64_t)&v149[7].__r_.__value_.__r.__words[2], v191);
            CoreML::ShapeConstraint::updateWidthRange(v148, (const CoreML::ShapeRange *)&v419);
            CoreML::Specification::UpsampleLayerParams::~UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)&v406);
            return result;
          case 211:
            v13 = (char *)this + 32;
            *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
            v14 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
            v15 = (const CoreML::ShapeRange *)(v14 + 56);
            *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
            v16 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v13, (_QWORD *)v406, (__int128 **)&v406);
            std::string::operator=(v16 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v16[2].__r_.__value_.__r.__words[1], (__int128 *)(v14 + 56));
            CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v16[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
            v17 = (const CoreML::ShapeRange *)(v14 + 88);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v16[3].__r_.__value_.__r.__words[2], (__int128 *)(v14 + 88));
            CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v16[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
            v18 = (__int128 *)(v14 + 120);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v16[5], v18);
            CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)&v16[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
            if (*((_DWORD *)a2 + 35) == 211)
            {
              v20 = (const CoreML::Specification::ResizeBilinearLayerParams *)*((_QWORD *)a2 + 16);
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v19);
              v20 = (const CoreML::Specification::ResizeBilinearLayerParams *)&CoreML::Specification::_ResizeBilinearLayerParams_default_instance_;
            }
            CoreML::Specification::ResizeBilinearLayerParams::ResizeBilinearLayerParams((CoreML::Specification::ResizeBilinearLayerParams *)&v406, v20);
            if ((_DWORD)v407 == 2)
            {
              if (*(_QWORD *)(*((_QWORD *)&v407 + 1) + 8) <= 1uLL)
                v226 = 1;
              else
                v226 = *(_QWORD *)(*((_QWORD *)&v407 + 1) + 8);
              if (*(_QWORD *)(*((_QWORD *)&v407 + 1) + 16) <= 1uLL)
                v227 = 1;
              else
                v227 = *(_QWORD *)(*((_QWORD *)&v407 + 1) + 16);
            }
            else
            {
              v226 = 1;
              v227 = 1;
            }
            CoreML::ShapeRange::setValue((uint64_t)&v16[6].__r_.__value_.__l.__size_, v226);
            CoreML::ShapeRange::setValue((uint64_t)&v16[7].__r_.__value_.__r.__words[2], v227);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, v15, (__int128 *)&v16[2].__r_.__value_.__r.__words[1]);
            CoreML::ShapeConstraint::updateSequenceRange(v15, (const CoreML::ShapeRange *)&v419);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, v17, (__int128 *)&v16[3].__r_.__value_.__r.__words[2]);
            CoreML::ShapeConstraint::updateBatchRange(v15, (const CoreML::ShapeRange *)&v419);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)v18, (__int128 *)&v16[5]);
            CoreML::ShapeConstraint::updateChannelRange(v15, (const CoreML::ShapeRange *)&v419);
            CoreML::Specification::ResizeBilinearLayerParams::~ResizeBilinearLayerParams((CoreML::Specification::ResizeBilinearLayerParams *)&v406);
            return result;
        }
      }
      goto LABEL_472;
    }
    if (v3 > 149)
    {
      if (v3 <= 164)
      {
        if (v3 == 150)
        {
          v73 = (char *)this + 32;
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
          v74 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
          v75 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v73, (_QWORD *)v406, (__int128 **)&v406);
          std::string::operator=(v75 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v75[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v74 + 56));
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v75[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v74 + 88));
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v74 + 56), (const CoreML::ShapeRange *)&v75[2].__r_.__value_.__r.__words[1]);
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v74 + 56), (const CoreML::ShapeRange *)&v75[3].__r_.__value_.__r.__words[2]);
          if (*((_DWORD *)a2 + 35) == 150)
          {
            v77 = (const CoreML::Specification::EmbeddingLayerParams *)*((_QWORD *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v76);
            v77 = (const CoreML::Specification::EmbeddingLayerParams *)&CoreML::Specification::_EmbeddingLayerParams_default_instance_;
          }
          CoreML::Specification::EmbeddingLayerParams::EmbeddingLayerParams((CoreML::Specification::EmbeddingLayerParams *)&v406, v77);
          CoreML::ShapeRange::setValue((uint64_t)(v74 + 120), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v74 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v74 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v75[5], v408[1]);
          CoreML::ShapeRange::setValue((uint64_t)&v75[6].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v75[7].__r_.__value_.__r.__words[2], 1uLL);
          CoreML::Specification::EmbeddingLayerParams::~EmbeddingLayerParams((CoreML::Specification::EmbeddingLayerParams *)&v406);
          return result;
        }
        if (v3 == 160)
          return CoreML::NeuralNetworkShaper::shapeUnchanged(this, a2);
      }
      else if (v3 == 165 || v3 == 170 || v3 == 175)
      {
        return CoreML::NeuralNetworkShaper::shapeUnchanged(this, a2);
      }
      goto LABEL_472;
    }
    if (v3 > 129)
    {
      if (v3 == 130)
        return CoreML::NeuralNetworkShaper::shapeUnchanged(this, a2);
      if (v3 != 140)
        goto LABEL_472;
      v68 = (char *)this + 32;
      *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
      v69 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
      *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
      v70 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v68, (_QWORD *)v406, (__int128 **)&v406);
      std::string::operator=(v70 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v70[2].__r_.__value_.__r.__words[1], (__int128 *)(v69 + 56));
      CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v70[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v70[3].__r_.__value_.__r.__words[2], (__int128 *)(v69 + 88));
      CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v70[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
      CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v69 + 56), (const CoreML::ShapeRange *)&v70[2].__r_.__value_.__r.__words[1]);
      CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v69 + 56), (const CoreML::ShapeRange *)&v70[3].__r_.__value_.__r.__words[2]);
      if (*((_DWORD *)a2 + 35) == 140)
      {
        v72 = (uint64_t *)*((_QWORD *)a2 + 16);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v71);
        v72 = &CoreML::Specification::_InnerProductLayerParams_default_instance_;
      }
      CoreML::ShapeRange::setValue((uint64_t)(v69 + 120), v72[4]);
      CoreML::ShapeRange::setValue((uint64_t)(v69 + 152), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)(v69 + 184), 1uLL);
      v202 = v72[5];
      v203 = (uint64_t)&v70[5];
      goto LABEL_260;
    }
    if (v3 != 100)
    {
      if (v3 != 120)
      {
        if (!v3)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1A1AD5E28](exception, "Layer type not found.");
          goto LABEL_473;
        }
        goto LABEL_472;
      }
      v42 = (char *)this + 32;
      *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
      v43 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
      *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
      v44 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v42, (_QWORD *)v406, (__int128 **)&v406);
      v45 = (CoreML::ShapeConstraint *)&v44[2].__r_.__value_.__r.__words[1];
      std::string::operator=(v44 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v44[2].__r_.__value_.__r.__words[1], (__int128 *)(v43 + 56));
      CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v44[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v44[3].__r_.__value_.__r.__words[2], (__int128 *)(v43 + 88));
      CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v44[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
      CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)&v44[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v43 + 120));
      CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v43 + 56), (const CoreML::ShapeRange *)&v44[2].__r_.__value_.__r.__words[1]);
      CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v43 + 56), (const CoreML::ShapeRange *)&v44[3].__r_.__value_.__r.__words[2]);
      result = CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v43 + 56), (const CoreML::ShapeRange *)&v44[5]);
      if (*((_DWORD *)a2 + 35) == 120)
      {
        v47 = (uint64_t *)*((_QWORD *)a2 + 16);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v46);
        v47 = &CoreML::Specification::_PoolingLayerParams_default_instance_;
      }
      if (*((_DWORD *)v47 + 4) == 2)
      {
        v229 = v47[3];
        v230 = *(_DWORD *)(v229 + 8);
        v231 = *(_DWORD *)(v229 + 16);
      }
      else
      {
        v231 = 3;
        v230 = 3;
      }
      if (*((_DWORD *)v47 + 10) == 2)
      {
        v232 = v47[6];
        v233 = *(_DWORD *)(v232 + 8);
        v234 = *(_DWORD *)(v232 + 16);
      }
      else
      {
        v233 = 1;
        v234 = 1;
      }
      if (*((_BYTE *)v47 + 65))
      {
        CoreML::ShapeRange::setValue((uint64_t)&v44[6].__r_.__value_.__l.__size_, 1uLL);
        v235 = (uint64_t)&v44[7].__r_.__value_.__r.__words[2];
        goto LABEL_262;
      }
      v275 = *((_DWORD *)v47 + 21);
      if (v275 > 30)
      {
        if (v275 != 31)
        {
          if (v275 == 32)
          {
            v276 = v47[9];
            if (*(_DWORD *)(v276 + 16) == 2)
            {
              v277 = *(_QWORD *)(v276 + 24);
              v278 = *(_DWORD *)(v277 + 8);
              v279 = *(_DWORD *)(v277 + 16);
            }
            else
            {
              v279 = 0;
              v278 = 0;
            }
            v400 = (v278 | v279) != 0;
            v403 = v279;
            if (v278 | v279)
            {
              v324 = CoreML::RangeValue::value((CoreML::RangeValue *)(v43 + 152)) - v230 + 2 * (v278 + v233) - 2;
              if (v324 < (int)(v278 + CoreML::RangeValue::value((CoreML::RangeValue *)(v43 + 152))))
                v325 = 0;
              else
                v325 = -1;
            }
            else
            {
              v325 = 0;
            }
            v326 = (const CoreML::ShapeRange *)(v43 + 152);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)v415, (uint64_t)(v43 + 152), 2 * v278 - v230);
            CoreML::ShapeRange::divideAndRoundUp((CoreML::ShapeRange *)&v416, (uint64_t)v415, v233);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v419, (uint64_t)&v416, 1u);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v406, (uint64_t)&v419, v325);
            CoreML::ShapeConstraint::updateHeightRange(v45, (const CoreML::ShapeRange *)&v406);
            v327 = v230 - 2 * v278;
            if (v327 >= 1)
            {
              v328 = CoreML::RangeValue::value((CoreML::RangeValue *)&v44[6].__r_.__value_.__r.__words[1]);
              LOBYTE(v419) = 0;
              *((_QWORD *)&v419 + 1) = v328 + v327 - 1;
              LOBYTE(v420) = 1;
              *((_QWORD *)&v420 + 1) = 0;
              CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)(v43 + 152), &v419);
              v329 = v407;
              *(_OWORD *)v326 = v406;
              *(_OWORD *)(v43 + 168) = v329;
            }
            if (v400)
            {
              v330 = v403;
              v331 = CoreML::RangeValue::value((CoreML::RangeValue *)(v43 + 184)) - v231 + 2 * (v403 + v234) - 2;
              if (v331 < (int)(v403 + CoreML::RangeValue::value((CoreML::RangeValue *)(v43 + 184))))
                v332 = 0;
              else
                v332 = -1;
            }
            else
            {
              v332 = 0;
              v330 = v403;
            }
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)v415, (uint64_t)(v43 + 184), 2 * v330 - v231);
            CoreML::ShapeRange::divideAndRoundUp((CoreML::ShapeRange *)&v416, (uint64_t)v415, v234);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v419, (uint64_t)&v416, 1u);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v406, (uint64_t)&v419, v332);
            result = CoreML::ShapeConstraint::updateWidthRange(v45, (const CoreML::ShapeRange *)&v406);
            v333 = v231 - 2 * v330;
            if (v333 >= 1)
            {
              v334 = CoreML::RangeValue::value((CoreML::RangeValue *)&v44[7].__r_.__value_.__r.__words[2]);
              LOBYTE(v419) = 0;
              *((_QWORD *)&v419 + 1) = v334 + v333 - 1;
              LOBYTE(v420) = 1;
              *((_QWORD *)&v420 + 1) = 0;
              CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, v326, &v419);
              result = *(double *)&v406;
              v335 = v407;
              *(_OWORD *)v326 = v406;
              *(_OWORD *)(v43 + 168) = v335;
            }
          }
          return result;
        }
        CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v416, (uint64_t)(v43 + 152), 1u);
        CoreML::ShapeRange::operator/((uint64_t)&v419, (uint64_t)&v416, v233);
        CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v406, (uint64_t)&v419, 1u);
        CoreML::ShapeConstraint::updateHeightRange(v45, (const CoreML::ShapeRange *)&v406);
        CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v416, (uint64_t)(v43 + 184), 1u);
        v308 = v234;
        goto LABEL_387;
      }
      if (v275 == 30)
      {
        v297 = *(uint64_t **)(v47[9] + 16);
        if (!v297)
          v297 = &CoreML::Specification::_BorderAmounts_default_instance_;
        if (*((_DWORD *)v297 + 6) == 2)
        {
          v298 = v297[4];
          v300 = *(_QWORD *)(v298 + 8);
          v299 = *(_QWORD *)(v298 + 16);
          v402 = *(_DWORD *)(v299 + 16);
          v399 = *(_DWORD *)(v299 + 24);
          v301 = *(_DWORD *)(v300 + 24) + *(_DWORD *)(v300 + 16);
        }
        else
        {
          v402 = 0;
          v399 = 0;
          v301 = 0;
        }
        if (v230 - v301 <= 0)
        {
          v337 = v233;
        }
        else
        {
          if (CoreML::RangeValue::value((CoreML::RangeValue *)&v44[6].__r_.__value_.__r.__words[1]))
            v336 = CoreML::RangeValue::value((CoreML::RangeValue *)&v44[6].__r_.__value_.__r.__words[1]) - 1;
          else
            v336 = 0;
          v337 = v233;
          LOBYTE(v419) = 0;
          *((_QWORD *)&v419 + 1) = v336 * v233 + (v230 - v301);
          LOBYTE(v420) = 1;
          *((_QWORD *)&v420 + 1) = 0;
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)(v43 + 152), &v419);
          v341 = v407;
          *(_OWORD *)(v43 + 152) = v406;
          *(_OWORD *)(v43 + 168) = v341;
        }
        CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v416, (uint64_t)(v43 + 152), v301 - v230);
        CoreML::ShapeRange::operator/((uint64_t)&v419, (uint64_t)&v416, v337);
        CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v406, (uint64_t)&v419, 1u);
        CoreML::ShapeConstraint::updateHeightRange(v45, (const CoreML::ShapeRange *)&v406);
        if (v231 - (v399 + v402) <= 0)
        {
          v343 = v234;
        }
        else
        {
          if (CoreML::RangeValue::value((CoreML::RangeValue *)&v44[7].__r_.__value_.__r.__words[2]))
            v342 = CoreML::RangeValue::value((CoreML::RangeValue *)&v44[7].__r_.__value_.__r.__words[2]) - 1;
          else
            v342 = 0;
          v343 = v234;
          LOBYTE(v419) = 0;
          *((_QWORD *)&v419 + 1) = v342 * v234 + (v231 - (v399 + v402));
          LOBYTE(v420) = 1;
          *((_QWORD *)&v420 + 1) = 0;
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)(v43 + 184), &v419);
          v344 = v407;
          *(_OWORD *)(v43 + 184) = v406;
          *(_OWORD *)(v43 + 200) = v344;
        }
        CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v416, (uint64_t)(v43 + 184), v399 + v402 - v231);
        v308 = v343;
LABEL_387:
        CoreML::ShapeRange::operator/((uint64_t)&v419, (uint64_t)&v416, v308);
LABEL_467:
        CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v406, (uint64_t)&v419, 1u);
        return CoreML::ShapeConstraint::updateWidthRange(v45, (const CoreML::ShapeRange *)&v406);
      }
      if (v275)
        return result;
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](exception, "Pooling padding type not set");
LABEL_473:
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v153 = (char *)this + 32;
    *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
    v154 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
    v155 = (CoreML::ShapeConstraint *)(v154 + 56);
    *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
    v156 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v153, (_QWORD *)v406, (__int128 **)&v406);
    v45 = (CoreML::ShapeConstraint *)&v156[2].__r_.__value_.__r.__words[1];
    std::string::operator=(v156 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
    CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v156[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v154 + 56));
    CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v156[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v154 + 88));
    CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v154 + 56), (const CoreML::ShapeRange *)&v156[2].__r_.__value_.__r.__words[1]);
    CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v154 + 56), (const CoreML::ShapeRange *)&v156[3].__r_.__value_.__r.__words[2]);
    if (*((_DWORD *)a2 + 35) == 100)
    {
      v158 = (uint64_t *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v157);
      v158 = &CoreML::Specification::_ConvolutionLayerParams_default_instance_;
    }
    if (*((_BYTE *)v158 + 152))
    {
      v228 = v158[17];
    }
    else
    {
      v262 = v158[18];
      if (v262 <= 1)
        v262 = 1;
      v228 = v262 * v158[17];
    }
    CoreML::ShapeRange::setValue((uint64_t)(v154 + 120), (int)v228);
    if (*((_DWORD *)v158 + 4) == 2)
    {
      v263 = v158[3];
      v264 = *(_DWORD *)(v263 + 8);
      v265 = *(_DWORD *)(v263 + 16);
    }
    else
    {
      v265 = 3;
      v264 = 3;
    }
    if (*((_DWORD *)v158 + 10) == 2)
    {
      v266 = v158[6];
      v267 = *(_DWORD *)(v266 + 8);
      v268 = *(_DWORD *)(v266 + 16);
    }
    else
    {
      v268 = 1;
      v267 = 1;
    }
    v401 = v268;
    if (*((_DWORD *)v158 + 16) == 2)
    {
      v269 = v158[9];
      v270 = *(_DWORD *)(v269 + 8);
      v271 = *(_DWORD *)(v269 + 16);
    }
    else
    {
      v271 = 1;
      v270 = 1;
    }
    CoreML::ShapeRange::setValue((uint64_t)&v156[5], v158[16]);
    v272 = *((unsigned __int8 *)v158 + 152);
    if (*((_BYTE *)v158 + 152) && *((_DWORD *)v158 + 22) == 2)
    {
      CoreML::ShapeRange::setValue((uint64_t)&v156[6].__r_.__value_.__l.__size_, *(_QWORD *)(v158[12] + 8));
      CoreML::ShapeRange::setValue((uint64_t)&v156[7].__r_.__value_.__r.__words[2], *(_QWORD *)(v158[12] + 16));
      return result;
    }
    v273 = *((_DWORD *)v158 + 43);
    if (v273 != 50)
    {
      if (v273 == 51)
      {
        if (!*((_BYTE *)v158 + 152))
        {
          v309 = 1;
          CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v416, (uint64_t)(v154 + 152), 1u);
          CoreML::ShapeRange::operator/((uint64_t)&v419, (uint64_t)&v416, v267);
          CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v406, (uint64_t)&v419, 1u);
          CoreML::ShapeConstraint::updateHeightRange(v45, (const CoreML::ShapeRange *)&v406);
          v310 = CoreML::RangeValue::value((CoreML::RangeValue *)&v156[6].__r_.__value_.__r.__words[1]);
          LOBYTE(v419) = 0;
          *((_QWORD *)&v419 + 1) = v310;
          LOBYTE(v420) = 1;
          *((_QWORD *)&v420 + 1) = 0;
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)(v154 + 152), &v419);
          v311 = v407;
          *(_OWORD *)(v154 + 152) = v406;
          *(_OWORD *)(v154 + 168) = v311;
          if (v156[7].__r_.__value_.__s.__data_[0])
          {
            v312 = 0;
            v313 = 1;
          }
          else
          {
            v313 = 0;
            v312 = v156[7].__r_.__value_.__l.__size_ * v267;
          }
          *(_QWORD *)&v406 = v313;
          *((_QWORD *)&v406 + 1) = v312;
          CoreML::ShapeConstraint::upperBoundHeight(v155, (const CoreML::RangeValue *)&v406);
          CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v416, (uint64_t)(v154 + 184), 1u);
          CoreML::ShapeRange::operator/((uint64_t)&v419, (uint64_t)&v416, v401);
          CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v406, (uint64_t)&v419, 1u);
          CoreML::ShapeConstraint::updateWidthRange(v45, (const CoreML::ShapeRange *)&v406);
          v338 = CoreML::RangeValue::value((CoreML::RangeValue *)&v156[7].__r_.__value_.__r.__words[2]);
          LOBYTE(v419) = 0;
          *((_QWORD *)&v419 + 1) = v338;
          LOBYTE(v420) = 1;
          *((_QWORD *)&v420 + 1) = 0;
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)(v154 + 184), &v419);
          v339 = v407;
          *(_OWORD *)(v154 + 184) = v406;
          *(_OWORD *)(v154 + 200) = v339;
          if (v156[8].__r_.__value_.__s.__data_[8])
          {
            v340 = 0;
          }
          else
          {
            v309 = 0;
            v340 = v156[8].__r_.__value_.__r.__words[2] * v401;
          }
          *(_QWORD *)&v406 = v309;
          *((_QWORD *)&v406 + 1) = v340;
          return CoreML::ShapeConstraint::upperBoundWidth(v155, (const CoreML::RangeValue *)&v406);
        }
        CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v406, (uint64_t)(v154 + 152), v267);
        CoreML::ShapeConstraint::updateHeightRange(v45, (const CoreML::ShapeRange *)&v406);
        CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v406, (uint64_t)(v154 + 184), v401);
        return CoreML::ShapeConstraint::updateWidthRange(v45, (const CoreML::ShapeRange *)&v406);
      }
      if (v273)
        return result;
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](exception, "Convolution padding type not set");
      goto LABEL_473;
    }
    v288 = v270 * (v264 - 1);
    v289 = v271 * (v265 - 1);
    v290 = *(uint64_t **)(v158[20] + 16);
    if (!v290)
      v290 = &CoreML::Specification::_BorderAmounts_default_instance_;
    if (*((_DWORD *)v290 + 6) == 2)
    {
      v291 = v290[4];
      v293 = *(_QWORD *)(v291 + 8);
      v292 = *(_QWORD *)(v291 + 16);
      v294 = *(_DWORD *)(v293 + 16);
      v295 = *(_DWORD *)(v293 + 24);
      v398 = *(_DWORD *)(v292 + 16);
      v397 = *(_DWORD *)(v292 + 24);
    }
    else
    {
      v398 = 0;
      v397 = 0;
      v295 = 0;
      v294 = 0;
    }
    v302 = v288 + 1;
    v303 = v289 + 1;
    if (!v272)
    {
      v314 = v294 + v295;
      v315 = v302 - v314;
      if ((int)v315 >= 1)
      {
        v396 = v302;
        if (CoreML::RangeValue::value((CoreML::RangeValue *)&v156[6].__r_.__value_.__r.__words[1]))
          v316 = CoreML::RangeValue::value((CoreML::RangeValue *)&v156[6].__r_.__value_.__r.__words[1]) - 1;
        else
          v316 = 0;
        LOBYTE(v419) = 0;
        *((_QWORD *)&v419 + 1) = v316 * v267 + v315;
        LOBYTE(v420) = 1;
        *((_QWORD *)&v420 + 1) = 0;
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)(v154 + 152), &v419);
        v345 = 0;
        v346 = v407;
        *(_OWORD *)(v154 + 152) = v406;
        *(_OWORD *)(v154 + 168) = v346;
        v347 = v156[7].__r_.__value_.__s.__data_[0];
        if (!v156[7].__r_.__value_.__s.__data_[0])
        {
          size = v156[7].__r_.__value_.__l.__size_;
          v349 = size != 0;
          v345 = size - 1;
          if (!v349)
            v345 = 0;
        }
        v350 = v315 + v345 * v267;
        if (v156[7].__r_.__value_.__s.__data_[0])
          v351 = 0;
        else
          v351 = v350;
        *(_QWORD *)&v406 = v347 != 0;
        *((_QWORD *)&v406 + 1) = v351;
        if (!*((_QWORD *)v154 + 21))
        {
          v369 = *((_QWORD *)v154 + 22);
          *(_QWORD *)&v419 = *((_QWORD *)v154 + 21);
          *((_QWORD *)&v419 + 1) = v369;
          if (CoreML::RangeValue::value((CoreML::RangeValue *)&v419) + (((_BYTE)v314 - (_BYTE)v396) & 1))
          {
            if (v347)
              v370 = 0;
            else
              v370 = v350 + 1;
            *(_QWORD *)&v406 = v347 != 0;
            *((_QWORD *)&v406 + 1) = v370;
          }
        }
        CoreML::ShapeConstraint::upperBoundHeight(v155, (const CoreML::RangeValue *)&v406);
        v302 = v396;
      }
      CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v416, (uint64_t)(v154 + 152), v314 - v302);
      CoreML::ShapeRange::operator/((uint64_t)&v419, &v416, v267);
      CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v406, (uint64_t)&v419, 1u);
      CoreML::ShapeConstraint::updateHeightRange(v45, (const CoreML::ShapeRange *)&v406);
      v371 = v397 + v398;
      v372 = v303 - (v397 + v398);
      if ((int)v372 >= 1)
      {
        if (CoreML::RangeValue::value((CoreML::RangeValue *)&v156[7].__r_.__value_.__r.__words[2]))
          v373 = CoreML::RangeValue::value((CoreML::RangeValue *)&v156[7].__r_.__value_.__r.__words[2]) - 1;
        else
          v373 = 0;
        LOBYTE(v419) = 0;
        *((_QWORD *)&v419 + 1) = v373 * v401 + v372;
        LOBYTE(v420) = 1;
        *((_QWORD *)&v420 + 1) = 0;
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)(v154 + 184), &v419);
        v384 = 0;
        v385 = v407;
        *(_OWORD *)(v154 + 184) = v406;
        *(_OWORD *)(v154 + 200) = v385;
        v386 = v156[8].__r_.__value_.__s.__data_[8];
        if (!v156[8].__r_.__value_.__s.__data_[8])
        {
          v387 = v156[8].__r_.__value_.__r.__words[2];
          v349 = v387 != 0;
          v384 = v387 - 1;
          if (!v349)
            v384 = 0;
        }
        v388 = v372 + v384 * v401;
        if (v386)
          v389 = 0;
        else
          v389 = v372 + v384 * v401;
        *(_QWORD *)&v406 = v386 != 0;
        *((_QWORD *)&v406 + 1) = v389;
        if (!*((_QWORD *)v154 + 25))
        {
          v390 = *((_QWORD *)v154 + 26);
          *(_QWORD *)&v419 = *((_QWORD *)v154 + 25);
          *((_QWORD *)&v419 + 1) = v390;
          if (CoreML::RangeValue::value((CoreML::RangeValue *)&v419) + (((_BYTE)v371 - (_BYTE)v303) & 1))
          {
            if (v386)
              v391 = 0;
            else
              v391 = v388 + 1;
            *(_QWORD *)&v406 = v386 != 0;
            *((_QWORD *)&v406 + 1) = v391;
          }
        }
        CoreML::ShapeConstraint::upperBoundWidth(v155, (const CoreML::RangeValue *)&v406);
      }
      CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v416, (uint64_t)(v154 + 184), v371 - v303);
      CoreML::ShapeRange::operator/((uint64_t)&v419, &v416, v401);
      goto LABEL_467;
    }
    v395 = v288 + 1;
    v304 = CoreML::RangeValue::value((CoreML::RangeValue *)&v156[6].__r_.__value_.__r.__words[1]);
    v305 = v156[7].__r_.__value_.__l.__size_;
    v306 = (int)(v294 + v295 + ~v288 + v304) / v267;
    if ((v295 & 0x80000000) != 0)
    {
      if (!v156[7].__r_.__value_.__s.__data_[0])
      {
        v352 = -v295;
        v349 = v305 >= v352;
        v307 = v305 - v352;
        if (!v349)
          v307 = 0;
        goto LABEL_399;
      }
    }
    else if (!v156[7].__r_.__value_.__s.__data_[0])
    {
      v307 = v305 + v295;
LABEL_399:
      v323 = 1;
LABEL_400:
      if ((v294 & 0x80000000) != 0)
      {
        if (v323)
        {
          v354 = -v294;
          v349 = v307 >= v354;
          v355 = v307 - v354;
          if (v349)
            v353 = v355;
          else
            v353 = 0;
LABEL_407:
          if (v288 > -2)
          {
            v356 = 0;
            v357 = v353 - v395;
            if (v353 < v395)
              v357 = 0;
          }
          else
          {
            v356 = 0;
            v357 = v353 + ~v288;
          }
LABEL_412:
          *(_QWORD *)&v406 = v356;
          *((_QWORD *)&v406 + 1) = v357;
          v358 = CoreML::RangeValue::operator/((CoreML::RangeValue *)&v406, v267);
          if (v358)
            v360 = 0;
          else
            v360 = v359 + 1;
          v404 = v358 != 0;
          v405 = v360;
          if ((v306 & 0x80000000) == 0)
          {
            LOBYTE(v419) = 0;
            *((_QWORD *)&v419 + 1) = (v306 + 1);
            LOBYTE(v420) = 1;
            *((_QWORD *)&v420 + 1) = 0;
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)(v154 + 152), &v419);
            v361 = v407;
            *(_OWORD *)(v154 + 152) = v406;
            *(_OWORD *)(v154 + 168) = v361;
          }
          CoreML::ShapeConstraint::upperBoundHeight(v155, (const CoreML::RangeValue *)&v404);
          CoreML::ShapeRange::operator-((CoreML::ShapeRange *)v414, (uint64_t)(v154 + 152), 1u);
          CoreML::ShapeRange::operator*((CoreML::ShapeRange *)v415, (uint64_t)v414, v267);
          CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v416, (uint64_t)v415, v395);
          CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v419, (uint64_t)&v416, v294);
          CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v406, (uint64_t)&v419, v295);
          CoreML::ShapeConstraint::updateHeightRange(v45, (const CoreML::ShapeRange *)&v406);
          v362 = CoreML::RangeValue::value((CoreML::RangeValue *)&v156[7].__r_.__value_.__r.__words[2]);
          v363 = v156[8].__r_.__value_.__s.__data_[8];
          v364 = v156[8].__r_.__value_.__r.__words[2];
          v365 = (int)(v397 + v398 + ~v289 + v362) / v401;
          if ((v398 & 0x80000000) != 0)
          {
            v366 = v289 + 1;
            if (!v363)
            {
              v374 = -v398;
              v349 = v364 >= v374;
              v367 = v364 - v374;
              if (!v349)
                v367 = 0;
              goto LABEL_433;
            }
          }
          else
          {
            v366 = v289 + 1;
            if (!v363)
            {
              v367 = v364 + v398;
LABEL_433:
              v368 = 1;
LABEL_434:
              if ((v397 & 0x80000000) != 0)
              {
                if (v368)
                {
                  v376 = -v397;
                  v349 = v367 >= v376;
                  v377 = v367 - v376;
                  if (v349)
                    v375 = v377;
                  else
                    v375 = 0;
LABEL_441:
                  if (v289 > -2)
                  {
                    v378 = 0;
                    v379 = v375 - v366;
                    if (v375 < v366)
                      v379 = 0;
                  }
                  else
                  {
                    v378 = 0;
                    v379 = v375 + ~v289;
                  }
                  goto LABEL_446;
                }
              }
              else if (v368)
              {
                v375 = v367 + v397;
                goto LABEL_441;
              }
              v379 = 0;
              v378 = 1;
LABEL_446:
              *(_QWORD *)&v406 = v378;
              *((_QWORD *)&v406 + 1) = v379;
              v380 = CoreML::RangeValue::operator/((CoreML::RangeValue *)&v406, v401);
              if (v380)
                v382 = 0;
              else
                v382 = v381 + 1;
              v404 = v380 != 0;
              v405 = v382;
              if ((v365 & 0x80000000) == 0)
              {
                LOBYTE(v419) = 0;
                *((_QWORD *)&v419 + 1) = (v365 + 1);
                LOBYTE(v420) = 1;
                *((_QWORD *)&v420 + 1) = 0;
                CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)(v154 + 184), &v419);
                v383 = v407;
                *(_OWORD *)(v154 + 184) = v406;
                *(_OWORD *)(v154 + 200) = v383;
              }
              CoreML::ShapeConstraint::upperBoundWidth(v155, (const CoreML::RangeValue *)&v404);
              CoreML::ShapeRange::operator-((CoreML::ShapeRange *)v414, (uint64_t)(v154 + 184), 1u);
              CoreML::ShapeRange::operator*((CoreML::ShapeRange *)v415, (uint64_t)v414, v401);
              CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v416, (uint64_t)v415, v366);
              CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v419, (uint64_t)&v416, v397);
              CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v406, (uint64_t)&v419, v398);
              return CoreML::ShapeConstraint::updateWidthRange(v45, (const CoreML::ShapeRange *)&v406);
            }
          }
          v368 = 0;
          v367 = 0;
          goto LABEL_434;
        }
      }
      else if (v323)
      {
        v353 = v307 + v294;
        goto LABEL_407;
      }
      v357 = 0;
      v356 = 1;
      goto LABEL_412;
    }
    v323 = 0;
    v307 = 0;
    goto LABEL_400;
  }
  if (v3 > 319)
  {
    if (v3 <= 399)
    {
      if (v3 <= 339)
      {
        if (v3 == 320)
        {
          v96 = (char *)this + 32;
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
          v97 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
          v98 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v96, (_QWORD *)v406, (__int128 **)&v406);
          v99 = (CoreML::ShapeConstraint *)&v98[2].__r_.__value_.__r.__words[1];
          v100 = std::string::operator=(v98 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
          if (*((_DWORD *)a2 + 35) == 320)
          {
            v101 = (uint64_t *)*((_QWORD *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v100);
            v101 = &CoreML::Specification::_ConcatLayerParams_default_instance_;
          }
          v162 = (const CoreML::ShapeRange *)(v97 + 56);
          if (*((_BYTE *)v101 + 16))
          {
            v163 = *(_OWORD *)(v97 + 72);
            v406 = *(_OWORD *)v162;
            v407 = v163;
            CoreML::ShapeConstraint::updateChannelRange(v99, (const CoreML::ShapeRange *)(v97 + 120));
          }
          else
          {
            v242 = *(_OWORD *)(v97 + 136);
            v406 = *(_OWORD *)(v97 + 120);
            v407 = v242;
            CoreML::ShapeConstraint::updateSequenceRange(v99, v162);
          }
          CoreML::ShapeConstraint::updateBatchRange(v99, (const CoreML::ShapeRange *)(v97 + 88));
          CoreML::ShapeConstraint::updateHeightRange(v99, (const CoreML::ShapeRange *)(v97 + 152));
          CoreML::ShapeConstraint::updateWidthRange(v99, (const CoreML::ShapeRange *)(v97 + 184));
          if (*((int *)a2 + 6) >= 2)
          {
            v244 = (const CoreML::ShapeRange *)&v98[5];
            v245 = (const CoreML::ShapeRange *)&v98[3].__r_.__value_.__r.__words[2];
            v246 = (const CoreML::ShapeRange *)&v98[6].__r_.__value_.__r.__words[1];
            v247 = (const CoreML::ShapeRange *)&v98[7].__r_.__value_.__r.__words[2];
            v248 = 2;
            do
            {
              *(_QWORD *)&v419 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8 * v248);
              v249 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v96, (_QWORD *)v419, (__int128 **)&v419);
              v250 = v249;
              if (*((_DWORD *)a2 + 35) == 320)
              {
                v251 = (uint64_t *)*((_QWORD *)a2 + 16);
              }
              else
              {
                CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v249);
                v251 = &CoreML::Specification::_ConcatLayerParams_default_instance_;
              }
              if (*((_BYTE *)v251 + 16))
              {
                CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v419, (uint64_t)&v406, (__int128 *)(v250 + 56));
                v406 = v419;
                v407 = v420;
                CoreML::ShapeConstraint::updateChannelRange(v99, (const CoreML::ShapeRange *)(v250 + 120));
                CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v250 + 56), v244);
              }
              else
              {
                CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v419, (uint64_t)&v406, (__int128 *)(v250 + 120));
                v406 = v419;
                v407 = v420;
                CoreML::ShapeConstraint::updateSequenceRange(v99, (const CoreML::ShapeRange *)(v250 + 56));
                CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v250 + 56), v99);
              }
              CoreML::ShapeConstraint::updateBatchRange(v99, (const CoreML::ShapeRange *)(v250 + 88));
              CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v250 + 56), v245);
              CoreML::ShapeConstraint::updateHeightRange(v99, (const CoreML::ShapeRange *)(v250 + 152));
              CoreML::ShapeConstraint::updateHeightRange((CoreML::ShapeConstraint *)(v250 + 56), v246);
              CoreML::ShapeConstraint::updateWidthRange(v99, (const CoreML::ShapeRange *)(v250 + 184));
              CoreML::ShapeConstraint::updateWidthRange((CoreML::ShapeConstraint *)(v250 + 56), v247);
              v41 = v248++ < *((int *)a2 + 6);
            }
            while (v41);
          }
          if (*((_DWORD *)a2 + 35) == 320)
          {
            v252 = (uint64_t *)*((_QWORD *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v243);
            v252 = &CoreML::Specification::_ConcatLayerParams_default_instance_;
          }
          if (*((_BYTE *)v252 + 16))
            return CoreML::ShapeConstraint::updateSequenceRange(v99, (const CoreML::ShapeRange *)&v406);
          else
            return CoreML::ShapeConstraint::updateChannelRange(v99, (const CoreML::ShapeRange *)&v406);
        }
        if (v3 == 330)
        {
          v48 = (char *)this + 32;
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
          v49 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
          v50 = v49;
          v51 = (const CoreML::ShapeRange *)(v49 + 56);
          if (*((_DWORD *)a2 + 35) == 330)
          {
            v52 = (uint64_t *)*((_QWORD *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v49);
            v52 = &CoreML::Specification::_SplitLayerParams_default_instance_;
          }
          v180 = v52[2];
          if (*((int *)a2 + 12) >= 1)
          {
            v181 = (const CoreML::ShapeRange *)(v50 + 88);
            v182 = (__int128 *)(v50 + 120);
            v183 = (const CoreML::ShapeRange *)(v50 + 152);
            v184 = (const CoreML::ShapeRange *)(v50 + 184);
            v185 = 1;
            do
            {
              *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8 * v185);
              v186 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v48, (_QWORD *)v406, (__int128 **)&v406);
              v187 = (CoreML::ShapeConstraint *)&v186[2].__r_.__value_.__r.__words[1];
              std::string::operator=(v186 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8 * v185));
              CoreML::ShapeConstraint::updateSequenceRange(v187, v51);
              CoreML::ShapeConstraint::updateBatchRange(v187, v181);
              CoreML::ShapeRange::operator/((uint64_t)&v406, v182, v180);
              CoreML::ShapeConstraint::updateChannelRange(v187, (const CoreML::ShapeRange *)&v406);
              CoreML::ShapeConstraint::updateHeightRange(v187, v183);
              CoreML::ShapeConstraint::updateWidthRange(v187, v184);
              v41 = v185++ < *((int *)a2 + 12);
            }
            while (v41);
          }
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
          v188 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v48, (_QWORD *)v406, (__int128 **)&v406);
          CoreML::ShapeConstraint::updateSequenceRange(v51, (const CoreML::ShapeRange *)(v188 + 56));
          CoreML::ShapeConstraint::updateBatchRange(v51, (const CoreML::ShapeRange *)(v188 + 88));
          CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v406, (uint64_t)(v188 + 120), (int)v180);
          CoreML::ShapeConstraint::updateChannelRange(v51, (const CoreML::ShapeRange *)&v406);
          CoreML::ShapeConstraint::updateHeightRange(v51, (const CoreML::ShapeRange *)(v188 + 152));
          return CoreML::ShapeConstraint::updateWidthRange(v51, (const CoreML::ShapeRange *)(v188 + 184));
        }
        goto LABEL_472;
      }
      if (v3 == 340)
      {
        v78 = (char *)this + 32;
        *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
        v79 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
        *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
        v80 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v78, (_QWORD *)v406, (__int128 **)&v406);
        v81 = (CoreML::ShapeConstraint *)&v80[2].__r_.__value_.__r.__words[1];
        v82 = std::string::operator=(v80 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
        if (*((_DWORD *)a2 + 35) == 340)
        {
          v83 = (uint64_t *)*((_QWORD *)a2 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v82);
          v83 = &CoreML::Specification::_SequenceRepeatLayerParams_default_instance_;
        }
        CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v406, (uint64_t)(v79 + 56), v83[2]);
        CoreML::ShapeConstraint::updateSequenceRange(v81, (const CoreML::ShapeRange *)&v406);
        CoreML::ShapeConstraint::updateBatchRange(v81, (const CoreML::ShapeRange *)(v79 + 88));
        CoreML::ShapeConstraint::updateChannelRange(v81, (const CoreML::ShapeRange *)(v79 + 120));
        CoreML::ShapeConstraint::updateHeightRange(v81, (const CoreML::ShapeRange *)(v79 + 152));
        CoreML::ShapeConstraint::updateWidthRange(v81, (const CoreML::ShapeRange *)(v79 + 184));
        CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v79 + 56), (const CoreML::ShapeRange *)&v80[3].__r_.__value_.__r.__words[2]);
        CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v79 + 56), (const CoreML::ShapeRange *)&v80[5]);
        CoreML::ShapeConstraint::updateHeightRange((CoreML::ShapeConstraint *)(v79 + 56), (const CoreML::ShapeRange *)&v80[6].__r_.__value_.__r.__words[1]);
        return CoreML::ShapeConstraint::updateWidthRange((CoreML::ShapeConstraint *)(v79 + 56), (const CoreML::ShapeRange *)&v80[7].__r_.__value_.__r.__words[2]);
      }
      if (v3 == 345)
      {
        v130 = (char *)this + 32;
        *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
        v131 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
        v132 = (CoreML::ShapeConstraint *)(v131 + 56);
        *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
        v133 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v130, (_QWORD *)v406, (__int128 **)&v406);
        v134 = (CoreML::ShapeConstraint *)&v133[2].__r_.__value_.__r.__words[1];
        std::string::operator=(v133 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
        CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v133[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v131 + 56));
        CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v133[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v131 + 88));
        CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v131 + 56), (const CoreML::ShapeRange *)&v133[2].__r_.__value_.__r.__words[1]);
        CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v131 + 56), (const CoreML::ShapeRange *)&v133[3].__r_.__value_.__r.__words[2]);
        if (*((_DWORD *)a2 + 35) == 345)
        {
          v136 = (const CoreML::Specification::ReorganizeDataLayerParams *)*((_QWORD *)a2 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v135);
          v136 = (const CoreML::Specification::ReorganizeDataLayerParams *)&CoreML::Specification::_ReorganizeDataLayerParams_default_instance_;
        }
        CoreML::Specification::ReorganizeDataLayerParams::ReorganizeDataLayerParams((CoreML::Specification::ReorganizeDataLayerParams *)&v406, v136);
        v175 = v407;
        v176 = (uint64_t)(v131 + 120);
        if (DWORD2(v407))
        {
          CoreML::ShapeRange::operator/((uint64_t)&v419, v176, v407 * v407);
          CoreML::ShapeConstraint::updateChannelRange(v134, (const CoreML::ShapeRange *)&v419);
          CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v419, (uint64_t)(v131 + 152), v175);
          CoreML::ShapeConstraint::updateHeightRange(v134, (const CoreML::ShapeRange *)&v419);
          CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v419, (uint64_t)(v131 + 184), v175);
          CoreML::ShapeConstraint::updateWidthRange(v134, (const CoreML::ShapeRange *)&v419);
          CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v419, (uint64_t)&v133[5], v175 * v175);
          CoreML::ShapeConstraint::updateChannelRange(v132, (const CoreML::ShapeRange *)&v419);
          CoreML::ShapeRange::operator/((uint64_t)&v419, (uint64_t)&v133[6].__r_.__value_.__l.__size_, v175);
          CoreML::ShapeConstraint::updateHeightRange(v132, (const CoreML::ShapeRange *)&v419);
          CoreML::ShapeRange::operator/((uint64_t)&v419, (uint64_t)&v133[7].__r_.__value_.__r.__words[2], v175);
        }
        else
        {
          CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v419, v176, v407 * v407);
          CoreML::ShapeConstraint::updateChannelRange(v134, (const CoreML::ShapeRange *)&v419);
          CoreML::ShapeRange::operator/((uint64_t)&v419, (uint64_t)(v131 + 152), v175);
          CoreML::ShapeConstraint::updateHeightRange(v134, (const CoreML::ShapeRange *)&v419);
          CoreML::ShapeRange::operator/((uint64_t)&v419, (uint64_t)(v131 + 184), v175);
          CoreML::ShapeConstraint::updateWidthRange(v134, (const CoreML::ShapeRange *)&v419);
          CoreML::ShapeRange::operator/((uint64_t)&v419, (uint64_t)&v133[5], v175 * v175);
          CoreML::ShapeConstraint::updateChannelRange(v132, (const CoreML::ShapeRange *)&v419);
          CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v419, (uint64_t)&v133[6].__r_.__value_.__l.__size_, v175);
          CoreML::ShapeConstraint::updateHeightRange(v132, (const CoreML::ShapeRange *)&v419);
          CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v419, (uint64_t)&v133[7].__r_.__value_.__r.__words[2], v175);
        }
        CoreML::ShapeConstraint::updateWidthRange(v132, (const CoreML::ShapeRange *)&v419);
        v253 = &off_1E3D551D8;
        goto LABEL_347;
      }
      if (v3 != 350)
        goto LABEL_472;
      v21 = (char *)this + 32;
      *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
      v22 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
      v23 = (CoreML::ShapeConstraint *)(v22 + 56);
      *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
      v24 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v21, (_QWORD *)v406, (__int128 **)&v406);
      v25 = (CoreML::ShapeConstraint *)&v24[2].__r_.__value_.__r.__words[1];
      std::string::operator=(v24 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
      CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v24[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v22 + 56));
      CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v24[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v22 + 88));
      CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v22 + 56), (const CoreML::ShapeRange *)&v24[2].__r_.__value_.__r.__words[1]);
      CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v22 + 56), (const CoreML::ShapeRange *)&v24[3].__r_.__value_.__r.__words[2]);
      if (*((_DWORD *)a2 + 35) == 350)
      {
        v27 = (const CoreML::Specification::SliceLayerParams *)*((_QWORD *)a2 + 16);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v26);
        v27 = (const CoreML::Specification::SliceLayerParams *)&CoreML::Specification::_SliceLayerParams_default_instance_;
      }
      CoreML::Specification::SliceLayerParams::SliceLayerParams((CoreML::Specification::SliceLayerParams *)&v406, v27);
      v204 = v407;
      v205 = DWORD2(v407);
      v206 = v408[0];
      v207 = v408[1];
      if ((v407 & 0x80000000) != 0 || (v208 = DWORD2(v407), SDWORD2(v407) <= 0))
      {
        if ((v407 & 0x80000000) == 0 || SDWORD2(v407) > 0)
        {
          if (LODWORD(v408[1]))
          {
            if (LODWORD(v408[1]) == 1)
            {
              v280 = v22 + 152;
            }
            else
            {
              if (LODWORD(v408[1]) != 2)
              {
                v394 = __cxa_allocate_exception(0x10uLL);
                MEMORY[0x1A1AD5E28](v394, "Slice layer axis incorrect -- should be caught in validator.");
                __cxa_throw(v394, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              v280 = v22 + 184;
            }
          }
          else
          {
            v280 = v22 + 120;
          }
          v317 = v280[1];
          v415[0] = *v280;
          v415[1] = v317;
          if (SDWORD2(v407) >= 1)
            v204 = -(int)v407;
          if (SDWORD2(v407) < 0)
            v205 = -DWORD2(v407);
          v318 = v205 + v204 + 1;
          CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v416, (uint64_t)v415, v318);
          CoreML::ShapeRange::operator/((uint64_t)&v419, &v416, v206);
          CoreML::ShapeRange::operator+((CoreML::ShapeRange *)v414, (uint64_t)&v419, 1u);
          if (v207)
          {
            if (v207 != 1)
            {
              CoreML::ShapeConstraint::updateChannelRange(v25, (const CoreML::ShapeRange *)(v22 + 120));
              CoreML::ShapeConstraint::updateHeightRange(v25, (const CoreML::ShapeRange *)(v22 + 152));
              CoreML::ShapeConstraint::updateWidthRange(v25, (const CoreML::ShapeRange *)v414);
              CoreML::ShapeConstraint::updateChannelRange(v23, (const CoreML::ShapeRange *)&v24[5]);
              CoreML::ShapeConstraint::updateHeightRange(v23, (const CoreML::ShapeRange *)&v24[6].__r_.__value_.__r.__words[1]);
              v319 = v318;
              v287 = v22 + 184;
              LOBYTE(v416) = 0;
              *((_QWORD *)&v416 + 1) = v319;
              v417 = 1;
              v418 = 0;
              CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)(v22 + 184), &v416);
              goto LABEL_342;
            }
            CoreML::ShapeConstraint::updateChannelRange(v25, (const CoreML::ShapeRange *)(v22 + 120));
            CoreML::ShapeConstraint::updateHeightRange(v25, (const CoreML::ShapeRange *)v414);
            CoreML::ShapeConstraint::updateWidthRange(v25, (const CoreML::ShapeRange *)(v22 + 184));
            CoreML::ShapeConstraint::updateChannelRange(v23, (const CoreML::ShapeRange *)&v24[5]);
            LOBYTE(v416) = 0;
            *((_QWORD *)&v416 + 1) = v318;
            v417 = 1;
            v418 = 0;
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)(v22 + 152), &v416);
            v321 = v420;
            *(_OWORD *)(v22 + 152) = v419;
            *(_OWORD *)(v22 + 168) = v321;
          }
          else
          {
            CoreML::ShapeConstraint::updateChannelRange(v25, (const CoreML::ShapeRange *)v414);
            CoreML::ShapeConstraint::updateHeightRange(v25, (const CoreML::ShapeRange *)(v22 + 152));
            CoreML::ShapeConstraint::updateWidthRange(v25, (const CoreML::ShapeRange *)(v22 + 184));
            LOBYTE(v416) = 0;
            *((_QWORD *)&v416 + 1) = v318;
            v417 = 1;
            v418 = 0;
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)(v22 + 120), &v416);
            v322 = v420;
            *(_OWORD *)(v22 + 120) = v419;
            *(_OWORD *)(v22 + 136) = v322;
            CoreML::ShapeConstraint::updateHeightRange(v23, (const CoreML::ShapeRange *)&v24[6].__r_.__value_.__r.__words[1]);
          }
LABEL_345:
          CoreML::ShapeConstraint::updateWidthRange(v23, (const CoreML::ShapeRange *)&v24[7].__r_.__value_.__r.__words[2]);
          goto LABEL_346;
        }
        v208 = -(int)v407;
      }
      v209 = (DWORD2(v407) + ~(_DWORD)v407) / SLODWORD(v408[0]) + 1;
      if (LODWORD(v408[1]) != 2)
      {
        if (LODWORD(v408[1]) == 1)
        {
          CoreML::ShapeConstraint::updateChannelRange(v25, (const CoreML::ShapeRange *)(v22 + 120));
          CoreML::ShapeRange::setValue((uint64_t)&v24[6].__r_.__value_.__l.__size_, v209);
          CoreML::ShapeConstraint::updateWidthRange(v25, (const CoreML::ShapeRange *)(v22 + 184));
          CoreML::ShapeConstraint::updateChannelRange(v23, (const CoreML::ShapeRange *)&v24[5]);
          LOBYTE(v416) = 0;
          *((_QWORD *)&v416 + 1) = v208;
          v417 = 1;
          v418 = 0;
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)(v22 + 152), &v416);
          v285 = v420;
          *(_OWORD *)(v22 + 152) = v419;
          *(_OWORD *)(v22 + 168) = v285;
        }
        else
        {
          if (LODWORD(v408[1]))
          {
            v393 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1A1AD5E28](v393, "Slice layer axis incorrect -- should be caught in validator.");
            __cxa_throw(v393, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          CoreML::ShapeRange::setValue((uint64_t)&v24[5], v209);
          CoreML::ShapeConstraint::updateHeightRange(v25, (const CoreML::ShapeRange *)(v22 + 152));
          CoreML::ShapeConstraint::updateWidthRange(v25, (const CoreML::ShapeRange *)(v22 + 184));
          LOBYTE(v416) = 0;
          *((_QWORD *)&v416 + 1) = v208;
          v417 = 1;
          v418 = 0;
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)(v22 + 120), &v416);
          v210 = v420;
          *(_OWORD *)(v22 + 120) = v419;
          *(_OWORD *)(v22 + 136) = v210;
          CoreML::ShapeConstraint::updateHeightRange(v23, (const CoreML::ShapeRange *)&v24[6].__r_.__value_.__r.__words[1]);
        }
        goto LABEL_345;
      }
      CoreML::ShapeConstraint::updateChannelRange(v25, (const CoreML::ShapeRange *)(v22 + 120));
      CoreML::ShapeConstraint::updateHeightRange(v25, (const CoreML::ShapeRange *)(v22 + 152));
      CoreML::ShapeRange::setValue((uint64_t)&v24[7].__r_.__value_.__r.__words[2], v209);
      CoreML::ShapeConstraint::updateChannelRange(v23, (const CoreML::ShapeRange *)&v24[5]);
      CoreML::ShapeConstraint::updateHeightRange(v23, (const CoreML::ShapeRange *)&v24[6].__r_.__value_.__r.__words[1]);
      v286 = v208;
      v287 = v22 + 184;
      LOBYTE(v416) = 0;
      *((_QWORD *)&v416 + 1) = v286;
      v417 = 1;
      v418 = 0;
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)(v22 + 184), &v416);
LABEL_342:
      v320 = v420;
      *v287 = v419;
      v287[1] = v320;
LABEL_346:
      v253 = &off_1E3D50378;
      goto LABEL_347;
    }
    if (v3 > 419)
    {
      switch(v3)
      {
        case 420:
          v90 = (char *)this + 32;
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
          v91 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
          v92 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v90, (_QWORD *)v406, (__int128 **)&v406);
          v93 = (CoreML::ShapeConstraint *)&v92[2].__r_.__value_.__r.__words[1];
          v94 = std::string::operator=(v92 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
          if (*((_DWORD *)a2 + 35) == 420)
          {
            v95 = (uint64_t *)*((_QWORD *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v94);
            v95 = &CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_;
          }
          v160 = v95[8];
          CoreML::ShapeRange::setValue((uint64_t)(v91 + 120), v95[7]);
          CoreML::ShapeRange::setValue((uint64_t)(v91 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v91 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v92[5], v160);
          CoreML::ShapeRange::setValue((uint64_t)&v92[6].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v92[7].__r_.__value_.__r.__words[2], 1uLL);
          v161 = (uint64_t *)v95[5];
          if (!v161)
            v161 = &CoreML::Specification::_LSTMParams_default_instance_;
          if (*((_BYTE *)v161 + 20))
            result = CoreML::ShapeConstraint::updateSequenceRange(v93, (const CoreML::ShapeRange *)(v91 + 56));
          else
            CoreML::ShapeRange::setValue((uint64_t)v93, 1uLL);
          if (*((int *)a2 + 6) < 3)
            return result;
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16);
          v237 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v90, (_QWORD *)v406, (__int128 **)&v406);
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 16);
          v238 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v90, (_QWORD *)v406, (__int128 **)&v406);
          std::string::operator=(v238 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 16));
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 24);
          v239 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v90, (_QWORD *)v406, (__int128 **)&v406);
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 24);
          v240 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v90, (_QWORD *)v406, (__int128 **)&v406);
          std::string::operator=(v240 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 24));
          CoreML::ShapeRange::setValue((uint64_t)(v237 + 56), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v237 + 120), v160);
          CoreML::ShapeRange::setValue((uint64_t)(v237 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v237 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v239 + 56), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v239 + 120), v160);
          CoreML::ShapeRange::setValue((uint64_t)(v239 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v239 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v238[2].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v238[5], v160);
          CoreML::ShapeRange::setValue((uint64_t)&v238[6].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v238[7].__r_.__value_.__r.__words[2], 1uLL);
          p_size = (uint64_t)&v240[2].__r_.__value_.__l.__size_;
          break;
        case 430:
          v139 = (char *)this + 32;
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
          v140 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
          v141 = (const CoreML::ShapeRange *)(v140 + 56);
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
          v142 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (_QWORD *)v406, (__int128 **)&v406);
          v143 = (CoreML::ShapeConstraint *)&v142[2].__r_.__value_.__r.__words[1];
          v144 = std::string::operator=(v142 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
          if (*((_DWORD *)a2 + 35) == 430)
          {
            v145 = (uint64_t *)*((_QWORD *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v144);
            v145 = &CoreML::Specification::_BiDirectionalLSTMLayerParams_default_instance_;
          }
          v177 = v145[12];
          v160 = v145[13];
          LOBYTE(v419) = 0;
          *((_QWORD *)&v419 + 1) = 0;
          LOBYTE(v420) = 0;
          *((_QWORD *)&v420 + 1) = 10000;
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, v141, &v419);
          v178 = v407;
          *(_OWORD *)v141 = v406;
          *(_OWORD *)(v140 + 72) = v178;
          CoreML::ShapeRange::setValue((uint64_t)(v140 + 120), v177);
          CoreML::ShapeRange::setValue((uint64_t)(v140 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v140 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v142[5], 2 * v160);
          CoreML::ShapeRange::setValue((uint64_t)&v142[6].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v142[7].__r_.__value_.__r.__words[2], 1uLL);
          v179 = (uint64_t *)v145[11];
          if (!v179)
            v179 = &CoreML::Specification::_LSTMParams_default_instance_;
          if (*((_BYTE *)v179 + 20))
            result = CoreML::ShapeConstraint::updateSequenceRange(v143, v141);
          else
            CoreML::ShapeRange::setValue((uint64_t)v143, 1uLL);
          if (*((int *)a2 + 6) < 5)
            return result;
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16);
          v254 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (_QWORD *)v406, (__int128 **)&v406);
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 16);
          v255 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (_QWORD *)v406, (__int128 **)&v406);
          std::string::operator=(v255 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 16));
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 24);
          v256 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (_QWORD *)v406, (__int128 **)&v406);
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 24);
          v257 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (_QWORD *)v406, (__int128 **)&v406);
          std::string::operator=(v257 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 24));
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 32);
          v258 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (_QWORD *)v406, (__int128 **)&v406);
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 32);
          v259 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (_QWORD *)v406, (__int128 **)&v406);
          std::string::operator=(v259 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 32));
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 40);
          v260 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (_QWORD *)v406, (__int128 **)&v406);
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 40);
          v240 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (_QWORD *)v406, (__int128 **)&v406);
          std::string::operator=(v240 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 40));
          CoreML::ShapeRange::setValue((uint64_t)(v254 + 56), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v254 + 120), v160);
          CoreML::ShapeRange::setValue((uint64_t)(v254 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v254 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v256 + 56), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v256 + 120), v160);
          CoreML::ShapeRange::setValue((uint64_t)(v256 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v256 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v255[2].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v255[5], v160);
          CoreML::ShapeRange::setValue((uint64_t)&v255[6].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v255[7].__r_.__value_.__r.__words[2], 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v257[2].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v257[5], v160);
          CoreML::ShapeRange::setValue((uint64_t)&v257[6].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v257[7].__r_.__value_.__r.__words[2], 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v258 + 56), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v258 + 120), v160);
          CoreML::ShapeRange::setValue((uint64_t)(v258 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v258 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v260 + 56), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v260 + 120), v160);
          CoreML::ShapeRange::setValue((uint64_t)(v260 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v260 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v259[2].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v259[5], v160);
          CoreML::ShapeRange::setValue((uint64_t)&v259[6].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v259[7].__r_.__value_.__r.__words[2], 1uLL);
          p_size = (uint64_t)&v240[2].__r_.__value_.__l.__size_;
          break;
        case 500:
          if (*((int *)a2 + 12) >= 1)
          {
            v37 = (char *)this + 32;
            v38 = 1;
            do
            {
              *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8 * v38);
              v39 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v37, (_QWORD *)v406, (__int128 **)&v406);
              std::string::operator=(v39 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8 * v38));
              v41 = v38++ < *((int *)a2 + 12);
            }
            while (v41);
          }
          return result;
        default:
          goto LABEL_472;
      }
      CoreML::ShapeRange::setValue(p_size, 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)&v240[5], v160);
      CoreML::ShapeRange::setValue((uint64_t)&v240[6].__r_.__value_.__l.__size_, 1uLL);
      v235 = (uint64_t)&v240[7].__r_.__value_.__r.__words[2];
LABEL_262:
      CoreML::ShapeRange::setValue(v235, 1uLL);
      return result;
    }
    if (v3 == 400)
    {
      v109 = (char *)this + 32;
      *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
      v110 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
      *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
      v111 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v109, (_QWORD *)v406, (__int128 **)&v406);
      v112 = (CoreML::ShapeConstraint *)&v111[2].__r_.__value_.__r.__words[1];
      std::string::operator=(v111 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
      *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16);
      v113 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v109, (_QWORD *)v406, (__int128 **)&v406);
      *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 16);
      v70 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v109, (_QWORD *)v406, (__int128 **)&v406);
      v114 = std::string::operator=(v70 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 16));
      if (*((_DWORD *)a2 + 35) == 400)
      {
        v115 = (uint64_t *)*((_QWORD *)a2 + 16);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v114);
        v115 = &CoreML::Specification::_SimpleRecurrentLayerParams_default_instance_;
      }
      v164 = v115[7];
      CoreML::ShapeRange::setValue((uint64_t)(v110 + 120), v115[6]);
      CoreML::ShapeRange::setValue((uint64_t)(v110 + 152), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)(v110 + 184), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)&v111[5], v164);
      CoreML::ShapeRange::setValue((uint64_t)&v111[6].__r_.__value_.__l.__size_, 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)&v111[7].__r_.__value_.__r.__words[2], 1uLL);
      if (*((_BYTE *)v115 + 64))
        CoreML::ShapeConstraint::updateSequenceRange(v112, (const CoreML::ShapeRange *)(v110 + 56));
      else
        CoreML::ShapeRange::setValue((uint64_t)v112, 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)(v113 + 56), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)(v113 + 120), v164);
      CoreML::ShapeRange::setValue((uint64_t)(v113 + 152), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)(v113 + 184), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)&v70[2].__r_.__value_.__l.__size_, 1uLL);
      v203 = (uint64_t)&v70[5];
      v202 = v164;
    }
    else
    {
      if (v3 != 410)
        goto LABEL_472;
      v56 = (char *)this + 32;
      *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
      v57 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
      *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
      v58 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v56, (_QWORD *)v406, (__int128 **)&v406);
      v59 = (CoreML::ShapeConstraint *)&v58[2].__r_.__value_.__r.__words[1];
      v60 = std::string::operator=(v58 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
      if (*((_DWORD *)a2 + 35) == 410)
      {
        v61 = (uint64_t *)*((_QWORD *)a2 + 16);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v60);
        v61 = &CoreML::Specification::_GRULayerParams_default_instance_;
      }
      v189 = v61[15];
      CoreML::ShapeRange::setValue((uint64_t)(v57 + 120), v61[14]);
      CoreML::ShapeRange::setValue((uint64_t)(v57 + 152), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)(v57 + 184), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)&v58[5], v189);
      CoreML::ShapeRange::setValue((uint64_t)&v58[6].__r_.__value_.__l.__size_, 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)&v58[7].__r_.__value_.__r.__words[2], 1uLL);
      if (*((_BYTE *)v61 + 128))
        result = CoreML::ShapeConstraint::updateSequenceRange(v59, (const CoreML::ShapeRange *)(v57 + 56));
      else
        CoreML::ShapeRange::setValue((uint64_t)v59, 1uLL);
      if (*((int *)a2 + 6) < 2)
        return result;
      *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16);
      v261 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v56, (_QWORD *)v406, (__int128 **)&v406);
      *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 16);
      v70 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v56, (_QWORD *)v406, (__int128 **)&v406);
      std::string::operator=(v70 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 16));
      CoreML::ShapeRange::setValue((uint64_t)(v261 + 56), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)(v261 + 120), v189);
      CoreML::ShapeRange::setValue((uint64_t)(v261 + 152), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)(v261 + 184), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)&v70[2].__r_.__value_.__l.__size_, 1uLL);
      v203 = (uint64_t)&v70[5];
      v202 = v189;
    }
LABEL_260:
    CoreML::ShapeRange::setValue(v203, v202);
    goto LABEL_261;
  }
  if (v3 <= 279)
  {
    if (v3 > 259)
    {
      if (v3 != 260 && v3 != 261)
      {
        if (v3 == 270)
        {
          v4 = (char *)this + 32;
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
          v5 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
          *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16);
          v6 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v4, (_QWORD *)v406, (__int128 **)&v406);
          *(_QWORD *)&v419 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
          v7 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v4, (_QWORD *)v419, (__int128 **)&v419);
          v8 = *(_OWORD *)(v7 + 168);
          v411[0] = *(_OWORD *)(v7 + 152);
          v411[1] = v8;
          v9 = *(_OWORD *)(v7 + 200);
          v412[0] = *(_OWORD *)(v7 + 184);
          v412[1] = v9;
          v10 = *(_OWORD *)(v7 + 104);
          *(_OWORD *)v408 = *(_OWORD *)(v7 + 88);
          v409 = v10;
          v11 = *(_OWORD *)(v7 + 136);
          v410[0] = *(_OWORD *)(v7 + 120);
          v410[1] = v11;
          v12 = *(_OWORD *)(v7 + 72);
          v406 = *(_OWORD *)(v7 + 56);
          v407 = v12;
          if (v7[239] < 0)
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v7 + 27), *((_QWORD *)v7 + 28));
          else
            __p = *(std::string *)(v7 + 9);
          std::string::operator=(&__p, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)&v406, (__int128 *)(v5 + 56));
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v406, (const CoreML::ShapeRange *)&v419);
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)v408, (__int128 *)(v5 + 88));
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v406, (const CoreML::ShapeRange *)&v419);
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)&v406, (__int128 *)(v6 + 56));
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v406, (const CoreML::ShapeRange *)&v419);
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)v408, (__int128 *)(v6 + 88));
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v406, (const CoreML::ShapeRange *)&v419);
          CoreML::ShapeRange::setValue((uint64_t)(v5 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v5 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v6 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v6 + 184), 1uLL);
          CoreML::ShapeConstraint::copyFrom((CoreML::ShapeConstraint *)(v5 + 56), (const CoreML::ShapeConstraint *)(v6 + 56));
          CoreML::ShapeConstraint::copyFrom((CoreML::ShapeConstraint *)(v6 + 56), (const CoreML::ShapeConstraint *)(v5 + 56));
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v5 + 56), (const CoreML::ShapeRange *)&v406);
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v5 + 56), (const CoreML::ShapeRange *)v408);
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v6 + 56), (const CoreML::ShapeRange *)&v406);
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v6 + 56), (const CoreML::ShapeRange *)v408);
          CoreML::ShapeRange::setValue((uint64_t)v410, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)v411, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)v412, 1uLL);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            v225 = (void *)__p.__r_.__value_.__r.__words[0];
            goto LABEL_266;
          }
          return result;
        }
        goto LABEL_472;
      }
      return CoreML::NeuralNetworkShaper::shapeUnchanged(this, a2);
    }
    if (v3 == 245 || v3 == 250)
      return CoreML::NeuralNetworkShaper::shapeUnchanged(this, a2);
LABEL_472:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Shape inference not implemented for this layer type.");
    goto LABEL_473;
  }
  if (v3 <= 299)
  {
    if (v3 != 280)
    {
      if (v3 == 290)
      {
        *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
        v53 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
        v54 = std::string::operator=(v53 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
        if (*((_DWORD *)a2 + 35) == 290)
        {
          v55 = (const CoreML::Specification::LoadConstantLayerParams *)*((_QWORD *)a2 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v54);
          v55 = (const CoreML::Specification::LoadConstantLayerParams *)&CoreML::Specification::_LoadConstantLayerParams_default_instance_;
        }
        CoreML::Specification::LoadConstantLayerParams::LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)&v406, v55);
        CoreML::ShapeRange::setValue((uint64_t)&v53[2].__r_.__value_.__l.__size_, 1uLL);
        CoreML::ShapeRange::setValue((uint64_t)&v53[3].__r_.__value_.__r.__words[2], 1uLL);
        CoreML::ShapeRange::setValue((uint64_t)&v53[5], *(_QWORD *)(*((_QWORD *)&v407 + 1) + 8));
        CoreML::ShapeRange::setValue((uint64_t)&v53[6].__r_.__value_.__l.__size_, *(_QWORD *)(*((_QWORD *)&v407 + 1) + 16));
        CoreML::ShapeRange::setValue((uint64_t)&v53[7].__r_.__value_.__r.__words[2], *(_QWORD *)(*((_QWORD *)&v407 + 1) + 24));
        CoreML::Specification::LoadConstantLayerParams::~LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)&v406);
        return result;
      }
      goto LABEL_472;
    }
    v102 = (char *)this + 32;
    *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
    v103 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
    v104 = (CoreML::ShapeConstraint *)(v103 + 56);
    *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
    v105 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v102, (_QWORD *)v406, (__int128 **)&v406);
    v106 = (CoreML::ShapeConstraint *)&v105[2].__r_.__value_.__r.__words[1];
    std::string::operator=(v105 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
    CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v105[2].__r_.__value_.__r.__words[1], (__int128 *)(v103 + 56));
    CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v105[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
    CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v406, (const CoreML::ShapeRange *)&v105[3].__r_.__value_.__r.__words[2], (__int128 *)(v103 + 88));
    CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v105[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
    CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v103 + 56), (const CoreML::ShapeRange *)&v105[2].__r_.__value_.__r.__words[1]);
    CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v103 + 56), (const CoreML::ShapeRange *)&v105[3].__r_.__value_.__r.__words[2]);
    if (*((_DWORD *)a2 + 35) == 280)
    {
      v108 = (const CoreML::Specification::ReduceLayerParams *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v107);
      v108 = (const CoreML::Specification::ReduceLayerParams *)&CoreML::Specification::_ReduceLayerParams_default_instance_;
    }
    CoreML::Specification::ReduceLayerParams::ReduceLayerParams((CoreML::Specification::ReduceLayerParams *)&v406, v108);
    switch(DWORD2(v407))
    {
      case 0:
        CoreML::ShapeRange::setValue((uint64_t)&v105[5], 1uLL);
        goto LABEL_314;
      case 1:
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)&v105[5], (__int128 *)(v103 + 120));
        CoreML::ShapeConstraint::updateChannelRange(v106, (const CoreML::ShapeRange *)&v419);
        CoreML::ShapeConstraint::updateChannelRange(v104, (const CoreML::ShapeRange *)&v105[5]);
LABEL_314:
        CoreML::ShapeRange::setValue((uint64_t)&v105[6].__r_.__value_.__l.__size_, 1uLL);
        goto LABEL_315;
      case 2:
        CoreML::ShapeRange::setValue((uint64_t)&v105[5], 1uLL);
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)&v105[6].__r_.__value_.__r.__words[1], (__int128 *)(v103 + 152));
        CoreML::ShapeConstraint::updateHeightRange(v106, (const CoreML::ShapeRange *)&v419);
        CoreML::ShapeConstraint::updateHeightRange(v104, (const CoreML::ShapeRange *)&v105[6].__r_.__value_.__r.__words[1]);
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)&v105[7].__r_.__value_.__r.__words[2], (__int128 *)(v103 + 184));
        CoreML::ShapeConstraint::updateWidthRange(v106, (const CoreML::ShapeRange *)&v419);
        v104 = (CoreML::ShapeConstraint *)&v105[2].__r_.__value_.__r.__words[1];
        goto LABEL_312;
      case 3:
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)&v105[5], (__int128 *)(v103 + 120));
        CoreML::ShapeConstraint::updateChannelRange(v106, (const CoreML::ShapeRange *)&v419);
        CoreML::ShapeConstraint::updateChannelRange(v104, (const CoreML::ShapeRange *)&v105[5]);
        CoreML::ShapeRange::setValue((uint64_t)&v105[6].__r_.__value_.__l.__size_, 1uLL);
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)&v105[7].__r_.__value_.__r.__words[2], (__int128 *)(v103 + 184));
        CoreML::ShapeConstraint::updateWidthRange(v106, (const CoreML::ShapeRange *)&v419);
LABEL_312:
        CoreML::ShapeConstraint::updateWidthRange(v104, (const CoreML::ShapeRange *)&v105[7].__r_.__value_.__r.__words[2]);
        break;
      case 4:
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)&v105[5], (__int128 *)(v103 + 120));
        CoreML::ShapeConstraint::updateChannelRange(v106, (const CoreML::ShapeRange *)&v419);
        CoreML::ShapeConstraint::updateChannelRange(v104, (const CoreML::ShapeRange *)&v105[5]);
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, (const CoreML::ShapeRange *)&v105[6].__r_.__value_.__r.__words[1], (__int128 *)(v103 + 152));
        CoreML::ShapeConstraint::updateHeightRange(v106, (const CoreML::ShapeRange *)&v419);
        CoreML::ShapeConstraint::updateHeightRange(v104, (const CoreML::ShapeRange *)&v105[6].__r_.__value_.__r.__words[1]);
LABEL_315:
        CoreML::ShapeRange::setValue((uint64_t)&v105[7].__r_.__value_.__r.__words[2], 1uLL);
        break;
      default:
        if (DWORD2(v407) == 0x80000000 || DWORD2(v407) == 0x7FFFFFFF)
        {
          v296 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1A1AD5E28](v296, "Reduce layer axis not set -- should have been caught in validator.");
          __cxa_throw(v296, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        return result;
    }
    v253 = &off_1E3D50E28;
LABEL_347:
    *(_QWORD *)&v406 = v253;
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)&v406 + 1);
    return result;
  }
  if (v3 == 300)
  {
    v84 = (char *)this + 32;
    *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
    v85 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
    *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
    v86 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v84, (_QWORD *)v406, (__int128 **)&v406);
    v87 = (CoreML::ShapeConstraint *)&v86[2].__r_.__value_.__r.__words[1];
    v88 = std::string::operator=(v86 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
    if (*((_DWORD *)a2 + 35) == 300)
    {
      v89 = (const CoreML::Specification::ReshapeLayerParams *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v88);
      v89 = (const CoreML::Specification::ReshapeLayerParams *)&CoreML::Specification::_ReshapeLayerParams_default_instance_;
    }
    CoreML::Specification::ReshapeLayerParams::ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)&v406, v89);
    CoreML::ShapeConstraint::updateBatchRange(v87, (const CoreML::ShapeRange *)(v85 + 88));
    if ((_DWORD)v407 == 3)
    {
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v419, v87, (__int128 *)(v85 + 56));
      CoreML::ShapeConstraint::updateSequenceRange(v87, (const CoreML::ShapeRange *)&v419);
      CoreML::ShapeRange::setValue((uint64_t)&v86[5], *(_QWORD *)(*((_QWORD *)&v407 + 1) + 8));
      CoreML::ShapeRange::setValue((uint64_t)&v86[6].__r_.__value_.__l.__size_, *(_QWORD *)(*((_QWORD *)&v407 + 1) + 16));
      v159 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 24);
    }
    else
    {
      v236 = *(_QWORD *)(*((_QWORD *)&v407 + 1) + 8);
      LOBYTE(v419) = 0;
      *((_QWORD *)&v419 + 1) = v236;
      LOBYTE(v420) = 1;
      *((_QWORD *)&v420 + 1) = 0;
      CoreML::ShapeConstraint::updateSequenceRange(v87, (const CoreML::ShapeRange *)&v419);
      CoreML::ShapeRange::setValue((uint64_t)&v86[5], *(_QWORD *)(*((_QWORD *)&v407 + 1) + 16));
      CoreML::ShapeRange::setValue((uint64_t)&v86[6].__r_.__value_.__l.__size_, *(_QWORD *)(*((_QWORD *)&v407 + 1) + 24));
      v159 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 32);
    }
    CoreML::ShapeRange::setValue((uint64_t)&v86[7].__r_.__value_.__r.__words[2], *v159);
    CoreML::Specification::ReshapeLayerParams::~ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)&v406);
    return result;
  }
  if (v3 == 301)
  {
    v137 = (char *)this + 32;
    *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
    v138 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
    *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
    v70 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v137, (_QWORD *)v406, (__int128 **)&v406);
    std::string::operator=(v70 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
    CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v70[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v138 + 56));
    CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v70[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v138 + 88));
    CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v138 + 56), (const CoreML::ShapeRange *)&v70[2].__r_.__value_.__r.__words[1]);
    CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v138 + 56), (const CoreML::ShapeRange *)&v70[3].__r_.__value_.__r.__words[2]);
    CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v419, (uint64_t)(v138 + 120), (__int128 *)(v138 + 152));
    CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v406, (uint64_t)&v419, (__int128 *)(v138 + 184));
    CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)&v70[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v406);
LABEL_261:
    CoreML::ShapeRange::setValue((uint64_t)&v70[6].__r_.__value_.__l.__size_, 1uLL);
    v235 = (uint64_t)&v70[7].__r_.__value_.__r.__words[2];
    goto LABEL_262;
  }
  if (v3 != 310)
    goto LABEL_472;
  v28 = (char *)this + 32;
  *(_QWORD *)&v406 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
  v29 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (_QWORD *)v406, (__int128 **)&v406);
  v30 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<CoreML::ShapeRange>::vector(&v419);
  v31 = (_OWORD *)v419;
  v32 = *(_OWORD *)(v29 + 72);
  *(_OWORD *)v419 = *(_OWORD *)(v29 + 56);
  v31[1] = v32;
  v33 = *(_OWORD *)(v29 + 136);
  v31[2] = *(_OWORD *)(v29 + 120);
  v31[3] = v33;
  v34 = *(_OWORD *)(v29 + 168);
  v31[4] = *(_OWORD *)(v29 + 152);
  v31[5] = v34;
  v35 = *(_OWORD *)(v29 + 200);
  v31[6] = *(_OWORD *)(v29 + 184);
  v31[7] = v35;
  if (*((_DWORD *)a2 + 35) == 310)
  {
    v36 = (const CoreML::Specification::PermuteLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v30);
    v36 = (const CoreML::Specification::PermuteLayerParams *)&CoreML::Specification::_PermuteLayerParams_default_instance_;
  }
  CoreML::Specification::PermuteLayerParams::PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)&v406, v36);
  v211 = *(_QWORD *)(*((_QWORD *)&v407 + 1) + 8);
  if (v211 > 3
    || (v212 = *(_QWORD *)(*((_QWORD *)&v407 + 1) + 16), v212 > 3)
    || (v213 = *(_QWORD *)(*((_QWORD *)&v407 + 1) + 24), v213 > 3)
    || (v214 = *(_QWORD *)(*((_QWORD *)&v407 + 1) + 32), v214 >= 4))
  {
    v392 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v392, "Ranges axis index is out of bounds in shapePermuteLayer.");
    __cxa_throw(v392, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)&v416 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
  v215 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v28, (_QWORD *)v416, (__int128 **)&v416);
  std::string::operator=((std::string *)v215 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  std::string::operator=((std::string *)v215 + 9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v215 + 56), (const CoreML::ShapeRange *)(v419 + 32 * v211));
  CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v215 + 56), (const CoreML::ShapeRange *)(v419 + 32 * v212));
  CoreML::ShapeConstraint::updateHeightRange((CoreML::ShapeConstraint *)(v215 + 56), (const CoreML::ShapeRange *)(v419 + 32 * v213));
  CoreML::ShapeConstraint::updateWidthRange((CoreML::ShapeConstraint *)(v215 + 56), (const CoreML::ShapeRange *)(v419 + 32 * v214));
  std::vector<CoreML::ShapeRange>::vector(&v416);
  v216 = (const CoreML::ShapeRange *)v416;
  v217 = (_OWORD *)(v416 + 32 * v211);
  v218 = *(_OWORD *)(v215 + 72);
  *v217 = *(_OWORD *)(v215 + 56);
  v217[1] = v218;
  v219 = (_OWORD *)((char *)v216 + 32 * v212);
  v220 = *(_OWORD *)(v215 + 136);
  *v219 = *(_OWORD *)(v215 + 120);
  v219[1] = v220;
  v221 = (_OWORD *)((char *)v216 + 32 * v213);
  v222 = *(_OWORD *)(v215 + 168);
  *v221 = *(_OWORD *)(v215 + 152);
  v221[1] = v222;
  v223 = (_OWORD *)((char *)v216 + 32 * v214);
  v224 = *(_OWORD *)(v215 + 200);
  *v223 = *(_OWORD *)(v215 + 184);
  v223[1] = v224;
  CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v29 + 56), v216);
  CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v29 + 56), (const CoreML::ShapeRange *)(v416 + 32));
  CoreML::ShapeConstraint::updateHeightRange((CoreML::ShapeConstraint *)(v29 + 56), (const CoreML::ShapeRange *)(v416 + 64));
  CoreML::ShapeConstraint::updateWidthRange((CoreML::ShapeConstraint *)(v29 + 56), (const CoreML::ShapeRange *)(v416 + 96));
  CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v29 + 56), (const CoreML::ShapeRange *)(v215 + 88));
  if ((_QWORD)v416)
  {
    *((_QWORD *)&v416 + 1) = v416;
    operator delete((void *)v416);
  }
  CoreML::Specification::PermuteLayerParams::~PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)&v406);
  v225 = (void *)v419;
  if ((_QWORD)v419)
  {
    *((_QWORD *)&v419 + 1) = v419;
LABEL_266:
    operator delete(v225);
  }
  return result;
}

void sub_19C9D9654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;

  __cxa_free_exception(v44);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a20);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[9] = 0;
    v6[8] = 0;
    v6[7] = (uint64_t)(v6 + 8);
    v13 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_19C9D9940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<int>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

_QWORD *CoreML::NeuralNetworkShaper::NeuralNetworkShaper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  BOOL v13;
  unint64_t v14;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *inited;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  int k;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  uint64_t i;
  unint64_t v63;
  unint64_t v64;
  uint64_t j;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  unint64_t v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __int128 v77;
  _OWORD *v78;
  unint64_t v79;
  __int128 v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v87;
  uint64_t *v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t *v91;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  std::string::size_type v102;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v103;
  uint64_t *v104;
  uint64_t *v105;
  std::string::size_type size;
  std::string::size_type *p_size;
  std::string::size_type *v108;
  std::string::size_type *v109;
  std::string::size_type *v110;
  char *v111;
  std::string *v112;
  __int128 v113;
  uint64_t **v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t **v117;
  uint64_t *v118;
  char *v119;
  int v120;
  uint64_t **v121;
  uint64_t **v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  int v127;
  std::string::size_type *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t *v142;
  _QWORD *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t m;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t *v160;
  _QWORD *v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t *v168;
  int v169;
  uint64_t *v170;
  int v171;
  BOOL v172;
  uint64_t *v173;
  uint64_t *v174;
  std::string::size_type v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  const void **v180;
  unsigned __int8 *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  std::string *v188;
  std::string *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t n;
  uint64_t v194;
  const void **v195;
  size_t v196;
  size_t v197;
  const void *v198;
  uint64_t v199;
  int v200;
  size_t v201;
  const void *v202;
  size_t v203;
  const void *v205;
  uint64_t v206;
  int v207;
  size_t v208;
  const void *v209;
  size_t v210;
  _QWORD *v212;
  _QWORD *v213;
  _BOOL4 v214;
  _QWORD *v215;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t *v219;
  int v220;
  int v221;
  unint64_t v223;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v224;
  uint64_t *v225;
  uint64_t *v226;
  uint64_t *v227;
  int v228;
  int v229;
  uint64_t *v230;
  uint64_t *v231;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v232;
  uint64_t *v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t *v236;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v237;
  uint64_t *v238;
  uint64_t *v239;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v240;
  uint64_t *v241;
  uint64_t *v242;
  unint64_t v243;
  std::runtime_error *exception;
  std::string *v246;
  __int128 v247;
  std::runtime_error *v248;
  std::string *v249;
  __int128 v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  std::string *v254;
  uint64_t *v255;
  uint64_t v257;
  std::string::size_type *v258;
  uint64_t v259;
  uint64_t v260;
  CoreML::ShapeConstraint *v261;
  std::string v263;
  uint64_t v264;
  _BYTE v265[32];
  std::string::size_type *v266;

  v3 = a3;
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 24);
  a1[2] = 0;
  v255 = a1 + 2;
  a1[1] = a1 + 2;
  v4 = (uint64_t **)(a1 + 1);
  a1[3] = 0;
  a1[5] = 0;
  v251 = a1 + 5;
  a1[4] = a1 + 5;
  v252 = (uint64_t)(a1 + 4);
  v253 = a2;
  a1[6] = 0;
  if (*(int *)(a2 + 24) >= 1)
  {
    v5 = 0;
    while (1)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v5 + 8);
      *(_QWORD *)v265 = *(_QWORD *)(v6 + 16);
      v7 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v252, *(_QWORD **)v265, (__int128 **)v265);
      std::string::operator=(v7 + 9, *(const std::string **)(v6 + 16));
      *(_QWORD *)v265 = *(_QWORD *)(v6 + 16);
      v8 = std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, *(_QWORD **)v265, (__int128 **)v265);
      v9 = (unint64_t)std::__tree<int>::__emplace_unique_key_args<int,int const&>(v8 + 7, v5, v5);
      v261 = (CoreML::ShapeConstraint *)&v7[2].__r_.__value_.__r.__words[1];
      v10 = *(_QWORD *)(v6 + 32) ? *(uint64_t **)(v6 + 32) : &CoreML::Specification::_FeatureType_default_instance_;
      v11 = *((_DWORD *)v10 + 9);
      if (v11 == 5)
        break;
      if (v11 != 4)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v246 = std::string::append(&v263, " with a type description which is not a multi array or image.");
        v247 = *(_OWORD *)&v246->__r_.__value_.__l.__data_;
        *(_QWORD *)&v265[16] = *((_QWORD *)&v246->__r_.__value_.__l + 2);
        *(_OWORD *)v265 = v247;
        v246->__r_.__value_.__l.__size_ = 0;
        v246->__r_.__value_.__r.__words[2] = 0;
        v246->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)v265);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v12 = *(_DWORD *)(v10[3] + 32);
      v13 = v12 == 40 || v12 == 10;
      if (v13)
        v14 = 1;
      else
        v14 = 3;
      inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::ShapeRange::setValue((uint64_t)&v7[5], v14);
      if (*((_DWORD *)v10 + 9) == 4)
      {
        v16 = (uint64_t *)v10[3];
      }
      else
      {
        inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
        v16 = &CoreML::Specification::_ImageFeatureType_default_instance_;
      }
      v39 = *((_DWORD *)v16 + 13);
      if (v39)
      {
        if (v39 == 31)
        {
          if (*((_DWORD *)v10 + 9) == 4)
          {
            v85 = (uint64_t *)v10[3];
          }
          else
          {
            inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
            v85 = &CoreML::Specification::_ImageFeatureType_default_instance_;
          }
          if (*((_DWORD *)v85 + 13) == 31)
          {
            v91 = (uint64_t *)v85[5];
          }
          else
          {
            CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
            v91 = &CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_;
          }
          v94 = (uint64_t *)v91[2];
          if (!v94)
            v94 = &CoreML::Specification::_SizeRange_default_instance_;
          v265[0] = 0;
          v96 = v94[2];
          v95 = v94[3];
          *(_QWORD *)&v265[8] = v96;
          v265[16] = v95 < 0;
          *(_QWORD *)&v265[24] = v95 & ~(v95 >> 63);
          CoreML::ShapeConstraint::updateWidthRange(v261, (const CoreML::ShapeRange *)v265);
          if (*((_DWORD *)v10 + 9) == 4)
          {
            v98 = (uint64_t *)v10[3];
          }
          else
          {
            v97 = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v97);
            v98 = &CoreML::Specification::_ImageFeatureType_default_instance_;
          }
          if (*((_DWORD *)v98 + 13) == 31)
          {
            v99 = (uint64_t *)v98[5];
          }
          else
          {
            CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v97);
            v99 = &CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_;
          }
          v100 = (uint64_t *)v99[3];
          if (!v100)
            v100 = &CoreML::Specification::_SizeRange_default_instance_;
          v263.__r_.__value_.__s.__data_[0] = 0;
          v102 = v100[2];
          v101 = v100[3];
          v263.__r_.__value_.__l.__size_ = v102;
          v263.__r_.__value_.__s.__data_[16] = v101 < 0;
          v264 = v101 & ~(v101 >> 63);
          CoreML::ShapeConstraint::updateHeightRange(v261, (const CoreML::ShapeRange *)&v263);
        }
        else if (v39 == 21)
        {
          v40 = 0;
          v41 = 0;
          v42 = -1;
          v43 = 1;
          v44 = -1;
          while (1)
          {
            if (*((_DWORD *)v10 + 9) == 4)
            {
              v45 = (uint64_t *)v10[3];
            }
            else
            {
              inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
              v45 = &CoreML::Specification::_ImageFeatureType_default_instance_;
            }
            if (*((_DWORD *)v45 + 13) == 21)
            {
              v46 = (uint64_t *)v45[5];
            }
            else
            {
              inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
              v46 = &CoreML::Specification::_ImageFeatureType_EnumeratedImageSizes_default_instance_;
            }
            if (v43 - 1 >= *((int *)v46 + 6))
              break;
            if (*((_DWORD *)v10 + 9) == 4)
            {
              v47 = (uint64_t *)v10[3];
            }
            else
            {
              inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
              v47 = &CoreML::Specification::_ImageFeatureType_default_instance_;
            }
            if (*((_DWORD *)v47 + 13) == 21)
            {
              v48 = (uint64_t *)v47[5];
            }
            else
            {
              inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
              v48 = &CoreML::Specification::_ImageFeatureType_EnumeratedImageSizes_default_instance_;
            }
            v49 = *(_QWORD *)(*(_QWORD *)(v48[4] + 8 * v43) + 16);
            if (v49 > v41)
              v41 = v49;
            if (v49 < v44)
              v44 = v49;
            if (*((_DWORD *)v10 + 9) == 4)
            {
              v50 = (uint64_t *)v10[3];
            }
            else
            {
              inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
              v50 = &CoreML::Specification::_ImageFeatureType_default_instance_;
            }
            if (*((_DWORD *)v50 + 13) == 21)
            {
              v51 = (uint64_t *)v50[5];
            }
            else
            {
              inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
              v51 = &CoreML::Specification::_ImageFeatureType_EnumeratedImageSizes_default_instance_;
            }
            v52 = *(_QWORD *)(*(_QWORD *)(v51[4] + 8 * v43) + 24);
            if (v52 > v40)
              v40 = v52;
            if (v52 < v42)
              v42 = v52;
            ++v43;
          }
          CoreML::ShapeRange::ShapeRange((uint64_t)v265, v44, v41);
          v3 = a3;
          CoreML::ShapeConstraint::updateWidthRange(v261, (const CoreML::ShapeRange *)v265);
          CoreML::ShapeRange::ShapeRange((uint64_t)&v263, v42, v40);
          CoreML::ShapeConstraint::updateHeightRange(v261, (const CoreML::ShapeRange *)&v263);
        }
      }
      else
      {
        if (*((_DWORD *)v10 + 9) == 4)
        {
          v86 = (uint64_t *)v10[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
          v86 = &CoreML::Specification::_ImageFeatureType_default_instance_;
        }
        v92 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::ShapeRange::setValue((uint64_t)&v7[6].__r_.__value_.__l.__size_, v86[3]);
        if (*((_DWORD *)v10 + 9) == 4)
        {
          v93 = (uint64_t *)v10[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v92);
          v93 = &CoreML::Specification::_ImageFeatureType_default_instance_;
        }
        CoreML::ShapeRange::setValue((uint64_t)&v7[7].__r_.__value_.__r.__words[2], v93[2]);
      }
LABEL_192:
      ++v5;
      a2 = v253;
      if (v5 >= *(int *)(v253 + 24))
        goto LABEL_193;
    }
    v17 = v10[3];
    v18 = *(_DWORD *)(v17 + 60);
    v257 = v5;
    v254 = v7;
    if (v18 == 21)
    {
      v53 = *(_QWORD *)(v17 + 40);
      v54 = *(int *)(v53 + 24);
      v55 = *(_QWORD *)(v53 + 32);
      if (v55)
        v56 = (uint64_t *)(v55 + 8);
      else
        v56 = 0;
      if ((_DWORD)v54)
      {
        LODWORD(v57) = 0;
        v58 = 8 * v54;
        do
        {
          v59 = *v56++;
          v60 = *(_DWORD *)(v59 + 16);
          if (v60 <= (int)v57)
            v57 = v57;
          else
            v57 = v60;
          v58 -= 8;
        }
        while (v58);
        if ((int)v57 >= 1)
        {
          v19 = 0;
          v20 = 0;
          v61 = 0;
          for (i = 0; i != v57; ++i)
          {
            v63 = 0;
            v64 = -1;
            for (j = 1; ; ++j)
            {
              if (*((_DWORD *)v10 + 9) == 5)
              {
                v66 = (uint64_t *)v10[3];
              }
              else
              {
                v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
                v66 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
              }
              if (*((_DWORD *)v66 + 15) == 21)
              {
                v67 = (uint64_t *)v66[5];
              }
              else
              {
                v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
                v67 = &CoreML::Specification::_ArrayFeatureType_EnumeratedShapes_default_instance_;
              }
              if (j - 1 >= *((int *)v67 + 6))
                break;
              if (*((_DWORD *)v10 + 9) == 5)
              {
                v68 = (uint64_t *)v10[3];
              }
              else
              {
                v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
                v68 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
              }
              if (*((_DWORD *)v68 + 15) == 21)
              {
                v69 = (uint64_t *)v68[5];
              }
              else
              {
                v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
                v69 = &CoreML::Specification::_ArrayFeatureType_EnumeratedShapes_default_instance_;
              }
              if (i < *(int *)(*(_QWORD *)(v69[4] + 8 * j) + 16))
              {
                if (*((_DWORD *)v10 + 9) == 5)
                {
                  v70 = (uint64_t *)v10[3];
                }
                else
                {
                  v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
                  v70 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
                }
                if (*((_DWORD *)v70 + 15) == 21)
                {
                  v71 = (uint64_t *)v70[5];
                }
                else
                {
                  v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
                  v71 = &CoreML::Specification::_ArrayFeatureType_EnumeratedShapes_default_instance_;
                }
                v72 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v71[4] + 8 * j) + 24) + 8 * i + 8);
                if (v64 >= v72)
                  v64 = v72;
                if (v63 <= v72)
                  v63 = v72;
              }
            }
            v9 = CoreML::ShapeRange::ShapeRange((uint64_t)v265, v64, v63);
            if ((unint64_t)v20 >= v61)
            {
              v74 = (v20 - v19) >> 5;
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 59)
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v61 - (_QWORD)v19) >> 4 > v75)
                v75 = (uint64_t)(v61 - (_QWORD)v19) >> 4;
              if (v61 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
                v9 = 0x7FFFFFFFFFFFFFFLL;
              else
                v9 = v75;
              if (v9)
                v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v9);
              else
                v76 = 0;
              v77 = *(_OWORD *)&v265[16];
              v78 = (_OWORD *)(v9 + 32 * v74);
              *v78 = *(_OWORD *)v265;
              v78[1] = v77;
              if (v20 == v19)
              {
                v81 = v9 + 32 * v74;
              }
              else
              {
                v79 = v9 + 32 * v74;
                do
                {
                  v80 = *((_OWORD *)v20 - 1);
                  v81 = v79 - 32;
                  *(_OWORD *)(v79 - 32) = *((_OWORD *)v20 - 2);
                  *(_OWORD *)(v79 - 16) = v80;
                  v20 -= 32;
                  v79 -= 32;
                }
                while (v20 != v19);
              }
              v82 = v9 + 32 * v76;
              v20 = (char *)(v78 + 2);
              if (v19)
                operator delete(v19);
              v19 = (char *)v81;
              v61 = v82;
            }
            else
            {
              v73 = *(_OWORD *)&v265[16];
              *(_OWORD *)v20 = *(_OWORD *)v265;
              *((_OWORD *)v20 + 1) = v73;
              v20 += 32;
            }
          }
          goto LABEL_144;
        }
      }
    }
    else if (v18 == 31)
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      for (k = 5; ; k = *((_DWORD *)v10 + 9))
      {
        if (k == 5)
        {
          v24 = (uint64_t *)v10[3];
        }
        else
        {
          v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
          v24 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        if (*((_DWORD *)v24 + 15) == 31)
        {
          v25 = (uint64_t *)v24[5];
        }
        else
        {
          v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
          v25 = &CoreML::Specification::_ArrayFeatureType_ShapeRange_default_instance_;
        }
        if (v22 >= *((int *)v25 + 6))
          break;
        if (*((_DWORD *)v10 + 9) == 5)
        {
          v26 = (uint64_t *)v10[3];
        }
        else
        {
          v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
          v26 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        if (*((_DWORD *)v26 + 15) == 31)
        {
          v27 = (uint64_t *)v26[5];
        }
        else
        {
          v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
          v27 = &CoreML::Specification::_ArrayFeatureType_ShapeRange_default_instance_;
        }
        v28 = *(_QWORD *)(v27[4] + 8 * v22 + 8);
        v29 = *(_QWORD *)(v28 + 16);
        v30 = *(_QWORD *)(v28 + 24);
        v31 = v30 & ~(v30 >> 63);
        if ((unint64_t)v20 >= v21)
        {
          v32 = (v20 - v19) >> 5;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 59)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v21 - (_QWORD)v19) >> 4 > v33)
            v33 = (uint64_t)(v21 - (_QWORD)v19) >> 4;
          if (v21 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
            v9 = 0x7FFFFFFFFFFFFFFLL;
          else
            v9 = v33;
          if (v9)
            v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v9);
          else
            v34 = 0;
          v35 = v9 + 32 * v32;
          *(_BYTE *)v35 = 0;
          *(_QWORD *)(v35 + 8) = v29;
          *(_BYTE *)(v35 + 16) = v30 < 0;
          *(_QWORD *)(v35 + 24) = v31;
          if (v20 == v19)
          {
            v38 = v9 + 32 * v32;
          }
          else
          {
            v36 = v9 + 32 * v32;
            do
            {
              v37 = *((_OWORD *)v20 - 1);
              v38 = v36 - 32;
              *(_OWORD *)(v36 - 32) = *((_OWORD *)v20 - 2);
              *(_OWORD *)(v36 - 16) = v37;
              v20 -= 32;
              v36 -= 32;
            }
            while (v20 != v19);
          }
          v21 = v9 + 32 * v34;
          v20 = (char *)(v35 + 32);
          if (v19)
            operator delete(v19);
          v19 = (char *)v38;
        }
        else
        {
          *v20 = 0;
          *((_QWORD *)v20 + 1) = v29;
          v20[16] = v30 < 0;
          *((_QWORD *)v20 + 3) = v31;
          v20 += 32;
        }
        ++v22;
      }
      goto LABEL_144;
    }
    v19 = 0;
    v20 = 0;
LABEL_144:
    v83 = (v20 - v19) >> 5;
    if (v83)
    {
      v3 = a3;
      v5 = v257;
      if (v83 == 3)
      {
        CoreML::ShapeConstraint::updateChannelRange(v261, (const CoreML::ShapeRange *)v19);
        CoreML::ShapeConstraint::updateHeightRange(v261, (const CoreML::ShapeRange *)(v19 + 32));
        CoreML::ShapeConstraint::updateWidthRange(v261, (const CoreML::ShapeRange *)(v19 + 64));
      }
      else
      {
        if (v83 != 1)
        {
          v248 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v249 = std::string::append(&v263, "\" with an invalid array shape constraint.");
          v250 = *(_OWORD *)&v249->__r_.__value_.__l.__data_;
          *(_QWORD *)&v265[16] = *((_QWORD *)&v249->__r_.__value_.__l + 2);
          *(_OWORD *)v265 = v250;
          v249->__r_.__value_.__l.__size_ = 0;
          v249->__r_.__value_.__r.__words[2] = 0;
          v249->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v248, (const std::string *)v265);
          __cxa_throw(v248, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        CoreML::ShapeConstraint::updateChannelRange(v261, (const CoreML::ShapeRange *)v19);
      }
    }
    else
    {
      v3 = a3;
      v5 = v257;
      if (*((_DWORD *)v10 + 9) == 5)
      {
        v84 = (uint64_t *)v10[3];
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
        v84 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      v87 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::ShapeRange::setValue((uint64_t)&v254[5], *(_QWORD *)(v84[3] + 8));
      if (*((_DWORD *)v10 + 9) == 5)
      {
        v88 = (uint64_t *)v10[3];
      }
      else
      {
        v87 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v87);
        v88 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      if (*((_DWORD *)v88 + 4) == 3)
      {
        if (*((_DWORD *)v10 + 9) == 5)
        {
          v89 = (uint64_t *)v10[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v87);
          v89 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        v103 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::ShapeRange::setValue((uint64_t)&v254[6].__r_.__value_.__l.__size_, *(_QWORD *)(v89[3] + 16));
        if (*((_DWORD *)v10 + 9) == 5)
        {
          v104 = (uint64_t *)v10[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v103);
          v104 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        v90 = *(_QWORD *)(v104[3] + 24);
      }
      else
      {
        CoreML::ShapeRange::setValue((uint64_t)&v254[6].__r_.__value_.__l.__size_, 1uLL);
        v90 = 1;
      }
      CoreML::ShapeRange::setValue((uint64_t)&v254[7].__r_.__value_.__r.__words[2], v90);
    }
    if (v19)
      operator delete(v19);
    goto LABEL_192;
  }
  while (1)
  {
LABEL_193:
    *(_OWORD *)&v263.__r_.__value_.__r.__words[1] = 0uLL;
    v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v263.__r_.__value_.__l.__size_;
    v105 = *v4;
    if (*v4 != v255)
    {
      size = 0;
      while (1)
      {
        p_size = &v263.__r_.__value_.__l.__size_;
        if ((std::string::size_type *)v263.__r_.__value_.__l.__data_ != &v263.__r_.__value_.__r.__words[1])
        {
          v108 = (std::string::size_type *)size;
          v109 = &v263.__r_.__value_.__l.__size_;
          if (size)
          {
            do
            {
              p_size = v108;
              v108 = (std::string::size_type *)v108[1];
            }
            while (v108);
          }
          else
          {
            do
            {
              p_size = (std::string::size_type *)v109[2];
              v13 = *p_size == (_QWORD)v109;
              v109 = p_size;
            }
            while (v13);
          }
          if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(p_size + 4, v105 + 4))
            break;
        }
        if (size)
        {
          v266 = p_size;
          v110 = p_size + 1;
          goto LABEL_204;
        }
        v110 = &v263.__r_.__value_.__l.__size_;
        v266 = &v263.__r_.__value_.__l.__size_;
LABEL_207:
        v111 = (char *)operator new(0x50uLL);
        *(_QWORD *)v265 = v111;
        *(_QWORD *)&v265[8] = &v263.__r_.__value_.__l.__size_;
        v265[16] = 0;
        v112 = (std::string *)(v111 + 32);
        v258 = v110;
        if (*((char *)v105 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v112, (const std::string::value_type *)v105[4], v105[5]);
        }
        else
        {
          v113 = *((_OWORD *)v105 + 2);
          *((_QWORD *)v111 + 6) = v105[6];
          *(_OWORD *)&v112->__r_.__value_.__l.__data_ = v113;
        }
        *((_QWORD *)v111 + 8) = 0;
        v114 = (uint64_t **)(v111 + 64);
        *((_QWORD *)v111 + 7) = v111 + 64;
        *((_QWORD *)v111 + 9) = 0;
        v115 = (uint64_t *)v105[7];
        if (v115 != v105 + 8)
        {
          do
          {
            v116 = *v114;
            v117 = (uint64_t **)(v111 + 64);
            if (*((uint64_t ***)v111 + 7) == v114)
              goto LABEL_217;
            v118 = *v114;
            v119 = v111 + 64;
            if (v116)
            {
              do
              {
                v117 = (uint64_t **)v118;
                v118 = (uint64_t *)v118[1];
              }
              while (v118);
            }
            else
            {
              do
              {
                v117 = (uint64_t **)*((_QWORD *)v119 + 2);
                v13 = *v117 == (uint64_t *)v119;
                v119 = (char *)v117;
              }
              while (v13);
            }
            v120 = *((_DWORD *)v115 + 7);
            if (*((_DWORD *)v117 + 7) < v120)
            {
LABEL_217:
              if (v116)
                v121 = v117;
              else
                v121 = (uint64_t **)(v111 + 64);
              if (v116)
                v122 = v117 + 1;
              else
                v122 = (uint64_t **)(v111 + 64);
            }
            else
            {
              v121 = (uint64_t **)(v111 + 64);
              v122 = (uint64_t **)(v111 + 64);
              if (v116)
              {
                v126 = *v114;
                v122 = (uint64_t **)(v111 + 64);
                while (1)
                {
                  while (1)
                  {
                    v121 = (uint64_t **)v126;
                    v127 = *((_DWORD *)v126 + 7);
                    if (v120 >= v127)
                      break;
                    v126 = *v121;
                    v122 = v121;
                    if (!*v121)
                      goto LABEL_224;
                  }
                  if (v127 >= v120)
                    break;
                  v122 = v121 + 1;
                  v126 = v121[1];
                  if (!v126)
                    goto LABEL_224;
                }
              }
            }
            if (!*v122)
            {
LABEL_224:
              v123 = (uint64_t *)operator new(0x20uLL);
              *((_DWORD *)v123 + 7) = *((_DWORD *)v115 + 7);
              std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)v111 + 7, (uint64_t)v121, v122, v123);
            }
            v124 = (uint64_t *)v115[1];
            if (v124)
            {
              do
              {
                v125 = v124;
                v124 = (uint64_t *)*v124;
              }
              while (v124);
            }
            else
            {
              do
              {
                v125 = (uint64_t *)v115[2];
                v13 = *v125 == (_QWORD)v115;
                v115 = v125;
              }
              while (!v13);
            }
            v115 = v125;
          }
          while (v125 != v105 + 8);
          v111 = *(char **)v265;
        }
        v265[16] = 1;
        v128 = v266;
        *(_QWORD *)v111 = 0;
        *((_QWORD *)v111 + 1) = 0;
        *((_QWORD *)v111 + 2) = v128;
        *v258 = (std::string::size_type)v111;
        v3 = a3;
        if (*(_QWORD *)v263.__r_.__value_.__l.__data_)
        {
          v263.__r_.__value_.__r.__words[0] = *(_QWORD *)v263.__r_.__value_.__l.__data_;
          v111 = (char *)*v258;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v263.__r_.__value_.__l.__size_, (uint64_t *)v111);
        ++v263.__r_.__value_.__r.__words[2];
        *(_QWORD *)v265 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v265);
LABEL_243:
        v129 = (uint64_t *)v105[1];
        if (v129)
        {
          do
          {
            v130 = v129;
            v129 = (uint64_t *)*v129;
          }
          while (v129);
        }
        else
        {
          do
          {
            v130 = (uint64_t *)v105[2];
            v13 = *v130 == (_QWORD)v105;
            v105 = v130;
          }
          while (!v13);
        }
        if (v130 == v255)
          goto LABEL_250;
        size = v263.__r_.__value_.__l.__size_;
        v105 = v130;
      }
      v110 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)&v263, &v266, v105 + 4);
LABEL_204:
      if (*v110)
        goto LABEL_243;
      goto LABEL_207;
    }
LABEL_250:
    LODWORD(v131) = *(_DWORD *)(v3 + 8);
    if ((int)v131 >= 1)
    {
      v132 = 0;
      do
      {
        v259 = v132;
        v133 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v132 + 8);
        v134 = *(_QWORD *)(v133 + 32);
        if (v134)
          v135 = (_QWORD *)(v134 + 8);
        else
          v135 = 0;
        v136 = *(int *)(v133 + 24);
        if ((_DWORD)v136)
        {
          v137 = &v135[v136];
          do
          {
            *(_QWORD *)v265 = *v135;
            v138 = std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, *(_QWORD **)v265, (__int128 **)v265);
            v139 = *(_QWORD *)(v133 + 56);
            if (v139)
              v140 = (_QWORD *)(v139 + 8);
            else
              v140 = 0;
            v141 = *(int *)(v133 + 48);
            if ((_DWORD)v141)
            {
              v142 = v138;
              v143 = &v140[v141];
              v144 = v138 + 8;
              do
              {
                *(_QWORD *)v265 = *v140;
                v145 = std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, *(_QWORD **)v265, (__int128 **)v265);
                v146 = (uint64_t *)v142[7];
                if (v146 != v144)
                {
                  v147 = v145 + 7;
                  do
                  {
                    std::__tree<int>::__emplace_unique_key_args<int,int const&>(v147, *((_DWORD *)v146 + 7), *((_DWORD *)v146 + 7));
                    v148 = (uint64_t *)v146[1];
                    if (v148)
                    {
                      do
                      {
                        v149 = v148;
                        v148 = (uint64_t *)*v148;
                      }
                      while (v148);
                    }
                    else
                    {
                      do
                      {
                        v149 = (uint64_t *)v146[2];
                        v13 = *v149 == (_QWORD)v146;
                        v146 = v149;
                      }
                      while (!v13);
                    }
                    v146 = v149;
                  }
                  while (v149 != v144);
                }
                ++v140;
                v3 = a3;
              }
              while (v140 != v143);
            }
            ++v135;
          }
          while (v135 != v137);
        }
        CoreML::NeuralNetworkShaper::ProcessLayer((CoreML::NeuralNetworkShaper *)a1, (const CoreML::Specification::NeuralNetworkLayer *)v133);
        v132 = v259 + 1;
        v131 = *(int *)(v3 + 8);
      }
      while (v259 + 1 < v131);
    }
    for (m = v131; (int)m > 0; m = v260)
    {
      v260 = m - 1;
      v151 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * (m - 1) + 8);
      v152 = *(_QWORD *)(v151 + 56);
      if (v152)
        v153 = (_QWORD *)(v152 + 8);
      else
        v153 = 0;
      v154 = *(int *)(v151 + 48);
      if ((_DWORD)v154)
      {
        v155 = &v153[v154];
        do
        {
          *(_QWORD *)v265 = *v153;
          v156 = std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, *(_QWORD **)v265, (__int128 **)v265);
          v157 = *(_QWORD *)(v151 + 32);
          if (v157)
            v158 = (_QWORD *)(v157 + 8);
          else
            v158 = 0;
          v159 = *(int *)(v151 + 24);
          if ((_DWORD)v159)
          {
            v160 = v156;
            v161 = &v158[v159];
            v162 = v156 + 8;
            do
            {
              *(_QWORD *)v265 = *v158;
              v163 = std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, *(_QWORD **)v265, (__int128 **)v265);
              v164 = (uint64_t *)v160[7];
              if (v164 != v162)
              {
                v165 = v163 + 7;
                do
                {
                  std::__tree<int>::__emplace_unique_key_args<int,int const&>(v165, *((_DWORD *)v164 + 7), *((_DWORD *)v164 + 7));
                  v166 = (uint64_t *)v164[1];
                  if (v166)
                  {
                    do
                    {
                      v167 = v166;
                      v166 = (uint64_t *)*v166;
                    }
                    while (v166);
                  }
                  else
                  {
                    do
                    {
                      v167 = (uint64_t *)v164[2];
                      v13 = *v167 == (_QWORD)v164;
                      v164 = v167;
                    }
                    while (!v13);
                  }
                  v164 = v167;
                }
                while (v167 != v162);
              }
              ++v158;
              v3 = a3;
            }
            while (v158 != v161);
          }
          ++v153;
        }
        while (v153 != v155);
      }
      CoreML::NeuralNetworkShaper::ProcessLayer((CoreML::NeuralNetworkShaper *)a1, (const CoreML::Specification::NeuralNetworkLayer *)v151);
    }
    v168 = *v4;
    if (*v4 == v255)
    {
LABEL_305:
      v172 = 1;
    }
    else
    {
      v169 = *(_DWORD *)a1;
      v170 = *v4;
      while (1)
      {
        v171 = *((_DWORD *)v170 + 18);
        v172 = v169 == v171;
        if (v169 != v171)
          break;
        v173 = (uint64_t *)v170[1];
        if (v173)
        {
          do
          {
            v174 = v173;
            v173 = (uint64_t *)*v173;
          }
          while (v173);
        }
        else
        {
          do
          {
            v174 = (uint64_t *)v170[2];
            v13 = *v174 == (_QWORD)v170;
            v170 = v174;
          }
          while (!v13);
        }
        v170 = v174;
        if (v174 == v255)
          goto LABEL_305;
      }
    }
    if (v263.__r_.__value_.__r.__words[2] == a1[3])
      break;
LABEL_350:
    std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy((_QWORD *)v263.__r_.__value_.__l.__size_);
    if (v172)
      goto LABEL_353;
  }
  v175 = v263.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v263.__r_.__value_.__l.__data_ != &v263.__r_.__value_.__r.__words[1])
  {
    do
    {
      v176 = *(unsigned __int8 *)(v175 + 55);
      if ((v176 & 0x80u) == 0)
        v177 = *(unsigned __int8 *)(v175 + 55);
      else
        v177 = *(_QWORD *)(v175 + 40);
      v178 = *((unsigned __int8 *)v168 + 55);
      v179 = (char)v178;
      if ((v178 & 0x80u) != 0)
        v178 = v168[5];
      if (v177 != v178)
        goto LABEL_350;
      v180 = (const void **)(v175 + 32);
      if (v179 >= 0)
        v181 = (unsigned __int8 *)(v168 + 4);
      else
        v181 = (unsigned __int8 *)v168[4];
      if ((v176 & 0x80) != 0)
      {
        if (memcmp(*v180, v181, *(_QWORD *)(v175 + 40)))
          goto LABEL_350;
      }
      else if (*(_BYTE *)(v175 + 55))
      {
        while (*(unsigned __int8 *)v180 == *v181)
        {
          v180 = (const void **)((char *)v180 + 1);
          ++v181;
          if (!--v176)
            goto LABEL_323;
        }
        goto LABEL_350;
      }
LABEL_323:
      if (*(_QWORD *)(v175 + 72) != v168[9])
        goto LABEL_350;
      v182 = *(_QWORD **)(v175 + 56);
      if (v182 != (_QWORD *)(v175 + 64))
      {
        v183 = (_QWORD *)v168[7];
        while (*((_DWORD *)v182 + 7) == *((_DWORD *)v183 + 7))
        {
          v184 = (_QWORD *)v182[1];
          v185 = v182;
          if (v184)
          {
            do
            {
              v182 = v184;
              v184 = (_QWORD *)*v184;
            }
            while (v184);
          }
          else
          {
            do
            {
              v182 = (_QWORD *)v185[2];
              v13 = *v182 == (_QWORD)v185;
              v185 = v182;
            }
            while (!v13);
          }
          v186 = (_QWORD *)v183[1];
          if (v186)
          {
            do
            {
              v187 = v186;
              v186 = (_QWORD *)*v186;
            }
            while (v186);
          }
          else
          {
            do
            {
              v187 = (_QWORD *)v183[2];
              v13 = *v187 == (_QWORD)v183;
              v183 = v187;
            }
            while (!v13);
          }
          v183 = v187;
          if (v182 == (_QWORD *)(v175 + 64))
            goto LABEL_338;
        }
        goto LABEL_350;
      }
LABEL_338:
      v188 = *(std::string **)(v175 + 8);
      if (v188)
      {
        do
        {
          v189 = v188;
          v188 = (std::string *)v188->__r_.__value_.__r.__words[0];
        }
        while (v188);
      }
      else
      {
        do
        {
          v189 = *(std::string **)(v175 + 16);
          v13 = v189->__r_.__value_.__r.__words[0] == v175;
          v175 = (std::string::size_type)v189;
        }
        while (!v13);
      }
      v190 = (uint64_t *)v168[1];
      if (v190)
      {
        do
        {
          v191 = v190;
          v190 = (uint64_t *)*v190;
        }
        while (v190);
      }
      else
      {
        do
        {
          v191 = (uint64_t *)v168[2];
          v13 = *v191 == (_QWORD)v168;
          v168 = v191;
        }
        while (!v13);
      }
      v168 = v191;
      v175 = (std::string::size_type)v189;
    }
    while (v189 != (std::string *)&v263.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy((_QWORD *)v263.__r_.__value_.__l.__size_);
LABEL_353:
  v192 = v253;
  if (*(int *)(v253 + 48) >= 1)
  {
    for (n = 0; n < *(int *)(v253 + 48); ++n)
    {
      v194 = *(_QWORD *)(*(_QWORD *)(v192 + 56) + 8 * n + 8);
      v195 = *(const void ***)(v194 + 16);
      v196 = *((unsigned __int8 *)v195 + 23);
      v197 = v196;
      v198 = v195;
      if (*((char *)v195 + 23) < 0)
      {
        v198 = *v195;
        v197 = (size_t)v195[1];
      }
      v199 = *(_QWORD *)(v192 + 144);
      v200 = *(char *)(v199 + 23);
      if (v200 >= 0)
        v201 = *(unsigned __int8 *)(v199 + 23);
      else
        v201 = *(_QWORD *)(v199 + 8);
      if (v200 >= 0)
        v202 = *(const void **)(v192 + 144);
      else
        v202 = *(const void **)v199;
      if (v201 >= v197)
        v203 = v197;
      else
        v203 = v201;
      if (!memcmp(v198, v202, v203) && v201 == v197)
        goto LABEL_445;
      v205 = v195;
      if ((v196 & 0x80) != 0)
      {
        v205 = *v195;
        v196 = (size_t)v195[1];
      }
      v206 = *(_QWORD *)(v253 + 136);
      v207 = *(char *)(v206 + 23);
      v208 = v207 >= 0 ? *(unsigned __int8 *)(v206 + 23) : *(_QWORD *)(v206 + 8);
      v209 = v207 >= 0 ? *(const void **)(v253 + 136) : *(const void **)v206;
      v210 = v208 >= v196 ? v196 : v208;
      if (!memcmp(v205, v209, v210) && v208 == v196)
        goto LABEL_445;
      v212 = (_QWORD *)*v251;
      if (!*v251)
        goto LABEL_445;
      v213 = v251;
      do
      {
        v214 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v212 + 4, v195);
        v215 = v212 + 1;
        if (!v214)
        {
          v215 = v212;
          v213 = v212;
        }
        v212 = (_QWORD *)*v215;
      }
      while (*v215);
      if (v213 == v251
        || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v195, v213 + 4))
      {
        goto LABEL_445;
      }
      v216 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(v252, v265, v195);
      v217 = *(_QWORD *)v216;
      if (!*(_QWORD *)v216)
        std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
      v218 = *(uint64_t **)(v194 + 32);
      if (v218)
        v219 = *(uint64_t **)(v194 + 32);
      else
        v219 = &CoreML::Specification::_FeatureType_default_instance_;
      v220 = *((_DWORD *)v219 + 9);
      if (v220 == 5)
      {
        v227 = (uint64_t *)v219[3];
      }
      else
      {
        if (v220 == 4)
        {
          v221 = *(_DWORD *)(v219[3] + 32);
          if (v221 == 10 || v221 == 40)
            v223 = 1;
          else
            v223 = 3;
          v224 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::ShapeRange::setValue(v217 + 120, v223);
          v225 = *(uint64_t **)(v194 + 32);
          if (!v225)
            v225 = &CoreML::Specification::_FeatureType_default_instance_;
          if (*((_DWORD *)v225 + 9) == 4)
          {
            v226 = (uint64_t *)v225[3];
          }
          else
          {
            CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v224);
            v226 = &CoreML::Specification::_ImageFeatureType_default_instance_;
          }
          v237 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::ShapeRange::setValue(v217 + 152, v226[3]);
          v238 = *(uint64_t **)(v194 + 32);
          if (!v238)
            v238 = &CoreML::Specification::_FeatureType_default_instance_;
          if (*((_DWORD *)v238 + 9) == 4)
          {
            v239 = (uint64_t *)v238[3];
          }
          else
          {
            CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v237);
            v239 = &CoreML::Specification::_ImageFeatureType_default_instance_;
          }
          CoreML::ShapeRange::setValue(v217 + 184, v239[2]);
          goto LABEL_445;
        }
        v216 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v216);
        v218 = *(uint64_t **)(v194 + 32);
        v227 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      v228 = *((_DWORD *)v227 + 4);
      if (!v218)
        v218 = &CoreML::Specification::_FeatureType_default_instance_;
      v229 = *((_DWORD *)v218 + 9);
      if (v228 == 3)
      {
        if (v229 == 5)
        {
          v230 = (uint64_t *)v218[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v216);
          v230 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        v232 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::ShapeRange::setValue(v217 + 120, *(_QWORD *)(v230[3] + 8));
        v233 = *(uint64_t **)(v194 + 32);
        if (!v233)
          v233 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v233 + 9) == 5)
        {
          v234 = (uint64_t *)v233[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v232);
          v234 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        v240 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::ShapeRange::setValue(v217 + 152, *(_QWORD *)(v234[3] + 16));
        v241 = *(uint64_t **)(v194 + 32);
        if (!v241)
          v241 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v241 + 9) == 5)
        {
          v242 = (uint64_t *)v241[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v240);
          v242 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        v243 = *(_QWORD *)(v242[3] + 24);
      }
      else
      {
        if (v229 == 5)
        {
          v231 = (uint64_t *)v218[3];
        }
        else
        {
          v216 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v216);
          v231 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        if (*((_DWORD *)v231 + 4) != 1)
          goto LABEL_445;
        v235 = *(uint64_t **)(v194 + 32);
        if (!v235)
          v235 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v235 + 9) == 5)
        {
          v236 = (uint64_t *)v235[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v216);
          v236 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        CoreML::ShapeRange::setValue(v217 + 120, *(_QWORD *)(v236[3] + 8));
        CoreML::ShapeRange::setValue(v217 + 152, 1uLL);
        v243 = 1;
      }
      CoreML::ShapeRange::setValue(v217 + 184, v243);
LABEL_445:
      v192 = v253;
    }
  }
  return a1;
}

void sub_19C9DAEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(*a9);
  std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(*a14);
  _Unwind_Resume(a1);
}

BOOL CoreML::hasCustomLayer(CoreML *this, const CoreML::Specification::Model *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  _BOOL8 result;

  if ((_DWORD)a2 != 303 && (_DWORD)a2 != 403 && (_DWORD)a2 != 500)
    return 0;
  v2 = *((unsigned int *)this + 6);
  if ((int)v2 < 1)
    return 0;
  v3 = v2 - 1;
  v4 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
  do
  {
    v5 = *v4++;
    v6 = *(_DWORD *)(v5 + 140);
    result = v6 == 500;
  }
  while (v6 != 500 && v3-- != 0);
  return result;
}

void CoreML::downgradeSpecificationVersion(CoreML *this, CoreML::Specification::Model *a2)
{
  CoreML *v2;
  int v3;
  BOOL v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *Helper;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  int v27;
  int v28;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *__p[2];
  char v35;
  uint64_t v36[4];

  if (!this)
    return;
  v2 = this;
  v3 = *((_DWORD *)this + 6);
  if (v3)
    v4 = v3 < 10;
  else
    v4 = 0;
  if (v4)
  {
    if (v3 != 9)
      goto LABEL_10;
  }
  else
  {
    *((_DWORD *)this + 6) = 9;
  }
  this = (CoreML *)CoreML::hasIOS18Features(this, a2);
  if ((_DWORD)this)
  {
    v3 = *((_DWORD *)v2 + 6);
LABEL_10:
    if (v3 != 8)
      goto LABEL_15;
    goto LABEL_13;
  }
  *((_DWORD *)v2 + 6) = 8;
LABEL_13:
  this = (CoreML *)CoreML::hasIOS17Features(v2, a2);
  if ((this & 1) == 0)
  {
    *((_DWORD *)v2 + 6) = 7;
    goto LABEL_18;
  }
  v3 = *((_DWORD *)v2 + 6);
LABEL_15:
  if (v3 != 7)
    goto LABEL_70;
LABEL_18:
  if (*((_QWORD *)v2 + 2))
    v5 = (uint64_t *)*((_QWORD *)v2 + 2);
  else
    v5 = &CoreML::Specification::_ModelDescription_default_instance_;
  v6 = v5[4];
  if (v6)
    v7 = v6 + 8;
  else
    v7 = 0;
  v8 = *((int *)v5 + 6);
  v9 = 8 * v8;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    v11 = v7;
    do
    {
      v12 = *(uint64_t **)(*(_QWORD *)v11 + 32);
      if (!v12)
        v12 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_DWORD *)v12 + 9) == 5 && *(_DWORD *)(v12[3] + 36) == 65552)
        goto LABEL_69;
      v11 += 8;
      v10 -= 8;
    }
    while (v10);
  }
  v13 = v5[7];
  if (v13)
    v14 = v13 + 8;
  else
    v14 = 0;
  v15 = *((int *)v5 + 12);
  v16 = 8 * v15;
  if ((_DWORD)v15)
  {
    v17 = 8 * v15;
    v18 = v14;
    do
    {
      v19 = *(uint64_t **)(*(_QWORD *)v18 + 32);
      if (!v19)
        v19 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_DWORD *)v19 + 9) == 5 && *(_DWORD *)(v19[3] + 36) == 65552)
        goto LABEL_69;
      v18 += 8;
      v17 -= 8;
    }
    while (v17);
  }
  if ((_DWORD)v8)
  {
    do
    {
      v20 = *(uint64_t **)(*(_QWORD *)v7 + 32);
      if (!v20)
        v20 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_DWORD *)v20 + 9) == 4 && *(_DWORD *)(v20[3] + 32) == 40)
        goto LABEL_69;
      v7 += 8;
      v9 -= 8;
    }
    while (v9);
  }
  if ((_DWORD)v15)
  {
    do
    {
      v21 = *(uint64_t **)(*(_QWORD *)v14 + 32);
      if (!v21)
        v21 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_DWORD *)v21 + 9) == 5)
      {
        this = (CoreML *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
        if (dword_1ED003458 == 40)
          goto LABEL_69;
      }
      v14 += 8;
      v16 -= 8;
    }
    while (v16);
  }
  if (*((_DWORD *)v2 + 11) != 502)
    goto LABEL_68;
  v22 = *((_QWORD *)v2 + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "main");
  Helper = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v36, *(_QWORD *)(v22 + 40), (unsigned __int8 *)__p, 0);
  v24 = v36[0];
  if (v35 < 0)
    operator delete(__p[0]);
  if (*((_DWORD *)v2 + 11) != 502)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(Helper);
  if (!v24)
    goto LABEL_68;
  v25 = *(uint64_t **)(*(_QWORD *)(v24 + 24) + 128);
  v26 = *((char *)v25 + 23);
  if (v26 < 0)
  {
    if (v25[1] == 7)
    {
      v25 = (uint64_t *)*v25;
      goto LABEL_64;
    }
LABEL_68:
    *((_DWORD *)v2 + 6) = 6;
    goto LABEL_72;
  }
  if (v26 != 7)
    goto LABEL_68;
LABEL_64:
  v27 = *(_DWORD *)v25;
  v28 = *(_DWORD *)((char *)v25 + 3);
  if (v27 != 1701998403 || v28 != 910970213)
    goto LABEL_68;
LABEL_69:
  v3 = *((_DWORD *)v2 + 6);
LABEL_70:
  if (v3 == 5)
    goto LABEL_74;
  if (v3 != 6)
    goto LABEL_76;
LABEL_72:
  if ((CoreML::hasIOS15Features(v2, a2) & 1) != 0)
    goto LABEL_91;
  *((_DWORD *)v2 + 6) = 5;
LABEL_74:
  if (CoreML::hasIOS14Features(v2, a2))
  {
    v3 = *((_DWORD *)v2 + 6);
LABEL_76:
    if (v3 != 4)
      goto LABEL_81;
    goto LABEL_79;
  }
  *((_DWORD *)v2 + 6) = 4;
LABEL_79:
  if ((CoreML::hasIOS13Features(v2, a2) & 1) == 0)
  {
    *((_DWORD *)v2 + 6) = 3;
    goto LABEL_84;
  }
  v3 = *((_DWORD *)v2 + 6);
LABEL_81:
  if (v3 != 3)
  {
LABEL_86:
    if (v3 != 2)
      goto LABEL_91;
    goto LABEL_89;
  }
LABEL_84:
  if (CoreML::hasIOS12Features(v2, a2))
  {
    v3 = *((_DWORD *)v2 + 6);
    goto LABEL_86;
  }
  *((_DWORD *)v2 + 6) = 2;
LABEL_89:
  if ((CoreML::hasIOS11_2Features(v2, a2) & 1) == 0)
    *((_DWORD *)v2 + 6) = 1;
LABEL_91:
  v30 = *((_DWORD *)v2 + 11);
  if (v30 == 200)
  {
    v31 = *((_QWORD *)v2 + 4);
    v32 = *(_QWORD *)(v31 + 16);
    if (v32)
      goto LABEL_99;
    goto LABEL_97;
  }
  if (v30 == 202)
  {
    v32 = *((_QWORD *)v2 + 4);
    if (!v32)
      return;
    goto LABEL_99;
  }
  if (v30 != 201)
    return;
  v31 = *((_QWORD *)v2 + 4);
  v32 = *(_QWORD *)(v31 + 16);
  if (!v32)
  {
LABEL_97:
    v32 = operator new();
    CoreML::Specification::Pipeline::Pipeline((CoreML::Specification::Pipeline *)v32);
    *(_QWORD *)(v31 + 16) = v32;
  }
LABEL_99:
  if (*(int *)(v32 + 24) >= 1)
  {
    v33 = 0;
    do
      CoreML::downgradeSpecificationVersion(*(CoreML **)(*(_QWORD *)(v32 + 32) + 8 * v33++ + 8), a2);
    while (v33 < *(int *)(v32 + 24));
  }
}

void sub_19C9DB498(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

BOOL CoreML::hasIOS18Features(CoreML *this, const CoreML::Specification::Model *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  CoreML **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  CoreML **v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t v18;
  CoreML **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *Helper;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  int v27;
  int v28;
  uint64_t *v30;
  int v31;
  void *__p[2];
  char v33;
  _QWORD v34[4];

  v3 = *((_DWORD *)this + 11);
  if (v3 <= 201)
  {
    if (v3 == 200)
    {
      v17 = *(uint64_t **)(*((_QWORD *)this + 4) + 16);
      if (!v17)
        v17 = &CoreML::Specification::_Pipeline_default_instance_;
      v18 = v17[4];
      if (v18)
        v19 = (CoreML **)(v18 + 8);
      else
        v19 = 0;
      v20 = *((int *)v17 + 6);
      if ((_DWORD)v20)
      {
        v21 = 8 * v20;
        while ((CoreML::hasIOS18Features(*v19, a2) & 1) == 0)
        {
          ++v19;
          v21 -= 8;
          if (!v21)
            goto LABEL_38;
        }
        return 1;
      }
    }
    else
    {
      if (v3 != 201)
        goto LABEL_39;
      v9 = *(uint64_t **)(*((_QWORD *)this + 4) + 16);
      if (!v9)
        v9 = &CoreML::Specification::_Pipeline_default_instance_;
      v10 = v9[4];
      if (v10)
        v11 = (CoreML **)(v10 + 8);
      else
        v11 = 0;
      v12 = *((int *)v9 + 6);
      if ((_DWORD)v12)
      {
        v13 = 8 * v12;
        while ((CoreML::hasIOS18Features(*v11, a2) & 1) == 0)
        {
          ++v11;
          v13 -= 8;
          if (!v13)
            goto LABEL_38;
        }
        return 1;
      }
    }
LABEL_38:
    v3 = *((_DWORD *)this + 11);
    goto LABEL_39;
  }
  switch(v3)
  {
    case 2001:
      v14 = (_DWORD *)(*((_QWORD *)this + 4) + 64);
LABEL_27:
      LODWORD(v15) = 5;
      return *v14 == (_DWORD)v15;
    case 2000:
      v14 = (_DWORD *)(*((_QWORD *)this + 4) + 32);
      goto LABEL_27;
    case 202:
      v4 = *((_QWORD *)this + 4);
      v5 = *(_QWORD *)(v4 + 32);
      if (v5)
        v6 = (CoreML **)(v5 + 8);
      else
        v6 = 0;
      v7 = *(int *)(v4 + 24);
      if ((_DWORD)v7)
      {
        v8 = 8 * v7;
        while ((CoreML::hasIOS18Features(*v6, a2) & 1) == 0)
        {
          ++v6;
          v8 -= 8;
          if (!v8)
            goto LABEL_38;
        }
        return 1;
      }
      goto LABEL_38;
  }
LABEL_39:
  if (v3 == 502)
  {
    v22 = *((_QWORD *)this + 4);
    std::string::basic_string[abi:ne180100]<0>(__p, "main");
    Helper = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v34, *(_QWORD *)(v22 + 40), (unsigned __int8 *)__p, 0);
    v24 = v34[0];
    if (v33 < 0)
      operator delete(__p[0]);
    if (*((_DWORD *)this + 11) != 502)
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(Helper);
    if (v24)
    {
      v25 = *(uint64_t **)(*(_QWORD *)(v24 + 24) + 128);
      v26 = *((char *)v25 + 23);
      if (v26 < 0)
      {
        if (v25[1] != 7)
          goto LABEL_54;
        v25 = (uint64_t *)*v25;
      }
      else if (v26 != 7)
      {
        goto LABEL_54;
      }
      v27 = *(_DWORD *)v25;
      v28 = *(_DWORD *)((char *)v25 + 3);
      if (v27 == 1701998403 && v28 == 944524645)
        return 1;
    }
  }
LABEL_54:
  v30 = (uint64_t *)*((_QWORD *)this + 2);
  if (!v30)
    v30 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*((_DWORD *)v30 + 24))
    return 1;
  v15 = v30[19];
  v31 = *(char *)(v15 + 23);
  if (v31 < 0)
  {
    v15 = *(_QWORD *)(v15 + 8);
    if (!v15)
    {
LABEL_62:
      v14 = v30 + 3;
      return *v14 == (_DWORD)v15;
    }
  }
  else
  {
    LODWORD(v15) = *(unsigned __int8 *)(v15 + 23);
    if (!(_BYTE)v31)
      goto LABEL_62;
  }
  return 1;
}

BOOL CoreML::hasIOS17Features(CoreML *this, const CoreML::Specification::Model *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  CoreML **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  CoreML **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  CoreML **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *Helper;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  int v27;
  int v28;
  void *__p[2];
  char v31;
  _QWORD v32[4];

  v3 = *((_DWORD *)this + 11);
  if (v3 <= 559)
  {
    switch(v3)
    {
      case 200:
        v11 = *(uint64_t **)(*((_QWORD *)this + 4) + 16);
        if (!v11)
          v11 = &CoreML::Specification::_Pipeline_default_instance_;
        v12 = v11[4];
        if (v12)
          v13 = (CoreML **)(v12 + 8);
        else
          v13 = 0;
        v14 = *((int *)v11 + 6);
        if ((_DWORD)v14)
        {
          v15 = 8 * v14;
          while ((CoreML::hasIOS17Features(*v13, a2) & 1) == 0)
          {
            ++v13;
            v15 -= 8;
            if (!v15)
              goto LABEL_41;
          }
          return 1;
        }
        break;
      case 201:
        v16 = *(uint64_t **)(*((_QWORD *)this + 4) + 16);
        if (!v16)
          v16 = &CoreML::Specification::_Pipeline_default_instance_;
        v17 = v16[4];
        if (v17)
          v18 = (CoreML **)(v17 + 8);
        else
          v18 = 0;
        v19 = *((int *)v16 + 6);
        if ((_DWORD)v19)
        {
          v20 = 8 * v19;
          while ((CoreML::hasIOS17Features(*v18, a2) & 1) == 0)
          {
            ++v18;
            v20 -= 8;
            if (!v20)
              goto LABEL_41;
          }
          return 1;
        }
        break;
      case 202:
        v5 = *((_QWORD *)this + 4);
        v6 = *(_QWORD *)(v5 + 32);
        if (v6)
          v7 = (CoreML **)(v6 + 8);
        else
          v7 = 0;
        v8 = *(int *)(v5 + 24);
        if ((_DWORD)v8)
        {
          v9 = 8 * v8;
          while ((CoreML::hasIOS17Features(*v7, a2) & 1) == 0)
          {
            ++v7;
            v9 -= 8;
            if (!v9)
              goto LABEL_41;
          }
          return 1;
        }
        break;
      default:
        goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v3 > 2000)
  {
    if (v3 == 2001)
    {
      v4 = *(_DWORD *)(*((_QWORD *)this + 4) + 64);
      return v4 == 4;
    }
    if (v3 != 2002)
      goto LABEL_42;
    v10 = *((_QWORD *)this + 4);
    if (*(_DWORD *)(v10 + 28) == 20 && *(_DWORD *)(*(_QWORD *)(v10 + 16) + 16) == 2)
      return 1;
LABEL_41:
    v3 = *((_DWORD *)this + 11);
    goto LABEL_42;
  }
  if (v3 == 560)
    return 1;
  if (v3 == 2000)
  {
    v4 = *(_DWORD *)(*((_QWORD *)this + 4) + 32);
    return v4 == 4;
  }
LABEL_42:
  if (v3 != 502)
    return 0;
  v21 = *((_QWORD *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "main");
  Helper = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v32, *(_QWORD *)(v21 + 40), (unsigned __int8 *)__p, 0);
  v23 = v32[0];
  if (v31 < 0)
    operator delete(__p[0]);
  if (*((_DWORD *)this + 11) != 502)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(Helper);
  if (!v23)
    return 0;
  v24 = *(uint64_t **)(*(_QWORD *)(v23 + 24) + 128);
  v25 = *((char *)v24 + 23);
  if (v25 < 0)
  {
    if (v24[1] != 7)
      return 0;
    v24 = (uint64_t *)*v24;
  }
  else if (v25 != 7)
  {
    return 0;
  }
  v27 = *(_DWORD *)v24;
  v28 = *(_DWORD *)((char *)v24 + 3);
  return v27 == 1701998403 && v28 == 927747429;
}

uint64_t CoreML::hasIOS15Features(CoreML *this, const CoreML::Specification::Model *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  CoreML **v5;
  uint64_t v6;
  uint64_t v7;
  CoreML *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  CoreML **v13;
  uint64_t v14;
  uint64_t v15;
  CoreML *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  CoreML **v20;
  uint64_t v21;
  uint64_t v22;
  CoreML *v23;
  uint64_t v24;

  v2 = *((_DWORD *)this + 11);
  if (v2 > 201)
  {
    switch(v2)
    {
      case 2006:
        return *(_DWORD *)(*((_QWORD *)this + 4) + 28) == 20;
      case 502:
        return 1;
      case 202:
        v3 = *((_QWORD *)this + 4);
        v4 = *(_QWORD *)(v3 + 32);
        v5 = v4 ? (CoreML **)(v4 + 8) : 0;
        v6 = *(int *)(v3 + 24);
        if ((_DWORD)v6)
        {
          v7 = 8 * v6 - 8;
          do
          {
            v8 = *v5++;
            result = CoreML::hasIOS15Features(v8, a2);
            if ((result & 1) != 0)
              break;
            v10 = v7;
            v7 -= 8;
          }
          while (v10);
          return result;
        }
        break;
    }
    return 0;
  }
  if (v2 == 200)
  {
    v18 = *(uint64_t **)(*((_QWORD *)this + 4) + 16);
    if (!v18)
      v18 = &CoreML::Specification::_Pipeline_default_instance_;
    v19 = v18[4];
    if (v19)
      v20 = (CoreML **)(v19 + 8);
    else
      v20 = 0;
    v21 = *((int *)v18 + 6);
    if (!(_DWORD)v21)
      return 0;
    v22 = 8 * v21 - 8;
    do
    {
      v23 = *v20++;
      result = CoreML::hasIOS15Features(v23, a2);
      if ((result & 1) != 0)
        break;
      v24 = v22;
      v22 -= 8;
    }
    while (v24);
  }
  else
  {
    if (v2 != 201)
      return 0;
    v11 = *(uint64_t **)(*((_QWORD *)this + 4) + 16);
    if (!v11)
      v11 = &CoreML::Specification::_Pipeline_default_instance_;
    v12 = v11[4];
    v13 = v12 ? (CoreML **)(v12 + 8) : 0;
    v14 = *((int *)v11 + 6);
    if (!(_DWORD)v14)
      return 0;
    v15 = 8 * v14 - 8;
    do
    {
      v16 = *v13++;
      result = CoreML::hasIOS15Features(v16, a2);
      if ((result & 1) != 0)
        break;
      v17 = v15;
      v15 -= 8;
    }
    while (v17);
  }
  return result;
}

uint64_t CoreML::hasIOS14Features(CoreML *this, const CoreML::Specification::Model *a2)
{
  CoreML *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  CoreML **v6;
  uint64_t v7;
  uint64_t v8;
  CoreML *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  CoreML **v14;
  uint64_t v15;
  uint64_t v16;
  CoreML *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  CoreML **v21;
  uint64_t v22;
  uint64_t v23;
  CoreML *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  unsigned int v43;
  int v44;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v52;
  unsigned int v53;
  const CoreML::Specification::FeatureDescription **v54;
  unsigned int *v55;
  _DWORD *v56;
  int v57;
  int v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  unsigned int *v64;
  const CoreML::Specification::FeatureDescription **v65;
  _DWORD *v66;
  int v67;
  int v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t *v71;
  google::protobuf::Arena *v72;
  uint64_t v73;
  _DWORD *v74;
  google::protobuf::Arena *v75;
  uint64_t v76;
  _DWORD *v77;

  v2 = this;
  v3 = *((_DWORD *)this + 11);
  if (v3 <= 201)
  {
    if (v3 == 200)
    {
      v19 = *(uint64_t **)(*((_QWORD *)this + 4) + 16);
      if (!v19)
        v19 = &CoreML::Specification::_Pipeline_default_instance_;
      v20 = v19[4];
      if (v20)
        v21 = (CoreML **)(v20 + 8);
      else
        v21 = 0;
      v22 = *((int *)v19 + 6);
      if (!(_DWORD)v22)
        goto LABEL_110;
      v23 = 8 * v22 - 8;
      do
      {
        v24 = *v21++;
        LOBYTE(v10) = CoreML::hasIOS14Features(v24, a2);
        if ((v10 & 1) != 0)
          break;
        v25 = v23;
        v23 -= 8;
      }
      while (v25);
      return v10 & 1;
    }
    if (v3 == 201)
    {
      v12 = *(uint64_t **)(*((_QWORD *)this + 4) + 16);
      if (!v12)
        v12 = &CoreML::Specification::_Pipeline_default_instance_;
      v13 = v12[4];
      if (v13)
        v14 = (CoreML **)(v13 + 8);
      else
        v14 = 0;
      v15 = *((int *)v12 + 6);
      if (!(_DWORD)v15)
        goto LABEL_110;
      v16 = 8 * v15 - 8;
      do
      {
        v17 = *v14++;
        LOBYTE(v10) = CoreML::hasIOS14Features(v17, a2);
        if ((v10 & 1) != 0)
          break;
        v18 = v16;
        v16 -= 8;
      }
      while (v18);
      return v10 & 1;
    }
  }
  else
  {
    switch(v3)
    {
      case 3000:
LABEL_109:
        LOBYTE(v10) = 1;
        return v10 & 1;
      case 2001:
        LOBYTE(v10) = *(_DWORD *)(*((_QWORD *)this + 4) + 64) == 3;
        return v10 & 1;
      case 202:
        v4 = *((_QWORD *)this + 4);
        v5 = *(_QWORD *)(v4 + 32);
        if (v5)
          v6 = (CoreML **)(v5 + 8);
        else
          v6 = 0;
        v7 = *(int *)(v4 + 24);
        if ((_DWORD)v7)
        {
          v8 = 8 * v7 - 8;
          do
          {
            v9 = *v6++;
            LOBYTE(v10) = CoreML::hasIOS14Features(v9, a2);
            if ((v10 & 1) != 0)
              break;
            v11 = v8;
            v8 -= 8;
          }
          while (v11);
          return v10 & 1;
        }
LABEL_110:
        LOBYTE(v10) = 0;
        return v10 & 1;
    }
  }
  v26 = (uint64_t *)*((_QWORD *)this + 2);
  if (!v26)
    v26 = &CoreML::Specification::_ModelDescription_default_instance_;
  v27 = v26[4];
  if (v27)
    v28 = v27 + 8;
  else
    v28 = 0;
  v29 = *((int *)v26 + 6);
  if ((_DWORD)v29)
  {
    v30 = 8 * v29;
    do
    {
      v31 = *(uint64_t **)(*(_QWORD *)v28 + 32);
      if (!v31)
        v31 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_BYTE *)v31 + 16))
      {
        if (*((_DWORD *)v31 + 9) == 5)
        {
          v32 = (uint64_t *)v31[3];
        }
        else
        {
          this = (CoreML *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
          v32 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        v33 = *((_DWORD *)v32 + 16);
        v34 = v33 > 0x3D;
        v35 = (1 << v33) & 0x2008020000000000;
        if (!v34 && v35 != 0)
          goto LABEL_109;
      }
      v28 += 8;
      v30 -= 8;
    }
    while (v30);
    v3 = *((_DWORD *)v2 + 11);
  }
  if (v3 == 303 || v3 == 403 || v3 == 500)
  {
    v37 = *((_QWORD *)v2 + 4) + 16;
    v38 = *(_DWORD *)(*((_QWORD *)v2 + 4) + 24);
    if (v38 >= 1)
    {
      v39 = 0;
      while (1)
      {
        v40 = *(_QWORD *)(*(_QWORD *)(v37 + 16) + 8 * v39 + 8);
        v41 = *(_DWORD *)(v40 + 140);
        if (v41 <= 979)
        {
          switch(v41)
          {
            case 140:
              goto LABEL_90;
            case 210:
              v42 = *(uint64_t **)(v40 + 128);
              goto LABEL_80;
            case 345:
              goto LABEL_86;
          }
        }
        else
        {
          if (v41 > 1044)
          {
            if (v41 != 1045)
            {
              v43 = v41 - 1450;
              v34 = v43 > 0x15;
              v44 = (1 << v43) & 0x318C21;
              if (!v34 && v44 != 0)
                goto LABEL_109;
              goto LABEL_102;
            }
            goto LABEL_94;
          }
          if (v41 == 980)
            goto LABEL_98;
          if (v41 == 1000)
          {
            if (*(_DWORD *)(v40 + 24) == 7 || *(_DWORD *)(*(_QWORD *)(v40 + 128) + 112))
              goto LABEL_109;
            this = (CoreML *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
            v42 = &CoreML::Specification::_UpsampleLayerParams_default_instance_;
LABEL_80:
            if (*((_DWORD *)v42 + 16))
              goto LABEL_109;
            if (*(_DWORD *)(v40 + 140) == 210)
            {
              v46 = *(uint64_t **)(v40 + 128);
            }
            else
            {
              this = (CoreML *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
              v46 = &CoreML::Specification::_UpsampleLayerParams_default_instance_;
            }
            if (*((int *)v46 + 10) > 0)
              goto LABEL_109;
            if (*(_DWORD *)(v40 + 140) == 345)
            {
LABEL_86:
              v47 = *(uint64_t **)(v40 + 128);
            }
            else
            {
              this = (CoreML *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
              v47 = &CoreML::Specification::_ReorganizeDataLayerParams_default_instance_;
            }
            if (*((_DWORD *)v47 + 6) == 2)
              goto LABEL_109;
            if (*(_DWORD *)(v40 + 140) == 140)
            {
LABEL_90:
              v48 = *(uint64_t **)(v40 + 128);
            }
            else
            {
              this = (CoreML *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
              v48 = &CoreML::Specification::_InnerProductLayerParams_default_instance_;
            }
            if (*((_BYTE *)v48 + 49))
              goto LABEL_109;
            if (*(_DWORD *)(v40 + 140) == 1045)
            {
LABEL_94:
              v49 = *(uint64_t **)(v40 + 128);
            }
            else
            {
              this = (CoreML *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
              v49 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
            }
            if (*((_BYTE *)v49 + 51))
              goto LABEL_109;
            if (*(_DWORD *)(v40 + 140) == 980)
            {
LABEL_98:
              v50 = *(uint64_t **)(v40 + 128);
            }
            else
            {
              this = (CoreML *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
              v50 = &CoreML::Specification::_ConcatNDLayerParams_default_instance_;
            }
            if (*((_BYTE *)v50 + 24))
              goto LABEL_109;
            v38 = *(_DWORD *)(v37 + 8);
          }
        }
LABEL_102:
        if (++v39 >= v38)
        {
          v3 = *((_DWORD *)v2 + 11);
          break;
        }
      }
    }
  }
  if (v3 != 610)
  {
    if (v3 == 2002)
    {
      if (*(_DWORD *)(*((_QWORD *)v2 + 4) + 28) == 21)
        LOBYTE(v10) = -1;
      else
        LOBYTE(v10) = 0;
      return v10 & 1;
    }
    goto LABEL_110;
  }
  v52 = (uint64_t *)*((_QWORD *)v2 + 2);
  if (!v52)
    v52 = &CoreML::Specification::_ModelDescription_default_instance_;
  v76 = 0;
  v77 = 0;
  v75 = 0;
  v53 = *((_DWORD *)v52 + 6);
  if (!v53)
    goto LABEL_124;
  v54 = (const CoreML::Specification::FeatureDescription **)(v52[4] + 8);
  v55 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v75, v53);
  v56 = v77;
  v57 = v76;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(&v75, (CoreML::Specification::FeatureDescription **)v55, v54, v53, *v77 - v76);
  v58 = v57 + v53;
  LODWORD(v76) = v57 + v53;
  if (*v56 < (signed int)(v57 + v53))
    *v56 = v58;
  if (v58)
  {
    v59 = v56 + 2;
    v60 = 8 * v58;
    while (1)
    {
      v61 = *(uint64_t **)(*(_QWORD *)v59 + 32);
      if (!v61)
        v61 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_DWORD *)v61 + 9) == 5 && *(_DWORD *)(v61[3] + 36) == 65568)
        break;
      v59 += 2;
      v60 -= 8;
      if (!v60)
        goto LABEL_124;
    }
    LOBYTE(v10) = 1;
  }
  else
  {
LABEL_124:
    v62 = (uint64_t *)*((_QWORD *)v2 + 2);
    if (!v62)
      v62 = &CoreML::Specification::_ModelDescription_default_instance_;
    v73 = 0;
    v74 = 0;
    v72 = 0;
    v10 = *((_DWORD *)v62 + 12);
    if (v10)
    {
      v63 = v62[7];
      v64 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v72, *((_DWORD *)v62 + 12));
      v65 = (const CoreML::Specification::FeatureDescription **)(v63 + 8);
      v66 = v74;
      v67 = v73;
      google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(&v72, (CoreML::Specification::FeatureDescription **)v64, v65, v10, *v74 - v73);
      v68 = v67 + v10;
      LODWORD(v73) = v67 + v10;
      if (*v66 < (signed int)(v67 + v10))
        *v66 = v68;
      if (v68)
      {
        v69 = v66 + 2;
        v70 = 8 * v68;
        while (1)
        {
          v71 = *(uint64_t **)(*(_QWORD *)v69 + 32);
          if (!v71)
            v71 = &CoreML::Specification::_FeatureType_default_instance_;
          if (*((_DWORD *)v71 + 9) == 5 && *(_DWORD *)(v71[3] + 36) == 65568)
            break;
          v69 += 2;
          v70 -= 8;
          if (!v70)
            goto LABEL_136;
        }
        LOBYTE(v10) = 1;
      }
      else
      {
LABEL_136:
        LOBYTE(v10) = 0;
      }
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(&v72);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(&v75);
  return v10 & 1;
}

void sub_19C9DC098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CoreML::hasIOS13Features(CoreML *this, const CoreML::Specification::Model *a2)
{
  uint64_t result;
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  CoreML **v9;
  uint64_t v10;
  uint64_t v11;
  CoreML *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  CoreML **v19;
  uint64_t v20;
  uint64_t v21;
  CoreML *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  CoreML **v26;
  uint64_t v27;
  uint64_t v28;
  CoreML *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int isIOS12NeuralNetworkLayer;

  if (*((_BYTE *)this + 28))
    return 1;
  v4 = *((_DWORD *)this + 11);
  result = 1;
  if (v4 > 500)
  {
    switch(v4)
    {
      case 2000:
      case 2004:
      case 2005:
        result = *(_DWORD *)(*((_QWORD *)this + 4) + 32) == 2;
        break;
      case 2001:
      case 2002:
        goto LABEL_61;
      case 2003:
        return result;
      default:
        if (v4 != 501 && v4 != 556)
          goto LABEL_61;
        break;
    }
  }
  else
  {
    if (v4 > 302)
    {
      if (v4 > 403)
      {
        if (v4 == 404)
          return result;
        if (v4 != 500)
        {
LABEL_61:
          if (v4 == 303 || v4 == 403 || v4 == 500)
          {
            v31 = *((_QWORD *)this + 4) + 16;
            if (*(int *)(v31 + 8) >= 1)
            {
              v32 = 0;
              do
              {
                isIOS12NeuralNetworkLayer = CoreML::isIOS12NeuralNetworkLayer(*(_QWORD *)(*(_QWORD *)(v31 + 16)
                                                                                        + 8 * v32
                                                                                        + 8));
                if ((isIOS12NeuralNetworkLayer & 1) == 0)
                  break;
                ++v32;
              }
              while (v32 < *(int *)(v31 + 8));
              return isIOS12NeuralNetworkLayer ^ 1u;
            }
          }
          return 0;
        }
        v14 = *((_QWORD *)this + 4);
        if (*(_DWORD *)(v14 + 72) || *(_DWORD *)(v14 + 76))
          return result;
        result = (uint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)1);
        v15 = &CoreML::Specification::_NeuralNetworkRegressor_default_instance_;
      }
      else
      {
        if (v4 != 303)
        {
          if (v4 != 403)
            goto LABEL_61;
          goto LABEL_9;
        }
        v15 = (uint64_t *)*((_QWORD *)this + 4);
      }
      if (*((_DWORD *)v15 + 18))
        return 1;
      if (*((_DWORD *)this + 11) == 303)
      {
        v16 = (uint64_t *)*((_QWORD *)this + 4);
      }
      else
      {
        result = (uint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)result);
        v16 = &CoreML::Specification::_NeuralNetworkRegressor_default_instance_;
      }
      if (*((_DWORD *)v16 + 19))
        return 1;
      if (*((_DWORD *)this + 11) != 403)
      {
        result = (uint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)result);
        v5 = &CoreML::Specification::_NeuralNetworkClassifier_default_instance_;
LABEL_10:
        if (*((_DWORD *)v5 + 20))
          return 1;
        if (*((_DWORD *)this + 11) == 403)
        {
          v6 = (uint64_t *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)result);
          v6 = &CoreML::Specification::_NeuralNetworkClassifier_default_instance_;
        }
        if (*((_DWORD *)v6 + 21))
          return 1;
        v4 = *((_DWORD *)this + 11);
        goto LABEL_61;
      }
LABEL_9:
      v5 = (uint64_t *)*((_QWORD *)this + 4);
      goto LABEL_10;
    }
    switch(v4)
    {
      case 200:
        v17 = *(uint64_t **)(*((_QWORD *)this + 4) + 16);
        if (!v17)
          v17 = &CoreML::Specification::_Pipeline_default_instance_;
        v18 = v17[4];
        if (v18)
          v19 = (CoreML **)(v18 + 8);
        else
          v19 = 0;
        v20 = *((int *)v17 + 6);
        if (!(_DWORD)v20)
          return 0;
        v21 = 8 * v20 - 8;
        do
        {
          v22 = *v19++;
          result = CoreML::hasIOS13Features(v22, a2);
          if ((result & 1) != 0)
            break;
          v23 = v21;
          v21 -= 8;
        }
        while (v23);
        break;
      case 201:
        v24 = *(uint64_t **)(*((_QWORD *)this + 4) + 16);
        if (!v24)
          v24 = &CoreML::Specification::_Pipeline_default_instance_;
        v25 = v24[4];
        if (v25)
          v26 = (CoreML **)(v25 + 8);
        else
          v26 = 0;
        v27 = *((int *)v24 + 6);
        if (!(_DWORD)v27)
          return 0;
        v28 = 8 * v27 - 8;
        do
        {
          v29 = *v26++;
          result = CoreML::hasIOS13Features(v29, a2);
          if ((result & 1) != 0)
            break;
          v30 = v28;
          v28 -= 8;
        }
        while (v30);
        break;
      case 202:
        v7 = *((_QWORD *)this + 4);
        v8 = *(_QWORD *)(v7 + 32);
        if (v8)
          v9 = (CoreML **)(v8 + 8);
        else
          v9 = 0;
        v10 = *(int *)(v7 + 24);
        if (!(_DWORD)v10)
          return 0;
        v11 = 8 * v10 - 8;
        do
        {
          v12 = *v9++;
          result = CoreML::hasIOS13Features(v12, a2);
          if ((result & 1) != 0)
            break;
          v13 = v11;
          v11 -= 8;
        }
        while (v13);
        break;
      default:
        goto LABEL_61;
    }
  }
  return result;
}

uint64_t CoreML::hasIOS12Features(CoreML *this, const CoreML::Specification::Model *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  CoreML **v6;
  uint64_t v7;
  uint64_t v8;
  CoreML *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  CoreML **v14;
  uint64_t v15;
  uint64_t v16;
  CoreML *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  CoreML **v21;
  uint64_t v22;
  uint64_t v23;
  CoreML *v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  const CoreML::Specification::FeatureDescription **v28;
  unsigned int *v29;
  _DWORD *v30;
  int v31;
  int v32;
  _DWORD *v33;
  uint64_t i;
  uint64_t *v35;
  int v36;
  const CoreML::Specification::Model *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t *v46;
  CoreML *v47;
  google::protobuf::Arena *v48;
  uint64_t v49;
  _DWORD *v50;

  v3 = *((_DWORD *)this + 11);
  switch(v3)
  {
    case 200:
      v12 = *(uint64_t **)(*((_QWORD *)this + 4) + 16);
      if (!v12)
        v12 = &CoreML::Specification::_Pipeline_default_instance_;
      v13 = v12[4];
      if (v13)
        v14 = (CoreML **)(v13 + 8);
      else
        v14 = 0;
      v15 = *((int *)v12 + 6);
      if (!(_DWORD)v15)
        return 0;
      v16 = 8 * v15 - 8;
      do
      {
        v17 = *v14++;
        result = CoreML::hasIOS12Features(v17, a2);
        if ((result & 1) != 0)
          break;
        v18 = v16;
        v16 -= 8;
      }
      while (v18);
      break;
    case 201:
      v19 = *(uint64_t **)(*((_QWORD *)this + 4) + 16);
      if (!v19)
        v19 = &CoreML::Specification::_Pipeline_default_instance_;
      v20 = v19[4];
      if (v20)
        v21 = (CoreML **)(v20 + 8);
      else
        v21 = 0;
      v22 = *((int *)v19 + 6);
      if (!(_DWORD)v22)
        return 0;
      v23 = 8 * v22 - 8;
      do
      {
        v24 = *v21++;
        result = CoreML::hasIOS12Features(v24, a2);
        if ((result & 1) != 0)
          break;
        v25 = v23;
        v23 -= 8;
      }
      while (v25);
      break;
    case 202:
      v4 = *((_QWORD *)this + 4);
      v5 = *(_QWORD *)(v4 + 32);
      if (v5)
        v6 = (CoreML **)(v5 + 8);
      else
        v6 = 0;
      v7 = *(int *)(v4 + 24);
      if ((_DWORD)v7)
      {
        v8 = 8 * v7 - 8;
        do
        {
          v9 = *v6++;
          result = CoreML::hasIOS12Features(v9, a2);
          if ((result & 1) != 0)
            break;
          v11 = v8;
          v8 -= 8;
        }
        while (v11);
        return result;
      }
      return 0;
    default:
      v26 = (uint64_t *)*((_QWORD *)this + 2);
      if (!v26)
        v26 = &CoreML::Specification::_ModelDescription_default_instance_;
      v49 = 0;
      v50 = 0;
      v48 = 0;
      v27 = *((_DWORD *)v26 + 6);
      if (v27)
      {
        v28 = (const CoreML::Specification::FeatureDescription **)(v26[4] + 8);
        v29 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v48, v27);
        v30 = v50;
        v31 = v49;
        google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(&v48, (CoreML::Specification::FeatureDescription **)v29, v28, v27, *v50 - v49);
        v32 = v31 + v27;
        LODWORD(v49) = v31 + v27;
        if (*v30 < (signed int)(v31 + v27))
          *v30 = v32;
        if (v32)
        {
          v33 = v30 + 2;
          for (i = 8 * v32; i; i -= 8)
          {
            v35 = *(uint64_t **)(*(_QWORD *)v33 + 32);
            if (!v35)
              v35 = &CoreML::Specification::_FeatureType_default_instance_;
            v36 = *((_DWORD *)v35 + 9);
            if (v36 == 4)
            {
              if (*(_DWORD *)(v35[3] + 52))
                goto LABEL_49;
            }
            else if (v36 == 5 && *(_DWORD *)(v35[3] + 60))
            {
LABEL_49:
              LOBYTE(v27) = 1;
              goto LABEL_50;
            }
            v33 += 2;
          }
        }
        LOBYTE(v27) = 0;
      }
LABEL_50:
      google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(&v48);
      if ((v27 & 1) != 0)
        return 1;
      v37 = (const CoreML::Specification::Model *)*((unsigned int *)this + 11);
      if ((_DWORD)v37 == 555)
        return 1;
      v38 = (uint64_t *)*((_QWORD *)this + 2);
      if (!v38)
        v38 = &CoreML::Specification::_ModelDescription_default_instance_;
      v39 = *((unsigned int *)v38 + 6);
      if ((int)v39 >= 1)
      {
        v40 = v38[4] + 8;
        do
        {
          v41 = *(uint64_t **)(*(_QWORD *)v40 + 32);
          if (!v41)
            v41 = &CoreML::Specification::_FeatureType_default_instance_;
          if (*((_DWORD *)v41 + 9) == 7 && ((*(_DWORD *)(v41[3] + 36) - 1) & 0xFFFFFFFD) == 0)
            return 1;
          v40 += 8;
        }
        while (--v39);
      }
      v42 = *((unsigned int *)v38 + 12);
      if ((int)v42 >= 1)
      {
        v43 = 0;
        v44 = v38[7] + 8;
        v45 = 1;
        do
        {
          v46 = *(uint64_t **)(*(_QWORD *)(v44 + 8 * v43) + 32);
          if (!v46)
            v46 = &CoreML::Specification::_FeatureType_default_instance_;
          if (*((_DWORD *)v46 + 9) == 7 && ((*(_DWORD *)(v46[3] + 36) - 1) & 0xFFFFFFFD) == 0)
            break;
          v45 = ++v43 < v42;
        }
        while (v42 != v43);
        if (v45)
          return 1;
      }
      if (((_DWORD)v37 - 2000) < 2)
        return 1;
      if ((_DWORD)v37 == 2002)
      {
        v47 = (CoreML *)*((_QWORD *)this + 4);
        if (*((_DWORD *)v47 + 7) == 20 || CoreML::hasWeightOfType((uint64_t)v47, 2002, 2))
          return 1;
      }
      else
      {
        v47 = (CoreML *)*((_QWORD *)this + 4);
        if (CoreML::hasWeightOfType((uint64_t)v47, (int)v37, 2))
          return 1;
        result = 1;
        if ((_DWORD)v37 == 304 || (_DWORD)v37 == 610)
          return result;
      }
      return CoreML::hasIOS12NewNeuralNetworkLayers(v47, v37);
  }
  return result;
}

uint64_t CoreML::hasIOS11_2Features(CoreML *this, const CoreML::Specification::Model *a2)
{
  const CoreML::Specification::Model *v2;
  uint64_t v3;
  uint64_t v4;
  CoreML **v5;
  uint64_t v6;
  uint64_t v7;
  CoreML *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  CoreML **v13;
  uint64_t v14;
  uint64_t v15;
  CoreML *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  CoreML **v20;
  uint64_t v21;
  uint64_t v22;
  CoreML *v23;
  uint64_t v24;
  CoreML *v25;

  v2 = (const CoreML::Specification::Model *)*((unsigned int *)this + 11);
  switch((_DWORD)v2)
  {
    case 0xC8:
      v11 = *(uint64_t **)(*((_QWORD *)this + 4) + 16);
      if (!v11)
        v11 = &CoreML::Specification::_Pipeline_default_instance_;
      v12 = v11[4];
      if (v12)
        v13 = (CoreML **)(v12 + 8);
      else
        v13 = 0;
      v14 = *((int *)v11 + 6);
      if (!(_DWORD)v14)
        return 0;
      v15 = 8 * v14 - 8;
      do
      {
        v16 = *v13++;
        result = CoreML::hasIOS11_2Features(v16, a2);
        if ((result & 1) != 0)
          break;
        v17 = v15;
        v15 -= 8;
      }
      while (v17);
      break;
    case 0xC9:
      v18 = *(uint64_t **)(*((_QWORD *)this + 4) + 16);
      if (!v18)
        v18 = &CoreML::Specification::_Pipeline_default_instance_;
      v19 = v18[4];
      if (v19)
        v20 = (CoreML **)(v19 + 8);
      else
        v20 = 0;
      v21 = *((int *)v18 + 6);
      if (!(_DWORD)v21)
        return 0;
      v22 = 8 * v21 - 8;
      do
      {
        v23 = *v20++;
        result = CoreML::hasIOS11_2Features(v23, a2);
        if ((result & 1) != 0)
          break;
        v24 = v22;
        v22 -= 8;
      }
      while (v24);
      break;
    case 0xCA:
      v3 = *((_QWORD *)this + 4);
      v4 = *(_QWORD *)(v3 + 32);
      if (v4)
        v5 = (CoreML **)(v4 + 8);
      else
        v5 = 0;
      v6 = *(int *)(v3 + 24);
      if ((_DWORD)v6)
      {
        v7 = 8 * v6 - 8;
        do
        {
          v8 = *v5++;
          result = CoreML::hasIOS11_2Features(v8, a2);
          if ((result & 1) != 0)
            break;
          v10 = v7;
          v7 -= 8;
        }
        while (v10);
        return result;
      }
      return 0;
    default:
      v25 = (CoreML *)*((_QWORD *)this + 4);
      return CoreML::hasCustomLayer(v25, v2) || CoreML::hasWeightOfType((uint64_t)v25, (int)v2, 1);
  }
  return result;
}

BOOL CoreML::hasWeightOfType(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  int v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  int v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  int v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  uint64_t v126;
  BOOL v128;
  int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  uint64_t v150;
  BOOL v151;
  BOOL v152;
  uint64_t v154;
  BOOL v157;
  uint64_t v158;
  BOOL v161;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  BOOL v166;
  uint64_t v167;
  BOOL v170;
  uint64_t v172;
  BOOL v173;
  BOOL v174;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  int v188;
  unsigned int v189;
  int v190;
  uint64_t v191;
  BOOL v192;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  int v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v207;
  BOOL v209;
  BOOL v210;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  int v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  BOOL v225;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  int v238;
  int v239;
  unsigned int v240;
  int v241;
  uint64_t v242;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  int v255;
  unsigned int v256;
  unsigned int v257;
  int v258;
  uint64_t v259;
  BOOL v260;
  BOOL v262;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  int v275;
  int v276;
  unsigned int v277;
  int v278;
  uint64_t v279;
  BOOL v280;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  int v293;
  int v294;
  unsigned int v295;
  int v296;
  uint64_t v297;
  BOOL v298;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  int v311;
  int v312;
  unsigned int v313;
  int v314;
  uint64_t v315;
  BOOL v316;
  uint64_t *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  int v329;
  int v330;
  unsigned int v331;
  int v332;
  uint64_t v333;
  BOOL v334;
  uint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  int v347;
  int v348;
  unsigned int v349;
  int v350;
  uint64_t v351;
  BOOL v352;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  int v362;
  unsigned int v363;
  unsigned int v364;
  uint64_t v365;

  if (a2 != 303 && a2 != 403 && a2 != 500)
    return 0;
  v4 = *(unsigned int *)(a1 + 24);
  if ((int)v4 < 1)
    return 0;
  v5 = v4 - 1;
  v6 = *(_QWORD *)(a1 + 32) + 8;
  while (1)
  {
    result = 0;
    v8 = v5;
    v9 = *(_QWORD *)v6;
    v10 = *(_DWORD *)(*(_QWORD *)v6 + 140);
    if (v10 <= 289)
      break;
    if (v10 <= 419)
    {
      if (v10 == 290)
      {
        v47 = *(uint64_t **)(*(_QWORD *)(v9 + 128) + 40);
        goto LABEL_80;
      }
      if (v10 == 400)
      {
        v50 = *(_QWORD **)(v9 + 128);
        v51 = (uint64_t *)v50[3];
        if (!v51)
          v51 = &CoreML::Specification::_WeightParams_default_instance_;
        v52 = v51[5];
        v53 = *(unsigned __int8 *)(v52 + 23);
        if (*(char *)(v52 + 23) < 0)
          v54 = *(_QWORD *)(v52 + 8);
        else
          v54 = *(unsigned __int8 *)(v52 + 23);
        v81 = v51[6];
        v82 = *(unsigned __int8 *)(v81 + 23);
        if (*(char *)(v81 + 23) < 0)
          v83 = *(_QWORD *)(v81 + 8);
        else
          v83 = *(unsigned __int8 *)(v81 + 23);
        v96 = v51[7];
        v97 = *(unsigned __int8 *)(v96 + 23);
        if (*(char *)(v96 + 23) < 0)
          v98 = *(_QWORD *)(v96 + 8);
        else
          v98 = *(unsigned __int8 *)(v96 + 23);
        v120 = *((_DWORD *)v51 + 4);
        if (v120 <= 0)
          v121 = 1;
        else
          v121 = 2;
        if (v54)
          v122 = v121;
        else
          v122 = v120 > 0;
        if (v83)
          ++v122;
        if (v98)
          v123 = v122 + 1;
        else
          v123 = v122;
        if (v123 > 1)
          goto LABEL_575;
        if (v123)
          v124 = 0;
        else
          v124 = 5;
        if (v120 <= 0 && v123 != 0)
        {
          if ((v53 & 0x80) != 0)
            v53 = *(_QWORD *)(v52 + 8);
          if (v53)
            goto LABEL_584;
          if ((v82 & 0x80) != 0)
            v82 = *(_QWORD *)(v81 + 8);
          v126 = v51[8];
          if (v51 != &CoreML::Specification::_WeightParams_default_instance_ && v82 && v126 != 0)
            goto LABEL_590;
          if ((v97 & 0x80) != 0)
            v97 = *(_QWORD *)(v96 + 8);
          v128 = v126 == 0;
          goto LABEL_645;
        }
        goto LABEL_654;
      }
      if (v10 != 410)
        goto LABEL_1027;
      v13 = *(_QWORD **)(v9 + 128);
      v14 = (uint64_t *)v13[5];
      if (!v14)
        v14 = &CoreML::Specification::_WeightParams_default_instance_;
      v15 = v14[5];
      v16 = *(unsigned __int8 *)(v15 + 23);
      if (*(char *)(v15 + 23) < 0)
        v17 = *(_QWORD *)(v15 + 8);
      else
        v17 = *(unsigned __int8 *)(v15 + 23);
      v72 = v14[6];
      v73 = *(unsigned __int8 *)(v72 + 23);
      if (*(char *)(v72 + 23) < 0)
        v74 = *(_QWORD *)(v72 + 8);
      else
        v74 = *(unsigned __int8 *)(v72 + 23);
      v87 = v14[7];
      v88 = *(unsigned __int8 *)(v87 + 23);
      if (*(char *)(v87 + 23) < 0)
        v89 = *(_QWORD *)(v87 + 8);
      else
        v89 = *(unsigned __int8 *)(v87 + 23);
      v102 = *((_DWORD *)v14 + 4);
      if (v102 <= 0)
        v103 = 1;
      else
        v103 = 2;
      if (v17)
        v104 = v103;
      else
        v104 = v102 > 0;
      if (v74)
        ++v104;
      if (v89)
        v105 = v104 + 1;
      else
        v105 = v104;
      if (v105 <= 1)
      {
        if (v105)
          v106 = 0;
        else
          v106 = 5;
        if (v102 <= 0 && v105 != 0)
        {
          if ((v16 & 0x80) != 0)
            v16 = *(_QWORD *)(v15 + 8);
          if (v16)
          {
            v106 = 1;
          }
          else
          {
            if ((v73 & 0x80) != 0)
              v73 = *(_QWORD *)(v72 + 8);
            v163 = v14[8];
            if (v14 == &CoreML::Specification::_WeightParams_default_instance_
              || (v73 ? (v164 = v163 == 0) : (v164 = 1), v164))
            {
              if ((v88 & 0x80) != 0)
                v88 = *(_QWORD *)(v87 + 8);
              if (v163)
                v174 = v88 == 0;
              else
                v174 = 1;
              if (v174 || v14 == &CoreML::Specification::_WeightParams_default_instance_)
                v106 = 5;
              else
                v106 = 3;
            }
            else
            {
              v106 = 2;
            }
          }
        }
      }
      else
      {
        v106 = 4;
      }
      if (v106 == a3)
        return 1;
      v176 = (uint64_t *)v13[6];
      if (!v176)
        v176 = &CoreML::Specification::_WeightParams_default_instance_;
      v177 = v176[5];
      v178 = *(unsigned __int8 *)(v177 + 23);
      if (*(char *)(v177 + 23) < 0)
        v179 = *(_QWORD *)(v177 + 8);
      else
        v179 = *(unsigned __int8 *)(v177 + 23);
      v180 = v176[6];
      v181 = *(unsigned __int8 *)(v180 + 23);
      if (*(char *)(v180 + 23) < 0)
        v182 = *(_QWORD *)(v180 + 8);
      else
        v182 = *(unsigned __int8 *)(v180 + 23);
      v183 = v176[7];
      v184 = *(unsigned __int8 *)(v183 + 23);
      if (*(char *)(v183 + 23) < 0)
        v185 = *(_QWORD *)(v183 + 8);
      else
        v185 = *(unsigned __int8 *)(v183 + 23);
      v186 = *((_DWORD *)v176 + 4);
      if (v186 <= 0)
        v187 = 1;
      else
        v187 = 2;
      if (v179)
        v188 = v187;
      else
        v188 = v186 > 0;
      if (v182)
        ++v188;
      v189 = v185 ? v188 + 1 : v188;
      if (v189 <= 1)
      {
        if (v189)
          v190 = 0;
        else
          v190 = 5;
        if (v186 <= 0 && v189)
        {
          if ((v178 & 0x80) != 0)
            v178 = *(_QWORD *)(v177 + 8);
          if (v178)
          {
            v190 = 1;
          }
          else
          {
            if ((v181 & 0x80) != 0)
              v181 = *(_QWORD *)(v180 + 8);
            v191 = v176[8];
            if (v176 != &CoreML::Specification::_WeightParams_default_instance_ && v181 && v191)
            {
              v190 = 2;
            }
            else
            {
              if ((v184 & 0x80) != 0)
                v184 = *(_QWORD *)(v183 + 8);
              if (v191)
                v225 = v184 == 0;
              else
                v225 = 1;
              if (v225 || v176 == &CoreML::Specification::_WeightParams_default_instance_)
                v190 = 5;
              else
                v190 = 3;
            }
          }
        }
      }
      else
      {
        v190 = 4;
      }
      if (v190 == a3)
        return 1;
      v227 = (uint64_t *)v13[7];
      if (!v227)
        v227 = &CoreML::Specification::_WeightParams_default_instance_;
      v228 = v227[5];
      v229 = *(unsigned __int8 *)(v228 + 23);
      if (*(char *)(v228 + 23) < 0)
        v230 = *(_QWORD *)(v228 + 8);
      else
        v230 = *(unsigned __int8 *)(v228 + 23);
      v231 = v227[6];
      v232 = *(unsigned __int8 *)(v231 + 23);
      if (*(char *)(v231 + 23) < 0)
        v233 = *(_QWORD *)(v231 + 8);
      else
        v233 = *(unsigned __int8 *)(v231 + 23);
      v234 = v227[7];
      v235 = *(unsigned __int8 *)(v234 + 23);
      if (*(char *)(v234 + 23) < 0)
        v236 = *(_QWORD *)(v234 + 8);
      else
        v236 = *(unsigned __int8 *)(v234 + 23);
      v237 = *((_DWORD *)v227 + 4);
      if (v237 <= 0)
        v238 = 1;
      else
        v238 = 2;
      if (v230)
        v239 = v238;
      else
        v239 = v237 > 0;
      if (v233)
        ++v239;
      v240 = v236 ? v239 + 1 : v239;
      if (v240 <= 1)
      {
        if (v240)
          v241 = 0;
        else
          v241 = 5;
        if (v237 <= 0 && v240)
        {
          if ((v229 & 0x80) != 0)
            v229 = *(_QWORD *)(v228 + 8);
          if (v229)
          {
            v241 = 1;
          }
          else
          {
            if ((v232 & 0x80) != 0)
              v232 = *(_QWORD *)(v231 + 8);
            v242 = v227[8];
            if (v227 != &CoreML::Specification::_WeightParams_default_instance_ && v232 && v242)
            {
              v241 = 2;
            }
            else
            {
              if ((v235 & 0x80) != 0)
                v235 = *(_QWORD *)(v234 + 8);
              if (v242)
                v262 = v235 == 0;
              else
                v262 = 1;
              if (v262 || v227 == &CoreML::Specification::_WeightParams_default_instance_)
                v241 = 5;
              else
                v241 = 3;
            }
          }
        }
      }
      else
      {
        v241 = 4;
      }
      if (v241 == a3)
        return 1;
      v264 = (uint64_t *)v13[8];
      if (!v264)
        v264 = &CoreML::Specification::_WeightParams_default_instance_;
      v265 = v264[5];
      v266 = *(unsigned __int8 *)(v265 + 23);
      if (*(char *)(v265 + 23) < 0)
        v267 = *(_QWORD *)(v265 + 8);
      else
        v267 = *(unsigned __int8 *)(v265 + 23);
      v268 = v264[6];
      v269 = *(unsigned __int8 *)(v268 + 23);
      if (*(char *)(v268 + 23) < 0)
        v270 = *(_QWORD *)(v268 + 8);
      else
        v270 = *(unsigned __int8 *)(v268 + 23);
      v271 = v264[7];
      v272 = *(unsigned __int8 *)(v271 + 23);
      if (*(char *)(v271 + 23) < 0)
        v273 = *(_QWORD *)(v271 + 8);
      else
        v273 = *(unsigned __int8 *)(v271 + 23);
      v274 = *((_DWORD *)v264 + 4);
      if (v274 <= 0)
        v275 = 1;
      else
        v275 = 2;
      if (v267)
        v276 = v275;
      else
        v276 = v274 > 0;
      if (v270)
        ++v276;
      v277 = v273 ? v276 + 1 : v276;
      if (v277 <= 1)
      {
        if (v277)
          v278 = 0;
        else
          v278 = 5;
        if (v274 <= 0 && v277)
        {
          if ((v266 & 0x80) != 0)
            v266 = *(_QWORD *)(v265 + 8);
          if (v266)
          {
            v278 = 1;
          }
          else
          {
            if ((v269 & 0x80) != 0)
              v269 = *(_QWORD *)(v268 + 8);
            v279 = v264[8];
            if (v264 != &CoreML::Specification::_WeightParams_default_instance_ && v269 && v279)
            {
              v278 = 2;
            }
            else
            {
              if ((v272 & 0x80) != 0)
                v272 = *(_QWORD *)(v271 + 8);
              if (v279)
                v280 = v272 == 0;
              else
                v280 = 1;
              if (v280 || v264 == &CoreML::Specification::_WeightParams_default_instance_)
                v278 = 5;
              else
                v278 = 3;
            }
          }
        }
      }
      else
      {
        v278 = 4;
      }
      if (v278 == a3)
        return 1;
      v282 = (uint64_t *)v13[9];
      if (!v282)
        v282 = &CoreML::Specification::_WeightParams_default_instance_;
      v283 = v282[5];
      v284 = *(unsigned __int8 *)(v283 + 23);
      if (*(char *)(v283 + 23) < 0)
        v285 = *(_QWORD *)(v283 + 8);
      else
        v285 = *(unsigned __int8 *)(v283 + 23);
      v286 = v282[6];
      v287 = *(unsigned __int8 *)(v286 + 23);
      if (*(char *)(v286 + 23) < 0)
        v288 = *(_QWORD *)(v286 + 8);
      else
        v288 = *(unsigned __int8 *)(v286 + 23);
      v289 = v282[7];
      v290 = *(unsigned __int8 *)(v289 + 23);
      if (*(char *)(v289 + 23) < 0)
        v291 = *(_QWORD *)(v289 + 8);
      else
        v291 = *(unsigned __int8 *)(v289 + 23);
      v292 = *((_DWORD *)v282 + 4);
      if (v292 <= 0)
        v293 = 1;
      else
        v293 = 2;
      if (v285)
        v294 = v293;
      else
        v294 = v292 > 0;
      if (v288)
        ++v294;
      v295 = v291 ? v294 + 1 : v294;
      if (v295 <= 1)
      {
        if (v295)
          v296 = 0;
        else
          v296 = 5;
        if (v292 <= 0 && v295)
        {
          if ((v284 & 0x80) != 0)
            v284 = *(_QWORD *)(v283 + 8);
          if (v284)
          {
            v296 = 1;
          }
          else
          {
            if ((v287 & 0x80) != 0)
              v287 = *(_QWORD *)(v286 + 8);
            v297 = v282[8];
            if (v282 != &CoreML::Specification::_WeightParams_default_instance_ && v287 && v297)
            {
              v296 = 2;
            }
            else
            {
              if ((v290 & 0x80) != 0)
                v290 = *(_QWORD *)(v289 + 8);
              if (v297)
                v298 = v290 == 0;
              else
                v298 = 1;
              if (v298 || v282 == &CoreML::Specification::_WeightParams_default_instance_)
                v296 = 5;
              else
                v296 = 3;
            }
          }
        }
      }
      else
      {
        v296 = 4;
      }
      if (v296 == a3)
        return 1;
      v300 = (uint64_t *)v13[10];
      if (!v300)
        v300 = &CoreML::Specification::_WeightParams_default_instance_;
      v301 = v300[5];
      v302 = *(unsigned __int8 *)(v301 + 23);
      if (*(char *)(v301 + 23) < 0)
        v303 = *(_QWORD *)(v301 + 8);
      else
        v303 = *(unsigned __int8 *)(v301 + 23);
      v304 = v300[6];
      v305 = *(unsigned __int8 *)(v304 + 23);
      if (*(char *)(v304 + 23) < 0)
        v306 = *(_QWORD *)(v304 + 8);
      else
        v306 = *(unsigned __int8 *)(v304 + 23);
      v307 = v300[7];
      v308 = *(unsigned __int8 *)(v307 + 23);
      if (*(char *)(v307 + 23) < 0)
        v309 = *(_QWORD *)(v307 + 8);
      else
        v309 = *(unsigned __int8 *)(v307 + 23);
      v310 = *((_DWORD *)v300 + 4);
      if (v310 <= 0)
        v311 = 1;
      else
        v311 = 2;
      if (v303)
        v312 = v311;
      else
        v312 = v310 > 0;
      if (v306)
        ++v312;
      v313 = v309 ? v312 + 1 : v312;
      if (v313 <= 1)
      {
        if (v313)
          v314 = 0;
        else
          v314 = 5;
        if (v310 <= 0 && v313)
        {
          if ((v302 & 0x80) != 0)
            v302 = *(_QWORD *)(v301 + 8);
          if (v302)
          {
            v314 = 1;
          }
          else
          {
            if ((v305 & 0x80) != 0)
              v305 = *(_QWORD *)(v304 + 8);
            v315 = v300[8];
            if (v300 != &CoreML::Specification::_WeightParams_default_instance_ && v305 && v315)
            {
              v314 = 2;
            }
            else
            {
              if ((v308 & 0x80) != 0)
                v308 = *(_QWORD *)(v307 + 8);
              if (v315)
                v316 = v308 == 0;
              else
                v316 = 1;
              if (v316 || v300 == &CoreML::Specification::_WeightParams_default_instance_)
                v314 = 5;
              else
                v314 = 3;
            }
          }
        }
      }
      else
      {
        v314 = 4;
      }
      if (v314 == a3)
        return 1;
      v318 = (uint64_t *)v13[11];
      if (!v318)
        v318 = &CoreML::Specification::_WeightParams_default_instance_;
      v319 = v318[5];
      v320 = *(unsigned __int8 *)(v319 + 23);
      if (*(char *)(v319 + 23) < 0)
        v321 = *(_QWORD *)(v319 + 8);
      else
        v321 = *(unsigned __int8 *)(v319 + 23);
      v322 = v318[6];
      v323 = *(unsigned __int8 *)(v322 + 23);
      if (*(char *)(v322 + 23) < 0)
        v324 = *(_QWORD *)(v322 + 8);
      else
        v324 = *(unsigned __int8 *)(v322 + 23);
      v325 = v318[7];
      v326 = *(unsigned __int8 *)(v325 + 23);
      if (*(char *)(v325 + 23) < 0)
        v327 = *(_QWORD *)(v325 + 8);
      else
        v327 = *(unsigned __int8 *)(v325 + 23);
      v328 = *((_DWORD *)v318 + 4);
      if (v328 <= 0)
        v329 = 1;
      else
        v329 = 2;
      if (v321)
        v330 = v329;
      else
        v330 = v328 > 0;
      if (v324)
        ++v330;
      v331 = v327 ? v330 + 1 : v330;
      if (v331 <= 1)
      {
        if (v331)
          v332 = 0;
        else
          v332 = 5;
        if (v328 <= 0 && v331)
        {
          if ((v320 & 0x80) != 0)
            v320 = *(_QWORD *)(v319 + 8);
          if (v320)
          {
            v332 = 1;
          }
          else
          {
            if ((v323 & 0x80) != 0)
              v323 = *(_QWORD *)(v322 + 8);
            v333 = v318[8];
            if (v318 != &CoreML::Specification::_WeightParams_default_instance_ && v323 && v333)
            {
              v332 = 2;
            }
            else
            {
              if ((v326 & 0x80) != 0)
                v326 = *(_QWORD *)(v325 + 8);
              if (v333)
                v334 = v326 == 0;
              else
                v334 = 1;
              if (v334 || v318 == &CoreML::Specification::_WeightParams_default_instance_)
                v332 = 5;
              else
                v332 = 3;
            }
          }
        }
      }
      else
      {
        v332 = 4;
      }
      if (v332 == a3)
        return 1;
      v336 = (uint64_t *)v13[12];
      if (!v336)
        v336 = &CoreML::Specification::_WeightParams_default_instance_;
      v337 = v336[5];
      v338 = *(unsigned __int8 *)(v337 + 23);
      if (*(char *)(v337 + 23) < 0)
        v339 = *(_QWORD *)(v337 + 8);
      else
        v339 = *(unsigned __int8 *)(v337 + 23);
      v340 = v336[6];
      v341 = *(unsigned __int8 *)(v340 + 23);
      if (*(char *)(v340 + 23) < 0)
        v342 = *(_QWORD *)(v340 + 8);
      else
        v342 = *(unsigned __int8 *)(v340 + 23);
      v343 = v336[7];
      v344 = *(unsigned __int8 *)(v343 + 23);
      if (*(char *)(v343 + 23) < 0)
        v345 = *(_QWORD *)(v343 + 8);
      else
        v345 = *(unsigned __int8 *)(v343 + 23);
      v346 = *((_DWORD *)v336 + 4);
      if (v346 <= 0)
        v347 = 1;
      else
        v347 = 2;
      if (v339)
        v348 = v347;
      else
        v348 = v346 > 0;
      if (v342)
        ++v348;
      v349 = v345 ? v348 + 1 : v348;
      if (v349 <= 1)
      {
        if (v349)
          v350 = 0;
        else
          v350 = 5;
        if (v346 <= 0 && v349)
        {
          if ((v338 & 0x80) != 0)
            v338 = *(_QWORD *)(v337 + 8);
          if (v338)
          {
            v350 = 1;
          }
          else
          {
            if ((v341 & 0x80) != 0)
              v341 = *(_QWORD *)(v340 + 8);
            v351 = v336[8];
            if (v336 != &CoreML::Specification::_WeightParams_default_instance_ && v341 && v351)
            {
              v350 = 2;
            }
            else
            {
              if ((v344 & 0x80) != 0)
                v344 = *(_QWORD *)(v343 + 8);
              if (v351)
                v352 = v344 == 0;
              else
                v352 = 1;
              if (v352 || v336 == &CoreML::Specification::_WeightParams_default_instance_)
                v350 = 5;
              else
                v350 = 3;
            }
          }
        }
      }
      else
      {
        v350 = 4;
      }
      if (v350 == a3)
        return 1;
      v47 = (uint64_t *)v13[13];
      goto LABEL_975;
    }
    if (v10 > 1039)
    {
      if (v10 != 1040 && v10 != 1045)
        goto LABEL_1027;
LABEL_34:
      v23 = *(_QWORD *)(v9 + 128);
      v24 = *(uint64_t **)(v23 + 16);
      if (!v24)
        v24 = &CoreML::Specification::_WeightParams_default_instance_;
      v25 = v24[5];
      if (*(char *)(v25 + 23) < 0)
        v26 = *(_QWORD *)(v25 + 8);
      else
        v26 = *(unsigned __int8 *)(v25 + 23);
      v27 = v24[6];
      v28 = *(unsigned __int8 *)(v27 + 23);
      if (*(char *)(v27 + 23) < 0)
        v29 = *(_QWORD *)(v27 + 8);
      else
        v29 = *(unsigned __int8 *)(v27 + 23);
      v30 = v24[7];
      v31 = *(unsigned __int8 *)(v30 + 23);
      if (*(char *)(v30 + 23) < 0)
        v32 = *(_QWORD *)(v30 + 8);
      else
        v32 = *(unsigned __int8 *)(v30 + 23);
      v33 = *((_DWORD *)v24 + 4);
      if (v33 <= 0)
        v34 = 1;
      else
        v34 = 2;
      if (v26)
        v35 = v34;
      else
        v35 = v33 > 0;
      if (v29)
        ++v35;
      if (v32)
        v36 = v35 + 1;
      else
        v36 = v35;
      if (v36 > 1)
      {
        v37 = 4;
LABEL_342:
        if (v37 == a3)
          return 1;
        v47 = *(uint64_t **)(v23 + 24);
        goto LABEL_975;
      }
      if (v36)
        v37 = 0;
      else
        v37 = 5;
      if (v33 > 0 || v36 == 0)
        goto LABEL_342;
      if ((*(_BYTE *)(v25 + 23) & 0x80) != 0)
      {
        if (*(_QWORD *)(v25 + 8))
          goto LABEL_67;
      }
      else if (*(_BYTE *)(v25 + 23))
      {
LABEL_67:
        v37 = 1;
        goto LABEL_342;
      }
      if ((v28 & 0x80) != 0)
        v28 = *(_QWORD *)(v27 + 8);
      v150 = v24[8];
      if (v24 == &CoreML::Specification::_WeightParams_default_instance_
        || (v28 ? (v151 = v150 == 0) : (v151 = 1), v151))
      {
        if ((v31 & 0x80) != 0)
          v31 = *(_QWORD *)(v30 + 8);
        if (v150)
          v152 = v31 == 0;
        else
          v152 = 1;
        if (v152 || v24 == &CoreML::Specification::_WeightParams_default_instance_)
          v37 = 5;
        else
          v37 = 3;
      }
      else
      {
        v37 = 2;
      }
      goto LABEL_342;
    }
    if (v10 == 420)
    {
      v39 = *(uint64_t **)(*(_QWORD *)(v9 + 128) + 48);
      if (v39)
        v12 = v39;
      else
        v12 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
    }
    else
    {
      if (v10 != 430)
        goto LABEL_1027;
      v11 = *(_QWORD *)(*(_QWORD *)(v9 + 128) + 80);
      if (hasLSTMWeightParamOfType(*(_QWORD **)(v11 + 8), a3))
        return 1;
      v12 = *(uint64_t **)(v11 + 16);
    }
    result = hasLSTMWeightParamOfType(v12, a3);
LABEL_1027:
    if (!result)
    {
      v5 = v8 - 1;
      v6 += 8;
      if (v8)
        continue;
    }
    return result;
  }
  if (v10 <= 149)
  {
    switch(v10)
    {
      case 100:
        v40 = *(_QWORD *)(v9 + 128);
        v41 = *(uint64_t **)(v40 + 112);
        if (!v41)
          v41 = &CoreML::Specification::_WeightParams_default_instance_;
        v42 = v41[5];
        v43 = *(unsigned __int8 *)(v42 + 23);
        if (*(char *)(v42 + 23) < 0)
          v44 = *(_QWORD *)(v42 + 8);
        else
          v44 = *(unsigned __int8 *)(v42 + 23);
        v78 = v41[6];
        v79 = *(unsigned __int8 *)(v78 + 23);
        if (*(char *)(v78 + 23) < 0)
          v80 = *(_QWORD *)(v78 + 8);
        else
          v80 = *(unsigned __int8 *)(v78 + 23);
        v93 = v41[7];
        v94 = *(unsigned __int8 *)(v93 + 23);
        if (*(char *)(v93 + 23) < 0)
          v95 = *(_QWORD *)(v93 + 8);
        else
          v95 = *(unsigned __int8 *)(v93 + 23);
        v114 = *((_DWORD *)v41 + 4);
        if (v114 <= 0)
          v115 = 1;
        else
          v115 = 2;
        if (v44)
          v116 = v115;
        else
          v116 = v114 > 0;
        if (v80)
          ++v116;
        if (v95)
          v117 = v116 + 1;
        else
          v117 = v116;
        if (v117 <= 1)
        {
          if (v117)
            v118 = 0;
          else
            v118 = 5;
          if (v114 <= 0 && v117 != 0)
          {
            if ((v43 & 0x80) != 0)
              v43 = *(_QWORD *)(v42 + 8);
            if (v43)
            {
              v118 = 1;
            }
            else
            {
              if ((v79 & 0x80) != 0)
                v79 = *(_QWORD *)(v78 + 8);
              v167 = v41[8];
              if (v41 == &CoreML::Specification::_WeightParams_default_instance_ || v79 == 0 || v167 == 0)
              {
                if ((v94 & 0x80) != 0)
                  v94 = *(_QWORD *)(v93 + 8);
                if (v167)
                  v170 = v94 == 0;
                else
                  v170 = 1;
                if (v170 || v41 == &CoreML::Specification::_WeightParams_default_instance_)
                  v118 = 5;
                else
                  v118 = 3;
              }
              else
              {
                v118 = 2;
              }
            }
          }
        }
        else
        {
          v118 = 4;
        }
        if (v118 == a3)
          return 1;
        v47 = *(uint64_t **)(v40 + 120);
        goto LABEL_495;
      case 130:
        v45 = *(_QWORD *)(v9 + 128);
        v46 = *(_DWORD *)(v45 + 28);
        if (v46 != 71)
        {
          if (v46 != 25)
          {
            result = 0;
            goto LABEL_1027;
          }
          v47 = *(uint64_t **)(*(_QWORD *)(v45 + 16) + 16);
LABEL_80:
          if (!v47)
            v47 = &CoreML::Specification::_WeightParams_default_instance_;
          v48 = v47[5];
          if (*(char *)(v48 + 23) < 0)
            v49 = *(_QWORD *)(v48 + 8);
          else
            v49 = *(unsigned __int8 *)(v48 + 23);
          v60 = v47[6];
          v61 = *(unsigned __int8 *)(v60 + 23);
          if (*(char *)(v60 + 23) < 0)
            v62 = *(_QWORD *)(v60 + 8);
          else
            v62 = *(unsigned __int8 *)(v60 + 23);
          v63 = v47[7];
          v64 = *(unsigned __int8 *)(v63 + 23);
          if (*(char *)(v63 + 23) < 0)
            v65 = *(_QWORD *)(v63 + 8);
          else
            v65 = *(unsigned __int8 *)(v63 + 23);
          v66 = *((_DWORD *)v47 + 4);
          if (v66 <= 0)
            v67 = 1;
          else
            v67 = 2;
          if (v49)
            v68 = v67;
          else
            v68 = v66 > 0;
          if (v62)
            ++v68;
          if (v65)
            v69 = v68 + 1;
          else
            v69 = v68;
          if (v69 <= 1)
          {
            if (v69)
              v70 = 0;
            else
              v70 = 5;
            if (v66 > 0 || v69 == 0)
              goto LABEL_1026;
            if ((*(_BYTE *)(v48 + 23) & 0x80) != 0)
            {
              if (!*(_QWORD *)(v48 + 8))
                goto LABEL_345;
            }
            else if (!*(_BYTE *)(v48 + 23))
            {
LABEL_345:
              if ((v61 & 0x80) != 0)
                v61 = *(_QWORD *)(v60 + 8);
              v154 = v47[8];
              if (v47 != &CoreML::Specification::_WeightParams_default_instance_ && v61 != 0 && v154 != 0)
                goto LABEL_1013;
              if ((v64 & 0x80) != 0)
                v64 = *(_QWORD *)(v63 + 8);
              if (v154)
                v157 = v64 == 0;
              else
                v157 = 1;
LABEL_1020:
              if (v157 || v47 == &CoreML::Specification::_WeightParams_default_instance_)
                v70 = 5;
              else
                v70 = 3;
LABEL_1026:
              result = v70 == a3;
              goto LABEL_1027;
            }
LABEL_1006:
            v70 = 1;
            goto LABEL_1026;
          }
LABEL_998:
          v70 = 4;
          goto LABEL_1026;
        }
        v55 = *(_QWORD *)(v45 + 16);
LABEL_287:
        v135 = *(uint64_t **)(v55 + 16);
        if (!v135)
          v135 = &CoreML::Specification::_WeightParams_default_instance_;
        v136 = v135[5];
        if (*(char *)(v136 + 23) < 0)
          v137 = *(_QWORD *)(v136 + 8);
        else
          v137 = *(unsigned __int8 *)(v136 + 23);
        v138 = v135[6];
        v139 = *(unsigned __int8 *)(v138 + 23);
        if (*(char *)(v138 + 23) < 0)
          v140 = *(_QWORD *)(v138 + 8);
        else
          v140 = *(unsigned __int8 *)(v138 + 23);
        v141 = v135[7];
        v142 = *(unsigned __int8 *)(v141 + 23);
        if (*(char *)(v141 + 23) < 0)
          v143 = *(_QWORD *)(v141 + 8);
        else
          v143 = *(unsigned __int8 *)(v141 + 23);
        v144 = *((_DWORD *)v135 + 4);
        if (v144 <= 0)
          v145 = 1;
        else
          v145 = 2;
        if (v137)
          v146 = v145;
        else
          v146 = v144 > 0;
        if (v140)
          ++v146;
        if (v143)
          v147 = v146 + 1;
        else
          v147 = v146;
        if (v147 > 1)
        {
          v148 = 4;
          goto LABEL_427;
        }
        if (v147)
          v148 = 0;
        else
          v148 = 5;
        if (v144 <= 0 && v147 != 0)
        {
          if ((*(_BYTE *)(v136 + 23) & 0x80) != 0)
          {
            if (!*(_QWORD *)(v136 + 8))
              goto LABEL_361;
LABEL_320:
            v148 = 1;
          }
          else
          {
            if (*(_BYTE *)(v136 + 23))
              goto LABEL_320;
LABEL_361:
            if ((v139 & 0x80) != 0)
              v139 = *(_QWORD *)(v138 + 8);
            v158 = v135[8];
            if (v135 == &CoreML::Specification::_WeightParams_default_instance_ || v139 == 0 || v158 == 0)
            {
              if ((v142 & 0x80) != 0)
                v142 = *(_QWORD *)(v141 + 8);
              if (v158)
                v161 = v142 == 0;
              else
                v161 = 1;
              if (v161 || v135 == &CoreML::Specification::_WeightParams_default_instance_)
                v148 = 5;
              else
                v148 = 3;
            }
            else
            {
              v148 = 2;
            }
          }
        }
LABEL_427:
        if (v148 == a3)
          return 1;
        v47 = *(uint64_t **)(v55 + 24);
LABEL_495:
        if (!v47)
          v47 = &CoreML::Specification::_WeightParams_default_instance_;
        v194 = v47[5];
        if (*(char *)(v194 + 23) < 0)
          v195 = *(_QWORD *)(v194 + 8);
        else
          v195 = *(unsigned __int8 *)(v194 + 23);
        v196 = v47[6];
        v197 = *(unsigned __int8 *)(v196 + 23);
        if (*(char *)(v196 + 23) < 0)
          v198 = *(_QWORD *)(v196 + 8);
        else
          v198 = *(unsigned __int8 *)(v196 + 23);
        v199 = v47[7];
        v200 = *(unsigned __int8 *)(v199 + 23);
        if (*(char *)(v199 + 23) < 0)
          v201 = *(_QWORD *)(v199 + 8);
        else
          v201 = *(unsigned __int8 *)(v199 + 23);
        v202 = *((_DWORD *)v47 + 4);
        if (v202 <= 0)
          v203 = 1;
        else
          v203 = 2;
        if (v195)
          v204 = v203;
        else
          v204 = v202 > 0;
        if (v198)
          ++v204;
        if (v201)
          v205 = v204 + 1;
        else
          v205 = v204;
        if (v205 > 1)
          goto LABEL_998;
        if (v205)
          v70 = 0;
        else
          v70 = 5;
        if (v202 > 0 || v205 == 0)
          goto LABEL_1026;
        if ((*(_BYTE *)(v194 + 23) & 0x80) != 0)
        {
          if (*(_QWORD *)(v194 + 8))
            goto LABEL_1006;
        }
        else if (*(_BYTE *)(v194 + 23))
        {
          goto LABEL_1006;
        }
        if ((v197 & 0x80) != 0)
          v197 = *(_QWORD *)(v196 + 8);
        v207 = v47[8];
        if (v47 != &CoreML::Specification::_WeightParams_default_instance_ && v197 && v207 != 0)
        {
LABEL_1013:
          v70 = 2;
          goto LABEL_1026;
        }
        if ((v200 & 0x80) != 0)
          v200 = *(_QWORD *)(v199 + 8);
        v209 = v207 == 0;
LABEL_1017:
        v157 = v209 || v200 == 0;
        goto LABEL_1020;
      case 140:
        goto LABEL_34;
    }
    goto LABEL_1027;
  }
  if (v10 == 150)
  {
    v55 = *(_QWORD *)(v9 + 128);
    goto LABEL_287;
  }
  if (v10 != 160)
  {
    if (v10 != 245)
      goto LABEL_1027;
    v18 = *(_QWORD *)(v9 + 128);
    v19 = *(uint64_t **)(v18 + 64);
    if (!v19)
      v19 = &CoreML::Specification::_WeightParams_default_instance_;
    v20 = v19[5];
    v21 = *(unsigned __int8 *)(v20 + 23);
    if (*(char *)(v20 + 23) < 0)
      v22 = *(_QWORD *)(v20 + 8);
    else
      v22 = *(unsigned __int8 *)(v20 + 23);
    v75 = v19[6];
    v76 = *(unsigned __int8 *)(v75 + 23);
    if (*(char *)(v75 + 23) < 0)
      v77 = *(_QWORD *)(v75 + 8);
    else
      v77 = *(unsigned __int8 *)(v75 + 23);
    v90 = v19[7];
    v91 = *(unsigned __int8 *)(v90 + 23);
    if (*(char *)(v90 + 23) < 0)
      v92 = *(_QWORD *)(v90 + 8);
    else
      v92 = *(unsigned __int8 *)(v90 + 23);
    v108 = *((_DWORD *)v19 + 4);
    if (v108 <= 0)
      v109 = 1;
    else
      v109 = 2;
    if (v22)
      v110 = v109;
    else
      v110 = v108 > 0;
    if (v77)
      ++v110;
    if (v92)
      v111 = v110 + 1;
    else
      v111 = v110;
    if (v111 <= 1)
    {
      if (v111)
        v112 = 0;
      else
        v112 = 5;
      if (v108 <= 0 && v111 != 0)
      {
        if ((v21 & 0x80) != 0)
          v21 = *(_QWORD *)(v20 + 8);
        if (v21)
        {
          v112 = 1;
        }
        else
        {
          if ((v76 & 0x80) != 0)
            v76 = *(_QWORD *)(v75 + 8);
          v165 = v19[8];
          if (v19 == &CoreML::Specification::_WeightParams_default_instance_
            || (v76 ? (v166 = v165 == 0) : (v166 = 1), v166))
          {
            if ((v91 & 0x80) != 0)
              v91 = *(_QWORD *)(v90 + 8);
            if (v165)
              v192 = v91 == 0;
            else
              v192 = 1;
            if (v192 || v19 == &CoreML::Specification::_WeightParams_default_instance_)
              v112 = 5;
            else
              v112 = 3;
          }
          else
          {
            v112 = 2;
          }
        }
      }
    }
    else
    {
      v112 = 4;
    }
    if (v112 == a3)
      return 1;
    v47 = *(uint64_t **)(v18 + 72);
    goto LABEL_975;
  }
  v50 = *(_QWORD **)(v9 + 128);
  v56 = (uint64_t *)v50[2];
  if (!v56)
    v56 = &CoreML::Specification::_WeightParams_default_instance_;
  v57 = v56[5];
  v58 = *(unsigned __int8 *)(v57 + 23);
  if (*(char *)(v57 + 23) < 0)
    v59 = *(_QWORD *)(v57 + 8);
  else
    v59 = *(unsigned __int8 *)(v57 + 23);
  v84 = v56[6];
  v85 = *(unsigned __int8 *)(v84 + 23);
  if (*(char *)(v84 + 23) < 0)
    v86 = *(_QWORD *)(v84 + 8);
  else
    v86 = *(unsigned __int8 *)(v84 + 23);
  v99 = v56[7];
  v100 = *(unsigned __int8 *)(v99 + 23);
  if (*(char *)(v99 + 23) < 0)
    v101 = *(_QWORD *)(v99 + 8);
  else
    v101 = *(unsigned __int8 *)(v99 + 23);
  v129 = *((_DWORD *)v56 + 4);
  if (v129 <= 0)
    v130 = 1;
  else
    v130 = 2;
  if (v59)
    v131 = v130;
  else
    v131 = v129 > 0;
  if (v86)
    ++v131;
  if (v101)
    v132 = v131 + 1;
  else
    v132 = v131;
  if (v132 <= 1)
  {
    if (v132)
      v133 = 0;
    else
      v133 = 5;
    if (v129 <= 0 && v132 != 0)
    {
      if ((v58 & 0x80) != 0)
        v58 = *(_QWORD *)(v57 + 8);
      if (v58)
      {
        v133 = 1;
      }
      else
      {
        if ((v85 & 0x80) != 0)
          v85 = *(_QWORD *)(v84 + 8);
        v172 = v56[8];
        if (v56 == &CoreML::Specification::_WeightParams_default_instance_
          || (v85 ? (v173 = v172 == 0) : (v173 = 1), v173))
        {
          if ((v100 & 0x80) != 0)
            v100 = *(_QWORD *)(v99 + 8);
          if (v172)
            v210 = v100 == 0;
          else
            v210 = 1;
          if (v210 || v56 == &CoreML::Specification::_WeightParams_default_instance_)
            v133 = 5;
          else
            v133 = 3;
        }
        else
        {
          v133 = 2;
        }
      }
    }
  }
  else
  {
    v133 = 4;
  }
  if (v133 != a3)
  {
    v51 = (uint64_t *)v50[3];
    if (!v51)
      v51 = &CoreML::Specification::_WeightParams_default_instance_;
    v212 = v51[5];
    v213 = *(unsigned __int8 *)(v212 + 23);
    if (*(char *)(v212 + 23) < 0)
      v214 = *(_QWORD *)(v212 + 8);
    else
      v214 = *(unsigned __int8 *)(v212 + 23);
    v215 = v51[6];
    v216 = *(unsigned __int8 *)(v215 + 23);
    if (*(char *)(v215 + 23) < 0)
      v217 = *(_QWORD *)(v215 + 8);
    else
      v217 = *(unsigned __int8 *)(v215 + 23);
    v218 = v51[7];
    v97 = *(unsigned __int8 *)(v218 + 23);
    if (*(char *)(v218 + 23) < 0)
      v219 = *(_QWORD *)(v218 + 8);
    else
      v219 = *(unsigned __int8 *)(v218 + 23);
    v220 = *((_DWORD *)v51 + 4);
    if (v220 <= 0)
      v221 = 1;
    else
      v221 = 2;
    if (v214)
      v222 = v221;
    else
      v222 = v220 > 0;
    if (v217)
      ++v222;
    if (v219)
      v223 = v222 + 1;
    else
      v223 = v222;
    if (v223 > 1)
    {
LABEL_575:
      v124 = 4;
      goto LABEL_654;
    }
    if (v223)
      v124 = 0;
    else
      v124 = 5;
    if (v220 <= 0 && v223)
    {
      if ((v213 & 0x80) != 0)
        v213 = *(_QWORD *)(v212 + 8);
      if (v213)
      {
LABEL_584:
        v124 = 1;
        goto LABEL_654;
      }
      if ((v216 & 0x80) != 0)
        v216 = *(_QWORD *)(v215 + 8);
      v224 = v51[8];
      if (v51 != &CoreML::Specification::_WeightParams_default_instance_ && v216 && v224)
      {
LABEL_590:
        v124 = 2;
        goto LABEL_654;
      }
      if ((v97 & 0x80) != 0)
        v97 = *(_QWORD *)(v218 + 8);
      v128 = v224 == 0;
LABEL_645:
      if (v128 || v97 == 0 || v51 == &CoreML::Specification::_WeightParams_default_instance_)
        v124 = 5;
      else
        v124 = 3;
    }
LABEL_654:
    if (v124 == a3)
      return 1;
    v245 = (uint64_t *)v50[4];
    if (!v245)
      v245 = &CoreML::Specification::_WeightParams_default_instance_;
    v246 = v245[5];
    if (*(char *)(v246 + 23) < 0)
      v247 = *(_QWORD *)(v246 + 8);
    else
      v247 = *(unsigned __int8 *)(v246 + 23);
    v248 = v245[6];
    v249 = *(unsigned __int8 *)(v248 + 23);
    if (*(char *)(v248 + 23) < 0)
      v250 = *(_QWORD *)(v248 + 8);
    else
      v250 = *(unsigned __int8 *)(v248 + 23);
    v251 = v245[7];
    v252 = *(unsigned __int8 *)(v251 + 23);
    if (*(char *)(v251 + 23) < 0)
      v253 = *(_QWORD *)(v251 + 8);
    else
      v253 = *(unsigned __int8 *)(v251 + 23);
    v254 = *((_DWORD *)v245 + 4);
    if (v254 <= 0)
      v255 = 1;
    else
      v255 = 2;
    if (v247)
      v256 = v255;
    else
      v256 = v254 > 0;
    if (v250)
      ++v256;
    if (v253)
      v257 = v256 + 1;
    else
      v257 = v256;
    if (v257 > 1)
    {
      v258 = 4;
      goto LABEL_705;
    }
    if (v257)
      v258 = 0;
    else
      v258 = 5;
    if (v254 <= 0 && v257)
    {
      if ((*(_BYTE *)(v246 + 23) & 0x80) != 0)
      {
        if (!*(_QWORD *)(v246 + 8))
          goto LABEL_688;
LABEL_686:
        v258 = 1;
      }
      else
      {
        if (*(_BYTE *)(v246 + 23))
          goto LABEL_686;
LABEL_688:
        if ((v249 & 0x80) != 0)
          v249 = *(_QWORD *)(v248 + 8);
        v259 = v245[8];
        if (v245 != &CoreML::Specification::_WeightParams_default_instance_ && v249 && v259)
        {
          v258 = 2;
        }
        else
        {
          if ((v252 & 0x80) != 0)
            v252 = *(_QWORD *)(v251 + 8);
          if (v259)
            v260 = v252 == 0;
          else
            v260 = 1;
          if (v260 || v245 == &CoreML::Specification::_WeightParams_default_instance_)
            v258 = 5;
          else
            v258 = 3;
        }
      }
    }
LABEL_705:
    if (v258 == a3)
      return 1;
    v47 = (uint64_t *)v50[5];
LABEL_975:
    if (!v47)
      v47 = &CoreML::Specification::_WeightParams_default_instance_;
    v354 = v47[5];
    if (*(char *)(v354 + 23) < 0)
      v355 = *(_QWORD *)(v354 + 8);
    else
      v355 = *(unsigned __int8 *)(v354 + 23);
    v356 = v47[6];
    v357 = *(unsigned __int8 *)(v356 + 23);
    if (*(char *)(v356 + 23) < 0)
      v358 = *(_QWORD *)(v356 + 8);
    else
      v358 = *(unsigned __int8 *)(v356 + 23);
    v359 = v47[7];
    v200 = *(unsigned __int8 *)(v359 + 23);
    if (*(char *)(v359 + 23) < 0)
      v360 = *(_QWORD *)(v359 + 8);
    else
      v360 = *(unsigned __int8 *)(v359 + 23);
    v361 = *((_DWORD *)v47 + 4);
    if (v361 <= 0)
      v362 = 1;
    else
      v362 = 2;
    if (v355)
      v363 = v362;
    else
      v363 = v361 > 0;
    if (v358)
      ++v363;
    if (v360)
      v364 = v363 + 1;
    else
      v364 = v363;
    if (v364 > 1)
      goto LABEL_998;
    if (v364)
      v70 = 0;
    else
      v70 = 5;
    if (v361 > 0 || !v364)
      goto LABEL_1026;
    if ((*(_BYTE *)(v354 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v354 + 8))
        goto LABEL_1006;
    }
    else if (*(_BYTE *)(v354 + 23))
    {
      goto LABEL_1006;
    }
    if ((v357 & 0x80) != 0)
      v357 = *(_QWORD *)(v356 + 8);
    v365 = v47[8];
    if (v47 != &CoreML::Specification::_WeightParams_default_instance_ && v357 && v365)
      goto LABEL_1013;
    if ((v200 & 0x80) != 0)
      v200 = *(_QWORD *)(v359 + 8);
    v209 = v365 == 0;
    goto LABEL_1017;
  }
  return 1;
}

BOOL isWeightParamOfType(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  BOOL v16;

  v2 = a1[5];
  if (*(char *)(v2 + 23) < 0)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = *(unsigned __int8 *)(v2 + 23);
  v4 = a1[6];
  v5 = *(unsigned __int8 *)(v4 + 23);
  if (*(char *)(v4 + 23) < 0)
    v6 = *(_QWORD *)(v4 + 8);
  else
    v6 = *(unsigned __int8 *)(v4 + 23);
  v7 = *((_DWORD *)a1 + 4);
  v8 = a1[7];
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
    v10 = *(_QWORD *)(v8 + 8);
  else
    v10 = *(unsigned __int8 *)(v8 + 23);
  if (v7 <= 0)
    v11 = 1;
  else
    v11 = 2;
  if (v3)
    v12 = v11;
  else
    v12 = v7 > 0;
  if (v6)
    ++v12;
  if (v10)
    v13 = v12 + 1;
  else
    v13 = v12;
  if (v13 > 1)
  {
    v14 = 4;
    return v14 == a2;
  }
  if (v13)
    v14 = 0;
  else
    v14 = 5;
  if (v7 <= 0 && v13)
  {
    if ((*(_BYTE *)(v2 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v2 + 8))
        goto LABEL_30;
    }
    else if (*(_BYTE *)(v2 + 23))
    {
LABEL_30:
      v14 = 1;
      return v14 == a2;
    }
    if ((v5 & 0x80) != 0)
      v5 = *(_QWORD *)(v4 + 8);
    v15 = a1[8];
    if (a1 != &CoreML::Specification::_WeightParams_default_instance_ && v5 && v15)
    {
      v14 = 2;
    }
    else
    {
      if ((v9 & 0x80) != 0)
        v9 = *(_QWORD *)(v8 + 8);
      if (v15)
        v16 = v9 == 0;
      else
        v16 = 1;
      if (v16 || a1 == &CoreML::Specification::_WeightParams_default_instance_)
        v14 = 5;
      else
        v14 = 3;
    }
  }
  return v14 == a2;
}

BOOL hasLSTMWeightParamOfType(_QWORD *a1, int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  BOOL v39;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  BOOL v57;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  BOOL v75;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  BOOL v93;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  BOOL v111;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v122;

  v4 = (uint64_t *)a1[2];
  if (!v4)
    v4 = &CoreML::Specification::_WeightParams_default_instance_;
  v5 = v4[5];
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = v4[6];
  v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0)
    v9 = *(_QWORD *)(v7 + 8);
  else
    v9 = *(unsigned __int8 *)(v7 + 23);
  v10 = *((_DWORD *)v4 + 4);
  v11 = v4[7];
  v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
    v13 = *(_QWORD *)(v11 + 8);
  else
    v13 = *(unsigned __int8 *)(v11 + 23);
  if (v10 <= 0)
    v14 = 1;
  else
    v14 = 2;
  if (v6)
    v15 = v14;
  else
    v15 = v10 > 0;
  if (v9)
    ++v15;
  if (v13)
    v16 = v15 + 1;
  else
    v16 = v15;
  if (v16 > 1)
  {
    v17 = 4;
    goto LABEL_55;
  }
  if (v16)
    v17 = 0;
  else
    v17 = 5;
  if (v10 > 0 || v16 == 0)
    goto LABEL_55;
  if ((*(_BYTE *)(v5 + 23) & 0x80) != 0)
  {
    if (*(_QWORD *)(v5 + 8))
      goto LABEL_34;
  }
  else if (*(_BYTE *)(v5 + 23))
  {
LABEL_34:
    v17 = 1;
    goto LABEL_55;
  }
  if ((v8 & 0x80) != 0)
    v8 = *(_QWORD *)(v7 + 8);
  v19 = v4[8];
  if (v4 == &CoreML::Specification::_WeightParams_default_instance_ || (v8 ? (v20 = v19 == 0) : (v20 = 1), v20))
  {
    if ((v12 & 0x80) != 0)
      v12 = *(_QWORD *)(v11 + 8);
    if (v19)
      v21 = v12 == 0;
    else
      v21 = 1;
    if (v21 || v4 == &CoreML::Specification::_WeightParams_default_instance_)
      v17 = 5;
    else
      v17 = 3;
  }
  else
  {
    v17 = 2;
  }
LABEL_55:
  if (v17 == a2)
    return 1;
  v23 = (uint64_t *)a1[3];
  if (!v23)
    v23 = &CoreML::Specification::_WeightParams_default_instance_;
  v24 = v23[5];
  v25 = *(unsigned __int8 *)(v24 + 23);
  if (*(char *)(v24 + 23) < 0)
    v26 = *(_QWORD *)(v24 + 8);
  else
    v26 = *(unsigned __int8 *)(v24 + 23);
  v27 = v23[6];
  v28 = *(unsigned __int8 *)(v27 + 23);
  if (*(char *)(v27 + 23) < 0)
    v29 = *(_QWORD *)(v27 + 8);
  else
    v29 = *(unsigned __int8 *)(v27 + 23);
  v30 = *((_DWORD *)v23 + 4);
  v31 = v23[7];
  v32 = *(unsigned __int8 *)(v31 + 23);
  if (*(char *)(v31 + 23) < 0)
    v33 = *(_QWORD *)(v31 + 8);
  else
    v33 = *(unsigned __int8 *)(v31 + 23);
  if (v30 <= 0)
    v34 = 1;
  else
    v34 = 2;
  if (v26)
    v35 = v34;
  else
    v35 = v30 > 0;
  if (v29)
    ++v35;
  v36 = v33 ? v35 + 1 : v35;
  if (v36 <= 1)
  {
    if (v36)
      v37 = 0;
    else
      v37 = 5;
    if (v30 <= 0 && v36)
    {
      if ((v25 & 0x80) != 0)
        v25 = *(_QWORD *)(v24 + 8);
      if (v25)
      {
        v37 = 1;
      }
      else
      {
        if ((v28 & 0x80) != 0)
          v28 = *(_QWORD *)(v27 + 8);
        v38 = v23[8];
        if (v23 != &CoreML::Specification::_WeightParams_default_instance_ && v28 && v38)
        {
          v37 = 2;
        }
        else
        {
          if ((v32 & 0x80) != 0)
            v32 = *(_QWORD *)(v31 + 8);
          if (v38)
            v39 = v32 == 0;
          else
            v39 = 1;
          if (v39 || v23 == &CoreML::Specification::_WeightParams_default_instance_)
            v37 = 5;
          else
            v37 = 3;
        }
      }
    }
  }
  else
  {
    v37 = 4;
  }
  if (v37 == a2)
    return 1;
  v41 = (uint64_t *)a1[4];
  if (!v41)
    v41 = &CoreML::Specification::_WeightParams_default_instance_;
  v42 = v41[5];
  v43 = *(unsigned __int8 *)(v42 + 23);
  if (*(char *)(v42 + 23) < 0)
    v44 = *(_QWORD *)(v42 + 8);
  else
    v44 = *(unsigned __int8 *)(v42 + 23);
  v45 = v41[6];
  v46 = *(unsigned __int8 *)(v45 + 23);
  if (*(char *)(v45 + 23) < 0)
    v47 = *(_QWORD *)(v45 + 8);
  else
    v47 = *(unsigned __int8 *)(v45 + 23);
  v48 = *((_DWORD *)v41 + 4);
  v49 = v41[7];
  v50 = *(unsigned __int8 *)(v49 + 23);
  if (*(char *)(v49 + 23) < 0)
    v51 = *(_QWORD *)(v49 + 8);
  else
    v51 = *(unsigned __int8 *)(v49 + 23);
  if (v48 <= 0)
    v52 = 1;
  else
    v52 = 2;
  if (v44)
    v53 = v52;
  else
    v53 = v48 > 0;
  if (v47)
    ++v53;
  v54 = v51 ? v53 + 1 : v53;
  if (v54 <= 1)
  {
    if (v54)
      v55 = 0;
    else
      v55 = 5;
    if (v48 <= 0 && v54)
    {
      if ((v43 & 0x80) != 0)
        v43 = *(_QWORD *)(v42 + 8);
      if (v43)
      {
        v55 = 1;
      }
      else
      {
        if ((v46 & 0x80) != 0)
          v46 = *(_QWORD *)(v45 + 8);
        v56 = v41[8];
        if (v41 != &CoreML::Specification::_WeightParams_default_instance_ && v46 && v56)
        {
          v55 = 2;
        }
        else
        {
          if ((v50 & 0x80) != 0)
            v50 = *(_QWORD *)(v49 + 8);
          if (v56)
            v57 = v50 == 0;
          else
            v57 = 1;
          if (v57 || v41 == &CoreML::Specification::_WeightParams_default_instance_)
            v55 = 5;
          else
            v55 = 3;
        }
      }
    }
  }
  else
  {
    v55 = 4;
  }
  if (v55 == a2)
    return 1;
  v59 = (uint64_t *)a1[5];
  if (!v59)
    v59 = &CoreML::Specification::_WeightParams_default_instance_;
  v60 = v59[5];
  v61 = *(unsigned __int8 *)(v60 + 23);
  if (*(char *)(v60 + 23) < 0)
    v62 = *(_QWORD *)(v60 + 8);
  else
    v62 = *(unsigned __int8 *)(v60 + 23);
  v63 = v59[6];
  v64 = *(unsigned __int8 *)(v63 + 23);
  if (*(char *)(v63 + 23) < 0)
    v65 = *(_QWORD *)(v63 + 8);
  else
    v65 = *(unsigned __int8 *)(v63 + 23);
  v66 = *((_DWORD *)v59 + 4);
  v67 = v59[7];
  v68 = *(unsigned __int8 *)(v67 + 23);
  if (*(char *)(v67 + 23) < 0)
    v69 = *(_QWORD *)(v67 + 8);
  else
    v69 = *(unsigned __int8 *)(v67 + 23);
  if (v66 <= 0)
    v70 = 1;
  else
    v70 = 2;
  if (v62)
    v71 = v70;
  else
    v71 = v66 > 0;
  if (v65)
    ++v71;
  v72 = v69 ? v71 + 1 : v71;
  if (v72 <= 1)
  {
    if (v72)
      v73 = 0;
    else
      v73 = 5;
    if (v66 <= 0 && v72)
    {
      if ((v61 & 0x80) != 0)
        v61 = *(_QWORD *)(v60 + 8);
      if (v61)
      {
        v73 = 1;
      }
      else
      {
        if ((v64 & 0x80) != 0)
          v64 = *(_QWORD *)(v63 + 8);
        v74 = v59[8];
        if (v59 != &CoreML::Specification::_WeightParams_default_instance_ && v64 && v74)
        {
          v73 = 2;
        }
        else
        {
          if ((v68 & 0x80) != 0)
            v68 = *(_QWORD *)(v67 + 8);
          if (v74)
            v75 = v68 == 0;
          else
            v75 = 1;
          if (v75 || v59 == &CoreML::Specification::_WeightParams_default_instance_)
            v73 = 5;
          else
            v73 = 3;
        }
      }
    }
  }
  else
  {
    v73 = 4;
  }
  if (v73 == a2)
    return 1;
  v77 = (uint64_t *)a1[6];
  if (!v77)
    v77 = &CoreML::Specification::_WeightParams_default_instance_;
  v78 = v77[5];
  v79 = *(unsigned __int8 *)(v78 + 23);
  if (*(char *)(v78 + 23) < 0)
    v80 = *(_QWORD *)(v78 + 8);
  else
    v80 = *(unsigned __int8 *)(v78 + 23);
  v81 = v77[6];
  v82 = *(unsigned __int8 *)(v81 + 23);
  if (*(char *)(v81 + 23) < 0)
    v83 = *(_QWORD *)(v81 + 8);
  else
    v83 = *(unsigned __int8 *)(v81 + 23);
  v84 = *((_DWORD *)v77 + 4);
  v85 = v77[7];
  v86 = *(unsigned __int8 *)(v85 + 23);
  if (*(char *)(v85 + 23) < 0)
    v87 = *(_QWORD *)(v85 + 8);
  else
    v87 = *(unsigned __int8 *)(v85 + 23);
  if (v84 <= 0)
    v88 = 1;
  else
    v88 = 2;
  if (v80)
    v89 = v88;
  else
    v89 = v84 > 0;
  if (v83)
    ++v89;
  v90 = v87 ? v89 + 1 : v89;
  if (v90 <= 1)
  {
    if (v90)
      v91 = 0;
    else
      v91 = 5;
    if (v84 <= 0 && v90)
    {
      if ((v79 & 0x80) != 0)
        v79 = *(_QWORD *)(v78 + 8);
      if (v79)
      {
        v91 = 1;
      }
      else
      {
        if ((v82 & 0x80) != 0)
          v82 = *(_QWORD *)(v81 + 8);
        v92 = v77[8];
        if (v77 != &CoreML::Specification::_WeightParams_default_instance_ && v82 && v92)
        {
          v91 = 2;
        }
        else
        {
          if ((v86 & 0x80) != 0)
            v86 = *(_QWORD *)(v85 + 8);
          if (v92)
            v93 = v86 == 0;
          else
            v93 = 1;
          if (v93 || v77 == &CoreML::Specification::_WeightParams_default_instance_)
            v91 = 5;
          else
            v91 = 3;
        }
      }
    }
  }
  else
  {
    v91 = 4;
  }
  if (v91 == a2)
    return 1;
  v95 = (uint64_t *)a1[7];
  if (!v95)
    v95 = &CoreML::Specification::_WeightParams_default_instance_;
  v96 = v95[5];
  v97 = *(unsigned __int8 *)(v96 + 23);
  if (*(char *)(v96 + 23) < 0)
    v98 = *(_QWORD *)(v96 + 8);
  else
    v98 = *(unsigned __int8 *)(v96 + 23);
  v99 = v95[6];
  v100 = *(unsigned __int8 *)(v99 + 23);
  if (*(char *)(v99 + 23) < 0)
    v101 = *(_QWORD *)(v99 + 8);
  else
    v101 = *(unsigned __int8 *)(v99 + 23);
  v102 = *((_DWORD *)v95 + 4);
  v103 = v95[7];
  v104 = *(unsigned __int8 *)(v103 + 23);
  if (*(char *)(v103 + 23) < 0)
    v105 = *(_QWORD *)(v103 + 8);
  else
    v105 = *(unsigned __int8 *)(v103 + 23);
  if (v102 <= 0)
    v106 = 1;
  else
    v106 = 2;
  if (v98)
    v107 = v106;
  else
    v107 = v102 > 0;
  if (v101)
    ++v107;
  v108 = v105 ? v107 + 1 : v107;
  if (v108 <= 1)
  {
    if (v108)
      v109 = 0;
    else
      v109 = 5;
    if (v102 <= 0 && v108)
    {
      if ((v97 & 0x80) != 0)
        v97 = *(_QWORD *)(v96 + 8);
      if (v97)
      {
        v109 = 1;
      }
      else
      {
        if ((v100 & 0x80) != 0)
          v100 = *(_QWORD *)(v99 + 8);
        v110 = v95[8];
        if (v95 != &CoreML::Specification::_WeightParams_default_instance_ && v100 && v110)
        {
          v109 = 2;
        }
        else
        {
          if ((v104 & 0x80) != 0)
            v104 = *(_QWORD *)(v103 + 8);
          if (v110)
            v111 = v104 == 0;
          else
            v111 = 1;
          if (v111 || v95 == &CoreML::Specification::_WeightParams_default_instance_)
            v109 = 5;
          else
            v109 = 3;
        }
      }
    }
  }
  else
  {
    v109 = 4;
  }
  if (v109 == a2)
    return 1;
  v113 = a1[8] ? (uint64_t *)a1[8] : &CoreML::Specification::_WeightParams_default_instance_;
  if (isWeightParamOfType(v113, a2))
    return 1;
  v114 = a1[9] ? (uint64_t *)a1[9] : &CoreML::Specification::_WeightParams_default_instance_;
  if (isWeightParamOfType(v114, a2))
    return 1;
  v115 = a1[10] ? (uint64_t *)a1[10] : &CoreML::Specification::_WeightParams_default_instance_;
  if (isWeightParamOfType(v115, a2))
    return 1;
  v116 = a1[11] ? (uint64_t *)a1[11] : &CoreML::Specification::_WeightParams_default_instance_;
  if (isWeightParamOfType(v116, a2))
    return 1;
  v117 = a1[12] ? (uint64_t *)a1[12] : &CoreML::Specification::_WeightParams_default_instance_;
  if (isWeightParamOfType(v117, a2))
    return 1;
  v118 = a1[13] ? (uint64_t *)a1[13] : &CoreML::Specification::_WeightParams_default_instance_;
  if (isWeightParamOfType(v118, a2))
    return 1;
  v119 = a1[14] ? (uint64_t *)a1[14] : &CoreML::Specification::_WeightParams_default_instance_;
  if (isWeightParamOfType(v119, a2))
    return 1;
  v120 = a1[15] ? (uint64_t *)a1[15] : &CoreML::Specification::_WeightParams_default_instance_;
  if (isWeightParamOfType(v120, a2))
    return 1;
  if (a1[16])
    v122 = (uint64_t *)a1[16];
  else
    v122 = &CoreML::Specification::_WeightParams_default_instance_;
  return isWeightParamOfType(v122, a2);
}

BOOL CoreML::hasIOS12NewNeuralNetworkLayers(CoreML *this, const CoreML::Specification::Model *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  _BOOL8 result;

  if ((_DWORD)a2 != 303 && (_DWORD)a2 != 403 && (_DWORD)a2 != 500)
    return 0;
  v2 = *((unsigned int *)this + 6);
  if ((int)v2 < 1)
    return 0;
  v3 = v2 - 1;
  v4 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
  do
  {
    v5 = *v4++;
    v6 = *(_DWORD *)(v5 + 140) - 211;
    result = v6 < 2;
  }
  while (v6 >= 2 && v3-- != 0);
  return result;
}

uint64_t CoreML::isIOS12NeuralNetworkLayer(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  char v6;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  result = 0;
  v3 = *(_DWORD *)(a1 + 140);
  if (v3 > 219)
  {
    if (v3 <= 289)
    {
      v6 = v3 + 36;
      if ((v3 - 220) > 0x3C)
        return result;
      if (((1 << v6) & 0x1004030042100000) != 0)
        goto LABEL_37;
      if (((1 << v6) & 0xC01) == 0)
        return result;
    }
    else
    {
      v4 = (v3 - 290);
      if (v4 > 0x3C)
        goto LABEL_7;
      if (((1 << (v3 - 34)) & 0x84000000100C01) != 0)
      {
LABEL_37:
        if (v3 == 345)
        {
          v11 = *(uint64_t **)(a1 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)result);
          v11 = &CoreML::Specification::_ReorganizeDataLayerParams_default_instance_;
        }
        return *((_DWORD *)v11 + 6) != 2;
      }
      if (((1 << (v3 - 34)) & 0x10040000000) == 0)
      {
        if (v4 != 60)
        {
LABEL_7:
          if ((v3 - 400) > 0x1E || ((1 << (v3 + 112)) & 0x40100401) == 0)
          {
            if (v3 != 500)
              return result;
            return 1;
          }
          goto LABEL_37;
        }
        return 1;
      }
    }
    goto LABEL_30;
  }
  if (v3 <= 139)
  {
    if (v3 != 100)
    {
      if (v3 != 120 && v3 != 130)
        return result;
LABEL_30:
      result = (uint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(0);
      v9 = &CoreML::Specification::_UpsampleLayerParams_default_instance_;
      goto LABEL_31;
    }
    return *(_DWORD *)(a1 + 24) == 1;
  }
  v8 = v3 + 116;
  if ((v3 - 140) <= 0x3C)
  {
    if (((1 << v8) & 0x4000042000400) != 0)
      goto LABEL_37;
    if (((1 << v8) & 0x1000010800100000) != 0)
      goto LABEL_30;
    if (v3 == 140)
      return *(_BYTE *)(*(_QWORD *)(a1 + 128) + 49) == 0;
  }
  if ((v3 - 211) < 2)
    return 1;
  if (v3 == 210)
  {
    v9 = *(uint64_t **)(a1 + 128);
LABEL_31:
    if (*((_DWORD *)v9 + 16))
      return 0;
    if (*(_DWORD *)(a1 + 140) == 210)
    {
      v10 = *(uint64_t **)(a1 + 128);
    }
    else
    {
      result = (uint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)result);
      v10 = &CoreML::Specification::_UpsampleLayerParams_default_instance_;
    }
    if (*((int *)v10 + 10) > 0)
      return 0;
    v3 = *(_DWORD *)(a1 + 140);
    goto LABEL_37;
  }
  return result;
}

void CoreML::validateInt64Parameter(CoreML::Result *this, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  int v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  int v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  uint64_t v51;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  int v57;
  const std::string::value_type *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  int v68;
  const std::string::value_type *v69;
  std::string::size_type v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  int v79;
  const std::string::value_type *v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  __int128 v90;
  std::string::size_type v91;

  v6 = *(_QWORD *)(a3 + 16);
  if (!a4 || v6 > 0)
  {
    v18 = *(_DWORD *)(a3 + 36);
    if (v18 == 10)
    {
      v23 = *(_QWORD *)(a3 + 24);
      v24 = *(_QWORD *)(v23 + 16);
      if (v24 <= 0 && a4 != 0)
      {
        std::to_string(&v86, v24);
        v40 = std::string::insert(&v86, 0, "Non-positive min value (");
        v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v87.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        v42 = std::string::append(&v87, ") in Allowed Value Range for '");
        v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v88.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        v44 = *(char *)(a2 + 23);
        if (v44 >= 0)
          v45 = (const std::string::value_type *)a2;
        else
          v45 = *(const std::string::value_type **)a2;
        if (v44 >= 0)
          v46 = *(unsigned __int8 *)(a2 + 23);
        else
          v46 = *(_QWORD *)(a2 + 8);
        v47 = std::string::append(&v88, v45, v46);
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        v49 = std::string::append(&v89, "' is not allowed.");
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v91 = v49->__r_.__value_.__r.__words[2];
        v90 = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v87.__r_.__value_.__l.__data_);
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v86.__r_.__value_.__l.__data_);
        goto LABEL_17;
      }
      v26 = *(_QWORD *)(v23 + 24);
      if (v26 <= 0 && a4 != 0)
      {
        std::to_string(&v86, v26);
        v64 = std::string::insert(&v86, 0, "Non-positive max value (");
        v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v87.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        v66 = std::string::append(&v87, ") in Allowed Value Range for '");
        v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        v88.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v67;
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        v68 = *(char *)(a2 + 23);
        if (v68 >= 0)
          v69 = (const std::string::value_type *)a2;
        else
          v69 = *(const std::string::value_type **)a2;
        if (v68 >= 0)
          v70 = *(unsigned __int8 *)(a2 + 23);
        else
          v70 = *(_QWORD *)(a2 + 8);
        v71 = std::string::append(&v88, v69, v70);
        v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        v73 = std::string::append(&v89, "' is not allowed.");
        v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v91 = v73->__r_.__value_.__r.__words[2];
        v90 = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v87.__r_.__value_.__l.__data_);
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v86.__r_.__value_.__l.__data_);
        goto LABEL_17;
      }
      if (v6 < v24 || v6 > v26)
      {
        std::to_string(&v86, v6);
        v29 = std::string::insert(&v86, 0, "Specified Default Value (");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v87.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        v31 = std::string::append(&v87, ") out of Allowed Value Range for '");
        v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v88.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        v33 = *(char *)(a2 + 23);
        if (v33 >= 0)
          v34 = (const std::string::value_type *)a2;
        else
          v34 = *(const std::string::value_type **)a2;
        if (v33 >= 0)
          v35 = *(unsigned __int8 *)(a2 + 23);
        else
          v35 = *(_QWORD *)(a2 + 8);
        v36 = std::string::append(&v88, v34, v35);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        v38 = std::string::append(&v89, "'");
        v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v91 = v38->__r_.__value_.__r.__words[2];
        v90 = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v87.__r_.__value_.__l.__data_);
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v86.__r_.__value_.__l.__data_);
        goto LABEL_17;
      }
    }
    else if (v18 == 11)
    {
      v19 = *(_QWORD *)(a3 + 24);
      v20 = *(_QWORD *)(v19 + 24);
      if (v20)
        v21 = (uint64_t *)(v20 + 8);
      else
        v21 = 0;
      if (v20)
        v22 = v20 + 8 + 8 * *(int *)(v19 + 16);
      else
        v22 = 0;
      while (v21 != (uint64_t *)v22)
      {
        v51 = *v21;
        if (*v21 == v6)
          goto LABEL_80;
        if (v51 <= 0 && a4 != 0)
        {
          std::to_string(&v86, v51);
          v75 = std::string::insert(&v86, 0, "Non-positive value (");
          v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
          v87.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v76;
          v75->__r_.__value_.__l.__size_ = 0;
          v75->__r_.__value_.__r.__words[2] = 0;
          v75->__r_.__value_.__r.__words[0] = 0;
          v77 = std::string::append(&v87, ") in Allowed Values Set for '");
          v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          v88.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          v79 = *(char *)(a2 + 23);
          if (v79 >= 0)
            v80 = (const std::string::value_type *)a2;
          else
            v80 = *(const std::string::value_type **)a2;
          if (v79 >= 0)
            v81 = *(unsigned __int8 *)(a2 + 23);
          else
            v81 = *(_QWORD *)(a2 + 8);
          v82 = std::string::append(&v88, v80, v81);
          v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
          v89.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v83;
          v82->__r_.__value_.__l.__size_ = 0;
          v82->__r_.__value_.__r.__words[2] = 0;
          v82->__r_.__value_.__r.__words[0] = 0;
          v84 = std::string::append(&v89, "' is not allowed.");
          v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
          v91 = v84->__r_.__value_.__r.__words[2];
          v90 = v85;
          v84->__r_.__value_.__l.__size_ = 0;
          v84->__r_.__value_.__r.__words[2] = 0;
          v84->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v89.__r_.__value_.__l.__data_);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v88.__r_.__value_.__l.__data_);
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v87.__r_.__value_.__l.__data_);
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v86.__r_.__value_.__l.__data_);
          goto LABEL_17;
        }
        ++v21;
      }
      std::to_string(&v86, v6);
      v53 = std::string::insert(&v86, 0, "Specified Default Value (");
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v87.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      v55 = std::string::append(&v87, ") not found in Allowed Values Set for '");
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      v57 = *(char *)(a2 + 23);
      if (v57 >= 0)
        v58 = (const std::string::value_type *)a2;
      else
        v58 = *(const std::string::value_type **)a2;
      if (v57 >= 0)
        v59 = *(unsigned __int8 *)(a2 + 23);
      else
        v59 = *(_QWORD *)(a2 + 8);
      v60 = std::string::append(&v88, v58, v59);
      v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      v62 = std::string::append(&v89, "'");
      v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v91 = v62->__r_.__value_.__r.__words[2];
      v90 = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      goto LABEL_17;
    }
LABEL_80:
    CoreML::Result::Result(this);
    return;
  }
  std::to_string(&v86, v6);
  v7 = std::string::insert(&v86, 0, "Default Value (");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v87.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v87, ") for '");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)a2;
  else
    v12 = *(const std::string::value_type **)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  v14 = std::string::append(&v88, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v89.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v89, "' expected to be a positive value.");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v91 = v16->__r_.__value_.__r.__words[2];
  v90 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
LABEL_17:
  *(_QWORD *)this = 15;
  std::operator+<char>();
  if (SHIBYTE(v91) < 0)
    operator delete((void *)v90);
}

void sub_19C9DF03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  _Unwind_Resume(exception_object);
}

void CoreML::validateDoubleParameter(CoreML::Result *this, uint64_t a2, uint64_t a3)
{
  double v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  std::string::size_type v23;

  if (*(_DWORD *)(a3 + 36) == 10
    && ((v5 = *(double *)(a3 + 16), v6 = *(_QWORD *)(a3 + 24), v5 < *(double *)(v6 + 16)) || v5 > *(double *)(v6 + 24)))
  {
    std::to_string(&v18, v5);
    v7 = std::string::insert(&v18, 0, "Specified Default Value (");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v19, ") out of Allowed Value Range for '");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = (const std::string::value_type *)a2;
    else
      v12 = *(const std::string::value_type **)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    v14 = std::string::append(&v20, v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v21, "'");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v23 = v16->__r_.__value_.__r.__words[2];
    v22 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    *(_QWORD *)this = 15;
    std::operator+<char>();
    if (SHIBYTE(v23) < 0)
      operator delete((void *)v22);
  }
  else
  {
    CoreML::Result::Result(this);
  }
}

void sub_19C9DF2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  _Unwind_Resume(exception_object);
}

void CoreML::Specification::Scaler::~Scaler(CoreML::Specification::Scaler *this)
{
  CoreML::Specification::Scaler::~Scaler(this);
  JUMPOUT(0x1A1AD6260);
}

{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E3D57C00;
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2 && !*v2)
    operator delete(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 3);
  if (v3 && !*v3)
    operator delete(v3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::Scaler::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Scaler");
}

CoreML::Specification::Scaler *CoreML::Specification::Scaler::New(CoreML::Specification::Scaler *this)
{
  return CoreML::Specification::Scaler::New(this, 0);
}

CoreML::Specification::Scaler *CoreML::Specification::Scaler::New(CoreML::Specification::Scaler *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Scaler *v3;

  v3 = (CoreML::Specification::Scaler *)operator new();
  CoreML::Specification::Scaler::Scaler(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Scaler>(a2, v3);
  return v3;
}

void sub_19C9DF3B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C403FC4B5CDLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Scaler::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CoreML::Specification::Scaler::IsInitialized(CoreML::Specification::Scaler *this)
{
  return 1;
}

BOOL CoreML::Specification::Scaler::MergePartialFromCodedStream(CoreML::Specification::Scaler *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int TagFallback;
  char *v11;
  unsigned int v12;
  char *v13;
  unsigned int VarintSizeAsIntFallback;
  BOOL v15;
  int v16;
  unint64_t **v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  signed int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 result;
  signed int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  signed int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  signed int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;

  v5 = (unsigned int *)((char *)this + 40);
  v6 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v7 = *a2;
            if (*a2 < a2[1])
              break;
            LODWORD(v8) = 0;
LABEL_7:
            TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v8);
            v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
            if ((v9 & 0x100000000) != 0)
              goto LABEL_8;
LABEL_20:
            if ((_DWORD)v9)
              v15 = (v9 & 7) == 4;
            else
              v15 = 1;
            if (v15)
              return 1;
            if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
          }
          v8 = *v7;
          if (*v7 < 1)
            goto LABEL_7;
          *a2 = v7 + 1;
          v9 = v8 | 0x100000000;
          if ((v9 & 0x100000000) == 0)
            goto LABEL_20;
LABEL_8:
          if (v9 >> 3 != 2)
            break;
          if (v9 == 17)
          {
            v16 = 18;
            v17 = (unint64_t **)a2;
            v18 = (uint64_t)v5;
            goto LABEL_28;
          }
          if (v9 != 18)
            goto LABEL_20;
          v13 = *a2;
          if (*a2 >= a2[1] || *v13 < 0)
          {
            VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
            if ((VarintSizeAsIntFallback & 0x80000000) != 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v13;
            *a2 = v13 + 1;
          }
          if ((VarintSizeAsIntFallback & 7) != 0)
            return 0;
          v34 = *((_DWORD *)a2 + 12);
          if (v34 == 0x7FFFFFFF)
            v35 = -1;
          else
            v35 = v34 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
          v36 = *((_DWORD *)a2 + 10);
          if (v36 == 0x7FFFFFFF)
            v37 = -1;
          else
            v37 = v36 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
          v38 = *v5;
          v39 = VarintSizeAsIntFallback >> 3;
          if (v37 >= v35)
            v40 = v35;
          else
            v40 = v37;
          if (v35 == -1)
            v41 = v37;
          else
            v41 = v40;
          if (v41 >= (uint64_t)VarintSizeAsIntFallback)
          {
            v46 = v38 + v39;
            if (VarintSizeAsIntFallback > 7)
            {
              google::protobuf::RepeatedField<double>::Reserve(v5, v38 + v39);
              v47 = *((_QWORD *)this + 6);
              v50 = 8 * v46 - 8 * *((int *)this + 10);
              if (v50 >= 1)
                bzero((void *)(v47 + 8 + 8 * *((int *)this + 10)), 8 * (((unint64_t)v50 >> 3) - ((unint64_t)v50 > 7)) + 8);
            }
            else
            {
              v47 = *((_QWORD *)this + 6);
            }
            *v5 = v46;
            v51 = v47 + 8;
            if (!v47)
              v51 = 0;
            if (!google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v51 + 8 * v38), VarintSizeAsIntFallback))
            {
              if ((int)*v5 >= 1)
              {
                result = 0;
                *v5 = v38;
                return result;
              }
              return 0;
            }
          }
          else if (VarintSizeAsIntFallback >= 8)
          {
            if (v39 <= 1)
              v42 = 1;
            else
              v42 = VarintSizeAsIntFallback >> 3;
            do
            {
              v52 = 0;
              v43 = (unint64_t *)*a2;
              if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
              {
                result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v52);
                if (!result)
                  return result;
                v44 = v52;
                v38 = *v5;
              }
              else
              {
                v44 = *v43;
                *a2 = (char *)(v43 + 1);
              }
              if (v38 == *((_DWORD *)this + 11))
              {
                google::protobuf::RepeatedField<double>::Reserve(v5, v38 + 1);
                v38 = *v5;
              }
              v45 = *((_QWORD *)this + 6) + 8 * v38;
              *((_DWORD *)this + 10) = v38 + 1;
              *(_QWORD *)(v45 + 8) = v44;
              ++v38;
              --v42;
            }
            while (v42);
          }
        }
        if (v9 >> 3 != 1)
          goto LABEL_20;
        if (v9 != 9)
          break;
        v16 = 10;
        v17 = (unint64_t **)a2;
        v18 = (uint64_t)v6;
LABEL_28:
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(v16, v17, v18))return 0;
      }
      if (v9 != 10)
        goto LABEL_20;
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        v12 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((v12 & 0x80000000) != 0)
          return 0;
      }
      else
      {
        v12 = *v11;
        *a2 = v11 + 1;
      }
      if ((v12 & 7) != 0)
        return 0;
      v19 = *((_DWORD *)a2 + 12);
      v20 = v19 == 0x7FFFFFFF
          ? -1
          : v19 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v21 = *((_DWORD *)a2 + 10);
      v22 = v21 == 0x7FFFFFFF
          ? -1
          : v21 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v23 = *v6;
      v24 = v12 >> 3;
      v25 = v22 >= v20 ? v20 : v22;
      v26 = v20 == -1 ? v22 : v25;
      if (v26 >= (uint64_t)v12)
        break;
      if (v12 >= 8)
      {
        if (v24 <= 1)
          v27 = 1;
        else
          v27 = v12 >> 3;
        do
        {
          v52 = 0;
          v28 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v52);
            if (!result)
              return result;
            v29 = v52;
            v23 = *v6;
          }
          else
          {
            v29 = *v28;
            *a2 = (char *)(v28 + 1);
          }
          if (v23 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v6, v23 + 1);
            v23 = *v6;
          }
          v30 = *((_QWORD *)this + 3) + 8 * v23;
          *((_DWORD *)this + 4) = v23 + 1;
          *(_QWORD *)(v30 + 8) = v29;
          ++v23;
          --v27;
        }
        while (v27);
      }
    }
    v32 = v23 + v24;
    if (v12 > 7)
    {
      google::protobuf::RepeatedField<double>::Reserve(v6, v23 + v24);
      v33 = *((_QWORD *)this + 3);
      v48 = 8 * v32 - 8 * *((int *)this + 4);
      if (v48 >= 1)
        bzero((void *)(v33 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v48 >> 3) - ((unint64_t)v48 > 7)) + 8);
    }
    else
    {
      v33 = *((_QWORD *)this + 3);
    }
    *v6 = v32;
    v49 = v33 + 8;
    if (!v33)
      v49 = 0;
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v49 + 8 * v23), v12));
  if ((int)*v6 >= 1)
  {
    result = 0;
    *v6 = v23;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::Scaler::ByteSizeLong(CoreML::Specification::Scaler *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *((unsigned int *)this + 4);
  v2 = 8 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  *((_DWORD *)this + 8) = v2;
  v4 = v3 + v2;
  v5 = *((unsigned int *)this + 10);
  v6 = 8 * v5;
  if ((_DWORD)v5)
  {
    if ((v6 & 0x80000000) != 0)
      v7 = 11;
    else
      v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v4 += v7;
  }
  v8 = v4 + v6;
  *((_DWORD *)this + 14) = v6;
  *((_DWORD *)this + 15) = v8;
  return v8;
}

uint64_t CoreML::Specification::Scaler::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  char *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char __src[5];
  char v23[5];

  v3 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(_QWORD *)(v3 + 24);
    if (v11)
      v12 = (char *)(v11 + 8);
    else
      v12 = 0;
    this = google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, 8 * *(_DWORD *)(v3 + 16));
  }
  if (*(int *)(v3 + 40) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      v23[0] = 18;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, v23, 1);
      v13 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 18;
      v13 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v13;
    }
    v14 = *(_DWORD *)(v3 + 56);
    if (v13 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v14);
    }
    else
    {
      v15 = *((_QWORD *)a2 + 1);
      if (v14 < 0x80)
      {
        v17 = *(_DWORD *)(v3 + 56);
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v16++ = v14 | 0x80;
          v17 = v14 >> 7;
          v18 = v14 >> 14;
          v14 >>= 7;
        }
        while (v18);
      }
      *v16 = v17;
      v19 = (_DWORD)v16 - v15 + 1;
      *((_QWORD *)a2 + 1) += v19;
      *((_DWORD *)a2 + 4) -= v19;
    }
    v20 = *(_QWORD *)(v3 + 48);
    if (v20)
      v21 = (char *)(v20 + 8);
    else
      v21 = 0;
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v21, 8 * *(_DWORD *)(v3 + 40));
  }
  return this;
}

uint64_t CoreML::Specification::Scaler::GetCachedSize(CoreML::Specification::Scaler *this)
{
  return *((unsigned int *)this + 15);
}

BOOL google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(int a1, unint64_t **this, uint64_t a3)
{
  unint64_t *v6;
  unint64_t v7;
  signed int v8;
  uint64_t v9;
  int v10;
  unint64_t *v11;
  int v12;
  signed int v13;
  signed int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 result;
  unint64_t v21;

  v6 = *this;
  if ((int)(*((_DWORD *)this + 2) - *this) < 8)
  {
    v21 = 0;
    result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v21);
    if (!result)
      return result;
    v7 = v21;
  }
  else
  {
    v7 = *v6;
    *this = v6 + 1;
  }
  v8 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 == *(_DWORD *)(a3 + 4))
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)a3, v8 + 1);
    v8 = *(_DWORD *)a3;
  }
  v9 = *(_QWORD *)(a3 + 8);
  v10 = v8 + 1;
  *(_DWORD *)a3 = v8 + 1;
  *(_QWORD *)(v9 + 8 * v8 + 8) = v7;
  v11 = *this;
  v12 = *((_DWORD *)this + 2) - *this;
  if (v12 >= 1)
  {
    v13 = *(_DWORD *)(a3 + 4) - v10;
    v14 = v12 / 9u;
    if ((int)(v12 / 9u) >= v13)
      v14 = *(_DWORD *)(a3 + 4) - v10;
    if (v14 >= 1)
    {
      v15 = 0;
      v16 = v9 + 8 * v10 + 8;
      v17 = v8 + 2;
      v18 = ((*((_DWORD *)this + 2) - *this) * (unsigned __int128)0x1C71C71C71C71C72uLL) >> 64;
      if (v18 >= v13)
        LODWORD(v18) = v13;
      while (*(unsigned __int8 *)v11 == a1)
      {
        v19 = *(unint64_t *)((char *)v11 + 1);
        *(_DWORD *)a3 = v17 + v15;
        *(_QWORD *)(v16 + 8 * v15++) = v19;
        v11 = (unint64_t *)((char *)v11 + 9);
        if ((_DWORD)v18 == (_DWORD)v15)
          goto LABEL_15;
      }
      v14 = v15;
LABEL_15:
      if (v14 >= 1)
        google::protobuf::io::CodedInputStream::Skip((google::protobuf::io::CodedInputStream *)this, 9 * v14);
    }
  }
  return 1;
}

uint64_t *CoreML::Specification::Scaler::MergeFrom(uint64_t *this, const CoreML::Specification::Scaler *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int *v7;
  int v8;

  v3 = (unsigned int *)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<double>::Reserve(v3 + 4, v3[4] + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 3) + 8 * (int)v3[4] + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    v3[4] += *((_DWORD *)a2 + 4);
  }
  v6 = *((_DWORD *)a2 + 10);
  if (v6)
  {
    v8 = v3[10];
    v7 = v3 + 10;
    google::protobuf::RepeatedField<double>::Reserve(v7, v8 + v6);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v7 + 1) + 8 * (int)*v7 + 8), (const void *)(*((_QWORD *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *v7 += *((_DWORD *)a2 + 10);
  }
  return this;
}

CoreML::Specification::Scaler *CoreML::Specification::Scaler::Scaler(CoreML::Specification::Scaler *this)
{
  *(_QWORD *)this = &off_1E3D57C00;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::Scaler *)&CoreML::Specification::_Scaler_default_instance_)
    CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(this);
  *((_DWORD *)this + 15) = 0;
  return this;
}

void sub_19C9DFE44(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)(v2 + 48);
  if (v4 && !*v4)
    operator delete(v4);
  v5 = *(_QWORD **)(v2 + 24);
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Scaler>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Scaler>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Scaler>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::Program::~Program(CoreML::Specification::MILSpec::Program *this)
{
  CoreML::Specification::MILSpec::Program::~Program(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E3D58A40;
  v2 = *((_QWORD *)this + 10);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((_QWORD *)this + 7);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::Program::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Program");
}

CoreML::Specification::MILSpec::Program *CoreML::Specification::MILSpec::Program::New(CoreML::Specification::MILSpec::Program *this)
{
  return CoreML::Specification::MILSpec::Program::New(this, 0);
}

CoreML::Specification::MILSpec::Program *CoreML::Specification::MILSpec::Program::New(CoreML::Specification::MILSpec::Program *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Program *v3;

  v3 = (CoreML::Specification::MILSpec::Program *)operator new();
  CoreML::Specification::MILSpec::Program::Program(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Program>(a2, v3);
  return v3;
}

void sub_19C9DFFD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40FAC9F822);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::Program::Clear(CoreML::Specification::MILSpec::Program *this)
{
  uint64_t v2;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::clear((uint64_t)this + 24);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((uint64_t)this + 56);
  v2 = *((_QWORD *)this + 10);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  *((_QWORD *)this + 11) = 0;
}

uint64_t CoreML::Specification::MILSpec::Program::IsInitialized(CoreML::Specification::MILSpec::Program *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Program::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Program *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  google::protobuf::Arena **v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int TagFallback;
  char *v12;
  unint64_t Varint64Fallback;
  std::string *v14;
  unsigned int *v15;
  std::string::size_type size;
  char *v17;
  int v18;
  char *v19;
  int VarintSizeAsIntFallback;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  unsigned int *v27;
  int v28;
  _BOOL4 v29;
  char v30;
  int v31;
  int v32;
  int v33;
  char *v34;
  uint64_t v35;
  CoreML::Specification::MILSpec::Function *v36;
  char *v37;
  int v38;
  uint64_t v39;
  __int128 *v40;
  int BeyondKeyValuePair;
  BOOL v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int *p_p;
  int v48;
  _QWORD *v50;
  google::protobuf::Arena **v51;
  google::protobuf::Arena **v52;
  _QWORD *v53;
  std::string __p;
  google::protobuf::Arena **v55;
  uint64_t v56;

  v50 = (_QWORD *)((char *)this + 56);
  v51 = (google::protobuf::Arena **)((char *)this + 48);
  v5 = (std::string **)((char *)this + 80);
  v6 = (google::protobuf::Arena **)((char *)this + 16);
  v7 = (_QWORD *)((char *)this + 24);
  while (1)
  {
    v8 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      break;
    v9 = *v8;
    if (*v8 < 1)
      goto LABEL_7;
    *(_QWORD *)a2 = v8 + 1;
    v10 = v9 | 0x100000000;
    if ((v10 & 0x100000000) == 0)
      goto LABEL_27;
LABEL_8:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 8)
          goto LABEL_27;
        v12 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
        {
          Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v30 & 1) == 0)
            return 0;
        }
        else
        {
          Varint64Fallback = *v12;
          *(_QWORD *)a2 = v12 + 1;
        }
        *((_QWORD *)this + 11) = Varint64Fallback;
        break;
      case 2u:
        if (v10 != 18)
          goto LABEL_27;
        v52 = v6;
        v53 = v7;
        memset(&__p, 0, sizeof(__p));
        v56 = 0;
        v19 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_101;
        }
        else
        {
          VarintSizeAsIntFallback = *v19;
          *(_QWORD *)a2 = v19 + 1;
        }
        v31 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v32 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v32--, 1);
        *((_DWORD *)a2 + 13) = v32;
        if (v32 < 0 != v25)
          goto LABEL_101;
        v33 = v31;
        v34 = *(char **)a2;
        if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && *v34 == 10)
        {
          *(_QWORD *)a2 = v34 + 1;
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, &__p))
            goto LABEL_101;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) >= 1 && **(_BYTE **)a2 == 18)
          {
            v35 = *(_QWORD *)v53[2];
            v55 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::operator[]((uint64_t)v53, (uint64_t)&__p);
            if (v35 != *(_QWORD *)v53[2])
            {
              google::protobuf::io::CodedInputStream::Skip(a2, 1u);
              v36 = (CoreML::Specification::MILSpec::Function *)v55;
              v37 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v37 < 0)
              {
                v38 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v38 < 0)
                  goto LABEL_100;
              }
              else
              {
                v38 = *v37;
                *(_QWORD *)a2 = v37 + 1;
              }
              v43 = google::protobuf::io::CodedInputStream::PushLimit(a2, v38);
              v45 = *((_DWORD *)a2 + 13);
              v25 = __OFSUB__(v45--, 1);
              *((_DWORD *)a2 + 13) = v45;
              if (v45 < 0 != v25
                || (v46 = v43,
                    !CoreML::Specification::MILSpec::Function::MergePartialFromCodedStream(v36, a2, v44))
                || !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v46))
              {
LABEL_100:
                google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase(v53, (unsigned __int8 *)&__p);
                goto LABEL_101;
              }
              if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1)
                && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                *((_BYTE *)a2 + 36) = 1;
                goto LABEL_83;
              }
              BeyondKeyValuePair = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>>::ReadBeyondKeyValuePair((uint64_t)&v52, (uint64_t)a2);
              goto LABEL_82;
            }
          }
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          memset(&__p, 0, sizeof(__p));
        }
        v39 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*v52);
        if (v56 != v39)
        {
          if (v56)
            (*(void (**)(void))(*(_QWORD *)v56 + 8))();
          v56 = v39;
        }
        v40 = *(__int128 **)(v39 + 16);
        *(_DWORD *)(v39 + 40) |= 1u;
        if (v40 == &google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v39 + 16), *(google::protobuf::Arena ***)(v39 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v40 = *(__int128 **)(v39 + 16);
        }
        std::string::operator=((std::string *)v40, &__p);
        BeyondKeyValuePair = (*(uint64_t (**)(uint64_t, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v56 + 88))(v56, a2);
        if (BeyondKeyValuePair)
          google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>>::UseKeyAndValueFromEntry((uint64_t)&v52);
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56))
        {
          v56 = 0;
          if ((BeyondKeyValuePair & 1) == 0)
          {
            v42 = 0;
            v22 = 6;
            goto LABEL_96;
          }
          goto LABEL_83;
        }
LABEL_82:
        if (!BeyondKeyValuePair)
          goto LABEL_101;
LABEL_83:
        if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v33))
          goto LABEL_101;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = (unsigned int *)&__p;
        else
          p_p = (unsigned int *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v48 = __p.__r_.__value_.__r.__words[1];
        v29 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v48, 0, (uint64_t)"CoreML.Specification.MILSpec.Program.FunctionsEntry.key");
LABEL_91:
        v42 = v29;
        if (v29)
          v22 = 0;
        else
          v22 = 6;
LABEL_94:
        if (v56)
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
LABEL_96:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (!v42)
          goto LABEL_33;
        break;
      case 3u:
        if (v10 != 26)
          goto LABEL_27;
        v14 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v5;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v14))
          return 0;
        v15 = (unsigned int *)*v5;
        if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
        {
          v15 = *(unsigned int **)v15;
          size = (*v5)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v15, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Program.docString"))return 0;
        break;
      case 4u:
        if (v10 != 34)
          goto LABEL_27;
        v52 = v51;
        v53 = v50;
        memset(&__p, 0, sizeof(__p));
        v56 = 0;
        v17 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v17 < 0)
        {
          v18 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v18 < 0)
            goto LABEL_101;
        }
        else
        {
          v18 = *v17;
          *(_QWORD *)a2 = v17 + 1;
        }
        v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, v18);
        v24 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v24--, 1);
        *((_DWORD *)a2 + 13) = v24;
        if (v24 < 0 != v25
          || (v26 = v23,
              !google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream((uint64_t)&v52, (uint64_t)a2))|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v26))
        {
LABEL_101:
          v42 = 0;
          v22 = 6;
          goto LABEL_94;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = (unsigned int *)&__p;
        else
          v27 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v28 = __p.__r_.__value_.__r.__words[1];
        v29 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(v27, v28, 0, (uint64_t)"CoreML.Specification.MILSpec.Program.AttributesEntry.key");
        goto LABEL_91;
      default:
        goto LABEL_27;
    }
LABEL_32:
    v22 = 0;
LABEL_33:
    if (v22)
      return 0;
  }
  LODWORD(v9) = 0;
LABEL_7:
  TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
  v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
  if ((v10 & 0x100000000) != 0)
    goto LABEL_8;
LABEL_27:
  if ((_DWORD)v10)
    v21 = (v10 & 7) == 4;
  else
    v21 = 1;
  if (!v21)
  {
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3))return 0;
    goto LABEL_32;
  }
  return 1;
}

void sub_19C9E0614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 8))(a21);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::MILSpec::Program::ByteSizeLong(CoreML::Specification::MILSpec::Program *this)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v18[3];

  v2 = (_QWORD *)*((_QWORD *)this + 5);
  v3 = *(unsigned int *)v2;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v18, v2);
  v4 = 0;
  while (v18[0])
  {
    v5 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v18[0] + 3), *((_QWORD *)v18[0] + 3) + 24, *((google::protobuf::Arena **)this + 2));
    if (v4 != (_DWORD *)v5)
    {
      if (v4)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v4 = (_DWORD *)v5;
    }
    v6 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v4);
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v18);
  }
  if (v4)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  v7 = (_QWORD *)*((_QWORD *)this + 9);
  v8 = *(unsigned int *)v7;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v18, v7);
  v9 = 0;
  v10 = v8 + v3;
  while (v18[0])
  {
    v11 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v18[0] + 3), *((_QWORD *)v18[0] + 3) + 24, *((google::protobuf::Arena **)this + 6));
    if (v9 != (_DWORD *)v11)
    {
      if (v9)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      v9 = (_DWORD *)v11;
    }
    v12 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v9);
    v10 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v18);
  }
  if (v9)
    (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
  v13 = *((_QWORD *)this + 10);
  v14 = *(unsigned __int8 *)(v13 + 23);
  if (*(char *)(v13 + 23) < 0)
  {
    if (!*(_QWORD *)(v13 + 8))
      goto LABEL_24;
  }
  else if (!*(_BYTE *)(v13 + 23))
  {
    goto LABEL_24;
  }
  v15 = *(_QWORD *)(v13 + 8);
  if ((v14 & 0x80u) == 0)
    v15 = v14;
  v10 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_24:
  v16 = *((_QWORD *)this + 11);
  if (v16)
    v10 += ((9 * (__clz(v16 | 1) ^ 0x3F) + 73) >> 6) + 1;
  *((_DWORD *)this + 24) = v10;
  return v10;
}

void sub_19C9E082C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::MILSpec::Program::SerializeWithCachedSizes(CoreML::Specification::MILSpec::Program *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  google::protobuf::io::CodedOutputStream *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  google::protobuf::io::CodedOutputStream *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  google::protobuf::io::CodedOutputStream *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v38;
  unsigned __int8 *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  google::protobuf::io::CodedOutputStream *v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned __int8 *v49[3];

  v6 = *((_QWORD *)this + 11);
  if (v6)
    google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  v7 = (unint64_t *)*((_QWORD *)this + 5);
  v8 = *v7;
  if (*v7)
  {
    if (*((_BYTE *)a2 + 26))
    {
      if (v8 >= 2 && *((_BYTE *)a2 + 27) != 0)
      {
LABEL_26:
        v16 = operator new[]();
        google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v49, *((_QWORD **)this + 5));
        v17 = v49[0];
        if (v49[0])
        {
          v18 = 0;
          do
          {
            *(_QWORD *)(v16 + 8 * v18) = *((_QWORD *)v17 + 3);
            google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v49);
            ++v18;
            v17 = v49[0];
          }
          while (v49[0]);
        }
        else
        {
          v18 = 0;
        }
        v19 = 126 - 2 * __clz(v18);
        if (v18)
          v20 = v19;
        else
          v20 = 0;
        std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const**,false>(v16, (char *)(v16 + 8 * v18), v20, 1);
        if (v18)
        {
          v21 = 0;
          v22 = 0;
          do
          {
            v24 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v16 + 8 * v21), *(_QWORD *)(v16 + 8 * v21) + 24, *((google::protobuf::Arena **)this + 2));
            if (v22 != v24)
            {
              if (v22)
                (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
              v22 = v24;
            }
            google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v22, a2, v23);
            v25 = *(unsigned int **)(v16 + 8 * v21);
            if (*((char *)v25 + 23) < 0)
            {
              v25 = *(unsigned int **)v25;
              v26 = *(_QWORD *)(*(_QWORD *)(v16 + 8 * v21) + 8);
            }
            else
            {
              LODWORD(v26) = *((unsigned __int8 *)v25 + 23);
            }
            google::protobuf::internal::WireFormatLite::VerifyUtf8String(v25, v26, 1, (uint64_t)"CoreML.Specification.MILSpec.Program.FunctionsEntry.key");
            ++v21;
          }
          while (v18 != v21);
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        }
        MEMORY[0x1A1AD6248](v16, 0x60C8044C4A2DFLL);
        goto LABEL_46;
      }
    }
    else if (v8 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
      goto LABEL_26;
    }
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v49, v7);
    v10 = 0;
    while (v49[0])
    {
      v12 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v49[0] + 3), *((_QWORD *)v49[0] + 3) + 24, *((google::protobuf::Arena **)this + 2));
      if (v10 != v12)
      {
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        v10 = v12;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v10, a2, v11);
      v13 = (unsigned int *)*((_QWORD *)v49[0] + 3);
      if (*((char *)v13 + 23) < 0)
      {
        v13 = *(unsigned int **)v13;
        v14 = *(_QWORD *)(*((_QWORD *)v49[0] + 3) + 8);
      }
      else
      {
        LODWORD(v14) = *((unsigned __int8 *)v13 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, v14, 1, (uint64_t)"CoreML.Specification.MILSpec.Program.FunctionsEntry.key");
      google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v49);
    }
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
LABEL_46:
  result = *((_QWORD *)this + 10);
  if (*(char *)(result + 23) < 0)
  {
    v28 = *(_QWORD *)(result + 8);
    if (!v28)
      goto LABEL_52;
    result = *(_QWORD *)result;
    goto LABEL_51;
  }
  LODWORD(v28) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_51:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v28, 1, (uint64_t)"CoreML.Specification.MILSpec.Program.docString");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(3u, *((_QWORD *)this + 10), a2);
  }
LABEL_52:
  v29 = (unint64_t *)*((_QWORD *)this + 9);
  v30 = *v29;
  if (!*v29)
    return result;
  if (*((_BYTE *)a2 + 26))
  {
    if (v30 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_75:
      v38 = operator new[]();
      google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v49, *((_QWORD **)this + 9));
      v39 = v49[0];
      if (v49[0])
      {
        v40 = 0;
        do
        {
          *(_QWORD *)(v38 + 8 * v40) = *((_QWORD *)v39 + 3);
          google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v49);
          ++v40;
          v39 = v49[0];
        }
        while (v49[0]);
      }
      else
      {
        v40 = 0;
      }
      v41 = 126 - 2 * __clz(v40);
      if (v40)
        v42 = v41;
      else
        v42 = 0;
      std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**,false>(v38, (char *)(v38 + 8 * v40), v42, 1);
      if (v40)
      {
        v43 = 0;
        v44 = 0;
        do
        {
          v46 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v38 + 8 * v43), *(_QWORD *)(v38 + 8 * v43) + 24, *((google::protobuf::Arena **)this + 6));
          if (v44 != v46)
          {
            if (v44)
              (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
            v44 = v46;
          }
          google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v44, a2, v45);
          v47 = *(unsigned int **)(v38 + 8 * v43);
          if (*((char *)v47 + 23) < 0)
          {
            v47 = *(unsigned int **)v47;
            v48 = *(_QWORD *)(*(_QWORD *)(v38 + 8 * v43) + 8);
          }
          else
          {
            LODWORD(v48) = *((unsigned __int8 *)v47 + 23);
          }
          google::protobuf::internal::WireFormatLite::VerifyUtf8String(v47, v48, 1, (uint64_t)"CoreML.Specification.MILSpec.Program.AttributesEntry.key");
          ++v43;
        }
        while (v40 != v43);
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
      }
      return MEMORY[0x1A1AD6248](v38, 0x60C8044C4A2DFLL);
    }
  }
  else if (v30 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_75;
  }
  result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v49, v29);
  v32 = 0;
  while (v49[0])
  {
    v34 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v49[0] + 3), *((_QWORD *)v49[0] + 3) + 24, *((google::protobuf::Arena **)this + 6));
    if (v32 != v34)
    {
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      v32 = v34;
    }
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v32, a2, v33);
    v35 = (unsigned int *)*((_QWORD *)v49[0] + 3);
    if (*((char *)v35 + 23) < 0)
    {
      v35 = *(unsigned int **)v35;
      v36 = *(_QWORD *)(*((_QWORD *)v49[0] + 3) + 8);
    }
    else
    {
      LODWORD(v36) = *((unsigned __int8 *)v35 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v35, v36, 1, (uint64_t)"CoreML.Specification.MILSpec.Program.AttributesEntry.key");
    result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v49);
  }
  if (v32)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  return result;
}

void sub_19C9E0D20(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1A1AD6248](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Program::GetCachedSize(CoreML::Specification::MILSpec::Program *this)
{
  return *((unsigned int *)this + 24);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL4 v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _QWORD *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  char *v97;

  v6 = (char *)result;
LABEL_2:
  v94 = a2 - 8;
  v90 = a2 - 24;
  v91 = a2 - 16;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = a2 - v7;
    v10 = (a2 - v7) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(_QWORD **)v94;
        v41 = *(_QWORD **)v7;
        result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v94, *(_QWORD **)v7);
        if ((_DWORD)result)
        {
          *(_QWORD *)v7 = v40;
          *(_QWORD *)v94 = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v94);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v94);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v7 + 3, (_QWORD **)v94);
      default:
        if (v9 <= 191)
        {
          v42 = v7 + 8;
          v44 = v7 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v7;
              do
              {
                v48 = *(_QWORD **)v46;
                v47 = (_QWORD *)*((_QWORD *)v46 + 1);
                v46 = v42;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v47, v48);
                if ((_DWORD)result)
                {
                  v49 = v45;
                  while (1)
                  {
                    *(_QWORD *)&v7[v49 + 8] = v48;
                    if (!v49)
                      break;
                    v48 = *(_QWORD **)&v7[v49 - 8];
                    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v47, v48);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v7[v49 + 8];
                      goto LABEL_73;
                    }
                  }
                  v50 = v7;
LABEL_73:
                  *(_QWORD *)v50 = v47;
                }
                v42 = v46 + 8;
                v45 += 8;
              }
              while (v46 + 8 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v86 = *(_QWORD **)v8;
              v85 = (_QWORD *)*((_QWORD *)v8 + 1);
              v8 = v42;
              result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v85, v86);
              if ((_DWORD)result)
              {
                v87 = v8;
                do
                {
                  *(_QWORD *)v87 = v86;
                  v86 = (_QWORD *)*((_QWORD *)v87 - 2);
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v85, v86);
                  v87 -= 8;
                }
                while ((result & 1) != 0);
                *(_QWORD *)v87 = v85;
              }
              v42 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v97 = v7;
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            v88 = a2;
            v89 = a2 - v7;
            do
            {
              v53 = v52;
              if (v9 >= 16 && v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v97[8 * v54];
                v56 = 2 * v52 + 2;
                v95 = v52;
                if (v56 >= v10)
                {
                  v58 = *(_QWORD **)v55;
                }
                else
                {
                  v57 = *(_QWORD **)v55;
                  v58 = (_QWORD *)*((_QWORD *)v55 + 1);
                  v59 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v55, v58);
                  if (v59)
                    v55 += 8;
                  else
                    v58 = v57;
                  if (v59)
                    v54 = v56;
                }
                v60 = &v97[8 * v53];
                v61 = *(_QWORD **)v60;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v58, *(_QWORD **)v60);
                v9 = v89;
                if ((result & 1) == 0)
                {
                  do
                  {
                    v62 = v55;
                    *(_QWORD *)v60 = v58;
                    if (v51 < v54)
                      break;
                    v63 = (2 * v54) | 1;
                    v55 = &v97[8 * v63];
                    v64 = 2 * v54 + 2;
                    if (v64 >= v10)
                    {
                      v58 = *(_QWORD **)v55;
                      v54 = (2 * v54) | 1;
                    }
                    else
                    {
                      v58 = *(_QWORD **)v55;
                      v65 = (_QWORD *)*((_QWORD *)v55 + 1);
                      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v55, v65))
                      {
                        v58 = v65;
                        v55 += 8;
                        v54 = v64;
                      }
                      else
                      {
                        v54 = v63;
                      }
                    }
                    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v58, v61);
                    v60 = v62;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v62 = v61;
                  a2 = v88;
                  v9 = v89;
                  v53 = v95;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v66 = (unint64_t)v9 >> 3;
            v67 = v97;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = v66 - 2;
              v93 = *(_QWORD **)v67;
              if (v66 < 2)
                v70 = v66 - 1;
              v71 = v70 >> 1;
              do
              {
                v72 = &v67[8 * v69 + 8];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 >= v66)
                {
                  v77 = *(_QWORD **)v72;
                  v69 = (2 * v69) | 1;
                }
                else
                {
                  v75 = *(_QWORD **)v72;
                  v76 = *(_QWORD **)&v67[8 * v69 + 16];
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v72, v76);
                  if ((_DWORD)result)
                    v77 = v76;
                  else
                    v77 = v75;
                  if ((_DWORD)result)
                  {
                    v72 += 8;
                    v69 = v74;
                  }
                  else
                  {
                    v69 = v73;
                  }
                }
                *(_QWORD *)v67 = v77;
                v67 = v72;
              }
              while (v69 <= v71);
              a2 = v68 - 8;
              if (v72 == v68 - 8)
              {
                *(_QWORD *)v72 = v93;
              }
              else
              {
                *(_QWORD *)v72 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v93;
                v78 = v72 - v97 + 8;
                if (v78 >= 9)
                {
                  v79 = (unint64_t)((v78 >> 3) - 2) >> 1;
                  v80 = &v97[8 * v79];
                  v81 = *(_QWORD **)v80;
                  v82 = *(_QWORD **)v72;
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v80, *(_QWORD **)v72);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v83 = v80;
                      *(_QWORD *)v72 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v97[8 * v79];
                      v81 = *(_QWORD **)v80;
                      result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v80, v82);
                      v72 = v83;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v83 = v82;
                  }
                }
              }
              v84 = v66-- <= 2;
              v67 = v97;
            }
            while (!v84);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7[8 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12, (_QWORD **)v7, (_QWORD **)v94);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v12, (_QWORD **)v94);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 1, (_QWORD **)v12 - 1, (_QWORD **)v91);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 2, (_QWORD **)&v7[8 * v11 + 8], (_QWORD **)v90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12 - 1, (_QWORD **)v12, (_QWORD **)&v7[8 * v11 + 8]);
          v13 = *(_QWORD **)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD **)v7;
        v15 = v7;
        if ((a4 & 1) == 0)
        {
          v15 = v7;
          if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*((_QWORD **)v7 - 1), *(_QWORD **)v7))
          {
            result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, *(_QWORD **)v94);
            if ((result & 1) != 0)
            {
              do
              {
                v30 = (_QWORD *)*((_QWORD *)v7 + 1);
                v7 += 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v30);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v31 = v7 + 8;
              do
              {
                v7 = v31;
                if (v31 >= a2)
                  break;
                v31 += 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, *(_QWORD **)v7);
              }
              while (!(_DWORD)result);
            }
            v32 = a2;
            if (v7 < a2)
            {
              v32 = a2;
              do
              {
                v33 = (_QWORD *)*((_QWORD *)v32 - 1);
                v32 -= 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v33);
              }
              while ((result & 1) != 0);
            }
            v34 = a2;
            if (v7 < v32)
            {
              v35 = *(_QWORD **)v7;
              v36 = *(_QWORD **)v32;
              do
              {
                *(_QWORD *)v7 = v36;
                *(_QWORD *)v32 = v35;
                do
                {
                  v37 = (_QWORD *)*((_QWORD *)v7 + 1);
                  v7 += 8;
                  v35 = v37;
                }
                while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v37));
                do
                {
                  v38 = (_QWORD *)*((_QWORD *)v32 - 1);
                  v32 -= 8;
                  v36 = v38;
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v38);
                }
                while ((result & 1) != 0);
              }
              while (v7 < v32);
            }
            v39 = v7 - 8;
            a2 = v34;
            if (v7 - 8 != v8)
              *(_QWORD *)v8 = *(_QWORD *)v39;
            a4 = 0;
            *(_QWORD *)v39 = v14;
            continue;
          }
        }
        do
        {
          v16 = v15;
          v18 = (_QWORD *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v17 = v18;
        }
        while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v18, v14));
        v96 = a3;
        v19 = a2;
        if (v16 == v8)
        {
          v19 = a2;
          do
          {
            if (v15 >= v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v21, v14));
        }
        else
        {
          do
          {
            v20 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v20, v14));
        }
        v6 = v8;
        v22 = a2;
        if (v15 < v19)
        {
          v23 = *(_QWORD **)v19;
          v24 = v15;
          v25 = v19;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v17;
            do
            {
              v16 = v24;
              v26 = (_QWORD *)*((_QWORD *)v24 + 1);
              v24 += 8;
              v17 = v26;
            }
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v26, v14));
            do
            {
              v27 = (_QWORD *)*((_QWORD *)v25 - 1);
              v25 -= 8;
              v23 = v27;
            }
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v27, v14));
          }
          while (v24 < v25);
        }
        if (v16 != v6)
          *(_QWORD *)v6 = *(_QWORD *)v16;
        *(_QWORD *)v16 = v14;
        v28 = v15 >= v19;
        a2 = v22;
        a3 = v96;
        if (!v28)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const**,false>(v6, v16, v96, a4 & 1);
          a4 = 0;
          v7 = v16 + 8;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const**>((_QWORD **)v6, (_QWORD **)v16);
        v7 = v16 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const**>((_QWORD **)v16 + 1, (_QWORD **)v22);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v16;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(uint64_t a1, uint64_t a2, google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)result = &off_1E3D5A068;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL4 v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _QWORD *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  char *v97;

  v6 = (char *)result;
LABEL_2:
  v94 = a2 - 8;
  v90 = a2 - 24;
  v91 = a2 - 16;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = a2 - v7;
    v10 = (a2 - v7) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(_QWORD **)v94;
        v41 = *(_QWORD **)v7;
        result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v94, *(_QWORD **)v7);
        if ((_DWORD)result)
        {
          *(_QWORD *)v7 = v40;
          *(_QWORD *)v94 = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v94);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v94);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v7 + 3, (_QWORD **)v94);
      default:
        if (v9 <= 191)
        {
          v42 = v7 + 8;
          v44 = v7 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v7;
              do
              {
                v48 = *(_QWORD **)v46;
                v47 = (_QWORD *)*((_QWORD *)v46 + 1);
                v46 = v42;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v47, v48);
                if ((_DWORD)result)
                {
                  v49 = v45;
                  while (1)
                  {
                    *(_QWORD *)&v7[v49 + 8] = v48;
                    if (!v49)
                      break;
                    v48 = *(_QWORD **)&v7[v49 - 8];
                    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v47, v48);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v7[v49 + 8];
                      goto LABEL_73;
                    }
                  }
                  v50 = v7;
LABEL_73:
                  *(_QWORD *)v50 = v47;
                }
                v42 = v46 + 8;
                v45 += 8;
              }
              while (v46 + 8 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v86 = *(_QWORD **)v8;
              v85 = (_QWORD *)*((_QWORD *)v8 + 1);
              v8 = v42;
              result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v85, v86);
              if ((_DWORD)result)
              {
                v87 = v8;
                do
                {
                  *(_QWORD *)v87 = v86;
                  v86 = (_QWORD *)*((_QWORD *)v87 - 2);
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v85, v86);
                  v87 -= 8;
                }
                while ((result & 1) != 0);
                *(_QWORD *)v87 = v85;
              }
              v42 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v97 = v7;
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            v88 = a2;
            v89 = a2 - v7;
            do
            {
              v53 = v52;
              if (v9 >= 16 && v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v97[8 * v54];
                v56 = 2 * v52 + 2;
                v95 = v52;
                if (v56 >= v10)
                {
                  v58 = *(_QWORD **)v55;
                }
                else
                {
                  v57 = *(_QWORD **)v55;
                  v58 = (_QWORD *)*((_QWORD *)v55 + 1);
                  v59 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v55, v58);
                  if (v59)
                    v55 += 8;
                  else
                    v58 = v57;
                  if (v59)
                    v54 = v56;
                }
                v60 = &v97[8 * v53];
                v61 = *(_QWORD **)v60;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v58, *(_QWORD **)v60);
                v9 = v89;
                if ((result & 1) == 0)
                {
                  do
                  {
                    v62 = v55;
                    *(_QWORD *)v60 = v58;
                    if (v51 < v54)
                      break;
                    v63 = (2 * v54) | 1;
                    v55 = &v97[8 * v63];
                    v64 = 2 * v54 + 2;
                    if (v64 >= v10)
                    {
                      v58 = *(_QWORD **)v55;
                      v54 = (2 * v54) | 1;
                    }
                    else
                    {
                      v58 = *(_QWORD **)v55;
                      v65 = (_QWORD *)*((_QWORD *)v55 + 1);
                      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v55, v65))
                      {
                        v58 = v65;
                        v55 += 8;
                        v54 = v64;
                      }
                      else
                      {
                        v54 = v63;
                      }
                    }
                    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v58, v61);
                    v60 = v62;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v62 = v61;
                  a2 = v88;
                  v9 = v89;
                  v53 = v95;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v66 = (unint64_t)v9 >> 3;
            v67 = v97;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = v66 - 2;
              v93 = *(_QWORD **)v67;
              if (v66 < 2)
                v70 = v66 - 1;
              v71 = v70 >> 1;
              do
              {
                v72 = &v67[8 * v69 + 8];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 >= v66)
                {
                  v77 = *(_QWORD **)v72;
                  v69 = (2 * v69) | 1;
                }
                else
                {
                  v75 = *(_QWORD **)v72;
                  v76 = *(_QWORD **)&v67[8 * v69 + 16];
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v72, v76);
                  if ((_DWORD)result)
                    v77 = v76;
                  else
                    v77 = v75;
                  if ((_DWORD)result)
                  {
                    v72 += 8;
                    v69 = v74;
                  }
                  else
                  {
                    v69 = v73;
                  }
                }
                *(_QWORD *)v67 = v77;
                v67 = v72;
              }
              while (v69 <= v71);
              a2 = v68 - 8;
              if (v72 == v68 - 8)
              {
                *(_QWORD *)v72 = v93;
              }
              else
              {
                *(_QWORD *)v72 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v93;
                v78 = v72 - v97 + 8;
                if (v78 >= 9)
                {
                  v79 = (unint64_t)((v78 >> 3) - 2) >> 1;
                  v80 = &v97[8 * v79];
                  v81 = *(_QWORD **)v80;
                  v82 = *(_QWORD **)v72;
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v80, *(_QWORD **)v72);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v83 = v80;
                      *(_QWORD *)v72 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v97[8 * v79];
                      v81 = *(_QWORD **)v80;
                      result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v80, v82);
                      v72 = v83;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v83 = v82;
                  }
                }
              }
              v84 = v66-- <= 2;
              v67 = v97;
            }
            while (!v84);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7[8 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12, (_QWORD **)v7, (_QWORD **)v94);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v12, (_QWORD **)v94);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 1, (_QWORD **)v12 - 1, (_QWORD **)v91);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 2, (_QWORD **)&v7[8 * v11 + 8], (_QWORD **)v90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12 - 1, (_QWORD **)v12, (_QWORD **)&v7[8 * v11 + 8]);
          v13 = *(_QWORD **)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD **)v7;
        v15 = v7;
        if ((a4 & 1) == 0)
        {
          v15 = v7;
          if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*((_QWORD **)v7 - 1), *(_QWORD **)v7))
          {
            result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, *(_QWORD **)v94);
            if ((result & 1) != 0)
            {
              do
              {
                v30 = (_QWORD *)*((_QWORD *)v7 + 1);
                v7 += 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v30);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v31 = v7 + 8;
              do
              {
                v7 = v31;
                if (v31 >= a2)
                  break;
                v31 += 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, *(_QWORD **)v7);
              }
              while (!(_DWORD)result);
            }
            v32 = a2;
            if (v7 < a2)
            {
              v32 = a2;
              do
              {
                v33 = (_QWORD *)*((_QWORD *)v32 - 1);
                v32 -= 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v33);
              }
              while ((result & 1) != 0);
            }
            v34 = a2;
            if (v7 < v32)
            {
              v35 = *(_QWORD **)v7;
              v36 = *(_QWORD **)v32;
              do
              {
                *(_QWORD *)v7 = v36;
                *(_QWORD *)v32 = v35;
                do
                {
                  v37 = (_QWORD *)*((_QWORD *)v7 + 1);
                  v7 += 8;
                  v35 = v37;
                }
                while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v37));
                do
                {
                  v38 = (_QWORD *)*((_QWORD *)v32 - 1);
                  v32 -= 8;
                  v36 = v38;
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v38);
                }
                while ((result & 1) != 0);
              }
              while (v7 < v32);
            }
            v39 = v7 - 8;
            a2 = v34;
            if (v7 - 8 != v8)
              *(_QWORD *)v8 = *(_QWORD *)v39;
            a4 = 0;
            *(_QWORD *)v39 = v14;
            continue;
          }
        }
        do
        {
          v16 = v15;
          v18 = (_QWORD *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v17 = v18;
        }
        while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v18, v14));
        v96 = a3;
        v19 = a2;
        if (v16 == v8)
        {
          v19 = a2;
          do
          {
            if (v15 >= v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v21, v14));
        }
        else
        {
          do
          {
            v20 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v20, v14));
        }
        v6 = v8;
        v22 = a2;
        if (v15 < v19)
        {
          v23 = *(_QWORD **)v19;
          v24 = v15;
          v25 = v19;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v17;
            do
            {
              v16 = v24;
              v26 = (_QWORD *)*((_QWORD *)v24 + 1);
              v24 += 8;
              v17 = v26;
            }
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v26, v14));
            do
            {
              v27 = (_QWORD *)*((_QWORD *)v25 - 1);
              v25 -= 8;
              v23 = v27;
            }
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v27, v14));
          }
          while (v24 < v25);
        }
        if (v16 != v6)
          *(_QWORD *)v6 = *(_QWORD *)v16;
        *(_QWORD *)v16 = v14;
        v28 = v15 >= v19;
        a2 = v22;
        a3 = v96;
        if (!v28)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**,false>(v6, v16, v96, a4 & 1);
          a4 = 0;
          v7 = v16 + 8;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**>((_QWORD **)v6, (_QWORD **)v16);
        v7 = v16 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**>((_QWORD **)v16 + 1, (_QWORD **)v22);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v16;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(uint64_t a1, uint64_t a2, google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)result = &off_1E3D59DC8;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_19CB39696);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E3D5AA40;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E3D5AA40;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

CoreML::Specification::MILSpec::Value *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2;
  CoreML::Specification::MILSpec::Value *result;

  v2 = *(_QWORD *)(a1 + 16);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  result = *(CoreML::Specification::MILSpec::Value **)(a1 + 24);
  if (result)
    result = (CoreML::Specification::MILSpec::Value *)CoreML::Specification::MILSpec::Value::Clear(result);
  *(_DWORD *)(a1 + 40) &= 0xFFFFFFFC;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::IsInitialized()
{
  return 1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  google::protobuf::Arena *v7;
  CoreML::Specification::MILSpec::Value *Aligned;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  const CoreML::Specification::MILSpec::Value *v12;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(__int128 **)(a1 + 16) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!*(_QWORD *)(a1 + 24))
      {
        v7 = *(google::protobuf::Arena **)(a1 + 32);
        if (v7)
        {
          CoreML::Specification::MILSpec::Value::Value(Aligned);
          v9 = google::protobuf::Arena::AllocateAligned(v7, 0, 24);
          *v9 = Aligned;
          v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
          v10 = (unint64_t *)((char *)v7 + 32);
          do
            v11 = __ldxr(v10);
          while (__stxr((unint64_t)v9, v10));
          v9[2] = (google::protobuf::Arena *)v11;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Value *)operator new();
          CoreML::Specification::MILSpec::Value::Value(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v12 = (const CoreML::Specification::MILSpec::Value *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      CoreML::Specification::MILSpec::Value::MergeFrom(*(CoreML::Specification::MILSpec::Value **)(a1 + 24), v12);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

void sub_19C9E204C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  unint64_t TagFallback;
  __int128 *v8;
  uint64_t result;
  int v10;
  char *v11;
  CoreML::Specification::MILSpec::Value *Aligned;
  google::protobuf::Arena *v13;
  google::protobuf::Arena **v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  int VarintSizeAsIntFallback;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;

  v5 = (google::protobuf::Arena **)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *(char **)this;
        if (*(_QWORD *)this >= *((_QWORD *)this + 1))
        {
          LODWORD(TagFallback) = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *(_QWORD *)this = v6 + 1;
            goto LABEL_7;
          }
        }
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 10)
          break;
        *(_DWORD *)(a1 + 40) |= 1u;
        v8 = *(__int128 **)(a1 + 16);
        if (v8 == &google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v8 = *(__int128 **)(a1 + 16);
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)this, (std::string *)v8);
        if (!(_DWORD)result)
          return result;
        v10 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v10;
        v11 = *(char **)this;
        if (*(_QWORD *)this < *((_QWORD *)this + 1) && *v11 == 18)
        {
          *(_QWORD *)this = v11 + 1;
          goto LABEL_20;
        }
      }
      if ((_DWORD)TagFallback != 18)
        break;
      v10 = *(_DWORD *)(a1 + 40);
LABEL_20:
      *(_DWORD *)(a1 + 40) = v10 | 2;
      Aligned = *(CoreML::Specification::MILSpec::Value **)(a1 + 24);
      if (!Aligned)
      {
        v13 = *(google::protobuf::Arena **)(a1 + 32);
        if (v13)
        {
          CoreML::Specification::MILSpec::Value::Value(Aligned);
          v14 = google::protobuf::Arena::AllocateAligned(v13, 0, 24);
          *v14 = Aligned;
          v14[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
          v15 = (unint64_t *)((char *)v13 + 32);
          do
            v16 = __ldxr(v15);
          while (__stxr((unint64_t)v14, v15));
          v14[2] = (google::protobuf::Arena *)v16;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Value *)operator new();
          CoreML::Specification::MILSpec::Value::Value(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v17 = *(char **)this;
      if (*(_QWORD *)this >= *((_QWORD *)this + 1) || *v17 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(this);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v17;
        *(_QWORD *)this = v17 + 1;
      }
      v19 = google::protobuf::io::CodedInputStream::PushLimit(this, VarintSizeAsIntFallback);
      v21 = *((_DWORD *)this + 13);
      v22 = __OFSUB__(v21--, 1);
      *((_DWORD *)this + 13) = v21;
      if (v21 < 0 != v22)
        return 0;
      v23 = v19;
      result = CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream(Aligned, this, v20);
      if (!(_DWORD)result)
        return result;
      result = google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(this, v23);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*(_QWORD *)this == *((_QWORD *)this + 1)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(this, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

void sub_19C9E22D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  CoreML::Specification::MILSpec::Value *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (CoreML::Specification::MILSpec::Value *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = CoreML::Specification::MILSpec::Value::ByteSizeLong(v4);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  google::protobuf::internal::WireFormatLite *v5;
  const google::protobuf::MessageLite *v6;
  google::protobuf::io::CodedOutputStream *v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  v5 = (google::protobuf::internal::WireFormatLite *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(v5, a2, v6, v7);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_DWORD *)(v6 + 8);
    v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    return v5 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(_DWORD *)(v4 + 40) + ((9 * (__clz(*(_DWORD *)(v4 + 40) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v6 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v7 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v6, a3 + 1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v7 = 18;
  v9 = v7 + 1;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
  if (v10 < 0x80)
  {
    LOBYTE(v11) = v10;
  }
  else
  {
    do
    {
      *v9++ = v10 | 0x80;
      v11 = v10 >> 7;
      v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
  }
  *v9 = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 128))(v8, a2, v9 + 1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t CoreML::Specification::MILSpec::Value::ByteSizeLong(CoreML::Specification::MILSpec::Value *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::MILSpec::TensorType **v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  if (this != (CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_)
  {
    v6 = (CoreML::Specification::MILSpec::TensorType **)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(v6);
      v5 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  v8 = *((_DWORD *)this + 11);
  if (v8 == 5)
  {
    v9 = CoreML::Specification::MILSpec::Value_BlobFileValue::ByteSizeLong(*((CoreML::Specification::MILSpec::Value_BlobFileValue **)this
                                                                           + 4));
    goto LABEL_15;
  }
  if (v8 == 3)
  {
    v9 = CoreML::Specification::MILSpec::Value_ImmediateValue::ByteSizeLong(*((CoreML::Specification::MILSpec::TensorValue ***)this
                                                                            + 4));
LABEL_15:
    v5 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 10) = v5;
  return v5;
}

uint64_t CoreML::Specification::MILSpec::ValueType::ByteSizeLong(CoreML::Specification::MILSpec::TensorType **this)
{
  uint64_t v2;
  uint64_t result;

  switch(*((_DWORD *)this + 7))
  {
    case 1:
      v2 = CoreML::Specification::MILSpec::TensorType::ByteSizeLong(this[2]);
      goto LABEL_8;
    case 2:
      v2 = CoreML::Specification::MILSpec::ListType::ByteSizeLong(this[2]);
      goto LABEL_8;
    case 3:
      v2 = CoreML::Specification::MILSpec::TupleType::ByteSizeLong(this[2]);
      goto LABEL_8;
    case 4:
      v2 = CoreML::Specification::MILSpec::DictionaryType::ByteSizeLong(this[2]);
      goto LABEL_8;
    case 5:
      v2 = (uint64_t)CoreML::Specification::MILSpec::StateType::ByteSizeLong(this[2]);
LABEL_8:
      result = v2 + ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
      break;
    default:
      result = 0;
      break;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue **this)
{
  uint64_t v2;
  uint64_t result;

  switch(*((_DWORD *)this + 7))
  {
    case 1:
      v2 = CoreML::Specification::MILSpec::TensorValue::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 2:
      v2 = CoreML::Specification::MILSpec::TupleValue::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 3:
      v2 = CoreML::Specification::MILSpec::ListValue::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 4:
      v2 = CoreML::Specification::MILSpec::DictionaryValue::ByteSizeLong(this[2]);
LABEL_7:
      result = v2 + ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
      break;
    default:
      result = 0;
      break;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::MILSpec::Value_BlobFileValue::ByteSizeLong(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v5 = *((_QWORD *)this + 3);
  if (v5)
    v4 += ((9 * (__clz(v5 | 1) ^ 0x3F) + 73) >> 6) + 1;
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TensorValue::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue *this)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch(*((_DWORD *)this + 7))
  {
    case 1:
      v2 = (unsigned int *)*((_QWORD *)this + 2);
      v3 = v2[4];
      v4 = 4 * v3;
      if ((_DWORD)v3)
        goto LABEL_7;
      goto LABEL_3;
    case 2:
      v7 = CoreML::Specification::MILSpec::TensorValue_RepeatedInts::ByteSizeLong(*((CoreML::Specification::MILSpec::TensorValue_RepeatedInts **)this
                                                                                  + 2));
      goto LABEL_14;
    case 3:
      v2 = (unsigned int *)*((_QWORD *)this + 2);
      v4 = v2[4];
      if ((_DWORD)v4)
        goto LABEL_7;
      goto LABEL_3;
    case 4:
      v7 = CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::ByteSizeLong(*((CoreML::Specification::MILSpec::TensorValue_RepeatedStrings **)this
                                                                                     + 2));
      goto LABEL_14;
    case 5:
      v7 = CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::ByteSizeLong(*((CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)this
                                                                                      + 2));
      goto LABEL_14;
    case 6:
      v2 = (unsigned int *)*((_QWORD *)this + 2);
      v8 = v2[4];
      v4 = 8 * v8;
      if ((_DWORD)v8)
      {
LABEL_7:
        if ((v4 & 0x80000000) != 0)
          v5 = 11;
        else
          v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
LABEL_3:
        v5 = 0;
      }
      v10 = v5 + v4;
      v2[8] = v4;
      v2[9] = v10;
      v9 = v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_17;
    case 7:
      v7 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::ByteSizeLong(*((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes **)this
                                                                                   + 2));
LABEL_14:
      v9 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
LABEL_17:
      result = v9 + 1;
      break;
    default:
      result = 0;
      break;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::MILSpec::TupleValue::ByteSizeLong(CoreML::Specification::MILSpec::TupleValue *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::MILSpec::Value::ByteSizeLong(*(CoreML::Specification::MILSpec::Value **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::ListValue::ByteSizeLong(CoreML::Specification::MILSpec::ListValue *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::MILSpec::Value::ByteSizeLong(*(CoreML::Specification::MILSpec::Value **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::ByteSizeLong(CoreML::Specification::MILSpec::DictionaryValue *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::ByteSizeLong(*(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::ByteSizeLong(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  CoreML::Specification::MILSpec::Value *v2;
  uint64_t v3;
  uint64_t v4;
  CoreML::Specification::MILSpec::Value *v5;
  uint64_t v6;

  if (this == (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)&CoreML::Specification::MILSpec::_DictionaryValue_KeyValuePair_default_instance_)
  {
    v4 = 0;
  }
  else
  {
    v2 = (CoreML::Specification::MILSpec::Value *)*((_QWORD *)this + 2);
    if (v2)
    {
      v3 = CoreML::Specification::MILSpec::Value::ByteSizeLong(v2);
      v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v4 = 0;
    }
    v5 = (CoreML::Specification::MILSpec::Value *)*((_QWORD *)this + 3);
    if (v5)
    {
      v6 = CoreML::Specification::MILSpec::Value::ByteSizeLong(v5);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t result;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size(*((_DWORD *)this + 4), *((_QWORD *)this + 3));
  if (v2)
  {
    v3 = v2;
    if ((v2 & 0x80000000) != 0)
      v4 = 11;
    else
      v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = v4 + v2;
  *((_DWORD *)this + 8) = v3;
  *((_DWORD *)this + 9) = result;
  return result;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 6);
  if ((int)v1 < 1)
  {
    v3 = *((unsigned int *)this + 6);
  }
  else
  {
    v2 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    v3 = *((unsigned int *)this + 6);
    do
    {
      v4 = *v2++;
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  *((_DWORD *)this + 10) = v3;
  return v3;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    v2 = 0;
LABEL_8:
    v5 = 0;
    goto LABEL_10;
  }
  v2 = 0;
  v3 = (uint64_t *)(*((_QWORD *)this + 3) + 8);
  do
  {
    v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2)
    goto LABEL_8;
  if ((v2 & 0x80000000) != 0)
    v5 = 11;
  else
    v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_10:
  v6 = v5 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v6;
  return v6;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  *((_DWORD *)this + 6) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TensorType::ByteSizeLong(CoreML::Specification::MILSpec::TensorType *this)
{
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v15[3];

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
      v4 += CoreML::Specification::MILSpec::Dimension::ByteSizeLong(*(CoreML::Specification::MILSpec::Dimension **)(*((_QWORD *)this + 4) + 8 * v3++ + 8))
          + 1;
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v5 = (_QWORD *)*((_QWORD *)this + 8);
  v6 = *(unsigned int *)v5;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v15, v5);
  v7 = 0;
  v8 = v6 + v4;
  while (v15[0])
  {
    v9 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v15[0] + 3), *((_QWORD *)v15[0] + 3) + 24, *((google::protobuf::Arena **)this + 5));
    if (v7 != v9)
    {
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v7 = v9;
    }
    v10 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v7);
    v8 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v15);
  }
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v11 = *((_QWORD *)this + 9);
  if (v11)
    v8 += ((9 * (__clz(v11 | 1) ^ 0x3F) + 73) >> 6) + 1;
  v12 = *((_DWORD *)this + 20);
  if (v12)
  {
    if (v12 < 0)
      v13 = 11;
    else
      v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v8 += v13;
  }
  *((_DWORD *)this + 21) = v8;
  return v8;
}

void sub_19C9E2EAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::MILSpec::ListType::ByteSizeLong(CoreML::Specification::MILSpec::ListType *this)
{
  CoreML::Specification::MILSpec::ValueType *v2;
  uint64_t v3;
  uint64_t v4;
  CoreML::Specification::MILSpec::Dimension *v5;

  if (this == (CoreML::Specification::MILSpec::ListType *)&CoreML::Specification::MILSpec::_ListType_default_instance_)
  {
    v4 = 0;
  }
  else
  {
    v2 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 2);
    if (v2)
    {
      v3 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(v2);
      v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v4 = 0;
    }
    v5 = (CoreML::Specification::MILSpec::Dimension *)*((_QWORD *)this + 3);
    if (v5)
      v4 += CoreML::Specification::MILSpec::Dimension::ByteSizeLong(v5) + 2;
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TupleType::ByteSizeLong(CoreML::Specification::MILSpec::TupleType *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(*(CoreML::Specification::MILSpec::ValueType **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::DictionaryType::ByteSizeLong(CoreML::Specification::MILSpec::DictionaryType *this)
{
  CoreML::Specification::MILSpec::ValueType *v2;
  uint64_t v3;
  uint64_t v4;
  CoreML::Specification::MILSpec::ValueType *v5;
  uint64_t v6;

  if (this == (CoreML::Specification::MILSpec::DictionaryType *)&CoreML::Specification::MILSpec::_DictionaryType_default_instance_)
  {
    v4 = 0;
  }
  else
  {
    v2 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 2);
    if (v2)
    {
      v3 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(v2);
      v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v4 = 0;
    }
    v5 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 3);
    if (v5)
    {
      v6 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(v5);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

CoreML::Specification::MILSpec::ValueType *CoreML::Specification::MILSpec::StateType::ByteSizeLong(CoreML::Specification::MILSpec::StateType *this)
{
  CoreML::Specification::MILSpec::ValueType *result;
  uint64_t v3;

  if (this == (CoreML::Specification::MILSpec::StateType *)&CoreML::Specification::MILSpec::_StateType_default_instance_)
  {
    result = 0;
  }
  else
  {
    result = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 2);
    if (result)
    {
      v3 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(result);
      result = (CoreML::Specification::MILSpec::ValueType *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  *((_DWORD *)this + 6) = (_DWORD)result;
  return result;
}

unint64_t CoreML::Specification::MILSpec::Dimension::ByteSizeLong(CoreML::Specification::MILSpec::Dimension *this)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *((_DWORD *)this + 7);
  if (v1 == 2)
  {
    v4 = *((_QWORD *)this + 2);
    v3 = 2 * *(unsigned __int8 *)(v4 + 16);
    *(_DWORD *)(v4 + 20) = v3;
  }
  else
  {
    if (v1 != 1)
    {
      v5 = 0;
      goto LABEL_9;
    }
    v2 = *((_QWORD *)this + 2);
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
      v3 = ((9 * (__clz(v3 | 1) ^ 0x3F) + 73) >> 6) + 1;
    *(_DWORD *)(v2 + 24) = v3;
  }
  v5 = v3 + 2;
LABEL_9:
  *((_DWORD *)this + 6) = v5;
  return v5;
}

CoreML::Specification::MILSpec::Value *CoreML::Specification::MILSpec::Value::Value(CoreML::Specification::MILSpec::Value *this)
{
  *(_QWORD *)this = &off_1E3D589A8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_19C9E3198(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Value *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  std::string *v10;
  uint64_t result;
  unsigned int *v12;
  std::string::size_type size;
  CoreML::Specification::MILSpec::ValueType *v14;
  char *v15;
  int VarintSizeAsIntFallback;
  CoreML::Specification::MILSpec::Value_ImmediateValue *v17;
  CoreML::Specification::MILSpec::Value_BlobFileValue *v18;
  BOOL v19;
  char *v20;
  int v21;
  char *v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;

  v5 = (std::string **)((char *)this + 16);
  while (2)
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        break;
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) != 0)
        goto LABEL_8;
LABEL_27:
      if ((_DWORD)v8)
        v19 = (v8 & 7) == 4;
      else
        v19 = 1;
      if (v19)
        return 1;
      if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
        goto LABEL_56;
    }
    LODWORD(v7) = 0;
LABEL_7:
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
    v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v8 & 0x100000000) == 0)
      goto LABEL_27;
LABEL_8:
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10)
          goto LABEL_27;
        v10 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v10 = *v5;
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v10);
        if (!(_DWORD)result)
          return result;
        v12 = (unsigned int *)*v5;
        if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
        {
          v12 = *(unsigned int **)v12;
          size = (*v5)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Value.docString"))goto LABEL_56;
        continue;
      case 2u:
        if (v8 != 18)
          goto LABEL_27;
        v14 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 3);
        if (!v14)
        {
          v14 = (CoreML::Specification::MILSpec::ValueType *)operator new();
          CoreML::Specification::MILSpec::ValueType::ValueType(v14);
          *((_QWORD *)this + 3) = v14;
        }
        v15 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_56;
        }
        else
        {
          VarintSizeAsIntFallback = *v15;
          *(_QWORD *)a2 = v15 + 1;
        }
        v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v26 = *((_DWORD *)a2 + 13);
        v27 = __OFSUB__(v26--, 1);
        *((_DWORD *)a2 + 13) = v26;
        if (v26 < 0 != v27)
          goto LABEL_56;
        v28 = v24;
        result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(v14, a2, v25);
        if (!(_DWORD)result)
          return result;
        goto LABEL_52;
      case 3u:
        if (v8 != 26)
          goto LABEL_27;
        if (*((_DWORD *)this + 11) == 3)
        {
          v17 = (CoreML::Specification::MILSpec::Value_ImmediateValue *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::MILSpec::Value::clear_value((uint64_t)this);
          *((_DWORD *)this + 11) = 3;
          v17 = (CoreML::Specification::MILSpec::Value_ImmediateValue *)operator new();
          CoreML::Specification::MILSpec::Value_ImmediateValue::Value_ImmediateValue(v17);
          *((_QWORD *)this + 4) = v17;
        }
        v20 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
        {
          v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v21 < 0)
            goto LABEL_56;
        }
        else
        {
          v21 = *v20;
          *(_QWORD *)a2 = v20 + 1;
        }
        v29 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
        v31 = *((_DWORD *)a2 + 13);
        v27 = __OFSUB__(v31--, 1);
        *((_DWORD *)a2 + 13) = v31;
        if (v31 < 0 != v27)
          goto LABEL_56;
        v28 = v29;
        result = CoreML::Specification::MILSpec::Value_ImmediateValue::MergePartialFromCodedStream(v17, a2, v30);
        if (!(_DWORD)result)
          return result;
        goto LABEL_52;
      case 5u:
        if (v8 != 42)
          goto LABEL_27;
        if (*((_DWORD *)this + 11) == 5)
        {
          v18 = (CoreML::Specification::MILSpec::Value_BlobFileValue *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::MILSpec::Value::clear_value((uint64_t)this);
          *((_DWORD *)this + 11) = 5;
          v18 = (CoreML::Specification::MILSpec::Value_BlobFileValue *)operator new();
          CoreML::Specification::MILSpec::Value_BlobFileValue::Value_BlobFileValue(v18);
          *((_QWORD *)this + 4) = v18;
        }
        v22 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
        {
          v23 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v23 < 0)
            goto LABEL_56;
        }
        else
        {
          v23 = *v22;
          *(_QWORD *)a2 = v22 + 1;
        }
        v32 = google::protobuf::io::CodedInputStream::PushLimit(a2, v23);
        v34 = *((_DWORD *)a2 + 13);
        v27 = __OFSUB__(v34--, 1);
        *((_DWORD *)a2 + 13) = v34;
        if (v34 < 0 != v27)
          goto LABEL_56;
        v28 = v32;
        result = CoreML::Specification::MILSpec::Value_BlobFileValue::MergePartialFromCodedStream(v18, (char **)a2, v33);
        if (!(_DWORD)result)
          return result;
LABEL_52:
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
          continue;
LABEL_56:
        result = 0;
        break;
      default:
        goto LABEL_27;
    }
    return result;
  }
}

void sub_19C9E352C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::ValueType *CoreML::Specification::MILSpec::ValueType::ValueType(CoreML::Specification::MILSpec::ValueType *this)
{
  *(_QWORD *)this = &off_1E3D58F98;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::ValueType *)&CoreML::Specification::MILSpec::_ValueType_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_19C9E35B4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::ValueType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::TensorType *v9;
  CoreML::Specification::MILSpec::StateType *v10;
  CoreML::Specification::MILSpec::ListType *v11;
  CoreML::Specification::MILSpec::TupleType *v12;
  CoreML::Specification::MILSpec::DictionaryType *v13;
  BOOL v14;
  char *v15;
  int v16;
  char *v17;
  int VarintSizeAsIntFallback;
  char *v19;
  int v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  int v29;
  uint64_t result;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;

  while (2)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        break;
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) != 0)
        goto LABEL_7;
LABEL_23:
      if ((_DWORD)v7)
        v14 = (v7 & 7) == 4;
      else
        v14 = 1;
      if (v14)
        return 1;
      if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        goto LABEL_69;
    }
    LODWORD(v6) = 0;
LABEL_6:
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
    v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v7 & 0x100000000) == 0)
      goto LABEL_23;
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 1)
        {
          v9 = (CoreML::Specification::MILSpec::TensorType *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          v9 = (CoreML::Specification::MILSpec::TensorType *)operator new();
          CoreML::Specification::MILSpec::TensorType::TensorType(v9);
          *((_QWORD *)this + 2) = v9;
        }
        v17 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v17 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_69;
        }
        else
        {
          VarintSizeAsIntFallback = *v17;
          *(_QWORD *)a2 = v17 + 1;
        }
        v31 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v33 = *((_DWORD *)a2 + 13);
        v28 = __OFSUB__(v33--, 1);
        *((_DWORD *)a2 + 13) = v33;
        if (v33 < 0 != v28)
          goto LABEL_69;
        v29 = v31;
        result = CoreML::Specification::MILSpec::TensorType::MergePartialFromCodedStream(v9, a2, v32);
        if (!(_DWORD)result)
          return result;
        goto LABEL_68;
      case 2u:
        if (v7 != 18)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 2)
        {
          v11 = (CoreML::Specification::MILSpec::ListType *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v11 = (CoreML::Specification::MILSpec::ListType *)operator new();
          CoreML::Specification::MILSpec::ListType::ListType(v11);
          *((_QWORD *)this + 2) = v11;
        }
        v19 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
        {
          v20 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v20 < 0)
            goto LABEL_69;
        }
        else
        {
          v20 = *v19;
          *(_QWORD *)a2 = v19 + 1;
        }
        v34 = google::protobuf::io::CodedInputStream::PushLimit(a2, v20);
        v36 = *((_DWORD *)a2 + 13);
        v28 = __OFSUB__(v36--, 1);
        *((_DWORD *)a2 + 13) = v36;
        if (v36 < 0 != v28)
          goto LABEL_69;
        v29 = v34;
        result = CoreML::Specification::MILSpec::ListType::MergePartialFromCodedStream(v11, a2, v35);
        if (!(_DWORD)result)
          return result;
        goto LABEL_68;
      case 3u:
        if (v7 != 26)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 3)
        {
          v12 = (CoreML::Specification::MILSpec::TupleType *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          v12 = (CoreML::Specification::MILSpec::TupleType *)operator new();
          CoreML::Specification::MILSpec::TupleType::TupleType(v12);
          *((_QWORD *)this + 2) = v12;
        }
        v21 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
        {
          v22 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v22 < 0)
            goto LABEL_69;
        }
        else
        {
          v22 = *v21;
          *(_QWORD *)a2 = v21 + 1;
        }
        v37 = google::protobuf::io::CodedInputStream::PushLimit(a2, v22);
        v39 = *((_DWORD *)a2 + 13);
        v28 = __OFSUB__(v39--, 1);
        *((_DWORD *)a2 + 13) = v39;
        if (v39 < 0 != v28)
          goto LABEL_69;
        v29 = v37;
        result = CoreML::Specification::MILSpec::TupleType::MergePartialFromCodedStream(v12, a2, v38);
        if (!(_DWORD)result)
          return result;
        goto LABEL_68;
      case 4u:
        if (v7 != 34)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 4)
        {
          v13 = (CoreML::Specification::MILSpec::DictionaryType *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          v13 = (CoreML::Specification::MILSpec::DictionaryType *)operator new();
          CoreML::Specification::MILSpec::DictionaryType::DictionaryType(v13);
          *((_QWORD *)this + 2) = v13;
        }
        v23 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v23 < 0)
        {
          v24 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v24 < 0)
            goto LABEL_69;
        }
        else
        {
          v24 = *v23;
          *(_QWORD *)a2 = v23 + 1;
        }
        v40 = google::protobuf::io::CodedInputStream::PushLimit(a2, v24);
        v42 = *((_DWORD *)a2 + 13);
        v28 = __OFSUB__(v42--, 1);
        *((_DWORD *)a2 + 13) = v42;
        if (v42 < 0 != v28)
          goto LABEL_69;
        v29 = v40;
        result = CoreML::Specification::MILSpec::DictionaryType::MergePartialFromCodedStream(v13, a2, v41);
        if (!(_DWORD)result)
          return result;
LABEL_68:
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v29))
          continue;
LABEL_69:
        result = 0;
        break;
      case 5u:
        if (v7 != 42)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 5)
        {
          v10 = (CoreML::Specification::MILSpec::StateType *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 5;
          v10 = (CoreML::Specification::MILSpec::StateType *)operator new();
          CoreML::Specification::MILSpec::StateType::StateType(v10);
          *((_QWORD *)this + 2) = v10;
        }
        v15 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
        {
          v16 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v16 < 0)
            goto LABEL_69;
        }
        else
        {
          v16 = *v15;
          *(_QWORD *)a2 = v15 + 1;
        }
        v25 = google::protobuf::io::CodedInputStream::PushLimit(a2, v16);
        v27 = *((_DWORD *)a2 + 13);
        v28 = __OFSUB__(v27--, 1);
        *((_DWORD *)a2 + 13) = v27;
        if (v27 < 0 != v28)
          goto LABEL_69;
        v29 = v25;
        result = CoreML::Specification::MILSpec::StateType::MergePartialFromCodedStream(v10, a2, v26);
        if (!(_DWORD)result)
          return result;
        goto LABEL_68;
      default:
        goto LABEL_23;
    }
    return result;
  }
}

void sub_19C9E3A54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4012099E73);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value::clear_value(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 44);
  if (v2 == 5 || v2 == 3)
  {
    this = *(_QWORD *)(this + 32);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

CoreML::Specification::MILSpec::Value_ImmediateValue *CoreML::Specification::MILSpec::Value_ImmediateValue::Value_ImmediateValue(CoreML::Specification::MILSpec::Value_ImmediateValue *this)
{
  *(_QWORD *)this = &off_1E3D58288;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Value_ImmediateValue *)&CoreML::Specification::MILSpec::_Value_ImmediateValue_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_19C9E3B4C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Value_ImmediateValue *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::TensorValue *v9;
  CoreML::Specification::MILSpec::TupleValue *v10;
  CoreML::Specification::MILSpec::ListValue *v11;
  CoreML::Specification::MILSpec::DictionaryValue *v12;
  BOOL v13;
  char *v14;
  int VarintSizeAsIntFallback;
  char *v16;
  int v17;
  char *v18;
  int v19;
  char *v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t result;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;

  while (2)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        break;
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) != 0)
        goto LABEL_7;
LABEL_20:
      if ((_DWORD)v7)
        v13 = (v7 & 7) == 4;
      else
        v13 = 1;
      if (v13)
        return 1;
      if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        goto LABEL_58;
    }
    LODWORD(v6) = 0;
LABEL_6:
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
    v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v7 & 0x100000000) == 0)
      goto LABEL_20;
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 1)
        {
          v9 = (CoreML::Specification::MILSpec::TensorValue *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          v9 = (CoreML::Specification::MILSpec::TensorValue *)operator new();
          CoreML::Specification::MILSpec::TensorValue::TensorValue(v9);
          *((_QWORD *)this + 2) = v9;
        }
        v14 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_58;
        }
        else
        {
          VarintSizeAsIntFallback = *v14;
          *(_QWORD *)a2 = v14 + 1;
        }
        v22 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v24 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v24--, 1);
        *((_DWORD *)a2 + 13) = v24;
        if (v24 < 0 != v25)
          goto LABEL_58;
        v26 = v22;
        result = CoreML::Specification::MILSpec::TensorValue::MergePartialFromCodedStream(v9, a2, v23);
        if (!(_DWORD)result)
          return result;
        goto LABEL_57;
      case 2u:
        if (v7 != 18)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 2)
        {
          v10 = (CoreML::Specification::MILSpec::TupleValue *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v10 = (CoreML::Specification::MILSpec::TupleValue *)operator new();
          CoreML::Specification::MILSpec::TupleValue::TupleValue(v10);
          *((_QWORD *)this + 2) = v10;
        }
        v16 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v16 < 0)
        {
          v17 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v17 < 0)
            goto LABEL_58;
        }
        else
        {
          v17 = *v16;
          *(_QWORD *)a2 = v16 + 1;
        }
        v28 = google::protobuf::io::CodedInputStream::PushLimit(a2, v17);
        v30 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v30--, 1);
        *((_DWORD *)a2 + 13) = v30;
        if (v30 < 0 != v25)
          goto LABEL_58;
        v26 = v28;
        result = CoreML::Specification::MILSpec::TupleValue::MergePartialFromCodedStream(v10, a2, v29);
        if (!(_DWORD)result)
          return result;
        goto LABEL_57;
      case 3u:
        if (v7 != 26)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 3)
        {
          v11 = (CoreML::Specification::MILSpec::ListValue *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          v11 = (CoreML::Specification::MILSpec::ListValue *)operator new();
          CoreML::Specification::MILSpec::ListValue::ListValue(v11);
          *((_QWORD *)this + 2) = v11;
        }
        v18 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v18 < 0)
        {
          v19 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v19 < 0)
            goto LABEL_58;
        }
        else
        {
          v19 = *v18;
          *(_QWORD *)a2 = v18 + 1;
        }
        v31 = google::protobuf::io::CodedInputStream::PushLimit(a2, v19);
        v33 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v33--, 1);
        *((_DWORD *)a2 + 13) = v33;
        if (v33 < 0 != v25)
          goto LABEL_58;
        v26 = v31;
        result = CoreML::Specification::MILSpec::ListValue::MergePartialFromCodedStream(v11, a2, v32);
        if (!(_DWORD)result)
          return result;
        goto LABEL_57;
      case 4u:
        if (v7 != 34)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 4)
        {
          v12 = (CoreML::Specification::MILSpec::DictionaryValue *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          v12 = (CoreML::Specification::MILSpec::DictionaryValue *)operator new();
          CoreML::Specification::MILSpec::DictionaryValue::DictionaryValue(v12);
          *((_QWORD *)this + 2) = v12;
        }
        v20 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
        {
          v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v21 < 0)
            goto LABEL_58;
        }
        else
        {
          v21 = *v20;
          *(_QWORD *)a2 = v20 + 1;
        }
        v34 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
        v36 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v36--, 1);
        *((_DWORD *)a2 + 13) = v36;
        if (v36 < 0 != v25)
          goto LABEL_58;
        v26 = v34;
        result = CoreML::Specification::MILSpec::DictionaryValue::MergePartialFromCodedStream(v12, a2, v35);
        if (!(_DWORD)result)
          return result;
LABEL_57:
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v26))
          continue;
LABEL_58:
        result = 0;
        break;
      default:
        goto LABEL_20;
    }
    return result;
  }
}

void sub_19C9E3F34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::Value_BlobFileValue *CoreML::Specification::MILSpec::Value_BlobFileValue::Value_BlobFileValue(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
  *(_QWORD *)this = &off_1E3D581F0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Value_BlobFileValue *)&CoreML::Specification::MILSpec::_Value_BlobFileValue_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_19C9E3FCC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value_BlobFileValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Value_BlobFileValue *this, char **a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  std::string *v11;
  uint64_t result;
  unsigned int *v13;
  std::string::size_type size;
  char *v15;
  char v17;

  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_23;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_23;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 16)
          goto LABEL_23;
        v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          *((_QWORD *)this + 3) = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
          if ((v17 & 1) == 0)
            return 0;
        }
        else
        {
          *((_QWORD *)this + 3) = *v15;
          *a2 = v15 + 1;
        }
      }
      if (v8 >> 3 != 1 || v8 != 10)
        break;
      v11 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v11);
      if (!(_DWORD)result)
        return result;
      v13 = (unsigned int *)*v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = *(unsigned int **)v13;
        size = (*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Value.BlobFileValue.fileName"))return 0;
    }
LABEL_23:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

void CoreML::Specification::MILSpec::DictionaryValue::~DictionaryValue(CoreML::Specification::MILSpec::DictionaryValue *this)
{
  CoreML::Specification::MILSpec::DictionaryValue::~DictionaryValue(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D580C0;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::DictionaryValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.DictionaryValue");
}

CoreML::Specification::MILSpec::DictionaryValue *CoreML::Specification::MILSpec::DictionaryValue::New(CoreML::Specification::MILSpec::DictionaryValue *this)
{
  return CoreML::Specification::MILSpec::DictionaryValue::New(this, 0);
}

CoreML::Specification::MILSpec::DictionaryValue *CoreML::Specification::MILSpec::DictionaryValue::New(CoreML::Specification::MILSpec::DictionaryValue *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::DictionaryValue *v3;

  v3 = (CoreML::Specification::MILSpec::DictionaryValue *)operator new();
  CoreML::Specification::MILSpec::DictionaryValue::DictionaryValue(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::DictionaryValue>(a2, v3);
  return v3;
}

void sub_19C9E41E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 32) + 8;
    do
    {
      v4 = *(_QWORD *)v3;
      v5 = *(_QWORD *)(*(_QWORD *)v3 + 16);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      *(_QWORD *)(v4 + 16) = 0;
      this = *(_QWORD *)(v4 + 24);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      *(_QWORD *)(v4 + 24) = 0;
      v3 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::IsInitialized(CoreML::Specification::MILSpec::DictionaryValue *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::DictionaryValue *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int *v12;
  int v13;
  int v14;
  CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *Aligned;
  google::protobuf::Arena *v16;
  google::protobuf::Arena **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int VarintSizeAsIntFallback;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t result;

  v5 = (CoreML::Specification::MILSpec::DictionaryValue *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
        }
        v14 = *v12;
        goto LABEL_26;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 < *v12)
      {
        *((_DWORD *)this + 6) = v13 + 1;
        Aligned = *(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **)&v12[2 * v13 + 2];
        goto LABEL_32;
      }
      if (v14 == *((_DWORD *)this + 7))
        goto LABEL_23;
LABEL_26:
      *v12 = v14 + 1;
      v16 = *(google::protobuf::Arena **)v5;
      if (*(_QWORD *)v5)
      {
        CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(Aligned);
        v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
        *v17 = Aligned;
        v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>;
        v18 = (unint64_t *)((char *)v16 + 32);
        do
          v19 = __ldxr(v18);
        while (__stxr((unint64_t)v17, v18));
        v17[2] = (google::protobuf::Arena *)v19;
      }
      else
      {
        Aligned = (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)operator new();
        CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(Aligned);
      }
      v20 = *((_QWORD *)this + 4);
      v21 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v21 + 1;
      *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
LABEL_32:
      v22 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v22;
        *(_QWORD *)a2 = v22 + 1;
      }
      v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v26 = *((_DWORD *)a2 + 13);
      v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 == v27)
      {
        v28 = v24;
        result = CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::MergePartialFromCodedStream(Aligned, a2, v25);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C9E44D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::GetCachedSize(CoreML::Specification::MILSpec::DictionaryValue *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::MergePartialFromCodedStream(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::Value *v10;
  char *v11;
  int VarintSizeAsIntFallback;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_21;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_21;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 18)
        goto LABEL_21;
      v10 = (CoreML::Specification::MILSpec::Value *)*((_QWORD *)this + 3);
      if (!v10)
      {
        v10 = (CoreML::Specification::MILSpec::Value *)operator new();
        CoreML::Specification::MILSpec::Value::Value(v10);
        *((_QWORD *)this + 3) = v10;
      }
LABEL_18:
      v11 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v11 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v11;
        *(_QWORD *)a2 = v11 + 1;
      }
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v15 = *((_DWORD *)a2 + 13);
      v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        v17 = v14;
        result = CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream(v10, a2);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17))
          continue;
      }
      return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      v10 = (CoreML::Specification::MILSpec::Value *)*((_QWORD *)this + 2);
      if (!v10)
      {
        v10 = (CoreML::Specification::MILSpec::Value *)operator new();
        CoreML::Specification::MILSpec::Value::Value(v10);
        *((_QWORD *)this + 2) = v10;
      }
      goto LABEL_18;
    }
LABEL_21:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C9E46F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  *(_QWORD *)this = &off_1E3D587E0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)&CoreML::Specification::MILSpec::_DictionaryValue_KeyValuePair_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_19C9E476C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t *CoreML::Specification::MILSpec::DictionaryValue::MergeFrom(uint64_t *this, const CoreML::Specification::MILSpec::DictionaryValue *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **v11;
  std::string **v12;
  const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *v13;
  const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *v14;
  std::string *v15;
  google::protobuf::Arena *v16;
  int v17;
  uint64_t v18;
  CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **v19;
  const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **v20;
  const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *v21;
  CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  int *v27;
  uint64_t v28;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v28 = *((_QWORD *)a2 + 4);
    this = (uint64_t *)google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 2), v5);
    v6 = this;
    v7 = *(int *)v3[4];
    v8 = *((int *)v3 + 6);
    v9 = v7 - v8;
    if ((int)v7 - (int)v8 >= v5)
      v10 = v5;
    else
      v10 = v9;
    if ((int)v10 >= 1)
    {
      v11 = (const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **)(v28 + 8);
      v12 = (std::string **)this;
      do
      {
        v14 = *v11++;
        v13 = v14;
        v15 = *v12++;
        this = (uint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>::Merge(v13, v15);
        --v10;
      }
      while (v10);
    }
    if (v9 < v5)
    {
      v16 = (google::protobuf::Arena *)v3[2];
      v17 = v8 + v5 - v7;
      v18 = 8 * v7 - 8 * v8;
      v19 = (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **)((char *)v6 + v18);
      v20 = (const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **)(v18 + v28 + 8);
      do
      {
        v21 = *v20;
        if (v16)
        {
          CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(Aligned);
          v23 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
          *v23 = Aligned;
          v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>;
          v24 = (unint64_t *)((char *)v16 + 32);
          do
            v25 = __ldxr(v24);
          while (__stxr((unint64_t)v23, v24));
          v23[2] = (google::protobuf::Arena *)v25;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)operator new();
          CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(Aligned);
        }
        this = (uint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>::Merge(v21, (std::string *)Aligned);
        *v19++ = Aligned;
        ++v20;
        --v17;
      }
      while (v17);
    }
    v26 = *((_DWORD *)v3 + 6) + v5;
    *((_DWORD *)v3 + 6) = v26;
    v27 = (int *)v3[4];
    if (*v27 < v26)
      *v27 = v26;
  }
  return this;
}

void sub_19C9E4930(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>::Merge(const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *a1, std::string *a2)
{
  return CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::MergeFrom(a2, a1);
}

std::string *CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::MILSpec::Value *v5;
  CoreML::Specification::MILSpec::Value *v6;
  const CoreML::Specification::MILSpec::Value *v7;
  const CoreML::Specification::MILSpec::Value *v8;
  CoreML::Specification::MILSpec::Value *data;
  const CoreML::Specification::MILSpec::Value *v10;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)&CoreML::Specification::MILSpec::_DictionaryValue_KeyValuePair_default_instance_)
  {
    v5 = (const CoreML::Specification::MILSpec::Value *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::MILSpec::Value *)v3->__r_.__value_.__r.__words[2];
      if (!v6)
      {
        v6 = (CoreML::Specification::MILSpec::Value *)operator new();
        CoreML::Specification::MILSpec::Value::Value(v6);
        v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
        v5 = (const CoreML::Specification::MILSpec::Value *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_;
      this = (std::string *)CoreML::Specification::MILSpec::Value::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::MILSpec::Value *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      data = (CoreML::Specification::MILSpec::Value *)v3[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        data = (CoreML::Specification::MILSpec::Value *)operator new();
        CoreML::Specification::MILSpec::Value::Value(data);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
        v8 = (const CoreML::Specification::MILSpec::Value *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_;
      return (std::string *)CoreML::Specification::MILSpec::Value::MergeFrom(data, v10);
    }
  }
  return this;
}

void sub_19C9E4A54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::Value::MergeFrom(CoreML::Specification::MILSpec::Value *this, const CoreML::Specification::MILSpec::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  const CoreML::Specification::MILSpec::ValueType *v7;
  CoreML::Specification::MILSpec::ValueType *v8;
  const CoreML::Specification::MILSpec::ValueType *v9;
  int v10;
  CoreML::Specification::MILSpec::Value_ImmediateValue *v11;
  CoreML::Specification::MILSpec::Value_BlobFileValue *v12;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v13;
  const CoreML::Specification::MILSpec::Value_ImmediateValue *v14;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v15;
  const CoreML::Specification::MILSpec::Value_BlobFileValue *v16;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (__int128 *)*((_QWORD *)this + 2);
  if (v6 != (__int128 *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  if (a2 != (const CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_)
  {
    v7 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 3);
    if (v7)
    {
      v8 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 3);
      if (!v8)
      {
        v8 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v8);
        *((_QWORD *)this + 3) = v8;
        v7 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 3);
      }
      if (v7)
        v9 = v7;
      else
        v9 = (const CoreML::Specification::MILSpec::ValueType *)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
      CoreML::Specification::MILSpec::ValueType::MergeFrom((std::string *)v8, v9);
    }
  }
  v10 = *((_DWORD *)a2 + 11);
  if (v10 == 5)
  {
    if (*((_DWORD *)this + 11) == 5)
    {
      v12 = (CoreML::Specification::MILSpec::Value_BlobFileValue *)*((_QWORD *)this + 4);
    }
    else
    {
      CoreML::Specification::MILSpec::Value::clear_value((uint64_t)this);
      *((_DWORD *)this + 11) = 5;
      v12 = (CoreML::Specification::MILSpec::Value_BlobFileValue *)operator new();
      v15 = CoreML::Specification::MILSpec::Value_BlobFileValue::Value_BlobFileValue(v12);
      *((_QWORD *)this + 4) = v12;
      if (*((_DWORD *)a2 + 11) != 5)
      {
        CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v15);
        v16 = (const CoreML::Specification::MILSpec::Value_BlobFileValue *)&CoreML::Specification::MILSpec::_Value_BlobFileValue_default_instance_;
        goto LABEL_33;
      }
    }
    v16 = (const CoreML::Specification::MILSpec::Value_BlobFileValue *)*((_QWORD *)a2 + 4);
LABEL_33:
    CoreML::Specification::MILSpec::Value_BlobFileValue::MergeFrom(v12, v16);
    return;
  }
  if (v10 == 3)
  {
    if (*((_DWORD *)this + 11) == 3)
    {
      v11 = (CoreML::Specification::MILSpec::Value_ImmediateValue *)*((_QWORD *)this + 4);
    }
    else
    {
      CoreML::Specification::MILSpec::Value::clear_value((uint64_t)this);
      *((_DWORD *)this + 11) = 3;
      v11 = (CoreML::Specification::MILSpec::Value_ImmediateValue *)operator new();
      v13 = CoreML::Specification::MILSpec::Value_ImmediateValue::Value_ImmediateValue(v11);
      *((_QWORD *)this + 4) = v11;
      if (*((_DWORD *)a2 + 11) != 3)
      {
        CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v13);
        v14 = (const CoreML::Specification::MILSpec::Value_ImmediateValue *)&CoreML::Specification::MILSpec::_Value_ImmediateValue_default_instance_;
        goto LABEL_31;
      }
    }
    v14 = (const CoreML::Specification::MILSpec::Value_ImmediateValue *)*((_QWORD *)a2 + 4);
LABEL_31:
    CoreML::Specification::MILSpec::Value_ImmediateValue::MergeFrom(v11, v14);
  }
}

void sub_19C9E4C74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4056DF9CA5);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::ValueType::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::ValueType *a2)
{
  uint64_t v3;
  uint64_t v4;
  CoreML::Specification::MILSpec::TensorType *v5;
  CoreML::Specification::MILSpec::TupleType *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v10;
  const CoreML::Specification::MILSpec::TupleType *v11;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v12;
  const CoreML::Specification::MILSpec::DictionaryType *v13;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v14;
  const CoreML::Specification::MILSpec::StateType *v15;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v16;
  const CoreML::Specification::MILSpec::TensorType *v17;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v18;
  const CoreML::Specification::MILSpec::ListType *v19;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*(_DWORD *)(v3 + 28) == 1)
      {
        v5 = *(CoreML::Specification::MILSpec::TensorType **)(v3 + 16);
LABEL_21:
        v17 = (const CoreML::Specification::MILSpec::TensorType *)*((_QWORD *)a2 + 2);
        return (std::string *)CoreML::Specification::MILSpec::TensorType::MergeFrom(v5, v17);
      }
      CoreML::Specification::MILSpec::ValueType::clear_type(v3);
      *(_DWORD *)(v3 + 28) = 1;
      v5 = (CoreML::Specification::MILSpec::TensorType *)operator new();
      v16 = CoreML::Specification::MILSpec::TensorType::TensorType(v5);
      *(_QWORD *)(v3 + 16) = v5;
      if (*((_DWORD *)a2 + 7) == 1)
        goto LABEL_21;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v16);
      v17 = (const CoreML::Specification::MILSpec::TensorType *)&CoreML::Specification::MILSpec::_TensorType_default_instance_;
      return (std::string *)CoreML::Specification::MILSpec::TensorType::MergeFrom(v5, v17);
    case 2:
      if (*(_DWORD *)(v3 + 28) == 2)
      {
        v9 = *(std::string **)(v3 + 16);
LABEL_23:
        v19 = (const CoreML::Specification::MILSpec::ListType *)*((_QWORD *)a2 + 2);
        return CoreML::Specification::MILSpec::ListType::MergeFrom(v9, v19);
      }
      CoreML::Specification::MILSpec::ValueType::clear_type(v3);
      *(_DWORD *)(v3 + 28) = 2;
      v9 = (std::string *)operator new();
      v18 = CoreML::Specification::MILSpec::ListType::ListType((CoreML::Specification::MILSpec::ListType *)v9);
      *(_QWORD *)(v3 + 16) = v9;
      if (*((_DWORD *)a2 + 7) == 2)
        goto LABEL_23;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v18);
      v19 = (const CoreML::Specification::MILSpec::ListType *)&CoreML::Specification::MILSpec::_ListType_default_instance_;
      return CoreML::Specification::MILSpec::ListType::MergeFrom(v9, v19);
    case 3:
      if (*(_DWORD *)(v3 + 28) == 3)
      {
        v6 = *(CoreML::Specification::MILSpec::TupleType **)(v3 + 16);
      }
      else
      {
        CoreML::Specification::MILSpec::ValueType::clear_type(v3);
        *(_DWORD *)(v3 + 28) = 3;
        v6 = (CoreML::Specification::MILSpec::TupleType *)operator new();
        v10 = CoreML::Specification::MILSpec::TupleType::TupleType(v6);
        *(_QWORD *)(v3 + 16) = v6;
        if (*((_DWORD *)a2 + 7) != 3)
        {
          CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v10);
          v11 = (const CoreML::Specification::MILSpec::TupleType *)&CoreML::Specification::MILSpec::_TupleType_default_instance_;
          return (std::string *)CoreML::Specification::MILSpec::TupleType::MergeFrom((uint64_t *)v6, v11);
        }
      }
      v11 = (const CoreML::Specification::MILSpec::TupleType *)*((_QWORD *)a2 + 2);
      return (std::string *)CoreML::Specification::MILSpec::TupleType::MergeFrom((uint64_t *)v6, v11);
    case 4:
      if (*(_DWORD *)(v3 + 28) == 4)
      {
        v7 = *(std::string **)(v3 + 16);
LABEL_17:
        v13 = (const CoreML::Specification::MILSpec::DictionaryType *)*((_QWORD *)a2 + 2);
        return CoreML::Specification::MILSpec::DictionaryType::MergeFrom(v7, v13);
      }
      CoreML::Specification::MILSpec::ValueType::clear_type(v3);
      *(_DWORD *)(v3 + 28) = 4;
      v7 = (std::string *)operator new();
      v12 = CoreML::Specification::MILSpec::DictionaryType::DictionaryType((CoreML::Specification::MILSpec::DictionaryType *)v7);
      *(_QWORD *)(v3 + 16) = v7;
      if (*((_DWORD *)a2 + 7) == 4)
        goto LABEL_17;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v12);
      v13 = (const CoreML::Specification::MILSpec::DictionaryType *)&CoreML::Specification::MILSpec::_DictionaryType_default_instance_;
      return CoreML::Specification::MILSpec::DictionaryType::MergeFrom(v7, v13);
    case 5:
      if (*(_DWORD *)(v3 + 28) == 5)
      {
        v8 = *(std::string **)(v3 + 16);
LABEL_19:
        v15 = (const CoreML::Specification::MILSpec::StateType *)*((_QWORD *)a2 + 2);
        return CoreML::Specification::MILSpec::StateType::MergeFrom(v8, v15);
      }
      CoreML::Specification::MILSpec::ValueType::clear_type(v3);
      *(_DWORD *)(v3 + 28) = 5;
      v8 = (std::string *)operator new();
      v14 = CoreML::Specification::MILSpec::StateType::StateType((CoreML::Specification::MILSpec::StateType *)v8);
      *(_QWORD *)(v3 + 16) = v8;
      if (*((_DWORD *)a2 + 7) == 5)
        goto LABEL_19;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v14);
      v15 = (const CoreML::Specification::MILSpec::StateType *)&CoreML::Specification::MILSpec::_StateType_default_instance_;
      return CoreML::Specification::MILSpec::StateType::MergeFrom(v8, v15);
    default:
      return this;
  }
}

void sub_19C9E4F80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::Value_ImmediateValue::MergeFrom(CoreML::Specification::MILSpec::Value_ImmediateValue *this, const CoreML::Specification::MILSpec::Value_ImmediateValue *a2)
{
  uint64_t v4;
  CoreML::Specification::MILSpec::TensorValue *v5;
  CoreML::Specification::MILSpec::ListValue *v6;
  CoreML::Specification::MILSpec::DictionaryValue *v7;
  CoreML::Specification::MILSpec::TupleValue *v8;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v9;
  uint64_t *v10;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v11;
  const CoreML::Specification::MILSpec::DictionaryValue *v12;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v13;
  const CoreML::Specification::MILSpec::TensorValue *v14;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v15;
  uint64_t v16;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*((_DWORD *)this + 7) == 1)
      {
        v5 = (CoreML::Specification::MILSpec::TensorValue *)*((_QWORD *)this + 2);
LABEL_17:
        v14 = (const CoreML::Specification::MILSpec::TensorValue *)*((_QWORD *)a2 + 2);
        goto LABEL_26;
      }
      CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      v5 = (CoreML::Specification::MILSpec::TensorValue *)operator new();
      v13 = CoreML::Specification::MILSpec::TensorValue::TensorValue(v5);
      *((_QWORD *)this + 2) = v5;
      if (*((_DWORD *)a2 + 7) == 1)
        goto LABEL_17;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v13);
      v14 = (const CoreML::Specification::MILSpec::TensorValue *)&CoreML::Specification::MILSpec::_TensorValue_default_instance_;
LABEL_26:
      CoreML::Specification::MILSpec::TensorValue::MergeFrom(v5, v14);
      return;
    case 2:
      if (*((_DWORD *)this + 7) == 2)
      {
        v8 = (CoreML::Specification::MILSpec::TupleValue *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
        *((_DWORD *)this + 7) = 2;
        v8 = (CoreML::Specification::MILSpec::TupleValue *)operator new();
        v15 = CoreML::Specification::MILSpec::TupleValue::TupleValue(v8);
        *((_QWORD *)this + 2) = v8;
        if (*((_DWORD *)a2 + 7) != 2)
        {
          CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v15);
          v10 = &CoreML::Specification::MILSpec::_TupleValue_default_instance_;
          goto LABEL_28;
        }
      }
      v10 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_28:
      v16 = (uint64_t)v8;
      goto LABEL_22;
    case 3:
      if (*((_DWORD *)this + 7) == 3)
      {
        v6 = (CoreML::Specification::MILSpec::ListValue *)*((_QWORD *)this + 2);
LABEL_13:
        v10 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_21;
      }
      CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      v6 = (CoreML::Specification::MILSpec::ListValue *)operator new();
      v9 = CoreML::Specification::MILSpec::ListValue::ListValue(v6);
      *((_QWORD *)this + 2) = v6;
      if (*((_DWORD *)a2 + 7) == 3)
        goto LABEL_13;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v9);
      v10 = &CoreML::Specification::MILSpec::_ListValue_default_instance_;
LABEL_21:
      v16 = (uint64_t)v6;
LABEL_22:
      CoreML::Specification::MILSpec::TupleValue::MergeFrom(v16, (const CoreML::Specification::MILSpec::TupleValue *)v10);
      return;
    case 4:
      if (*((_DWORD *)this + 7) == 4)
      {
        v7 = (CoreML::Specification::MILSpec::DictionaryValue *)*((_QWORD *)this + 2);
LABEL_15:
        v12 = (const CoreML::Specification::MILSpec::DictionaryValue *)*((_QWORD *)a2 + 2);
        goto LABEL_24;
      }
      CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 4;
      v7 = (CoreML::Specification::MILSpec::DictionaryValue *)operator new();
      v11 = CoreML::Specification::MILSpec::DictionaryValue::DictionaryValue(v7);
      *((_QWORD *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) == 4)
        goto LABEL_15;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v11);
      v12 = (const CoreML::Specification::MILSpec::DictionaryValue *)&CoreML::Specification::MILSpec::_DictionaryValue_default_instance_;
LABEL_24:
      CoreML::Specification::MILSpec::DictionaryValue::MergeFrom((uint64_t *)v7, v12);
      return;
    default:
      return;
  }
}

void sub_19C9E5238(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::Value_BlobFileValue::MergeFrom(CoreML::Specification::MILSpec::Value_BlobFileValue *this, const CoreML::Specification::MILSpec::Value_BlobFileValue *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (__int128 *)*((_QWORD *)this + 2);
  if (v6 != (__int128 *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (v7)
    *((_QWORD *)this + 3) = v7;
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
      this = *(_QWORD *)(this + 16);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::MILSpec::TensorValue *CoreML::Specification::MILSpec::TensorValue::TensorValue(CoreML::Specification::MILSpec::TensorValue *this)
{
  *(_QWORD *)this = &off_1E3D57EF8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue *)&CoreML::Specification::MILSpec::_TensorValue_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_19C9E53B0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::TensorValue::MergeFrom(CoreML::Specification::MILSpec::TensorValue *this, const CoreML::Specification::MILSpec::TensorValue *a2)
{
  uint64_t v4;
  CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *v5;
  CoreML::Specification::MILSpec::TensorValue_RepeatedInts *v6;
  CoreML::Specification::MILSpec::TensorValue_RepeatedBools *v7;
  CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v8;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v9;
  CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *v10;
  CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *v11;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v12;
  uint64_t *v13;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v14;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v15;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedBools *v16;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v17;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v18;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v19;
  uint64_t *v20;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v21;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v22;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *v23;
  uint64_t *v24;
  uint64_t *v25;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*((_DWORD *)this + 7) == 1)
      {
        v5 = (CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        v5 = (CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)operator new();
        v12 = CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::TensorValue_RepeatedFloats(v5);
        *((_QWORD *)this + 2) = v5;
        if (*((_DWORD *)a2 + 7) != 1)
        {
          CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v12);
          v13 = &CoreML::Specification::MILSpec::_TensorValue_RepeatedFloats_default_instance_;
          goto LABEL_33;
        }
      }
      v13 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_33:
      v24 = (uint64_t *)v5;
      goto LABEL_34;
    case 2:
      if (*((_DWORD *)this + 7) == 2)
      {
        v6 = (CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)*((_QWORD *)this + 2);
LABEL_21:
        v13 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_36;
      }
      CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      v6 = (CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)operator new();
      v14 = CoreML::Specification::MILSpec::TensorValue_RepeatedInts::TensorValue_RepeatedInts(v6);
      *((_QWORD *)this + 2) = v6;
      if (*((_DWORD *)a2 + 7) == 2)
        goto LABEL_21;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v14);
      v13 = &CoreML::Specification::MILSpec::_TensorValue_RepeatedInts_default_instance_;
LABEL_36:
      v24 = (uint64_t *)v6;
LABEL_34:
      CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergeFrom(v24, (const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)v13);
      return;
    case 3:
      if (*((_DWORD *)this + 7) == 3)
      {
        v7 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)*((_QWORD *)this + 2);
LABEL_23:
        v16 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)*((_QWORD *)a2 + 2);
        goto LABEL_38;
      }
      CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      v7 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)operator new();
      v15 = CoreML::Specification::MILSpec::TensorValue_RepeatedBools::TensorValue_RepeatedBools(v7);
      *((_QWORD *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) == 3)
        goto LABEL_23;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v15);
      v16 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedBools_default_instance_;
LABEL_38:
      CoreML::Specification::MILSpec::TensorValue_RepeatedBools::MergeFrom((uint64_t *)v7, v16);
      return;
    case 4:
      if (*((_DWORD *)this + 7) == 4)
      {
        v8 = (CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((_QWORD *)this + 2);
LABEL_25:
        v18 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((_QWORD *)a2 + 2);
        goto LABEL_40;
      }
      CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 4;
      v8 = (CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)operator new();
      v17 = CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::TensorValue_RepeatedStrings(v8);
      *((_QWORD *)this + 2) = v8;
      if (*((_DWORD *)a2 + 7) == 4)
        goto LABEL_25;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v17);
      v18 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedStrings_default_instance_;
LABEL_40:
      CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v8, v18);
      return;
    case 5:
      if (*((_DWORD *)this + 7) == 5)
      {
        v9 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)this + 2);
LABEL_27:
        v20 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_42;
      }
      CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 5;
      v9 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)operator new();
      v19 = CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts(v9);
      *((_QWORD *)this + 2) = v9;
      if (*((_DWORD *)a2 + 7) == 5)
        goto LABEL_27;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v19);
      v20 = &CoreML::Specification::MILSpec::_TensorValue_RepeatedLongInts_default_instance_;
LABEL_42:
      v25 = (uint64_t *)v9;
      goto LABEL_43;
    case 6:
      if (*((_DWORD *)this + 7) == 6)
      {
        v10 = (CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *)*((_QWORD *)this + 2);
LABEL_29:
        v20 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_45;
      }
      CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 6;
      v10 = (CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *)operator new();
      v21 = CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::TensorValue_RepeatedDoubles(v10);
      *((_QWORD *)this + 2) = v10;
      if (*((_DWORD *)a2 + 7) == 6)
        goto LABEL_29;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v21);
      v20 = &CoreML::Specification::MILSpec::_TensorValue_RepeatedDoubles_default_instance_;
LABEL_45:
      v25 = (uint64_t *)v10;
LABEL_43:
      CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom(v25, (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)v20);
      return;
    case 7:
      if (*((_DWORD *)this + 7) == 7)
      {
        v11 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)*((_QWORD *)this + 2);
LABEL_31:
        v23 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)*((_QWORD *)a2 + 2);
        goto LABEL_47;
      }
      CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 7;
      v11 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)operator new();
      v22 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes(v11);
      *((_QWORD *)this + 2) = v11;
      if (*((_DWORD *)a2 + 7) == 7)
        goto LABEL_31;
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v22);
      v23 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedBytes_default_instance_;
LABEL_47:
      CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::MergeFrom(v11, v23);
      return;
    default:
      return;
  }
}

void sub_19C9E578C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::TupleValue *CoreML::Specification::MILSpec::TupleValue::TupleValue(CoreML::Specification::MILSpec::TupleValue *this)
{
  *(_QWORD *)this = &off_1E3D57E60;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::TupleValue *)&CoreML::Specification::MILSpec::_TupleValue_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_19C9E5848(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TupleValue::MergeFrom(uint64_t this, const CoreML::Specification::MILSpec::TupleValue *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  CoreML::Specification::MILSpec::Value **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(this + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::MILSpec::Value **)(*((_QWORD *)a2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 16), v5);
    this = google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(v3 + 16, (CoreML::Specification::MILSpec::Value **)v7, v6, v5, **(_DWORD **)(v3 + 32) - *(_DWORD *)(v3 + 24));
    v8 = *(_DWORD *)(v3 + 24) + v5;
    *(_DWORD *)(v3 + 24) = v8;
    v9 = *(signed int **)(v3 + 32);
    if (*v9 < v8)
      *v9 = v8;
  }
  return this;
}

CoreML::Specification::MILSpec::ListValue *CoreML::Specification::MILSpec::ListValue::ListValue(CoreML::Specification::MILSpec::ListValue *this)
{
  *(_QWORD *)this = &off_1E3D58D38;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::ListValue *)&CoreML::Specification::MILSpec::_ListValue_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_19C9E5968(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::DictionaryValue *CoreML::Specification::MILSpec::DictionaryValue::DictionaryValue(CoreML::Specification::MILSpec::DictionaryValue *this)
{
  *(_QWORD *)this = &off_1E3D580C0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::DictionaryValue *)&CoreML::Specification::MILSpec::_DictionaryValue_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_19C9E59E8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(uint64_t result, CoreML::Specification::MILSpec::Value **a2, CoreML::Specification::MILSpec::Value **a3, unsigned int a4, unsigned int a5)
{
  google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::MILSpec::Value **v11;
  CoreML::Specification::MILSpec::Value **v12;
  CoreML::Specification::MILSpec::Value *v13;
  CoreML::Specification::MILSpec::Value *v14;
  CoreML::Specification::MILSpec::Value *v15;
  BOOL v16;
  int v17;
  google::protobuf::Arena *v18;
  CoreML::Specification::MILSpec::Value **v19;
  CoreML::Specification::MILSpec::Value **v20;
  CoreML::Specification::MILSpec::Value *v21;
  CoreML::Specification::MILSpec::Value *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;

  v9 = (google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Value>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20;
      if (v18)
      {
        CoreML::Specification::MILSpec::Value::Value(Aligned);
        v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
        *v23 = Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
        v24 = (unint64_t *)((char *)v18 + 32);
        do
          v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
      }
      else
      {
        Aligned = (CoreML::Specification::MILSpec::Value *)operator new();
        CoreML::Specification::MILSpec::Value::Value(Aligned);
      }
      result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Value>::Merge(v21, Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_19C9E5B24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Value>::Merge(CoreML::Specification::MILSpec::Value *a1, CoreML::Specification::MILSpec::Value *this)
{
  return CoreML::Specification::MILSpec::Value::MergeFrom(this, a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue::clear_value(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      this = *(_QWORD *)(this + 16);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::TensorValue_RepeatedFloats(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D58580;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedFloats_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_19C9E5C0C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergeFrom(uint64_t *this, const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  int v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    v7 = *((_DWORD *)v3 + 4);
    v6 = (unsigned int *)(v3 + 2);
    google::protobuf::RepeatedField<float>::Reserve(v6, v7 + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v6 + 1) + 4 * (int)*v6 + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 4 * *((int *)a2 + 4));
    *v6 += *((_DWORD *)a2 + 4);
  }
  return this;
}

CoreML::Specification::MILSpec::TensorValue_RepeatedInts *CoreML::Specification::MILSpec::TensorValue_RepeatedInts::TensorValue_RepeatedInts(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D58320;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedInts_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_19C9E5D0C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedBools *CoreML::Specification::MILSpec::TensorValue_RepeatedBools::TensorValue_RepeatedBools(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D583B8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedBools_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_19C9E5D8C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::MILSpec::TensorValue_RepeatedBools::MergeFrom(uint64_t *this, const CoreML::Specification::MILSpec::TensorValue_RepeatedBools *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  int v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    v7 = *((_DWORD *)v3 + 4);
    v6 = (unsigned int *)(v3 + 2);
    google::protobuf::RepeatedField<BOOL>::Reserve(v6, v7 + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v6 + 1) + (int)*v6 + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), *((int *)a2 + 4));
    *v6 += *((_DWORD *)a2 + 4);
  }
  return this;
}

CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::TensorValue_RepeatedStrings(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  *(_QWORD *)this = &off_1E3D58748;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedStrings_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_19C9E5E8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *a2)
{
  std::string *v3;
  uint64_t v4;
  unsigned int v5;
  const std::string **v6;
  unsigned int *v7;
  signed int v8;
  signed int *size;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (const std::string **)(*((_QWORD *)a2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  return this;
}

CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D58878;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedLongInts_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_19C9E5FA0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom(uint64_t *this, const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  int v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    v7 = *((_DWORD *)v3 + 4);
    v6 = (unsigned int *)(v3 + 2);
    google::protobuf::RepeatedField<double>::Reserve(v6, v7 + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v6 + 1) + 8 * (int)*v6 + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *v6 += *((_DWORD *)a2 + 4);
  }
  return this;
}

CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::TensorValue_RepeatedDoubles(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D586B0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedDoubles_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_19C9E60A0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
  *(_QWORD *)this = &off_1E3D58450;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedBytes_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_19C9E6120(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::MergeFrom(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this, const CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string **v7;
  std::string *v8;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      return;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    return;
  }
  v8 = (std::string *)*((_QWORD *)this + 2);
  v7 = (std::string **)((char *)this + 16);
  v6 = v8;
  if (v8 != (std::string *)v5)
  {
    if (v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, v5);
    else
      std::string::operator=(v6, (const std::string *)v5);
  }
}

uint64_t CoreML::Specification::MILSpec::ValueType::clear_type(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      this = *(_QWORD *)(this + 16);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorType::MergeFrom(CoreML::Specification::MILSpec::TensorType *this, const CoreML::Specification::MILSpec::TensorType *a2)
{
  uint64_t v4;
  int v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  CoreML::Specification::MILSpec::Dimension **v12;
  CoreML::Specification::MILSpec::Dimension **v13;
  CoreML::Specification::MILSpec::Dimension *v14;
  CoreML::Specification::MILSpec::Dimension *v15;
  CoreML::Specification::MILSpec::Dimension *v16;
  google::protobuf::Arena *v17;
  int v18;
  uint64_t v19;
  CoreML::Specification::MILSpec::Dimension **v20;
  CoreML::Specification::MILSpec::Dimension **v21;
  CoreML::Specification::MILSpec::Dimension *v22;
  CoreML::Specification::MILSpec::Dimension *Aligned;
  google::protobuf::Arena **v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  int *v28;
  uint64_t result;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v32 = *((_QWORD *)a2 + 4);
    v6 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::TensorType *)((char *)this + 16), v5);
    v7 = v6;
    v8 = **((int **)this + 4);
    v9 = *((int *)this + 6);
    v10 = v8 - v9;
    v33 = v5;
    if ((int)v8 - (int)v9 >= v5)
      v11 = v5;
    else
      v11 = v10;
    if ((int)v11 >= 1)
    {
      v12 = (CoreML::Specification::MILSpec::Dimension **)(v32 + 8);
      v13 = (CoreML::Specification::MILSpec::Dimension **)v6;
      do
      {
        v15 = *v12++;
        v14 = v15;
        v16 = *v13++;
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Dimension>::Merge(v14, v16);
        --v11;
      }
      while (v11);
    }
    if (v10 < v33)
    {
      v17 = (google::protobuf::Arena *)*((_QWORD *)this + 2);
      v18 = v9 + v33 - v8;
      v19 = 8 * v8 - 8 * v9;
      v20 = (CoreML::Specification::MILSpec::Dimension **)((char *)v7 + v19);
      v21 = (CoreML::Specification::MILSpec::Dimension **)(v19 + v32 + 8);
      do
      {
        v22 = *v21;
        if (v17)
        {
          CoreML::Specification::MILSpec::Dimension::Dimension(Aligned);
          v24 = google::protobuf::Arena::AllocateAligned(v17, 0, 24);
          *v24 = Aligned;
          v24[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Dimension>;
          v25 = (unint64_t *)((char *)v17 + 32);
          do
            v26 = __ldxr(v25);
          while (__stxr((unint64_t)v24, v25));
          v24[2] = (google::protobuf::Arena *)v26;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Dimension *)operator new();
          CoreML::Specification::MILSpec::Dimension::Dimension(Aligned);
        }
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Dimension>::Merge(v22, Aligned);
        *v20++ = Aligned;
        ++v21;
        --v18;
      }
      while (v18);
    }
    v27 = *((_DWORD *)this + 6) + v33;
    *((_DWORD *)this + 6) = v27;
    v28 = (int *)*((_QWORD *)this + 4);
    if (*v28 < v27)
      *v28 = v27;
  }
  result = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((char *)this + 40, (char *)a2 + 40);
  v30 = *((_QWORD *)a2 + 9);
  if (v30)
    *((_QWORD *)this + 9) = v30;
  v31 = *((_DWORD *)a2 + 20);
  if (v31)
    *((_DWORD *)this + 20) = v31;
  return result;
}

void sub_19C9E63F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::ListType *CoreML::Specification::MILSpec::ListType::ListType(CoreML::Specification::MILSpec::ListType *this)
{
  *(_QWORD *)this = &off_1E3D58C08;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::ListType *)&CoreML::Specification::MILSpec::_ListType_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_19C9E6468(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::ListType::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::ListType *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::MILSpec::ValueType *v5;
  CoreML::Specification::MILSpec::ValueType *v6;
  const CoreML::Specification::MILSpec::ValueType *v7;
  const CoreML::Specification::MILSpec::Dimension *v8;
  CoreML::Specification::MILSpec::Dimension *data;
  const CoreML::Specification::MILSpec::Dimension *v10;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::MILSpec::ListType *)&CoreML::Specification::MILSpec::_ListType_default_instance_)
  {
    v5 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::MILSpec::ValueType *)v3->__r_.__value_.__r.__words[2];
      if (!v6)
      {
        v6 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v6);
        v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
        v5 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::MILSpec::ValueType *)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
      this = (std::string *)CoreML::Specification::MILSpec::ValueType::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::MILSpec::Dimension *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      data = (CoreML::Specification::MILSpec::Dimension *)v3[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        data = (CoreML::Specification::MILSpec::Dimension *)operator new();
        CoreML::Specification::MILSpec::Dimension::Dimension(data);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
        v8 = (const CoreML::Specification::MILSpec::Dimension *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::MILSpec::Dimension *)&CoreML::Specification::MILSpec::_Dimension_default_instance_;
      return (std::string *)CoreML::Specification::MILSpec::Dimension::MergeFrom((uint64_t *)data, v10);
    }
  }
  return this;
}

void sub_19C9E6574(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::TupleType *CoreML::Specification::MILSpec::TupleType::TupleType(CoreML::Specification::MILSpec::TupleType *this)
{
  *(_QWORD *)this = &off_1E3D58F00;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::TupleType *)&CoreML::Specification::MILSpec::_TupleType_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_19C9E65FC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::MILSpec::TupleType::MergeFrom(uint64_t *this, const CoreML::Specification::MILSpec::TupleType *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  CoreML::Specification::MILSpec::ValueType **v11;
  CoreML::Specification::MILSpec::ValueType **v12;
  CoreML::Specification::MILSpec::ValueType *v13;
  CoreML::Specification::MILSpec::ValueType *v14;
  CoreML::Specification::MILSpec::ValueType *v15;
  google::protobuf::Arena *v16;
  int v17;
  uint64_t v18;
  CoreML::Specification::MILSpec::ValueType **v19;
  CoreML::Specification::MILSpec::ValueType **v20;
  CoreML::Specification::MILSpec::ValueType *v21;
  CoreML::Specification::MILSpec::ValueType *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  int *v27;
  uint64_t v28;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v28 = *((_QWORD *)a2 + 4);
    this = (uint64_t *)google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 2), v5);
    v6 = this;
    v7 = *(int *)v3[4];
    v8 = *((int *)v3 + 6);
    v9 = v7 - v8;
    if ((int)v7 - (int)v8 >= v5)
      v10 = v5;
    else
      v10 = v9;
    if ((int)v10 >= 1)
    {
      v11 = (CoreML::Specification::MILSpec::ValueType **)(v28 + 8);
      v12 = (CoreML::Specification::MILSpec::ValueType **)this;
      do
      {
        v14 = *v11++;
        v13 = v14;
        v15 = *v12++;
        this = (uint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::ValueType>::Merge(v13, v15);
        --v10;
      }
      while (v10);
    }
    if (v9 < v5)
    {
      v16 = (google::protobuf::Arena *)v3[2];
      v17 = v8 + v5 - v7;
      v18 = 8 * v7 - 8 * v8;
      v19 = (CoreML::Specification::MILSpec::ValueType **)((char *)v6 + v18);
      v20 = (CoreML::Specification::MILSpec::ValueType **)(v18 + v28 + 8);
      do
      {
        v21 = *v20;
        if (v16)
        {
          CoreML::Specification::MILSpec::ValueType::ValueType(Aligned);
          v23 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
          *v23 = Aligned;
          v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::ValueType>;
          v24 = (unint64_t *)((char *)v16 + 32);
          do
            v25 = __ldxr(v24);
          while (__stxr((unint64_t)v23, v24));
          v23[2] = (google::protobuf::Arena *)v25;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::ValueType *)operator new();
          CoreML::Specification::MILSpec::ValueType::ValueType(Aligned);
        }
        this = (uint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::ValueType>::Merge(v21, Aligned);
        *v19++ = Aligned;
        ++v20;
        --v17;
      }
      while (v17);
    }
    v26 = *((_DWORD *)v3 + 6) + v5;
    *((_DWORD *)v3 + 6) = v26;
    v27 = (int *)v3[4];
    if (*v27 < v26)
      *v27 = v26;
  }
  return this;
}

void sub_19C9E67C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::DictionaryType *CoreML::Specification::MILSpec::DictionaryType::DictionaryType(CoreML::Specification::MILSpec::DictionaryType *this)
{
  *(_QWORD *)this = &off_1E3D57F90;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::DictionaryType *)&CoreML::Specification::MILSpec::_DictionaryType_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_19C9E6834(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::DictionaryType::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::DictionaryType *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::MILSpec::ValueType *v5;
  CoreML::Specification::MILSpec::ValueType *v6;
  const CoreML::Specification::MILSpec::ValueType *v7;
  const CoreML::Specification::MILSpec::ValueType *v8;
  CoreML::Specification::MILSpec::ValueType *data;
  const CoreML::Specification::MILSpec::ValueType *v10;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::MILSpec::DictionaryType *)&CoreML::Specification::MILSpec::_DictionaryType_default_instance_)
  {
    v5 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::MILSpec::ValueType *)v3->__r_.__value_.__r.__words[2];
      if (!v6)
      {
        v6 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v6);
        v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
        v5 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::MILSpec::ValueType *)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
      this = (std::string *)CoreML::Specification::MILSpec::ValueType::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      data = (CoreML::Specification::MILSpec::ValueType *)v3[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        data = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(data);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
        v8 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::MILSpec::ValueType *)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
      return (std::string *)CoreML::Specification::MILSpec::ValueType::MergeFrom(data, v10);
    }
  }
  return this;
}

void sub_19C9E6938(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::StateType *CoreML::Specification::MILSpec::StateType::StateType(CoreML::Specification::MILSpec::StateType *this)
{
  *(_QWORD *)this = &off_1E3D58E68;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::StateType *)&CoreML::Specification::MILSpec::_StateType_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_19C9E69B0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::StateType::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::StateType *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::MILSpec::ValueType *v5;
  CoreML::Specification::MILSpec::ValueType *v7;
  const CoreML::Specification::MILSpec::ValueType *v8;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::MILSpec::StateType *)&CoreML::Specification::MILSpec::_StateType_default_instance_
    && v5 != 0)
  {
    v7 = (CoreML::Specification::MILSpec::ValueType *)v3->__r_.__value_.__r.__words[2];
    if (!v7)
    {
      v7 = (CoreML::Specification::MILSpec::ValueType *)operator new();
      CoreML::Specification::MILSpec::ValueType::ValueType(v7);
      v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
      v5 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::MILSpec::ValueType *)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
    return (std::string *)CoreML::Specification::MILSpec::ValueType::MergeFrom(v7, v8);
  }
  return this;
}

void sub_19C9E6A6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::ValueType>::Merge(CoreML::Specification::MILSpec::ValueType *a1, CoreML::Specification::MILSpec::ValueType *this)
{
  return CoreML::Specification::MILSpec::ValueType::MergeFrom(this, a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::ValueType>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::MILSpec::Dimension *CoreML::Specification::MILSpec::Dimension::Dimension(CoreML::Specification::MILSpec::Dimension *this)
{
  *(_QWORD *)this = &off_1E3D58CA0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Dimension *)&CoreML::Specification::MILSpec::_Dimension_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_19C9E6AF8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::MILSpec::Dimension::MergeFrom(uint64_t *this, const CoreML::Specification::MILSpec::Dimension *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 7);
  if (v5 != 2)
  {
    if (v5 != 1)
      return this;
    if (*(_DWORD *)(v3 + 28) == 1)
    {
      v6 = *(uint64_t **)(v3 + 16);
    }
    else
    {
      CoreML::Specification::MILSpec::Dimension::clear_dimension(v3);
      *(_DWORD *)(v3 + 28) = 1;
      v6 = (uint64_t *)operator new();
      this = (uint64_t *)CoreML::Specification::MILSpec::Dimension_ConstantDimension::Dimension_ConstantDimension((CoreML::Specification::MILSpec::Dimension_ConstantDimension *)v6);
      *(_QWORD *)(v3 + 16) = v6;
      if (*((_DWORD *)a2 + 7) != 1)
      {
        this = (uint64_t *)CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults((CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)this);
        v8 = &CoreML::Specification::MILSpec::_Dimension_ConstantDimension_default_instance_;
        goto LABEL_14;
      }
    }
    v8 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_14:
    v10 = v8[1];
    if ((v10 & 1) != 0)
      this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v6 + 1, v10 & 0xFFFFFFFFFFFFFFFELL);
    v11 = v8[2];
    if (v11)
      v6[2] = v11;
    return this;
  }
  if (*(_DWORD *)(v3 + 28) == 2)
  {
    v7 = *(_QWORD *)(v3 + 16);
  }
  else
  {
    CoreML::Specification::MILSpec::Dimension::clear_dimension(v3);
    *(_DWORD *)(v3 + 28) = 2;
    v7 = operator new();
    this = (uint64_t *)CoreML::Specification::MILSpec::Dimension_UnknownDimension::Dimension_UnknownDimension((CoreML::Specification::MILSpec::Dimension_UnknownDimension *)v7);
    *(_QWORD *)(v3 + 16) = v7;
    if (*((_DWORD *)a2 + 7) != 2)
    {
      this = (uint64_t *)CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults((CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)this);
      v9 = &CoreML::Specification::MILSpec::_Dimension_UnknownDimension_default_instance_;
      goto LABEL_19;
    }
  }
  v9 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_19:
  v12 = v9[1];
  if ((v12 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v7 + 8), v12 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_BYTE *)v9 + 16))
    *(_BYTE *)(v7 + 16) = 1;
  return this;
}

void sub_19C9E6C74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Dimension::clear_dimension(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 28);
  if (v2 == 2 || v2 == 1)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::MILSpec::Dimension_ConstantDimension *CoreML::Specification::MILSpec::Dimension_ConstantDimension::Dimension_ConstantDimension(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
  *(_QWORD *)this = &off_1E3D58618;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Dimension_ConstantDimension *)&CoreML::Specification::MILSpec::_Dimension_ConstantDimension_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_19C9E6D44(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::Dimension_UnknownDimension *CoreML::Specification::MILSpec::Dimension_UnknownDimension::Dimension_UnknownDimension(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
  *(_QWORD *)this = &off_1E3D584E8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Dimension_UnknownDimension *)&CoreML::Specification::MILSpec::_Dimension_UnknownDimension_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  return this;
}

void sub_19C9E6DA8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  void *result;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  const CoreML::Specification::MILSpec::Value *v7;
  google::protobuf::Arena **v8;
  CoreML::Specification::MILSpec::Value *v9;
  unsigned __int8 *v10[3];

  result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v10, *(_QWORD **)(a2 + 24));
  v4 = v10[0];
  if (v10[0])
  {
    v5 = a1 + 8;
    do
    {
      v6 = *((_QWORD *)v4 + 3);
      v7 = (const CoreML::Specification::MILSpec::Value *)(v6 + 24);
      v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](v5, v6);
      if (v7 != (const CoreML::Specification::MILSpec::Value *)v8)
      {
        v9 = (CoreML::Specification::MILSpec::Value *)v8;
        CoreML::Specification::MILSpec::Value::Clear((CoreML::Specification::MILSpec::Value *)v8);
        CoreML::Specification::MILSpec::Value::MergeFrom(v9, v7);
      }
      result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v10);
      v4 = v10[0];
    }
    while (v10[0]);
  }
  return result;
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  google::protobuf::Arena *v12;
  std::string *Aligned;
  std::string::__raw *v14;
  __int128 v15;
  google::protobuf::Arena **v16;
  google::protobuf::Arena *v17;
  google::protobuf::Arena *v18;
  std::string *v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  std::string __p;
  std::string::size_type v25;
  uint64_t v26[4];
  _QWORD v27[4];

  v4 = *(_QWORD **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v25 = 0;
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v27, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  v6 = v27[0];
  if (v27[0])
    goto LABEL_18;
  v7 = v4[1];
  v8 = *v4 + 1;
  v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      v21 = 2 * v7;
LABEL_37:
      google::protobuf::Map<std::string,std::string>::InnerMap::Resize((uint64_t)v4, v21, v5);
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      v11 = v26[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    v22 = 0;
    v23 = ((5 * v8) >> 2) + 1;
    do
      ++v22;
    while (v23 << v22 < v9);
    v21 = v7 >> v22 <= 8 ? 8 : v7 >> v22;
    if (v21 != v7)
      goto LABEL_37;
  }
  v11 = v27[3];
LABEL_11:
  v12 = (google::protobuf::Arena *)v4[5];
  if (v12)
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E0DE4EE8], 40);
  else
    Aligned = (std::string *)operator new(0x28uLL);
  v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v25;
  google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v26, (uint64_t)v4, v11, v14);
  ++*v4;
  v6 = v26[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (*(_QWORD *)a1)
    {
      v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E0DE4EE8], 72);
      v17 = *(google::protobuf::Arena **)a1;
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
      v18 = *(google::protobuf::Arena **)a1;
      CoreML::Specification::MILSpec::Value::Value((CoreML::Specification::MILSpec::Value *)(v16 + 3));
      google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Value>((google::protobuf::Arena **)v18, (google::protobuf::Arena *)(v16 + 3));
      std::string::operator=((std::string *)v16, (const std::string *)a2);
    }
    else
    {
      v19 = (std::string *)operator new();
      v16 = (google::protobuf::Arena **)v19;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v19->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      CoreML::Specification::MILSpec::Value::Value((CoreML::Specification::MILSpec::Value *)(v16 + 3));
    }
    *(_QWORD *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_19C9E70A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1A1AD6260](v14, 0x10B2C40CC7398DALL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value::Clear(CoreML::Specification::MILSpec::Value *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 2);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  return CoreML::Specification::MILSpec::Value::clear_value((uint64_t)this);
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Value>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Dimension>::Merge(CoreML::Specification::MILSpec::Dimension *a1, CoreML::Specification::MILSpec::Dimension *this)
{
  return CoreML::Specification::MILSpec::Dimension::MergeFrom((uint64_t *)this, a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Dimension>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::DictionaryValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryValue>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::~DictionaryValue_KeyValuePair(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::~DictionaryValue_KeyValuePair(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E3D587E0;
  if (this != (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)&CoreML::Specification::MILSpec::_DictionaryValue_KeyValuePair_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair");
}

CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::New(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  return CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::New(this, 0);
}

CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::New(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *v3;

  v3 = (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)operator new();
  CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>(a2, v3);
  return v3;
}

void sub_19C9E7300(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::Clear(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::IsInitialized(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((_UNKNOWN *)this != &CoreML::Specification::MILSpec::_DictionaryValue_KeyValuePair_default_instance_)
  {
    v5 = this;
    v6 = *(_QWORD *)(this + 16);
    if (v6)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    v7 = *(_QWORD *)(v5 + 24);
    if (v7)
      return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::GetCachedSize(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  return *((unsigned int *)this + 8);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::ListValue::~ListValue(CoreML::Specification::MILSpec::ListValue *this)
{
  CoreML::Specification::MILSpec::ListValue::~ListValue(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D58D38;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::ListValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.ListValue");
}

CoreML::Specification::MILSpec::ListValue *CoreML::Specification::MILSpec::ListValue::New(CoreML::Specification::MILSpec::ListValue *this)
{
  return CoreML::Specification::MILSpec::ListValue::New(this, 0);
}

CoreML::Specification::MILSpec::ListValue *CoreML::Specification::MILSpec::ListValue::New(CoreML::Specification::MILSpec::ListValue *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::ListValue *v3;

  v3 = (CoreML::Specification::MILSpec::ListValue *)operator new();
  CoreML::Specification::MILSpec::ListValue::ListValue(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::ListValue>(a2, v3);
  return v3;
}

void sub_19C9E7544(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::ListValue::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  CoreML::Specification::MILSpec::Value **v3;
  CoreML::Specification::MILSpec::Value *v4;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = (CoreML::Specification::MILSpec::Value **)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v4 = *v3++;
      this = CoreML::Specification::MILSpec::Value::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::ListValue::IsInitialized(CoreML::Specification::MILSpec::ListValue *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::ListValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::ListValue *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::Value *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t result;

  v4 = (CoreML::Specification::MILSpec::ListValue *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(v4);
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v15 = *((_DWORD *)a2 + 13);
      v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        v17 = v14;
        result = CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream(v11, a2);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

uint64_t CoreML::Specification::MILSpec::ListValue::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::ListValue::GetCachedSize(CoreML::Specification::MILSpec::ListValue *this)
{
  return *((unsigned int *)this + 10);
}

CoreML::Specification::MILSpec::Value *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  int *v2;
  int v3;
  int v4;
  CoreML::Specification::MILSpec::Value *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena **v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (int *)*((_QWORD *)this + 2);
  if (!v2)
  {
    v3 = *((_DWORD *)this + 2);
    v4 = *((_DWORD *)this + 3);
LABEL_6:
    if (v3 <= v4)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(this, v4 - v3 + 1);
      v2 = (int *)*((_QWORD *)this + 2);
    }
    v4 = *v2;
    goto LABEL_9;
  }
  v3 = *((_DWORD *)this + 2);
  v4 = *v2;
  if (v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::MILSpec::Value **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3))
    goto LABEL_6;
LABEL_9:
  *v2 = v4 + 1;
  v6 = *(google::protobuf::Arena **)this;
  if (*(_QWORD *)this)
  {
    CoreML::Specification::MILSpec::Value::Value(Aligned);
    v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
    *v7 = Aligned;
    v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
    v8 = (unint64_t *)((char *)v6 + 32);
    do
      v9 = __ldxr(v8);
    while (__stxr((unint64_t)v7, v8));
    v7[2] = (google::protobuf::Arena *)v9;
  }
  else
  {
    Aligned = (CoreML::Specification::MILSpec::Value *)operator new();
    CoreML::Specification::MILSpec::Value::Value(Aligned);
  }
  v10 = *((_QWORD *)this + 2);
  v11 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = Aligned;
  return Aligned;
}

void sub_19C9E787C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::ListValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ListValue>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ListValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TupleValue::~TupleValue(CoreML::Specification::MILSpec::TupleValue *this)
{
  CoreML::Specification::MILSpec::TupleValue::~TupleValue(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D57E60;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TupleValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TupleValue");
}

CoreML::Specification::MILSpec::TupleValue *CoreML::Specification::MILSpec::TupleValue::New(CoreML::Specification::MILSpec::TupleValue *this)
{
  return CoreML::Specification::MILSpec::TupleValue::New(this, 0);
}

CoreML::Specification::MILSpec::TupleValue *CoreML::Specification::MILSpec::TupleValue::New(CoreML::Specification::MILSpec::TupleValue *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TupleValue *v3;

  v3 = (CoreML::Specification::MILSpec::TupleValue *)operator new();
  CoreML::Specification::MILSpec::TupleValue::TupleValue(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TupleValue>(a2, v3);
  return v3;
}

void sub_19C9E79D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TupleValue::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  CoreML::Specification::MILSpec::Value **v3;
  CoreML::Specification::MILSpec::Value *v4;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = (CoreML::Specification::MILSpec::Value **)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v4 = *v3++;
      this = CoreML::Specification::MILSpec::Value::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TupleValue::IsInitialized(CoreML::Specification::MILSpec::TupleValue *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TupleValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TupleValue *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::Value *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t result;

  v4 = (CoreML::Specification::MILSpec::TupleValue *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(v4);
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v15 = *((_DWORD *)a2 + 13);
      v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        v17 = v14;
        result = CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream(v11, a2);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

uint64_t CoreML::Specification::MILSpec::TupleValue::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TupleValue::GetCachedSize(CoreML::Specification::MILSpec::TupleValue *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TupleValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TupleValue>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TupleValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TensorValue::~TensorValue(CoreML::Specification::MILSpec::TensorValue *this)
{
  CoreML::Specification::MILSpec::TensorValue::~TensorValue(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D57EF8;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TensorValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue");
}

CoreML::Specification::MILSpec::TensorValue *CoreML::Specification::MILSpec::TensorValue::New(CoreML::Specification::MILSpec::TensorValue *this)
{
  return CoreML::Specification::MILSpec::TensorValue::New(this, 0);
}

CoreML::Specification::MILSpec::TensorValue *CoreML::Specification::MILSpec::TensorValue::New(CoreML::Specification::MILSpec::TensorValue *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorValue *v3;

  v3 = (CoreML::Specification::MILSpec::TensorValue *)operator new();
  CoreML::Specification::MILSpec::TensorValue::TensorValue(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue>(a2, v3);
  return v3;
}

void sub_19C9E7D14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue::IsInitialized(CoreML::Specification::MILSpec::TensorValue *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *v9;
  CoreML::Specification::MILSpec::TensorValue_RepeatedInts *v10;
  CoreML::Specification::MILSpec::TensorValue_RepeatedBools *v11;
  CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v12;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v13;
  CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *v14;
  CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *v15;
  BOOL v16;
  char *v17;
  int VarintSizeAsIntFallback;
  char *v19;
  int v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  char *v25;
  int v26;
  char *v27;
  int v28;
  char *v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  int v35;
  uint64_t result;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;

  while (2)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        break;
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) != 0)
        goto LABEL_7;
LABEL_29:
      if ((_DWORD)v7)
        v16 = (v7 & 7) == 4;
      else
        v16 = 1;
      if (v16)
        return 1;
      if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        goto LABEL_91;
    }
    LODWORD(v6) = 0;
LABEL_6:
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
    v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v7 & 0x100000000) == 0)
      goto LABEL_29;
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 1)
        {
          v9 = (CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          v9 = (CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)operator new();
          CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::TensorValue_RepeatedFloats(v9);
          *((_QWORD *)this + 2) = v9;
        }
        v17 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v17 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_91;
        }
        else
        {
          VarintSizeAsIntFallback = *v17;
          *(_QWORD *)a2 = v17 + 1;
        }
        v31 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v33 = *((_DWORD *)a2 + 13);
        v34 = __OFSUB__(v33--, 1);
        *((_DWORD *)a2 + 13) = v33;
        if (v33 < 0 != v34)
          goto LABEL_91;
        v35 = v31;
        result = CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergePartialFromCodedStream(v9, (char **)a2, v32);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 2u:
        if (v7 != 18)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 2)
        {
          v10 = (CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v10 = (CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)operator new();
          CoreML::Specification::MILSpec::TensorValue_RepeatedInts::TensorValue_RepeatedInts(v10);
          *((_QWORD *)this + 2) = v10;
        }
        v19 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
        {
          v20 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v20 < 0)
            goto LABEL_91;
        }
        else
        {
          v20 = *v19;
          *(_QWORD *)a2 = v19 + 1;
        }
        v37 = google::protobuf::io::CodedInputStream::PushLimit(a2, v20);
        v39 = *((_DWORD *)a2 + 13);
        v34 = __OFSUB__(v39--, 1);
        *((_DWORD *)a2 + 13) = v39;
        if (v39 < 0 != v34)
          goto LABEL_91;
        v35 = v37;
        result = CoreML::Specification::MILSpec::TensorValue_RepeatedInts::MergePartialFromCodedStream(v10, a2, v38);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 3u:
        if (v7 != 26)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 3)
        {
          v11 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          v11 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)operator new();
          CoreML::Specification::MILSpec::TensorValue_RepeatedBools::TensorValue_RepeatedBools(v11);
          *((_QWORD *)this + 2) = v11;
        }
        v21 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
        {
          v22 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v22 < 0)
            goto LABEL_91;
        }
        else
        {
          v22 = *v21;
          *(_QWORD *)a2 = v21 + 1;
        }
        v40 = google::protobuf::io::CodedInputStream::PushLimit(a2, v22);
        v42 = *((_DWORD *)a2 + 13);
        v34 = __OFSUB__(v42--, 1);
        *((_DWORD *)a2 + 13) = v42;
        if (v42 < 0 != v34)
          goto LABEL_91;
        v35 = v40;
        result = CoreML::Specification::MILSpec::TensorValue_RepeatedBools::MergePartialFromCodedStream(v11, a2, v41);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 4u:
        if (v7 != 34)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 4)
        {
          v12 = (CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          v12 = (CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)operator new();
          CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::TensorValue_RepeatedStrings(v12);
          *((_QWORD *)this + 2) = v12;
        }
        v23 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v23 < 0)
        {
          v24 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v24 < 0)
            goto LABEL_91;
        }
        else
        {
          v24 = *v23;
          *(_QWORD *)a2 = v23 + 1;
        }
        v43 = google::protobuf::io::CodedInputStream::PushLimit(a2, v24);
        v45 = *((_DWORD *)a2 + 13);
        v34 = __OFSUB__(v45--, 1);
        *((_DWORD *)a2 + 13) = v45;
        if (v45 < 0 != v34)
          goto LABEL_91;
        v35 = v43;
        result = CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergePartialFromCodedStream(v12, (char **)a2, v44);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 5u:
        if (v7 != 42)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 5)
        {
          v13 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 5;
          v13 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)operator new();
          CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts(v13);
          *((_QWORD *)this + 2) = v13;
        }
        v25 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v25 < 0)
        {
          v26 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v26 < 0)
            goto LABEL_91;
        }
        else
        {
          v26 = *v25;
          *(_QWORD *)a2 = v25 + 1;
        }
        v46 = google::protobuf::io::CodedInputStream::PushLimit(a2, v26);
        v48 = *((_DWORD *)a2 + 13);
        v34 = __OFSUB__(v48--, 1);
        *((_DWORD *)a2 + 13) = v48;
        if (v48 < 0 != v34)
          goto LABEL_91;
        v35 = v46;
        result = CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergePartialFromCodedStream(v13, a2, v47);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 6u:
        if (v7 != 50)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 6)
        {
          v14 = (CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 6;
          v14 = (CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *)operator new();
          CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::TensorValue_RepeatedDoubles(v14);
          *((_QWORD *)this + 2) = v14;
        }
        v27 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v27 < 0)
        {
          v28 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v28 < 0)
            goto LABEL_91;
        }
        else
        {
          v28 = *v27;
          *(_QWORD *)a2 = v27 + 1;
        }
        v49 = google::protobuf::io::CodedInputStream::PushLimit(a2, v28);
        v51 = *((_DWORD *)a2 + 13);
        v34 = __OFSUB__(v51--, 1);
        *((_DWORD *)a2 + 13) = v51;
        if (v51 < 0 != v34)
          goto LABEL_91;
        v35 = v49;
        result = CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::MergePartialFromCodedStream(v14, (char **)a2, v50);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 7u:
        if (v7 != 58)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 7)
        {
          v15 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 7;
          v15 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)operator new();
          CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes(v15);
          *((_QWORD *)this + 2) = v15;
        }
        v29 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v29 < 0)
        {
          v30 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v30 < 0)
            goto LABEL_91;
        }
        else
        {
          v30 = *v29;
          *(_QWORD *)a2 = v29 + 1;
        }
        v52 = google::protobuf::io::CodedInputStream::PushLimit(a2, v30);
        v54 = *((_DWORD *)a2 + 13);
        v34 = __OFSUB__(v54--, 1);
        *((_DWORD *)a2 + 13) = v54;
        if (v54 < 0 != v34)
          goto LABEL_91;
        v35 = v52;
        result = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::MergePartialFromCodedStream(v15, (char **)a2, v53);
        if (!(_DWORD)result)
          return result;
LABEL_90:
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v35))
          continue;
LABEL_91:
        result = 0;
        break;
      default:
        goto LABEL_29;
    }
    return result;
  }
}

void sub_19C9E8344(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 3)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 4)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 5)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 6)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 7)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)7, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue::GetCachedSize(CoreML::Specification::MILSpec::TensorValue *this)
{
  return *((unsigned int *)this + 6);
}

BOOL CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  signed int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  _BOOL8 result;
  signed int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 13)
          break;
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<float,(google::protobuf::internal::WireFormatLite::FieldType)2>(10, (unsigned int **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 3) != 0)
        return 0;
      v13 = *((_DWORD *)a2 + 12);
      v14 = v13 == 0x7FFFFFFF
          ? -1
          : v13 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v15 = *((_DWORD *)a2 + 10);
      v16 = v15 == 0x7FFFFFFF
          ? -1
          : v15 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v17 = *v5;
      v18 = VarintSizeAsIntFallback >> 2;
      v19 = v16 >= v14 ? v14 : v16;
      v20 = v14 == -1 ? v16 : v19;
      if (v20 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 4)
      {
        if (v18 <= 1)
          v21 = 1;
        else
          v21 = VarintSizeAsIntFallback >> 2;
        do
        {
          v30 = 0;
          v22 = (unsigned int *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v30);
            if (!result)
              return result;
            v23 = v30;
            v17 = *v5;
          }
          else
          {
            v23 = *v22;
            *a2 = (char *)(v22 + 1);
          }
          if (v17 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<float>::Reserve(v5, v17 + 1);
            v17 = *v5;
          }
          v24 = *((_QWORD *)this + 3) + 4 * v17;
          *((_DWORD *)this + 4) = v17 + 1;
          *(_DWORD *)(v24 + 8) = v23;
          ++v17;
          --v21;
        }
        while (v21);
      }
    }
    v26 = v17 + v18;
    if (VarintSizeAsIntFallback > 3)
    {
      google::protobuf::RepeatedField<float>::Reserve(v5, v17 + v18);
      v27 = *((_QWORD *)this + 3);
      v28 = 4 * v26 - 4 * *((int *)this + 4);
      if (v28 >= 1)
        bzero((void *)(v27 + 8 + 4 * *((int *)this + 4)), 4 * (((unint64_t)v28 >> 2) - ((unint64_t)v28 > 3)) + 4);
    }
    else
    {
      v27 = *((_QWORD *)this + 3);
    }
    *v5 = v26;
    v29 = v27 + 8;
    if (!v27)
      v29 = 0;
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v29 + 4 * v17), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v17;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  signed int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  char *v18;
  int v19;
  uint64_t Varint32Fallback;
  signed int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  int v26;

  v5 = (signed int *)((char *)this + 16);
  while (1)
  {
LABEL_2:
    v6 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
    {
      LODWORD(v7) = 0;
    }
    else
    {
      v7 = *v6;
      if (*v6 >= 1)
      {
        *(_QWORD *)a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
    v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v8 & 0x100000000) == 0)
      break;
LABEL_8:
    if ((v8 & 0xFFFFFFF8) != 8)
      break;
    if (v8 == 8)
    {
      if ((google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<int,(google::protobuf::internal::WireFormatLite::FieldType)5>(10, a2, v5) & 1) != 0)continue;
      return 0;
    }
    if (v8 != 10)
      break;
    v10 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v10 < 0)
    {
      VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
      if (VarintSizeAsIntFallback < 0)
        return 0;
    }
    else
    {
      VarintSizeAsIntFallback = *v10;
      *(_QWORD *)a2 = v10 + 1;
    }
    v13 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
    while (1)
    {
      v14 = *((_DWORD *)a2 + 10);
      v15 = *((int *)a2 + 11);
      v16 = *((_QWORD *)a2 + 1);
      v17 = *((_DWORD *)a2 + 6);
      if (v14 == 0x7FFFFFFF)
        break;
      v18 = *(char **)a2;
      if ((int)(v14 - v17 + v15 + v16 - *(_QWORD *)a2) < 1)
        break;
      if ((unint64_t)v18 >= v16)
      {
        v19 = 0;
      }
      else
      {
        v19 = *v18;
        if ((*v18 & 0x80000000) == 0)
        {
          *(_QWORD *)a2 = v18 + 1;
          goto LABEL_31;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v19);
      v19 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_31:
      v21 = *((_DWORD *)this + 4);
      if (v21 == *((_DWORD *)this + 5))
      {
        google::protobuf::RepeatedField<float>::Reserve((unsigned int *)v5, v21 + 1);
        v21 = *v5;
      }
      v22 = *((_QWORD *)this + 3);
      *((_DWORD *)this + 4) = v21 + 1;
      *(_DWORD *)(v22 + 4 * v21 + 8) = v19;
    }
    *((_DWORD *)a2 + 10) = v13;
    v23 = v16 + v15;
    *((_QWORD *)a2 + 1) = v23;
    v24 = *((_DWORD *)a2 + 12);
    if (v24 >= v13)
      v24 = v13;
    v25 = __OFSUB__(v17, v24);
    v26 = v17 - v24;
    if ((v26 < 0) ^ v25 | (v26 == 0))
      v26 = 0;
    else
      *((_QWORD *)a2 + 1) = v23 - v26;
    *((_DWORD *)a2 + 11) = v26;
    *((_BYTE *)a2 + 36) = 0;
  }
  if ((_DWORD)v8)
    v12 = (v8 & 7) == 4;
  else
    v12 = 1;
  if (v12)
    return 1;
  if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0)
    goto LABEL_2;
  return 0;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  char *v18;
  unint64_t Varint64Fallback;
  char v20;
  BOOL v21;
  signed int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8)
        break;
      if (v8 == 8)
      {
        if ((google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<BOOL,(google::protobuf::internal::WireFormatLite::FieldType)8>(10, a2, (uint64_t)v5) & 1) == 0)return 0;
      }
      else
      {
        if (v8 != 10)
          break;
        v10 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v10 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v10;
          *(_QWORD *)a2 = v10 + 1;
        }
        v13 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        while (1)
        {
          v14 = *((_DWORD *)a2 + 10);
          v15 = *((int *)a2 + 11);
          v16 = *((_QWORD *)a2 + 1);
          v17 = *((_DWORD *)a2 + 6);
          if (v14 == 0x7FFFFFFF)
            break;
          v18 = *(char **)a2;
          if ((int)(v14 - v17 + v15 + v16 - *(_QWORD *)a2) < 1)
            break;
          if ((unint64_t)v18 >= v16 || *v18 < 0)
          {
            Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v20 & 1) == 0)
              return 0;
          }
          else
          {
            Varint64Fallback = *v18;
            *(_QWORD *)a2 = v18 + 1;
          }
          v21 = Varint64Fallback != 0;
          v22 = *((_DWORD *)this + 4);
          if (v22 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<BOOL>::Reserve(v5, v22 + 1);
            v22 = *v5;
          }
          v23 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v22 + 1;
          *(_BYTE *)(v23 + v22 + 8) = v21;
        }
        *((_DWORD *)a2 + 10) = v13;
        v24 = v16 + v15;
        *((_QWORD *)a2 + 1) = v16 + v15;
        v25 = *((_DWORD *)a2 + 12);
        if (v25 >= v13)
          v25 = v13;
        v26 = __OFSUB__(v17, v25);
        v27 = v17 - v25;
        if ((v27 < 0) ^ v26 | (v27 == 0))
          v27 = 0;
        else
          *((_QWORD *)a2 + 1) = v24 - v27;
        *((_DWORD *)a2 + 11) = v27;
        *((_BYTE *)a2 + 36) = 0;
      }
    }
    if ((_DWORD)v8)
      v12 = (v8 & 7) == 4;
    else
      v12 = 1;
    if (v12)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this, char **a2, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int *v12;
  int v13;
  int v14;
  std::string *Aligned;
  google::protobuf::Arena *v16;
  google::protobuf::Arena **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;

  v5 = (google::protobuf::Arena **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
        goto LABEL_23;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 >= *v12)
      {
        if (v14 != *((_DWORD *)this + 7))
        {
LABEL_26:
          *v12 = v14 + 1;
          v16 = *v5;
          if (*v5)
          {
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
            v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
            *v17 = (google::protobuf::Arena *)Aligned;
            v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
            v18 = (unint64_t *)((char *)v16 + 32);
            do
              v19 = __ldxr(v18);
            while (__stxr((unint64_t)v17, v18));
            v17[2] = (google::protobuf::Arena *)v19;
          }
          else
          {
            Aligned = (std::string *)operator new();
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
          }
          v20 = *((_QWORD *)this + 4);
          v21 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v21 + 1;
          *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
          goto LABEL_32;
        }
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)v5, v14 - v13 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
        }
        v14 = *v12;
        goto LABEL_26;
      }
      *((_DWORD *)this + 6) = v13 + 1;
      Aligned = *(std::string **)&v12[2 * v13 + 2];
LABEL_32:
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, Aligned);
      if (!(_DWORD)result)
        return result;
      v23 = *((_QWORD *)this + 4);
      v24 = *(unsigned int **)(v23 + 8 * *((int *)this + 6));
      if (*((char *)v24 + 23) < 0)
      {
        v24 = *(unsigned int **)v24;
        v25 = *(_QWORD *)(*(_QWORD *)(v23 + 8 * *((int *)this + 6)) + 8);
      }
      else
      {
        LODWORD(v25) = *((unsigned __int8 *)v24 + 23);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 0, (uint64_t)"CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values"))return 0;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  char *v18;
  unint64_t v19;
  unint64_t Varint64Fallback;
  char v21;
  signed int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8)
        break;
      if (v8 == 8)
      {
        if ((google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(google::protobuf::internal::WireFormatLite::FieldType)3>(10, a2, (uint64_t)v5) & 1) == 0)return 0;
      }
      else
      {
        if (v8 != 10)
          break;
        v10 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v10 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v10;
          *(_QWORD *)a2 = v10 + 1;
        }
        v13 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        while (1)
        {
          v14 = *((_DWORD *)a2 + 10);
          v15 = *((int *)a2 + 11);
          v16 = *((_QWORD *)a2 + 1);
          v17 = *((_DWORD *)a2 + 6);
          if (v14 == 0x7FFFFFFF)
            break;
          v18 = *(char **)a2;
          if ((int)(v14 - v17 + v15 + v16 - *(_QWORD *)a2) < 1)
            break;
          if ((unint64_t)v18 >= v16 || *v18 < 0)
          {
            Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v21 & 1) == 0)
              return 0;
            v19 = Varint64Fallback;
          }
          else
          {
            v19 = *v18;
            *(_QWORD *)a2 = v18 + 1;
          }
          v22 = *((_DWORD *)this + 4);
          if (v22 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v22 + 1);
            v22 = *v5;
          }
          v23 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v22 + 1;
          *(_QWORD *)(v23 + 8 * v22 + 8) = v19;
        }
        *((_DWORD *)a2 + 10) = v13;
        v24 = v16 + v15;
        *((_QWORD *)a2 + 1) = v16 + v15;
        v25 = *((_DWORD *)a2 + 12);
        if (v25 >= v13)
          v25 = v13;
        v26 = __OFSUB__(v17, v25);
        v27 = v17 - v25;
        if ((v27 < 0) ^ v26 | (v27 == 0))
          v27 = 0;
        else
          *((_QWORD *)a2 + 1) = v24 - v27;
        *((_DWORD *)a2 + 11) = v27;
        *((_BYTE *)a2 + 36) = 0;
      }
    }
    if ((_DWORD)v8)
      v12 = (v8 & 7) == 4;
    else
      v12 = 1;
    if (v12)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

BOOL CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  signed int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 result;
  signed int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 9)
          break;
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(10, (unint64_t **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0)
        return 0;
      v13 = *((_DWORD *)a2 + 12);
      v14 = v13 == 0x7FFFFFFF
          ? -1
          : v13 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v15 = *((_DWORD *)a2 + 10);
      v16 = v15 == 0x7FFFFFFF
          ? -1
          : v15 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v17 = *v5;
      v18 = VarintSizeAsIntFallback >> 3;
      v19 = v16 >= v14 ? v14 : v16;
      v20 = v14 == -1 ? v16 : v19;
      if (v20 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v18 <= 1)
          v21 = 1;
        else
          v21 = VarintSizeAsIntFallback >> 3;
        do
        {
          v30 = 0;
          v22 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v30);
            if (!result)
              return result;
            v23 = v30;
            v17 = *v5;
          }
          else
          {
            v23 = *v22;
            *a2 = (char *)(v22 + 1);
          }
          if (v17 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v17 + 1);
            v17 = *v5;
          }
          v24 = *((_QWORD *)this + 3) + 8 * v17;
          *((_DWORD *)this + 4) = v17 + 1;
          *(_QWORD *)(v24 + 8) = v23;
          ++v17;
          --v21;
        }
        while (v21);
      }
    }
    v26 = v17 + v18;
    if (VarintSizeAsIntFallback > 7)
    {
      google::protobuf::RepeatedField<double>::Reserve(v5, v17 + v18);
      v27 = *((_QWORD *)this + 3);
      v28 = 8 * v26 - 8 * *((int *)this + 4);
      if (v28 >= 1)
        bzero((void *)(v27 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v28 >> 3) - ((unint64_t)v28 > 7)) + 8);
    }
    else
    {
      v27 = *((_QWORD *)this + 3);
    }
    *v5 = v26;
    v29 = v27 + 8;
    if (!v27)
      v29 = 0;
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v29 + 8 * v17), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v17;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this, char **a2, unsigned int a3)
{
  std::string **v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  std::string *v11;

  v4 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *v4;
      if (*v4 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v4;
      }
      if ((google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v11) & 1) == 0)
        return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(google::protobuf::internal::WireFormatLite::FieldType)3>(int a1, google::protobuf::io::CodedInputStream *this, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  unint64_t Varint64Fallback;
  char v9;
  signed int v11;
  int v12;
  uint64_t v13;
  signed int v14;
  int v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v6 = *(char **)this;
  if (*(_QWORD *)this >= *((_QWORD *)this + 1) || *v6 < 0)
  {
    Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
    if ((v9 & 1) == 0)
      return 0;
    v7 = Varint64Fallback;
  }
  else
  {
    v7 = *v6;
    *(_QWORD *)this = v6 + 1;
  }
  v11 = *(_DWORD *)a3;
  v12 = *(_DWORD *)(a3 + 4);
  if (*(_DWORD *)a3 == v12)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)a3, v11 + 1);
    v11 = *(_DWORD *)a3;
    v12 = *(_DWORD *)(a3 + 4);
  }
  v13 = *(_QWORD *)(a3 + 8);
  v14 = v11 + 1;
  *(_DWORD *)a3 = v11 + 1;
  *(_QWORD *)(v13 + 8 * v11 + 8) = v7;
  if (v12 - (v11 + 1) >= 1)
  {
    v15 = v12 - v11;
    do
    {
      v16 = *(char **)this;
      v17 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this >= v17 || *v16 != a1)
        break;
      *(_QWORD *)this = v16 + 1;
      if ((unint64_t)(v16 + 1) >= v17 || v16[1] < 0)
      {
        v18 = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
        if ((v19 & 1) == 0)
          return 0;
        v13 = *(_QWORD *)(a3 + 8);
        v14 = *(_DWORD *)a3;
      }
      else
      {
        v18 = v16[1];
        *(_QWORD *)this = v16 + 2;
      }
      v20 = v13 + 8 * v14++;
      *(_DWORD *)a3 = v14;
      *(_QWORD *)(v20 + 8) = v18;
      --v15;
    }
    while (v15 > 1);
  }
  return 1;
}

uint64_t google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<BOOL,(google::protobuf::internal::WireFormatLite::FieldType)8>(int a1, google::protobuf::io::CodedInputStream *this, uint64_t a3)
{
  char *v6;
  unint64_t Varint64Fallback;
  char v8;
  BOOL v10;
  signed int v11;
  int v12;
  uint64_t v13;
  signed int v14;
  int v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v6 = *(char **)this;
  if (*(_QWORD *)this >= *((_QWORD *)this + 1) || *v6 < 0)
  {
    Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
    if ((v8 & 1) == 0)
      return 0;
  }
  else
  {
    Varint64Fallback = *v6;
    *(_QWORD *)this = v6 + 1;
  }
  v10 = Varint64Fallback != 0;
  v11 = *(_DWORD *)a3;
  v12 = *(_DWORD *)(a3 + 4);
  if (*(_DWORD *)a3 == v12)
  {
    google::protobuf::RepeatedField<BOOL>::Reserve((unsigned int *)a3, v11 + 1);
    v11 = *(_DWORD *)a3;
    v12 = *(_DWORD *)(a3 + 4);
  }
  v13 = *(_QWORD *)(a3 + 8);
  v14 = v11 + 1;
  *(_DWORD *)a3 = v11 + 1;
  *(_BYTE *)(v13 + v11 + 8) = v10;
  if (v12 - (v11 + 1) >= 1)
  {
    v15 = v12 - v11;
    do
    {
      v16 = *(char **)this;
      v17 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this >= v17 || *v16 != a1)
        break;
      *(_QWORD *)this = v16 + 1;
      if ((unint64_t)(v16 + 1) >= v17 || v16[1] < 0)
      {
        v18 = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
        if ((v19 & 1) == 0)
          return 0;
        v13 = *(_QWORD *)(a3 + 8);
        v14 = *(_DWORD *)a3;
      }
      else
      {
        v18 = v16[1];
        *(_QWORD *)this = v16 + 2;
      }
      v20 = v13 + v14++;
      *(_DWORD *)a3 = v14;
      *(_BYTE *)(v20 + 8) = v18 != 0;
      --v15;
    }
    while (v15 > 1);
  }
  return 1;
}

uint64_t google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<int,(google::protobuf::internal::WireFormatLite::FieldType)5>(int a1, google::protobuf::io::CodedInputStream *this, signed int *a3)
{
  char *v6;
  int v7;
  uint64_t Varint32Fallback;
  signed int v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(char **)this;
  if (*(_QWORD *)this >= *((_QWORD *)this + 1))
  {
    v7 = 0;
  }
  else
  {
    v7 = *v6;
    if ((*v6 & 0x80000000) == 0)
    {
      *(_QWORD *)this = v6 + 1;
      goto LABEL_6;
    }
  }
  Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
  v7 = Varint32Fallback;
  if (Varint32Fallback < 0)
    return 0;
LABEL_6:
  v9 = *a3;
  if (*a3 == a3[1])
  {
    google::protobuf::RepeatedField<float>::Reserve((unsigned int *)a3, v9 + 1);
    v9 = *a3;
  }
  v10 = *((_QWORD *)a3 + 1);
  *a3 = v9 + 1;
  *(_DWORD *)(v10 + 4 * v9 + 8) = v7;
  v11 = a3[1] - *a3;
  if (v11 >= 1)
  {
    v12 = v11 + 1;
    while (1)
    {
      v13 = *(char **)this;
      v14 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this >= v14 || *v13 != a1)
        return 1;
      v15 = v13 + 1;
      *(_QWORD *)this = v13 + 1;
      if ((unint64_t)(v13 + 1) >= v14)
        break;
      v16 = *v15;
      if (*v15 < 0)
        goto LABEL_16;
      *(_QWORD *)this = v13 + 2;
LABEL_18:
      v18 = *a3;
      *a3 = v18 + 1;
      *(_DWORD *)(v10 + 4 * v18 + 8) = v16;
      if (--v12 <= 1)
        return 1;
    }
    v16 = 0;
LABEL_16:
    v17 = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v16);
    if (v17 < 0)
      return 0;
    v16 = v17;
    v10 = *((_QWORD *)a3 + 1);
    goto LABEL_18;
  }
  return 1;
}

BOOL google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<float,(google::protobuf::internal::WireFormatLite::FieldType)2>(int a1, unsigned int **this, uint64_t a3)
{
  unsigned int *v6;
  unsigned int v7;
  signed int v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  int v12;
  signed int v13;
  signed int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  _BOOL8 result;
  unsigned int v21;

  v6 = *this;
  if ((int)(*((_DWORD *)this + 2) - *this) < 4)
  {
    v21 = 0;
    result = google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v21);
    if (!result)
      return result;
    v7 = v21;
  }
  else
  {
    v7 = *v6;
    *this = v6 + 1;
  }
  v8 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 == *(_DWORD *)(a3 + 4))
  {
    google::protobuf::RepeatedField<float>::Reserve((unsigned int *)a3, v8 + 1);
    v8 = *(_DWORD *)a3;
  }
  v9 = *(_QWORD *)(a3 + 8);
  v10 = v8 + 1;
  *(_DWORD *)a3 = v8 + 1;
  *(_DWORD *)(v9 + 4 * v8 + 8) = v7;
  v11 = *this;
  v12 = *((_DWORD *)this + 2) - *this;
  if (v12 >= 1)
  {
    v13 = *(_DWORD *)(a3 + 4) - v10;
    v14 = v12 / 5u;
    if ((int)(v12 / 5u) >= v13)
      v14 = *(_DWORD *)(a3 + 4) - v10;
    if (v14 >= 1)
    {
      v15 = 0;
      v16 = v9 + 4 * v10 + 8;
      v17 = v8 + 2;
      v18 = ((*((_DWORD *)this + 2) - *this) * (unsigned __int128)0x3333333333333334uLL) >> 64;
      if (v18 >= v13)
        LODWORD(v18) = v13;
      while (*(unsigned __int8 *)v11 == a1)
      {
        v19 = *(unsigned int *)((char *)v11 + 1);
        *(_DWORD *)a3 = v17 + v15;
        *(_DWORD *)(v16 + 4 * v15++) = v19;
        v11 = (unsigned int *)((char *)v11 + 5);
        if ((_DWORD)v18 == (_DWORD)v15)
          goto LABEL_15;
      }
      v14 = v15;
LABEL_15:
      if (v14 >= 1)
        google::protobuf::io::CodedInputStream::Skip((google::protobuf::io::CodedInputStream *)this, 5 * v14);
    }
  }
  return 1;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::~TensorValue_RepeatedBytes(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
  *(_QWORD *)this = &off_1E3D58450;
  google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(*((_QWORD *)this + 2));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D58450;
  google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(*((_QWORD *)this + 2));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedBytes");
}

CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::New(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
  return CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::New(this, 0);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::New(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *v3;

  v3 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)operator new();
  CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedBytes>(a2, v3);
  return v3;
}

void sub_19C9E9A0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 16);
  if ((__int128 *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 16);
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v3 + 23))
      return this;
    return google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(1u, v3, a2);
  }
  if (*(_QWORD *)(v3 + 8))
    return google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(1u, v3, a2);
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedBytes>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedBytes>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedBytes>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::~TensorValue_RepeatedStrings(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E3D58748;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E3D58748;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedStrings");
}

CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::New(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  return CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::New(this, 0);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::New(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v3;

  v3 = (CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)operator new();
  CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::TensorValue_RepeatedStrings(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedStrings>(a2, v3);
  return v3;
}

void sub_19C9E9C04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::Clear(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  return google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;

  v2 = *(unsigned int *)(this + 24);
  if ((int)v2 >= 1)
  {
    v4 = this;
    v5 = -v2;
    v6 = 1;
    do
    {
      v7 = *(unsigned int **)(*(_QWORD *)(v4 + 32) + 8 * v6);
      if (*((char *)v7 + 23) < 0)
      {
        v7 = *(unsigned int **)v7;
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v6) + 8);
      }
      else
      {
        LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (uint64_t)"CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values");
      this = google::protobuf::internal::WireFormatLite::WriteString(1u, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v6++), a2);
    }
    while (v5 + v6 != 1);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedStrings>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedStrings>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedStrings>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedBools::~TensorValue_RepeatedBools(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedBools::~TensorValue_RepeatedBools(this);
  JUMPOUT(0x1A1AD6260);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E3D583B8;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TensorValue_RepeatedBools::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedBools");
}

CoreML::Specification::MILSpec::TensorValue_RepeatedBools *CoreML::Specification::MILSpec::TensorValue_RepeatedBools::New(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
  return CoreML::Specification::MILSpec::TensorValue_RepeatedBools::New(this, 0);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedBools *CoreML::Specification::MILSpec::TensorValue_RepeatedBools::New(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedBools *v3;

  v3 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)operator new();
  CoreML::Specification::MILSpec::TensorValue_RepeatedBools::TensorValue_RepeatedBools(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedBools>(a2, v3);
  return v3;
}

void sub_19C9E9DD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1)
  {
    if ((v1 & 0x80000000) != 0)
      v2 = 11;
    else
      v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v2 = 0;
  }
  v3 = v2 + v1;
  *((_DWORD *)this + 8) = v1;
  *((_DWORD *)this + 9) = v3;
  return v3;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(_QWORD *)(v3 + 24);
    if (v11)
      v12 = (char *)(v11 + 8);
    else
      v12 = 0;
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, *(_DWORD *)(v3 + 16));
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
  return *((unsigned int *)this + 9);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedBools>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedBools>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedBools>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::~TensorValue_RepeatedLongInts(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::~TensorValue_RepeatedLongInts(this);
  JUMPOUT(0x1A1AD6260);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E3D58878;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts");
}

CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::New(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  return CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::New(this, 0);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::New(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v3;

  v3 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)operator new();
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts>(a2, v3);
  return v3;
}

void sub_19C9EA0B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      this = google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          v14 = *((_QWORD *)a2 + 1);
          if (v13 < 0x80)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          }
          else
          {
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              v16 = v13 >> 7;
              v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          *v15 = v16;
          v18 = (_DWORD)v15 - v14 + 1;
          *((_QWORD *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  return *((unsigned int *)this + 9);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedInts::~TensorValue_RepeatedInts(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedInts::~TensorValue_RepeatedInts(this);
  JUMPOUT(0x1A1AD6260);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E3D58320;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TensorValue_RepeatedInts::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedInts");
}

CoreML::Specification::MILSpec::TensorValue_RepeatedInts *CoreML::Specification::MILSpec::TensorValue_RepeatedInts::New(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
  return CoreML::Specification::MILSpec::TensorValue_RepeatedInts::New(this, 0);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedInts *CoreML::Specification::MILSpec::TensorValue_RepeatedInts::New(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedInts *v3;

  v3 = (CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)operator new();
  CoreML::Specification::MILSpec::TensorValue_RepeatedInts::TensorValue_RepeatedInts(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedInts>(a2, v3);
  return v3;
}

void sub_19C9EA3C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      this = google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(int *)(*(_QWORD *)(v3 + 24) + 4 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          v14 = *((_QWORD *)a2 + 1);
          if (v13 < 0x80)
          {
            LODWORD(v16) = *(_DWORD *)(*(_QWORD *)(v3 + 24) + 4 * i + 8);
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          }
          else
          {
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              v16 = v13 >> 7;
              v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          *v15 = v16;
          v18 = (_DWORD)v15 - v14 + 1;
          *((_QWORD *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
  return *((unsigned int *)this + 9);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedInts>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedInts>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedInts>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::~TensorValue_RepeatedDoubles(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::~TensorValue_RepeatedDoubles(this);
  JUMPOUT(0x1A1AD6260);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E3D586B0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles");
}

CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::New(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
  return CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::New(this, 0);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::New(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *v3;

  v3 = (CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *)operator new();
  CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::TensorValue_RepeatedDoubles(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles>(a2, v3);
  return v3;
}

void sub_19C9EA6D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 8 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(_QWORD *)(v3 + 24);
    if (v11)
      v12 = (char *)(v11 + 8);
    else
      v12 = 0;
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, 8 * *(_DWORD *)(v3 + 16));
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
  return *((unsigned int *)this + 9);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::~TensorValue_RepeatedFloats(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::~TensorValue_RepeatedFloats(this);
  JUMPOUT(0x1A1AD6260);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E3D58580;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedFloats");
}

CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::New(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
  return CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::New(this, 0);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::New(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *v3;

  v3 = (CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)operator new();
  CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::TensorValue_RepeatedFloats(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedFloats>(a2, v3);
  return v3;
}

void sub_19C9EA9B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 4 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(_QWORD *)(v3 + 24);
    if (v11)
      v12 = (char *)(v11 + 8);
    else
      v12 = 0;
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, 4 * *(_DWORD *)(v3 + 16));
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
  return *((unsigned int *)this + 9);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedFloats>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedFloats>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedFloats>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::Value::~Value(CoreML::Specification::MILSpec::Value *this)
{
  CoreML::Specification::MILSpec::Value::~Value(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3D589A8;
  v2 = *((_QWORD *)this + 2);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
  }
  if (this != (CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*((_DWORD *)this + 11))
    CoreML::Specification::MILSpec::Value::clear_value((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::Value::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Value");
}

CoreML::Specification::MILSpec::Value *CoreML::Specification::MILSpec::Value::New(CoreML::Specification::MILSpec::Value *this)
{
  return CoreML::Specification::MILSpec::Value::New(this, 0);
}

CoreML::Specification::MILSpec::Value *CoreML::Specification::MILSpec::Value::New(CoreML::Specification::MILSpec::Value *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Value *v3;

  v3 = (CoreML::Specification::MILSpec::Value *)operator new();
  CoreML::Specification::MILSpec::Value::Value(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Value>(a2, v3);
  return v3;
}

void sub_19C9EACA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value::IsInitialized(CoreML::Specification::MILSpec::Value *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Value::SerializeWithCachedSizes(CoreML::Specification::MILSpec::Value *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = *((_QWORD *)this + 2);
  if ((*(char *)(result + 23) & 0x80000000) == 0)
  {
    LODWORD(v7) = *(unsigned __int8 *)(result + 23);
    if (!*(_BYTE *)(result + 23))
      goto LABEL_7;
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(result + 8);
  if (v7)
  {
    result = *(_QWORD *)result;
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v7, 1, (uint64_t)"CoreML.Specification.MILSpec.Value.docString");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  if (this != (CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_)
  {
    v8 = *((_QWORD *)this + 3);
    if (v8)
      result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  v9 = *((_DWORD *)this + 11);
  if (v9 == 3)
  {
    result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *((_QWORD *)this + 4), a2, a4);
    v9 = *((_DWORD *)this + 11);
  }
  if (v9 == 5)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, *((_QWORD *)this + 4), a2, a4);
  return result;
}

uint64_t CoreML::Specification::MILSpec::Value::GetCachedSize(CoreML::Specification::MILSpec::Value *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Value>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::Value_ImmediateValue::~Value_ImmediateValue(CoreML::Specification::MILSpec::Value_ImmediateValue *this)
{
  CoreML::Specification::MILSpec::Value_ImmediateValue::~Value_ImmediateValue(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D58288;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::Value_ImmediateValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Value.ImmediateValue");
}

CoreML::Specification::MILSpec::Value_ImmediateValue *CoreML::Specification::MILSpec::Value_ImmediateValue::New(CoreML::Specification::MILSpec::Value_ImmediateValue *this)
{
  return CoreML::Specification::MILSpec::Value_ImmediateValue::New(this, 0);
}

CoreML::Specification::MILSpec::Value_ImmediateValue *CoreML::Specification::MILSpec::Value_ImmediateValue::New(CoreML::Specification::MILSpec::Value_ImmediateValue *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Value_ImmediateValue *v3;

  v3 = (CoreML::Specification::MILSpec::Value_ImmediateValue *)operator new();
  CoreML::Specification::MILSpec::Value_ImmediateValue::Value_ImmediateValue(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Value_ImmediateValue>(a2, v3);
  return v3;
}

void sub_19C9EAF40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::IsInitialized(CoreML::Specification::MILSpec::Value_ImmediateValue *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 3)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 4)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::GetCachedSize(CoreML::Specification::MILSpec::Value_ImmediateValue *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Value_ImmediateValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value_ImmediateValue>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value_ImmediateValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::Dimension::~Dimension(CoreML::Specification::MILSpec::Dimension *this)
{
  CoreML::Specification::MILSpec::Dimension::~Dimension(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D58CA0;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::MILSpec::Dimension::clear_dimension((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::Dimension::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Dimension");
}

CoreML::Specification::MILSpec::Dimension *CoreML::Specification::MILSpec::Dimension::New(CoreML::Specification::MILSpec::Dimension *this)
{
  return CoreML::Specification::MILSpec::Dimension::New(this, 0);
}

CoreML::Specification::MILSpec::Dimension *CoreML::Specification::MILSpec::Dimension::New(CoreML::Specification::MILSpec::Dimension *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Dimension *v3;

  v3 = (CoreML::Specification::MILSpec::Dimension *)operator new();
  CoreML::Specification::MILSpec::Dimension::Dimension(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Dimension>(a2, v3);
  return v3;
}

void sub_19C9EB150(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Dimension::IsInitialized(CoreML::Specification::MILSpec::Dimension *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Dimension::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Dimension *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::Dimension_ConstantDimension *v10;
  CoreML::Specification::MILSpec::Dimension_UnknownDimension *v11;
  char *v13;
  int v14;
  char *v15;
  int VarintSizeAsIntFallback;
  int v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t result;
  int v23;
  unsigned int v24;
  int v25;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_18;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_18;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 18)
        goto LABEL_18;
      if (*((_DWORD *)this + 7) == 2)
      {
        v11 = (CoreML::Specification::MILSpec::Dimension_UnknownDimension *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::MILSpec::Dimension::clear_dimension((uint64_t)this);
        *((_DWORD *)this + 7) = 2;
        v11 = (CoreML::Specification::MILSpec::Dimension_UnknownDimension *)operator new();
        CoreML::Specification::MILSpec::Dimension_UnknownDimension::Dimension_UnknownDimension(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v15 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v15;
        *(_QWORD *)a2 = v15 + 1;
      }
      v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v25 = *((_DWORD *)a2 + 13);
      v20 = __OFSUB__(v25--, 1);
      *((_DWORD *)a2 + 13) = v25;
      if (v25 < 0 != v20)
        return 0;
      v21 = v23;
      result = CoreML::Specification::MILSpec::Dimension_UnknownDimension::MergePartialFromCodedStream(v11, (char **)a2, v24);
      if (!(_DWORD)result)
        return result;
LABEL_39:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v21))
        return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      if (*((_DWORD *)this + 7) == 1)
      {
        v10 = (CoreML::Specification::MILSpec::Dimension_ConstantDimension *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::MILSpec::Dimension::clear_dimension((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        v10 = (CoreML::Specification::MILSpec::Dimension_ConstantDimension *)operator new();
        CoreML::Specification::MILSpec::Dimension_ConstantDimension::Dimension_ConstantDimension(v10);
        *((_QWORD *)this + 2) = v10;
      }
      v13 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v13 < 0)
      {
        v14 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v14 < 0)
          return 0;
      }
      else
      {
        v14 = *v13;
        *(_QWORD *)a2 = v13 + 1;
      }
      v17 = google::protobuf::io::CodedInputStream::PushLimit(a2, v14);
      v19 = *((_DWORD *)a2 + 13);
      v20 = __OFSUB__(v19--, 1);
      *((_DWORD *)a2 + 13) = v19;
      if (v19 < 0 != v20)
        return 0;
      v21 = v17;
      result = CoreML::Specification::MILSpec::Dimension_ConstantDimension::MergePartialFromCodedStream(v10, (char **)a2, v18);
      if (!(_DWORD)result)
        return result;
      goto LABEL_39;
    }
LABEL_18:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C9EB3C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Dimension::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::MILSpec::Dimension::GetCachedSize(CoreML::Specification::MILSpec::Dimension *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  char *v11;
  char v12;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        *((_QWORD *)this + 2) = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
        if ((v12 & 1) == 0)
          return 0;
      }
      else
      {
        *((_QWORD *)this + 2) = *v11;
        *a2 = v11 + 1;
      }
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  char *v11;
  unint64_t Varint64Fallback;
  char v13;

  do
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
        if ((v13 & 1) == 0)
          return 0;
      }
      else
      {
        Varint64Fallback = *v11;
        *a2 = v11 + 1;
      }
      *((_BYTE *)this + 16) = Varint64Fallback != 0;
    }
    if ((_DWORD)v7)
      v10 = (v7 & 7) == 4;
    else
      v10 = 1;
    if (v10)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Dimension>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::Dimension_UnknownDimension::~Dimension_UnknownDimension(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
  *(_QWORD *)this = &off_1E3D584E8;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D584E8;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::MILSpec::Dimension_UnknownDimension::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Dimension.UnknownDimension");
}

CoreML::Specification::MILSpec::Dimension_UnknownDimension *CoreML::Specification::MILSpec::Dimension_UnknownDimension::New(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
  return CoreML::Specification::MILSpec::Dimension_UnknownDimension::New(this, 0);
}

CoreML::Specification::MILSpec::Dimension_UnknownDimension *CoreML::Specification::MILSpec::Dimension_UnknownDimension::New(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Dimension_UnknownDimension *v3;

  v3 = (CoreML::Specification::MILSpec::Dimension_UnknownDimension *)operator new();
  CoreML::Specification::MILSpec::Dimension_UnknownDimension::Dimension_UnknownDimension(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Dimension_UnknownDimension>(a2, v3);
  return v3;
}

void sub_19C9EB7C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::Clear(uint64_t this)
{
  *(_BYTE *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::IsInitialized(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
  return 1;
}

std::string *CoreML::Specification::MILSpec::Dimension_UnknownDimension::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_BYTE *)a2 + 16))
    v3->__r_.__value_.__s.__data_[16] = 1;
  return this;
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::ByteSizeLong(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
  uint64_t v1;

  v1 = 2 * *((unsigned __int8 *)this + 16);
  *((_DWORD *)this + 5) = v1;
  return v1;
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_BYTE *)(this + 16))
    return google::protobuf::internal::WireFormatLite::WriteBool(1, 1u, a2, a4);
  return this;
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::GetCachedSize(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Dimension_UnknownDimension>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension_UnknownDimension>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension_UnknownDimension>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::Dimension_ConstantDimension::~Dimension_ConstantDimension(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
  *(_QWORD *)this = &off_1E3D58618;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D58618;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::MILSpec::Dimension_ConstantDimension::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Dimension.ConstantDimension");
}

CoreML::Specification::MILSpec::Dimension_ConstantDimension *CoreML::Specification::MILSpec::Dimension_ConstantDimension::New(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
  return CoreML::Specification::MILSpec::Dimension_ConstantDimension::New(this, 0);
}

CoreML::Specification::MILSpec::Dimension_ConstantDimension *CoreML::Specification::MILSpec::Dimension_ConstantDimension::New(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Dimension_ConstantDimension *v3;

  v3 = (CoreML::Specification::MILSpec::Dimension_ConstantDimension *)operator new();
  CoreML::Specification::MILSpec::Dimension_ConstantDimension::Dimension_ConstantDimension(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Dimension_ConstantDimension>(a2, v3);
  return v3;
}

void sub_19C9EB9B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::IsInitialized(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
  return 1;
}

std::string *CoreML::Specification::MILSpec::Dimension_ConstantDimension::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v3->__r_.__value_.__r.__words[2] = v5;
  return this;
}

unint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::ByteSizeLong(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
  unint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if (v1)
    v1 = ((9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6) + 1;
  *((_DWORD *)this + 6) = v1;
  return v1;
}

uint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  unint64_t v5;

  v5 = *(_QWORD *)(this + 16);
  if (v5)
    return google::protobuf::internal::WireFormatLite::WriteUInt64(1, v5, a2, a4);
  return this;
}

uint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::GetCachedSize(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Dimension_ConstantDimension>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension_ConstantDimension>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension_ConstantDimension>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::StateType::~StateType(CoreML::Specification::MILSpec::StateType *this)
{
  CoreML::Specification::MILSpec::StateType::~StateType(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E3D58E68;
  if (this != (CoreML::Specification::MILSpec::StateType *)&CoreML::Specification::MILSpec::_StateType_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::StateType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.StateType");
}

CoreML::Specification::MILSpec::StateType *CoreML::Specification::MILSpec::StateType::New(CoreML::Specification::MILSpec::StateType *this)
{
  return CoreML::Specification::MILSpec::StateType::New(this, 0);
}

CoreML::Specification::MILSpec::StateType *CoreML::Specification::MILSpec::StateType::New(CoreML::Specification::MILSpec::StateType *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::StateType *v3;

  v3 = (CoreML::Specification::MILSpec::StateType *)operator new();
  CoreML::Specification::MILSpec::StateType::StateType(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::StateType>(a2, v3);
  return v3;
}

void sub_19C9EBB68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::StateType::Clear(CoreML::Specification::MILSpec::StateType *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 2) = 0;
  return result;
}

uint64_t CoreML::Specification::MILSpec::StateType::IsInitialized(CoreML::Specification::MILSpec::StateType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::StateType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::StateType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::ValueType *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 2);
      if (!v11)
      {
        v11 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v15 = *((_DWORD *)a2 + 13);
      v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        v17 = v14;
        result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(v11, a2);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C9EBD24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::MILSpec::StateType::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if (this != &CoreML::Specification::MILSpec::_StateType_default_instance_)
  {
    v5 = this[2];
    if (v5)
      return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::StateType::GetCachedSize(CoreML::Specification::MILSpec::StateType *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::StateType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::StateType>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::StateType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::DictionaryType::~DictionaryType(CoreML::Specification::MILSpec::DictionaryType *this)
{
  CoreML::Specification::MILSpec::DictionaryType::~DictionaryType(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E3D57F90;
  if (this != (CoreML::Specification::MILSpec::DictionaryType *)&CoreML::Specification::MILSpec::_DictionaryType_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::DictionaryType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.DictionaryType");
}

CoreML::Specification::MILSpec::DictionaryType *CoreML::Specification::MILSpec::DictionaryType::New(CoreML::Specification::MILSpec::DictionaryType *this)
{
  return CoreML::Specification::MILSpec::DictionaryType::New(this, 0);
}

CoreML::Specification::MILSpec::DictionaryType *CoreML::Specification::MILSpec::DictionaryType::New(CoreML::Specification::MILSpec::DictionaryType *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::DictionaryType *v3;

  v3 = (CoreML::Specification::MILSpec::DictionaryType *)operator new();
  CoreML::Specification::MILSpec::DictionaryType::DictionaryType(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::DictionaryType>(a2, v3);
  return v3;
}

void sub_19C9EBEC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::DictionaryType::Clear(CoreML::Specification::MILSpec::DictionaryType *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t CoreML::Specification::MILSpec::DictionaryType::IsInitialized(CoreML::Specification::MILSpec::DictionaryType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::DictionaryType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::DictionaryType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::ValueType *v10;
  char *v11;
  int VarintSizeAsIntFallback;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_21;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_21;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 18)
        goto LABEL_21;
      v10 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 3);
      if (!v10)
      {
        v10 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v10);
        *((_QWORD *)this + 3) = v10;
      }
LABEL_18:
      v11 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v11 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v11;
        *(_QWORD *)a2 = v11 + 1;
      }
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v15 = *((_DWORD *)a2 + 13);
      v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        v17 = v14;
        result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(v10, a2);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17))
          continue;
      }
      return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      v10 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 2);
      if (!v10)
      {
        v10 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v10);
        *((_QWORD *)this + 2) = v10;
      }
      goto LABEL_18;
    }
LABEL_21:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C9EC0DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::MILSpec::DictionaryType::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (this != &CoreML::Specification::MILSpec::_DictionaryType_default_instance_)
  {
    v5 = this;
    v6 = this[2];
    if (v6)
      this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    v7 = v5[3];
    if (v7)
      return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::DictionaryType::GetCachedSize(CoreML::Specification::MILSpec::DictionaryType *this)
{
  return *((unsigned int *)this + 8);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::DictionaryType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryType>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::ListType::~ListType(CoreML::Specification::MILSpec::ListType *this)
{
  CoreML::Specification::MILSpec::ListType::~ListType(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E3D58C08;
  if (this != (CoreML::Specification::MILSpec::ListType *)&CoreML::Specification::MILSpec::_ListType_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::ListType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.ListType");
}

CoreML::Specification::MILSpec::ListType *CoreML::Specification::MILSpec::ListType::New(CoreML::Specification::MILSpec::ListType *this)
{
  return CoreML::Specification::MILSpec::ListType::New(this, 0);
}

CoreML::Specification::MILSpec::ListType *CoreML::Specification::MILSpec::ListType::New(CoreML::Specification::MILSpec::ListType *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::ListType *v3;

  v3 = (CoreML::Specification::MILSpec::ListType *)operator new();
  CoreML::Specification::MILSpec::ListType::ListType(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::ListType>(a2, v3);
  return v3;
}

void sub_19C9EC2CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::ListType::Clear(CoreML::Specification::MILSpec::ListType *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t CoreML::Specification::MILSpec::ListType::IsInitialized(CoreML::Specification::MILSpec::ListType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::ListType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::ListType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::ValueType *v10;
  char *v11;
  int v12;
  CoreML::Specification::MILSpec::Dimension *v13;
  char *v14;
  int VarintSizeAsIntFallback;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t result;
  int v22;
  unsigned int v23;
  int v24;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_24;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_24;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 18)
        goto LABEL_24;
      v13 = (CoreML::Specification::MILSpec::Dimension *)*((_QWORD *)this + 3);
      if (!v13)
      {
        v13 = (CoreML::Specification::MILSpec::Dimension *)operator new();
        CoreML::Specification::MILSpec::Dimension::Dimension(v13);
        *((_QWORD *)this + 3) = v13;
      }
      v14 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v14;
        *(_QWORD *)a2 = v14 + 1;
      }
      v22 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v24 = *((_DWORD *)a2 + 13);
      v19 = __OFSUB__(v24--, 1);
      *((_DWORD *)a2 + 13) = v24;
      if (v24 < 0 != v19)
        return 0;
      v20 = v22;
      result = CoreML::Specification::MILSpec::Dimension::MergePartialFromCodedStream(v13, a2, v23);
      if (!(_DWORD)result)
        return result;
LABEL_37:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v20))
        return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      v10 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 2);
      if (!v10)
      {
        v10 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v10);
        *((_QWORD *)this + 2) = v10;
      }
      v11 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v11 < 0)
      {
        v12 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v12 < 0)
          return 0;
      }
      else
      {
        v12 = *v11;
        *(_QWORD *)a2 = v11 + 1;
      }
      v17 = google::protobuf::io::CodedInputStream::PushLimit(a2, v12);
      v18 = *((_DWORD *)a2 + 13);
      v19 = __OFSUB__(v18--, 1);
      *((_DWORD *)a2 + 13) = v18;
      if (v18 < 0 != v19)
        return 0;
      v20 = v17;
      result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(v10, a2);
      if (!(_DWORD)result)
        return result;
      goto LABEL_37;
    }
LABEL_24:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C9EC544(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::MILSpec::ListType::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (this != &CoreML::Specification::MILSpec::_ListType_default_instance_)
  {
    v5 = this;
    v6 = this[2];
    if (v6)
      this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    v7 = v5[3];
    if (v7)
      return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::ListType::GetCachedSize(CoreML::Specification::MILSpec::ListType *this)
{
  return *((unsigned int *)this + 8);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::ListType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ListType>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ListType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::TupleType::~TupleType(CoreML::Specification::MILSpec::TupleType *this)
{
  CoreML::Specification::MILSpec::TupleType::~TupleType(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D58F00;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TupleType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TupleType");
}

CoreML::Specification::MILSpec::TupleType *CoreML::Specification::MILSpec::TupleType::New(CoreML::Specification::MILSpec::TupleType *this)
{
  return CoreML::Specification::MILSpec::TupleType::New(this, 0);
}

CoreML::Specification::MILSpec::TupleType *CoreML::Specification::MILSpec::TupleType::New(CoreML::Specification::MILSpec::TupleType *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TupleType *v3;

  v3 = (CoreML::Specification::MILSpec::TupleType *)operator new();
  CoreML::Specification::MILSpec::TupleType::TupleType(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TupleType>(a2, v3);
  return v3;
}

void sub_19C9EC734(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TupleType::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v4 = *v3++;
      this = CoreML::Specification::MILSpec::ValueType::clear_type(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TupleType::IsInitialized(CoreML::Specification::MILSpec::TupleType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TupleType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TupleType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int *v12;
  int v13;
  int v14;
  CoreML::Specification::MILSpec::ValueType *Aligned;
  google::protobuf::Arena *v16;
  google::protobuf::Arena **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int VarintSizeAsIntFallback;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t result;

  v5 = (CoreML::Specification::MILSpec::TupleType *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
        }
        v14 = *v12;
        goto LABEL_26;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 < *v12)
      {
        *((_DWORD *)this + 6) = v13 + 1;
        Aligned = *(CoreML::Specification::MILSpec::ValueType **)&v12[2 * v13 + 2];
        goto LABEL_32;
      }
      if (v14 == *((_DWORD *)this + 7))
        goto LABEL_23;
LABEL_26:
      *v12 = v14 + 1;
      v16 = *(google::protobuf::Arena **)v5;
      if (*(_QWORD *)v5)
      {
        CoreML::Specification::MILSpec::ValueType::ValueType(Aligned);
        v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
        *v17 = Aligned;
        v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::ValueType>;
        v18 = (unint64_t *)((char *)v16 + 32);
        do
          v19 = __ldxr(v18);
        while (__stxr((unint64_t)v17, v18));
        v17[2] = (google::protobuf::Arena *)v19;
      }
      else
      {
        Aligned = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(Aligned);
      }
      v20 = *((_QWORD *)this + 4);
      v21 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v21 + 1;
      *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
LABEL_32:
      v22 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v22;
        *(_QWORD *)a2 = v22 + 1;
      }
      v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v25 = *((_DWORD *)a2 + 13);
      v26 = __OFSUB__(v25--, 1);
      *((_DWORD *)a2 + 13) = v25;
      if (v25 < 0 == v26)
      {
        v27 = v24;
        result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(Aligned, a2);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v27))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C9EC9F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TupleType::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TupleType::GetCachedSize(CoreML::Specification::MILSpec::TupleType *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TupleType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TupleType>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TupleType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((uint64_t)a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x1A1AD6260](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear(uint64_t a1)
{
  double result;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v3, *(_QWORD **)(a1 + 16));
  while ((_QWORD)v3)
  {
    v5 = v3;
    v6 = v4;
    *(_QWORD *)&result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase((uint64_t)&v3, (_QWORD *)a1, &v5).n128_u64[0];
  }
  return result;
}

__n128 google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BOOL4 v8;
  unint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  __n128 result;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;

  if (!*a2)
  {
    v6 = *(_QWORD *)(*a3 + 24);
    if (v6)
    {
      CoreML::Specification::MILSpec::Value::~Value((CoreML::Specification::MILSpec::Value *)(v6 + 24));
      if (*(char *)(v6 + 23) < 0)
        operator delete(*(void **)v6);
      MEMORY[0x1A1AD6260](v6, 0x10B2C40CC7398DALL);
    }
  }
  v18 = *(_OWORD *)a3;
  v19 = a3[2];
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(a3);
  v7 = (_QWORD *)a2[2];
  v20 = 0;
  v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v18, &v20);
  v9 = v19;
  v10 = (void **)v18;
  v11 = v7[4];
  v12 = *(_QWORD *)(v11 + 8 * v19);
  if (v8)
  {
    v13 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v18, *(_QWORD *)(v11 + 8 * v19));
LABEL_12:
    *(_QWORD *)(v7[4] + 8 * v9) = v13;
    goto LABEL_13;
  }
  v14 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v12, *(_QWORD **)(v20 + 32));
  if ((uint64_t *)(v12 + 8) != v14)
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v12, v14);
  if (!*(_QWORD *)(v12 + 24))
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(v7[5], (_QWORD **)v12);
    v13 = 0;
    *(_QWORD *)(v7[4] + ((8 * v9) | 8)) = 0;
    v9 &= ~1uLL;
    goto LABEL_12;
  }
LABEL_13:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v7, v10);
  --*v7;
  if (v9 == v7[3])
  {
    v16 = v7[1];
    if (v9 < v16)
    {
      v17 = v7[4];
      do
      {
        if (*(_QWORD *)(v17 + 8 * v9))
          break;
        v7[3] = ++v9;
      }
      while (v16 != v9);
    }
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  return result;
}

void CoreML::Specification::MILSpec::TensorType::~TensorType(CoreML::Specification::MILSpec::TensorType *this)
{
  CoreML::Specification::MILSpec::TensorType::~TensorType(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D57DC8;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((_QWORD *)this + 6);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::TensorType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorType");
}

CoreML::Specification::MILSpec::TensorType *CoreML::Specification::MILSpec::TensorType::New(CoreML::Specification::MILSpec::TensorType *this)
{
  return CoreML::Specification::MILSpec::TensorType::New(this, 0);
}

CoreML::Specification::MILSpec::TensorType *CoreML::Specification::MILSpec::TensorType::New(CoreML::Specification::MILSpec::TensorType *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::TensorType *v3;

  v3 = (CoreML::Specification::MILSpec::TensorType *)operator new();
  CoreML::Specification::MILSpec::TensorType::TensorType(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorType>(a2, v3);
  return v3;
}

void sub_19C9ECDE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4012099E73);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::TensorType::Clear(CoreML::Specification::MILSpec::TensorType *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      CoreML::Specification::MILSpec::Dimension::clear_dimension(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((uint64_t)this + 48);
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 9) = 0;
}

uint64_t CoreML::Specification::MILSpec::TensorType::IsInitialized(CoreML::Specification::MILSpec::TensorType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  char *v6;
  google::protobuf::internal::RepeatedPtrFieldBase *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int TagFallback;
  char *v12;
  int v13;
  char *v14;
  unint64_t Varint64Fallback;
  int *v16;
  int v17;
  int v18;
  CoreML::Specification::MILSpec::Dimension *Aligned;
  char *v20;
  int v21;
  BOOL v22;
  int v23;
  char v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  unsigned int *p_p;
  int v30;
  _BOOL4 v31;
  BOOL v32;
  google::protobuf::Arena *v33;
  google::protobuf::Arena **v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int VarintSizeAsIntFallback;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t Varint32Fallback;
  uint64_t result;
  _QWORD v47[2];
  void *__p;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v5 = (char *)this + 40;
  v6 = (char *)this + 48;
  v7 = (CoreML::Specification::MILSpec::TensorType *)((char *)this + 16);
  while (1)
  {
    v8 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      break;
    v9 = *v8;
    if (*v8 < 1)
      goto LABEL_7;
    *(_QWORD *)a2 = v8 + 1;
    v10 = v9 | 0x100000000;
    if ((v10 & 0x100000000) != 0)
      goto LABEL_8;
LABEL_25:
    if ((_DWORD)v10)
      v22 = (v10 & 7) == 4;
    else
      v22 = 1;
    if (v22)
      return 1;
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3))goto LABEL_77;
LABEL_30:
    v23 = 0;
LABEL_31:
    if (v23)
      goto LABEL_77;
  }
  LODWORD(v9) = 0;
LABEL_7:
  TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
  v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
  if ((v10 & 0x100000000) == 0)
    goto LABEL_25;
LABEL_8:
  switch(v10 >> 3)
  {
    case 1u:
      if (v10 != 8)
        goto LABEL_25;
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v13 = 0;
      }
      else
      {
        v13 = *v12;
        if ((*v12 & 0x80000000) == 0)
        {
          *(_QWORD *)a2 = v12 + 1;
          goto LABEL_76;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v13);
      v13 = Varint32Fallback;
      if (Varint32Fallback < 0)
        goto LABEL_77;
LABEL_76:
      *((_DWORD *)this + 20) = v13;
      goto LABEL_30;
    case 2u:
      if (v10 != 16)
        goto LABEL_25;
      v14 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
      {
        Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
        if ((v24 & 1) == 0)
          goto LABEL_77;
      }
      else
      {
        Varint64Fallback = *v14;
        *(_QWORD *)a2 = v14 + 1;
      }
      *((_QWORD *)this + 9) = Varint64Fallback;
      goto LABEL_30;
    case 3u:
      if (v10 != 26)
        goto LABEL_25;
      v16 = (int *)*((_QWORD *)this + 4);
      if (!v16)
      {
        v17 = *((_DWORD *)this + 6);
        v18 = *((_DWORD *)this + 7);
LABEL_56:
        if (v17 <= v18)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v7, v18 - v17 + 1);
          v16 = (int *)*((_QWORD *)this + 4);
        }
        v18 = *v16;
        goto LABEL_59;
      }
      v17 = *((_DWORD *)this + 6);
      v18 = *v16;
      if (v17 < *v16)
      {
        *((_DWORD *)this + 6) = v17 + 1;
        Aligned = *(CoreML::Specification::MILSpec::Dimension **)&v16[2 * v17 + 2];
        goto LABEL_65;
      }
      if (v18 == *((_DWORD *)this + 7))
        goto LABEL_56;
LABEL_59:
      *v16 = v18 + 1;
      v33 = *(google::protobuf::Arena **)v7;
      if (*(_QWORD *)v7)
      {
        CoreML::Specification::MILSpec::Dimension::Dimension(Aligned);
        v34 = google::protobuf::Arena::AllocateAligned(v33, 0, 24);
        *v34 = Aligned;
        v34[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Dimension>;
        v35 = (unint64_t *)((char *)v33 + 32);
        do
          v36 = __ldxr(v35);
        while (__stxr((unint64_t)v34, v35));
        v34[2] = (google::protobuf::Arena *)v36;
      }
      else
      {
        Aligned = (CoreML::Specification::MILSpec::Dimension *)operator new();
        CoreML::Specification::MILSpec::Dimension::Dimension(Aligned);
      }
      v37 = *((_QWORD *)this + 4);
      v38 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v38 + 1;
      *(_QWORD *)(v37 + 8 * v38 + 8) = Aligned;
LABEL_65:
      v39 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v39 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          goto LABEL_77;
      }
      else
      {
        VarintSizeAsIntFallback = *v39;
        *(_QWORD *)a2 = v39 + 1;
      }
      v41 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v43 = *((_DWORD *)a2 + 13);
      v27 = __OFSUB__(v43--, 1);
      *((_DWORD *)a2 + 13) = v43;
      if (v43 < 0 == v27)
      {
        v44 = v41;
        if (CoreML::Specification::MILSpec::Dimension::MergePartialFromCodedStream(Aligned, a2, v42))
        {
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v44))
            goto LABEL_30;
        }
      }
LABEL_77:
      result = 0;
      break;
    case 4u:
      if (v10 != 34)
        goto LABEL_25;
      v47[0] = v5;
      v47[1] = v6;
      v49 = 0;
      v50 = 0;
      __p = 0;
      v51 = 0;
      v20 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
      {
        v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v21 < 0)
          goto LABEL_73;
      }
      else
      {
        v21 = *v20;
        *(_QWORD *)a2 = v20 + 1;
      }
      v25 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
      v26 = *((_DWORD *)a2 + 13);
      v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 != v27
        || (v28 = v25,
            !google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream((uint64_t)v47, (uint64_t)a2))|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
      {
LABEL_73:
        v32 = 0;
        v23 = 6;
        goto LABEL_48;
      }
      if (v50 >= 0)
        p_p = (unsigned int *)&__p;
      else
        p_p = (unsigned int *)__p;
      if (v50 >= 0)
        v30 = HIBYTE(v50);
      else
        v30 = v49;
      v31 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v30, 0, (uint64_t)"CoreML.Specification.MILSpec.TensorType.AttributesEntry.key");
      v32 = v31;
      if (v31)
        v23 = 0;
      else
        v23 = 6;
LABEL_48:
      if (v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
      if (SHIBYTE(v50) < 0)
        operator delete(__p);
      if (!v32)
        goto LABEL_31;
      goto LABEL_30;
    default:
      goto LABEL_25;
  }
  return result;
}

void sub_19C9ED298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  MEMORY[0x1A1AD6260](v19, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorType::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  signed int v6;
  unint64_t v7;
  int v8;
  int i;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  google::protobuf::io::CodedOutputStream *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  google::protobuf::io::CodedOutputStream *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned __int8 *v30[3];

  v5 = this;
  v6 = *(_DWORD *)(this + 80);
  if (v6)
    this = google::protobuf::internal::WireFormatLite::WriteEnum(1, v6, a2, a4);
  v7 = *(_QWORD *)(v5 + 72);
  if (v7)
    this = google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  v8 = *(_DWORD *)(v5 + 24);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  v10 = *(unint64_t **)(v5 + 64);
  v11 = *v10;
  if (*v10)
  {
    if (*((_BYTE *)a2 + 26))
    {
      if (v11 >= 2 && *((_BYTE *)a2 + 27) != 0)
      {
LABEL_31:
        v19 = operator new[]();
        google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v30, *(_QWORD **)(v5 + 64));
        v20 = v30[0];
        if (v30[0])
        {
          v21 = 0;
          do
          {
            *(_QWORD *)(v19 + 8 * v21) = *((_QWORD *)v20 + 3);
            google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v30);
            ++v21;
            v20 = v30[0];
          }
          while (v30[0]);
        }
        else
        {
          v21 = 0;
        }
        v22 = 126 - 2 * __clz(v21);
        if (v21)
          v23 = v22;
        else
          v23 = 0;
        std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**,false>(v19, (char *)(v19 + 8 * v21), v23, 1);
        if (v21)
        {
          v24 = 0;
          v25 = 0;
          do
          {
            v27 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v19 + 8 * v24), *(_QWORD *)(v19 + 8 * v24) + 24, *(google::protobuf::Arena **)(v5 + 40));
            if (v25 != v27)
            {
              if (v25)
                (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
              v25 = v27;
            }
            google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v25, a2, v26);
            v28 = *(unsigned int **)(v19 + 8 * v24);
            if (*((char *)v28 + 23) < 0)
            {
              v28 = *(unsigned int **)v28;
              v29 = *(_QWORD *)(*(_QWORD *)(v19 + 8 * v24) + 8);
            }
            else
            {
              LODWORD(v29) = *((unsigned __int8 *)v28 + 23);
            }
            google::protobuf::internal::WireFormatLite::VerifyUtf8String(v28, v29, 1, (uint64_t)"CoreML.Specification.MILSpec.TensorType.AttributesEntry.key");
            ++v24;
          }
          while (v21 != v24);
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        }
        return MEMORY[0x1A1AD6248](v19, 0x60C8044C4A2DFLL);
      }
    }
    else if (v11 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
      goto LABEL_31;
    }
    this = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v30, v10);
    v13 = 0;
    while (v30[0])
    {
      v15 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v30[0] + 3), *((_QWORD *)v30[0] + 3) + 24, *(google::protobuf::Arena **)(v5 + 40));
      if (v13 != v15)
      {
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v13 = v15;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v13, a2, v14);
      v16 = (unsigned int *)*((_QWORD *)v30[0] + 3);
      if (*((char *)v16 + 23) < 0)
      {
        v16 = *(unsigned int **)v16;
        v17 = *(_QWORD *)(*((_QWORD *)v30[0] + 3) + 8);
      }
      else
      {
        LODWORD(v17) = *((unsigned __int8 *)v16 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v16, v17, 1, (uint64_t)"CoreML.Specification.MILSpec.TensorType.AttributesEntry.key");
      this = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v30);
    }
    if (v13)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  return this;
}

void sub_19C9ED5AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1A1AD6248](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorType::GetCachedSize(CoreML::Specification::MILSpec::TensorType *this)
{
  return *((unsigned int *)this + 21);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  CoreML::Specification::MILSpec::Value *v7;
  unsigned __int8 *v8;
  int VarintSizeAsIntFallback;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;

  v4 = *(unsigned __int8 **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v4 != 10)
  {
    v10 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*v10);
    *v10 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    goto LABEL_13;
  }
  *(_QWORD *)a2 = v4 + 1;
  if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, (std::string *)(a1 + 16)))return 0;
  if ((int)(*(_DWORD *)(a2 + 8) - *(_QWORD *)a2) < 1
    || **(_BYTE **)a2 != 18
    || (v5 = *(_QWORD *)(a1 + 8),
        v6 = **(_QWORD **)(v5 + 16),
        *(_QWORD *)(a1 + 40) = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](v5, a1 + 16), v6 == **(_QWORD **)(*(_QWORD *)(a1 + 8) + 16)))
  {
LABEL_13:
    v11 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(**(google::protobuf::Arena ***)a1);
    v12 = *(_QWORD *)(a1 + 48);
    if (v12 != v11)
    {
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *(_QWORD *)(a1 + 48) = v11;
    }
    v13 = *(__int128 **)(v11 + 16);
    *(_DWORD *)(v11 + 40) |= 1u;
    if (v13 == &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v11 + 16), *(google::protobuf::Arena ***)(v11 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v13 = *(__int128 **)(v11 + 16);
    }
    std::string::operator=((std::string *)v13, (const std::string *)(a1 + 16));
    v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
    if ((_DWORD)v14)
      google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::UseKeyAndValueFromEntry(a1);
    if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
      *(_QWORD *)(a1 + 48) = 0;
    return v14;
  }
  google::protobuf::io::CodedInputStream::Skip((google::protobuf::io::CodedInputStream *)a2, 1u);
  v7 = *(CoreML::Specification::MILSpec::Value **)(a1 + 40);
  v8 = *(unsigned __int8 **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v8 < 0)
  {
    VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
    if (VarintSizeAsIntFallback < 0)
    {
LABEL_29:
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase(*(_QWORD **)(a1 + 8), (unsigned __int8 *)(a1 + 16));
      return 0;
    }
  }
  else
  {
    VarintSizeAsIntFallback = *v8;
    *(_QWORD *)a2 = v8 + 1;
  }
  v15 = google::protobuf::io::CodedInputStream::PushLimit((google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
  v16 = *(_DWORD *)(a2 + 52);
  v17 = __OFSUB__(v16--, 1);
  *(_DWORD *)(a2 + 52) = v16;
  if (v16 < 0 != v17)
    goto LABEL_29;
  v18 = v15;
  if (!CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream(v7, (google::protobuf::io::CodedInputStream *)a2)|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((google::protobuf::io::CodedInputStream *)a2, v18))
  {
    goto LABEL_29;
  }
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8) || !*(_DWORD *)(a2 + 44) && *(_DWORD *)(a2 + 24) != *(_DWORD *)(a2 + 40))
    return google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::ReadBeyondKeyValuePair(a1, a2);
  *(_DWORD *)(a2 + 32) = 0;
  v14 = 1;
  *(_BYTE *)(a2 + 36) = 1;
  return v14;
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase(_QWORD *a1, unsigned __int8 *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  result = *(double *)&v6;
  if ((_QWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    *(_QWORD *)&result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase((uint64_t)&v6, a1, &v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::MILSpec::Value *v6;
  CoreML::Specification::MILSpec::Value *Aligned;
  google::protobuf::Arena *v8;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v4 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(**(google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(CoreML::Specification::MILSpec::Value **)(a1 + 40);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::MILSpec::Value **)(v4 + 24);
  if (!Aligned)
  {
    v8 = *(google::protobuf::Arena **)(v4 + 32);
    if (v8)
    {
      CoreML::Specification::MILSpec::Value::Value(Aligned);
      v9 = google::protobuf::Arena::AllocateAligned(v8, 0, 24);
      *v9 = Aligned;
      v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
      v10 = (unint64_t *)((char *)v8 + 32);
      do
        v11 = __ldxr(v10);
      while (__stxr((unint64_t)v9, v10));
      v9[2] = (google::protobuf::Arena *)v11;
    }
    else
    {
      Aligned = (CoreML::Specification::MILSpec::Value *)operator new();
      CoreML::Specification::MILSpec::Value::Value(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
  }
  CoreML::Specification::MILSpec::Value::Swap((uint64_t)Aligned, v6);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase(*(_QWORD **)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v12 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v12 + 40) |= 1u;
  v13 = *(_QWORD *)(v12 + 16);
  if ((__int128 *)v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v12 + 16), *(google::protobuf::Arena ***)(v12 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
    v13 = *(_QWORD *)(v12 + 16);
  }
  if (*(char *)(v13 + 23) < 0)
    operator delete(*(void **)v13);
  v14 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v13 = v14;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v15)
    google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
    *(_QWORD *)(a1 + 48) = 0;
  return v15;
}

void sub_19C9EDA84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(google::protobuf::Arena *a1)
{
  uint64_t result;

  if (a1)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E3D5AA40;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  google::protobuf::Arena **v3;
  uint64_t v4;
  CoreML::Specification::MILSpec::Value *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena **v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  v3 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](*(_QWORD *)(a1 + 8), a1 + 16);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::MILSpec::Value **)(v4 + 24);
  if (!Aligned)
  {
    v6 = *(google::protobuf::Arena **)(v4 + 32);
    if (v6)
    {
      CoreML::Specification::MILSpec::Value::Value(Aligned);
      v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
      *v7 = Aligned;
      v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
      v8 = (unint64_t *)((char *)v6 + 32);
      do
        v9 = __ldxr(v8);
      while (__stxr((unint64_t)v7, v8));
      v7[2] = (google::protobuf::Arena *)v9;
    }
    else
    {
      Aligned = (CoreML::Specification::MILSpec::Value *)operator new();
      CoreML::Specification::MILSpec::Value::Value(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
    v3 = *(google::protobuf::Arena ***)(a1 + 40);
  }
  return CoreML::Specification::MILSpec::Value::Swap((uint64_t)v3, Aligned);
}

void sub_19C9EDC08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value::Swap(uint64_t this, CoreML::Specification::MILSpec::Value *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 != (CoreML::Specification::MILSpec::Value *)this)
  {
    v2 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v2;
    v3 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v3;
    v4 = *(_QWORD *)(this + 32);
    *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 44);
    *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v4;
  }
  return this;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorType>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::ValueType::~ValueType(CoreML::Specification::MILSpec::ValueType *this)
{
  CoreML::Specification::MILSpec::ValueType::~ValueType(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D58F98;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::ValueType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.ValueType");
}

CoreML::Specification::MILSpec::ValueType *CoreML::Specification::MILSpec::ValueType::New(CoreML::Specification::MILSpec::ValueType *this)
{
  return CoreML::Specification::MILSpec::ValueType::New(this, 0);
}

CoreML::Specification::MILSpec::ValueType *CoreML::Specification::MILSpec::ValueType::New(CoreML::Specification::MILSpec::ValueType *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::ValueType *v3;

  v3 = (CoreML::Specification::MILSpec::ValueType *)operator new();
  CoreML::Specification::MILSpec::ValueType::ValueType(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::ValueType>(a2, v3);
  return v3;
}

void sub_19C9EDDC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::ValueType::IsInitialized(CoreML::Specification::MILSpec::ValueType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::ValueType::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 3)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 4)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 5)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::MILSpec::ValueType::GetCachedSize(CoreML::Specification::MILSpec::ValueType *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::ValueType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ValueType>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ValueType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::NamedValueType::~NamedValueType(CoreML::Specification::MILSpec::NamedValueType *this)
{
  CoreML::Specification::MILSpec::NamedValueType::~NamedValueType(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3D58028;
  v2 = *((_QWORD *)this + 2);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
  }
  if (this != (CoreML::Specification::MILSpec::NamedValueType *)&CoreML::Specification::MILSpec::_NamedValueType_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::NamedValueType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.NamedValueType");
}

CoreML::Specification::MILSpec::NamedValueType *CoreML::Specification::MILSpec::NamedValueType::New(CoreML::Specification::MILSpec::NamedValueType *this)
{
  return CoreML::Specification::MILSpec::NamedValueType::New(this, 0);
}

CoreML::Specification::MILSpec::NamedValueType *CoreML::Specification::MILSpec::NamedValueType::New(CoreML::Specification::MILSpec::NamedValueType *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::NamedValueType *v3;

  v3 = (CoreML::Specification::MILSpec::NamedValueType *)operator new();
  CoreML::Specification::MILSpec::NamedValueType::NamedValueType(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::NamedValueType>(a2, v3);
  return v3;
}

void sub_19C9EDFEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::Clear(CoreML::Specification::MILSpec::NamedValueType *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::IsInitialized(CoreML::Specification::MILSpec::NamedValueType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::NamedValueType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  std::string *v11;
  uint64_t result;
  unsigned int *v13;
  std::string::size_type size;
  CoreML::Specification::MILSpec::ValueType *v15;
  char *v16;
  int VarintSizeAsIntFallback;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;

  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_25;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *(_QWORD *)a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_25;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 18)
          goto LABEL_25;
        v15 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 3);
        if (!v15)
        {
          v15 = (CoreML::Specification::MILSpec::ValueType *)operator new();
          CoreML::Specification::MILSpec::ValueType::ValueType(v15);
          *((_QWORD *)this + 3) = v15;
        }
        v16 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v16 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v16;
          *(_QWORD *)a2 = v16 + 1;
        }
        v19 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v21 = *((_DWORD *)a2 + 13);
        v22 = __OFSUB__(v21--, 1);
        *((_DWORD *)a2 + 13) = v21;
        if (v21 < 0 == v22)
        {
          v23 = v19;
          result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(v15, a2, v20);
          if (!(_DWORD)result)
            return result;
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v23))
            continue;
        }
        return 0;
      }
      if (v8 >> 3 != 1 || v8 != 10)
        break;
      v11 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v11);
      if (!(_DWORD)result)
        return result;
      v13 = (unsigned int *)*v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = *(unsigned int **)v13;
        size = (*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, size, 0, (uint64_t)"CoreML.Specification.MILSpec.NamedValueType.name"))return 0;
    }
LABEL_25:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C9EE268(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::ByteSizeLong(CoreML::Specification::MILSpec::NamedValueType *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::MILSpec::TensorType **v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  if (this != (CoreML::Specification::MILSpec::NamedValueType *)&CoreML::Specification::MILSpec::_NamedValueType_default_instance_)
  {
    v6 = (CoreML::Specification::MILSpec::TensorType **)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(v6);
      v5 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v5;
  return v5;
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::SerializeWithCachedSizes(CoreML::Specification::MILSpec::NamedValueType *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      goto LABEL_7;
    result = *(_QWORD *)result;
    goto LABEL_6;
  }
  LODWORD(v7) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v7, 1, (uint64_t)"CoreML.Specification.MILSpec.NamedValueType.name");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  if (this != (CoreML::Specification::MILSpec::NamedValueType *)&CoreML::Specification::MILSpec::_NamedValueType_default_instance_)
  {
    v8 = *((_QWORD *)this + 3);
    if (v8)
      return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::GetCachedSize(CoreML::Specification::MILSpec::NamedValueType *this)
{
  return *((unsigned int *)this + 8);
}

void CoreML::Specification::MILSpec::NamedValueType::MergeFrom(CoreML::Specification::MILSpec::NamedValueType *this, const CoreML::Specification::MILSpec::NamedValueType *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  const CoreML::Specification::MILSpec::ValueType *v7;
  CoreML::Specification::MILSpec::ValueType *v8;
  const CoreML::Specification::MILSpec::ValueType *v9;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (__int128 *)*((_QWORD *)this + 2);
  if (v6 != (__int128 *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  if (a2 != (const CoreML::Specification::MILSpec::NamedValueType *)&CoreML::Specification::MILSpec::_NamedValueType_default_instance_)
  {
    v7 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 3);
    if (v7)
    {
      v8 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 3);
      if (!v8)
      {
        v8 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v8);
        *((_QWORD *)this + 3) = v8;
        v7 = (const CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 3);
      }
      if (v7)
        v9 = v7;
      else
        v9 = (const CoreML::Specification::MILSpec::ValueType *)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
      CoreML::Specification::MILSpec::ValueType::MergeFrom((std::string *)v8, v9);
    }
  }
}

void sub_19C9EE4D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::NamedValueType *CoreML::Specification::MILSpec::NamedValueType::NamedValueType(CoreML::Specification::MILSpec::NamedValueType *this)
{
  *(_QWORD *)this = &off_1E3D58028;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::NamedValueType *)&CoreML::Specification::MILSpec::_NamedValueType_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_19C9EE554(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::NamedValueType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::NamedValueType>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::NamedValueType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::clear((uint64_t)a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x1A1AD6260](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::clear(uint64_t a1)
{
  double result;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v3, *(_QWORD **)(a1 + 16));
  while ((_QWORD)v3)
  {
    v5 = v3;
    v6 = v4;
    *(_QWORD *)&result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase((uint64_t)&v3, (_QWORD *)a1, &v5).n128_u64[0];
  }
  return result;
}

__n128 google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BOOL4 v8;
  unint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  __n128 result;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;

  if (!*a2)
  {
    v6 = *(_QWORD *)(*a3 + 24);
    if (v6)
    {
      CoreML::Specification::MILSpec::Argument::~Argument((CoreML::Specification::MILSpec::Argument *)(v6 + 24));
      if (*(char *)(v6 + 23) < 0)
        operator delete(*(void **)v6);
      MEMORY[0x1A1AD6260](v6, 0x10B2C40C743746ALL);
    }
  }
  v18 = *(_OWORD *)a3;
  v19 = a3[2];
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(a3);
  v7 = (_QWORD *)a2[2];
  v20 = 0;
  v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v18, &v20);
  v9 = v19;
  v10 = (void **)v18;
  v11 = v7[4];
  v12 = *(_QWORD *)(v11 + 8 * v19);
  if (v8)
  {
    v13 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v18, *(_QWORD *)(v11 + 8 * v19));
LABEL_12:
    *(_QWORD *)(v7[4] + 8 * v9) = v13;
    goto LABEL_13;
  }
  v14 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v12, *(_QWORD **)(v20 + 32));
  if ((uint64_t *)(v12 + 8) != v14)
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v12, v14);
  if (!*(_QWORD *)(v12 + 24))
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(v7[5], (_QWORD **)v12);
    v13 = 0;
    *(_QWORD *)(v7[4] + ((8 * v9) | 8)) = 0;
    v9 &= ~1uLL;
    goto LABEL_12;
  }
LABEL_13:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v7, v10);
  --*v7;
  if (v9 == v7[3])
  {
    v16 = v7[1];
    if (v9 < v16)
    {
      v17 = v7[4];
      do
      {
        if (*(_QWORD *)(v17 + 8 * v9))
          break;
        v7[3] = ++v9;
      }
      while (v16 != v9);
    }
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  return result;
}

void CoreML::Specification::MILSpec::Argument::~Argument(CoreML::Specification::MILSpec::Argument *this)
{
  *(_QWORD *)this = &off_1E3D58AD8;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::MILSpec::Argument::~Argument(this);
  JUMPOUT(0x1A1AD6260);
}

void CoreML::Specification::MILSpec::Operation::~Operation(CoreML::Specification::MILSpec::Operation *this)
{
  CoreML::Specification::MILSpec::Operation::~Operation(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E3D58DD0;
  v2 = *((_QWORD *)this + 16);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((_QWORD *)this + 13);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 9);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 6);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::Operation::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Operation");
}

CoreML::Specification::MILSpec::Operation *CoreML::Specification::MILSpec::Operation::New(CoreML::Specification::MILSpec::Operation *this)
{
  return CoreML::Specification::MILSpec::Operation::New(this, 0);
}

CoreML::Specification::MILSpec::Operation *CoreML::Specification::MILSpec::Operation::New(CoreML::Specification::MILSpec::Operation *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Operation *v3;

  v3 = (CoreML::Specification::MILSpec::Operation *)operator new();
  CoreML::Specification::MILSpec::Operation::Operation(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Operation>(a2, v3);
  return v3;
}

void sub_19C9EE970(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40B3FB24A3);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::Operation::Clear(CoreML::Specification::MILSpec::Operation *this)
{
  uint64_t v2;
  CoreML::Specification::MILSpec::NamedValueType **v3;
  CoreML::Specification::MILSpec::NamedValueType *v4;
  uint64_t v5;
  CoreML::Specification::MILSpec::Block **v6;
  CoreML::Specification::MILSpec::Block *v7;
  uint64_t v8;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::clear((uint64_t)this + 24);
  v2 = *((unsigned int *)this + 14);
  if ((int)v2 >= 1)
  {
    v3 = (CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)this + 8) + 8);
    do
    {
      v4 = *v3++;
      CoreML::Specification::MILSpec::NamedValueType::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 14) = 0;
  }
  v5 = *((unsigned int *)this + 20);
  if ((int)v5 >= 1)
  {
    v6 = (CoreML::Specification::MILSpec::Block **)(*((_QWORD *)this + 11) + 8);
    do
    {
      v7 = *v6++;
      CoreML::Specification::MILSpec::Block::Clear(v7);
      --v5;
    }
    while (v5);
    *((_DWORD *)this + 20) = 0;
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((uint64_t)this + 104);
  v8 = *((_QWORD *)this + 16);
  if ((__int128 *)v8 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v8 + 23) < 0)
    {
      **(_BYTE **)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v8 = 0;
      *(_BYTE *)(v8 + 23) = 0;
    }
  }
}

uint64_t CoreML::Specification::MILSpec::Operation::IsInitialized(CoreML::Specification::MILSpec::Operation *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Operation::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Operation *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  _QWORD *v6;
  std::string **v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int TagFallback;
  std::string *v12;
  unsigned int *v13;
  std::string::size_type size;
  char *v15;
  int v16;
  CoreML::Specification::MILSpec::NamedValueType *v17;
  char *v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  CoreML::Specification::MILSpec::Block *Aligned;
  char *v24;
  int VarintSizeAsIntFallback;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  unsigned int *v32;
  int v33;
  _BOOL4 v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  google::protobuf::io::CodedInputStream *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  char *v44;
  uint64_t v45;
  CoreML::Specification::MILSpec::Argument *v46;
  char *v47;
  int v48;
  uint64_t v49;
  __int128 *v50;
  int BeyondKeyValuePair;
  BOOL v52;
  google::protobuf::Arena *v53;
  google::protobuf::Arena **v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int *p_p;
  int v69;
  uint64_t result;
  google::protobuf::internal::RepeatedPtrFieldBase *v71;
  google::protobuf::Arena **v72;
  _QWORD *v73;
  google::protobuf::Arena **v74;
  google::protobuf::Arena **v75;
  _QWORD *v76;
  std::string __p;
  google::protobuf::Arena **v78;
  uint64_t v79;

  v73 = (_QWORD *)((char *)this + 104);
  v74 = (google::protobuf::Arena **)((char *)this + 96);
  v5 = (CoreML::Specification::MILSpec::Operation *)((char *)this + 48);
  v71 = (CoreML::Specification::MILSpec::Operation *)((char *)this + 72);
  v72 = (google::protobuf::Arena **)((char *)this + 16);
  v6 = (_QWORD *)((char *)this + 24);
  v7 = (std::string **)((char *)this + 128);
  while (1)
  {
    v8 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      break;
    v9 = *v8;
    if (*v8 < 1)
      goto LABEL_7;
    *(_QWORD *)a2 = v8 + 1;
    v10 = v9 | 0x100000000;
    if ((v10 & 0x100000000) != 0)
      goto LABEL_8;
LABEL_31:
    if ((_DWORD)v10)
      v26 = (v10 & 7) == 4;
    else
      v26 = 1;
    if (v26)
      return 1;
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3))goto LABEL_131;
LABEL_36:
    v27 = 0;
LABEL_37:
    if (v27)
      goto LABEL_131;
  }
  LODWORD(v9) = 0;
LABEL_7:
  TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
  v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
  if ((v10 & 0x100000000) == 0)
    goto LABEL_31;
LABEL_8:
  switch(v10 >> 3)
  {
    case 1u:
      if (v10 != 10)
        goto LABEL_31;
      v12 = *v7;
      if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v7;
      }
      if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v12))
        goto LABEL_131;
      v13 = (unsigned int *)*v7;
      if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = *(unsigned int **)v13;
        size = (*v7)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Operation.type"))goto LABEL_131;
      goto LABEL_36;
    case 2u:
      if (v10 != 18)
        goto LABEL_31;
      v75 = v72;
      v76 = v6;
      memset(&__p, 0, sizeof(__p));
      v79 = 0;
      v24 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v24 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          goto LABEL_127;
      }
      else
      {
        VarintSizeAsIntFallback = *v24;
        *(_QWORD *)a2 = v24 + 1;
      }
      v41 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v42 = *((_DWORD *)a2 + 13);
      v30 = __OFSUB__(v42--, 1);
      *((_DWORD *)a2 + 13) = v42;
      if (v42 < 0 != v30)
        goto LABEL_127;
      v43 = v41;
      v44 = *(char **)a2;
      if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && *v44 == 10)
      {
        *(_QWORD *)a2 = v44 + 1;
        if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, &__p))
          goto LABEL_127;
        if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) >= 1 && **(_BYTE **)a2 == 18)
        {
          v45 = *(_QWORD *)v76[2];
          v78 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::operator[]((uint64_t)v76, (uint64_t)&__p);
          if (v45 != *(_QWORD *)v76[2])
          {
            google::protobuf::io::CodedInputStream::Skip(a2, 1u);
            v46 = (CoreML::Specification::MILSpec::Argument *)v78;
            v47 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v47 < 0)
            {
              v48 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v48 < 0)
                goto LABEL_126;
            }
            else
            {
              v48 = *v47;
              *(_QWORD *)a2 = v47 + 1;
            }
            v64 = google::protobuf::io::CodedInputStream::PushLimit(a2, v48);
            v66 = *((_DWORD *)a2 + 13);
            v30 = __OFSUB__(v66--, 1);
            *((_DWORD *)a2 + 13) = v66;
            if (v66 < 0 != v30
              || (v67 = v64,
                  !CoreML::Specification::MILSpec::Argument::MergePartialFromCodedStream(v46, a2, v65))
              || !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v67))
            {
LABEL_126:
              google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase(v76, (unsigned __int8 *)&__p);
              goto LABEL_127;
            }
            if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1)
              && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              *((_BYTE *)a2 + 36) = 1;
              goto LABEL_109;
            }
            BeyondKeyValuePair = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>>::ReadBeyondKeyValuePair((uint64_t)&v75, (uint64_t)a2);
            goto LABEL_108;
          }
        }
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        memset(&__p, 0, sizeof(__p));
      }
      v49 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*v75);
      if (v79 != v49)
      {
        if (v79)
          (*(void (**)(void))(*(_QWORD *)v79 + 8))();
        v79 = v49;
      }
      v50 = *(__int128 **)(v49 + 16);
      *(_DWORD *)(v49 + 40) |= 1u;
      if (v50 == &google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v49 + 16), *(google::protobuf::Arena ***)(v49 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v50 = *(__int128 **)(v49 + 16);
      }
      std::string::operator=((std::string *)v50, &__p);
      BeyondKeyValuePair = (*(uint64_t (**)(uint64_t, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v79 + 88))(v79, a2);
      if (BeyondKeyValuePair)
        google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>>::UseKeyAndValueFromEntry((uint64_t)&v75);
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79))
      {
        v79 = 0;
        if ((BeyondKeyValuePair & 1) == 0)
        {
          v52 = 0;
          v27 = 6;
          goto LABEL_122;
        }
        goto LABEL_109;
      }
LABEL_108:
      if (!BeyondKeyValuePair)
        goto LABEL_127;
LABEL_109:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v43))
        goto LABEL_127;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = (unsigned int *)&__p;
      else
        p_p = (unsigned int *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v69 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v69 = __p.__r_.__value_.__r.__words[1];
      v34 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v69, 0, (uint64_t)"CoreML.Specification.MILSpec.Operation.InputsEntry.key");
LABEL_117:
      v52 = v34;
      if (v34)
        v27 = 0;
      else
        v27 = 6;
LABEL_120:
      if (v79)
        (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
LABEL_122:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v52)
        goto LABEL_37;
      goto LABEL_36;
    case 3u:
      if (v10 != 26)
        goto LABEL_31;
      v17 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>(v5);
      v18 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v18 < 0)
      {
        v19 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v19 < 0)
          goto LABEL_131;
      }
      else
      {
        v19 = *v18;
        *(_QWORD *)a2 = v18 + 1;
      }
      v35 = google::protobuf::io::CodedInputStream::PushLimit(a2, v19);
      v37 = *((_DWORD *)a2 + 13);
      v30 = __OFSUB__(v37--, 1);
      *((_DWORD *)a2 + 13) = v37;
      if (v37 < 0 != v30)
        goto LABEL_131;
      v38 = v35;
      if (!CoreML::Specification::MILSpec::NamedValueType::MergePartialFromCodedStream(v17, a2, v36))
        goto LABEL_131;
      v39 = a2;
      v40 = v38;
      goto LABEL_100;
    case 4u:
      if (v10 != 34)
        goto LABEL_31;
      v20 = (int *)*((_QWORD *)this + 11);
      if (!v20)
      {
        v21 = *((_DWORD *)this + 20);
        v22 = *((_DWORD *)this + 21);
LABEL_84:
        if (v21 <= v22)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v71, v22 - v21 + 1);
          v20 = (int *)*((_QWORD *)this + 11);
        }
        v22 = *v20;
        goto LABEL_87;
      }
      v21 = *((_DWORD *)this + 20);
      v22 = *v20;
      if (v21 < *v20)
      {
        *((_DWORD *)this + 20) = v21 + 1;
        Aligned = *(CoreML::Specification::MILSpec::Block **)&v20[2 * v21 + 2];
        goto LABEL_93;
      }
      if (v22 == *((_DWORD *)this + 21))
        goto LABEL_84;
LABEL_87:
      *v20 = v22 + 1;
      v53 = *(google::protobuf::Arena **)v71;
      if (*(_QWORD *)v71)
      {
        CoreML::Specification::MILSpec::Block::Block(Aligned);
        v54 = google::protobuf::Arena::AllocateAligned(v53, 0, 24);
        *v54 = Aligned;
        v54[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
        v55 = (unint64_t *)((char *)v53 + 32);
        do
          v56 = __ldxr(v55);
        while (__stxr((unint64_t)v54, v55));
        v54[2] = (google::protobuf::Arena *)v56;
      }
      else
      {
        Aligned = (CoreML::Specification::MILSpec::Block *)operator new();
        CoreML::Specification::MILSpec::Block::Block(Aligned);
      }
      v57 = *((_QWORD *)this + 11);
      v58 = *((int *)this + 20);
      *((_DWORD *)this + 20) = v58 + 1;
      *(_QWORD *)(v57 + 8 * v58 + 8) = Aligned;
LABEL_93:
      v59 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v59 < 0)
      {
        v60 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v60 < 0)
          goto LABEL_131;
      }
      else
      {
        v60 = *v59;
        *(_QWORD *)a2 = v59 + 1;
      }
      v61 = google::protobuf::io::CodedInputStream::PushLimit(a2, v60);
      v62 = *((_DWORD *)a2 + 13);
      v30 = __OFSUB__(v62--, 1);
      *((_DWORD *)a2 + 13) = v62;
      if (v62 < 0 == v30)
      {
        v63 = v61;
        if (CoreML::Specification::MILSpec::Block::MergePartialFromCodedStream(Aligned, a2))
        {
          v39 = a2;
          v40 = v63;
LABEL_100:
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v39, v40))
            goto LABEL_36;
        }
      }
LABEL_131:
      result = 0;
      break;
    case 5u:
      if (v10 != 42)
        goto LABEL_31;
      v75 = v74;
      v76 = v73;
      memset(&__p, 0, sizeof(__p));
      v79 = 0;
      v15 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
      {
        v16 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v16 < 0)
          goto LABEL_127;
      }
      else
      {
        v16 = *v15;
        *(_QWORD *)a2 = v15 + 1;
      }
      v28 = google::protobuf::io::CodedInputStream::PushLimit(a2, v16);
      v29 = *((_DWORD *)a2 + 13);
      v30 = __OFSUB__(v29--, 1);
      *((_DWORD *)a2 + 13) = v29;
      if (v29 < 0 != v30
        || (v31 = v28,
            !google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream((uint64_t)&v75, (uint64_t)a2))|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v31))
      {
LABEL_127:
        v52 = 0;
        v27 = 6;
        goto LABEL_120;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = (unsigned int *)&__p;
      else
        v32 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v33 = __p.__r_.__value_.__r.__words[1];
      v34 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(v32, v33, 0, (uint64_t)"CoreML.Specification.MILSpec.Operation.AttributesEntry.key");
      goto LABEL_117;
    default:
      goto LABEL_31;
  }
  return result;
}

void sub_19C9EF1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  MEMORY[0x1A1AD6260](v23, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Operation::ByteSizeLong(CoreML::Specification::MILSpec::Operation *this)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v25[3];

  v2 = (_QWORD *)*((_QWORD *)this + 5);
  v3 = *(unsigned int *)v2;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v25, v2);
  v4 = 0;
  while (v25[0])
  {
    v5 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v25[0] + 3), *((_QWORD *)v25[0] + 3) + 24, *((google::protobuf::Arena **)this + 2));
    if (v4 != (_DWORD *)v5)
    {
      if (v4)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v4 = (_DWORD *)v5;
    }
    v6 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v4);
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v25);
  }
  if (v4)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  v7 = *((unsigned int *)this + 14);
  v8 = v3 + v7;
  if ((_DWORD)v7)
  {
    v9 = 0;
    do
    {
      v10 = CoreML::Specification::MILSpec::NamedValueType::ByteSizeLong(*(CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)this + 8) + 8 * v9 + 8));
      v8 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
      ++v9;
    }
    while ((_DWORD)v7 != v9);
  }
  v11 = *((unsigned int *)this + 20);
  v12 = v8 + v11;
  if ((_DWORD)v11)
  {
    v13 = 0;
    do
    {
      v14 = CoreML::Specification::MILSpec::Block::ByteSizeLong(*(CoreML::Specification::MILSpec::Block **)(*((_QWORD *)this + 11) + 8 * v13 + 8));
      v12 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      ++v13;
    }
    while ((_DWORD)v11 != v13);
  }
  v15 = (_QWORD *)*((_QWORD *)this + 15);
  v16 = *(unsigned int *)v15;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v25, v15);
  v17 = 0;
  v18 = v16 + v12;
  while (v25[0])
  {
    v19 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v25[0] + 3), *((_QWORD *)v25[0] + 3) + 24, *((google::protobuf::Arena **)this + 12));
    if (v17 != (_DWORD *)v19)
    {
      if (v17)
        (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
      v17 = (_DWORD *)v19;
    }
    v20 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v17);
    v18 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v25);
  }
  if (v17)
    (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
  v21 = *((_QWORD *)this + 16);
  v22 = *(unsigned __int8 *)(v21 + 23);
  if (*(char *)(v21 + 23) < 0)
  {
    if (!*(_QWORD *)(v21 + 8))
      goto LABEL_30;
  }
  else if (!*(_BYTE *)(v21 + 23))
  {
    goto LABEL_30;
  }
  v23 = *(_QWORD *)(v21 + 8);
  if ((v22 & 0x80u) == 0)
    v23 = v22;
  v18 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_30:
  *((_DWORD *)this + 34) = v18;
  return v18;
}

void sub_19C9EF498(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::MILSpec::Operation::SerializeWithCachedSizes(CoreML::Specification::MILSpec::Operation *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  google::protobuf::io::CodedOutputStream *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  google::protobuf::io::CodedOutputStream *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  int v28;
  int i;
  int v30;
  int j;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v35;
  google::protobuf::io::CodedOutputStream *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v41;
  unsigned __int8 *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  google::protobuf::io::CodedOutputStream *v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  unsigned __int8 *v52[3];

  result = *((_QWORD *)this + 16);
  if (*(char *)(result + 23) < 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      goto LABEL_7;
    result = *(_QWORD *)result;
    goto LABEL_6;
  }
  LODWORD(v7) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v7, 1, (uint64_t)"CoreML.Specification.MILSpec.Operation.type");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((_QWORD *)this + 16), a2);
  }
LABEL_7:
  v8 = (unint64_t *)*((_QWORD *)this + 5);
  v9 = *v8;
  if (!*v8)
    goto LABEL_50;
  if (*((_BYTE *)a2 + 26))
  {
    if (v9 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_30:
      v17 = operator new[]();
      google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v52, *((_QWORD **)this + 5));
      v18 = v52[0];
      if (v52[0])
      {
        v19 = 0;
        do
        {
          *(_QWORD *)(v17 + 8 * v19) = *((_QWORD *)v18 + 3);
          google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v52);
          ++v19;
          v18 = v52[0];
        }
        while (v52[0]);
      }
      else
      {
        v19 = 0;
      }
      v20 = 126 - 2 * __clz(v19);
      if (v19)
        v21 = v20;
      else
        v21 = 0;
      std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const**,false>(v17, (char *)(v17 + 8 * v19), v21, 1);
      if (v19)
      {
        v22 = 0;
        v23 = 0;
        do
        {
          v25 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v17 + 8 * v22), *(_QWORD *)(v17 + 8 * v22) + 24, *((google::protobuf::Arena **)this + 2));
          if (v23 != v25)
          {
            if (v23)
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            v23 = v25;
          }
          google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v23, a2, v24);
          v26 = *(unsigned int **)(v17 + 8 * v22);
          if (*((char *)v26 + 23) < 0)
          {
            v26 = *(unsigned int **)v26;
            v27 = *(_QWORD *)(*(_QWORD *)(v17 + 8 * v22) + 8);
          }
          else
          {
            LODWORD(v27) = *((unsigned __int8 *)v26 + 23);
          }
          google::protobuf::internal::WireFormatLite::VerifyUtf8String(v26, v27, 1, (uint64_t)"CoreML.Specification.MILSpec.Operation.InputsEntry.key");
          ++v22;
        }
        while (v19 != v22);
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      }
      result = MEMORY[0x1A1AD6248](v17, 0x60C8044C4A2DFLL);
      goto LABEL_50;
    }
  }
  else if (v9 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_30;
  }
  result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v52, v8);
  v11 = 0;
  while (v52[0])
  {
    v13 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v52[0] + 3), *((_QWORD *)v52[0] + 3) + 24, *((google::protobuf::Arena **)this + 2));
    if (v11 != v13)
    {
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v11 = v13;
    }
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v11, a2, v12);
    v14 = (unsigned int *)*((_QWORD *)v52[0] + 3);
    if (*((char *)v14 + 23) < 0)
    {
      v14 = *(unsigned int **)v14;
      v15 = *(_QWORD *)(*((_QWORD *)v52[0] + 3) + 8);
    }
    else
    {
      LODWORD(v15) = *((unsigned __int8 *)v14 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v14, v15, 1, (uint64_t)"CoreML.Specification.MILSpec.Operation.InputsEntry.key");
    result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v52);
  }
  if (v11)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
LABEL_50:
  v28 = *((_DWORD *)this + 14);
  if (v28)
  {
    for (i = 0; i != v28; ++i)
      result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*((_QWORD *)this + 8) + 8 * i + 8), a2, a4);
  }
  v30 = *((_DWORD *)this + 20);
  if (v30)
  {
    for (j = 0; j != v30; ++j)
      result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(*((_QWORD *)this + 11) + 8 * j + 8), a2, a4);
  }
  v32 = (unint64_t *)*((_QWORD *)this + 15);
  v33 = *v32;
  if (*v32)
  {
    if (*((_BYTE *)a2 + 26))
    {
      if (v33 >= 2 && *((_BYTE *)a2 + 27) != 0)
      {
LABEL_79:
        v41 = operator new[]();
        google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v52, *((_QWORD **)this + 15));
        v42 = v52[0];
        if (v52[0])
        {
          v43 = 0;
          do
          {
            *(_QWORD *)(v41 + 8 * v43) = *((_QWORD *)v42 + 3);
            google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v52);
            ++v43;
            v42 = v52[0];
          }
          while (v52[0]);
        }
        else
        {
          v43 = 0;
        }
        v44 = 126 - 2 * __clz(v43);
        if (v43)
          v45 = v44;
        else
          v45 = 0;
        std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**,false>(v41, (char *)(v41 + 8 * v43), v45, 1);
        if (v43)
        {
          v46 = 0;
          v47 = 0;
          do
          {
            v49 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v41 + 8 * v46), *(_QWORD *)(v41 + 8 * v46) + 24, *((google::protobuf::Arena **)this + 12));
            if (v47 != v49)
            {
              if (v47)
                (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
              v47 = v49;
            }
            google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, v47, a2, v48);
            v50 = *(unsigned int **)(v41 + 8 * v46);
            if (*((char *)v50 + 23) < 0)
            {
              v50 = *(unsigned int **)v50;
              v51 = *(_QWORD *)(*(_QWORD *)(v41 + 8 * v46) + 8);
            }
            else
            {
              LODWORD(v51) = *((unsigned __int8 *)v50 + 23);
            }
            google::protobuf::internal::WireFormatLite::VerifyUtf8String(v50, v51, 1, (uint64_t)"CoreML.Specification.MILSpec.Operation.AttributesEntry.key");
            ++v46;
          }
          while (v43 != v46);
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
        }
        return MEMORY[0x1A1AD6248](v41, 0x60C8044C4A2DFLL);
      }
    }
    else if (v33 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
      goto LABEL_79;
    }
    result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v52, v32);
    v35 = 0;
    while (v52[0])
    {
      v37 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v52[0] + 3), *((_QWORD *)v52[0] + 3) + 24, *((google::protobuf::Arena **)this + 12));
      if (v35 != v37)
      {
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v35 = v37;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, v35, a2, v36);
      v38 = (unsigned int *)*((_QWORD *)v52[0] + 3);
      if (*((char *)v38 + 23) < 0)
      {
        v38 = *(unsigned int **)v38;
        v39 = *(_QWORD *)(*((_QWORD *)v52[0] + 3) + 8);
      }
      else
      {
        LODWORD(v39) = *((unsigned __int8 *)v38 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v38, v39, 1, (uint64_t)"CoreML.Specification.MILSpec.Operation.AttributesEntry.key");
      result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v52);
    }
    if (v35)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  return result;
}

void sub_19C9EF9D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1A1AD6248](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Operation::GetCachedSize(CoreML::Specification::MILSpec::Operation *this)
{
  return *((unsigned int *)this + 34);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL4 v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _QWORD *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  char *v97;

  v6 = (char *)result;
LABEL_2:
  v94 = a2 - 8;
  v90 = a2 - 24;
  v91 = a2 - 16;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = a2 - v7;
    v10 = (a2 - v7) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(_QWORD **)v94;
        v41 = *(_QWORD **)v7;
        result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v94, *(_QWORD **)v7);
        if ((_DWORD)result)
        {
          *(_QWORD *)v7 = v40;
          *(_QWORD *)v94 = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v94);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v94);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v7 + 3, (_QWORD **)v94);
      default:
        if (v9 <= 191)
        {
          v42 = v7 + 8;
          v44 = v7 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v7;
              do
              {
                v48 = *(_QWORD **)v46;
                v47 = (_QWORD *)*((_QWORD *)v46 + 1);
                v46 = v42;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v47, v48);
                if ((_DWORD)result)
                {
                  v49 = v45;
                  while (1)
                  {
                    *(_QWORD *)&v7[v49 + 8] = v48;
                    if (!v49)
                      break;
                    v48 = *(_QWORD **)&v7[v49 - 8];
                    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v47, v48);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v7[v49 + 8];
                      goto LABEL_73;
                    }
                  }
                  v50 = v7;
LABEL_73:
                  *(_QWORD *)v50 = v47;
                }
                v42 = v46 + 8;
                v45 += 8;
              }
              while (v46 + 8 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v86 = *(_QWORD **)v8;
              v85 = (_QWORD *)*((_QWORD *)v8 + 1);
              v8 = v42;
              result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v85, v86);
              if ((_DWORD)result)
              {
                v87 = v8;
                do
                {
                  *(_QWORD *)v87 = v86;
                  v86 = (_QWORD *)*((_QWORD *)v87 - 2);
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v85, v86);
                  v87 -= 8;
                }
                while ((result & 1) != 0);
                *(_QWORD *)v87 = v85;
              }
              v42 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v97 = v7;
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            v88 = a2;
            v89 = a2 - v7;
            do
            {
              v53 = v52;
              if (v9 >= 16 && v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v97[8 * v54];
                v56 = 2 * v52 + 2;
                v95 = v52;
                if (v56 >= v10)
                {
                  v58 = *(_QWORD **)v55;
                }
                else
                {
                  v57 = *(_QWORD **)v55;
                  v58 = (_QWORD *)*((_QWORD *)v55 + 1);
                  v59 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v55, v58);
                  if (v59)
                    v55 += 8;
                  else
                    v58 = v57;
                  if (v59)
                    v54 = v56;
                }
                v60 = &v97[8 * v53];
                v61 = *(_QWORD **)v60;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v58, *(_QWORD **)v60);
                v9 = v89;
                if ((result & 1) == 0)
                {
                  do
                  {
                    v62 = v55;
                    *(_QWORD *)v60 = v58;
                    if (v51 < v54)
                      break;
                    v63 = (2 * v54) | 1;
                    v55 = &v97[8 * v63];
                    v64 = 2 * v54 + 2;
                    if (v64 >= v10)
                    {
                      v58 = *(_QWORD **)v55;
                      v54 = (2 * v54) | 1;
                    }
                    else
                    {
                      v58 = *(_QWORD **)v55;
                      v65 = (_QWORD *)*((_QWORD *)v55 + 1);
                      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v55, v65))
                      {
                        v58 = v65;
                        v55 += 8;
                        v54 = v64;
                      }
                      else
                      {
                        v54 = v63;
                      }
                    }
                    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v58, v61);
                    v60 = v62;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v62 = v61;
                  a2 = v88;
                  v9 = v89;
                  v53 = v95;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v66 = (unint64_t)v9 >> 3;
            v67 = v97;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = v66 - 2;
              v93 = *(_QWORD **)v67;
              if (v66 < 2)
                v70 = v66 - 1;
              v71 = v70 >> 1;
              do
              {
                v72 = &v67[8 * v69 + 8];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 >= v66)
                {
                  v77 = *(_QWORD **)v72;
                  v69 = (2 * v69) | 1;
                }
                else
                {
                  v75 = *(_QWORD **)v72;
                  v76 = *(_QWORD **)&v67[8 * v69 + 16];
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v72, v76);
                  if ((_DWORD)result)
                    v77 = v76;
                  else
                    v77 = v75;
                  if ((_DWORD)result)
                  {
                    v72 += 8;
                    v69 = v74;
                  }
                  else
                  {
                    v69 = v73;
                  }
                }
                *(_QWORD *)v67 = v77;
                v67 = v72;
              }
              while (v69 <= v71);
              a2 = v68 - 8;
              if (v72 == v68 - 8)
              {
                *(_QWORD *)v72 = v93;
              }
              else
              {
                *(_QWORD *)v72 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v93;
                v78 = v72 - v97 + 8;
                if (v78 >= 9)
                {
                  v79 = (unint64_t)((v78 >> 3) - 2) >> 1;
                  v80 = &v97[8 * v79];
                  v81 = *(_QWORD **)v80;
                  v82 = *(_QWORD **)v72;
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v80, *(_QWORD **)v72);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v83 = v80;
                      *(_QWORD *)v72 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v97[8 * v79];
                      v81 = *(_QWORD **)v80;
                      result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v80, v82);
                      v72 = v83;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v83 = v82;
                  }
                }
              }
              v84 = v66-- <= 2;
              v67 = v97;
            }
            while (!v84);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7[8 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12, (_QWORD **)v7, (_QWORD **)v94);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v12, (_QWORD **)v94);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 1, (_QWORD **)v12 - 1, (_QWORD **)v91);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 2, (_QWORD **)&v7[8 * v11 + 8], (_QWORD **)v90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12 - 1, (_QWORD **)v12, (_QWORD **)&v7[8 * v11 + 8]);
          v13 = *(_QWORD **)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD **)v7;
        v15 = v7;
        if ((a4 & 1) == 0)
        {
          v15 = v7;
          if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*((_QWORD **)v7 - 1), *(_QWORD **)v7))
          {
            result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, *(_QWORD **)v94);
            if ((result & 1) != 0)
            {
              do
              {
                v30 = (_QWORD *)*((_QWORD *)v7 + 1);
                v7 += 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v30);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v31 = v7 + 8;
              do
              {
                v7 = v31;
                if (v31 >= a2)
                  break;
                v31 += 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, *(_QWORD **)v7);
              }
              while (!(_DWORD)result);
            }
            v32 = a2;
            if (v7 < a2)
            {
              v32 = a2;
              do
              {
                v33 = (_QWORD *)*((_QWORD *)v32 - 1);
                v32 -= 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v33);
              }
              while ((result & 1) != 0);
            }
            v34 = a2;
            if (v7 < v32)
            {
              v35 = *(_QWORD **)v7;
              v36 = *(_QWORD **)v32;
              do
              {
                *(_QWORD *)v7 = v36;
                *(_QWORD *)v32 = v35;
                do
                {
                  v37 = (_QWORD *)*((_QWORD *)v7 + 1);
                  v7 += 8;
                  v35 = v37;
                }
                while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v37));
                do
                {
                  v38 = (_QWORD *)*((_QWORD *)v32 - 1);
                  v32 -= 8;
                  v36 = v38;
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v38);
                }
                while ((result & 1) != 0);
              }
              while (v7 < v32);
            }
            v39 = v7 - 8;
            a2 = v34;
            if (v7 - 8 != v8)
              *(_QWORD *)v8 = *(_QWORD *)v39;
            a4 = 0;
            *(_QWORD *)v39 = v14;
            continue;
          }
        }
        do
        {
          v16 = v15;
          v18 = (_QWORD *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v17 = v18;
        }
        while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v18, v14));
        v96 = a3;
        v19 = a2;
        if (v16 == v8)
        {
          v19 = a2;
          do
          {
            if (v15 >= v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v21, v14));
        }
        else
        {
          do
          {
            v20 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v20, v14));
        }
        v6 = v8;
        v22 = a2;
        if (v15 < v19)
        {
          v23 = *(_QWORD **)v19;
          v24 = v15;
          v25 = v19;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v17;
            do
            {
              v16 = v24;
              v26 = (_QWORD *)*((_QWORD *)v24 + 1);
              v24 += 8;
              v17 = v26;
            }
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v26, v14));
            do
            {
              v27 = (_QWORD *)*((_QWORD *)v25 - 1);
              v25 -= 8;
              v23 = v27;
            }
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v27, v14));
          }
          while (v24 < v25);
        }
        if (v16 != v6)
          *(_QWORD *)v6 = *(_QWORD *)v16;
        *(_QWORD *)v16 = v14;
        v28 = v15 >= v19;
        a2 = v22;
        a3 = v96;
        if (!v28)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const**,false>(v6, v16, v96, a4 & 1);
          a4 = 0;
          v7 = v16 + 8;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const**>((_QWORD **)v6, (_QWORD **)v16);
        v7 = v16 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const**>((_QWORD **)v16 + 1, (_QWORD **)v22);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v16;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(uint64_t a1, uint64_t a2, google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)result = &off_1E3D59F18;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_19CB39696);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E3D5AAE8;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E3D5AAE8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *(_QWORD *)(result + 24);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 + 24);
    if ((int)v4 >= 1)
    {
      v5 = (uint64_t *)(*(_QWORD *)(v3 + 32) + 8);
      do
      {
        v6 = *v5++;
        result = CoreML::Specification::MILSpec::Argument_Binding::clear_binding(v6);
        --v4;
      }
      while (v4);
      *(_DWORD *)(v3 + 24) = 0;
    }
  }
  *(_DWORD *)(v1 + 40) &= 0xFFFFFFFC;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::IsInitialized()
{
  return 1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  google::protobuf::Arena *v7;
  CoreML::Specification::MILSpec::Argument *Aligned;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  const CoreML::Specification::MILSpec::Argument *v12;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(__int128 **)(a1 + 16) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!*(_QWORD *)(a1 + 24))
      {
        v7 = *(google::protobuf::Arena **)(a1 + 32);
        if (v7)
        {
          CoreML::Specification::MILSpec::Argument::Argument(Aligned);
          v9 = google::protobuf::Arena::AllocateAligned(v7, 0, 24);
          *v9 = Aligned;
          v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>;
          v10 = (unint64_t *)((char *)v7 + 32);
          do
            v11 = __ldxr(v10);
          while (__stxr((unint64_t)v9, v10));
          v9[2] = (google::protobuf::Arena *)v11;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Argument *)operator new();
          CoreML::Specification::MILSpec::Argument::Argument(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v12 = (const CoreML::Specification::MILSpec::Argument *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      CoreML::Specification::MILSpec::Argument::MergeFrom(*(CoreML::Specification::MILSpec::Argument **)(a1 + 24), v12);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

void sub_19C9F0538(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  unint64_t TagFallback;
  __int128 *v8;
  uint64_t result;
  int v10;
  char *v11;
  CoreML::Specification::MILSpec::Argument *Aligned;
  google::protobuf::Arena *v13;
  google::protobuf::Arena **v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  int VarintSizeAsIntFallback;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;

  v5 = (google::protobuf::Arena **)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *(char **)this;
        if (*(_QWORD *)this >= *((_QWORD *)this + 1))
        {
          LODWORD(TagFallback) = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *(_QWORD *)this = v6 + 1;
            goto LABEL_7;
          }
        }
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 10)
          break;
        *(_DWORD *)(a1 + 40) |= 1u;
        v8 = *(__int128 **)(a1 + 16);
        if (v8 == &google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v8 = *(__int128 **)(a1 + 16);
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)this, (std::string *)v8);
        if (!(_DWORD)result)
          return result;
        v10 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v10;
        v11 = *(char **)this;
        if (*(_QWORD *)this < *((_QWORD *)this + 1) && *v11 == 18)
        {
          *(_QWORD *)this = v11 + 1;
          goto LABEL_20;
        }
      }
      if ((_DWORD)TagFallback != 18)
        break;
      v10 = *(_DWORD *)(a1 + 40);
LABEL_20:
      *(_DWORD *)(a1 + 40) = v10 | 2;
      Aligned = *(CoreML::Specification::MILSpec::Argument **)(a1 + 24);
      if (!Aligned)
      {
        v13 = *(google::protobuf::Arena **)(a1 + 32);
        if (v13)
        {
          CoreML::Specification::MILSpec::Argument::Argument(Aligned);
          v14 = google::protobuf::Arena::AllocateAligned(v13, 0, 24);
          *v14 = Aligned;
          v14[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>;
          v15 = (unint64_t *)((char *)v13 + 32);
          do
            v16 = __ldxr(v15);
          while (__stxr((unint64_t)v14, v15));
          v14[2] = (google::protobuf::Arena *)v16;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Argument *)operator new();
          CoreML::Specification::MILSpec::Argument::Argument(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v17 = *(char **)this;
      if (*(_QWORD *)this >= *((_QWORD *)this + 1) || *v17 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(this);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v17;
        *(_QWORD *)this = v17 + 1;
      }
      v19 = google::protobuf::io::CodedInputStream::PushLimit(this, VarintSizeAsIntFallback);
      v21 = *((_DWORD *)this + 13);
      v22 = __OFSUB__(v21--, 1);
      *((_DWORD *)this + 13) = v21;
      if (v21 < 0 != v22)
        return 0;
      v23 = v19;
      result = CoreML::Specification::MILSpec::Argument::MergePartialFromCodedStream(Aligned, this, v20);
      if (!(_DWORD)result)
        return result;
      result = google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(this, v23);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*(_QWORD *)this == *((_QWORD *)this + 1)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(this, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

void sub_19C9F07BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  CoreML::Specification::MILSpec::Argument *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (CoreML::Specification::MILSpec::Argument *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = CoreML::Specification::MILSpec::Argument::ByteSizeLong(v4);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  google::protobuf::internal::WireFormatLite *v5;
  const google::protobuf::MessageLite *v6;
  google::protobuf::io::CodedOutputStream *v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  v5 = (google::protobuf::internal::WireFormatLite *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(v5, a2, v6, v7);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_DWORD *)(v6 + 8);
    v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    return v5 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(_DWORD *)(v4 + 40) + ((9 * (__clz(*(_DWORD *)(v4 + 40) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v6 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v7 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v6, a3 + 1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v7 = 18;
  v9 = v7 + 1;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
  if (v10 < 0x80)
  {
    LOBYTE(v11) = v10;
  }
  else
  {
    do
    {
      *v9++ = v10 | 0x80;
      v11 = v10 >> 7;
      v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
  }
  *v9 = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 128))(v8, a2, v9 + 1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t CoreML::Specification::MILSpec::Argument::ByteSizeLong(CoreML::Specification::MILSpec::Argument *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::MILSpec::Argument_Binding::ByteSizeLong(*(CoreML::Specification::MILSpec::Argument_Binding **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::ByteSizeLong(CoreML::Specification::MILSpec::Argument_Binding *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *((_DWORD *)this + 7);
  if (v2 == 2)
  {
    v7 = CoreML::Specification::MILSpec::Value::ByteSizeLong(*((CoreML::Specification::MILSpec::Value **)this + 2));
    v6 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
  }
  else
  {
    if (v2 != 1)
    {
      result = 0;
      goto LABEL_9;
    }
    v3 = *((_QWORD *)this + 2);
    v4 = *(unsigned __int8 *)(v3 + 23);
    v5 = *(_QWORD *)(v3 + 8);
    if ((v4 & 0x80u) == 0)
      v5 = v4;
    v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
  }
  result = v6 + 1;
LABEL_9:
  *((_DWORD *)this + 6) = result;
  return result;
}

CoreML::Specification::MILSpec::Argument *CoreML::Specification::MILSpec::Argument::Argument(CoreML::Specification::MILSpec::Argument *this)
{
  *(_QWORD *)this = &off_1E3D58AD8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::Argument *)&CoreML::Specification::MILSpec::_Argument_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_19C9F0BD8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t CoreML::Specification::MILSpec::Argument::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Argument *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int *v12;
  int v13;
  int v14;
  CoreML::Specification::MILSpec::Argument_Binding *Aligned;
  google::protobuf::Arena *v16;
  google::protobuf::Arena **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int VarintSizeAsIntFallback;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t result;

  v5 = (CoreML::Specification::MILSpec::Argument *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
        }
        v14 = *v12;
        goto LABEL_26;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 < *v12)
      {
        *((_DWORD *)this + 6) = v13 + 1;
        Aligned = *(CoreML::Specification::MILSpec::Argument_Binding **)&v12[2 * v13 + 2];
        goto LABEL_32;
      }
      if (v14 == *((_DWORD *)this + 7))
        goto LABEL_23;
LABEL_26:
      *v12 = v14 + 1;
      v16 = *(google::protobuf::Arena **)v5;
      if (*(_QWORD *)v5)
      {
        CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding(Aligned);
        v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
        *v17 = Aligned;
        v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument_Binding>;
        v18 = (unint64_t *)((char *)v16 + 32);
        do
          v19 = __ldxr(v18);
        while (__stxr((unint64_t)v17, v18));
        v17[2] = (google::protobuf::Arena *)v19;
      }
      else
      {
        Aligned = (CoreML::Specification::MILSpec::Argument_Binding *)operator new();
        CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding(Aligned);
      }
      v20 = *((_QWORD *)this + 4);
      v21 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v21 + 1;
      *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
LABEL_32:
      v22 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v22;
        *(_QWORD *)a2 = v22 + 1;
      }
      v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v26 = *((_DWORD *)a2 + 13);
      v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 == v27)
      {
        v28 = v24;
        result = CoreML::Specification::MILSpec::Argument_Binding::MergePartialFromCodedStream(Aligned, a2, v25);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C9F0E44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Argument_Binding *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  std::string *v11;
  std::string *v12;
  uint64_t result;
  int v15;
  std::string *v16;
  std::string *v17;
  std::string::size_type size;
  char *v19;
  int VarintSizeAsIntFallback;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;

  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_20;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *(_QWORD *)a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_20;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 18)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 2)
        {
          v12 = *v5;
        }
        else
        {
          CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v12 = (std::string *)operator new();
          CoreML::Specification::MILSpec::Value::Value((CoreML::Specification::MILSpec::Value *)v12);
          *v5 = v12;
        }
        v19 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v19;
          *(_QWORD *)a2 = v19 + 1;
        }
        v21 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v23 = *((_DWORD *)a2 + 13);
        v24 = __OFSUB__(v23--, 1);
        *((_DWORD *)a2 + 13) = v23;
        if (v23 < 0 == v24)
        {
          v25 = v21;
          result = CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream((CoreML::Specification::MILSpec::Value *)v12, a2, v22);
          if (!(_DWORD)result)
            return result;
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v25))
            continue;
        }
        return 0;
      }
      if (v8 >> 3 != 1 || v8 != 10)
        break;
      if (*((_DWORD *)this + 7) != 1)
      {
        CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_27:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
        goto LABEL_28;
      }
      v11 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_27;
LABEL_28:
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v11);
      if (!(_DWORD)result)
        return result;
      v15 = *((_DWORD *)this + 7);
      v16 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
      if (v15 == 1)
        v16 = *v5;
      if (SHIBYTE(v16->__r_.__value_.__r.__words[2]) < 0)
        v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
      v17 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
      if (v15 == 1)
        v17 = *v5;
      if (SHIBYTE(v17->__r_.__value_.__r.__words[2]) < 0)
        size = v17->__r_.__value_.__l.__size_;
      else
        LODWORD(size) = HIBYTE(v17->__r_.__value_.__r.__words[2]);
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v16, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Argument.Binding.name"))return 0;
    }
LABEL_20:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C9F10C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::clear_binding(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_DWORD *)(this + 28);
  if (v2 == 2)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  else if (v2 == 1)
  {
    v3 = *(_QWORD *)(this + 16);
    if ((__int128 *)v3 != &google::protobuf::internal::fixed_address_empty_string && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      this = MEMORY[0x1A1AD6260](v3, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::MILSpec::Argument_Binding *CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding(CoreML::Specification::MILSpec::Argument_Binding *this)
{
  *(_QWORD *)this = &off_1E3D58158;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Argument_Binding *)&CoreML::Specification::MILSpec::_Argument_Binding_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_19C9F11BC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument_Binding>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void CoreML::Specification::MILSpec::Argument::MergeFrom(CoreML::Specification::MILSpec::Argument *this, const CoreML::Specification::MILSpec::Argument *a2)
{
  uint64_t v4;
  int v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  const CoreML::Specification::MILSpec::Argument_Binding **v12;
  CoreML::Specification::MILSpec::Argument_Binding **v13;
  const CoreML::Specification::MILSpec::Argument_Binding *v14;
  const CoreML::Specification::MILSpec::Argument_Binding *v15;
  CoreML::Specification::MILSpec::Argument_Binding *v16;
  google::protobuf::Arena *v17;
  int v18;
  uint64_t v19;
  CoreML::Specification::MILSpec::Argument_Binding **v20;
  const CoreML::Specification::MILSpec::Argument_Binding **v21;
  const CoreML::Specification::MILSpec::Argument_Binding *v22;
  CoreML::Specification::MILSpec::Argument_Binding *Aligned;
  google::protobuf::Arena **v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  int *v28;
  uint64_t v29;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v29 = *((_QWORD *)a2 + 4);
    v6 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Argument *)((char *)this + 16), v5);
    v7 = v6;
    v8 = **((int **)this + 4);
    v9 = *((int *)this + 6);
    v10 = v8 - v9;
    if ((int)v8 - (int)v9 >= v5)
      v11 = v5;
    else
      v11 = v10;
    if ((int)v11 >= 1)
    {
      v12 = (const CoreML::Specification::MILSpec::Argument_Binding **)(v29 + 8);
      v13 = (CoreML::Specification::MILSpec::Argument_Binding **)v6;
      do
      {
        v15 = *v12++;
        v14 = v15;
        v16 = *v13++;
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Argument_Binding>::Merge(v14, v16);
        --v11;
      }
      while (v11);
    }
    if (v10 < v5)
    {
      v17 = (google::protobuf::Arena *)*((_QWORD *)this + 2);
      v18 = v9 + v5 - v8;
      v19 = 8 * v8 - 8 * v9;
      v20 = (CoreML::Specification::MILSpec::Argument_Binding **)((char *)v7 + v19);
      v21 = (const CoreML::Specification::MILSpec::Argument_Binding **)(v19 + v29 + 8);
      do
      {
        v22 = *v21;
        if (v17)
        {
          CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding(Aligned);
          v24 = google::protobuf::Arena::AllocateAligned(v17, 0, 24);
          *v24 = Aligned;
          v24[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument_Binding>;
          v25 = (unint64_t *)((char *)v17 + 32);
          do
            v26 = __ldxr(v25);
          while (__stxr((unint64_t)v24, v25));
          v24[2] = (google::protobuf::Arena *)v26;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Argument_Binding *)operator new();
          CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding(Aligned);
        }
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Argument_Binding>::Merge(v22, Aligned);
        *v20++ = Aligned;
        ++v21;
        --v18;
      }
      while (v18);
    }
    v27 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v27;
    v28 = (int *)*((_QWORD *)this + 4);
    if (*v28 < v27)
      *v28 = v27;
  }
}

void sub_19C9F1380(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Argument_Binding>::Merge(const CoreML::Specification::MILSpec::Argument_Binding *a1, CoreML::Specification::MILSpec::Argument_Binding *a2)
{
  CoreML::Specification::MILSpec::Argument_Binding::MergeFrom(a2, a1);
}

void CoreML::Specification::MILSpec::Argument_Binding::MergeFrom(CoreML::Specification::MILSpec::Argument_Binding *this, const CoreML::Specification::MILSpec::Argument_Binding *a2)
{
  uint64_t v4;
  int v5;
  const std::string *v6;
  std::string *v7;
  CoreML::Specification::MILSpec::Value *v8;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v9;
  const CoreML::Specification::MILSpec::Value *v10;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 7);
  if (v5 == 2)
  {
    if (*((_DWORD *)this + 7) == 2)
    {
      v8 = (CoreML::Specification::MILSpec::Value *)*((_QWORD *)this + 2);
    }
    else
    {
      CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      v8 = (CoreML::Specification::MILSpec::Value *)operator new();
      v9 = CoreML::Specification::MILSpec::Value::Value(v8);
      *((_QWORD *)this + 2) = v8;
      if (*((_DWORD *)a2 + 7) != 2)
      {
        CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v9);
        v10 = (const CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_;
        goto LABEL_16;
      }
    }
    v10 = (const CoreML::Specification::MILSpec::Value *)*((_QWORD *)a2 + 2);
LABEL_16:
    CoreML::Specification::MILSpec::Value::MergeFrom(v8, v10);
    return;
  }
  if (v5 == 1)
  {
    v6 = (const std::string *)*((_QWORD *)a2 + 2);
    if (*((_DWORD *)this + 7) == 1)
    {
      v7 = (std::string *)*((_QWORD *)this + 2);
      if (v7 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        std::string::operator=(v7, v6);
        return;
      }
    }
    else
    {
      CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, (uint64_t)v6);
  }
}

void sub_19C9F14EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D59FC0;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
  {
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
    v2 = a1[3];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::value(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  const char *v6;
  int v7;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
  {
    v5 = 3;
    v6 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    v7 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v2 = *(_QWORD *)(a1 + 8);
  }
  v3 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(a1 + 24))
    return *(_QWORD *)(a1 + 24);
  else
    return v3;
}

void sub_19C9F162C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const**>(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD **v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(_QWORD **)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(_QWORD **)((char *)a1 + v14 - 16);
        v16 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v12, v13);
        v14 = v15;
        if (!v16)
        {
          v17 = (_QWORD **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t CoreML::Specification::MILSpec::Block::ByteSizeLong(CoreML::Specification::MILSpec::Block *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v23[3];

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::MILSpec::NamedValueType::ByteSizeLong(*(CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((unsigned int *)this + 12);
  v7 = v4 + v6;
  if ((int)v6 >= 1)
  {
    v8 = (uint64_t *)(*((_QWORD *)this + 7) + 8);
    do
    {
      v9 = *v8++;
      v10 = *(unsigned __int8 *)(v9 + 23);
      v11 = *(_QWORD *)(v9 + 8);
      if ((v10 & 0x80u) == 0)
        v11 = v10;
      v7 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
      --v6;
    }
    while (v6);
  }
  v12 = *((unsigned int *)this + 18);
  v13 = v7 + v12;
  if ((_DWORD)v12)
  {
    v14 = 0;
    do
    {
      v15 = CoreML::Specification::MILSpec::Operation::ByteSizeLong(*(CoreML::Specification::MILSpec::Operation **)(*((_QWORD *)this + 10) + 8 * v14 + 8));
      v13 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6);
      ++v14;
    }
    while ((_DWORD)v12 != v14);
  }
  v16 = (_QWORD *)*((_QWORD *)this + 14);
  v17 = *(unsigned int *)v16;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v23, v16);
  v18 = 0;
  v19 = v17 + v13;
  while (v23[0])
  {
    v20 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v23[0] + 3), *((_QWORD *)v23[0] + 3) + 24, *((google::protobuf::Arena **)this + 11));
    if (v18 != (_DWORD *)v20)
    {
      if (v18)
        (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
      v18 = (_DWORD *)v20;
    }
    v21 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v18);
    v19 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v23);
  }
  if (v18)
    (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
  *((_DWORD *)this + 30) = v19;
  return v19;
}

void sub_19C9F1998(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

CoreML::Specification::MILSpec::NamedValueType *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>(google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  int *v2;
  int v3;
  int v4;
  CoreML::Specification::MILSpec::NamedValueType *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena **v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (int *)*((_QWORD *)this + 2);
  if (!v2)
  {
    v3 = *((_DWORD *)this + 2);
    v4 = *((_DWORD *)this + 3);
LABEL_6:
    if (v3 <= v4)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(this, v4 - v3 + 1);
      v2 = (int *)*((_QWORD *)this + 2);
    }
    v4 = *v2;
    goto LABEL_9;
  }
  v3 = *((_DWORD *)this + 2);
  v4 = *v2;
  if (v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::MILSpec::NamedValueType **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3))
    goto LABEL_6;
LABEL_9:
  *v2 = v4 + 1;
  v6 = *(google::protobuf::Arena **)this;
  if (*(_QWORD *)this)
  {
    CoreML::Specification::MILSpec::NamedValueType::NamedValueType(Aligned);
    v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
    *v7 = Aligned;
    v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::NamedValueType>;
    v8 = (unint64_t *)((char *)v6 + 32);
    do
      v9 = __ldxr(v8);
    while (__stxr((unint64_t)v7, v8));
    v7[2] = (google::protobuf::Arena *)v9;
  }
  else
  {
    Aligned = (CoreML::Specification::MILSpec::NamedValueType *)operator new();
    CoreML::Specification::MILSpec::NamedValueType::NamedValueType(Aligned);
  }
  v10 = *((_QWORD *)this + 2);
  v11 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = Aligned;
  return Aligned;
}

void sub_19C9F1ADC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Block::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Block *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  google::protobuf::internal::RepeatedPtrFieldBase *v6;
  google::protobuf::internal::RepeatedPtrFieldBase *v7;
  google::protobuf::internal::RepeatedPtrFieldBase *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::NamedValueType *v13;
  char *v14;
  int VarintSizeAsIntFallback;
  int *v16;
  int v17;
  int v18;
  CoreML::Specification::MILSpec::Operation *v19;
  char *v20;
  int v21;
  int *v22;
  int v23;
  int v24;
  std::string *Aligned;
  BOOL v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int *p_p;
  int v37;
  _BOOL4 v38;
  BOOL v39;
  google::protobuf::Arena *v40;
  google::protobuf::Arena **v41;
  unint64_t *v42;
  unint64_t v43;
  google::protobuf::Arena *v44;
  google::protobuf::Arena **v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  char *v61;
  _QWORD v62[2];
  void *__p;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v61 = (char *)this + 88;
  v5 = (char *)this + 96;
  v6 = (CoreML::Specification::MILSpec::Block *)((char *)this + 64);
  v7 = (CoreML::Specification::MILSpec::Block *)((char *)this + 40);
  v8 = (CoreML::Specification::MILSpec::Block *)((char *)this + 16);
  while (1)
  {
    v9 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      break;
    v10 = *v9;
    if (*v9 < 1)
      goto LABEL_7;
    *(_QWORD *)a2 = v9 + 1;
    v11 = v10 | 0x100000000;
    if ((v11 & 0x100000000) == 0)
      goto LABEL_25;
LABEL_8:
    switch(v11 >> 3)
    {
      case 1u:
        if (v11 != 10)
          goto LABEL_25;
        v13 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>(v8);
        v14 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v14;
          *(_QWORD *)a2 = v14 + 1;
        }
        v28 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v30 = *((_DWORD *)a2 + 13);
        v31 = __OFSUB__(v30--, 1);
        *((_DWORD *)a2 + 13) = v30;
        if (v30 < 0 != v31)
          return 0;
        v32 = v28;
        if (!CoreML::Specification::MILSpec::NamedValueType::MergePartialFromCodedStream(v13, a2, v29))
          return 0;
        goto LABEL_82;
      case 2u:
        if (v11 != 18)
          goto LABEL_25;
        v22 = (int *)*((_QWORD *)this + 7);
        if (!v22)
        {
          v23 = *((_DWORD *)this + 12);
          v24 = *((_DWORD *)this + 13);
LABEL_67:
          if (v23 <= v24)
          {
            google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v7, v24 - v23 + 1);
            v22 = (int *)*((_QWORD *)this + 7);
          }
          v24 = *v22;
          goto LABEL_70;
        }
        v23 = *((_DWORD *)this + 12);
        v24 = *v22;
        if (v23 < *v22)
        {
          *((_DWORD *)this + 12) = v23 + 1;
          Aligned = *(std::string **)&v22[2 * v23 + 2];
          goto LABEL_86;
        }
        if (v24 == *((_DWORD *)this + 13))
          goto LABEL_67;
LABEL_70:
        *v22 = v24 + 1;
        v44 = *(google::protobuf::Arena **)v7;
        if (*(_QWORD *)v7)
        {
          Aligned->__r_.__value_.__l.__size_ = 0;
          Aligned->__r_.__value_.__r.__words[2] = 0;
          Aligned->__r_.__value_.__r.__words[0] = 0;
          v45 = google::protobuf::Arena::AllocateAligned(v44, 0, 24);
          *v45 = (google::protobuf::Arena *)Aligned;
          v45[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
          v46 = (unint64_t *)((char *)v44 + 32);
          do
            v47 = __ldxr(v46);
          while (__stxr((unint64_t)v45, v46));
          v45[2] = (google::protobuf::Arena *)v47;
        }
        else
        {
          Aligned = (std::string *)operator new();
          Aligned->__r_.__value_.__l.__size_ = 0;
          Aligned->__r_.__value_.__r.__words[2] = 0;
          Aligned->__r_.__value_.__r.__words[0] = 0;
        }
        v55 = *((_QWORD *)this + 7);
        v56 = *((int *)this + 12);
        *((_DWORD *)this + 12) = v56 + 1;
        *(_QWORD *)(v55 + 8 * v56 + 8) = Aligned;
LABEL_86:
        if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, Aligned))
          return 0;
        v57 = *((_QWORD *)this + 7);
        v58 = *(unsigned int **)(v57 + 8 * *((int *)this + 12));
        if (*((char *)v58 + 23) < 0)
        {
          v58 = *(unsigned int **)v58;
          v59 = *(_QWORD *)(*(_QWORD *)(v57 + 8 * *((int *)this + 12)) + 8);
        }
        else
        {
          LODWORD(v59) = *((unsigned __int8 *)v58 + 23);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v58, v59, 0, (uint64_t)"CoreML.Specification.MILSpec.Block.outputs"))return 0;
        break;
      case 3u:
        if (v11 != 26)
          goto LABEL_25;
        v16 = (int *)*((_QWORD *)this + 10);
        if (!v16)
        {
          v17 = *((_DWORD *)this + 18);
          v18 = *((_DWORD *)this + 19);
LABEL_59:
          if (v17 <= v18)
          {
            google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v6, v18 - v17 + 1);
            v16 = (int *)*((_QWORD *)this + 10);
          }
          v18 = *v16;
          goto LABEL_62;
        }
        v17 = *((_DWORD *)this + 18);
        v18 = *v16;
        if (v17 < *v16)
        {
          *((_DWORD *)this + 18) = v17 + 1;
          v19 = *(CoreML::Specification::MILSpec::Operation **)&v16[2 * v17 + 2];
          goto LABEL_76;
        }
        if (v18 == *((_DWORD *)this + 19))
          goto LABEL_59;
LABEL_62:
        *v16 = v18 + 1;
        v40 = *(google::protobuf::Arena **)v6;
        if (*(_QWORD *)v6)
        {
          CoreML::Specification::MILSpec::Operation::Operation(v19);
          v41 = google::protobuf::Arena::AllocateAligned(v40, 0, 24);
          *v41 = v19;
          v41[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Operation>;
          v42 = (unint64_t *)((char *)v40 + 32);
          do
            v43 = __ldxr(v42);
          while (__stxr((unint64_t)v41, v42));
          v41[2] = (google::protobuf::Arena *)v43;
        }
        else
        {
          v19 = (CoreML::Specification::MILSpec::Operation *)operator new();
          CoreML::Specification::MILSpec::Operation::Operation(v19);
        }
        v48 = *((_QWORD *)this + 10);
        v49 = *((int *)this + 18);
        *((_DWORD *)this + 18) = v49 + 1;
        *(_QWORD *)(v48 + 8 * v49 + 8) = v19;
LABEL_76:
        v50 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v50 < 0)
        {
          v51 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v51 < 0)
            return 0;
        }
        else
        {
          v51 = *v50;
          *(_QWORD *)a2 = v50 + 1;
        }
        v52 = google::protobuf::io::CodedInputStream::PushLimit(a2, v51);
        v54 = *((_DWORD *)a2 + 13);
        v31 = __OFSUB__(v54--, 1);
        *((_DWORD *)a2 + 13) = v54;
        if (v54 < 0 != v31)
          return 0;
        v32 = v52;
        if (!CoreML::Specification::MILSpec::Operation::MergePartialFromCodedStream(v19, a2, v53))
          return 0;
LABEL_82:
        if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v32))
          return 0;
        break;
      case 4u:
        if (v11 != 34)
          goto LABEL_25;
        v62[0] = v61;
        v62[1] = v5;
        v64 = 0;
        v65 = 0;
        __p = 0;
        v66 = 0;
        v20 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
        {
          v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v21 < 0)
            goto LABEL_92;
        }
        else
        {
          v21 = *v20;
          *(_QWORD *)a2 = v20 + 1;
        }
        v33 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
        v34 = *((_DWORD *)a2 + 13);
        v31 = __OFSUB__(v34--, 1);
        *((_DWORD *)a2 + 13) = v34;
        if (v34 < 0 != v31
          || (v35 = v33,
              !google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream((uint64_t)v62, (uint64_t)a2))|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v35))
        {
LABEL_92:
          v39 = 0;
          v27 = 6;
          goto LABEL_50;
        }
        if (v65 >= 0)
          p_p = (unsigned int *)&__p;
        else
          p_p = (unsigned int *)__p;
        if (v65 >= 0)
          v37 = HIBYTE(v65);
        else
          v37 = v64;
        v38 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v37, 0, (uint64_t)"CoreML.Specification.MILSpec.Block.AttributesEntry.key");
        v39 = v38;
        if (v38)
          v27 = 0;
        else
          v27 = 6;
LABEL_50:
        if (v66)
          (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
        if (SHIBYTE(v65) < 0)
          operator delete(__p);
        if (!v39)
          goto LABEL_31;
        break;
      default:
        goto LABEL_25;
    }
LABEL_30:
    v27 = 0;
LABEL_31:
    if (v27)
      return 0;
  }
  LODWORD(v10) = 0;
LABEL_7:
  TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
  v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
  if ((v11 & 0x100000000) != 0)
    goto LABEL_8;
LABEL_25:
  if ((_DWORD)v11)
    v26 = (v11 & 7) == 4;
  else
    v26 = 1;
  if (!v26)
  {
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v11, a3))return 0;
    goto LABEL_30;
  }
  return 1;
}

void sub_19C9F2074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  MEMORY[0x1A1AD6260](v19, 0x10A1C40B3FB24A3);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Operation>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::NamedValueType>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::operator[](uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  google::protobuf::Arena *v12;
  std::string *Aligned;
  std::string::__raw *v14;
  __int128 v15;
  google::protobuf::Arena **v16;
  google::protobuf::Arena *v17;
  google::protobuf::Arena *v18;
  std::string *v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  std::string __p;
  std::string::size_type v25;
  uint64_t v26[4];
  _QWORD v27[4];

  v4 = *(_QWORD **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v25 = 0;
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v27, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  v6 = v27[0];
  if (v27[0])
    goto LABEL_18;
  v7 = v4[1];
  v8 = *v4 + 1;
  v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      v21 = 2 * v7;
LABEL_37:
      google::protobuf::Map<std::string,std::string>::InnerMap::Resize((uint64_t)v4, v21, v5);
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      v11 = v26[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    v22 = 0;
    v23 = ((5 * v8) >> 2) + 1;
    do
      ++v22;
    while (v23 << v22 < v9);
    v21 = v7 >> v22 <= 8 ? 8 : v7 >> v22;
    if (v21 != v7)
      goto LABEL_37;
  }
  v11 = v27[3];
LABEL_11:
  v12 = (google::protobuf::Arena *)v4[5];
  if (v12)
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E0DE4EE8], 40);
  else
    Aligned = (std::string *)operator new(0x28uLL);
  v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v25;
  google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v26, (uint64_t)v4, v11, v14);
  ++*v4;
  v6 = v26[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (*(_QWORD *)a1)
    {
      v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E0DE4EE8], 72);
      v17 = *(google::protobuf::Arena **)a1;
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
      v18 = *(google::protobuf::Arena **)a1;
      CoreML::Specification::MILSpec::Argument::Argument((CoreML::Specification::MILSpec::Argument *)(v16 + 3));
      google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Argument>((google::protobuf::Arena **)v18, (google::protobuf::Arena *)(v16 + 3));
      std::string::operator=((std::string *)v16, (const std::string *)a2);
    }
    else
    {
      v19 = (std::string *)operator new();
      v16 = (google::protobuf::Arena **)v19;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v19->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      CoreML::Specification::MILSpec::Argument::Argument((CoreML::Specification::MILSpec::Argument *)(v16 + 3));
    }
    *(_QWORD *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_19C9F2360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1A1AD6260](v14, 0x10B2C40C743746ALL);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase(_QWORD *a1, unsigned __int8 *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  result = *(double *)&v6;
  if ((_QWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    *(_QWORD *)&result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase((uint64_t)&v6, a1, &v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::MILSpec::Argument *v6;
  CoreML::Specification::MILSpec::Argument *Aligned;
  google::protobuf::Arena *v8;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v4 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(**(google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(CoreML::Specification::MILSpec::Argument **)(a1 + 40);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::MILSpec::Argument **)(v4 + 24);
  if (!Aligned)
  {
    v8 = *(google::protobuf::Arena **)(v4 + 32);
    if (v8)
    {
      CoreML::Specification::MILSpec::Argument::Argument(Aligned);
      v9 = google::protobuf::Arena::AllocateAligned(v8, 0, 24);
      *v9 = Aligned;
      v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>;
      v10 = (unint64_t *)((char *)v8 + 32);
      do
        v11 = __ldxr(v10);
      while (__stxr((unint64_t)v9, v10));
      v9[2] = (google::protobuf::Arena *)v11;
    }
    else
    {
      Aligned = (CoreML::Specification::MILSpec::Argument *)operator new();
      CoreML::Specification::MILSpec::Argument::Argument(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
  }
  CoreML::Specification::MILSpec::Argument::Swap((uint64_t)Aligned, v6);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase(*(_QWORD **)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v12 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v12 + 40) |= 1u;
  v13 = *(_QWORD *)(v12 + 16);
  if ((__int128 *)v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v12 + 16), *(google::protobuf::Arena ***)(v12 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
    v13 = *(_QWORD *)(v12 + 16);
  }
  if (*(char *)(v13 + 23) < 0)
    operator delete(*(void **)v13);
  v14 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v13 = v14;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v15)
    google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
    *(_QWORD *)(a1 + 48) = 0;
  return v15;
}

void sub_19C9F25C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(google::protobuf::Arena *a1)
{
  uint64_t result;

  if (a1)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E3D5AAE8;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  google::protobuf::Arena **v3;
  uint64_t v4;
  CoreML::Specification::MILSpec::Argument *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena **v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  v3 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::operator[](*(_QWORD *)(a1 + 8), a1 + 16);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::MILSpec::Argument **)(v4 + 24);
  if (!Aligned)
  {
    v6 = *(google::protobuf::Arena **)(v4 + 32);
    if (v6)
    {
      CoreML::Specification::MILSpec::Argument::Argument(Aligned);
      v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
      *v7 = Aligned;
      v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>;
      v8 = (unint64_t *)((char *)v6 + 32);
      do
        v9 = __ldxr(v8);
      while (__stxr((unint64_t)v7, v8));
      v7[2] = (google::protobuf::Arena *)v9;
    }
    else
    {
      Aligned = (CoreML::Specification::MILSpec::Argument *)operator new();
      CoreML::Specification::MILSpec::Argument::Argument(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
    v3 = *(google::protobuf::Arena ***)(a1 + 40);
  }
  return CoreML::Specification::MILSpec::Argument::Swap((uint64_t)v3, Aligned);
}

void sub_19C9F274C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Argument::Swap(uint64_t this, CoreML::Specification::MILSpec::Argument *a2)
{
  uint64_t v2;

  if (a2 != (CoreML::Specification::MILSpec::Argument *)this)
  {
    v2 = *(_QWORD *)(this + 32);
    *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v2;
  }
  return this;
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Argument>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

void CoreML::Specification::MILSpec::Operation::MergeFrom(CoreML::Specification::MILSpec::Operation *this, const CoreML::Specification::MILSpec::Operation *a2)
{
  const CoreML::Specification::MILSpec::Operation *v2;
  uint64_t v4;
  unsigned __int8 *i;
  uint64_t v6;
  const CoreML::Specification::MILSpec::Argument *v7;
  google::protobuf::Arena **v8;
  google::protobuf::Arena **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  CoreML::Specification::MILSpec::NamedValueType **v14;
  unsigned int *v15;
  signed int v16;
  signed int *v17;
  int v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  const CoreML::Specification::MILSpec::Block **v25;
  CoreML::Specification::MILSpec::Block **v26;
  const CoreML::Specification::MILSpec::Block *v27;
  const CoreML::Specification::MILSpec::Block *v28;
  CoreML::Specification::MILSpec::Block *v29;
  google::protobuf::Arena *v30;
  int v31;
  uint64_t v32;
  CoreML::Specification::MILSpec::Block **v33;
  const CoreML::Specification::MILSpec::Block **v34;
  const CoreML::Specification::MILSpec::Block *v35;
  CoreML::Specification::MILSpec::Block *Aligned;
  google::protobuf::Arena **v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  int *v41;
  uint64_t v42;
  std::string *v43;
  std::string **v44;
  std::string *v45;
  const CoreML::Specification::MILSpec::Operation *v46;
  uint64_t v47;
  unsigned __int8 *v48[3];

  v2 = a2;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v48, *((_QWORD **)v2 + 5));
  for (i = v48[0]; v48[0]; i = v48[0])
  {
    v6 = *((_QWORD *)i + 3);
    v7 = (const CoreML::Specification::MILSpec::Argument *)(v6 + 24);
    v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::operator[]((uint64_t)this + 24, v6);
    if (v7 != (const CoreML::Specification::MILSpec::Argument *)v8)
    {
      v9 = v8;
      v10 = *((unsigned int *)v8 + 6);
      if ((int)v10 >= 1)
      {
        v11 = (uint64_t *)((char *)v8[4] + 8);
        do
        {
          v12 = *v11++;
          CoreML::Specification::MILSpec::Argument_Binding::clear_binding(v12);
          --v10;
        }
        while (v10);
        *((_DWORD *)v9 + 6) = 0;
      }
      CoreML::Specification::MILSpec::Argument::MergeFrom((CoreML::Specification::MILSpec::Argument *)v9, v7);
    }
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v48);
  }
  v13 = *((_DWORD *)v2 + 14);
  if (v13)
  {
    v14 = (CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)v2 + 8) + 8);
    v15 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Operation *)((char *)this + 48), *((_DWORD *)v2 + 14));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>((google::protobuf::Arena **)this + 6, (CoreML::Specification::MILSpec::NamedValueType **)v15, v14, v13, **((_DWORD **)this + 8) - *((_DWORD *)this + 14));
    v16 = *((_DWORD *)this + 14) + v13;
    *((_DWORD *)this + 14) = v16;
    v17 = (signed int *)*((_QWORD *)this + 8);
    if (*v17 < v16)
      *v17 = v16;
  }
  v18 = *((_DWORD *)v2 + 20);
  if (v18)
  {
    v46 = v2;
    v47 = *((_QWORD *)v2 + 11);
    v19 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Operation *)((char *)this + 72), v18);
    v20 = v19;
    v21 = **((int **)this + 11);
    v22 = *((int *)this + 20);
    v23 = v21 - v22;
    if ((int)v21 - (int)v22 >= v18)
      v24 = v18;
    else
      v24 = v23;
    if ((int)v24 >= 1)
    {
      v25 = (const CoreML::Specification::MILSpec::Block **)(v47 + 8);
      v26 = (CoreML::Specification::MILSpec::Block **)v19;
      do
      {
        v28 = *v25++;
        v27 = v28;
        v29 = *v26++;
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Block>::Merge(v27, v29);
        --v24;
      }
      while (v24);
    }
    if (v23 < v18)
    {
      v30 = (google::protobuf::Arena *)*((_QWORD *)this + 9);
      v31 = v22 + v18 - v21;
      v32 = 8 * v21 - 8 * v22;
      v33 = (CoreML::Specification::MILSpec::Block **)((char *)v20 + v32);
      v34 = (const CoreML::Specification::MILSpec::Block **)(v32 + v47 + 8);
      do
      {
        v35 = *v34;
        if (v30)
        {
          CoreML::Specification::MILSpec::Block::Block(Aligned);
          v37 = google::protobuf::Arena::AllocateAligned(v30, 0, 24);
          *v37 = Aligned;
          v37[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
          v38 = (unint64_t *)((char *)v30 + 32);
          do
            v39 = __ldxr(v38);
          while (__stxr((unint64_t)v37, v38));
          v37[2] = (google::protobuf::Arena *)v39;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Block *)operator new();
          CoreML::Specification::MILSpec::Block::Block(Aligned);
        }
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Block>::Merge(v35, Aligned);
        *v33++ = Aligned;
        ++v34;
        --v31;
      }
      while (v31);
    }
    v40 = *((_DWORD *)this + 20) + v18;
    *((_DWORD *)this + 20) = v40;
    v41 = (int *)*((_QWORD *)this + 11);
    v2 = v46;
    if (*v41 < v40)
      *v41 = v40;
  }
  google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 96, (uint64_t)v2 + 96);
  v42 = *((_QWORD *)v2 + 16);
  if (*(char *)(v42 + 23) < 0)
  {
    if (!*(_QWORD *)(v42 + 8))
      return;
  }
  else if (!*(_BYTE *)(v42 + 23))
  {
    return;
  }
  v45 = (std::string *)*((_QWORD *)this + 16);
  v44 = (std::string **)((char *)this + 128);
  v43 = v45;
  if (v45 != (std::string *)v42)
  {
    if (v43 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v44, v42);
    else
      std::string::operator=(v43, (const std::string *)v42);
  }
}

void sub_19C9F2B1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>(google::protobuf::Arena **a1, CoreML::Specification::MILSpec::NamedValueType **a2, CoreML::Specification::MILSpec::NamedValueType **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  CoreML::Specification::MILSpec::NamedValueType **v11;
  CoreML::Specification::MILSpec::NamedValueType **v12;
  CoreML::Specification::MILSpec::NamedValueType *v13;
  CoreML::Specification::MILSpec::NamedValueType *v14;
  CoreML::Specification::MILSpec::NamedValueType *v15;
  BOOL v16;
  int v17;
  google::protobuf::Arena *v18;
  CoreML::Specification::MILSpec::NamedValueType **v19;
  CoreML::Specification::MILSpec::NamedValueType **v20;
  CoreML::Specification::MILSpec::NamedValueType *v21;
  CoreML::Specification::MILSpec::NamedValueType *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::NamedValueType>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20;
      if (v18)
      {
        CoreML::Specification::MILSpec::NamedValueType::NamedValueType(Aligned);
        v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
        *v23 = Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::NamedValueType>;
        v24 = (unint64_t *)((char *)v18 + 32);
        do
          v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
      }
      else
      {
        Aligned = (CoreML::Specification::MILSpec::NamedValueType *)operator new();
        CoreML::Specification::MILSpec::NamedValueType::NamedValueType(Aligned);
      }
      google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::NamedValueType>::Merge(v21, Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
}

void sub_19C9F2C5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Block>::Merge(const CoreML::Specification::MILSpec::Block *a1, CoreML::Specification::MILSpec::Block *a2)
{
  return CoreML::Specification::MILSpec::Block::MergeFrom(a2, a1);
}

void *CoreML::Specification::MILSpec::Block::MergeFrom(CoreML::Specification::MILSpec::Block *this, const CoreML::Specification::MILSpec::Block *a2)
{
  const CoreML::Specification::MILSpec::Block *v2;
  uint64_t v4;
  unsigned int v5;
  CoreML::Specification::MILSpec::NamedValueType **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  unsigned int v10;
  const std::string **v11;
  unsigned int *v12;
  signed int v13;
  signed int *v14;
  int v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  CoreML::Specification::MILSpec::Operation **v22;
  CoreML::Specification::MILSpec::Operation **v23;
  CoreML::Specification::MILSpec::Operation *v24;
  CoreML::Specification::MILSpec::Operation *v25;
  CoreML::Specification::MILSpec::Operation *v26;
  google::protobuf::Arena *v27;
  int v28;
  uint64_t v29;
  CoreML::Specification::MILSpec::Operation **v30;
  CoreML::Specification::MILSpec::Operation **v31;
  CoreML::Specification::MILSpec::Operation *v32;
  CoreML::Specification::MILSpec::Operation *Aligned;
  google::protobuf::Arena **v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  int *v38;
  const CoreML::Specification::MILSpec::Block *v40;
  uint64_t v41;

  v2 = a2;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)v2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)v2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Block *)((char *)this + 16), *((_DWORD *)v2 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>((google::protobuf::Arena **)this + 2, (CoreML::Specification::MILSpec::NamedValueType **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (signed int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_DWORD *)v2 + 12);
  if (v10)
  {
    v11 = (const std::string **)(*((_QWORD *)v2 + 7) + 8);
    v12 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Block *)((char *)this + 40), *((_DWORD *)v2 + 12));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)((char *)this + 40), (std::string **)v12, v11, v10, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    v13 = *((_DWORD *)this + 12) + v10;
    *((_DWORD *)this + 12) = v13;
    v14 = (signed int *)*((_QWORD *)this + 7);
    if (*v14 < v13)
      *v14 = v13;
  }
  v15 = *((_DWORD *)v2 + 18);
  if (v15)
  {
    v40 = v2;
    v41 = *((_QWORD *)v2 + 10);
    v16 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Block *)((char *)this + 64), v15);
    v17 = v16;
    v18 = **((int **)this + 10);
    v19 = *((int *)this + 18);
    v20 = v18 - v19;
    if ((int)v18 - (int)v19 >= v15)
      v21 = v15;
    else
      v21 = v20;
    if ((int)v21 >= 1)
    {
      v22 = (CoreML::Specification::MILSpec::Operation **)(v41 + 8);
      v23 = (CoreML::Specification::MILSpec::Operation **)v16;
      do
      {
        v25 = *v22++;
        v24 = v25;
        v26 = *v23++;
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Operation>::Merge(v24, v26);
        --v21;
      }
      while (v21);
    }
    if (v20 < v15)
    {
      v27 = (google::protobuf::Arena *)*((_QWORD *)this + 8);
      v28 = v19 + v15 - v18;
      v29 = 8 * v18 - 8 * v19;
      v30 = (CoreML::Specification::MILSpec::Operation **)((char *)v17 + v29);
      v31 = (CoreML::Specification::MILSpec::Operation **)(v29 + v41 + 8);
      do
      {
        v32 = *v31;
        if (v27)
        {
          CoreML::Specification::MILSpec::Operation::Operation(Aligned);
          v34 = google::protobuf::Arena::AllocateAligned(v27, 0, 24);
          *v34 = Aligned;
          v34[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Operation>;
          v35 = (unint64_t *)((char *)v27 + 32);
          do
            v36 = __ldxr(v35);
          while (__stxr((unint64_t)v34, v35));
          v34[2] = (google::protobuf::Arena *)v36;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Operation *)operator new();
          CoreML::Specification::MILSpec::Operation::Operation(Aligned);
        }
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Operation>::Merge(v32, Aligned);
        *v30++ = Aligned;
        ++v31;
        --v28;
      }
      while (v28);
    }
    v37 = *((_DWORD *)this + 18) + v15;
    *((_DWORD *)this + 18) = v37;
    v38 = (int *)*((_QWORD *)this + 10);
    v2 = v40;
    if (*v38 < v37)
      *v38 = v37;
  }
  return google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 88, (uint64_t)v2 + 88);
}

void sub_19C9F2F08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40B3FB24A3);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Operation>::Merge(CoreML::Specification::MILSpec::Operation *a1, CoreML::Specification::MILSpec::Operation *this)
{
  CoreML::Specification::MILSpec::Operation::MergeFrom(this, a1);
}

void google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::NamedValueType>::Merge(CoreML::Specification::MILSpec::NamedValueType *a1, CoreML::Specification::MILSpec::NamedValueType *this)
{
  CoreML::Specification::MILSpec::NamedValueType::MergeFrom(this, a1);
}

double CoreML::Specification::MILSpec::Block::Clear(CoreML::Specification::MILSpec::Block *this)
{
  uint64_t v2;
  CoreML::Specification::MILSpec::NamedValueType **v3;
  CoreML::Specification::MILSpec::NamedValueType *v4;
  uint64_t v5;
  CoreML::Specification::MILSpec::Operation **v6;
  CoreML::Specification::MILSpec::Operation *v7;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      CoreML::Specification::MILSpec::NamedValueType::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 40);
  v5 = *((unsigned int *)this + 18);
  if ((int)v5 >= 1)
  {
    v6 = (CoreML::Specification::MILSpec::Operation **)(*((_QWORD *)this + 10) + 8);
    do
    {
      v7 = *v6++;
      CoreML::Specification::MILSpec::Operation::Clear(v7);
      --v5;
    }
    while (v5);
    *((_DWORD *)this + 18) = 0;
  }
  return google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((uint64_t)this + 96);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Operation>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Operation>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Operation>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::MILSpec::Argument::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Argument");
}

CoreML::Specification::MILSpec::Argument *CoreML::Specification::MILSpec::Argument::New(CoreML::Specification::MILSpec::Argument *this)
{
  return CoreML::Specification::MILSpec::Argument::New(this, 0);
}

CoreML::Specification::MILSpec::Argument *CoreML::Specification::MILSpec::Argument::New(CoreML::Specification::MILSpec::Argument *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Argument *v3;

  v3 = (CoreML::Specification::MILSpec::Argument *)operator new();
  CoreML::Specification::MILSpec::Argument::Argument(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Argument>(a2, v3);
  return v3;
}

void sub_19C9F3184(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Argument::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v4 = *v3++;
      this = CoreML::Specification::MILSpec::Argument_Binding::clear_binding(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::Argument::IsInitialized(CoreML::Specification::MILSpec::Argument *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Argument::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::Argument::GetCachedSize(CoreML::Specification::MILSpec::Argument *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Argument>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Argument>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Argument>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::Argument_Binding::~Argument_Binding(CoreML::Specification::MILSpec::Argument_Binding *this)
{
  CoreML::Specification::MILSpec::Argument_Binding::~Argument_Binding(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D58158;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::Argument_Binding::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Argument.Binding");
}

CoreML::Specification::MILSpec::Argument_Binding *CoreML::Specification::MILSpec::Argument_Binding::New(CoreML::Specification::MILSpec::Argument_Binding *this)
{
  return CoreML::Specification::MILSpec::Argument_Binding::New(this, 0);
}

CoreML::Specification::MILSpec::Argument_Binding *CoreML::Specification::MILSpec::Argument_Binding::New(CoreML::Specification::MILSpec::Argument_Binding *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Argument_Binding *v3;

  v3 = (CoreML::Specification::MILSpec::Argument_Binding *)operator new();
  CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Argument_Binding>(a2, v3);
  return v3;
}

void sub_19C9F3354(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::IsInitialized(CoreML::Specification::MILSpec::Argument_Binding *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  __int128 *v9;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    v7 = *(unsigned int **)(this + 16);
    if (*((char *)v7 + 23) < 0)
    {
      v7 = *(unsigned int **)v7;
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8);
    }
    else
    {
      LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (uint64_t)"CoreML.Specification.MILSpec.Argument.Binding.name");
    if (*(_DWORD *)(v5 + 28) == 1)
      v9 = *(__int128 **)(v5 + 16);
    else
      v9 = &google::protobuf::internal::fixed_address_empty_string;
    this = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, (uint64_t)v9, a2);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::GetCachedSize(CoreML::Specification::MILSpec::Argument_Binding *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Argument_Binding>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Argument_Binding>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Argument_Binding>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::MILSpec::Block::~Block(CoreML::Specification::MILSpec::Block *this)
{
  CoreML::Specification::MILSpec::Block::~Block(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D58910;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((_QWORD *)this + 12);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::Block::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Block");
}

CoreML::Specification::MILSpec::Block *CoreML::Specification::MILSpec::Block::New(CoreML::Specification::MILSpec::Block *this)
{
  return CoreML::Specification::MILSpec::Block::New(this, 0);
}

CoreML::Specification::MILSpec::Block *CoreML::Specification::MILSpec::Block::New(CoreML::Specification::MILSpec::Block *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Block *v3;

  v3 = (CoreML::Specification::MILSpec::Block *)operator new();
  CoreML::Specification::MILSpec::Block::Block(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Block>(a2, v3);
  return v3;
}

void sub_19C9F356C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Block::IsInitialized(CoreML::Specification::MILSpec::Block *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Block::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  int j;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  google::protobuf::io::CodedOutputStream *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  google::protobuf::io::CodedOutputStream *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned __int8 *v35[3];

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  v8 = *(unsigned int *)(v5 + 48);
  if ((int)v8 >= 1)
  {
    v9 = -v8;
    v10 = 1;
    do
    {
      v11 = *(unsigned int **)(*(_QWORD *)(v5 + 56) + 8 * v10);
      if (*((char *)v11 + 23) < 0)
      {
        v11 = *(unsigned int **)v11;
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10) + 8);
      }
      else
      {
        LODWORD(v12) = *((unsigned __int8 *)v11 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (uint64_t)"CoreML.Specification.MILSpec.Block.outputs");
      this = google::protobuf::internal::WireFormatLite::WriteString(2u, *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10++), a2);
    }
    while (v9 + v10 != 1);
  }
  v13 = *(_DWORD *)(v5 + 72);
  if (v13)
  {
    for (j = 0; j != v13; ++j)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * j + 8), a2, a4);
  }
  v15 = *(unint64_t **)(v5 + 112);
  v16 = *v15;
  if (*v15)
  {
    if (*((_BYTE *)a2 + 26))
    {
      if (v16 >= 2 && *((_BYTE *)a2 + 27) != 0)
      {
LABEL_36:
        v24 = operator new[]();
        google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v35, *(_QWORD **)(v5 + 112));
        v25 = v35[0];
        if (v35[0])
        {
          v26 = 0;
          do
          {
            *(_QWORD *)(v24 + 8 * v26) = *((_QWORD *)v25 + 3);
            google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v35);
            ++v26;
            v25 = v35[0];
          }
          while (v35[0]);
        }
        else
        {
          v26 = 0;
        }
        v27 = 126 - 2 * __clz(v26);
        if (v26)
          v28 = v27;
        else
          v28 = 0;
        std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**,false>(v24, (char *)(v24 + 8 * v26), v28, 1);
        if (v26)
        {
          v29 = 0;
          v30 = 0;
          do
          {
            v32 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v24 + 8 * v29), *(_QWORD *)(v24 + 8 * v29) + 24, *(google::protobuf::Arena **)(v5 + 88));
            if (v30 != v32)
            {
              if (v30)
                (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
              v30 = v32;
            }
            google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v30, a2, v31);
            v33 = *(unsigned int **)(v24 + 8 * v29);
            if (*((char *)v33 + 23) < 0)
            {
              v33 = *(unsigned int **)v33;
              v34 = *(_QWORD *)(*(_QWORD *)(v24 + 8 * v29) + 8);
            }
            else
            {
              LODWORD(v34) = *((unsigned __int8 *)v33 + 23);
            }
            google::protobuf::internal::WireFormatLite::VerifyUtf8String(v33, v34, 1, (uint64_t)"CoreML.Specification.MILSpec.Block.AttributesEntry.key");
            ++v29;
          }
          while (v26 != v29);
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        }
        return MEMORY[0x1A1AD6248](v24, 0x60C8044C4A2DFLL);
      }
    }
    else if (v16 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
      goto LABEL_36;
    }
    this = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v35, v15);
    v18 = 0;
    while (v35[0])
    {
      v20 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v35[0] + 3), *((_QWORD *)v35[0] + 3) + 24, *(google::protobuf::Arena **)(v5 + 88));
      if (v18 != v20)
      {
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        v18 = v20;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v18, a2, v19);
      v21 = (unsigned int *)*((_QWORD *)v35[0] + 3);
      if (*((char *)v21 + 23) < 0)
      {
        v21 = *(unsigned int **)v21;
        v22 = *(_QWORD *)(*((_QWORD *)v35[0] + 3) + 8);
      }
      else
      {
        LODWORD(v22) = *((unsigned __int8 *)v21 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v21, v22, 1, (uint64_t)"CoreML.Specification.MILSpec.Block.AttributesEntry.key");
      this = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v35);
    }
    if (v18)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  return this;
}

void sub_19C9F38C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1A1AD6248](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Block::GetCachedSize(CoreML::Specification::MILSpec::Block *this)
{
  return *((unsigned int *)this + 30);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Block>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Block>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Block>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::clear((uint64_t)a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x1A1AD6260](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::clear(uint64_t a1)
{
  double result;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v3, *(_QWORD **)(a1 + 16));
  while ((_QWORD)v3)
  {
    v5 = v3;
    v6 = v4;
    *(_QWORD *)&result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase((uint64_t)&v3, (_QWORD *)a1, &v5).n128_u64[0];
  }
  return result;
}

__n128 google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BOOL4 v8;
  unint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  __n128 result;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;

  if (!*a2)
  {
    v6 = *(_QWORD *)(*a3 + 24);
    if (v6)
    {
      CoreML::Specification::MILSpec::Block::~Block((CoreML::Specification::MILSpec::Block *)(v6 + 24));
      if (*(char *)(v6 + 23) < 0)
        operator delete(*(void **)v6);
      MEMORY[0x1A1AD6260](v6, 0x10B2C4008C62E43);
    }
  }
  v18 = *(_OWORD *)a3;
  v19 = a3[2];
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(a3);
  v7 = (_QWORD *)a2[2];
  v20 = 0;
  v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v18, &v20);
  v9 = v19;
  v10 = (void **)v18;
  v11 = v7[4];
  v12 = *(_QWORD *)(v11 + 8 * v19);
  if (v8)
  {
    v13 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v18, *(_QWORD *)(v11 + 8 * v19));
LABEL_12:
    *(_QWORD *)(v7[4] + 8 * v9) = v13;
    goto LABEL_13;
  }
  v14 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v12, *(_QWORD **)(v20 + 32));
  if ((uint64_t *)(v12 + 8) != v14)
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v12, v14);
  if (!*(_QWORD *)(v12 + 24))
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(v7[5], (_QWORD **)v12);
    v13 = 0;
    *(_QWORD *)(v7[4] + ((8 * v9) | 8)) = 0;
    v9 &= ~1uLL;
    goto LABEL_12;
  }
LABEL_13:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v7, v10);
  --*v7;
  if (v9 == v7[3])
  {
    v16 = v7[1];
    if (v9 < v16)
    {
      v17 = v7[4];
      do
      {
        if (*(_QWORD *)(v17 + 8 * v9))
          break;
        v7[3] = ++v9;
      }
      while (v16 != v9);
    }
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  return result;
}

void CoreML::Specification::MILSpec::Function::~Function(CoreML::Specification::MILSpec::Function *this)
{
  CoreML::Specification::MILSpec::Function::~Function(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E3D58B70;
  v2 = *((_QWORD *)this + 13);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((_QWORD *)this + 10);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::~Map((_QWORD *)this + 6);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::MILSpec::Function::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Function");
}

CoreML::Specification::MILSpec::Function *CoreML::Specification::MILSpec::Function::New(CoreML::Specification::MILSpec::Function *this)
{
  return CoreML::Specification::MILSpec::Function::New(this, 0);
}

CoreML::Specification::MILSpec::Function *CoreML::Specification::MILSpec::Function::New(CoreML::Specification::MILSpec::Function *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Function *v3;

  v3 = (CoreML::Specification::MILSpec::Function *)operator new();
  CoreML::Specification::MILSpec::Function::Function(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Function>(a2, v3);
  return v3;
}

void sub_19C9F3CAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MILSpec::Function::Clear(CoreML::Specification::MILSpec::Function *this)
{
  uint64_t v2;
  CoreML::Specification::MILSpec::NamedValueType **v3;
  CoreML::Specification::MILSpec::NamedValueType *v4;
  uint64_t v5;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      CoreML::Specification::MILSpec::NamedValueType::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::clear((uint64_t)this + 48);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((uint64_t)this + 80);
  v5 = *((_QWORD *)this + 13);
  if ((__int128 *)v5 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
}

uint64_t CoreML::Specification::MILSpec::Function::IsInitialized(CoreML::Specification::MILSpec::Function *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Function::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Function *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::Arena **v4;
  _QWORD *v5;
  std::string **v6;
  google::protobuf::internal::RepeatedPtrFieldBase *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int TagFallback;
  CoreML::Specification::MILSpec::NamedValueType *v12;
  char *v13;
  int VarintSizeAsIntFallback;
  char *v15;
  int v16;
  char *v17;
  int v18;
  std::string *v19;
  unsigned int *v20;
  std::string::size_type size;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  char *v28;
  uint64_t v29;
  CoreML::Specification::MILSpec::Block *v30;
  char *v31;
  int v32;
  uint64_t v33;
  __int128 *v34;
  int BeyondKeyValuePair;
  BOOL v36;
  int v37;
  int v38;
  int v39;
  unsigned int *v40;
  int v41;
  _BOOL4 v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int *p_p;
  int v52;
  _QWORD *v54;
  google::protobuf::Arena **v55;
  google::protobuf::Arena **v56;
  _QWORD *v57;
  std::string __p;
  google::protobuf::Arena **v59;
  uint64_t v60;

  v54 = (_QWORD *)((char *)this + 80);
  v55 = (google::protobuf::Arena **)((char *)this + 72);
  v4 = (google::protobuf::Arena **)((char *)this + 40);
  v5 = (_QWORD *)((char *)this + 48);
  v6 = (std::string **)((char *)this + 104);
  v7 = (CoreML::Specification::MILSpec::Function *)((char *)this + 16);
  while (1)
  {
    v8 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
    {
      LODWORD(v9) = 0;
    }
    else
    {
      v9 = *v8;
      if (*v8 >= 1)
      {
        *(_QWORD *)a2 = v8 + 1;
        v10 = v9 | 0x100000000;
        if ((v10 & 0x100000000) != 0)
          goto LABEL_8;
        goto LABEL_27;
      }
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
    v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v10 & 0x100000000) != 0)
    {
LABEL_8:
      switch(v10 >> 3)
      {
        case 1u:
          if (v10 != 10)
            break;
          v12 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>(v7);
          v13 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v13 < 0)
          {
            VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v13;
            *(_QWORD *)a2 = v13 + 1;
          }
          v43 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
          v45 = *((_DWORD *)a2 + 13);
          v26 = __OFSUB__(v45--, 1);
          *((_DWORD *)a2 + 13) = v45;
          if (v45 < 0 == v26)
          {
            v46 = v43;
            if (CoreML::Specification::MILSpec::NamedValueType::MergePartialFromCodedStream(v12, a2, v44))
            {
              if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v46))
                goto LABEL_32;
            }
          }
          return 0;
        case 2u:
          if (v10 != 18)
            break;
          v19 = *v6;
          if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v19 = *v6;
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v19))
            return 0;
          v20 = (unsigned int *)*v6;
          if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
          {
            v20 = *(unsigned int **)v20;
            size = (*v6)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
          }
          if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v20, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Function.opset"))return 0;
          goto LABEL_32;
        case 3u:
          if (v10 != 26)
            break;
          v56 = v4;
          v57 = v5;
          memset(&__p, 0, sizeof(__p));
          v60 = 0;
          v15 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
          {
            v16 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v16 < 0)
              goto LABEL_104;
          }
          else
          {
            v16 = *v15;
            *(_QWORD *)a2 = v15 + 1;
          }
          v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, v16);
          v25 = *((_DWORD *)a2 + 13);
          v26 = __OFSUB__(v25--, 1);
          *((_DWORD *)a2 + 13) = v25;
          if (v25 < 0 != v26)
            goto LABEL_104;
          v27 = v24;
          v28 = *(char **)a2;
          if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && *v28 == 10)
          {
            *(_QWORD *)a2 = v28 + 1;
            if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, &__p))
              goto LABEL_104;
            if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) >= 1 && **(_BYTE **)a2 == 18)
            {
              v29 = *(_QWORD *)v57[2];
              v59 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[]((uint64_t)v57, (uint64_t)&__p);
              if (v29 != *(_QWORD *)v57[2])
              {
                google::protobuf::io::CodedInputStream::Skip(a2, 1u);
                v30 = (CoreML::Specification::MILSpec::Block *)v59;
                v31 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v31 < 0)
                {
                  v32 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v32 < 0)
                    goto LABEL_103;
                }
                else
                {
                  v32 = *v31;
                  *(_QWORD *)a2 = v31 + 1;
                }
                v47 = google::protobuf::io::CodedInputStream::PushLimit(a2, v32);
                v49 = *((_DWORD *)a2 + 13);
                v26 = __OFSUB__(v49--, 1);
                *((_DWORD *)a2 + 13) = v49;
                if (v49 < 0 != v26
                  || (v50 = v47,
                      !CoreML::Specification::MILSpec::Block::MergePartialFromCodedStream(v30, a2, v48))
                  || !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v50))
                {
LABEL_103:
                  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase(v57, (unsigned __int8 *)&__p);
                  goto LABEL_104;
                }
                if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1)
                  && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                {
                  *((_DWORD *)a2 + 8) = 0;
                  *((_BYTE *)a2 + 36) = 1;
                  goto LABEL_86;
                }
                BeyondKeyValuePair = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>>::ReadBeyondKeyValuePair((uint64_t)&v56, (uint64_t)a2);
                goto LABEL_85;
              }
            }
          }
          else
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            memset(&__p, 0, sizeof(__p));
          }
          v33 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*v56);
          if (v60 != v33)
          {
            if (v60)
              (*(void (**)(void))(*(_QWORD *)v60 + 8))();
            v60 = v33;
          }
          v34 = *(__int128 **)(v33 + 16);
          *(_DWORD *)(v33 + 40) |= 1u;
          if (v34 == &google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v33 + 16), *(google::protobuf::Arena ***)(v33 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v34 = *(__int128 **)(v33 + 16);
          }
          std::string::operator=((std::string *)v34, &__p);
          BeyondKeyValuePair = (*(uint64_t (**)(uint64_t, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v60 + 88))(v60, a2);
          if (BeyondKeyValuePair)
            google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>>::UseKeyAndValueFromEntry((uint64_t)&v56);
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60))
          {
            v60 = 0;
            if ((BeyondKeyValuePair & 1) == 0)
            {
              v36 = 0;
              v23 = 6;
              goto LABEL_99;
            }
            goto LABEL_86;
          }
LABEL_85:
          if (!BeyondKeyValuePair)
            goto LABEL_104;
LABEL_86:
          if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v27))
            goto LABEL_104;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = (unsigned int *)&__p;
          else
            p_p = (unsigned int *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v52 = __p.__r_.__value_.__r.__words[1];
          v42 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v52, 0, (uint64_t)"CoreML.Specification.MILSpec.Function.BlockSpecializationsEntry.key");
LABEL_94:
          v36 = v42;
          if (v42)
            v23 = 0;
          else
            v23 = 6;
LABEL_97:
          if (v60)
            (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
LABEL_99:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (!v36)
            goto LABEL_33;
          goto LABEL_32;
        case 4u:
          if (v10 != 34)
            break;
          v56 = v55;
          v57 = v54;
          memset(&__p, 0, sizeof(__p));
          v60 = 0;
          v17 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v17 < 0)
          {
            v18 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v18 < 0)
              goto LABEL_104;
          }
          else
          {
            v18 = *v17;
            *(_QWORD *)a2 = v17 + 1;
          }
          v37 = google::protobuf::io::CodedInputStream::PushLimit(a2, v18);
          v38 = *((_DWORD *)a2 + 13);
          v26 = __OFSUB__(v38--, 1);
          *((_DWORD *)a2 + 13) = v38;
          if (v38 < 0 != v26
            || (v39 = v37,
                !google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream((uint64_t)&v56, (uint64_t)a2))|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v39))
          {
LABEL_104:
            v36 = 0;
            v23 = 6;
            goto LABEL_97;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = (unsigned int *)&__p;
          else
            v40 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v41 = __p.__r_.__value_.__r.__words[1];
          v42 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(v40, v41, 0, (uint64_t)"CoreML.Specification.MILSpec.Function.AttributesEntry.key");
          goto LABEL_94;
        default:
          break;
      }
    }
LABEL_27:
    if (!(_DWORD)v10 || (v10 & 7) == 4)
      return 1;
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3))return 0;
LABEL_32:
    v23 = 0;
LABEL_33:
    if (v23)
      return 0;
  }
}

void sub_19C9F4364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 8))(a21);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::MILSpec::Function::ByteSizeLong(CoreML::Specification::MILSpec::Function *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v22[3];

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::MILSpec::NamedValueType::ByteSizeLong(*(CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = (_QWORD *)*((_QWORD *)this + 8);
  v7 = *(unsigned int *)v6;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v22, v6);
  v8 = 0;
  v9 = v7 + v4;
  while (v22[0])
  {
    v10 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v22[0] + 3), *((_QWORD *)v22[0] + 3) + 24, *((google::protobuf::Arena **)this + 5));
    if (v8 != (_DWORD *)v10)
    {
      if (v8)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      v8 = (_DWORD *)v10;
    }
    v11 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v8);
    v9 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v22);
  }
  if (v8)
    (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  v12 = (_QWORD *)*((_QWORD *)this + 12);
  v13 = *(unsigned int *)v12;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v22, v12);
  v14 = 0;
  v15 = v13 + v9;
  while (v22[0])
  {
    v16 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v22[0] + 3), *((_QWORD *)v22[0] + 3) + 24, *((google::protobuf::Arena **)this + 9));
    if (v14 != (_DWORD *)v16)
    {
      if (v14)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
      v14 = (_DWORD *)v16;
    }
    v17 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v14);
    v15 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v22);
  }
  if (v14)
    (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  v18 = *((_QWORD *)this + 13);
  v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0)
  {
    if (!*(_QWORD *)(v18 + 8))
      goto LABEL_29;
  }
  else if (!*(_BYTE *)(v18 + 23))
  {
    goto LABEL_29;
  }
  v20 = *(_QWORD *)(v18 + 8);
  if ((v19 & 0x80u) == 0)
    v20 = v19;
  v15 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_29:
  *((_DWORD *)this + 28) = v15;
  return v15;
}

void sub_19C9F45B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::MILSpec::Function::SerializeWithCachedSizes(CoreML::Specification::MILSpec::Function *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  int i;
  uint64_t result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  google::protobuf::io::CodedOutputStream *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  google::protobuf::io::CodedOutputStream *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v33;
  google::protobuf::io::CodedOutputStream *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v39;
  unsigned __int8 *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  google::protobuf::io::CodedOutputStream *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  unsigned __int8 *v50[3];

  v6 = *((_DWORD *)this + 6);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i + 8), a2, a4);
  }
  result = *((_QWORD *)this + 13);
  if (*(char *)(result + 23) < 0)
  {
    v9 = *(_QWORD *)(result + 8);
    if (!v9)
      goto LABEL_10;
    result = *(_QWORD *)result;
    goto LABEL_9;
  }
  LODWORD(v9) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_9:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v9, 1, (uint64_t)"CoreML.Specification.MILSpec.Function.opset");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2u, *((_QWORD *)this + 13), a2);
  }
LABEL_10:
  v10 = (unint64_t *)*((_QWORD *)this + 8);
  v11 = *v10;
  if (!*v10)
    goto LABEL_53;
  if (*((_BYTE *)a2 + 26))
  {
    if (v11 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_33:
      v19 = operator new[]();
      google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v50, *((_QWORD **)this + 8));
      v20 = v50[0];
      if (v50[0])
      {
        v21 = 0;
        do
        {
          *(_QWORD *)(v19 + 8 * v21) = *((_QWORD *)v20 + 3);
          google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v50);
          ++v21;
          v20 = v50[0];
        }
        while (v50[0]);
      }
      else
      {
        v21 = 0;
      }
      v22 = 126 - 2 * __clz(v21);
      if (v21)
        v23 = v22;
      else
        v23 = 0;
      std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const**,false>(v19, (char *)(v19 + 8 * v21), v23, 1);
      if (v21)
      {
        v24 = 0;
        v25 = 0;
        do
        {
          v27 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v19 + 8 * v24), *(_QWORD *)(v19 + 8 * v24) + 24, *((google::protobuf::Arena **)this + 5));
          if (v25 != v27)
          {
            if (v25)
              (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
            v25 = v27;
          }
          google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, v25, a2, v26);
          v28 = *(unsigned int **)(v19 + 8 * v24);
          if (*((char *)v28 + 23) < 0)
          {
            v28 = *(unsigned int **)v28;
            v29 = *(_QWORD *)(*(_QWORD *)(v19 + 8 * v24) + 8);
          }
          else
          {
            LODWORD(v29) = *((unsigned __int8 *)v28 + 23);
          }
          google::protobuf::internal::WireFormatLite::VerifyUtf8String(v28, v29, 1, (uint64_t)"CoreML.Specification.MILSpec.Function.BlockSpecializationsEntry.key");
          ++v24;
        }
        while (v21 != v24);
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      }
      result = MEMORY[0x1A1AD6248](v19, 0x60C8044C4A2DFLL);
      goto LABEL_53;
    }
  }
  else if (v11 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_33;
  }
  result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v50, v10);
  v13 = 0;
  while (v50[0])
  {
    v15 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v50[0] + 3), *((_QWORD *)v50[0] + 3) + 24, *((google::protobuf::Arena **)this + 5));
    if (v13 != v15)
    {
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v13 = v15;
    }
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, v13, a2, v14);
    v16 = (unsigned int *)*((_QWORD *)v50[0] + 3);
    if (*((char *)v16 + 23) < 0)
    {
      v16 = *(unsigned int **)v16;
      v17 = *(_QWORD *)(*((_QWORD *)v50[0] + 3) + 8);
    }
    else
    {
      LODWORD(v17) = *((unsigned __int8 *)v16 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v16, v17, 1, (uint64_t)"CoreML.Specification.MILSpec.Function.BlockSpecializationsEntry.key");
    result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v50);
  }
  if (v13)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_53:
  v30 = (unint64_t *)*((_QWORD *)this + 12);
  v31 = *v30;
  if (!*v30)
    return result;
  if (*((_BYTE *)a2 + 26))
  {
    if (v31 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_76:
      v39 = operator new[]();
      google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v50, *((_QWORD **)this + 12));
      v40 = v50[0];
      if (v50[0])
      {
        v41 = 0;
        do
        {
          *(_QWORD *)(v39 + 8 * v41) = *((_QWORD *)v40 + 3);
          google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v50);
          ++v41;
          v40 = v50[0];
        }
        while (v50[0]);
      }
      else
      {
        v41 = 0;
      }
      v42 = 126 - 2 * __clz(v41);
      if (v41)
        v43 = v42;
      else
        v43 = 0;
      std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**,false>(v39, (char *)(v39 + 8 * v41), v43, 1);
      if (v41)
      {
        v44 = 0;
        v45 = 0;
        do
        {
          v47 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v39 + 8 * v44), *(_QWORD *)(v39 + 8 * v44) + 24, *((google::protobuf::Arena **)this + 9));
          if (v45 != v47)
          {
            if (v45)
              (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
            v45 = v47;
          }
          google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v45, a2, v46);
          v48 = *(unsigned int **)(v39 + 8 * v44);
          if (*((char *)v48 + 23) < 0)
          {
            v48 = *(unsigned int **)v48;
            v49 = *(_QWORD *)(*(_QWORD *)(v39 + 8 * v44) + 8);
          }
          else
          {
            LODWORD(v49) = *((unsigned __int8 *)v48 + 23);
          }
          google::protobuf::internal::WireFormatLite::VerifyUtf8String(v48, v49, 1, (uint64_t)"CoreML.Specification.MILSpec.Function.AttributesEntry.key");
          ++v44;
        }
        while (v41 != v44);
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
      }
      return MEMORY[0x1A1AD6248](v39, 0x60C8044C4A2DFLL);
    }
  }
  else if (v31 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_76;
  }
  result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v50, v30);
  v33 = 0;
  while (v50[0])
  {
    v35 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v50[0] + 3), *((_QWORD *)v50[0] + 3) + 24, *((google::protobuf::Arena **)this + 9));
    if (v33 != v35)
    {
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      v33 = v35;
    }
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v33, a2, v34);
    v36 = (unsigned int *)*((_QWORD *)v50[0] + 3);
    if (*((char *)v36 + 23) < 0)
    {
      v36 = *(unsigned int **)v36;
      v37 = *(_QWORD *)(*((_QWORD *)v50[0] + 3) + 8);
    }
    else
    {
      LODWORD(v37) = *((unsigned __int8 *)v36 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v36, v37, 1, (uint64_t)"CoreML.Specification.MILSpec.Function.AttributesEntry.key");
    result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v50);
  }
  if (v33)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  return result;
}

void sub_19C9F4AC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1A1AD6248](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Function::GetCachedSize(CoreML::Specification::MILSpec::Function *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL4 v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _QWORD *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  char *v97;

  v6 = (char *)result;
LABEL_2:
  v94 = a2 - 8;
  v90 = a2 - 24;
  v91 = a2 - 16;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = a2 - v7;
    v10 = (a2 - v7) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(_QWORD **)v94;
        v41 = *(_QWORD **)v7;
        result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v94, *(_QWORD **)v7);
        if ((_DWORD)result)
        {
          *(_QWORD *)v7 = v40;
          *(_QWORD *)v94 = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v94);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v94);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v7 + 3, (_QWORD **)v94);
      default:
        if (v9 <= 191)
        {
          v42 = v7 + 8;
          v44 = v7 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v7;
              do
              {
                v48 = *(_QWORD **)v46;
                v47 = (_QWORD *)*((_QWORD *)v46 + 1);
                v46 = v42;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v47, v48);
                if ((_DWORD)result)
                {
                  v49 = v45;
                  while (1)
                  {
                    *(_QWORD *)&v7[v49 + 8] = v48;
                    if (!v49)
                      break;
                    v48 = *(_QWORD **)&v7[v49 - 8];
                    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v47, v48);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v7[v49 + 8];
                      goto LABEL_73;
                    }
                  }
                  v50 = v7;
LABEL_73:
                  *(_QWORD *)v50 = v47;
                }
                v42 = v46 + 8;
                v45 += 8;
              }
              while (v46 + 8 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v86 = *(_QWORD **)v8;
              v85 = (_QWORD *)*((_QWORD *)v8 + 1);
              v8 = v42;
              result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v85, v86);
              if ((_DWORD)result)
              {
                v87 = v8;
                do
                {
                  *(_QWORD *)v87 = v86;
                  v86 = (_QWORD *)*((_QWORD *)v87 - 2);
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v85, v86);
                  v87 -= 8;
                }
                while ((result & 1) != 0);
                *(_QWORD *)v87 = v85;
              }
              v42 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v97 = v7;
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            v88 = a2;
            v89 = a2 - v7;
            do
            {
              v53 = v52;
              if (v9 >= 16 && v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v97[8 * v54];
                v56 = 2 * v52 + 2;
                v95 = v52;
                if (v56 >= v10)
                {
                  v58 = *(_QWORD **)v55;
                }
                else
                {
                  v57 = *(_QWORD **)v55;
                  v58 = (_QWORD *)*((_QWORD *)v55 + 1);
                  v59 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v55, v58);
                  if (v59)
                    v55 += 8;
                  else
                    v58 = v57;
                  if (v59)
                    v54 = v56;
                }
                v60 = &v97[8 * v53];
                v61 = *(_QWORD **)v60;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v58, *(_QWORD **)v60);
                v9 = v89;
                if ((result & 1) == 0)
                {
                  do
                  {
                    v62 = v55;
                    *(_QWORD *)v60 = v58;
                    if (v51 < v54)
                      break;
                    v63 = (2 * v54) | 1;
                    v55 = &v97[8 * v63];
                    v64 = 2 * v54 + 2;
                    if (v64 >= v10)
                    {
                      v58 = *(_QWORD **)v55;
                      v54 = (2 * v54) | 1;
                    }
                    else
                    {
                      v58 = *(_QWORD **)v55;
                      v65 = (_QWORD *)*((_QWORD *)v55 + 1);
                      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v55, v65))
                      {
                        v58 = v65;
                        v55 += 8;
                        v54 = v64;
                      }
                      else
                      {
                        v54 = v63;
                      }
                    }
                    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v58, v61);
                    v60 = v62;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v62 = v61;
                  a2 = v88;
                  v9 = v89;
                  v53 = v95;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v66 = (unint64_t)v9 >> 3;
            v67 = v97;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = v66 - 2;
              v93 = *(_QWORD **)v67;
              if (v66 < 2)
                v70 = v66 - 1;
              v71 = v70 >> 1;
              do
              {
                v72 = &v67[8 * v69 + 8];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 >= v66)
                {
                  v77 = *(_QWORD **)v72;
                  v69 = (2 * v69) | 1;
                }
                else
                {
                  v75 = *(_QWORD **)v72;
                  v76 = *(_QWORD **)&v67[8 * v69 + 16];
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v72, v76);
                  if ((_DWORD)result)
                    v77 = v76;
                  else
                    v77 = v75;
                  if ((_DWORD)result)
                  {
                    v72 += 8;
                    v69 = v74;
                  }
                  else
                  {
                    v69 = v73;
                  }
                }
                *(_QWORD *)v67 = v77;
                v67 = v72;
              }
              while (v69 <= v71);
              a2 = v68 - 8;
              if (v72 == v68 - 8)
              {
                *(_QWORD *)v72 = v93;
              }
              else
              {
                *(_QWORD *)v72 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v93;
                v78 = v72 - v97 + 8;
                if (v78 >= 9)
                {
                  v79 = (unint64_t)((v78 >> 3) - 2) >> 1;
                  v80 = &v97[8 * v79];
                  v81 = *(_QWORD **)v80;
                  v82 = *(_QWORD **)v72;
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v80, *(_QWORD **)v72);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v83 = v80;
                      *(_QWORD *)v72 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v97[8 * v79];
                      v81 = *(_QWORD **)v80;
                      result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v80, v82);
                      v72 = v83;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v83 = v82;
                  }
                }
              }
              v84 = v66-- <= 2;
              v67 = v97;
            }
            while (!v84);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7[8 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12, (_QWORD **)v7, (_QWORD **)v94);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v12, (_QWORD **)v94);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 1, (_QWORD **)v12 - 1, (_QWORD **)v91);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 2, (_QWORD **)&v7[8 * v11 + 8], (_QWORD **)v90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12 - 1, (_QWORD **)v12, (_QWORD **)&v7[8 * v11 + 8]);
          v13 = *(_QWORD **)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD **)v7;
        v15 = v7;
        if ((a4 & 1) == 0)
        {
          v15 = v7;
          if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*((_QWORD **)v7 - 1), *(_QWORD **)v7))
          {
            result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, *(_QWORD **)v94);
            if ((result & 1) != 0)
            {
              do
              {
                v30 = (_QWORD *)*((_QWORD *)v7 + 1);
                v7 += 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v30);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v31 = v7 + 8;
              do
              {
                v7 = v31;
                if (v31 >= a2)
                  break;
                v31 += 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, *(_QWORD **)v7);
              }
              while (!(_DWORD)result);
            }
            v32 = a2;
            if (v7 < a2)
            {
              v32 = a2;
              do
              {
                v33 = (_QWORD *)*((_QWORD *)v32 - 1);
                v32 -= 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v33);
              }
              while ((result & 1) != 0);
            }
            v34 = a2;
            if (v7 < v32)
            {
              v35 = *(_QWORD **)v7;
              v36 = *(_QWORD **)v32;
              do
              {
                *(_QWORD *)v7 = v36;
                *(_QWORD *)v32 = v35;
                do
                {
                  v37 = (_QWORD *)*((_QWORD *)v7 + 1);
                  v7 += 8;
                  v35 = v37;
                }
                while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v37));
                do
                {
                  v38 = (_QWORD *)*((_QWORD *)v32 - 1);
                  v32 -= 8;
                  v36 = v38;
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v38);
                }
                while ((result & 1) != 0);
              }
              while (v7 < v32);
            }
            v39 = v7 - 8;
            a2 = v34;
            if (v7 - 8 != v8)
              *(_QWORD *)v8 = *(_QWORD *)v39;
            a4 = 0;
            *(_QWORD *)v39 = v14;
            continue;
          }
        }
        do
        {
          v16 = v15;
          v18 = (_QWORD *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v17 = v18;
        }
        while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v18, v14));
        v96 = a3;
        v19 = a2;
        if (v16 == v8)
        {
          v19 = a2;
          do
          {
            if (v15 >= v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v21, v14));
        }
        else
        {
          do
          {
            v20 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v20, v14));
        }
        v6 = v8;
        v22 = a2;
        if (v15 < v19)
        {
          v23 = *(_QWORD **)v19;
          v24 = v15;
          v25 = v19;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v17;
            do
            {
              v16 = v24;
              v26 = (_QWORD *)*((_QWORD *)v24 + 1);
              v24 += 8;
              v17 = v26;
            }
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v26, v14));
            do
            {
              v27 = (_QWORD *)*((_QWORD *)v25 - 1);
              v25 -= 8;
              v23 = v27;
            }
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v27, v14));
          }
          while (v24 < v25);
        }
        if (v16 != v6)
          *(_QWORD *)v6 = *(_QWORD *)v16;
        *(_QWORD *)v16 = v14;
        v28 = v15 >= v19;
        a2 = v22;
        a3 = v96;
        if (!v28)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const**,false>(v6, v16, v96, a4 & 1);
          a4 = 0;
          v7 = v16 + 8;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const**>((_QWORD **)v6, (_QWORD **)v16);
        v7 = v16 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const**>((_QWORD **)v16 + 1, (_QWORD **)v22);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v16;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(uint64_t a1, uint64_t a2, google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)result = &off_1E3D59C78;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_19CB39696);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E3D5A998;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E3D5A998;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2;
  CoreML::Specification::MILSpec::Block *v3;

  v2 = *(_QWORD *)(a1 + 16);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *(CoreML::Specification::MILSpec::Block **)(a1 + 24);
  if (v3)
    CoreML::Specification::MILSpec::Block::Clear(v3);
  *(_DWORD *)(a1 + 40) &= 0xFFFFFFFC;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::IsInitialized()
{
  return 1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  google::protobuf::Arena *v7;
  CoreML::Specification::MILSpec::Block *Aligned;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  const CoreML::Specification::MILSpec::Block *v12;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(__int128 **)(a1 + 16) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!*(_QWORD *)(a1 + 24))
      {
        v7 = *(google::protobuf::Arena **)(a1 + 32);
        if (v7)
        {
          CoreML::Specification::MILSpec::Block::Block(Aligned);
          v9 = google::protobuf::Arena::AllocateAligned(v7, 0, 24);
          *v9 = Aligned;
          v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
          v10 = (unint64_t *)((char *)v7 + 32);
          do
            v11 = __ldxr(v10);
          while (__stxr((unint64_t)v9, v10));
          v9[2] = (google::protobuf::Arena *)v11;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Block *)operator new();
          CoreML::Specification::MILSpec::Block::Block(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v12 = (const CoreML::Specification::MILSpec::Block *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      CoreML::Specification::MILSpec::Block::MergeFrom(*(CoreML::Specification::MILSpec::Block **)(a1 + 24), v12);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

void sub_19C9F55F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  unint64_t TagFallback;
  __int128 *v8;
  uint64_t result;
  int v10;
  char *v11;
  CoreML::Specification::MILSpec::Block *Aligned;
  google::protobuf::Arena *v13;
  google::protobuf::Arena **v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  int VarintSizeAsIntFallback;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;

  v5 = (google::protobuf::Arena **)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *(char **)this;
        if (*(_QWORD *)this >= *((_QWORD *)this + 1))
        {
          LODWORD(TagFallback) = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *(_QWORD *)this = v6 + 1;
            goto LABEL_7;
          }
        }
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 10)
          break;
        *(_DWORD *)(a1 + 40) |= 1u;
        v8 = *(__int128 **)(a1 + 16);
        if (v8 == &google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v8 = *(__int128 **)(a1 + 16);
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)this, (std::string *)v8);
        if (!(_DWORD)result)
          return result;
        v10 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v10;
        v11 = *(char **)this;
        if (*(_QWORD *)this < *((_QWORD *)this + 1) && *v11 == 18)
        {
          *(_QWORD *)this = v11 + 1;
          goto LABEL_20;
        }
      }
      if ((_DWORD)TagFallback != 18)
        break;
      v10 = *(_DWORD *)(a1 + 40);
LABEL_20:
      *(_DWORD *)(a1 + 40) = v10 | 2;
      Aligned = *(CoreML::Specification::MILSpec::Block **)(a1 + 24);
      if (!Aligned)
      {
        v13 = *(google::protobuf::Arena **)(a1 + 32);
        if (v13)
        {
          CoreML::Specification::MILSpec::Block::Block(Aligned);
          v14 = google::protobuf::Arena::AllocateAligned(v13, 0, 24);
          *v14 = Aligned;
          v14[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
          v15 = (unint64_t *)((char *)v13 + 32);
          do
            v16 = __ldxr(v15);
          while (__stxr((unint64_t)v14, v15));
          v14[2] = (google::protobuf::Arena *)v16;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Block *)operator new();
          CoreML::Specification::MILSpec::Block::Block(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v17 = *(char **)this;
      if (*(_QWORD *)this >= *((_QWORD *)this + 1) || *v17 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(this);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v17;
        *(_QWORD *)this = v17 + 1;
      }
      v19 = google::protobuf::io::CodedInputStream::PushLimit(this, VarintSizeAsIntFallback);
      v21 = *((_DWORD *)this + 13);
      v22 = __OFSUB__(v21--, 1);
      *((_DWORD *)this + 13) = v21;
      if (v21 < 0 != v22)
        return 0;
      v23 = v19;
      result = CoreML::Specification::MILSpec::Block::MergePartialFromCodedStream(Aligned, this, v20);
      if (!(_DWORD)result)
        return result;
      result = google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(this, v23);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*(_QWORD *)this == *((_QWORD *)this + 1)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(this, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

void sub_19C9F5878(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  CoreML::Specification::MILSpec::Block *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (CoreML::Specification::MILSpec::Block *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = CoreML::Specification::MILSpec::Block::ByteSizeLong(v4);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  google::protobuf::internal::WireFormatLite *v5;
  const google::protobuf::MessageLite *v6;
  google::protobuf::io::CodedOutputStream *v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  v5 = (google::protobuf::internal::WireFormatLite *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(v5, a2, v6, v7);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_DWORD *)(v6 + 8);
    v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    return v5 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(_DWORD *)(v4 + 120) + ((9 * (__clz(*(_DWORD *)(v4 + 120) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v6 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v7 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v6, a3 + 1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v7 = 18;
  v9 = v7 + 1;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
  if (v10 < 0x80)
  {
    LOBYTE(v11) = v10;
  }
  else
  {
    do
    {
      *v9++ = v10 | 0x80;
      v11 = v10 >> 7;
      v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
  }
  *v9 = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 128))(v8, a2, v9 + 1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D59D20;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
  {
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
    v2 = a1[3];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::value(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  const char *v6;
  int v7;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
  {
    v5 = 3;
    v6 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    v7 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v2 = *(_QWORD *)(a1 + 8);
  }
  v3 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(a1 + 24))
    return *(_QWORD *)(a1 + 24);
  else
    return v3;
}

void sub_19C9F5C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const**>(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD **v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(_QWORD **)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(_QWORD **)((char *)a1 + v14 - 16);
        v16 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v12, v13);
        v14 = v15;
        if (!v16)
        {
          v17 = (_QWORD **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[](uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  google::protobuf::Arena *v12;
  std::string *Aligned;
  std::string::__raw *v14;
  __int128 v15;
  google::protobuf::Arena **v16;
  google::protobuf::Arena *v17;
  google::protobuf::Arena *v18;
  std::string *v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  std::string __p;
  std::string::size_type v25;
  uint64_t v26[4];
  _QWORD v27[4];

  v4 = *(_QWORD **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v25 = 0;
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v27, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  v6 = v27[0];
  if (v27[0])
    goto LABEL_18;
  v7 = v4[1];
  v8 = *v4 + 1;
  v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      v21 = 2 * v7;
LABEL_37:
      google::protobuf::Map<std::string,std::string>::InnerMap::Resize((uint64_t)v4, v21, v5);
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      v11 = v26[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    v22 = 0;
    v23 = ((5 * v8) >> 2) + 1;
    do
      ++v22;
    while (v23 << v22 < v9);
    v21 = v7 >> v22 <= 8 ? 8 : v7 >> v22;
    if (v21 != v7)
      goto LABEL_37;
  }
  v11 = v27[3];
LABEL_11:
  v12 = (google::protobuf::Arena *)v4[5];
  if (v12)
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E0DE4EE8], 40);
  else
    Aligned = (std::string *)operator new(0x28uLL);
  v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v25;
  google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v26, (uint64_t)v4, v11, v14);
  ++*v4;
  v6 = v26[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (*(_QWORD *)a1)
    {
      v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E0DE4EE8], 152);
      v17 = *(google::protobuf::Arena **)a1;
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
      v18 = *(google::protobuf::Arena **)a1;
      CoreML::Specification::MILSpec::Block::Block((CoreML::Specification::MILSpec::Block *)(v16 + 3));
      google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Block>((google::protobuf::Arena **)v18, (google::protobuf::Arena *)(v16 + 3));
      std::string::operator=((std::string *)v16, (const std::string *)a2);
    }
    else
    {
      v19 = (std::string *)operator new();
      v16 = (google::protobuf::Arena **)v19;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v19->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      CoreML::Specification::MILSpec::Block::Block((CoreML::Specification::MILSpec::Block *)(v16 + 3));
    }
    *(_QWORD *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_19C9F6040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1A1AD6260](v14, 0x10B2C4008C62E43);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase(_QWORD *a1, unsigned __int8 *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  result = *(double *)&v6;
  if ((_QWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    *(_QWORD *)&result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase((uint64_t)&v6, a1, &v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::MILSpec::Block *v6;
  CoreML::Specification::MILSpec::Block *Aligned;
  google::protobuf::Arena *v8;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v4 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(**(google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(CoreML::Specification::MILSpec::Block **)(a1 + 40);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::MILSpec::Block **)(v4 + 24);
  if (!Aligned)
  {
    v8 = *(google::protobuf::Arena **)(v4 + 32);
    if (v8)
    {
      CoreML::Specification::MILSpec::Block::Block(Aligned);
      v9 = google::protobuf::Arena::AllocateAligned(v8, 0, 24);
      *v9 = Aligned;
      v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
      v10 = (unint64_t *)((char *)v8 + 32);
      do
        v11 = __ldxr(v10);
      while (__stxr((unint64_t)v9, v10));
      v9[2] = (google::protobuf::Arena *)v11;
    }
    else
    {
      Aligned = (CoreML::Specification::MILSpec::Block *)operator new();
      CoreML::Specification::MILSpec::Block::Block(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
  }
  if (v6 != Aligned)
    CoreML::Specification::MILSpec::Block::InternalSwap(Aligned, v6);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase(*(_QWORD **)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v12 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v12 + 40) |= 1u;
  v13 = *(_QWORD *)(v12 + 16);
  if ((__int128 *)v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v12 + 16), *(google::protobuf::Arena ***)(v12 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
    v13 = *(_QWORD *)(v12 + 16);
  }
  if (*(char *)(v13 + 23) < 0)
    operator delete(*(void **)v13);
  v14 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v13 = v14;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v15)
    google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
    *(_QWORD *)(a1 + 48) = 0;
  return v15;
}

void sub_19C9F62B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(google::protobuf::Arena *a1)
{
  uint64_t result;

  if (a1)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E3D5A998;
  return result;
}

unsigned __int8 **google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  unsigned __int8 **result;
  uint64_t v4;
  CoreML::Specification::MILSpec::Block *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena **v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  result = (unsigned __int8 **)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[](*(_QWORD *)(a1 + 8), a1 + 16);
  *(_QWORD *)(a1 + 40) = result;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::MILSpec::Block **)(v4 + 24);
  if (!Aligned)
  {
    v6 = *(google::protobuf::Arena **)(v4 + 32);
    if (v6)
    {
      CoreML::Specification::MILSpec::Block::Block(Aligned);
      v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
      *v7 = Aligned;
      v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
      v8 = (unint64_t *)((char *)v6 + 32);
      do
        v9 = __ldxr(v8);
      while (__stxr((unint64_t)v7, v8));
      v7[2] = (google::protobuf::Arena *)v9;
    }
    else
    {
      Aligned = (CoreML::Specification::MILSpec::Block *)operator new();
      CoreML::Specification::MILSpec::Block::Block(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
    result = *(unsigned __int8 ***)(a1 + 40);
  }
  if (Aligned != (CoreML::Specification::MILSpec::Block *)result)
    return CoreML::Specification::MILSpec::Block::InternalSwap((CoreML::Specification::MILSpec::Block *)result, Aligned);
  return result;
}

void sub_19C9F644C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

unsigned __int8 **CoreML::Specification::MILSpec::Block::InternalSwap(CoreML::Specification::MILSpec::Block *this, CoreML::Specification::MILSpec::Block *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **result;
  int v8;

  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v5;
  LODWORD(v5) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LODWORD(v5) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v6;
  LODWORD(v6) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  LODWORD(v6) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::swap((unsigned __int8 **)this + 12, (uint64_t)a2 + 96);
  v8 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v8;
  return result;
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::swap(unsigned __int8 **result, uint64_t a2)
{
  unsigned __int8 **v3;
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  _QWORD v8[3];
  __int128 v9;

  v3 = result;
  if (*result == *(unsigned __int8 **)a2)
  {
    v4 = *((_DWORD *)result + 2);
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v4;
    v5 = result[2];
    result[2] = *(unsigned __int8 **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v5;
  }
  else
  {
    v6 = 0;
    v7 = *((_DWORD *)result + 2);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init((uint64_t)&v6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v9, v3[2]);
    memset(v8, 0, sizeof(v8));
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::const_iterator>(&v6, &v9, v8);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator=(v3, a2);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator=((unsigned __int8 **)a2, (uint64_t)&v6);
    return (unsigned __int8 **)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(&v6);
  }
  return result;
}

void sub_19C9F65F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator=(unsigned __int8 **a1, uint64_t a2)
{
  _QWORD v5[3];
  __int128 v6;

  if (a1 != (unsigned __int8 **)a2)
  {
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((uint64_t)a1);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v6, *(_QWORD **)(a2 + 16));
    memset(v5, 0, sizeof(v5));
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::const_iterator>(a1, &v6, v5);
  }
  return a1;
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::const_iterator>(unsigned __int8 **result, __int128 *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  const CoreML::Specification::MILSpec::Value *v7;
  google::protobuf::Arena **v8;
  CoreML::Specification::MILSpec::Value *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[4];

  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v3 = v10;
  if ((_QWORD)v10 != *a3)
  {
    v5 = (uint64_t)result;
    do
    {
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v12, *(_QWORD *)(v5 + 16), *(unsigned __int8 **)(v3 + 24), 0);
      if (!v12[0])
      {
        v6 = *(_QWORD *)(v10 + 24);
        v7 = (const CoreML::Specification::MILSpec::Value *)(v6 + 24);
        v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](v5, v6);
        if (v7 != (const CoreML::Specification::MILSpec::Value *)v8)
        {
          v9 = (CoreML::Specification::MILSpec::Value *)v8;
          CoreML::Specification::MILSpec::Value::Clear((CoreML::Specification::MILSpec::Value *)v8);
          CoreML::Specification::MILSpec::Value::MergeFrom(v9, v7);
        }
      }
      result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++((unsigned __int8 **)&v10);
      v3 = v10;
    }
    while ((_QWORD)v10 != *a3);
  }
  return result;
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Block>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

void CoreML::Specification::MILSpec::Function::MergeFrom(CoreML::Specification::MILSpec::Function *this, const CoreML::Specification::MILSpec::Function *a2)
{
  uint64_t v4;
  unsigned int v5;
  CoreML::Specification::MILSpec::NamedValueType **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  unsigned __int8 *i;
  uint64_t v11;
  const CoreML::Specification::MILSpec::Block *v12;
  google::protobuf::Arena **v13;
  CoreML::Specification::MILSpec::Block *v14;
  uint64_t v15;
  std::string *v16;
  std::string **v17;
  std::string *v18;
  unsigned __int8 *v19[3];

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::MILSpec::NamedValueType **)(*((_QWORD *)a2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Function *)((char *)this + 16), *((_DWORD *)a2 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>((google::protobuf::Arena **)this + 2, (CoreML::Specification::MILSpec::NamedValueType **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (signed int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v19, *((_QWORD **)a2 + 8));
  for (i = v19[0]; v19[0]; i = v19[0])
  {
    v11 = *((_QWORD *)i + 3);
    v12 = (const CoreML::Specification::MILSpec::Block *)(v11 + 24);
    v13 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[]((uint64_t)this + 48, v11);
    if (v12 != (const CoreML::Specification::MILSpec::Block *)v13)
    {
      v14 = (CoreML::Specification::MILSpec::Block *)v13;
      CoreML::Specification::MILSpec::Block::Clear((CoreML::Specification::MILSpec::Block *)v13);
      CoreML::Specification::MILSpec::Block::MergeFrom(v14, v12);
    }
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v19);
  }
  google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 72, (uint64_t)a2 + 72);
  v15 = *((_QWORD *)a2 + 13);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(_QWORD *)(v15 + 8))
      return;
  }
  else if (!*(_BYTE *)(v15 + 23))
  {
    return;
  }
  v18 = (std::string *)*((_QWORD *)this + 13);
  v17 = (std::string **)((char *)this + 104);
  v16 = v18;
  if (v18 != (std::string *)v15)
  {
    if (v16 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v17, v15);
    else
      std::string::operator=(v16, (const std::string *)v15);
  }
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Function>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Function>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Function>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::clear((uint64_t)a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x1A1AD6260](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::clear(uint64_t a1)
{
  double result;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v3, *(_QWORD **)(a1 + 16));
  while ((_QWORD)v3)
  {
    v5 = v3;
    v6 = v4;
    *(_QWORD *)&result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase((uint64_t)&v3, (_QWORD *)a1, &v5).n128_u64[0];
  }
  return result;
}

__n128 google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BOOL4 v8;
  unint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  __n128 result;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;

  if (!*a2)
  {
    v6 = *(_QWORD *)(*a3 + 24);
    if (v6)
    {
      CoreML::Specification::MILSpec::Function::~Function((CoreML::Specification::MILSpec::Function *)(v6 + 24));
      if (*(char *)(v6 + 23) < 0)
        operator delete(*(void **)v6);
      MEMORY[0x1A1AD6260](v6, 0x10B2C40A53FFCBDLL);
    }
  }
  v18 = *(_OWORD *)a3;
  v19 = a3[2];
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(a3);
  v7 = (_QWORD *)a2[2];
  v20 = 0;
  v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v18, &v20);
  v9 = v19;
  v10 = (void **)v18;
  v11 = v7[4];
  v12 = *(_QWORD *)(v11 + 8 * v19);
  if (v8)
  {
    v13 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v18, *(_QWORD *)(v11 + 8 * v19));
LABEL_12:
    *(_QWORD *)(v7[4] + 8 * v9) = v13;
    goto LABEL_13;
  }
  v14 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v12, *(_QWORD **)(v20 + 32));
  if ((uint64_t *)(v12 + 8) != v14)
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v12, v14);
  if (!*(_QWORD *)(v12 + 24))
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(v7[5], (_QWORD **)v12);
    v13 = 0;
    *(_QWORD *)(v7[4] + ((8 * v9) | 8)) = 0;
    v9 &= ~1uLL;
    goto LABEL_12;
  }
LABEL_13:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v7, v10);
  --*v7;
  if (v9 == v7[3])
  {
    v16 = v7[1];
    if (v9 < v16)
    {
      v17 = v7[4];
      do
      {
        if (*(_QWORD *)(v17 + 8 * v9))
          break;
        v7[3] = ++v9;
      }
      while (v16 != v9);
    }
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  return result;
}

void google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::value(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  const char *v6;
  int v7;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
  {
    v5 = 3;
    v6 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    v7 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v2 = *(_QWORD *)(a1 + 8);
  }
  v3 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(a1 + 24))
    return *(_QWORD *)(a1 + 24);
  else
    return v3;
}

void sub_19C9F6D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D59E70;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
  {
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
    v2 = a1[3];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

void google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_19CB39696);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E3D5AB90;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E3D5AB90;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2;
  CoreML::Specification::MILSpec::Function *v3;

  v2 = *(_QWORD *)(a1 + 16);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *(CoreML::Specification::MILSpec::Function **)(a1 + 24);
  if (v3)
    CoreML::Specification::MILSpec::Function::Clear(v3);
  *(_DWORD *)(a1 + 40) &= 0xFFFFFFFC;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::IsInitialized()
{
  return 1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  google::protobuf::Arena *v7;
  CoreML::Specification::MILSpec::Function *Aligned;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  const CoreML::Specification::MILSpec::Function *v12;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(__int128 **)(a1 + 16) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!*(_QWORD *)(a1 + 24))
      {
        v7 = *(google::protobuf::Arena **)(a1 + 32);
        if (v7)
        {
          CoreML::Specification::MILSpec::Function::Function(Aligned);
          v9 = google::protobuf::Arena::AllocateAligned(v7, 0, 24);
          *v9 = Aligned;
          v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>;
          v10 = (unint64_t *)((char *)v7 + 32);
          do
            v11 = __ldxr(v10);
          while (__stxr((unint64_t)v9, v10));
          v9[2] = (google::protobuf::Arena *)v11;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Function *)operator new();
          CoreML::Specification::MILSpec::Function::Function(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v12 = (const CoreML::Specification::MILSpec::Function *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      CoreML::Specification::MILSpec::Function::MergeFrom(*(CoreML::Specification::MILSpec::Function **)(a1 + 24), v12);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

void sub_19C9F7080(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  unint64_t TagFallback;
  __int128 *v8;
  uint64_t result;
  int v10;
  char *v11;
  CoreML::Specification::MILSpec::Function *Aligned;
  google::protobuf::Arena *v13;
  google::protobuf::Arena **v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  int VarintSizeAsIntFallback;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;

  v5 = (google::protobuf::Arena **)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *(char **)this;
        if (*(_QWORD *)this >= *((_QWORD *)this + 1))
        {
          LODWORD(TagFallback) = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *(_QWORD *)this = v6 + 1;
            goto LABEL_7;
          }
        }
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 10)
          break;
        *(_DWORD *)(a1 + 40) |= 1u;
        v8 = *(__int128 **)(a1 + 16);
        if (v8 == &google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v8 = *(__int128 **)(a1 + 16);
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)this, (std::string *)v8);
        if (!(_DWORD)result)
          return result;
        v10 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v10;
        v11 = *(char **)this;
        if (*(_QWORD *)this < *((_QWORD *)this + 1) && *v11 == 18)
        {
          *(_QWORD *)this = v11 + 1;
          goto LABEL_20;
        }
      }
      if ((_DWORD)TagFallback != 18)
        break;
      v10 = *(_DWORD *)(a1 + 40);
LABEL_20:
      *(_DWORD *)(a1 + 40) = v10 | 2;
      Aligned = *(CoreML::Specification::MILSpec::Function **)(a1 + 24);
      if (!Aligned)
      {
        v13 = *(google::protobuf::Arena **)(a1 + 32);
        if (v13)
        {
          CoreML::Specification::MILSpec::Function::Function(Aligned);
          v14 = google::protobuf::Arena::AllocateAligned(v13, 0, 24);
          *v14 = Aligned;
          v14[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>;
          v15 = (unint64_t *)((char *)v13 + 32);
          do
            v16 = __ldxr(v15);
          while (__stxr((unint64_t)v14, v15));
          v14[2] = (google::protobuf::Arena *)v16;
        }
        else
        {
          Aligned = (CoreML::Specification::MILSpec::Function *)operator new();
          CoreML::Specification::MILSpec::Function::Function(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v17 = *(char **)this;
      if (*(_QWORD *)this >= *((_QWORD *)this + 1) || *v17 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(this);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v17;
        *(_QWORD *)this = v17 + 1;
      }
      v19 = google::protobuf::io::CodedInputStream::PushLimit(this, VarintSizeAsIntFallback);
      v21 = *((_DWORD *)this + 13);
      v22 = __OFSUB__(v21--, 1);
      *((_DWORD *)this + 13) = v21;
      if (v21 < 0 != v22)
        return 0;
      v23 = v19;
      result = CoreML::Specification::MILSpec::Function::MergePartialFromCodedStream(Aligned, this, v20);
      if (!(_DWORD)result)
        return result;
      result = google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(this, v23);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*(_QWORD *)this == *((_QWORD *)this + 1)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(this, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

void sub_19C9F7304(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  CoreML::Specification::MILSpec::Function *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (CoreML::Specification::MILSpec::Function *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = CoreML::Specification::MILSpec::Function::ByteSizeLong(v4);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  google::protobuf::internal::WireFormatLite *v5;
  const google::protobuf::MessageLite *v6;
  google::protobuf::io::CodedOutputStream *v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  v5 = (google::protobuf::internal::WireFormatLite *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(v5, a2, v6, v7);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_DWORD *)(v6 + 8);
    v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    return v5 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(_DWORD *)(v4 + 112) + ((9 * (__clz(*(_DWORD *)(v4 + 112) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v6 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v7 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v6, a3 + 1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v7 = 18;
  v9 = v7 + 1;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
  if (v10 < 0x80)
  {
    LOBYTE(v11) = v10;
  }
  else
  {
    do
    {
      *v9++ = v10 | 0x80;
      v11 = v10 >> 7;
      v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
  }
  *v9 = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 128))(v8, a2, v9 + 1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::value(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  const char *v6;
  int v7;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
  {
    v5 = 3;
    v6 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    v7 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v2 = *(_QWORD *)(a1 + 8);
  }
  v3 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(a1 + 24))
    return *(_QWORD *)(a1 + 24);
  else
    return v3;
}

void sub_19C9F762C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D5A110;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
  {
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
    v2 = a1[3];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

void CoreML::Specification::MILSpec::Value_BlobFileValue::~Value_BlobFileValue(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
  *(_QWORD *)this = &off_1E3D581F0;
  google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(*((_QWORD *)this + 2));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D581F0;
  google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(*((_QWORD *)this + 2));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::MILSpec::Value_BlobFileValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Value.BlobFileValue");
}

CoreML::Specification::MILSpec::Value_BlobFileValue *CoreML::Specification::MILSpec::Value_BlobFileValue::New(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
  return CoreML::Specification::MILSpec::Value_BlobFileValue::New(this, 0);
}

CoreML::Specification::MILSpec::Value_BlobFileValue *CoreML::Specification::MILSpec::Value_BlobFileValue::New(CoreML::Specification::MILSpec::Value_BlobFileValue *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::MILSpec::Value_BlobFileValue *v3;

  v3 = (CoreML::Specification::MILSpec::Value_BlobFileValue *)operator new();
  CoreML::Specification::MILSpec::Value_BlobFileValue::Value_BlobFileValue(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Value_BlobFileValue>(a2, v3);
  return v3;
}

void sub_19C9F77CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4056DF9CA5);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value_BlobFileValue::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 16);
  if ((__int128 *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::Value_BlobFileValue::IsInitialized(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Value_BlobFileValue::SerializeWithCachedSizes(CoreML::Specification::MILSpec::Value_BlobFileValue *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;

  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      goto LABEL_7;
    result = *(_QWORD *)result;
    goto LABEL_6;
  }
  LODWORD(v7) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v7, 1, (uint64_t)"CoreML.Specification.MILSpec.Value.BlobFileValue.fileName");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  v8 = *((_QWORD *)this + 3);
  if (v8)
    return google::protobuf::internal::WireFormatLite::WriteUInt64(2, v8, a2, a4);
  return result;
}

uint64_t CoreML::Specification::MILSpec::Value_BlobFileValue::GetCachedSize(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
  return *((unsigned int *)this + 8);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Value_BlobFileValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value_BlobFileValue>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value_BlobFileValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**>(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD **v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(_QWORD **)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(_QWORD **)((char *)a1 + v14 - 16);
        v16 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v12, v13);
        v14 = v15;
        if (!v16)
        {
          v17 = (_QWORD **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const**>(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD **v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(_QWORD **)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(_QWORD **)((char *)a1 + v14 - 16);
        v16 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v12, v13);
        v14 = v15;
        if (!v16)
        {
          v17 = (_QWORD **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::operator[](uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  google::protobuf::Arena *v12;
  std::string *Aligned;
  std::string::__raw *v14;
  __int128 v15;
  google::protobuf::Arena **v16;
  google::protobuf::Arena *v17;
  google::protobuf::Arena *v18;
  std::string *v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  std::string __p;
  std::string::size_type v25;
  uint64_t v26[4];
  _QWORD v27[4];

  v4 = *(_QWORD **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v25 = 0;
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v27, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  v6 = v27[0];
  if (v27[0])
    goto LABEL_18;
  v7 = v4[1];
  v8 = *v4 + 1;
  v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      v21 = 2 * v7;
LABEL_37:
      google::protobuf::Map<std::string,std::string>::InnerMap::Resize((uint64_t)v4, v21, v5);
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      v11 = v26[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    v22 = 0;
    v23 = ((5 * v8) >> 2) + 1;
    do
      ++v22;
    while (v23 << v22 < v9);
    v21 = v7 >> v22 <= 8 ? 8 : v7 >> v22;
    if (v21 != v7)
      goto LABEL_37;
  }
  v11 = v27[3];
LABEL_11:
  v12 = (google::protobuf::Arena *)v4[5];
  if (v12)
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E0DE4EE8], 40);
  else
    Aligned = (std::string *)operator new(0x28uLL);
  v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v25;
  google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v26, (uint64_t)v4, v11, v14);
  ++*v4;
  v6 = v26[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (*(_QWORD *)a1)
    {
      v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E0DE4EE8], 144);
      v17 = *(google::protobuf::Arena **)a1;
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
      v18 = *(google::protobuf::Arena **)a1;
      CoreML::Specification::MILSpec::Function::Function((CoreML::Specification::MILSpec::Function *)(v16 + 3));
      google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Function>((google::protobuf::Arena **)v18, (google::protobuf::Arena *)(v16 + 3));
      std::string::operator=((std::string *)v16, (const std::string *)a2);
    }
    else
    {
      v19 = (std::string *)operator new();
      v16 = (google::protobuf::Arena **)v19;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v19->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      CoreML::Specification::MILSpec::Function::Function((CoreML::Specification::MILSpec::Function *)(v16 + 3));
    }
    *(_QWORD *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_19C9F7ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1A1AD6260](v14, 0x10B2C40A53FFCBDLL);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase(_QWORD *a1, unsigned __int8 *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  result = *(double *)&v6;
  if ((_QWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    *(_QWORD *)&result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase((uint64_t)&v6, a1, &v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::MILSpec::Function *v6;
  CoreML::Specification::MILSpec::Function *Aligned;
  google::protobuf::Arena *v8;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v4 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(**(google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(CoreML::Specification::MILSpec::Function **)(a1 + 40);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::MILSpec::Function **)(v4 + 24);
  if (!Aligned)
  {
    v8 = *(google::protobuf::Arena **)(v4 + 32);
    if (v8)
    {
      CoreML::Specification::MILSpec::Function::Function(Aligned);
      v9 = google::protobuf::Arena::AllocateAligned(v8, 0, 24);
      *v9 = Aligned;
      v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>;
      v10 = (unint64_t *)((char *)v8 + 32);
      do
        v11 = __ldxr(v10);
      while (__stxr((unint64_t)v9, v10));
      v9[2] = (google::protobuf::Arena *)v11;
    }
    else
    {
      Aligned = (CoreML::Specification::MILSpec::Function *)operator new();
      CoreML::Specification::MILSpec::Function::Function(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
  }
  if (v6 != Aligned)
    CoreML::Specification::MILSpec::Function::InternalSwap(Aligned, v6);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase(*(_QWORD **)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v12 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v12 + 40) |= 1u;
  v13 = *(_QWORD *)(v12 + 16);
  if ((__int128 *)v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v12 + 16), *(google::protobuf::Arena ***)(v12 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
    v13 = *(_QWORD *)(v12 + 16);
  }
  if (*(char *)(v13 + 23) < 0)
    operator delete(*(void **)v13);
  v14 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v13 = v14;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v15)
    google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
    *(_QWORD *)(a1 + 48) = 0;
  return v15;
}

void sub_19C9F813C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(google::protobuf::Arena *a1)
{
  uint64_t result;

  if (a1)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E3D5AB90;
  return result;
}

unsigned __int8 **google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  unsigned __int8 **result;
  uint64_t v4;
  CoreML::Specification::MILSpec::Function *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena **v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  result = (unsigned __int8 **)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::operator[](*(_QWORD *)(a1 + 8), a1 + 16);
  *(_QWORD *)(a1 + 40) = result;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::MILSpec::Function **)(v4 + 24);
  if (!Aligned)
  {
    v6 = *(google::protobuf::Arena **)(v4 + 32);
    if (v6)
    {
      CoreML::Specification::MILSpec::Function::Function(Aligned);
      v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
      *v7 = Aligned;
      v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>;
      v8 = (unint64_t *)((char *)v6 + 32);
      do
        v9 = __ldxr(v8);
      while (__stxr((unint64_t)v7, v8));
      v7[2] = (google::protobuf::Arena *)v9;
    }
    else
    {
      Aligned = (CoreML::Specification::MILSpec::Function *)operator new();
      CoreML::Specification::MILSpec::Function::Function(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
    result = *(unsigned __int8 ***)(a1 + 40);
  }
  if (Aligned != (CoreML::Specification::MILSpec::Function *)result)
    return CoreML::Specification::MILSpec::Function::InternalSwap((CoreML::Specification::MILSpec::Function *)result, Aligned);
  return result;
}

void sub_19C9F82D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

unsigned __int8 **CoreML::Specification::MILSpec::Function::InternalSwap(CoreML::Specification::MILSpec::Function *this, CoreML::Specification::MILSpec::Function *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 **v6;
  int v7;
  uint64_t v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 **result;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  _QWORD v17[3];
  __int128 v18;

  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v6 = (unsigned __int8 **)((char *)this + 48);
  v5 = *((_QWORD *)this + 6);
  v7 = *((_DWORD *)this + 6);
  v9 = (unsigned __int8 **)((char *)a2 + 48);
  v8 = *((_QWORD *)a2 + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  v10 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v10;
  if (v5 == v8)
  {
    v11 = *((_DWORD *)this + 14);
    *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
    *((_DWORD *)a2 + 14) = v11;
    v12 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 8) = v12;
  }
  else
  {
    v15 = 0;
    v16 = *((_DWORD *)this + 14);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::Init((uint64_t)&v15);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v18, *((_QWORD **)this + 8));
    memset(v17, 0, sizeof(v17));
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::const_iterator>(&v15, &v18, v17);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator=(v6, (uint64_t)v9);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator=(v9, (uint64_t)&v15);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::~Map(&v15);
  }
  result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::swap((unsigned __int8 **)this + 10, (uint64_t)a2 + 80);
  v14 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v14;
  LODWORD(v14) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v14;
  return result;
}

void sub_19C9F841C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::~Map((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator=(unsigned __int8 **a1, uint64_t a2)
{
  _QWORD v5[3];
  __int128 v6;

  if (a1 != (unsigned __int8 **)a2)
  {
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::clear((uint64_t)a1);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v6, *(_QWORD **)(a2 + 16));
    memset(v5, 0, sizeof(v5));
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::const_iterator>(a1, &v6, v5);
  }
  return a1;
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::const_iterator>(unsigned __int8 **result, __int128 *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  const CoreML::Specification::MILSpec::Block *v7;
  google::protobuf::Arena **v8;
  CoreML::Specification::MILSpec::Block *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[4];

  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v3 = v10;
  if ((_QWORD)v10 != *a3)
  {
    v5 = (uint64_t)result;
    do
    {
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v12, *(_QWORD *)(v5 + 16), *(unsigned __int8 **)(v3 + 24), 0);
      if (!v12[0])
      {
        v6 = *(_QWORD *)(v10 + 24);
        v7 = (const CoreML::Specification::MILSpec::Block *)(v6 + 24);
        v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[](v5, v6);
        if (v7 != (const CoreML::Specification::MILSpec::Block *)v8)
        {
          v9 = (CoreML::Specification::MILSpec::Block *)v8;
          CoreML::Specification::MILSpec::Block::Clear((CoreML::Specification::MILSpec::Block *)v8);
          CoreML::Specification::MILSpec::Block::MergeFrom(v9, v7);
        }
      }
      result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++((unsigned __int8 **)&v10);
      v3 = v10;
    }
    while ((_QWORD)v10 != *a3);
  }
  return result;
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Function>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

void CoreML::Specification::MILSpec::Program::MergeFrom(CoreML::Specification::MILSpec::Program *this, const CoreML::Specification::MILSpec::Program *a2)
{
  uint64_t v4;
  unsigned __int8 *i;
  uint64_t v6;
  const CoreML::Specification::MILSpec::Function *v7;
  google::protobuf::Arena **v8;
  CoreML::Specification::MILSpec::Function *v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  unsigned __int8 *v13[3];

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v13, *((_QWORD **)a2 + 5));
  for (i = v13[0]; v13[0]; i = v13[0])
  {
    v6 = *((_QWORD *)i + 3);
    v7 = (const CoreML::Specification::MILSpec::Function *)(v6 + 24);
    v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::operator[]((uint64_t)this + 24, v6);
    if (v7 != (const CoreML::Specification::MILSpec::Function *)v8)
    {
      v9 = (CoreML::Specification::MILSpec::Function *)v8;
      CoreML::Specification::MILSpec::Function::Clear((CoreML::Specification::MILSpec::Function *)v8);
      CoreML::Specification::MILSpec::Function::MergeFrom(v9, v7);
    }
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v13);
  }
  google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 48, (uint64_t)a2 + 48);
  v10 = *((_QWORD *)a2 + 10);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(_QWORD *)(v10 + 8))
      goto LABEL_15;
  }
  else if (!*(_BYTE *)(v10 + 23))
  {
    goto LABEL_15;
  }
  v11 = (__int128 *)*((_QWORD *)this + 10);
  if (v11 != (__int128 *)v10)
  {
    if (v11 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, v10);
    else
      std::string::operator=(*((std::string **)this + 10), (const std::string *)v10);
  }
LABEL_15:
  v12 = *((_QWORD *)a2 + 11);
  if (v12)
    *((_QWORD *)this + 11) = v12;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Program>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Program>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Program>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::HashOutputStreamBuf::~HashOutputStreamBuf(CoreML::HashOutputStreamBuf *this)
{
  *(_QWORD *)this = &off_1E3D59568;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::streambuf::~streambuf();
}

{
  *(_QWORD *)this = &off_1E3D59568;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::streambuf::~streambuf();
  JUMPOUT(0x1A1AD6260);
}

uint64_t CoreML::HashOutputStreamBuf::xsputn(CoreML::HashOutputStreamBuf *this, const char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 8);
  if (*(_BYTE *)(v3 + 136))
    return 0;
  v4 = a3;
  CC_SHA256_Update((CC_SHA256_CTX *)v3, a2, a3);
  return v4;
}

uint64_t CoreML::HashOutputStreamBuf::overflow(CoreML::HashOutputStreamBuf *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int data;

  data = a2;
  v2 = *((_QWORD *)this + 8);
  if (*(_BYTE *)(v2 + 136))
    return 0;
  v3 = 1;
  CC_SHA256_Update((CC_SHA256_CTX *)v2, &data, 1u);
  return v3;
}

void std::__shared_ptr_pointer<CoreML::detail::HashOutputStreamBufImpl *,std::shared_ptr<CoreML::detail::HashOutputStreamBufImpl>::__shared_ptr_default_delete<CoreML::detail::HashOutputStreamBufImpl,CoreML::detail::HashOutputStreamBufImpl>,std::allocator<CoreML::detail::HashOutputStreamBufImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<CoreML::detail::HashOutputStreamBufImpl *,std::shared_ptr<CoreML::detail::HashOutputStreamBufImpl>::__shared_ptr_default_delete<CoreML::detail::HashOutputStreamBufImpl,CoreML::detail::HashOutputStreamBufImpl>,std::allocator<CoreML::detail::HashOutputStreamBufImpl>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1A1AD6260);
  return result;
}

uint64_t std::__shared_ptr_pointer<CoreML::detail::HashOutputStreamBufImpl *,std::shared_ptr<CoreML::detail::HashOutputStreamBufImpl>::__shared_ptr_default_delete<CoreML::detail::HashOutputStreamBufImpl,CoreML::detail::HashOutputStreamBufImpl>,std::allocator<CoreML::detail::HashOutputStreamBufImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN6CoreML6detail23HashOutputStreamBufImplEE27__shared_ptr_default_deleteIS3_S3_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void CoreML::validate<(MLModelType)300>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  CoreML::Specification::protobuf_GLMRegressor_2eproto *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (**v22)(CoreML::Specification::GLMRegressor *__hidden);
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  void *v29;
  _DWORD *v30;
  _DWORD *v31;
  void (**v32)(CoreML::Specification::GLMRegressor *__hidden);
  void *__p[2];
  uint64_t v34;

  if (*(_QWORD *)(a2 + 16))
    v4 = *(uint64_t **)(a2 + 16);
  else
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::validateRegressorInterface((void **)&v32, (uint64_t)v4, *(_DWORD *)(a2 + 24), 0, 0);
  if ((v32 & 0xFFFFFFEF) != 0)
  {
    *(_QWORD *)a1 = v32;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
    v6 = v34;
LABEL_21:
    *(_QWORD *)(a1 + 24) = v6;
    return;
  }
  if (*((int *)v4 + 6) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = operator new(0xCuLL);
      v30 = v8 + 3;
      v31 = v8 + 3;
      *(_QWORD *)v8 = 0x500000002;
      v8[2] = 1;
      v29 = v8;
      CoreML::validateSchemaTypes((CoreML::Result *)&v22, (unsigned int **)&v29, *(_QWORD *)(v4[4] + 8 * v7 + 8));
      v32 = v22;
      if (SHIBYTE(v34) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v23;
      v34 = v24;
      BYTE7(v24) = 0;
      LOBYTE(v23) = 0;
      operator delete(v8);
      if ((v32 & 0xFFFFFFEF) != 0)
        goto LABEL_20;
    }
    while (++v7 < *((int *)v4 + 6));
  }
  if (*((int *)v4 + 12) >= 1)
  {
    v9 = 0;
    while (1)
    {
      v10 = operator new(4uLL);
      *v10 = 2;
      v30 = v10 + 1;
      v31 = v10 + 1;
      v29 = v10;
      CoreML::validateSchemaTypes((CoreML::Result *)&v22, (unsigned int **)&v29, *(_QWORD *)(v4[7] + 8 * v9 + 8));
      v32 = v22;
      if (SHIBYTE(v34) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v23;
      v34 = v24;
      BYTE7(v24) = 0;
      LOBYTE(v23) = 0;
      operator delete(v10);
      if ((v32 & 0xFFFFFFEF) != 0)
        break;
      if (++v9 >= *((int *)v4 + 12))
        goto LABEL_18;
    }
LABEL_20:
    *(_QWORD *)a1 = v32;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
    v6 = v34;
    goto LABEL_21;
  }
LABEL_18:
  if (*(_DWORD *)(a2 + 44) == 300)
  {
    v11 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(v5);
    v11 = &CoreML::Specification::_GLMRegressor_default_instance_;
  }
  v22 = &off_1E3D4DBB0;
  v24 = 0u;
  v23 = 0u;
  v12 = *((_DWORD *)v11 + 6);
  if (v12)
  {
    v13 = v11[4];
    v14 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)((char *)&v23 + 8), *((_DWORD *)v11 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((uint64_t *)&v23 + 1, (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)v14, (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)(v13 + 8), v12, **((_DWORD **)&v24 + 1) - v24);
    v15 = v24 + v12;
    LODWORD(v24) = v15;
    if (**((_DWORD **)&v24 + 1) < v15)
      **((_DWORD **)&v24 + 1) = v15;
  }
  v25 = 0;
  v26 = 0;
  v16 = *((_DWORD *)v11 + 10);
  if (v16)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v25, v16);
    memcpy((void *)(v26 + 8), (const void *)(v11[6] + 8), 8 * *((int *)v11 + 10));
    v17 = *((_DWORD *)v11 + 10);
    LODWORD(v25) = v17;
  }
  else
  {
    v17 = 0;
  }
  v28 = 0;
  v18 = v11[1];
  if ((v18 & 1) != 0)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&v23, v18 & 0xFFFFFFFFFFFFFFFELL);
    v17 = v25;
  }
  v27 = *((_DWORD *)v11 + 15);
  if ((_DWORD)v24 != v17)
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "Weights and offsets must be the same size.");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
LABEL_39:
    if (SHIBYTE(v31) < 0)
      operator delete(v29);
    goto LABEL_41;
  }
  if (v17 >= 2)
  {
    v19 = v17;
    v20 = *((_QWORD *)&v24 + 1) + 16;
    v21 = v19 - 1;
    while (*(_DWORD *)(*(_QWORD *)v20 + 16) == *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v24 + 1) + 8) + 16))
    {
      v20 += 8;
      if (!--v21)
        goto LABEL_37;
    }
    std::string::basic_string[abi:ne180100]<0>(&v29, "All weight coefficients must be the same size.");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
    goto LABEL_39;
  }
LABEL_37:
  CoreML::Result::Result((CoreML::Result *)a1);
LABEL_41:
  CoreML::Specification::GLMRegressor::~GLMRegressor((CoreML::Specification::GLMRegressor *)&v22);
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
}

void sub_19C9F8D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
    operator delete(__p);
  CoreML::Specification::GLMRegressor::~GLMRegressor((CoreML::Specification::GLMRegressor *)&a9);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(a1);
}

void CoreML::validate<(MLModelType)400>(uint64_t a1, uint64_t a2)
{
  const CoreML::Specification::ModelDescription *v4;
  const CoreML::Specification::ModelDescription *v5;
  CoreML::Specification::protobuf_GLMClassifier_2eproto *inited;
  uint64_t *v7;
  int v8;
  int v9;
  void *v10;
  uint64_t v11;
  CoreML::Specification::protobuf_GLMClassifier_2eproto *v12;
  int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  CoreML::Specification::Int64Vector *v22;
  CoreML::Specification::protobuf_DataStructures_2eproto *v23;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v24;
  CoreML::Specification::StringVector *v25;
  CoreML::Specification::protobuf_DataStructures_2eproto *v26;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32[2];
  char v33;
  void *v34;
  int v35;
  uint64_t v36;
  void *__p;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CoreML::Specification::StringVector *v43;
  int v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _BYTE v49[16];
  uint64_t v50;

  v4 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_QWORD *)(a2 + 16))
    v5 = *(const CoreML::Specification::ModelDescription **)(a2 + 16);
  else
    v5 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_;
  inited = CoreML::Specification::ModelDescription::ModelDescription((CoreML::Specification::ModelDescription *)v49, v5);
  if (*(_DWORD *)(a2 + 44) == 400)
  {
    v7 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    inited = (CoreML::Specification::protobuf_GLMClassifier_2eproto *)CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(inited);
    v7 = &CoreML::Specification::_GLMClassifier_default_instance_;
  }
  v8 = *((_DWORD *)v7 + 21);
  if (!v8)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier models must provide class labels.");
    v46 = 13;
    std::operator+<char>();
    goto LABEL_26;
  }
  if (v8 == 100)
  {
    if (!*(_DWORD *)(v7[9] + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have String class labels must provide labels.");
      v46 = 13;
      std::operator+<char>();
      goto LABEL_26;
    }
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(inited);
    if ((_DWORD)qword_1ED002850)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with String class labels must provide exclusively String class labels.");
      v46 = 13;
      std::operator+<char>();
      goto LABEL_26;
    }
    goto LABEL_16;
  }
  if (v8 != 101)
  {
LABEL_16:
    v9 = 0;
    goto LABEL_17;
  }
  if (!*(_DWORD *)(v7[9] + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have Int64 class labels must provide labels.");
    v46 = 13;
    std::operator+<char>();
    goto LABEL_26;
  }
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(inited);
  if (dword_1ED006728)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with Int64 class labels must provide exclusively Int64 class labels.");
    v46 = 13;
    std::operator+<char>();
LABEL_26:
    if ((SHIBYTE(v38) & 0x80000000) == 0)
      goto LABEL_29;
    v10 = __p;
    goto LABEL_28;
  }
  v9 = 1;
LABEL_17:
  if (*(_QWORD *)(a2 + 16))
    v4 = *(const CoreML::Specification::ModelDescription **)(a2 + 16);
  CoreML::validateFeatureDescriptions<CoreML::Specification::ModelDescription>(&__p, (uint64_t)v4, *(_DWORD *)(a2 + 24), 0, 0);
  if ((__p & 0xFFFFFFEF) != 0)
  {
    v47 = v38;
    v46 = (uint64_t)__p;
    v48 = v39;
    goto LABEL_29;
  }
  CoreML::validateClassifierFeatureDescriptions((void **)&v46, v4, v9);
  if (SBYTE7(v39) < 0)
  {
    v10 = (void *)v38;
LABEL_28:
    operator delete(v10);
  }
LABEL_29:
  if ((v46 & 0xFFFFFFEF) != 0)
  {
    v11 = v48;
    *(_QWORD *)a1 = v46;
    *(_OWORD *)(a1 + 8) = v47;
    *(_QWORD *)(a1 + 24) = v11;
    goto LABEL_72;
  }
  CoreML::validateDescriptionsAreAllVectorizableTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&__p, (uint64_t)&v50);
  v13 = (int)__p;
  v46 = (uint64_t)__p;
  if (SHIBYTE(v48) < 0)
  {
    operator delete((void *)v47);
    v13 = v46;
  }
  v47 = v38;
  v48 = v39;
  if ((v13 & 0xFFFFFFEF) != 0)
  {
    *(_QWORD *)a1 = v46;
    *(_OWORD *)(a1 + 8) = v47;
    *(_QWORD *)(a1 + 24) = v48;
    goto LABEL_72;
  }
  if (*(_DWORD *)(a2 + 44) == 400)
  {
    v14 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(v12);
    v14 = &CoreML::Specification::_GLMClassifier_default_instance_;
  }
  __p = &off_1E3D4E2D0;
  v38 = 0u;
  v39 = 0u;
  v15 = *((_DWORD *)v14 + 6);
  if (v15)
  {
    v16 = v14[4];
    v17 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)((char *)&v38 + 8), *((_DWORD *)v14 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>((uint64_t *)&v38 + 1, (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)v17, (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)(v16 + 8), v15, **((_DWORD **)&v39 + 1) - v39);
    v18 = v39 + v15;
    LODWORD(v39) = v18;
    if (**((_DWORD **)&v39 + 1) < v18)
      **((_DWORD **)&v39 + 1) = v18;
  }
  v40 = 0;
  v41 = 0;
  v19 = *((_DWORD *)v14 + 10);
  if (v19)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v40, v19);
    memcpy((void *)(v41 + 8), (const void *)(v14[6] + 8), 8 * *((int *)v14 + 10));
    LODWORD(v40) = *((_DWORD *)v14 + 10);
  }
  v44 = 0;
  v20 = v14[1];
  if ((v20 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&v38, v20 & 0xFFFFFFFFFFFFFFFELL);
  v42 = *(uint64_t *)((char *)v14 + 60);
  v45 = 0;
  v21 = *((_DWORD *)v14 + 21);
  if (v21 == 100)
  {
    v45 = 100;
    v25 = (CoreML::Specification::StringVector *)operator new();
    v26 = CoreML::Specification::StringVector::StringVector(v25);
    v43 = v25;
    if (*((_DWORD *)v14 + 21) == 100)
    {
      v27 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)v14[9];
    }
    else
    {
      CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v26);
      v27 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)&CoreML::Specification::_StringVector_default_instance_;
    }
    CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v25, v27);
  }
  else if (v21 == 101)
  {
    v45 = 101;
    v22 = (CoreML::Specification::Int64Vector *)operator new();
    v23 = CoreML::Specification::Int64Vector::Int64Vector(v22);
    v43 = v22;
    if (*((_DWORD *)v14 + 21) == 101)
    {
      v24 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)v14[9];
    }
    else
    {
      CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v23);
      v24 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&CoreML::Specification::_Int64Vector_default_instance_;
    }
    CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v22, v24);
  }
  if (v42 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "Invalid post evaluation transform");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
    goto LABEL_68;
  }
  if (HIDWORD(v42) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "Invalid class encoding");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
    goto LABEL_68;
  }
  if (!(_DWORD)v39)
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "The number of DoubleArrays in weights must be greater than zero");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
    goto LABEL_68;
  }
  if ((_DWORD)v39 != (_DWORD)v40)
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "The number of DoubleArrays in weights must match number of offsets");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
    goto LABEL_68;
  }
  if (v45)
  {
    if (v45 == 100)
    {
      v28 = *((_DWORD *)v43 + 6);
    }
    else if (v45 == 101)
    {
      v28 = *((_DWORD *)v43 + 4);
    }
    else
    {
      v28 = 0;
    }
  }
  else
  {
    v28 = -1;
  }
  if (!HIDWORD(v42))
  {
    if (v28 != -1 && (_DWORD)v39 != v28 - 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v34, "With ReferenceClass encoding the number of DoubleArrays in weights must be one less than number of classes");
      *(_QWORD *)a1 = 13;
      std::operator+<char>();
      goto LABEL_68;
    }
    goto LABEL_85;
  }
  if (v28 == -1)
    goto LABEL_88;
  if (v28 != 2)
  {
    if ((_DWORD)v39 != v28)
    {
      std::string::basic_string[abi:ne180100]<0>(&v34, "With OneVsRest encoding the number of DoubleArrays in weights must equal the number of classes");
      *(_QWORD *)a1 = 13;
      std::operator+<char>();
      goto LABEL_68;
    }
LABEL_85:
    if (v28 < 3 || (_DWORD)v42 != 1)
      goto LABEL_88;
    std::string::basic_string[abi:ne180100]<0>(&v34, "Probit post evaluation transform is only supported for binary classification");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
LABEL_68:
    if (SHIBYTE(v36) < 0)
      operator delete(v34);
    goto LABEL_70;
  }
  if ((_DWORD)v39 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "When using OneVsRest encoding for only two classes, the number of DoubleArrays in weights must be one");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
    goto LABEL_68;
  }
LABEL_88:
  google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)&v34, (uint64_t)&v38 + 8);
  v29 = *(_DWORD *)(*(_QWORD *)(v36 + 8) + 16);
  if (!v29)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "Weight DoubleArrays must have nonzero length");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
LABEL_97:
    if (v33 < 0)
      operator delete(v32[0]);
    goto LABEL_99;
  }
  if (v35 >= 2)
  {
    v30 = v36 + 16;
    v31 = v35 - 1;
    while (v29 == *(_DWORD *)(*(_QWORD *)v30 + 16))
    {
      v30 += 8;
      if (!--v31)
        goto LABEL_93;
    }
    std::string::basic_string[abi:ne180100]<0>(v32, "Weight DoubleArrays must have the same length");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
    goto LABEL_97;
  }
LABEL_93:
  CoreML::Result::Result((CoreML::Result *)a1);
LABEL_99:
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(&v34);
LABEL_70:
  CoreML::Specification::GLMClassifier::~GLMClassifier((CoreML::Specification::GLMClassifier *)&__p);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
LABEL_72:
  CoreML::Specification::ModelDescription::~ModelDescription((CoreML::Specification::ModelDescription *)v49);
}

void sub_19C9F95AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  if (a15 < 0)
    operator delete(__p);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(&a16);
  CoreML::Specification::GLMClassifier::~GLMClassifier((CoreML::Specification::GLMClassifier *)&a22);
  if (a45 < 0)
    operator delete(a40);
  CoreML::Specification::ModelDescription::~ModelDescription((CoreML::Specification::ModelDescription *)&a46);
  _Unwind_Resume(a1);
}

google::protobuf::internal::RepeatedPtrFieldBase *google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::RepeatedPtrField(google::protobuf::internal::RepeatedPtrFieldBase *this, uint64_t a2)
{
  unsigned int v3;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v4;
  unsigned int *v5;
  signed int v6;
  signed int *v7;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    v4 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)(*(_QWORD *)(a2 + 16) + 8);
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(this, *(_DWORD *)(a2 + 8));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>((uint64_t *)this, (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)v5, v4, v3, **((_DWORD **)this + 2) - *((_DWORD *)this + 2));
    v6 = *((_DWORD *)this + 2) + v3;
    *((_DWORD *)this + 2) = v6;
    v7 = (signed int *)*((_QWORD *)this + 2);
    if (*v7 < v6)
      *v7 = v6;
  }
  return this;
}

uint64_t *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>(uint64_t *result, CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **a2, CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **a3, unsigned int a4, unsigned int a5)
{
  google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v11;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v12;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v13;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v14;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v15;
  BOOL v16;
  int v17;
  google::protobuf::Arena *v18;
  CoreML::Specification::GLMClassifier_DoubleArray **v19;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v20;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v21;
  CoreML::Specification::GLMClassifier_DoubleArray *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;

  v9 = (google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMClassifier_DoubleArray>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20;
      if (v18)
      {
        CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(Aligned);
        v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
        *v23 = Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMClassifier_DoubleArray>;
        v24 = (unint64_t *)((char *)v18 + 32);
        do
          v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
      }
      else
      {
        Aligned = (CoreML::Specification::GLMClassifier_DoubleArray *)operator new();
        CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(Aligned);
      }
      result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMClassifier_DoubleArray>::Merge(v21, Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_19C9F98D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMClassifier_DoubleArray>::Merge(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *a1, CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  return CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)this, a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMClassifier_DoubleArray>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t CoreML::RangeValue::value(CoreML::RangeValue *this)
{
  void *exception;

  if (*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Attempting to access unbound size_t val from RangeVal.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return *((_QWORD *)this + 1);
}

void sub_19C9F996C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *operator<<(_QWORD *a1, CoreML::RangeValue *this)
{
  void **v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v7;

  if (*(_BYTE *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "inf");
    if ((v7 & 0x80u) == 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    if ((v7 & 0x80u) == 0)
      v4 = v7;
    else
      v4 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    if ((char)v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    CoreML::RangeValue::value(this);
    std::ostream::operator<<();
  }
  return a1;
}

void sub_19C9F9A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::RangeValue::operator/(CoreML::RangeValue *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  std::runtime_error *exception;
  std::string v7;
  _BYTE v8[16];
  _QWORD v9[33];

  if (*(_BYTE *)a1)
    return 1;
  if (!a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Dividing range ", 15);
    v5 = operator<<(v4, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" by 0.", 6);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v7);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return 0;
}

void sub_19C9F9AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::ShapeRange(uint64_t this, unint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  std::runtime_error *exception;
  std::string v5;
  _BYTE v6[16];
  _QWORD v7[33];

  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 8) = a2;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = a3;
  if (a2 > a3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Constructing invalid ShapeRange with ", 37);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v5);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return this;
}

void sub_19C9F9C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

CoreML::ShapeRange *CoreML::ShapeRange::ShapeRange(CoreML::ShapeRange *this, const CoreML::RangeValue *a2, const CoreML::RangeValue *a3)
{
  unint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::runtime_error *exception;
  std::runtime_error *v12;
  std::string v13;
  _BYTE v14[16];
  _QWORD v15[33];

  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = *(_OWORD *)a3;
  if (*(_BYTE *)a2)
    goto LABEL_6;
  if (*(_BYTE *)a3)
    return this;
  v6 = *((_QWORD *)a2 + 1);
  if (v6 > CoreML::RangeValue::value(a3))
  {
LABEL_6:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Constructing invalid ShapeRange with ", 37);
    v9 = operator<<(v8, a2);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
    operator<<(v10, a3);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_BYTE *)a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Constructing invalid ShapeRange unbound minimum value.", 54);
    v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v12, &v13);
    __cxa_throw(v12, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return this;
}

void sub_19C9F9DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::operator+(CoreML::ShapeRange *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v6 = 1;
  *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 3) = 0;
  if (*(_BYTE *)a2)
  {
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(a2 + 8) + a3;
  }
  v11 = v6;
  v12 = v7;
  CoreML::ShapeRange::setLower(this, (const CoreML::RangeValue *)&v11);
  if (*(_BYTE *)(a2 + 16))
  {
    v8 = 0;
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v8 = *(_QWORD *)(a2 + 24) + a3;
  }
  v11 = v9;
  v12 = v8;
  return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v11);
}

uint64_t CoreML::ShapeRange::setLower(CoreML::ShapeRange *this, const CoreML::RangeValue *a2)
{
  uint64_t result;
  char v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::runtime_error *exception;
  std::string v11;
  _BYTE v12[16];
  _QWORD v13[33];

  result = CoreML::ShapeRange::isValid(this, a2);
  if (!(_DWORD)result)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Invalid setLower ", 17);
    v7 = operator<<(v6, a2);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" for range: ", 12);
    v9 = operator<<(v8, (__int128 *)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v11);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_BYTE *)a2)
  {
    v5 = 1;
  }
  else
  {
    result = CoreML::RangeValue::value(a2);
    v5 = 0;
    *((_QWORD *)this + 1) = result;
  }
  *(_BYTE *)this = v5;
  return result;
}

void sub_19C9F9FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::setUpper(CoreML::ShapeRange *this, const CoreML::RangeValue *a2)
{
  uint64_t result;
  char v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::runtime_error *exception;
  std::string v11;
  _BYTE v12[16];
  _QWORD v13[33];

  result = CoreML::ShapeRange::isValid(this, a2);
  if (!(_DWORD)result)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Invalid setUpper ", 17);
    v7 = operator<<(v6, a2);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" for range: ", 12);
    v9 = operator<<(v8, (__int128 *)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v11);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_BYTE *)a2)
  {
    v5 = 1;
  }
  else
  {
    result = CoreML::RangeValue::value(a2);
    v5 = 0;
    *((_QWORD *)this + 3) = result;
  }
  *((_BYTE *)this + 16) = v5;
  return result;
}

void sub_19C9FA100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

BOOL CoreML::ShapeRange::isValid(CoreML::ShapeRange *this, const CoreML::RangeValue *a2)
{
  unint64_t v5;
  unint64_t v6;

  if (!*(_BYTE *)a2)
  {
    if (*(_BYTE *)this)
      return 0;
    v5 = *((_QWORD *)this + 1);
    if (v5 > CoreML::RangeValue::value(a2))
      return 0;
  }
  if (*((_BYTE *)this + 16))
    return 1;
  if (*(_BYTE *)a2)
    return 0;
  v6 = *((_QWORD *)this + 3);
  return v6 >= CoreML::RangeValue::value(a2);
}

_QWORD *operator<<(_QWORD *a1, __int128 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v9;
  __int128 v10;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  v10 = *a2;
  v5 = operator<<(v4, (CoreML::RangeValue *)&v10);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  v9 = a2[1];
  v7 = operator<<(v6, (CoreML::RangeValue *)&v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"]", 1);
  return a1;
}

uint64_t CoreML::ShapeRange::operator-(CoreML::ShapeRange *this, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v6 = 1;
  *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 3) = 0;
  if (*(_BYTE *)a2)
  {
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = v8 >= a3;
    v7 = v8 - a3;
    if (!v9)
      v7 = 0;
  }
  v14 = v6;
  v15 = v7;
  CoreML::ShapeRange::setLower(this, (const CoreML::RangeValue *)&v14);
  if (*(_BYTE *)(a2 + 16))
  {
    v10 = 0;
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v12 = *(_QWORD *)(a2 + 24);
    v9 = v12 >= a3;
    v10 = v12 - a3;
    if (!v9)
      v10 = 0;
  }
  v14 = v11;
  v15 = v10;
  return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v14);
}

uint64_t CoreML::ShapeRange::operator*(CoreML::ShapeRange *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v6 = 1;
  *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 3) = 0;
  if (*(_BYTE *)a2)
  {
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(a2 + 8) * a3;
  }
  v11 = v6;
  v12 = v7;
  CoreML::ShapeRange::setLower(this, (const CoreML::RangeValue *)&v11);
  if (*(_BYTE *)(a2 + 16))
  {
    v8 = 0;
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v8 = *(_QWORD *)(a2 + 24) * a3;
  }
  v11 = v9;
  v12 = v8;
  return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v11);
}

uint64_t CoreML::ShapeRange::operator/(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  v9 = CoreML::RangeValue::operator/((CoreML::RangeValue *)a2, a3);
  v10 = v6;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a1, (const CoreML::RangeValue *)&v9);
  v9 = CoreML::RangeValue::operator/((CoreML::RangeValue *)(a2 + 16), a3);
  v10 = v7;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a1, (const CoreML::RangeValue *)&v9);
}

uint64_t CoreML::ShapeRange::divideAndRoundUp(CoreML::ShapeRange *this, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;

  v6 = 0;
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v7 = 1;
  *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 3) = 0;
  if (a3)
  {
    if (!*(_BYTE *)a2)
    {
      v6 = *(_QWORD *)(a2 + 8);
      v7 = 0;
      if (v6)
        v6 = (v6 - 1) / a3 + 1;
    }
  }
  v11 = v7;
  v12 = v6;
  CoreML::ShapeRange::setLower(this, (const CoreML::RangeValue *)&v11);
  v8 = 0;
  v9 = 1;
  if (a3)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      v8 = *(_QWORD *)(a2 + 24);
      v9 = 0;
      if (v8)
        v8 = (v8 - 1) / a3 + 1;
    }
  }
  v11 = v9;
  v12 = v8;
  return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v11);
}

uint64_t CoreML::ShapeRange::operator+(CoreML::ShapeRange *this, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v6 = 1;
  *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 3) = 0;
  v13 = *a3;
  if ((_BYTE)v13)
  {
    v7 = 0;
  }
  else
  {
    v8 = CoreML::RangeValue::value((CoreML::RangeValue *)&v13);
    if (*(_BYTE *)a2)
    {
      v7 = 0;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v7 = *(_QWORD *)(a2 + 8) + v8;
    }
  }
  v14 = v6;
  v15 = v7;
  CoreML::ShapeRange::setLower(this, (const CoreML::RangeValue *)&v14);
  v13 = a3[1];
  if ((_BYTE)v13 || (v9 = CoreML::RangeValue::value((CoreML::RangeValue *)&v13), *(_BYTE *)(a2 + 16)))
  {
    v10 = 0;
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v10 = *(_QWORD *)(a2 + 24) + v9;
  }
  v14 = v11;
  v15 = v10;
  return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v14);
}

uint64_t CoreML::ShapeRange::operator+(CoreML::ShapeRange *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 3) = 0;
  if ((a3 & 0x80000000) == 0)
  {
    if (!*(_BYTE *)a2)
    {
      v6 = 0;
      v7 = *(_QWORD *)(a2 + 8) + a3;
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (*(_BYTE *)a2)
  {
LABEL_5:
    v7 = 0;
    v6 = 1;
    goto LABEL_6;
  }
  v6 = 0;
  v11 = -a3;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = v12 >= v11;
  v7 = v12 - v11;
  if (!v13)
    v7 = 0;
LABEL_6:
  v16 = v6;
  v17 = v7;
  CoreML::ShapeRange::setLower(this, (const CoreML::RangeValue *)&v16);
  if ((a3 & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      v8 = 0;
      v9 = *(_QWORD *)(a2 + 24) + a3;
      goto LABEL_11;
    }
LABEL_10:
    v9 = 0;
    v8 = 1;
    goto LABEL_11;
  }
  if (*(_BYTE *)(a2 + 16))
    goto LABEL_10;
  v8 = 0;
  v14 = -a3;
  v15 = *(_QWORD *)(a2 + 24);
  v13 = v15 >= v14;
  v9 = v15 - v14;
  if (!v13)
    v9 = 0;
LABEL_11:
  v16 = v8;
  v17 = v9;
  return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v16);
}

uint64_t CoreML::ShapeRange::operator-(CoreML::ShapeRange *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v6 = 1;
  *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 3) = 0;
  if (*(_BYTE *)a2)
  {
    v7 = 0;
  }
  else
  {
    v6 = 0;
    if ((a3 & 0x80000000) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8) + -a3;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = v8 >= a3;
      v7 = v8 - a3;
      if (!v9)
        v7 = 0;
    }
  }
  v14 = v6;
  v15 = v7;
  CoreML::ShapeRange::setLower(this, (const CoreML::RangeValue *)&v14);
  if (*(_BYTE *)(a2 + 16))
  {
    v10 = 0;
    v11 = 1;
  }
  else
  {
    v11 = 0;
    if ((a3 & 0x80000000) != 0)
    {
      v10 = *(_QWORD *)(a2 + 24) + -a3;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 24);
      v9 = v12 >= a3;
      v10 = v12 - a3;
      if (!v9)
        v10 = 0;
    }
  }
  v14 = v11;
  v15 = v10;
  return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v14);
}

uint64_t CoreML::ShapeRange::operator*(CoreML::ShapeRange *this, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v6 = 1;
  *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 3) = 0;
  v13 = *a3;
  if ((_BYTE)v13)
  {
    v7 = 0;
  }
  else
  {
    v8 = CoreML::RangeValue::value((CoreML::RangeValue *)&v13);
    if (*(_BYTE *)a2)
    {
      v7 = 0;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v7 = *(_QWORD *)(a2 + 8) * v8;
    }
  }
  v14 = v6;
  v15 = v7;
  CoreML::ShapeRange::setLower(this, (const CoreML::RangeValue *)&v14);
  v13 = a3[1];
  if ((_BYTE)v13 || (v9 = CoreML::RangeValue::value((CoreML::RangeValue *)&v13), *(_BYTE *)(a2 + 16)))
  {
    v10 = 0;
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v10 = *(_QWORD *)(a2 + 24) * v9;
  }
  v14 = v11;
  v15 = v10;
  return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v14);
}

uint64_t CoreML::ShapeRange::operator/(uint64_t a1, __int128 *a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  std::runtime_error *exception;
  std::string v8;
  _BYTE v9[16];
  _QWORD v10[33];

  if (a3 <= 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Dividing ShapeRange ", 20);
    v6 = operator<<(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" by negative or zero value ", 27);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v8);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return CoreML::ShapeRange::operator/(a1, (uint64_t)a2, a3);
}

void sub_19C9FA93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::setValue(uint64_t this, unint64_t a2)
{
  __int128 *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  std::runtime_error *exception;
  std::string v7;
  _BYTE v8[16];
  _QWORD v9[33];

  if (*(_BYTE *)this || *(_QWORD *)(this + 8) > a2 || !*(_BYTE *)(this + 16) && *(_QWORD *)(this + 24) < a2)
  {
    v2 = (__int128 *)this;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Invalid setValue ", 17);
    v3 = (_QWORD *)std::ostream::operator<<();
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" for range: ", 12);
    v5 = operator<<(v4, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v7);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)(this + 8) = a2;
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 24) = a2;
  *(_BYTE *)(this + 16) = 0;
  return this;
}

void sub_19C9FAA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unint64_t CoreML::ShapeRange::intersect(CoreML::ShapeRange *this, const CoreML::ShapeRange *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  const CoreML::RangeValue *v8;
  CoreML::ShapeRange *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const CoreML::RangeValue *v14;
  CoreML::ShapeRange *v15;
  unint64_t v16;
  unint64_t result;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  std::runtime_error *exception;
  std::string v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[33];

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 3) = 0;
  v6 = *(_QWORD *)a3;
  v7 = *((_QWORD *)a3 + 1);
  v24 = v6;
  v25 = v7;
  if ((_BYTE)v6)
    goto LABEL_2;
  if (!*(_BYTE *)a2)
  {
    v10 = *((_QWORD *)a2 + 1);
    if (v10 <= CoreML::RangeValue::value((CoreML::RangeValue *)&v24))
    {
      v6 = *(_QWORD *)a3;
      v7 = *((_QWORD *)a3 + 1);
LABEL_2:
      v24 = v6;
      v25 = v7;
      v8 = (const CoreML::RangeValue *)&v24;
      v9 = this;
      goto LABEL_6;
    }
  }
  v9 = this;
  v8 = a2;
LABEL_6:
  CoreML::ShapeRange::setLower(v9, v8);
  v11 = *((unsigned __int8 *)a2 + 16);
  v12 = *((_QWORD *)a3 + 2);
  v13 = *((_QWORD *)a3 + 3);
  v24 = v12;
  v25 = v13;
  if (!v11)
  {
    if ((_BYTE)v12 || (v16 = *((_QWORD *)a2 + 3), v16 < CoreML::RangeValue::value((CoreML::RangeValue *)&v24)))
    {
      v15 = this;
      v14 = (const CoreML::ShapeRange *)((char *)a2 + 16);
      goto LABEL_11;
    }
    v12 = *((_QWORD *)a3 + 2);
    v13 = *((_QWORD *)a3 + 3);
  }
  v24 = v12;
  v25 = v13;
  v14 = (const CoreML::RangeValue *)&v24;
  v15 = this;
LABEL_11:
  result = CoreML::ShapeRange::setUpper(v15, v14);
  if (*(_BYTE *)a2
    || !*((_BYTE *)a2 + 16)
    && ((v18 = *((_QWORD *)a2 + 1),
         result = CoreML::RangeValue::value((const CoreML::ShapeRange *)((char *)a2 + 16)),
         v18 > result)
     || *(_BYTE *)a2))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v24);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Invalid intersection between ", 29);
    v20 = operator<<(v19, (__int128 *)a2);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" and ", 5);
    operator<<(v21, a3);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_19C9FAC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::unify(CoreML::ShapeRange *this, const CoreML::ShapeRange *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  CoreML::ShapeRange *v8;
  const CoreML::RangeValue *v9;
  unint64_t v10;
  int v11;
  const CoreML::RangeValue *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 3) = 0;
  v6 = *a3;
  v7 = a3[1];
  v17 = v6;
  v18 = v7;
  if ((_BYTE)v6)
    goto LABEL_2;
  if (!*(_BYTE *)a2)
  {
    v10 = *((_QWORD *)a2 + 1);
    if (v10 <= CoreML::RangeValue::value((CoreML::RangeValue *)&v17))
    {
LABEL_2:
      v8 = this;
      v9 = a2;
      goto LABEL_7;
    }
    v6 = *a3;
    v7 = a3[1];
  }
  v17 = v6;
  v18 = v7;
  v9 = (const CoreML::RangeValue *)&v17;
  v8 = this;
LABEL_7:
  CoreML::ShapeRange::setLower(v8, v9);
  v12 = (const CoreML::ShapeRange *)((char *)a2 + 16);
  v11 = *((unsigned __int8 *)a2 + 16);
  v13 = a3[2];
  v14 = a3[3];
  v17 = v13;
  v18 = v14;
  if (v11)
    return CoreML::ShapeRange::setUpper(this, v12);
  if (!(_BYTE)v13)
  {
    v16 = *((_QWORD *)a2 + 3);
    if (v16 >= CoreML::RangeValue::value((CoreML::RangeValue *)&v17))
      return CoreML::ShapeRange::setUpper(this, v12);
    v13 = a3[2];
    v14 = a3[3];
  }
  v17 = v13;
  v18 = v14;
  return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v17);
}

BOOL CoreML::ShapeRange::isFixed(CoreML::ShapeRange *this)
{
  CoreML::RangeValue *v2;
  int v3;
  uint64_t v5;

  v3 = *((unsigned __int8 *)this + 16);
  v2 = (CoreML::ShapeRange *)((char *)this + 16);
  if (v3)
    return 0;
  v5 = CoreML::RangeValue::value(v2);
  return v5 == CoreML::RangeValue::value(this);
}

double CoreML::ShapeConstraint::updateWidthRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  _OWORD *v2;
  double result;
  __int128 v4;
  _OWORD v5[2];

  v2 = (_OWORD *)((char *)this + 128);
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)v5, (CoreML::ShapeConstraint *)((char *)this + 128), (__int128 *)a2);
  result = *(double *)v5;
  v4 = v5[1];
  *v2 = v5[0];
  v2[1] = v4;
  return result;
}

double CoreML::ShapeConstraint::updateHeightRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  _OWORD *v2;
  double result;
  __int128 v4;
  _OWORD v5[2];

  v2 = (_OWORD *)((char *)this + 96);
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)v5, (CoreML::ShapeConstraint *)((char *)this + 96), (__int128 *)a2);
  result = *(double *)v5;
  v4 = v5[1];
  *v2 = v5[0];
  v2[1] = v4;
  return result;
}

double CoreML::ShapeConstraint::updateChannelRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  _OWORD *v2;
  double result;
  __int128 v4;
  _OWORD v5[2];

  v2 = (_OWORD *)((char *)this + 64);
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)v5, (CoreML::ShapeConstraint *)((char *)this + 64), (__int128 *)a2);
  result = *(double *)v5;
  v4 = v5[1];
  *v2 = v5[0];
  v2[1] = v4;
  return result;
}

double CoreML::ShapeConstraint::updateSequenceRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  double result;
  __int128 v4;
  _OWORD v5[2];

  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)v5, this, (__int128 *)a2);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)this = v5[0];
  *((_OWORD *)this + 1) = v4;
  return result;
}

double CoreML::ShapeConstraint::updateBatchRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  _OWORD *v2;
  double result;
  __int128 v4;
  _OWORD v5[2];

  v2 = (_OWORD *)((char *)this + 32);
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)v5, (CoreML::ShapeConstraint *)((char *)this + 32), (__int128 *)a2);
  result = *(double *)v5;
  v4 = v5[1];
  *v2 = v5[0];
  v2[1] = v4;
  return result;
}

double CoreML::ShapeConstraint::copyFrom(CoreML::ShapeConstraint *this, const CoreML::ShapeConstraint *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v10, this, (__int128 *)a2);
  v4 = v11;
  *(_OWORD *)this = v10;
  *((_OWORD *)this + 1) = v4;
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v10, (CoreML::ShapeConstraint *)((char *)this + 32), (__int128 *)a2 + 2);
  v5 = v11;
  *((_OWORD *)this + 2) = v10;
  *((_OWORD *)this + 3) = v5;
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v10, (CoreML::ShapeConstraint *)((char *)this + 64), (__int128 *)a2 + 4);
  v6 = v11;
  *((_OWORD *)this + 4) = v10;
  *((_OWORD *)this + 5) = v6;
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v10, (CoreML::ShapeConstraint *)((char *)this + 96), (__int128 *)a2 + 6);
  v7 = v11;
  *((_OWORD *)this + 6) = v10;
  *((_OWORD *)this + 7) = v7;
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v10, (CoreML::ShapeConstraint *)((char *)this + 128), (__int128 *)a2 + 8);
  result = *(double *)&v10;
  v9 = v11;
  *((_OWORD *)this + 8) = v10;
  *((_OWORD *)this + 9) = v9;
  return result;
}

double CoreML::ShapeConstraint::upperBoundHeight(CoreML::ShapeConstraint *this, const CoreML::RangeValue *a2)
{
  const CoreML::ShapeRange *v3;
  double result;
  __int128 v5;
  _BYTE v6[8];
  uint64_t v7;
  __int128 v8[2];
  _OWORD v9[2];

  if (!*(_BYTE *)a2)
  {
    v3 = (CoreML::ShapeConstraint *)((char *)this + 96);
    v6[0] = 0;
    v7 = 0;
    CoreML::ShapeRange::ShapeRange((CoreML::ShapeRange *)v8, (const CoreML::RangeValue *)v6, a2);
    CoreML::ShapeRange::intersect((CoreML::ShapeRange *)v9, v3, v8);
    result = *(double *)v9;
    v5 = v9[1];
    *((_OWORD *)this + 6) = v9[0];
    *((_OWORD *)this + 7) = v5;
  }
  return result;
}

double CoreML::ShapeConstraint::upperBoundWidth(CoreML::ShapeConstraint *this, const CoreML::RangeValue *a2)
{
  const CoreML::ShapeRange *v3;
  double result;
  __int128 v5;
  _BYTE v6[8];
  uint64_t v7;
  __int128 v8[2];
  _OWORD v9[2];

  if (!*(_BYTE *)a2)
  {
    v3 = (CoreML::ShapeConstraint *)((char *)this + 128);
    v6[0] = 0;
    v7 = 0;
    CoreML::ShapeRange::ShapeRange((CoreML::ShapeRange *)v8, (const CoreML::RangeValue *)v6, a2);
    CoreML::ShapeRange::intersect((CoreML::ShapeRange *)v9, v3, v8);
    result = *(double *)v9;
    v5 = v9[1];
    *((_OWORD *)this + 8) = v9[0];
    *((_OWORD *)this + 9) = v5;
  }
  return result;
}

BOOL CoreML::ShapeConstraint::hasFixedCHW(CoreML::ShapeConstraint *this)
{
  return CoreML::ShapeRange::isFixed((CoreML::ShapeConstraint *)((char *)this + 64))
      && CoreML::ShapeRange::isFixed((CoreML::ShapeConstraint *)((char *)this + 96))
      && CoreML::ShapeRange::isFixed((CoreML::ShapeConstraint *)((char *)this + 128));
}

void CoreML::validate<(MLModelType)2003>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  unint64_t *inited;
  void *v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  const CoreML::Specification::FeatureType *v16;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v17;
  uint64_t *v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v25;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v26;
  uint64_t *v27;
  const CoreML::Specification::FeatureType *v28;
  CoreML::Specification::FeatureType *v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  const char *v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v45;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v46;
  uint64_t *v47;
  int v48;
  const char *v49;
  size_t v50;
  _QWORD *v51;
  _QWORD *v52;
  void **v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59[2];
  unsigned __int8 v60;
  void *v61[2];
  unsigned __int8 v62;
  uint64_t *v63;
  int v64;
  int v65;
  void *v66;
  std::locale v67;
  char *v68;
  char *v69;
  uint64_t *v70;
  int v71;
  void *__p;
  __int128 v73;
  uint64_t v74;
  void *v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  void *v80;
  __int128 v81;
  uint64_t v82;

  if (*(_QWORD *)(a2 + 16))
    v3 = *(uint64_t **)(a2 + 16);
  else
    v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_DWORD *)(a2 + 44) == 2003)
  {
    CoreML::Result::Result((CoreML::Result *)&v80);
    v5 = (std::locale::__imp *)operator new(4uLL);
    *(_DWORD *)v5 = 5;
    v68 = (char *)v5 + 4;
    v69 = (char *)v5 + 4;
    v67.__locale_ = v5;
    CoreML::validateDescriptionsContainFeatureWithTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&__p, (uint64_t)(v3 + 2), 1, (unsigned int **)&v67);
    v80 = __p;
    if (SHIBYTE(v82) < 0)
      operator delete((void *)v81);
    v81 = v73;
    v82 = v74;
    HIBYTE(v74) = 0;
    LOBYTE(v73) = 0;
    operator delete(v5);
    if ((v80 & 0xFFFFFFEF) != 0)
      goto LABEL_11;
    v6 = (std::locale::__imp *)operator new(4uLL);
    *(_DWORD *)v6 = 5;
    v68 = (char *)v6 + 4;
    v69 = (char *)v6 + 4;
    v67.__locale_ = v6;
    CoreML::validateDescriptionsContainFeatureWithTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&__p, (uint64_t)(v3 + 5), 1, (unsigned int **)&v67);
    v80 = __p;
    if (SHIBYTE(v82) < 0)
      operator delete((void *)v81);
    v81 = v73;
    v82 = v74;
    HIBYTE(v74) = 0;
    LOBYTE(v73) = 0;
    operator delete(v6);
    if ((v80 & 0xFFFFFFEF) != 0)
      goto LABEL_11;
    if (*(_DWORD *)(a2 + 44) == 2003)
    {
      v9 = *(uint64_t **)(a2 + 32);
    }
    else
    {
      inited = CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto *)inited);
      v9 = &CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_default_instance_;
    }
    v10 = *((_DWORD *)v9 + 7);
    if (!v10)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Type for sound analysis preprocessing not set");
      *(_QWORD *)a1 = 13;
      std::operator+<char>();
      if (SHIBYTE(v73) < 0)
        operator delete(__p);
      goto LABEL_12;
    }
    if (v10 != 20)
    {
LABEL_11:
      *(_QWORD *)a1 = v80;
      *(_OWORD *)(a1 + 8) = v81;
      *(_QWORD *)(a1 + 24) = v82;
      v81 = 0uLL;
      v82 = 0;
LABEL_12:
      if ((SHIBYTE(v82) & 0x80000000) == 0)
        return;
      v8 = (void *)v81;
      goto LABEL_16;
    }
    v11 = *(uint64_t **)(*(_QWORD *)(v3[4] + 8) + 32);
    if (!v11)
      v11 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v11 + 9) == 5)
    {
      v12 = (uint64_t *)v11[3];
    }
    else
    {
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
      v12 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
    }
    v78 = 0;
    v79 = 0;
    v13 = *((_DWORD *)v12 + 4);
    if (v13)
    {
      google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v78, v13);
      v14 = v79;
      v15 = v79 + 1;
      memcpy(v79 + 1, (const void *)(v12[3] + 8), 8 * *((int *)v12 + 4));
      LODWORD(v78) = *((_DWORD *)v12 + 4);
      if ((_DWORD)v78 == 1 && *v15 == 15600)
      {
        if (*(_QWORD *)(*(_QWORD *)(v3[4] + 8) + 32))
          v16 = *(const CoreML::Specification::FeatureType **)(*(_QWORD *)(v3[4] + 8) + 32);
        else
          v16 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
        v17 = CoreML::Specification::FeatureType::FeatureType((CoreML::Specification::FeatureType *)&v67, v16);
        if (v71 == 5)
        {
          v18 = v70;
        }
        else
        {
          v17 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v17);
          v18 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        if (*((_DWORD *)v18 + 9) == 65568)
        {
          v23 = *(uint64_t **)(*(_QWORD *)(v3[7] + 8) + 32);
          if (!v23)
            v23 = &CoreML::Specification::_FeatureType_default_instance_;
          if (*((_DWORD *)v23 + 9) == 5)
          {
            v24 = (uint64_t *)v23[3];
          }
          else
          {
            CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v17);
            v24 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
          }
          google::protobuf::RepeatedField<long long>::RepeatedField((uint64_t)&v65, (int *)v24 + 4);
          if (v65 == 3 && *((_QWORD *)v66 + 1) == 1 && *((_QWORD *)v66 + 2) == 96 && *((_QWORD *)v66 + 3) == 64)
          {
            if (*(_QWORD *)(*(_QWORD *)(v3[7] + 8) + 32))
              v28 = *(const CoreML::Specification::FeatureType **)(*(_QWORD *)(v3[7] + 8) + 32);
            else
              v28 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
            v29 = CoreML::Specification::FeatureType::FeatureType((CoreML::Specification::FeatureType *)v61, v28);
            if (v64 == 5)
            {
              v30 = v63;
            }
            else
            {
              CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v29);
              v30 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
            }
            if (*((_DWORD *)v30 + 9) == 65568)
            {
              v22 = 2;
            }
            else
            {
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
              v45 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v73 + 1, (uint64_t)"Unsupported array type \"", 24);
              v46 = v45;
              if (v64 == 5)
              {
                v47 = v63;
              }
              else
              {
                CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v45);
                v47 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
              }
              v48 = *((_DWORD *)v47 + 9);
              v49 = "INVALID";
              if (v48 > 65599)
              {
                if (v48 == 65600)
                {
                  v49 = "MLArrayDataTypeDOUBLE";
                }
                else if (v48 == 131104)
                {
                  v49 = "MLArrayDataTypeINT32";
                }
              }
              else if (v48 == 65552)
              {
                v49 = "MLArrayDataTypeFLOAT16";
              }
              else if (v48 == 65568)
              {
                v49 = "MLArrayDataTypeFLOAT32";
              }
              v50 = strlen(v49);
              v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v49, v50);
              v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\" for feature \"", 15);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v59, *(const void ***)(*(_QWORD *)(v3[4] + 8) + 16), "\". ");
              if ((v60 & 0x80u) == 0)
                v53 = v59;
              else
                v53 = (void **)v59[0];
              if ((v60 & 0x80u) == 0)
                v54 = v60;
              else
                v54 = (uint64_t)v59[1];
              v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
              v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Should be of: ", 14);
              v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"MLArrayDataTypeFLOAT32", 22);
              v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)".", 1);
              std::endl[abi:ne180100]<char,std::char_traits<char>>(v58);
              if ((char)v60 < 0)
                operator delete(v59[0]);
              std::stringbuf::str();
              *(_QWORD *)a1 = 8;
              std::operator+<char>();
              if ((char)v60 < 0)
                operator delete(v59[0]);
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
              v22 = 1;
            }
            CoreML::Specification::FeatureType::~FeatureType((CoreML::Specification::FeatureType *)v61);
          }
          else
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v73 + 1, (uint64_t)"Incorrect output shape, should be 3-dimension, of size: ", 56);
            v31 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"x", 1);
            v32 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"x", 1);
            v33 = (_QWORD *)std::ostream::operator<<();
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v33);
            std::stringbuf::str();
            *(_QWORD *)a1 = 8;
            std::operator+<char>();
            if ((char)v62 < 0)
              operator delete(v61[0]);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
            v22 = 1;
          }
          if (v66 && !*(_QWORD *)v66)
            operator delete(v66);
        }
        else
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
          v25 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v73 + 1, (uint64_t)"Unsupported array type \"", 24);
          v26 = v25;
          if (v71 == 5)
          {
            v27 = v70;
          }
          else
          {
            CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v25);
            v27 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
          }
          v34 = *((_DWORD *)v27 + 9);
          v35 = "INVALID";
          if (v34 > 65599)
          {
            if (v34 == 65600)
            {
              v35 = "MLArrayDataTypeDOUBLE";
            }
            else if (v34 == 131104)
            {
              v35 = "MLArrayDataTypeINT32";
            }
          }
          else if (v34 == 65552)
          {
            v35 = "MLArrayDataTypeFLOAT16";
          }
          else if (v34 == 65568)
          {
            v35 = "MLArrayDataTypeFLOAT32";
          }
          v36 = strlen(v35);
          v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v35, v36);
          v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\" for feature \"", 15);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v61, *(const void ***)(*(_QWORD *)(v3[4] + 8) + 16), "\". ");
          if ((v62 & 0x80u) == 0)
            v39 = v61;
          else
            v39 = (void **)v61[0];
          if ((v62 & 0x80u) == 0)
            v40 = v62;
          else
            v40 = (uint64_t)v61[1];
          v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
          v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Should be of: ", 14);
          v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"MLArrayDataTypeFLOAT32", 22);
          v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)".", 1);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v44);
          if ((char)v62 < 0)
            operator delete(v61[0]);
          std::stringbuf::str();
          *(_QWORD *)a1 = 8;
          std::operator+<char>();
          if ((char)v62 < 0)
            operator delete(v61[0]);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
          v22 = 1;
        }
        CoreML::Specification::FeatureType::~FeatureType((CoreML::Specification::FeatureType *)&v67);
        goto LABEL_91;
      }
    }
    else
    {
      v14 = 0;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v73 + 1, (uint64_t)"Incorrect input shape, should be 1-dimension, of length: ", 57);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
    v20 = std::locale::use_facet(&v67, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(&v67);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    *(_QWORD *)a1 = 8;
    std::operator+<char>();
    if (SHIBYTE(v69) < 0)
      operator delete(v67.__locale_);
    __p = (void *)*MEMORY[0x1E0DE4F50];
    v21 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
    *((_QWORD *)&v73 + 1) = v21;
    v74 = MEMORY[0x1E0DE4FB8] + 16;
    if (v76 < 0)
      operator delete(v75);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1A1AD61C4](&v77);
    if (!v14)
      goto LABEL_12;
    v22 = 1;
LABEL_91:
    if (!*v14)
      operator delete(v14);
    if (v22 != 2)
      goto LABEL_12;
    goto LABEL_11;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Model not a sound analysis preprocessing.");
  *(_QWORD *)a1 = 13;
  std::operator+<char>();
  if ((SHIBYTE(v73) & 0x80000000) == 0)
    return;
  v8 = __p;
LABEL_16:
  operator delete(v8);
}

void sub_19C9FC0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24,std::locale a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  _QWORD *v38;
  uint64_t v39;

  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a33);
  CoreML::Specification::FeatureType::~FeatureType((CoreML::Specification::FeatureType *)&a15);
  if (a24 && !*a24)
    operator delete(a24);
  CoreML::Specification::FeatureType::~FeatureType((CoreML::Specification::FeatureType *)&a25);
  if (!*v38)
    operator delete(v38);
  if (*(char *)(v39 - 65) < 0)
    operator delete(*(void **)(v39 - 88));
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<long long>::RepeatedField(uint64_t a1, int *a2)
{
  int v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *a2;
  if (v4)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)a1, v4);
    memcpy((void *)(*(_QWORD *)(a1 + 8) + 8), (const void *)(*((_QWORD *)a2 + 1) + 8), 8 * *a2);
    *(_DWORD *)a1 = *a2;
  }
  return a1;
}

void CoreML::validate<(MLModelType)601>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  int v6;
  unsigned int *v7;
  int v8;
  CoreML::Specification::protobuf_Imputer_2eproto *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  char v19;
  unint64_t *inited;
  uint64_t *v21;
  uint64_t *v22;
  char v23;
  unint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  uint64_t *v32;
  _QWORD *v33[2];
  uint64_t *v34;
  uint64_t *v35;
  char v36;
  unsigned int *v37[3];
  void *v38;
  __int128 v39;
  uint64_t v40;
  void *v41;
  __int128 __p;
  uint64_t v43;
  _QWORD v44[2];

  v44[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 16))
    v4 = *(uint64_t **)(a2 + 16);
  else
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::Result::Result((CoreML::Result *)&v41);
  v5 = *(_DWORD *)(a2 + 24);
  LODWORD(v37[0]) = 0;
  CoreML::validateModelDescription((uint64_t)&v38, (uint64_t)v4, v5, (char *)v37);
  v6 = (int)v38;
  v41 = v38;
  if (SHIBYTE(v43) < 0)
  {
    operator delete((void *)__p);
    v6 = (int)v41;
  }
  __p = v39;
  v43 = v40;
  if ((v6 & 0xFFFFFFEF) != 0)
  {
    *(_QWORD *)a1 = v41;
    *(_OWORD *)(a1 + 8) = __p;
    *(_QWORD *)(a1 + 24) = v43;
    return;
  }
  v7 = (unsigned int *)operator new(0x14uLL);
  v37[1] = v7 + 5;
  v37[2] = v7 + 5;
  v7[4] = 6;
  *(_OWORD *)v7 = xmmword_19CB34430;
  v37[0] = v7;
  CoreML::validateDescriptionsContainFeatureWithTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&v38, (uint64_t)(v4 + 2), 1, v37);
  v8 = (int)v38;
  v41 = v38;
  if (SHIBYTE(v43) < 0)
  {
    operator delete((void *)__p);
    v8 = (int)v41;
  }
  __p = v39;
  v43 = v40;
  if ((v8 & 0xFFFFFFEF) != 0)
    goto LABEL_14;
  CoreML::validateDescriptionsContainFeatureWithTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&v38, (uint64_t)(v4 + 5), 1, v37);
  v10 = (int)v38;
  v41 = v38;
  if (SHIBYTE(v43) < 0)
  {
    operator delete((void *)__p);
    v10 = (int)v41;
  }
  __p = v39;
  v43 = v40;
  if ((v10 & 0xFFFFFFEF) != 0)
  {
LABEL_14:
    *(_QWORD *)a1 = v41;
    *(_OWORD *)(a1 + 8) = __p;
    *(_QWORD *)(a1 + 24) = v43;
    __p = 0uLL;
    v43 = 0;
    goto LABEL_15;
  }
  v11 = *(_QWORD *)(v4[4] + 8);
  v12 = *(uint64_t **)(*(_QWORD *)(v4[7] + 8) + 32);
  if (!v12)
    v12 = &CoreML::Specification::_FeatureType_default_instance_;
  v13 = *((_DWORD *)v12 + 9);
  v14 = *(uint64_t **)(v11 + 32);
  if (!v14)
    v14 = &CoreML::Specification::_FeatureType_default_instance_;
  if (v13 == *((_DWORD *)v14 + 9))
  {
    if (v13 != 5)
      goto LABEL_27;
    v15 = v14[3];
    if (*(_DWORD *)(v15 + 16) == 1)
    {
      v16 = v12[3];
      if (*(_DWORD *)(v16 + 16) == 1
        && *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8) == *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8))
      {
LABEL_27:
        v38 = *(void **)(v4[4] + 8);
        *(_QWORD *)&v39 = &v41;
        *((_QWORD *)&v39 + 1) = a2;
        if (*(_DWORD *)(a2 + 44) == 601)
        {
          v17 = *(uint64_t **)(a2 + 32);
        }
        else
        {
          CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(v9);
          v17 = &CoreML::Specification::_Imputer_default_instance_;
        }
        switch(*((_DWORD *)v17 + 9))
        {
          case 0:
            std::string::basic_string[abi:ne180100]<0>(&v34, "Imputer parameter must be set.");
            *(_QWORD *)a1 = 13;
            std::operator+<char>();
            goto LABEL_39;
          case 1:
            v44[0] = 0x500000002;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100](&v34, (int *)v44, 2);
            v31 = 11;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100](&v32, &v31, 1);
            CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((unint64_t *)&v38, v35, (uint64_t)&v32);
            goto LABEL_44;
          case 2:
            LODWORD(v44[0]) = 1;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100](&v34, (int *)v44, 1);
            v31 = 12;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100](&v32, &v31, 1);
            CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((unint64_t *)&v38, v35, (uint64_t)&v32);
            goto LABEL_44;
          case 3:
            LODWORD(v44[0]) = 3;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100](&v34, (int *)v44, 1);
            v31 = 13;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100](&v32, &v31, 1);
            CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((unint64_t *)&v38, v35, (uint64_t)&v32);
            goto LABEL_44;
          case 4:
            LODWORD(v44[0]) = 5;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100](&v34, (int *)v44, 1);
            v31 = 11;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100](&v32, &v31, 1);
            v19 = CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((unint64_t *)&v38, v35, (uint64_t)&v32);
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(v33[0]);
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(v35);
            if ((v19 & 1) == 0)
              goto LABEL_14;
            v21 = *(uint64_t **)(v11 + 32);
            if (!v21)
              v21 = &CoreML::Specification::_FeatureType_default_instance_;
            if (*((_DWORD *)v21 + 9) == 5)
            {
              v22 = (uint64_t *)v21[3];
            }
            else
            {
              inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
              v22 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
            }
            v27 = *(_QWORD *)(v22[3] + 8);
            if (*((_DWORD *)v17 + 9) == 4)
            {
              v28 = (uint64_t *)v17[2];
            }
            else
            {
              CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
              v28 = &CoreML::Specification::_DoubleVector_default_instance_;
            }
            if (v27 == *((_DWORD *)v28 + 4))
              goto LABEL_14;
            goto LABEL_63;
          case 5:
            LODWORD(v44[0]) = 5;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100](&v34, (int *)v44, 1);
            v31 = 12;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100](&v32, &v31, 1);
            v23 = CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((unint64_t *)&v38, v35, (uint64_t)&v32);
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(v33[0]);
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(v35);
            if ((v23 & 1) == 0)
              goto LABEL_14;
            v25 = *(uint64_t **)(v11 + 32);
            if (!v25)
              v25 = &CoreML::Specification::_FeatureType_default_instance_;
            if (*((_DWORD *)v25 + 9) == 5)
            {
              v26 = (uint64_t *)v25[3];
            }
            else
            {
              v24 = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v24);
              v26 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
            }
            v29 = *(_QWORD *)(v26[3] + 8);
            if (*((_DWORD *)v17 + 9) == 5)
            {
              v30 = (uint64_t *)v17[2];
            }
            else
            {
              CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)v24);
              v30 = &CoreML::Specification::_Int64Vector_default_instance_;
            }
            if (v29 == *((_DWORD *)v30 + 4))
              goto LABEL_14;
LABEL_63:
            std::string::basic_string[abi:ne180100]<0>(&v34, "Shape of imputed array value does not match shape of input array.");
            *(_QWORD *)a1 = 13;
            std::operator+<char>();
LABEL_39:
            if ((v36 & 0x80000000) == 0)
              goto LABEL_15;
            v18 = v34;
            break;
          case 6:
          case 7:
            LODWORD(v44[0]) = 6;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100](&v34, (int *)v44, 1);
            v33[0] = 0;
            v33[1] = 0;
            v32 = (uint64_t *)v33;
            CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((unint64_t *)&v38, v35, (uint64_t)&v32);
LABEL_44:
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(v33[0]);
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(v35);
            goto LABEL_14;
          default:
            goto LABEL_14;
        }
        goto LABEL_32;
      }
      std::string::basic_string[abi:ne180100]<0>(&v38, "Shape of output array does not match shape of input array.");
      *(_QWORD *)a1 = 13;
      std::operator+<char>();
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v38, "Only 1 dimensional arrays input features are supported by the imputer.");
      *(_QWORD *)a1 = 13;
      std::operator+<char>();
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v38, "Type of input feature does not match the output type feature.");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
  }
  if ((SHIBYTE(v39) & 0x80000000) == 0)
    goto LABEL_15;
  v18 = (uint64_t *)v38;
LABEL_32:
  operator delete(v18);
LABEL_15:
  operator delete(v7);
  if (SHIBYTE(v43) < 0)
    operator delete((void *)__p);
}

void sub_19C9FC964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;

  if (a18 < 0)
    operator delete(__p);
  operator delete(v35);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(a1);
}

uint64_t **std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100](uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  int *v5;
  uint64_t *v6;
  int *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  _DWORD *v16;
  uint64_t *v17;
  int v18;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = &a2[a3];
    v8 = a1 + 1;
    while (1)
    {
      v9 = v4;
      if (v8 == (uint64_t **)v4)
        goto LABEL_9;
      v10 = v6;
      v11 = v4;
      if (v6)
      {
        do
        {
          v9 = v10;
          v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      v13 = *v5;
      if (*((_DWORD *)v9 + 7) < *v5)
      {
LABEL_9:
        v14 = v6 ? v9 : v4;
        v15 = v6 ? v9 + 1 : v4;
      }
      else
      {
        v14 = v4;
        v15 = v4;
        if (v6)
        {
          v15 = v4;
          while (1)
          {
            while (1)
            {
              v14 = v6;
              v18 = *((_DWORD *)v6 + 7);
              if (v13 >= v18)
                break;
              v6 = (uint64_t *)*v14;
              v15 = v14;
              if (!*v14)
                goto LABEL_16;
            }
            if (v18 >= v13)
              break;
            v15 = v14 + 1;
            v6 = (uint64_t *)v14[1];
            if (!v6)
              goto LABEL_16;
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        v16 = operator new(0x20uLL);
        v16[7] = *v5;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = v14;
        *v15 = (uint64_t)v16;
        v17 = (uint64_t *)**a1;
        if (v17)
        {
          *a1 = v17;
          v16 = (_DWORD *)*v15;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      if (++v5 == v7)
        break;
      v8 = (uint64_t **)*a1;
      v6 = a1[1];
    }
  }
  return a1;
}

void sub_19C9FCBB0(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t **std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100](uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  int *v5;
  uint64_t *v6;
  int *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  _DWORD *v16;
  uint64_t *v17;
  int v18;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = &a2[a3];
    v8 = a1 + 1;
    while (1)
    {
      v9 = v4;
      if (v8 == (uint64_t **)v4)
        goto LABEL_9;
      v10 = v6;
      v11 = v4;
      if (v6)
      {
        do
        {
          v9 = v10;
          v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      v13 = *v5;
      if (*((_DWORD *)v9 + 7) < *v5)
      {
LABEL_9:
        v14 = v6 ? v9 : v4;
        v15 = v6 ? v9 + 1 : v4;
      }
      else
      {
        v14 = v4;
        v15 = v4;
        if (v6)
        {
          v15 = v4;
          while (1)
          {
            while (1)
            {
              v14 = v6;
              v18 = *((_DWORD *)v6 + 7);
              if (v13 >= v18)
                break;
              v6 = (uint64_t *)*v14;
              v15 = v14;
              if (!*v14)
                goto LABEL_16;
            }
            if (v18 >= v13)
              break;
            v15 = v14 + 1;
            v6 = (uint64_t *)v14[1];
            if (!v6)
              goto LABEL_16;
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        v16 = operator new(0x20uLL);
        v16[7] = *v5;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = v14;
        *v15 = (uint64_t)v16;
        v17 = (uint64_t *)**a1;
        if (v17)
        {
          *a1 = v17;
          v16 = (_DWORD *)*v15;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      if (++v5 == v7)
        break;
      v8 = (uint64_t **)*a1;
      v6 = a1[1];
    }
  }
  return a1;
}

void sub_19C9FCD20(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()(unint64_t *inited, uint64_t *a2, uint64_t a3)
{
  unint64_t *v3;
  uint64_t *v4;
  int v6;
  int v7;
  std::string *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  void *v13;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  std::string v25;
  void *__p[2];
  std::string::size_type v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v3 = inited;
  v4 = *(uint64_t **)(*inited + 32);
  if (!v4)
    v4 = &CoreML::Specification::_FeatureType_default_instance_;
  if (!a2)
  {
LABEL_9:
    std::operator+<char>();
    v8 = std::string::append(&v25, "\" is not compatible with given imputed value type.");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v27 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v28 = 13;
    std::operator+<char>();
    v10 = v3[1];
    *(_QWORD *)v10 = v28;
    v11 = v10 + 8;
    if (*(char *)(v10 + 31) < 0)
      operator delete(*(void **)v11);
    v12 = v29;
    *(_QWORD *)(v11 + 16) = v30;
    *(_OWORD *)v11 = v12;
    HIBYTE(v30) = 0;
    LOBYTE(v29) = 0;
    if (SHIBYTE(v27) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      v13 = (void *)v25.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
    return 0;
  }
  v6 = *((_DWORD *)v4 + 9);
  while (1)
  {
    v7 = *((_DWORD *)a2 + 7);
    if (v6 >= v7)
      break;
LABEL_8:
    a2 = (uint64_t *)*a2;
    if (!a2)
      goto LABEL_9;
  }
  if (v7 < v6)
  {
    ++a2;
    goto LABEL_8;
  }
  v15 = inited[2];
  if (*(_DWORD *)(v15 + 44) == 601)
  {
    v16 = *(uint64_t **)(v15 + 32);
  }
  else
  {
    inited = CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults((CoreML::Specification::protobuf_Imputer_2eproto *)inited);
    v16 = &CoreML::Specification::_Imputer_default_instance_;
  }
  if (*((_DWORD *)v16 + 10))
  {
    v17 = v3[2];
    if (*(_DWORD *)(v17 + 44) == 601)
    {
      v18 = *(uint64_t **)(v17 + 32);
    }
    else
    {
      CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults((CoreML::Specification::protobuf_Imputer_2eproto *)inited);
      v18 = &CoreML::Specification::_Imputer_default_instance_;
    }
    v19 = *(uint64_t **)(a3 + 8);
    if (v19)
    {
      v20 = *((_DWORD *)v18 + 10);
      do
      {
        v21 = *((_DWORD *)v19 + 7);
        if (v20 >= v21)
        {
          if (v21 >= v20)
            return 1;
          ++v19;
        }
        v19 = (uint64_t *)*v19;
      }
      while (v19);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Type of given replace value not compatible with input feature type.");
    v28 = 13;
    std::operator+<char>();
    v22 = v3[1];
    *(_QWORD *)v22 = v28;
    v23 = v22 + 8;
    if (*(char *)(v22 + 31) < 0)
      operator delete(*(void **)v23);
    v24 = v29;
    *(_QWORD *)(v23 + 16) = v30;
    *(_OWORD *)v23 = v24;
    HIBYTE(v30) = 0;
    LOBYTE(v29) = 0;
    if (SHIBYTE(v27) < 0)
    {
      v13 = __p[0];
LABEL_15:
      operator delete(v13);
    }
    return 0;
  }
  return 1;
}

void sub_19C9FCF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::~SoundAnalysisPreprocessing_Vggish(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  *(_QWORD *)this = &off_1E3D4D9E8;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D4D9E8;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish");
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  return CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::New(this, 0);
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *v3;

  v3 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)operator new();
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::SoundAnalysisPreprocessing_Vggish(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>(a2, v3);
  return v3;
}

void sub_19C9FD080(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::IsInitialized(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  return 1;
}

std::string *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      LODWORD(TagFallback) = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::ByteSizeLong(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::GetCachedSize(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  return *((unsigned int *)this + 4);
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::SoundAnalysisPreprocessing_Vggish(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  *(_QWORD *)this = &off_1E3D4D9E8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)&CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_Vggish_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_19C9FD1A4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::~SoundAnalysisPreprocessing(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::~SoundAnalysisPreprocessing(this);
  JUMPOUT(0x1A1AD6260);
}

{
  int v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E3D4D8B8;
  v2 = *((_DWORD *)this + 7);
  if (v2)
  {
    if (v2 == 20)
    {
      v3 = *((_QWORD *)this + 2);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    *((_DWORD *)this + 7) = 0;
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing");
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  return CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(this, 0);
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *v3;

  v3 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)operator new();
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SoundAnalysisPreprocessing(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>(a2, v3);
  return v3;
}

void sub_19C9FD2AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (*(_DWORD *)(this + 28) == 20)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::IsInitialized(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  return 1;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t result;
  unsigned int TagFallback;

  while (1)
  {
    while (1)
    {
      v5 = *(unsigned __int8 **)a2;
      v6 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 < v6)
        break;
      LODWORD(v8) = 0;
LABEL_21:
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_22;
LABEL_8:
      if (v9 != 162 || (v9 & 0xFFFFFFF8) != 0xA0)
        goto LABEL_22;
      if (*((_DWORD *)this + 7) != 20)
      {
        *((_DWORD *)this + 7) = 20;
        v11 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)operator new();
        CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::SoundAnalysisPreprocessing_Vggish(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v14 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v16 = *((_DWORD *)a2 + 13);
      v17 = __OFSUB__(v16--, 1);
      *((_DWORD *)a2 + 13) = v16;
      if (v16 < 0 == v17)
      {
        v18 = (int)v14;
        result = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::MergePartialFromCodedStream(v14, (char **)a2, v15);
        if (!(_DWORD)result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v18))
          continue;
      }
      return 0;
    }
    v7 = v5 + 1;
    v8 = *v5;
    if ((char)*v5 < 1)
    {
      if ((unint64_t)v7 < v6)
      {
        v10 = *v7;
        if ((v8 & ~v10) >= 0x80)
        {
          *(_QWORD *)a2 = v5 + 2;
          v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
          goto LABEL_8;
        }
      }
      goto LABEL_21;
    }
    *(_QWORD *)a2 = v7;
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0)
      goto LABEL_8;
LABEL_22:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C9FD4BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::ByteSizeLong(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  uint64_t v1;

  if (*((_DWORD *)this + 7) == 20)
  {
    *(_DWORD *)(*((_QWORD *)this + 2) + 16) = 0;
    v1 = 3;
  }
  else
  {
    v1 = 0;
  }
  *((_DWORD *)this + 6) = v1;
  return v1;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_DWORD *)(this + 28) == 20)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x14, *(_QWORD *)(this + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::GetCachedSize(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  return *((unsigned int *)this + 6);
}

std::string *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergeFrom(std::string *this, const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *a2)
{
  std::string *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)a2 + 7) == 20)
  {
    if (HIDWORD(v3[1].__r_.__value_.__r.__words[0]) == 20)
    {
      v5 = (uint64_t *)v3->__r_.__value_.__r.__words[2];
    }
    else
    {
      HIDWORD(v3[1].__r_.__value_.__r.__words[0]) = 20;
      v5 = (uint64_t *)operator new();
      this = (std::string *)CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::SoundAnalysisPreprocessing_Vggish((CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)v5);
      v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
      if (*((_DWORD *)a2 + 7) != 20)
      {
        this = (std::string *)CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto *)this);
        v6 = &CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_Vggish_default_instance_;
LABEL_9:
        v7 = v6[1];
        if ((v7 & 1) != 0)
          return google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v5 + 1, v7 & 0xFFFFFFFFFFFFFFFELL);
        return this;
      }
    }
    v6 = (uint64_t *)*((_QWORD *)a2 + 2);
    goto LABEL_9;
  }
  return this;
}

void sub_19C9FD5FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SoundAnalysisPreprocessing(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  *(_QWORD *)this = &off_1E3D4D8B8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)&CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_19C9FD66C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::validate<(MLModelType)560>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto *v6;
  int data;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  const CoreML::Specification::PrecisionRecallCurve **v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t *v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  float *v29;
  float *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  float *v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  float *v39;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  float *v44;
  float *v45;
  void *v46[2];
  char v47;
  std::string v48;
  uint64_t v49;
  std::string::size_type v50;
  __int128 __p;
  uint64_t v52;

  if (*(_QWORD *)(a2 + 16))
    v4 = *(uint64_t **)(a2 + 16);
  else
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::Result::Result((CoreML::Result *)&v50);
  v5 = *(_DWORD *)(a2 + 24);
  LODWORD(v46[0]) = 0;
  CoreML::validateModelDescription((uint64_t)&v48, (uint64_t)v4, v5, (char *)v46);
  data = (int)v48.__r_.__value_.__l.__data_;
  v50 = v48.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v52) < 0)
  {
    operator delete((void *)__p);
    data = v50;
  }
  __p = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
  v52 = v49;
  if ((data & 0xFFFFFFEF) != 0)
  {
    *(_QWORD *)a1 = v50;
    *(_OWORD *)(a1 + 8) = __p;
    *(_QWORD *)(a1 + 24) = v52;
    return;
  }
  if (*(_DWORD *)(a2 + 44) == 560)
  {
    v8 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults(v6);
    v8 = &CoreML::Specification::_ClassConfidenceThresholding_default_instance_;
  }
  memset(&v48, 0, sizeof(v48));
  v9 = *((_DWORD *)v8 + 6);
  if (!v9)
    goto LABEL_74;
  v10 = v8[4];
  v11 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v48, *((_DWORD *)v8 + 6));
  v12 = (const CoreML::Specification::PrecisionRecallCurve **)(v10 + 8);
  v13 = (_DWORD *)v48.__r_.__value_.__r.__words[2];
  v14 = v48.__r_.__value_.__r.__words[1];
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::PrecisionRecallCurve>::TypeHandler>(&v48, (std::string **)v11, v12, v9, *(_DWORD *)v48.__r_.__value_.__r.__words[2] - LODWORD(v48.__r_.__value_.__r.__words[1]));
  v15 = v14 + v9;
  LODWORD(v48.__r_.__value_.__r.__words[1]) = v15;
  if (*v13 < (int)v15)
    *v13 = v15;
  if ((int)v15 >= 1)
  {
    v16 = 0;
    while (2)
    {
      v17 = *(_QWORD **)&v13[2 * v16 + 2];
      if (v17[2])
        v18 = (uint64_t *)v17[2];
      else
        v18 = &CoreML::Specification::_FloatVector_default_instance_;
      v19 = *((_DWORD *)v18 + 4);
      if (v17[3])
        v20 = (uint64_t *)v17[3];
      else
        v20 = &CoreML::Specification::_FloatVector_default_instance_;
      if (v19)
        v21 = v19 == *((_DWORD *)v20 + 4);
      else
        v21 = 0;
      if (v21)
      {
        v23 = (uint64_t *)v17[4];
        v22 = (uint64_t *)v17[5];
        if (!v23)
          v23 = &CoreML::Specification::_FloatVector_default_instance_;
        v24 = *((_DWORD *)v23 + 4);
        if (!v22)
          v22 = &CoreML::Specification::_FloatVector_default_instance_;
        if (v24 && v24 == *((_DWORD *)v22 + 4))
        {
          v26 = v18[3];
          v27 = v26 + 8;
          v28 = v26 == 0;
          if (v26)
            v29 = (float *)(v26 + 8);
          else
            v29 = 0;
          v30 = (float *)(v27 + 4 * v19);
          if (v28)
            v30 = 0;
          while (v29 != v30)
          {
            if (fabsf(*v29) == INFINITY || *v29 < 0.0)
            {
              std::string::basic_string[abi:ne180100]<0>(v46, "An element of precisionvalues is not a positive number or zero.");
              *(_QWORD *)a1 = 13;
              std::operator+<char>();
              goto LABEL_75;
            }
            ++v29;
          }
          v31 = v20[3];
          v32 = v31 + 8;
          v33 = v31 == 0;
          if (v31)
            v34 = (float *)(v31 + 8);
          else
            v34 = 0;
          v35 = (float *)(v32 + 4 * v19);
          if (v33)
            v35 = 0;
          while (v34 != v35)
          {
            if (fabsf(*v34) == INFINITY || *v34 < 0.0)
            {
              std::string::basic_string[abi:ne180100]<0>(v46, "An element of precisionconfidencethresholds is not a positive number or zero.");
              *(_QWORD *)a1 = 13;
              std::operator+<char>();
              goto LABEL_75;
            }
            ++v34;
          }
          v36 = v23[3];
          v37 = v36 + 8;
          v38 = v36 == 0;
          if (v36)
            v39 = (float *)(v36 + 8);
          else
            v39 = 0;
          v40 = (float *)(v37 + 4 * v24);
          if (v38)
            v40 = 0;
          while (v39 != v40)
          {
            if (fabsf(*v39) == INFINITY || *v39 < 0.0)
            {
              std::string::basic_string[abi:ne180100]<0>(v46, "An element of recallvalues is not a positive number or zero.");
              *(_QWORD *)a1 = 13;
              std::operator+<char>();
              goto LABEL_75;
            }
            ++v39;
          }
          v41 = v22[3];
          v42 = v41 + 8;
          v43 = v41 == 0;
          if (v41)
            v44 = (float *)(v41 + 8);
          else
            v44 = 0;
          v45 = (float *)(v42 + 4 * v24);
          if (v43)
            v45 = 0;
          while (v44 != v45)
          {
            if (fabsf(*v44) == INFINITY || *v44 < 0.0)
            {
              std::string::basic_string[abi:ne180100]<0>(v46, "An element of recallconfidencethresholds is not a positive number or zero.");
              *(_QWORD *)a1 = 13;
              std::operator+<char>();
              goto LABEL_75;
            }
            ++v44;
          }
          if (++v16 != v15)
            continue;
          CoreML::Result::Result((CoreML::Result *)a1);
          goto LABEL_77;
        }
      }
      break;
    }
    std::string::basic_string[abi:ne180100]<0>(v46, "Zero length or mismatched precisionRecallCurves components");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
  }
  else
  {
LABEL_74:
    std::string::basic_string[abi:ne180100]<0>(v46, "The ClassConfidenceThresholding model has no precisionRecallCurves.");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
  }
LABEL_75:
  if (v47 < 0)
    operator delete(v46[0]);
LABEL_77:
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(&v48);
  if (SHIBYTE(v52) < 0)
    operator delete((void *)__p);
}

void sub_19C9FDBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(&a16);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void CoreML::Specification::GLMClassifier_DoubleArray::~GLMClassifier_DoubleArray(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  CoreML::Specification::GLMClassifier_DoubleArray::~GLMClassifier_DoubleArray(this);
  JUMPOUT(0x1A1AD6260);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E3D54EE0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::GLMClassifier_DoubleArray::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.GLMClassifier.DoubleArray");
}

CoreML::Specification::GLMClassifier_DoubleArray *CoreML::Specification::GLMClassifier_DoubleArray::New(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  return CoreML::Specification::GLMClassifier_DoubleArray::New(this, 0);
}

CoreML::Specification::GLMClassifier_DoubleArray *CoreML::Specification::GLMClassifier_DoubleArray::New(CoreML::Specification::GLMClassifier_DoubleArray *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::GLMClassifier_DoubleArray *v3;

  v3 = (CoreML::Specification::GLMClassifier_DoubleArray *)operator new();
  CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::GLMClassifier_DoubleArray>(a2, v3);
  return v3;
}

void sub_19C9FDCBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::IsInitialized(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  return 1;
}

BOOL CoreML::Specification::GLMClassifier_DoubleArray::MergePartialFromCodedStream(CoreML::Specification::GLMClassifier_DoubleArray *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  signed int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 result;
  signed int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 9)
          break;
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(10, (unint64_t **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0)
        return 0;
      v13 = *((_DWORD *)a2 + 12);
      v14 = v13 == 0x7FFFFFFF
          ? -1
          : v13 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v15 = *((_DWORD *)a2 + 10);
      v16 = v15 == 0x7FFFFFFF
          ? -1
          : v15 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v17 = *v5;
      v18 = VarintSizeAsIntFallback >> 3;
      v19 = v16 >= v14 ? v14 : v16;
      v20 = v14 == -1 ? v16 : v19;
      if (v20 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v18 <= 1)
          v21 = 1;
        else
          v21 = VarintSizeAsIntFallback >> 3;
        do
        {
          v30 = 0;
          v22 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v30);
            if (!result)
              return result;
            v23 = v30;
            v17 = *v5;
          }
          else
          {
            v23 = *v22;
            *a2 = (char *)(v22 + 1);
          }
          if (v17 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v17 + 1);
            v17 = *v5;
          }
          v24 = *((_QWORD *)this + 3) + 8 * v17;
          *((_DWORD *)this + 4) = v17 + 1;
          *(_QWORD *)(v24 + 8) = v23;
          ++v17;
          --v21;
        }
        while (v21);
      }
    }
    v26 = v17 + v18;
    if (VarintSizeAsIntFallback > 7)
    {
      google::protobuf::RepeatedField<double>::Reserve(v5, v17 + v18);
      v27 = *((_QWORD *)this + 3);
      v28 = 8 * v26 - 8 * *((int *)this + 4);
      if (v28 >= 1)
        bzero((void *)(v27 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v28 >> 3) - ((unint64_t)v28 > 7)) + 8);
    }
    else
    {
      v27 = *((_QWORD *)this + 3);
    }
    *v5 = v26;
    v29 = v27 + 8;
    if (!v27)
      v29 = 0;
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v29 + 8 * v17), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v17;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::ByteSizeLong(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 8 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(_QWORD *)(v3 + 24);
    if (v11)
      v12 = (char *)(v11 + 8);
    else
      v12 = 0;
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, 8 * *(_DWORD *)(v3 + 16));
  }
  return this;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::GetCachedSize(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  return *((unsigned int *)this + 9);
}

CoreML::Specification::GLMClassifier_DoubleArray *CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D54EE0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::GLMClassifier_DoubleArray *)&CoreML::Specification::_GLMClassifier_DoubleArray_default_instance_)
    CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_19C9FE1B8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::GLMClassifier_DoubleArray>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMClassifier_DoubleArray>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMClassifier_DoubleArray>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::GLMClassifier::~GLMClassifier(CoreML::Specification::GLMClassifier *this)
{
  CoreML::Specification::GLMClassifier::~GLMClassifier(this);
  JUMPOUT(0x1A1AD6260);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E3D4E2D0;
  if (*((_DWORD *)this + 21))
    CoreML::Specification::GLMClassifier::clear_ClassLabels((uint64_t)this);
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::GLMClassifier::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.GLMClassifier");
}

CoreML::Specification::GLMClassifier *CoreML::Specification::GLMClassifier::New(CoreML::Specification::GLMClassifier *this)
{
  return CoreML::Specification::GLMClassifier::New(this, 0);
}

CoreML::Specification::GLMClassifier *CoreML::Specification::GLMClassifier::New(CoreML::Specification::GLMClassifier *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::GLMClassifier *v3;

  v3 = (CoreML::Specification::GLMClassifier *)operator new();
  CoreML::Specification::GLMClassifier::GLMClassifier(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::GLMClassifier>(a2, v3);
  return v3;
}

void sub_19C9FE2D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40D1CF0537);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::GLMClassifier::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v3 = *v2++;
      *(_DWORD *)(v3 + 16) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 60) = 0;
  return CoreML::Specification::GLMClassifier::clear_ClassLabels(this);
}

uint64_t CoreML::Specification::GLMClassifier::IsInitialized(CoreML::Specification::GLMClassifier *this)
{
  return 1;
}

uint64_t CoreML::Specification::GLMClassifier::MergePartialFromCodedStream(CoreML::Specification::GLMClassifier *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  google::protobuf::internal::RepeatedPtrFieldBase *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  int *v14;
  int v15;
  int v16;
  CoreML::Specification::GLMClassifier_DoubleArray *Aligned;
  CoreML::Specification::Int64Vector *v18;
  char *v19;
  unsigned int v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  CoreML::Specification::StringVector *v25;
  char *v26;
  int v27;
  char *v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  int v34;
  uint64_t result;
  int v36;
  unsigned int v37;
  int v38;
  google::protobuf::Arena *v39;
  google::protobuf::Arena **v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int VarintSizeAsIntFallback;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  signed int v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  signed int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int TagFallback;
  BOOL v67;
  uint64_t Varint32Fallback;
  uint64_t v69;
  unint64_t v70;

  v5 = (unsigned int *)((char *)this + 40);
  v6 = (CoreML::Specification::GLMClassifier *)((char *)this + 16);
  while (1)
  {
LABEL_2:
    v7 = *(unsigned __int8 **)a2;
    v8 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 >= v8)
    {
      LODWORD(v10) = 0;
      goto LABEL_108;
    }
    v9 = v7 + 1;
    v10 = *v7;
    if ((char)*v7 >= 1)
    {
      *(_QWORD *)a2 = v9;
      v11 = v10 | 0x100000000;
      if ((v11 & 0x100000000) != 0)
        goto LABEL_9;
      goto LABEL_109;
    }
    if ((unint64_t)v9 < v8)
    {
      v12 = *v9;
      if ((v10 & ~v12) >= 0x80)
        break;
    }
LABEL_108:
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
    v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v11 & 0x100000000) != 0)
      goto LABEL_9;
LABEL_109:
    if ((_DWORD)v11)
      v67 = (v11 & 7) == 4;
    else
      v67 = 1;
    if (v67)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v11, a3) & 1) == 0)
      return 0;
  }
  *(_QWORD *)a2 = v7 + 2;
  v11 = (v10 + (v12 << 7) - 128) | 0x100000000;
LABEL_9:
  v13 = v11 >> 3;
  switch(v11 >> 3)
  {
    case 1u:
      if (v11 != 10)
        goto LABEL_109;
      v14 = (int *)*((_QWORD *)this + 4);
      if (!v14)
      {
        v15 = *((_DWORD *)this + 6);
        v16 = *((_DWORD *)this + 7);
LABEL_55:
        if (v15 <= v16)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v6, v16 - v15 + 1);
          v14 = (int *)*((_QWORD *)this + 4);
        }
        v16 = *v14;
        goto LABEL_58;
      }
      v15 = *((_DWORD *)this + 6);
      v16 = *v14;
      if (v15 < *v14)
      {
        *((_DWORD *)this + 6) = v15 + 1;
        Aligned = *(CoreML::Specification::GLMClassifier_DoubleArray **)&v14[2 * v15 + 2];
        goto LABEL_64;
      }
      if (v16 == *((_DWORD *)this + 7))
        goto LABEL_55;
LABEL_58:
      *v14 = v16 + 1;
      v39 = *(google::protobuf::Arena **)v6;
      if (*(_QWORD *)v6)
      {
        CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(Aligned);
        v40 = google::protobuf::Arena::AllocateAligned(v39, 0, 24);
        *v40 = Aligned;
        v40[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMClassifier_DoubleArray>;
        v41 = (unint64_t *)((char *)v39 + 32);
        do
          v42 = __ldxr(v41);
        while (__stxr((unint64_t)v40, v41));
        v40[2] = (google::protobuf::Arena *)v42;
      }
      else
      {
        Aligned = (CoreML::Specification::GLMClassifier_DoubleArray *)operator new();
        CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(Aligned);
      }
      v43 = *((_QWORD *)this + 4);
      v44 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v44 + 1;
      *(_QWORD *)(v43 + 8 * v44 + 8) = Aligned;
LABEL_64:
      v45 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v45 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v45;
        *(_QWORD *)a2 = v45 + 1;
      }
      v47 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v49 = *((_DWORD *)a2 + 13);
      v33 = __OFSUB__(v49--, 1);
      *((_DWORD *)a2 + 13) = v49;
      if (v49 < 0 != v33)
        return 0;
      v34 = v47;
      result = CoreML::Specification::GLMClassifier_DoubleArray::MergePartialFromCodedStream(Aligned, (char **)a2, v48);
      if ((_DWORD)result)
        goto LABEL_70;
      return result;
    case 2u:
      if (v11 == 17)
      {
        if (google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(18, (unint64_t **)a2, (uint64_t)v5))
        {
          goto LABEL_2;
        }
        return 0;
      }
      if (v11 != 18)
        goto LABEL_109;
      v19 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
      {
        v20 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if ((v20 & 0x80000000) != 0)
          return 0;
      }
      else
      {
        v20 = *v19;
        *(_QWORD *)a2 = v19 + 1;
      }
      if ((v20 & 7) != 0)
        return 0;
      v50 = *((_DWORD *)a2 + 12);
      if (v50 == 0x7FFFFFFF)
        v51 = -1;
      else
        v51 = v50 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v52 = *((_DWORD *)a2 + 10);
      if (v52 == 0x7FFFFFFF)
        v53 = -1;
      else
        v53 = v52 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v54 = *v5;
      v55 = v20 >> 3;
      if (v53 >= v51)
        v56 = v51;
      else
        v56 = v53;
      if (v51 == -1)
        v57 = v53;
      else
        v57 = v56;
      if (v57 < (uint64_t)v20)
      {
        if (v20 < 8)
          goto LABEL_2;
        if (v55 <= 1)
          v58 = 1;
        else
          v58 = v20 >> 3;
        while (1)
        {
          v70 = 0;
          v59 = *(unint64_t **)a2;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v70);
            if (!(_DWORD)result)
              return result;
            v60 = v70;
            v54 = *v5;
          }
          else
          {
            v60 = *v59;
            *(_QWORD *)a2 = v59 + 1;
          }
          if (v54 == *((_DWORD *)this + 11))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v54 + 1);
            v54 = *v5;
          }
          v61 = *((_QWORD *)this + 6) + 8 * v54;
          *((_DWORD *)this + 10) = v54 + 1;
          *(_QWORD *)(v61 + 8) = v60;
          ++v54;
          if (!--v58)
            goto LABEL_2;
        }
      }
      v62 = v54 + v55;
      if (v20 > 7)
      {
        google::protobuf::RepeatedField<double>::Reserve(v5, v54 + v55);
        v63 = *((_QWORD *)this + 6);
        v64 = 8 * v62 - 8 * *((int *)this + 10);
        if (v64 >= 1)
          bzero((void *)(v63 + 8 + 8 * *((int *)this + 10)), 8 * (((unint64_t)v64 >> 3) - ((unint64_t)v64 > 7)) + 8);
      }
      else
      {
        v63 = *((_QWORD *)this + 6);
      }
      *v5 = v62;
      v65 = v63 + 8;
      if (!v63)
        v65 = 0;
      if (google::protobuf::io::CodedInputStream::ReadRaw(a2, (char *)(v65 + 8 * v54), v20))
        goto LABEL_2;
      if ((int)*v5 < 1)
        return 0;
      result = 0;
      *v5 = v54;
      return result;
    case 3u:
      if (v11 != 24)
        goto LABEL_109;
      v21 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v22 = 0;
      }
      else
      {
        v22 = *v21;
        if ((*v21 & 0x80000000) == 0)
        {
          *(_QWORD *)a2 = v21 + 1;
LABEL_117:
          *((_DWORD *)this + 15) = v22;
          goto LABEL_2;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v22);
      v22 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
      goto LABEL_117;
    case 4u:
      if (v11 != 32)
        goto LABEL_109;
      v23 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v24 = 0;
      }
      else
      {
        v24 = *v23;
        if ((*v23 & 0x80000000) == 0)
        {
          *(_QWORD *)a2 = v23 + 1;
          goto LABEL_120;
        }
      }
      v69 = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v24);
      v24 = v69;
      if (v69 < 0)
        return 0;
LABEL_120:
      *((_DWORD *)this + 16) = v24;
      goto LABEL_2;
    default:
      if (v13 == 100)
      {
        if (v11 != 34)
          goto LABEL_109;
        if (*((_DWORD *)this + 21) == 100)
        {
          v25 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 9);
        }
        else
        {
          CoreML::Specification::GLMClassifier::clear_ClassLabels((uint64_t)this);
          *((_DWORD *)this + 21) = 100;
          v25 = (CoreML::Specification::StringVector *)operator new();
          CoreML::Specification::StringVector::StringVector(v25);
          *((_QWORD *)this + 9) = v25;
        }
        v28 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v28 < 0)
        {
          v29 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v29 < 0)
            return 0;
        }
        else
        {
          v29 = *v28;
          *(_QWORD *)a2 = v28 + 1;
        }
        v36 = google::protobuf::io::CodedInputStream::PushLimit(a2, v29);
        v38 = *((_DWORD *)a2 + 13);
        v33 = __OFSUB__(v38--, 1);
        *((_DWORD *)a2 + 13) = v38;
        if (v38 < 0 != v33)
          return 0;
        v34 = v36;
        result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v25, (char **)a2, v37);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v13 != 101 || v11 != 42)
          goto LABEL_109;
        if (*((_DWORD *)this + 21) == 101)
        {
          v18 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 9);
        }
        else
        {
          CoreML::Specification::GLMClassifier::clear_ClassLabels((uint64_t)this);
          *((_DWORD *)this + 21) = 101;
          v18 = (CoreML::Specification::Int64Vector *)operator new();
          CoreML::Specification::Int64Vector::Int64Vector(v18);
          *((_QWORD *)this + 9) = v18;
        }
        v26 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v26 < 0)
        {
          v27 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v27 < 0)
            return 0;
        }
        else
        {
          v27 = *v26;
          *(_QWORD *)a2 = v26 + 1;
        }
        v30 = google::protobuf::io::CodedInputStream::PushLimit(a2, v27);
        v32 = *((_DWORD *)a2 + 13);
        v33 = __OFSUB__(v32--, 1);
        *((_DWORD *)a2 + 13) = v32;
        if (v32 < 0 != v33)
          return 0;
        v34 = v30;
        result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v18, a2, v31);
        if (!(_DWORD)result)
          return result;
      }
LABEL_70:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v34))
        return 0;
      goto LABEL_2;
  }
}

void sub_19C9FEA28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::GLMClassifier::ByteSizeLong(CoreML::Specification::GLMClassifier *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((_QWORD *)this + 4);
    v5 = *((unsigned int *)this + 6);
    do
    {
      v6 = *(unsigned int **)(v4 + 8 * v3 + 8);
      v7 = v6[4];
      v8 = 8 * v7;
      if ((_DWORD)v7)
      {
        if ((v8 & 0x80000000) != 0)
          v9 = 11;
        else
          v9 = ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v9 = 0;
      }
      v10 = v9 + v8;
      v6[8] = v8;
      v6[9] = v10;
      v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v5 = 0;
  }
  v11 = *((unsigned int *)this + 10);
  v12 = 8 * v11;
  if ((_DWORD)v11)
  {
    if ((v12 & 0x80000000) != 0)
      v13 = 11;
    else
      v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 += v13;
  }
  *((_DWORD *)this + 14) = v12;
  v14 = v5 + v12;
  v15 = *((_DWORD *)this + 15);
  if (v15)
  {
    if (v15 < 0)
      v16 = 11;
    else
      v16 = ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v14 += v16;
  }
  v17 = *((_DWORD *)this + 16);
  if (v17)
  {
    if (v17 < 0)
      v18 = 11;
    else
      v18 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v14 += v18;
  }
  v19 = *((_DWORD *)this + 21);
  if (v19 == 101)
  {
    v20 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 9));
    goto LABEL_30;
  }
  if (v19 == 100)
  {
    v20 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 9));
LABEL_30:
    v14 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 20) = v14;
  return v14;
}

uint64_t CoreML::Specification::GLMClassifier::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int i;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  char *v16;
  signed int v17;
  signed int v18;
  int v19;
  char __src[5];

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  if (*(int *)(v5 + 40) > 0)
  {
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 18;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v8 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 18;
      v8 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v8;
    }
    v9 = *(_DWORD *)(v5 + 56);
    if (v8 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v9);
    }
    else
    {
      v10 = *((_QWORD *)a2 + 1);
      if (v9 < 0x80)
      {
        v12 = *(_DWORD *)(v5 + 56);
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v11++ = v9 | 0x80;
          v12 = v9 >> 7;
          v13 = v9 >> 14;
          v9 >>= 7;
        }
        while (v13);
      }
      *v11 = v12;
      v14 = (_DWORD)v11 - v10 + 1;
      *((_QWORD *)a2 + 1) += v14;
      *((_DWORD *)a2 + 4) -= v14;
    }
    v15 = *(_QWORD *)(v5 + 48);
    if (v15)
      v16 = (char *)(v15 + 8);
    else
      v16 = 0;
    this = google::protobuf::io::CodedOutputStream::WriteRaw(a2, v16, 8 * *(_DWORD *)(v5 + 40));
  }
  v17 = *(_DWORD *)(v5 + 60);
  if (v17)
    this = google::protobuf::internal::WireFormatLite::WriteEnum(3, v17, a2, a4);
  v18 = *(_DWORD *)(v5 + 64);
  if (v18)
    this = google::protobuf::internal::WireFormatLite::WriteEnum(4, v18, a2, a4);
  v19 = *(_DWORD *)(v5 + 84);
  if (v19 == 100)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x64, *(_QWORD *)(v5 + 72), a2, a4);
    v19 = *(_DWORD *)(v5 + 84);
  }
  if (v19 == 101)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x65, *(_QWORD *)(v5 + 72), a2, a4);
  return this;
}

uint64_t CoreML::Specification::GLMClassifier::GetCachedSize(CoreML::Specification::GLMClassifier *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t CoreML::Specification::GLMClassifier::clear_ClassLabels(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 84);
  if (v2 == 101 || v2 == 100)
  {
    this = *(_QWORD *)(this + 72);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 84) = 0;
  return this;
}

std::string *CoreML::Specification::GLMClassifier::MergeFrom(std::string *this, const CoreML::Specification::GLMClassifier *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  CoreML::Specification::StringVector *v14;
  CoreML::Specification::Int64Vector *v15;
  CoreML::Specification::protobuf_DataStructures_2eproto *v16;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v17;
  CoreML::Specification::protobuf_DataStructures_2eproto *v18;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v19;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)(*((_QWORD *)a2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 16), *((_DWORD *)a2 + 6));
    this = (std::string *)google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>((uint64_t *)(v3 + 16), (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)v7, v6, v5, **(_DWORD **)(v3 + 32) - *(_DWORD *)(v3 + 24));
    v8 = *(_DWORD *)(v3 + 24) + v5;
    *(_DWORD *)(v3 + 24) = v8;
    v9 = *(signed int **)(v3 + 32);
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_DWORD *)a2 + 10);
  if (v10)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v3 + 40), *(_DWORD *)(v3 + 40) + v10);
    this = (std::string *)memcpy((void *)(*(_QWORD *)(v3 + 48) + 8 * *(int *)(v3 + 40) + 8), (const void *)(*((_QWORD *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *(_DWORD *)(v3 + 40) += *((_DWORD *)a2 + 10);
  }
  v11 = *((_DWORD *)a2 + 15);
  if (v11)
    *(_DWORD *)(v3 + 60) = v11;
  v12 = *((_DWORD *)a2 + 16);
  if (v12)
    *(_DWORD *)(v3 + 64) = v12;
  v13 = *((_DWORD *)a2 + 21);
  if (v13 == 101)
  {
    if (*(_DWORD *)(v3 + 84) == 101)
    {
      v15 = *(CoreML::Specification::Int64Vector **)(v3 + 72);
    }
    else
    {
      CoreML::Specification::GLMClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 84) = 101;
      v15 = (CoreML::Specification::Int64Vector *)operator new();
      v18 = CoreML::Specification::Int64Vector::Int64Vector(v15);
      *(_QWORD *)(v3 + 72) = v15;
      if (*((_DWORD *)a2 + 21) != 101)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v18);
        v19 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&CoreML::Specification::_Int64Vector_default_instance_;
        return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v15, v19);
      }
    }
    v19 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)a2 + 9);
    return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v15, v19);
  }
  if (v13 == 100)
  {
    if (*(_DWORD *)(v3 + 84) == 100)
    {
      v14 = *(CoreML::Specification::StringVector **)(v3 + 72);
    }
    else
    {
      CoreML::Specification::GLMClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 84) = 100;
      v14 = (CoreML::Specification::StringVector *)operator new();
      v16 = CoreML::Specification::StringVector::StringVector(v14);
      *(_QWORD *)(v3 + 72) = v14;
      if (*((_DWORD *)a2 + 21) != 100)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v16);
        v17 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)&CoreML::Specification::_StringVector_default_instance_;
        return CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v14, v17);
      }
    }
    v17 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((_QWORD *)a2 + 9);
    return CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v14, v17);
  }
  return this;
}

void sub_19C9FF050(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

CoreML::Specification::GLMClassifier *CoreML::Specification::GLMClassifier::GLMClassifier(CoreML::Specification::GLMClassifier *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E3D4E2D0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (this != (CoreML::Specification::GLMClassifier *)&CoreML::Specification::_GLMClassifier_default_instance_)
    CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(this);
  *(_QWORD *)((char *)this + 60) = 0;
  *((_QWORD *)this + 10) = 0;
  return this;
}

void sub_19C9FF0F0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v5 = *(_QWORD **)(v2 + 48);
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::GLMClassifier>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMClassifier>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMClassifier>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::Imputer::~Imputer(CoreML::Specification::Imputer *this)
{
  CoreML::Specification::Imputer::~Imputer(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D57D30;
  if (*((_DWORD *)this + 9))
    CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
  if (*((_DWORD *)this + 10))
    CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::Imputer::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Imputer");
}

CoreML::Specification::Imputer *CoreML::Specification::Imputer::New(CoreML::Specification::Imputer *this)
{
  return CoreML::Specification::Imputer::New(this, 0);
}

CoreML::Specification::Imputer *CoreML::Specification::Imputer::New(CoreML::Specification::Imputer *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Imputer *v3;

  v3 = (CoreML::Specification::Imputer *)operator new();
  CoreML::Specification::Imputer::Imputer(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Imputer>(a2, v3);
  return v3;
}

void sub_19C9FF2C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A3C40D8CFA532);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Imputer::Clear(CoreML::Specification::Imputer *this)
{
  CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
  return CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
}

uint64_t CoreML::Specification::Imputer::IsInitialized(CoreML::Specification::Imputer *this)
{
  return 1;
}

uint64_t CoreML::Specification::Imputer::MergePartialFromCodedStream(CoreML::Specification::Imputer *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int TagFallback;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  unint64_t Varint64Fallback;
  std::string *v16;
  CoreML::Specification::DoubleVector *v17;
  CoreML::Specification::Int64Vector *v18;
  CoreML::Specification::StringToDoubleMap *v19;
  CoreML::Specification::Int64ToDoubleMap *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  std::string *v25;
  uint64_t result;
  int v27;
  std::string *v28;
  std::string *v29;
  std::string::size_type size;
  char *v31;
  int VarintSizeAsIntFallback;
  char *v33;
  int v34;
  char *v35;
  int v36;
  char *v37;
  int v38;
  int v39;
  std::string *v40;
  char v41;
  char v42;
  int v43;
  unsigned int v44;
  int v45;
  BOOL v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  const char *v57;
  unint64_t v58;

  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v7 = *(char **)a2;
      if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1))
        break;
      LODWORD(v8) = 0;
LABEL_7:
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_8;
LABEL_14:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 9)
            goto LABEL_8;
          CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
          v58 = 0;
          v12 = *(unint64_t **)a2;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v58);
            if (!(_DWORD)result)
              return result;
            v13 = v58;
          }
          else
          {
            v13 = *v12;
            *(_QWORD *)a2 = v12 + 1;
          }
          *((_QWORD *)this + 2) = v13;
          *((_DWORD *)this + 9) = 1;
          continue;
        case 2u:
          if (v9 != 16)
            goto LABEL_8;
          CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
          v14 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
          {
            Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v41 & 1) == 0)
              return 0;
          }
          else
          {
            Varint64Fallback = *v14;
            *(_QWORD *)a2 = v14 + 1;
          }
          *((_QWORD *)this + 2) = Varint64Fallback;
          *((_DWORD *)this + 9) = 2;
          continue;
        case 3u:
          if (v9 != 26)
            goto LABEL_8;
          if (*((_DWORD *)this + 9) == 3)
          {
            v16 = *v6;
            if (*v6 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              goto LABEL_53;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 3;
            *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
          }
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v6;
LABEL_53:
          result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v16);
          if (!(_DWORD)result)
            return result;
          v27 = *((_DWORD *)this + 9);
          v28 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
          if (v27 == 3)
            v28 = *v6;
          if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0)
            v28 = (std::string *)v28->__r_.__value_.__r.__words[0];
          v29 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
          if (v27 == 3)
            v29 = *v6;
          if (SHIBYTE(v29->__r_.__value_.__r.__words[2]) < 0)
            size = v29->__r_.__value_.__l.__size_;
          else
            LODWORD(size) = HIBYTE(v29->__r_.__value_.__r.__words[2]);
          v57 = "CoreML.Specification.Imputer.imputedStringValue";
          goto LABEL_114;
        case 4u:
          if (v9 != 34)
            goto LABEL_8;
          if (*((_DWORD *)this + 9) == 4)
          {
            v17 = (CoreML::Specification::DoubleVector *)*v6;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 4;
            v17 = (CoreML::Specification::DoubleVector *)operator new();
            CoreML::Specification::DoubleVector::DoubleVector(v17);
            *v6 = (std::string *)v17;
          }
          v31 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v31 < 0)
          {
            VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v31;
            *(_QWORD *)a2 = v31 + 1;
          }
          v43 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
          v45 = *((_DWORD *)a2 + 13);
          v46 = __OFSUB__(v45--, 1);
          *((_DWORD *)a2 + 13) = v45;
          if (v45 < 0 != v46)
            return 0;
          v47 = v43;
          result = CoreML::Specification::DoubleVector::MergePartialFromCodedStream(v17, (char **)a2, v44);
          if (!(_DWORD)result)
            return result;
          goto LABEL_108;
        case 5u:
          if (v9 != 42)
            goto LABEL_8;
          if (*((_DWORD *)this + 9) == 5)
          {
            v18 = (CoreML::Specification::Int64Vector *)*v6;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 5;
            v18 = (CoreML::Specification::Int64Vector *)operator new();
            CoreML::Specification::Int64Vector::Int64Vector(v18);
            *v6 = (std::string *)v18;
          }
          v33 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v33 < 0)
          {
            v34 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v34 < 0)
              return 0;
          }
          else
          {
            v34 = *v33;
            *(_QWORD *)a2 = v33 + 1;
          }
          v48 = google::protobuf::io::CodedInputStream::PushLimit(a2, v34);
          v50 = *((_DWORD *)a2 + 13);
          v46 = __OFSUB__(v50--, 1);
          *((_DWORD *)a2 + 13) = v50;
          if (v50 < 0 != v46)
            return 0;
          v47 = v48;
          result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v18, a2, v49);
          if (!(_DWORD)result)
            return result;
          goto LABEL_108;
        case 6u:
          if (v9 != 50)
            goto LABEL_8;
          if (*((_DWORD *)this + 9) == 6)
          {
            v19 = (CoreML::Specification::StringToDoubleMap *)*v6;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 6;
            v19 = (CoreML::Specification::StringToDoubleMap *)operator new();
            CoreML::Specification::StringToDoubleMap::StringToDoubleMap(v19);
            *v6 = (std::string *)v19;
          }
          v35 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v35 < 0)
          {
            v36 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v36 < 0)
              return 0;
          }
          else
          {
            v36 = *v35;
            *(_QWORD *)a2 = v35 + 1;
          }
          v51 = google::protobuf::io::CodedInputStream::PushLimit(a2, v36);
          v53 = *((_DWORD *)a2 + 13);
          v46 = __OFSUB__(v53--, 1);
          *((_DWORD *)a2 + 13) = v53;
          if (v53 < 0 != v46)
            return 0;
          v47 = v51;
          result = CoreML::Specification::StringToDoubleMap::MergePartialFromCodedStream(v19, a2, v52);
          if (!(_DWORD)result)
            return result;
          goto LABEL_108;
        case 7u:
          if (v9 != 58)
            goto LABEL_8;
          if (*((_DWORD *)this + 9) == 7)
          {
            v20 = (CoreML::Specification::Int64ToDoubleMap *)*v6;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 7;
            v20 = (CoreML::Specification::Int64ToDoubleMap *)operator new();
            CoreML::Specification::Int64ToDoubleMap::Int64ToDoubleMap(v20);
            *v6 = (std::string *)v20;
          }
          v37 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v37 < 0)
          {
            v38 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v38 < 0)
              return 0;
          }
          else
          {
            v38 = *v37;
            *(_QWORD *)a2 = v37 + 1;
          }
          v54 = google::protobuf::io::CodedInputStream::PushLimit(a2, v38);
          v56 = *((_DWORD *)a2 + 13);
          v46 = __OFSUB__(v56--, 1);
          *((_DWORD *)a2 + 13) = v56;
          if (v56 < 0 != v46)
            return 0;
          v47 = v54;
          result = CoreML::Specification::Int64ToDoubleMap::MergePartialFromCodedStream(v20, a2, v55);
          if (!(_DWORD)result)
            return result;
LABEL_108:
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v47))
            continue;
          return 0;
        case 0xBu:
          if (v9 != 89)
            goto LABEL_8;
          CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
          v58 = 0;
          v21 = *(unint64_t **)a2;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v58);
            if (!(_DWORD)result)
              return result;
            v22 = v58;
          }
          else
          {
            v22 = *v21;
            *(_QWORD *)a2 = v21 + 1;
          }
          *((_QWORD *)this + 3) = v22;
          *((_DWORD *)this + 10) = 11;
          break;
        case 0xCu:
          if (v9 != 96)
            goto LABEL_8;
          CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
          v23 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v23 < 0)
          {
            v24 = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v42 & 1) == 0)
              return 0;
          }
          else
          {
            v24 = *v23;
            *(_QWORD *)a2 = v23 + 1;
          }
          *((_QWORD *)this + 3) = v24;
          *((_DWORD *)this + 10) = 12;
          continue;
        case 0xDu:
          if (v9 != 106)
            goto LABEL_8;
          if (*((_DWORD *)this + 10) == 13)
          {
            v25 = *v5;
            if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              goto LABEL_80;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
            *((_DWORD *)this + 10) = 13;
            *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
          }
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v25 = *v5;
LABEL_80:
          result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v25);
          if (!(_DWORD)result)
            return result;
          v39 = *((_DWORD *)this + 10);
          v28 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
          if (v39 == 13)
            v28 = *v5;
          if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0)
            v28 = (std::string *)v28->__r_.__value_.__r.__words[0];
          v40 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
          if (v39 == 13)
            v40 = *v5;
          if (SHIBYTE(v40->__r_.__value_.__r.__words[2]) < 0)
            size = v40->__r_.__value_.__l.__size_;
          else
            LODWORD(size) = HIBYTE(v40->__r_.__value_.__r.__words[2]);
          v57 = "CoreML.Specification.Imputer.replaceStringValue";
LABEL_114:
          if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v28, size, 0, (uint64_t)v57))
            return 0;
          continue;
        default:
          goto LABEL_8;
      }
    }
    v8 = *v7;
    if (*v7 < 1)
      goto LABEL_7;
    *(_QWORD *)a2 = v7 + 1;
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0)
      goto LABEL_14;
LABEL_8:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C9FF9D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Imputer::ByteSizeLong(CoreML::Specification::Imputer *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  switch(*((_DWORD *)this + 9))
  {
    case 1:
      v2 = 9;
      break;
    case 2:
      v3 = (9 * (__clz(*((_QWORD *)this + 2) | 1) ^ 0x3F) + 73) >> 6;
      goto LABEL_18;
    case 3:
      v4 = *((_QWORD *)this + 2);
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_18;
    case 4:
      v7 = (unsigned int *)*((_QWORD *)this + 2);
      v8 = v7[4];
      v9 = 8 * v8;
      if ((_DWORD)v8)
      {
        if ((v9 & 0x80000000) != 0)
          v10 = 11;
        else
          v10 = ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v10 = 0;
      }
      v12 = v10 + v9;
      v7[8] = v9;
      v7[9] = v12;
      v3 = v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_18;
    case 5:
      v11 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 2));
      goto LABEL_14;
    case 6:
      v11 = CoreML::Specification::StringToDoubleMap::ByteSizeLong(*((CoreML::Specification::StringToDoubleMap **)this
                                                                   + 2));
      goto LABEL_14;
    case 7:
      v11 = CoreML::Specification::Int64ToDoubleMap::ByteSizeLong(*((CoreML::Specification::Int64ToDoubleMap **)this + 2));
LABEL_14:
      v3 = v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
LABEL_18:
      v2 = v3 + 1;
      break;
    default:
      v2 = 0;
      break;
  }
  v13 = *((_DWORD *)this + 10);
  switch(v13)
  {
    case 13:
      v15 = *((_QWORD *)this + 3);
      v16 = *(unsigned __int8 *)(v15 + 23);
      v17 = *(_QWORD *)(v15 + 8);
      if ((v16 & 0x80u) == 0)
        v17 = v16;
      v18 = v2 + v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_28;
    case 12:
      v18 = v2 + ((9 * (__clz(*((_QWORD *)this + 3) | 1) ^ 0x3F) + 73) >> 6);
LABEL_28:
      result = v18 + 1;
      break;
    case 11:
      result = v2 + 9;
      break;
    default:
      result = v2;
      break;
  }
  *((_DWORD *)this + 8) = result;
  return result;
}

uint64_t CoreML::Specification::Imputer::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  __int128 *v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  __int128 *v13;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteDouble(1, a2, *(double *)(this + 16), a3);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 2)
  {
    this = google::protobuf::internal::WireFormatLite::WriteInt64(2, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 3)
  {
    v7 = *(unsigned int **)(v5 + 16);
    if (*((char *)v7 + 23) < 0)
    {
      v7 = *(unsigned int **)v7;
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8);
    }
    else
    {
      LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (uint64_t)"CoreML.Specification.Imputer.imputedStringValue");
    if (*(_DWORD *)(v5 + 36) == 3)
      v9 = *(__int128 **)(v5 + 16);
    else
      v9 = &google::protobuf::internal::fixed_address_empty_string;
    this = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(3u, (uint64_t)v9, a2);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 4)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 5)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 6)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 7)
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)7, *(_QWORD *)(v5 + 16), a2, a4);
  v10 = *(_DWORD *)(v5 + 40);
  if (v10 == 11)
  {
    this = google::protobuf::internal::WireFormatLite::WriteDouble(11, a2, *(double *)(v5 + 24), a3);
    v10 = *(_DWORD *)(v5 + 40);
  }
  if (v10 == 12)
  {
    this = google::protobuf::internal::WireFormatLite::WriteInt64(12, *(_QWORD *)(v5 + 24), a2, a4);
    v10 = *(_DWORD *)(v5 + 40);
  }
  if (v10 == 13)
  {
    v11 = *(unsigned int **)(v5 + 24);
    if (*((char *)v11 + 23) < 0)
    {
      v11 = *(unsigned int **)v11;
      v12 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
    }
    else
    {
      LODWORD(v12) = *((unsigned __int8 *)v11 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (uint64_t)"CoreML.Specification.Imputer.replaceStringValue");
    if (*(_DWORD *)(v5 + 40) == 13)
      v13 = *(__int128 **)(v5 + 24);
    else
      v13 = &google::protobuf::internal::fixed_address_empty_string;
    return google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xDu, (uint64_t)v13, a2);
  }
  return this;
}

uint64_t CoreML::Specification::Imputer::GetCachedSize(CoreML::Specification::Imputer *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CoreML::Specification::Imputer::clear_ImputedValue(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  switch(*(_DWORD *)(this + 36))
  {
    case 3:
      v2 = *(_QWORD *)(this + 16);
      if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
      {
        if (*(char *)(v2 + 23) < 0)
          operator delete(*(void **)v2);
        this = MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
      }
      break;
    case 4:
    case 5:
    case 6:
    case 7:
      this = *(_QWORD *)(this + 16);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::Imputer::clear_ReplaceValue(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  if (*(_DWORD *)(this + 40) == 13)
  {
    v2 = *(_QWORD *)(this + 24);
    if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
    {
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      this = MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 40) = 0;
  return this;
}

void CoreML::Specification::Imputer::MergeFrom(CoreML::Specification::Imputer *this, const CoreML::Specification::Imputer *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  CoreML::Specification::DoubleVector *v9;
  CoreML::Specification::StringToDoubleMap *v10;
  CoreML::Specification::Int64ToDoubleMap *v11;
  CoreML::Specification::protobuf_DataStructures_2eproto *v12;
  uint64_t *v13;
  CoreML::Specification::protobuf_DataStructures_2eproto *v14;
  CoreML::Specification::protobuf_DataStructures_2eproto *v15;
  const CoreML::Specification::StringToDoubleMap *v16;
  CoreML::Specification::protobuf_DataStructures_2eproto *v17;
  const CoreML::Specification::Int64ToDoubleMap *v18;
  int v19;
  uint64_t v20;
  const std::string *v21;
  std::string *v22;
  uint64_t v23;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  switch(*((_DWORD *)a2 + 9))
  {
    case 1:
      v5 = *((_QWORD *)a2 + 2);
      if (*((_DWORD *)this + 9) != 1)
      {
        CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
      }
      *((_QWORD *)this + 2) = v5;
      goto LABEL_38;
    case 2:
      v6 = *((_QWORD *)a2 + 2);
      if (*((_DWORD *)this + 9) != 2)
      {
        CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
        *((_DWORD *)this + 9) = 2;
      }
      *((_QWORD *)this + 2) = v6;
      goto LABEL_38;
    case 3:
      v7 = *((_QWORD *)a2 + 2);
      if (*((_DWORD *)this + 9) == 3)
      {
        v8 = (std::string *)*((_QWORD *)this + 2);
        if (v8 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          std::string::operator=(v8, *((const std::string **)a2 + 2));
          goto LABEL_38;
        }
      }
      else
      {
        CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
        *((_DWORD *)this + 9) = 3;
        *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
      }
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v7);
      goto LABEL_38;
    case 4:
      if (*((_DWORD *)this + 9) == 4)
      {
        v9 = (CoreML::Specification::DoubleVector *)*((_QWORD *)this + 2);
LABEL_24:
        v13 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_32;
      }
      CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
      *((_DWORD *)this + 9) = 4;
      v9 = (CoreML::Specification::DoubleVector *)operator new();
      v12 = CoreML::Specification::DoubleVector::DoubleVector(v9);
      *((_QWORD *)this + 2) = v9;
      if (*((_DWORD *)a2 + 9) == 4)
        goto LABEL_24;
      CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v12);
      v13 = &CoreML::Specification::_DoubleVector_default_instance_;
      goto LABEL_32;
    case 5:
      if (*((_DWORD *)this + 9) == 5)
      {
        v9 = (CoreML::Specification::DoubleVector *)*((_QWORD *)this + 2);
LABEL_26:
        v13 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_32;
      }
      CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
      *((_DWORD *)this + 9) = 5;
      v9 = (CoreML::Specification::DoubleVector *)operator new();
      v14 = CoreML::Specification::Int64Vector::Int64Vector(v9);
      *((_QWORD *)this + 2) = v9;
      if (*((_DWORD *)a2 + 9) == 5)
        goto LABEL_26;
      CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v14);
      v13 = &CoreML::Specification::_Int64Vector_default_instance_;
LABEL_32:
      CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v9, (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)v13);
      goto LABEL_38;
    case 6:
      if (*((_DWORD *)this + 9) == 6)
      {
        v10 = (CoreML::Specification::StringToDoubleMap *)*((_QWORD *)this + 2);
LABEL_28:
        v16 = (const CoreML::Specification::StringToDoubleMap *)*((_QWORD *)a2 + 2);
        goto LABEL_35;
      }
      CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
      *((_DWORD *)this + 9) = 6;
      v10 = (CoreML::Specification::StringToDoubleMap *)operator new();
      v15 = CoreML::Specification::StringToDoubleMap::StringToDoubleMap(v10);
      *((_QWORD *)this + 2) = v10;
      if (*((_DWORD *)a2 + 9) == 6)
        goto LABEL_28;
      CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v15);
      v16 = (const CoreML::Specification::StringToDoubleMap *)&CoreML::Specification::_StringToDoubleMap_default_instance_;
LABEL_35:
      CoreML::Specification::StringToDoubleMap::MergeFrom(v10, v16);
      goto LABEL_38;
    case 7:
      if (*((_DWORD *)this + 9) == 7)
      {
        v11 = (CoreML::Specification::Int64ToDoubleMap *)*((_QWORD *)this + 2);
LABEL_30:
        v18 = (const CoreML::Specification::Int64ToDoubleMap *)*((_QWORD *)a2 + 2);
        goto LABEL_37;
      }
      CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
      *((_DWORD *)this + 9) = 7;
      v11 = (CoreML::Specification::Int64ToDoubleMap *)operator new();
      v17 = CoreML::Specification::Int64ToDoubleMap::Int64ToDoubleMap(v11);
      *((_QWORD *)this + 2) = v11;
      if (*((_DWORD *)a2 + 9) == 7)
        goto LABEL_30;
      CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v17);
      v18 = (const CoreML::Specification::Int64ToDoubleMap *)&CoreML::Specification::_Int64ToDoubleMap_default_instance_;
LABEL_37:
      CoreML::Specification::Int64ToDoubleMap::MergeFrom(v11, v18);
LABEL_38:
      v19 = *((_DWORD *)a2 + 10);
      switch(v19)
      {
        case 13:
          v21 = (const std::string *)*((_QWORD *)a2 + 3);
          if (*((_DWORD *)this + 10) == 13)
          {
            v22 = (std::string *)*((_QWORD *)this + 3);
            if (v22 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            {
              std::string::operator=(v22, v21);
              return;
            }
          }
          else
          {
            CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
            *((_DWORD *)this + 10) = 13;
            *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
          }
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v21);
          break;
        case 12:
          v23 = *((_QWORD *)a2 + 3);
          if (*((_DWORD *)this + 10) != 12)
          {
            CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
            *((_DWORD *)this + 10) = 12;
          }
          *((_QWORD *)this + 3) = v23;
          break;
        case 11:
          v20 = *((_QWORD *)a2 + 3);
          if (*((_DWORD *)this + 10) != 11)
          {
            CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
            *((_DWORD *)this + 10) = 11;
          }
          *((_QWORD *)this + 3) = v20;
          break;
      }
      return;
    default:
      goto LABEL_38;
  }
}

void sub_19CA0027C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::Imputer *CoreML::Specification::Imputer::Imputer(CoreML::Specification::Imputer *this)
{
  *(_QWORD *)this = &off_1E3D57D30;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Imputer *)&CoreML::Specification::_Imputer_default_instance_)
    CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_19CA0030C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Imputer>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Imputer>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Imputer>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL CoreML::hasSufficientBytesInQuantizedWeightParam(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _BOOL4 v18;
  _BOOL4 v19;
  BOOL v20;
  _BOOL4 v21;

  v2 = &CoreML::Specification::_QuantizationParams_default_instance_;
  v3 = a1[8];
  if (v3)
    v2 = (uint64_t *)a1[8];
  v4 = a1[5];
  LODWORD(v5) = *(unsigned __int8 *)(v4 + 23);
  if (*(char *)(v4 + 23) < 0)
    v6 = *(_QWORD *)(v4 + 8);
  else
    v6 = *(unsigned __int8 *)(v4 + 23);
  v7 = a1[6];
  LODWORD(v8) = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0)
    v9 = *(_QWORD *)(v7 + 8);
  else
    v9 = *(unsigned __int8 *)(v7 + 23);
  v10 = *((_DWORD *)a1 + 4);
  v11 = a1[7];
  LODWORD(v12) = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
    v13 = *(_QWORD *)(v11 + 8);
  else
    v13 = *(unsigned __int8 *)(v11 + 23);
  v14 = v2[2];
  if (v10 <= 0)
    v15 = 1;
  else
    v15 = 2;
  if (v6)
    v16 = v15;
  else
    v16 = v10 > 0;
  if (v9)
    ++v16;
  if (v13)
    ++v16;
  if (v16 > 1)
  {
LABEL_23:
    LODWORD(v5) = 0;
    return (int)v5 >= (unint64_t)(v14 * a2 + 7) >> 3;
  }
  if (v10 <= 0 && v16)
  {
    if ((v5 & 0x80) != 0)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        return (int)v5 >= (unint64_t)(v14 * a2 + 7) >> 3;
    }
    else if (*(_BYTE *)(v4 + 23))
    {
      return (int)v5 >= (unint64_t)(v14 * a2 + 7) >> 3;
    }
    if ((v8 & 0x80) != 0)
    {
      v18 = a1 != &CoreML::Specification::_WeightParams_default_instance_;
      v19 = v3 != 0;
      if (!v3)
        goto LABEL_43;
      if (a1 == &CoreML::Specification::_WeightParams_default_instance_)
        goto LABEL_43;
      v8 = *(_QWORD *)(v7 + 8);
      if (!v8)
        goto LABEL_43;
    }
    else
    {
      v18 = a1 != &CoreML::Specification::_WeightParams_default_instance_;
      v19 = v3 != 0;
      if (!v3 || a1 == &CoreML::Specification::_WeightParams_default_instance_ || !*(_BYTE *)(v7 + 23))
      {
LABEL_43:
        if ((v12 & 0x80) != 0)
        {
          v12 = *(_QWORD *)(v11 + 8);
          v20 = v12 == 0;
        }
        else
        {
          v20 = (_DWORD)v12 == 0;
        }
        v21 = !v20 && v18;
        if (v19 && v21)
        {
          LODWORD(v5) = v12;
          return (int)v5 >= (unint64_t)(v14 * a2 + 7) >> 3;
        }
        goto LABEL_23;
      }
    }
    LODWORD(v5) = v8;
    return (int)v5 >= (unint64_t)(v14 * a2 + 7) >> 3;
  }
  if (v16)
    LODWORD(v5) = 4 * v10;
  else
    LODWORD(v5) = 0;
  return (int)v5 >= (unint64_t)(v14 * a2 + 7) >> 3;
}

void CoreML::Specification::CustomModel_CustomModelParamValue::~CustomModel_CustomModelParamValue(CoreML::Specification::CustomModel_CustomModelParamValue *this)
{
  CoreML::Specification::CustomModel_CustomModelParamValue::~CustomModel_CustomModelParamValue(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D57280;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::CustomModel_CustomModelParamValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CustomModel.CustomModelParamValue");
}

CoreML::Specification::CustomModel_CustomModelParamValue *CoreML::Specification::CustomModel_CustomModelParamValue::New(CoreML::Specification::CustomModel_CustomModelParamValue *this)
{
  return CoreML::Specification::CustomModel_CustomModelParamValue::New(this, 0);
}

CoreML::Specification::CustomModel_CustomModelParamValue *CoreML::Specification::CustomModel_CustomModelParamValue::New(CoreML::Specification::CustomModel_CustomModelParamValue *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CustomModel_CustomModelParamValue *v3;

  v3 = (CoreML::Specification::CustomModel_CustomModelParamValue *)operator new();
  CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CustomModel_CustomModelParamValue>(a2, v3);
  return v3;
}

void sub_19CA005E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CustomModel_CustomModelParamValue::IsInitialized(CoreML::Specification::CustomModel_CustomModelParamValue *this)
{
  return 1;
}

uint64_t CoreML::Specification::CustomModel_CustomModelParamValue::MergePartialFromCodedStream(CoreML::Specification::CustomModel_CustomModelParamValue *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  unsigned int TagFallback;
  unsigned int v14;
  char *v15;
  int v16;
  std::string *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string *v20;
  char *v21;
  unint64_t Varint64Fallback;
  char *v23;
  unint64_t v24;
  uint64_t result;
  int v26;
  std::string *v27;
  std::string *v28;
  std::string::size_type size;
  char v30;
  char v31;
  uint64_t Varint32Fallback;
  unint64_t v33;

  v5 = (std::string **)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        v6 = *(unsigned __int8 **)a2;
        v7 = *((_QWORD *)a2 + 1);
        if (*(_QWORD *)a2 >= v7)
        {
          LODWORD(v9) = 0;
        }
        else
        {
          v8 = v6 + 1;
          v9 = *v6;
          if ((char)*v6 >= 1)
          {
            *(_QWORD *)a2 = v8;
            v10 = v9 | 0x100000000;
            if ((v10 & 0x100000000) == 0)
              goto LABEL_9;
            goto LABEL_17;
          }
          if ((unint64_t)v8 < v7)
          {
            v11 = *v8;
            if ((v9 & ~v11) >= 0x80)
            {
              *(_QWORD *)a2 = v6 + 2;
              v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
              goto LABEL_17;
            }
          }
        }
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
        v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v10 & 0x100000000) == 0)
          goto LABEL_9;
LABEL_17:
        v14 = v10 >> 3;
        if (v10 >> 3 <= 0x27)
          break;
        if (v14 == 40)
        {
          if (v10 != 64)
            goto LABEL_9;
          CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
          v21 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
          {
            Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v30 & 1) == 0)
              return 0;
          }
          else
          {
            Varint64Fallback = *v21;
            *(_QWORD *)a2 = v21 + 1;
          }
          *v5 = (std::string *)Varint64Fallback;
          goto LABEL_73;
        }
        if (v14 == 50)
        {
          if (v10 != 144)
            goto LABEL_9;
          CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
          v23 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v23 < 0)
          {
            v24 = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v31 & 1) == 0)
              return 0;
          }
          else
          {
            v24 = *v23;
            *(_QWORD *)a2 = v23 + 1;
          }
          *(_BYTE *)v5 = v24 != 0;
LABEL_73:
          *((_DWORD *)this + 7) = v14;
        }
        else
        {
          if (v14 != 60 || v10 != 226)
            goto LABEL_9;
          if (*((_DWORD *)this + 7) != 60)
          {
            CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
            *((_DWORD *)this + 7) = 60;
            *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_49:
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v17 = *v5;
            goto LABEL_50;
          }
          v17 = *v5;
          if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_49;
LABEL_50:
          if ((google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v17) & 1) == 0)
            return 0;
        }
      }
      if (v14 == 10)
      {
        if (v10 != 81)
          goto LABEL_9;
        CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
        v33 = 0;
        v18 = *(unint64_t **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
        {
          result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v33);
          if (!(_DWORD)result)
            return result;
          v19 = v33;
        }
        else
        {
          v19 = *v18;
          *(_QWORD *)a2 = v18 + 1;
        }
        *v5 = (std::string *)v19;
        goto LABEL_73;
      }
      if (v14 != 20)
        break;
      if (v10 != 162)
        goto LABEL_9;
      if (*((_DWORD *)this + 7) != 20)
      {
        CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
        *((_DWORD *)this + 7) = 20;
        *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_53:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v20 = *v5;
        goto LABEL_54;
      }
      v20 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_53;
LABEL_54:
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v20);
      if (!(_DWORD)result)
        return result;
      v26 = *((_DWORD *)this + 7);
      v27 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
      if (v26 == 20)
        v27 = *v5;
      if (SHIBYTE(v27->__r_.__value_.__r.__words[2]) < 0)
        v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
      v28 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
      if (v26 == 20)
        v28 = *v5;
      if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0)
        size = v28->__r_.__value_.__l.__size_;
      else
        LODWORD(size) = HIBYTE(v28->__r_.__value_.__r.__words[2]);
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v27, size, 0, (uint64_t)"CoreML.Specification.CustomModel.CustomModelParamValue.stringValue"))return 0;
    }
    if (v14 == 30 && v10 == 240)
    {
      CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
      v15 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v16 = 0;
      }
      else
      {
        v16 = *v15;
        if ((*v15 & 0x80000000) == 0)
        {
          *(_QWORD *)a2 = v15 + 1;
LABEL_72:
          *(_DWORD *)v5 = v16;
          goto LABEL_73;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v16);
      v16 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
      goto LABEL_72;
    }
LABEL_9:
    if ((_DWORD)v10)
      v12 = (v10 & 7) == 4;
    else
      v12 = 1;
    if (v12)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::CustomModel_CustomModelParamValue::ByteSizeLong(CoreML::Specification::CustomModel_CustomModelParamValue *this)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = 0;
  v2 = *((_DWORD *)this + 7);
  if (v2 <= 39)
  {
    if (v2 == 10)
    {
      v1 = 9;
      goto LABEL_18;
    }
    if (v2 != 20)
    {
      if (v2 == 30)
      {
        v3 = *((_DWORD *)this + 4);
        v4 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 2;
        if (v3 >= 0)
          v1 = v4;
        else
          v1 = 12;
      }
      goto LABEL_18;
    }
    goto LABEL_11;
  }
  switch(v2)
  {
    case '(':
      v8 = (9 * (__clz(*((_QWORD *)this + 2) | 1) ^ 0x3F) + 73) >> 6;
LABEL_16:
      v1 = v8 + 2;
      break;
    case '2':
      v1 = 3;
      break;
    case '<':
LABEL_11:
      v5 = *((_QWORD *)this + 2);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v7 = *(_QWORD *)(v5 + 8);
      if ((v6 & 0x80u) == 0)
        v7 = v6;
      v8 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_16;
  }
LABEL_18:
  *((_DWORD *)this + 6) = v1;
  return v1;
}

uint64_t CoreML::Specification::CustomModel_CustomModelParamValue::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  __int128 *v9;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 10)
  {
    this = google::protobuf::internal::WireFormatLite::WriteDouble(10, a2, *(double *)(this + 16), a3);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 20)
  {
    v7 = *(unsigned int **)(v5 + 16);
    if (*((char *)v7 + 23) < 0)
    {
      v7 = *(unsigned int **)v7;
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8);
    }
    else
    {
      LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (uint64_t)"CoreML.Specification.CustomModel.CustomModelParamValue.stringValue");
    if (*(_DWORD *)(v5 + 28) == 20)
      v9 = *(__int128 **)(v5 + 16);
    else
      v9 = &google::protobuf::internal::fixed_address_empty_string;
    this = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0x14u, (uint64_t)v9, a2);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 30)
  {
    this = google::protobuf::internal::WireFormatLite::WriteInt32(30, *(_DWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 40)
  {
    this = google::protobuf::internal::WireFormatLite::WriteInt64(40, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 50)
  {
    this = google::protobuf::internal::WireFormatLite::WriteBool(50, *(unsigned __int8 *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 60)
    return google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(0x3Cu, *(_QWORD *)(v5 + 16), a2);
  return this;
}

uint64_t CoreML::Specification::CustomModel_CustomModelParamValue::GetCachedSize(CoreML::Specification::CustomModel_CustomModelParamValue *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CoreML::Specification::CustomModel_CustomModelParamValue::clear_value(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_DWORD *)(this + 28);
  if (v2 == 60 || v2 == 20)
  {
    v3 = *(_QWORD *)(this + 16);
    if ((__int128 *)v3 != &google::protobuf::internal::fixed_address_empty_string && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      this = MEMORY[0x1A1AD6260](v3, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

void CoreML::Specification::CustomModel_CustomModelParamValue::MergeFrom(CoreML::Specification::CustomModel_CustomModelParamValue *this, const CoreML::Specification::CustomModel_CustomModelParamValue *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  const std::string *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  char v12;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 7);
  if (v5 > 39)
  {
    switch(v5)
    {
      case '(':
        v10 = *((_QWORD *)a2 + 2);
        if (*((_DWORD *)this + 7) != 40)
        {
          CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 40;
        }
        *((_QWORD *)this + 2) = v10;
        break;
      case '2':
        v12 = *((_BYTE *)a2 + 16);
        if (*((_DWORD *)this + 7) != 50)
        {
          CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 50;
        }
        *((_BYTE *)this + 16) = v12;
        break;
      case '<':
        v7 = (const std::string *)*((_QWORD *)a2 + 2);
        if (*((_DWORD *)this + 7) == 60)
        {
LABEL_22:
          v11 = (std::string *)*((_QWORD *)this + 2);
          if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            std::string::operator=(v11, v7);
            return;
          }
          goto LABEL_30;
        }
        CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
        v8 = 60;
LABEL_29:
        *((_DWORD *)this + 7) = v8;
        *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_30:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, (uint64_t)v7);
        return;
      default:
        return;
    }
  }
  else
  {
    if (v5 != 10)
    {
      if (v5 != 20)
      {
        if (v5 == 30)
        {
          v6 = *((_DWORD *)a2 + 4);
          if (*((_DWORD *)this + 7) != 30)
          {
            CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
            *((_DWORD *)this + 7) = 30;
          }
          *((_DWORD *)this + 4) = v6;
        }
        return;
      }
      v7 = (const std::string *)*((_QWORD *)a2 + 2);
      if (*((_DWORD *)this + 7) == 20)
        goto LABEL_22;
      CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
      v8 = 20;
      goto LABEL_29;
    }
    v9 = *((_QWORD *)a2 + 2);
    if (*((_DWORD *)this + 7) != 10)
    {
      CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 10;
    }
    *((_QWORD *)this + 2) = v9;
  }
}

CoreML::Specification::CustomModel_CustomModelParamValue *CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(CoreML::Specification::CustomModel_CustomModelParamValue *this)
{
  *(_QWORD *)this = &off_1E3D57280;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CustomModel_CustomModelParamValue *)&CoreML::Specification::_CustomModel_CustomModelParamValue_default_instance_)
    CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_19CA00E18(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CustomModel_CustomModelParamValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CustomModel_CustomModelParamValue>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CustomModel_CustomModelParamValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::clear(a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x1A1AD6260](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

void google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::clear(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[3];
  _QWORD v8[3];

  v1 = (_QWORD *)a1[2];
  v2 = v1[3];
  v3 = v1[1];
  if (v3 > v2)
  {
    v5 = v1[4];
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 8 * v2);
      if (v6)
        break;
      if (v3 == ++v2)
        return;
    }
    if (v6 != *(_QWORD *)(v5 + 8 * (v2 ^ 1)) || (v6 = *(_QWORD *)(*(_QWORD *)v6 + 32)) != 0)
    {
      do
      {
        v7[0] = v6;
        v7[1] = (uint64_t)v1;
        v7[2] = v2;
        google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase((uint64_t)v8, a1, v7);
        v6 = v8[0];
        v1 = (_QWORD *)v8[1];
        v2 = v8[2];
      }
      while (v8[0]);
    }
  }
}

__n128 google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  _BOOL4 v18;
  unint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  __n128 result;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  unint64_t v29;
  _QWORD *v30;

  v6 = *a3;
  if (!*a2)
  {
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      v8 = google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::~MapPair(v7);
      MEMORY[0x1A1AD6260](v8, 0x10B2C4015637A22);
      v6 = *a3;
    }
  }
  v28 = *(__n128 *)a3;
  v29 = a3[2];
  v9 = *(_QWORD *)(v6 + 32);
  if (v9)
    goto LABEL_5;
  v30 = 0;
  if (google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary((uint64_t)a3, (uint64_t *)&v30))
  {
    v10 = a3[2] + 1;
  }
  else
  {
    v11 = a3[2];
    v12 = *(_QWORD *)(*(_QWORD *)(a3[1] + 32) + 8 * v11);
    v13 = (uint64_t)v30;
    v14 = (_QWORD *)v30[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = *(_QWORD **)(v13 + 16);
        v16 = *v15 == v13;
        v13 = (uint64_t)v15;
      }
      while (!v16);
    }
    v30 = v15;
    if (v15 != (_QWORD *)(v12 + 8))
    {
      v9 = v15[4];
LABEL_5:
      *a3 = v9;
      goto LABEL_17;
    }
    v10 = v11 + 2;
  }
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::SearchFrom(a3, v10);
LABEL_17:
  v17 = (_QWORD *)a2[2];
  v30 = 0;
  v18 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v28, (uint64_t *)&v30);
  v19 = v29;
  v20 = (void **)v28.n128_u64[0];
  v21 = v17[4];
  v22 = *(_QWORD *)(v21 + 8 * v29);
  if (v18)
  {
    v23 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v28.n128_i64[0], *(_QWORD *)(v21 + 8 * v29));
LABEL_23:
    *(_QWORD *)(v17[4] + 8 * v19) = v23;
    goto LABEL_24;
  }
  v24 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v22, (_QWORD *)v30[4]);
  if ((uint64_t *)(v22 + 8) != v24)
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v22, v24);
  if (!*(_QWORD *)(v22 + 24))
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(v17[5], (_QWORD **)v22);
    v23 = 0;
    *(_QWORD *)(v17[4] + ((8 * v19) | 8)) = 0;
    v19 &= ~1uLL;
    goto LABEL_23;
  }
LABEL_24:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v17, v20);
  --*v17;
  if (v19 == v17[3])
  {
    v26 = v17[1];
    if (v19 < v26)
    {
      v27 = v17[4];
      do
      {
        if (*(_QWORD *)(v27 + 8 * v19))
          break;
        v17[3] = ++v19;
      }
      while (v26 != v19);
    }
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  return result;
}

void CoreML::Specification::CustomModel::~CustomModel(CoreML::Specification::CustomModel *this)
{
  CoreML::Specification::CustomModel::~CustomModel(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3D4CEA0;
  v2 = *((_QWORD *)this + 6);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 7);
  if ((__int128 *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1A1AD6260](v4, 0x1012C40EC159624);
  }
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::CustomModel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CustomModel");
}

CoreML::Specification::CustomModel *CoreML::Specification::CustomModel::New(CoreML::Specification::CustomModel *this)
{
  return CoreML::Specification::CustomModel::New(this, 0);
}

CoreML::Specification::CustomModel *CoreML::Specification::CustomModel::New(CoreML::Specification::CustomModel *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CustomModel *v3;

  v3 = (CoreML::Specification::CustomModel *)operator new();
  CoreML::Specification::CustomModel::CustomModel(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CustomModel>(a2, v3);
  return v3;
}

void sub_19CA01210(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C405C383CC1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CustomModel::Clear(CoreML::Specification::CustomModel *this)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::clear((_QWORD *)this + 3);
  v2 = *((_QWORD *)this + 6);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 7);
  if ((__int128 *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
}

uint64_t CoreML::Specification::CustomModel::IsInitialized(CoreML::Specification::CustomModel *this)
{
  return 1;
}

uint64_t CoreML::Specification::CustomModel::MergePartialFromCodedStream(CoreML::Specification::CustomModel *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v4;
  google::protobuf::Arena **v5;
  _QWORD *v6;
  std::string **v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  std::string *v15;
  std::string *v16;
  std::string::size_type size;
  char *v18;
  int VarintSizeAsIntFallback;
  std::string *v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  _BYTE *v25;
  uint64_t v26;
  CoreML::Specification::CustomModel_CustomModelParamValue *v27;
  char *v28;
  int v29;
  uint64_t v30;
  __int128 *v31;
  int BeyondKeyValuePair;
  __n128 v33;
  BOOL v34;
  int v35;
  const char *v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int *p_p;
  int v42;
  _BOOL4 v43;
  unsigned int TagFallback;
  google::protobuf::Arena **v47;
  _QWORD *v48;
  std::string __p;
  google::protobuf::Arena **v50;
  uint64_t v51;

  v4 = (std::string **)((char *)this + 56);
  v5 = (google::protobuf::Arena **)((char *)this + 16);
  v6 = (_QWORD *)((char *)this + 24);
  v7 = (std::string **)((char *)this + 48);
  while (1)
  {
    while (1)
    {
      v8 = *(unsigned __int8 **)a2;
      v9 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v9)
      {
        LODWORD(v11) = 0;
LABEL_86:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v11);
        v12 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v12 & 0x100000000) == 0)
          goto LABEL_87;
        goto LABEL_9;
      }
      v10 = v8 + 1;
      v11 = *v8;
      if ((char)*v8 >= 1)
        break;
      if ((unint64_t)v10 >= v9)
        goto LABEL_86;
      v13 = *v10;
      if ((v11 & ~v13) < 0x80)
        goto LABEL_86;
      *(_QWORD *)a2 = v8 + 2;
      v12 = (v11 + (v13 << 7) - 128) | 0x100000000;
LABEL_9:
      v14 = v12 >> 3;
      if (v12 >> 3 == 40)
      {
        if (v12 != 66)
          goto LABEL_87;
        v20 = *v4;
        if (*v4 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v20 = *v4;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v20))
          return 0;
        v16 = *v4;
        if (SHIBYTE((*v4)->__r_.__value_.__r.__words[2]) < 0)
        {
          v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
          size = (*v4)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v4)->__r_.__value_.__r.__words[2]);
        }
        v36 = "CoreML.Specification.CustomModel.description";
LABEL_57:
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v16, size, 0, (uint64_t)v36))
          return 0;
      }
      else
      {
        if (v14 != 30)
        {
          if (v14 != 10 || v12 != 82)
            goto LABEL_87;
          v15 = *v7;
          if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v15 = *v7;
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v15))
            return 0;
          v16 = *v7;
          if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
          {
            v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
            size = (*v7)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
          }
          v36 = "CoreML.Specification.CustomModel.className";
          goto LABEL_57;
        }
        if (v12 != 242)
          goto LABEL_87;
        v47 = v5;
        v48 = v6;
        memset(&__p, 0, sizeof(__p));
        v51 = 0;
        v18 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v18 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_84;
        }
        else
        {
          VarintSizeAsIntFallback = *v18;
          *(_QWORD *)a2 = v18 + 1;
        }
        v21 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v22 = *((_DWORD *)a2 + 13);
        v23 = __OFSUB__(v22--, 1);
        *((_DWORD *)a2 + 13) = v22;
        if (v22 < 0 != v23)
          goto LABEL_84;
        v24 = v21;
        v25 = *(_BYTE **)a2;
        if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && *v25 == 10)
        {
          *(_QWORD *)a2 = v25 + 1;
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, &__p))
            goto LABEL_84;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) >= 1 && **(_BYTE **)a2 == 18)
          {
            v26 = *(_QWORD *)v48[2];
            v50 = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::operator[]((uint64_t)v48, (uint64_t)&__p);
            if (v26 != *(_QWORD *)v48[2])
            {
              google::protobuf::io::CodedInputStream::Skip(a2, 1u);
              v27 = (CoreML::Specification::CustomModel_CustomModelParamValue *)v50;
              v28 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v28 < 0)
              {
                v29 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if ((v29 & 0x80000000) == 0)
                  goto LABEL_60;
              }
              else
              {
                v29 = *v28;
                *(_QWORD *)a2 = v28 + 1;
LABEL_60:
                v37 = google::protobuf::io::CodedInputStream::PushLimit(a2, v29);
                v39 = *((_DWORD *)a2 + 13);
                v23 = __OFSUB__(v39--, 1);
                *((_DWORD *)a2 + 13) = v39;
                if (v39 < 0 == v23)
                {
                  v40 = v37;
                  if (CoreML::Specification::CustomModel_CustomModelParamValue::MergePartialFromCodedStream(v27, a2, v38))
                  {
                    if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v40))
                    {
                      if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1)
                        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                      {
                        *((_DWORD *)a2 + 8) = 0;
                        *((_BYTE *)a2 + 36) = 1;
                        goto LABEL_66;
                      }
                      BeyondKeyValuePair = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>>::ReadBeyondKeyValuePair((uint64_t)&v47, (uint64_t)a2);
LABEL_65:
                      if (BeyondKeyValuePair)
                      {
LABEL_66:
                        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v24))
                        {
                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            p_p = (unsigned int *)&__p;
                          else
                            p_p = (unsigned int *)__p.__r_.__value_.__r.__words[0];
                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v42 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                          else
                            v42 = __p.__r_.__value_.__r.__words[1];
                          v43 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v42, 0, (uint64_t)"CoreML.Specification.CustomModel.ParametersEntry.key");
                          v34 = v43;
                          if (v43)
                            v35 = 0;
                          else
                            v35 = 6;
LABEL_76:
                          if (v51)
                            (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
                          goto LABEL_78;
                        }
                      }
LABEL_84:
                      v34 = 0;
                      v35 = 6;
                      goto LABEL_76;
                    }
                  }
                }
              }
              google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase(v48, (unsigned __int8 *)&__p);
              goto LABEL_84;
            }
          }
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          memset(&__p, 0, sizeof(__p));
        }
        v30 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*v47);
        if (v51 != v30)
        {
          if (v51)
            (*(void (**)(void))(*(_QWORD *)v51 + 8))();
          v51 = v30;
        }
        v31 = *(__int128 **)(v30 + 16);
        *(_DWORD *)(v30 + 40) |= 1u;
        if (v31 == &google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v30 + 16), *(google::protobuf::Arena ***)(v30 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v31 = *(__int128 **)(v30 + 16);
        }
        std::string::operator=((std::string *)v31, &__p);
        BeyondKeyValuePair = (*(uint64_t (**)(uint64_t, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v51 + 88))(v51, a2);
        if (BeyondKeyValuePair)
          v33.n128_f64[0] = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>>::UseKeyAndValueFromEntry((uint64_t)&v47);
        if (!(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v51 + 40))(v51, v33))
          goto LABEL_65;
        v51 = 0;
        if ((BeyondKeyValuePair & 1) != 0)
          goto LABEL_66;
        v34 = 0;
        v35 = 6;
LABEL_78:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (!v34 && v35)
          return 0;
      }
    }
    *(_QWORD *)a2 = v10;
    v12 = v11 | 0x100000000;
    if ((v12 & 0x100000000) != 0)
      goto LABEL_9;
LABEL_87:
    if (!(_DWORD)v12 || (v12 & 7) == 4)
      return 1;
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v12, a3))return 0;
  }
}

void sub_19CA017D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::CustomModel::ByteSizeLong(CoreML::Specification::CustomModel *this)
{
  uint64_t *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v15[3];

  v2 = (uint64_t *)*((_QWORD *)this + 5);
  v3 = *v2;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v15, v2);
  v4 = 0;
  v5 = 2 * v3;
  while (v15[0])
  {
    v6 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v15[0] + 3), *((_QWORD *)v15[0] + 3) + 24, *((google::protobuf::Arena **)this + 2));
    if (v4 != (_DWORD *)v6)
    {
      if (v4)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v4 = (_DWORD *)v6;
    }
    v7 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v4);
    v5 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v15);
  }
  if (v4)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  v8 = *((_QWORD *)this + 6);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_15;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_15;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_15:
  v11 = *((_QWORD *)this + 7);
  v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(_QWORD *)(v11 + 8))
      goto LABEL_20;
  }
  else if (!*(_BYTE *)(v11 + 23))
  {
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v11 + 8);
  if ((v12 & 0x80u) == 0)
    v13 = v12;
  v5 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_20:
  *((_DWORD *)this + 16) = v5;
  return v5;
}

void sub_19CA01988(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::CustomModel::SerializeWithCachedSizes(CoreML::Specification::CustomModel *this, google::protobuf::io::CodedOutputStream *a2)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  google::protobuf::io::CodedOutputStream *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::io::CodedOutputStream *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  unsigned __int8 *v28[3];

  v4 = (unsigned int *)*((_QWORD *)this + 6);
  if (*((char *)v4 + 23) < 0)
  {
    v5 = *((_QWORD *)v4 + 1);
    if (!v5)
      goto LABEL_7;
    v4 = *(unsigned int **)v4;
    goto LABEL_6;
  }
  LODWORD(v5) = *((unsigned __int8 *)v4 + 23);
  if (*((_BYTE *)v4 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v4, v5, 1, (uint64_t)"CoreML.Specification.CustomModel.className");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xAu, *((_QWORD *)this + 6), a2);
  }
LABEL_7:
  v6 = (unint64_t *)*((_QWORD *)this + 5);
  v7 = *v6;
  if (!*v6)
    goto LABEL_50;
  if (*((_BYTE *)a2 + 26))
  {
    if (v7 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_30:
      v15 = operator new[]();
      google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v28, *((_QWORD **)this + 5));
      v16 = v28[0];
      if (v28[0])
      {
        v17 = 0;
        do
        {
          *(_QWORD *)(v15 + 8 * v17) = *((_QWORD *)v16 + 3);
          google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v28);
          ++v17;
          v16 = v28[0];
        }
        while (v28[0]);
      }
      else
      {
        v17 = 0;
      }
      v18 = 126 - 2 * __clz(v17);
      if (v17)
        v19 = v18;
      else
        v19 = 0;
      std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**,false>(v15, (char *)(v15 + 8 * v17), v19, 1);
      if (v17)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v23 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v15 + 8 * v20), *(_QWORD *)(v15 + 8 * v20) + 24, *((google::protobuf::Arena **)this + 2));
          if (v21 != v23)
          {
            if (v21)
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            v21 = v23;
          }
          google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x1E, v21, a2, v22);
          v24 = *(unsigned int **)(v15 + 8 * v20);
          if (*((char *)v24 + 23) < 0)
          {
            v24 = *(unsigned int **)v24;
            v25 = *(_QWORD *)(*(_QWORD *)(v15 + 8 * v20) + 8);
          }
          else
          {
            LODWORD(v25) = *((unsigned __int8 *)v24 + 23);
          }
          google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (uint64_t)"CoreML.Specification.CustomModel.ParametersEntry.key");
          ++v20;
        }
        while (v17 != v20);
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      MEMORY[0x1A1AD6248](v15, 0x60C8044C4A2DFLL);
      goto LABEL_50;
    }
  }
  else if (v7 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_30;
  }
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v28, v6);
  v9 = 0;
  while (v28[0])
  {
    v11 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((_QWORD *)v28[0] + 3), *((_QWORD *)v28[0] + 3) + 24, *((google::protobuf::Arena **)this + 2));
    if (v9 != v11)
    {
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v9 = v11;
    }
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x1E, v9, a2, v10);
    v12 = (unsigned int *)*((_QWORD *)v28[0] + 3);
    if (*((char *)v12 + 23) < 0)
    {
      v12 = *(unsigned int **)v12;
      v13 = *(_QWORD *)(*((_QWORD *)v28[0] + 3) + 8);
    }
    else
    {
      LODWORD(v13) = *((unsigned __int8 *)v12 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, v13, 1, (uint64_t)"CoreML.Specification.CustomModel.ParametersEntry.key");
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v28);
  }
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
LABEL_50:
  result = *((_QWORD *)this + 7);
  if (*(char *)(result + 23) < 0)
  {
    v27 = *(_QWORD *)(result + 8);
    if (!v27)
      return result;
    result = *(_QWORD *)result;
    goto LABEL_55;
  }
  LODWORD(v27) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_55:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v27, 1, (uint64_t)"CoreML.Specification.CustomModel.description");
    return google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0x28u, *((_QWORD *)this + 7), a2);
  }
  return result;
}

void sub_19CA01C8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1A1AD6248](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CustomModel::GetCachedSize(CoreML::Specification::CustomModel *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL4 v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _QWORD *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  char *v97;

  v6 = (char *)result;
LABEL_2:
  v94 = a2 - 8;
  v90 = a2 - 24;
  v91 = a2 - 16;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = a2 - v7;
    v10 = (a2 - v7) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(_QWORD **)v94;
        v41 = *(_QWORD **)v7;
        result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v94, *(_QWORD **)v7);
        if ((_DWORD)result)
        {
          *(_QWORD *)v7 = v40;
          *(_QWORD *)v94 = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v94);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v94);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v7 + 3, (_QWORD **)v94);
      default:
        if (v9 <= 191)
        {
          v42 = v7 + 8;
          v44 = v7 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v7;
              do
              {
                v48 = *(_QWORD **)v46;
                v47 = (_QWORD *)*((_QWORD *)v46 + 1);
                v46 = v42;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v47, v48);
                if ((_DWORD)result)
                {
                  v49 = v45;
                  while (1)
                  {
                    *(_QWORD *)&v7[v49 + 8] = v48;
                    if (!v49)
                      break;
                    v48 = *(_QWORD **)&v7[v49 - 8];
                    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v47, v48);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v7[v49 + 8];
                      goto LABEL_73;
                    }
                  }
                  v50 = v7;
LABEL_73:
                  *(_QWORD *)v50 = v47;
                }
                v42 = v46 + 8;
                v45 += 8;
              }
              while (v46 + 8 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v86 = *(_QWORD **)v8;
              v85 = (_QWORD *)*((_QWORD *)v8 + 1);
              v8 = v42;
              result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v85, v86);
              if ((_DWORD)result)
              {
                v87 = v8;
                do
                {
                  *(_QWORD *)v87 = v86;
                  v86 = (_QWORD *)*((_QWORD *)v87 - 2);
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v85, v86);
                  v87 -= 8;
                }
                while ((result & 1) != 0);
                *(_QWORD *)v87 = v85;
              }
              v42 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v97 = v7;
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            v88 = a2;
            v89 = a2 - v7;
            do
            {
              v53 = v52;
              if (v9 >= 16 && v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v97[8 * v54];
                v56 = 2 * v52 + 2;
                v95 = v52;
                if (v56 >= v10)
                {
                  v58 = *(_QWORD **)v55;
                }
                else
                {
                  v57 = *(_QWORD **)v55;
                  v58 = (_QWORD *)*((_QWORD *)v55 + 1);
                  v59 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v55, v58);
                  if (v59)
                    v55 += 8;
                  else
                    v58 = v57;
                  if (v59)
                    v54 = v56;
                }
                v60 = &v97[8 * v53];
                v61 = *(_QWORD **)v60;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v58, *(_QWORD **)v60);
                v9 = v89;
                if ((result & 1) == 0)
                {
                  do
                  {
                    v62 = v55;
                    *(_QWORD *)v60 = v58;
                    if (v51 < v54)
                      break;
                    v63 = (2 * v54) | 1;
                    v55 = &v97[8 * v63];
                    v64 = 2 * v54 + 2;
                    if (v64 >= v10)
                    {
                      v58 = *(_QWORD **)v55;
                      v54 = (2 * v54) | 1;
                    }
                    else
                    {
                      v58 = *(_QWORD **)v55;
                      v65 = (_QWORD *)*((_QWORD *)v55 + 1);
                      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v55, v65))
                      {
                        v58 = v65;
                        v55 += 8;
                        v54 = v64;
                      }
                      else
                      {
                        v54 = v63;
                      }
                    }
                    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v58, v61);
                    v60 = v62;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v62 = v61;
                  a2 = v88;
                  v9 = v89;
                  v53 = v95;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v66 = (unint64_t)v9 >> 3;
            v67 = v97;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = v66 - 2;
              v93 = *(_QWORD **)v67;
              if (v66 < 2)
                v70 = v66 - 1;
              v71 = v70 >> 1;
              do
              {
                v72 = &v67[8 * v69 + 8];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 >= v66)
                {
                  v77 = *(_QWORD **)v72;
                  v69 = (2 * v69) | 1;
                }
                else
                {
                  v75 = *(_QWORD **)v72;
                  v76 = *(_QWORD **)&v67[8 * v69 + 16];
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v72, v76);
                  if ((_DWORD)result)
                    v77 = v76;
                  else
                    v77 = v75;
                  if ((_DWORD)result)
                  {
                    v72 += 8;
                    v69 = v74;
                  }
                  else
                  {
                    v69 = v73;
                  }
                }
                *(_QWORD *)v67 = v77;
                v67 = v72;
              }
              while (v69 <= v71);
              a2 = v68 - 8;
              if (v72 == v68 - 8)
              {
                *(_QWORD *)v72 = v93;
              }
              else
              {
                *(_QWORD *)v72 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v93;
                v78 = v72 - v97 + 8;
                if (v78 >= 9)
                {
                  v79 = (unint64_t)((v78 >> 3) - 2) >> 1;
                  v80 = &v97[8 * v79];
                  v81 = *(_QWORD **)v80;
                  v82 = *(_QWORD **)v72;
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v80, *(_QWORD **)v72);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v83 = v80;
                      *(_QWORD *)v72 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v97[8 * v79];
                      v81 = *(_QWORD **)v80;
                      result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v80, v82);
                      v72 = v83;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v83 = v82;
                  }
                }
              }
              v84 = v66-- <= 2;
              v67 = v97;
            }
            while (!v84);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7[8 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12, (_QWORD **)v7, (_QWORD **)v94);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v12, (_QWORD **)v94);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 1, (_QWORD **)v12 - 1, (_QWORD **)v91);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 2, (_QWORD **)&v7[8 * v11 + 8], (_QWORD **)v90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12 - 1, (_QWORD **)v12, (_QWORD **)&v7[8 * v11 + 8]);
          v13 = *(_QWORD **)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD **)v7;
        v15 = v7;
        if ((a4 & 1) == 0)
        {
          v15 = v7;
          if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*((_QWORD **)v7 - 1), *(_QWORD **)v7))
          {
            result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, *(_QWORD **)v94);
            if ((result & 1) != 0)
            {
              do
              {
                v30 = (_QWORD *)*((_QWORD *)v7 + 1);
                v7 += 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v30);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v31 = v7 + 8;
              do
              {
                v7 = v31;
                if (v31 >= a2)
                  break;
                v31 += 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, *(_QWORD **)v7);
              }
              while (!(_DWORD)result);
            }
            v32 = a2;
            if (v7 < a2)
            {
              v32 = a2;
              do
              {
                v33 = (_QWORD *)*((_QWORD *)v32 - 1);
                v32 -= 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v33);
              }
              while ((result & 1) != 0);
            }
            v34 = a2;
            if (v7 < v32)
            {
              v35 = *(_QWORD **)v7;
              v36 = *(_QWORD **)v32;
              do
              {
                *(_QWORD *)v7 = v36;
                *(_QWORD *)v32 = v35;
                do
                {
                  v37 = (_QWORD *)*((_QWORD *)v7 + 1);
                  v7 += 8;
                  v35 = v37;
                }
                while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v37));
                do
                {
                  v38 = (_QWORD *)*((_QWORD *)v32 - 1);
                  v32 -= 8;
                  v36 = v38;
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v38);
                }
                while ((result & 1) != 0);
              }
              while (v7 < v32);
            }
            v39 = v7 - 8;
            a2 = v34;
            if (v7 - 8 != v8)
              *(_QWORD *)v8 = *(_QWORD *)v39;
            a4 = 0;
            *(_QWORD *)v39 = v14;
            continue;
          }
        }
        do
        {
          v16 = v15;
          v18 = (_QWORD *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v17 = v18;
        }
        while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v18, v14));
        v96 = a3;
        v19 = a2;
        if (v16 == v8)
        {
          v19 = a2;
          do
          {
            if (v15 >= v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v21, v14));
        }
        else
        {
          do
          {
            v20 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v20, v14));
        }
        v6 = v8;
        v22 = a2;
        if (v15 < v19)
        {
          v23 = *(_QWORD **)v19;
          v24 = v15;
          v25 = v19;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v17;
            do
            {
              v16 = v24;
              v26 = (_QWORD *)*((_QWORD *)v24 + 1);
              v24 += 8;
              v17 = v26;
            }
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v26, v14));
            do
            {
              v27 = (_QWORD *)*((_QWORD *)v25 - 1);
              v25 -= 8;
              v23 = v27;
            }
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v27, v14));
          }
          while (v24 < v25);
        }
        if (v16 != v6)
          *(_QWORD *)v6 = *(_QWORD *)v16;
        *(_QWORD *)v16 = v14;
        v28 = v15 >= v19;
        a2 = v22;
        a3 = v96;
        if (!v28)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**,false>(v6, v16, v96, a4 & 1);
          a4 = 0;
          v7 = v16 + 8;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**>((_QWORD **)v6, (_QWORD **)v16);
        v7 = v16 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**>((_QWORD **)v16 + 1, (_QWORD **)v22);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v16;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(uint64_t a1, uint64_t a2, google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)result = &off_1E3D599D8;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_19CB39696);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E3D5A848;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E3D5A848;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  result = *(_QWORD *)(a1 + 24);
  if (result)
    result = CoreML::Specification::CustomModel_CustomModelParamValue::clear_value(result);
  *(_DWORD *)(a1 + 40) &= 0xFFFFFFFC;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::IsInitialized()
{
  return 1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  google::protobuf::Arena *v7;
  CoreML::Specification::CustomModel_CustomModelParamValue *Aligned;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  const CoreML::Specification::CustomModel_CustomModelParamValue *v12;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(__int128 **)(a1 + 16) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!*(_QWORD *)(a1 + 24))
      {
        v7 = *(google::protobuf::Arena **)(a1 + 32);
        if (v7)
        {
          CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(Aligned);
          v9 = google::protobuf::Arena::AllocateAligned(v7, 0, 24);
          *v9 = Aligned;
          v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>;
          v10 = (unint64_t *)((char *)v7 + 32);
          do
            v11 = __ldxr(v10);
          while (__stxr((unint64_t)v9, v10));
          v9[2] = (google::protobuf::Arena *)v11;
        }
        else
        {
          Aligned = (CoreML::Specification::CustomModel_CustomModelParamValue *)operator new();
          CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v12 = (const CoreML::Specification::CustomModel_CustomModelParamValue *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      CoreML::Specification::CustomModel_CustomModelParamValue::MergeFrom(*(CoreML::Specification::CustomModel_CustomModelParamValue **)(a1 + 24), v12);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

void sub_19CA027B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  unint64_t TagFallback;
  __int128 *v8;
  uint64_t result;
  int v10;
  char *v11;
  CoreML::Specification::CustomModel_CustomModelParamValue *Aligned;
  google::protobuf::Arena *v13;
  google::protobuf::Arena **v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  int VarintSizeAsIntFallback;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;

  v5 = (google::protobuf::Arena **)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *(char **)this;
        if (*(_QWORD *)this >= *((_QWORD *)this + 1))
        {
          LODWORD(TagFallback) = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *(_QWORD *)this = v6 + 1;
            goto LABEL_7;
          }
        }
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 10)
          break;
        *(_DWORD *)(a1 + 40) |= 1u;
        v8 = *(__int128 **)(a1 + 16);
        if (v8 == &google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v8 = *(__int128 **)(a1 + 16);
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)this, (std::string *)v8);
        if (!(_DWORD)result)
          return result;
        v10 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v10;
        v11 = *(char **)this;
        if (*(_QWORD *)this < *((_QWORD *)this + 1) && *v11 == 18)
        {
          *(_QWORD *)this = v11 + 1;
          goto LABEL_20;
        }
      }
      if ((_DWORD)TagFallback != 18)
        break;
      v10 = *(_DWORD *)(a1 + 40);
LABEL_20:
      *(_DWORD *)(a1 + 40) = v10 | 2;
      Aligned = *(CoreML::Specification::CustomModel_CustomModelParamValue **)(a1 + 24);
      if (!Aligned)
      {
        v13 = *(google::protobuf::Arena **)(a1 + 32);
        if (v13)
        {
          CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(Aligned);
          v14 = google::protobuf::Arena::AllocateAligned(v13, 0, 24);
          *v14 = Aligned;
          v14[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>;
          v15 = (unint64_t *)((char *)v13 + 32);
          do
            v16 = __ldxr(v15);
          while (__stxr((unint64_t)v14, v15));
          v14[2] = (google::protobuf::Arena *)v16;
        }
        else
        {
          Aligned = (CoreML::Specification::CustomModel_CustomModelParamValue *)operator new();
          CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v17 = *(char **)this;
      if (*(_QWORD *)this >= *((_QWORD *)this + 1) || *v17 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(this);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v17;
        *(_QWORD *)this = v17 + 1;
      }
      v19 = google::protobuf::io::CodedInputStream::PushLimit(this, VarintSizeAsIntFallback);
      v21 = *((_DWORD *)this + 13);
      v22 = __OFSUB__(v21--, 1);
      *((_DWORD *)this + 13) = v21;
      if (v21 < 0 != v22)
        return 0;
      v23 = v19;
      result = CoreML::Specification::CustomModel_CustomModelParamValue::MergePartialFromCodedStream(Aligned, this, v20);
      if (!(_DWORD)result)
        return result;
      result = google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(this, v23);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*(_QWORD *)this == *((_QWORD *)this + 1)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(this, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

void sub_19CA02A3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  CoreML::Specification::CustomModel_CustomModelParamValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (CoreML::Specification::CustomModel_CustomModelParamValue *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = CoreML::Specification::CustomModel_CustomModelParamValue::ByteSizeLong(v4);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  google::protobuf::internal::WireFormatLite *v5;
  const google::protobuf::MessageLite *v6;
  google::protobuf::io::CodedOutputStream *v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  v5 = (google::protobuf::internal::WireFormatLite *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(v5, a2, v6, v7);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_DWORD *)(v6 + 8);
    v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    return v5 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(_DWORD *)(v4 + 24) + ((9 * (__clz(*(_DWORD *)(v4 + 24) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v6 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v7 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v6, a3 + 1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v7 = 18;
  v9 = v7 + 1;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
  if (v10 < 0x80)
  {
    LOBYTE(v11) = v10;
  }
  else
  {
    do
    {
      *v9++ = v10 | 0x80;
      v11 = v10 >> 7;
      v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
  }
  *v9 = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 128))(v8, a2, v9 + 1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D59A80;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
  {
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
    v2 = a1[3];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::value(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  const char *v6;
  int v7;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
  {
    v5 = 3;
    v6 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    v7 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v2 = *(_QWORD *)(a1 + 8);
  }
  v3 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(a1 + 24))
    return *(_QWORD *)(a1 + 24);
  else
    return v3;
}

void sub_19CA02DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**>(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD **v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(_QWORD **)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(_QWORD **)((char *)a1 + v14 - 16);
        v16 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v12, v13);
        v14 = v15;
        if (!v16)
        {
          v17 = (_QWORD **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

double google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase(_QWORD *a1, unsigned __int8 *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  result = *(double *)&v6;
  if ((_QWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    *(_QWORD *)&result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase((uint64_t)&v6, a1, (uint64_t *)&v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Aligned;
  google::protobuf::Arena *v8;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __n128 v19;

  v4 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(**(google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(_QWORD *)(v4 + 24);
  if (!Aligned)
  {
    v8 = *(google::protobuf::Arena **)(v4 + 32);
    if (v8)
    {
      CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)Aligned);
      v9 = google::protobuf::Arena::AllocateAligned(v8, 0, 24);
      *v9 = (google::protobuf::Arena *)Aligned;
      v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>;
      v10 = (unint64_t *)((char *)v8 + 32);
      do
        v11 = __ldxr(v10);
      while (__stxr((unint64_t)v9, v10));
      v9[2] = (google::protobuf::Arena *)v11;
    }
    else
    {
      Aligned = operator new();
      CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
  }
  if (v6 != Aligned)
  {
    v12 = *(_QWORD *)(Aligned + 16);
    *(_QWORD *)(Aligned + 16) = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 16) = v12;
    v13 = *(_DWORD *)(Aligned + 28);
    *(_DWORD *)(Aligned + 28) = *(_DWORD *)(v6 + 28);
    *(_DWORD *)(v6 + 28) = v13;
    v14 = *(_DWORD *)(Aligned + 24);
    *(_DWORD *)(Aligned + 24) = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v14;
  }
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase(*(_QWORD **)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v15 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v15 + 40) |= 1u;
  v16 = *(_QWORD *)(v15 + 16);
  if ((__int128 *)v16 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v15 + 16), *(google::protobuf::Arena ***)(v15 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
    v16 = *(_QWORD *)(v15 + 16);
  }
  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  v17 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v16 = v17;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v18 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v18)
    v19.n128_f64[0] = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v19))
    *(_QWORD *)(a1 + 48) = 0;
  return v18;
}

void sub_19CA031DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(google::protobuf::Arena *a1)
{
  uint64_t result;

  if (a1)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E3D5A848;
  return result;
}

double google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  google::protobuf::Arena **v3;
  double result;
  uint64_t v5;
  uint64_t Aligned;
  google::protobuf::Arena *v7;
  google::protobuf::Arena **v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  int v12;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  v3 = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::operator[](*(_QWORD *)(a1 + 8), a1 + 16);
  *(_QWORD *)(a1 + 40) = v3;
  v5 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v5 + 40) |= 2u;
  Aligned = *(_QWORD *)(v5 + 24);
  if (!Aligned)
  {
    v7 = *(google::protobuf::Arena **)(v5 + 32);
    if (v7)
    {
      CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)Aligned);
      v8 = google::protobuf::Arena::AllocateAligned(v7, 0, 24);
      *v8 = (google::protobuf::Arena *)Aligned;
      v8[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>;
      v9 = (unint64_t *)((char *)v7 + 32);
      do
        v10 = __ldxr(v9);
      while (__stxr((unint64_t)v8, v9));
      v8[2] = (google::protobuf::Arena *)v10;
    }
    else
    {
      Aligned = operator new();
      CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)Aligned);
    }
    *(_QWORD *)(v5 + 24) = Aligned;
    v3 = *(google::protobuf::Arena ***)(a1 + 40);
  }
  if ((google::protobuf::Arena **)Aligned != v3)
  {
    result = *((double *)v3 + 2);
    v3[2] = *(google::protobuf::Arena **)(Aligned + 16);
    *(double *)(Aligned + 16) = result;
    v11 = *((_DWORD *)v3 + 7);
    *((_DWORD *)v3 + 7) = *(_DWORD *)(Aligned + 28);
    *(_DWORD *)(Aligned + 28) = v11;
    v12 = *((_DWORD *)v3 + 6);
    *((_DWORD *)v3 + 6) = *(_DWORD *)(Aligned + 24);
    *(_DWORD *)(Aligned + 24) = v12;
  }
  return result;
}

void sub_19CA03394(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CustomModel::MergeFrom(CoreML::Specification::CustomModel *this, const CoreML::Specification::CustomModel *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  std::string *v8;
  std::string **v9;
  std::string *v10;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 16, *((_QWORD **)a2 + 5));
  v5 = *((_QWORD *)a2 + 6);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (__int128 *)*((_QWORD *)this + 6);
  if (v6 != (__int128 *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v5);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 7);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      return;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    return;
  }
  v10 = (std::string *)*((_QWORD *)this + 7);
  v9 = (std::string **)((char *)this + 56);
  v8 = v10;
  if (v10 != (std::string *)v7)
  {
    if (v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v9, v7);
    else
      std::string::operator=(v8, (const std::string *)v7);
  }
}

void *google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom(uint64_t a1, _QWORD *a2)
{
  void *result;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  const CoreML::Specification::CustomModel_CustomModelParamValue *v7;
  google::protobuf::Arena **v8;
  CoreML::Specification::CustomModel_CustomModelParamValue *v9;
  unsigned __int8 *v10[3];

  result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v10, a2);
  v4 = v10[0];
  if (v10[0])
  {
    v5 = a1 + 8;
    do
    {
      v6 = *((_QWORD *)v4 + 3);
      v7 = (const CoreML::Specification::CustomModel_CustomModelParamValue *)(v6 + 24);
      v8 = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::operator[](v5, v6);
      if (v7 != (const CoreML::Specification::CustomModel_CustomModelParamValue *)v8)
      {
        v9 = (CoreML::Specification::CustomModel_CustomModelParamValue *)v8;
        CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)v8);
        CoreML::Specification::CustomModel_CustomModelParamValue::MergeFrom(v9, v7);
      }
      result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v10);
      v4 = v10[0];
    }
    while (v10[0]);
  }
  return result;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CustomModel>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CustomModel>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CustomModel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1A1AD6260);
}

void CoreML::validate<(MLModelType)556>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  void *v5;
  int v6;
  unint64_t *inited;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  const CoreML::Specification::LinkedModelFile *v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14[2];
  char v15;
  void *__p;
  __int128 v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  uint64_t v21;

  if (*(_QWORD *)(a2 + 16))
    v3 = *(uint64_t **)(a2 + 16);
  else
    v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_DWORD *)(a2 + 44) != 556)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Model not an a LinkedModel.");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
LABEL_8:
    if (SHIBYTE(v17) < 0)
    {
      v5 = __p;
LABEL_10:
      operator delete(v5);
      return;
    }
    return;
  }
  if (*(_BYTE *)(a2 + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "LinkedModel cannot be marked as updatable");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
    goto LABEL_8;
  }
  CoreML::Result::Result((CoreML::Result *)&v19);
  v6 = *(_DWORD *)(a2 + 24);
  LODWORD(v14[0]) = 0;
  CoreML::validateModelDescription((uint64_t)&__p, (uint64_t)v3, v6, (char *)v14);
  v8 = (int)__p;
  v19 = __p;
  if (SHIBYTE(v21) < 0)
  {
    operator delete((void *)v20);
    v8 = (int)v19;
  }
  v20 = v17;
  v21 = v18;
  if ((v8 & 0xFFFFFFEF) != 0)
  {
    *(_QWORD *)a1 = v19;
    *(_OWORD *)(a1 + 8) = v20;
    *(_QWORD *)(a1 + 24) = v21;
    v20 = 0uLL;
    v21 = 0;
    goto LABEL_36;
  }
  if (*(_DWORD *)(a2 + 44) == 556)
  {
    v9 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    inited = CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults((CoreML::Specification::protobuf_LinkedModel_2eproto *)inited);
    v9 = &CoreML::Specification::_LinkedModel_default_instance_;
  }
  if (*((_DWORD *)v9 + 7))
  {
    if (*(_DWORD *)(a2 + 44) == 556)
    {
      v10 = *(uint64_t **)(a2 + 32);
    }
    else
    {
      inited = CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults((CoreML::Specification::protobuf_LinkedModel_2eproto *)inited);
      v10 = &CoreML::Specification::_LinkedModel_default_instance_;
    }
    if (*((_DWORD *)v10 + 7) == 1)
    {
      v11 = (const CoreML::Specification::LinkedModelFile *)v10[2];
    }
    else
    {
      CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults((CoreML::Specification::protobuf_LinkedModel_2eproto *)inited);
      v11 = (const CoreML::Specification::LinkedModelFile *)&CoreML::Specification::_LinkedModelFile_default_instance_;
    }
    CoreML::Specification::LinkedModelFile::LinkedModelFile((CoreML::Specification::LinkedModelFile *)&__p, v11);
    v12 = (uint64_t *)*((_QWORD *)&v17 + 1);
    if (!*((_QWORD *)&v17 + 1))
      v12 = &CoreML::Specification::_StringParameter_default_instance_;
    v13 = v12[2];
    if (*(char *)(v13 + 23) < 0)
    {
      if (*(_QWORD *)(v13 + 8))
        goto LABEL_31;
    }
    else if (*(_BYTE *)(v13 + 23))
    {
LABEL_31:
      *(_QWORD *)a1 = v19;
      *(_OWORD *)(a1 + 8) = v20;
      *(_QWORD *)(a1 + 24) = v21;
      v20 = 0uLL;
      v21 = 0;
LABEL_35:
      CoreML::Specification::LinkedModelFile::~LinkedModelFile((CoreML::Specification::LinkedModelFile *)&__p);
      goto LABEL_36;
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "LinkedModel.linkedModelFile.linkedModeFileName.defaultValue cannot be empty.");
    *(_QWORD *)a1 = 13;
    std::operator+<char>();
    if (v15 < 0)
      operator delete(v14[0]);
    goto LABEL_35;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "LinkedModel.LinkType not set.");
  *(_QWORD *)a1 = 13;
  std::operator+<char>();
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
LABEL_36:
  if (SHIBYTE(v21) < 0)
  {
    v5 = (void *)v20;
    goto LABEL_10;
  }
}

void sub_19CA03958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0)
    operator delete(__p);
  CoreML::Specification::LinkedModelFile::~LinkedModelFile((CoreML::Specification::LinkedModelFile *)&a15);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

void CoreML::Specification::LinearKernel::~LinearKernel(CoreML::Specification::LinearKernel *this)
{
  *(_QWORD *)this = &off_1E3D4DC48;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D4DC48;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::LinearKernel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.LinearKernel");
}

CoreML::Specification::LinearKernel *CoreML::Specification::LinearKernel::New(CoreML::Specification::LinearKernel *this)
{
  return CoreML::Specification::LinearKernel::New(this, 0);
}

CoreML::Specification::LinearKernel *CoreML::Specification::LinearKernel::New(CoreML::Specification::LinearKernel *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::LinearKernel *v3;

  v3 = (CoreML::Specification::LinearKernel *)operator new();
  CoreML::Specification::LinearKernel::LinearKernel(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::LinearKernel>(a2, v3);
  return v3;
}

void sub_19CA03AB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::LinearKernel::IsInitialized(CoreML::Specification::LinearKernel *this)
{
  return 1;
}

std::string *CoreML::Specification::LinearKernel::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::LinearKernel::MergePartialFromCodedStream(CoreML::Specification::LinearKernel *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      LODWORD(TagFallback) = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::LinearKernel::ByteSizeLong(CoreML::Specification::LinearKernel *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

uint64_t CoreML::Specification::LinearKernel::GetCachedSize(CoreML::Specification::LinearKernel *this)
{
  return *((unsigned int *)this + 4);
}

CoreML::Specification::LinearKernel *CoreML::Specification::LinearKernel::LinearKernel(CoreML::Specification::LinearKernel *this)
{
  *(_QWORD *)this = &off_1E3D4DC48;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::LinearKernel *)&CoreML::Specification::_LinearKernel_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_19CA03BD4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::LinearKernel>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::LinearKernel>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::LinearKernel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::SupportVectorClassifier::~SupportVectorClassifier(CoreML::Specification::SupportVectorClassifier *this)
{
  CoreML::Specification::SupportVectorClassifier::~SupportVectorClassifier(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)this = &off_1E3D547C0;
  if (this != (CoreML::Specification::SupportVectorClassifier *)&CoreML::Specification::_SupportVectorClassifier_default_instance_)
  {
    v2 = *((_QWORD *)this + 17);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*((_DWORD *)this + 41))
    CoreML::Specification::SupportVectorClassifier::clear_supportVectors((uint64_t)this);
  if (*((_DWORD *)this + 42))
    CoreML::Specification::SupportVectorClassifier::clear_ClassLabels((uint64_t)this);
  v3 = (_QWORD *)*((_QWORD *)this + 15);
  if (v3 && !*v3)
    operator delete(v3);
  v4 = (_QWORD *)*((_QWORD *)this + 12);
  if (v4 && !*v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 9);
  if (v5 && !*v5)
    operator delete(v5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 5);
  v6 = (_QWORD *)*((_QWORD *)this + 3);
  if (v6 && !*v6)
    operator delete(v6);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::SupportVectorClassifier::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SupportVectorClassifier");
}

CoreML::Specification::SupportVectorClassifier *CoreML::Specification::SupportVectorClassifier::New(CoreML::Specification::SupportVectorClassifier *this)
{
  return CoreML::Specification::SupportVectorClassifier::New(this, 0);
}

CoreML::Specification::SupportVectorClassifier *CoreML::Specification::SupportVectorClassifier::New(CoreML::Specification::SupportVectorClassifier *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::SupportVectorClassifier *v3;

  v3 = (CoreML::Specification::SupportVectorClassifier *)operator new();
  CoreML::Specification::SupportVectorClassifier::SupportVectorClassifier(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::SupportVectorClassifier>(a2, v3);
  return v3;
}

void sub_19CA03CDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4069FFF750);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SupportVectorClassifier::Clear(CoreML::Specification::SupportVectorClassifier *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *((_DWORD *)this + 4) = 0;
  v2 = *((unsigned int *)this + 12);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 7) + 8);
    do
    {
      v4 = *v3++;
      *(_DWORD *)(v4 + 16) = 0;
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 12) = 0;
  }
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 28) = 0;
  v5 = *((_QWORD *)this + 17);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 17) = 0;
  CoreML::Specification::SupportVectorClassifier::clear_supportVectors((uint64_t)this);
  return CoreML::Specification::SupportVectorClassifier::clear_ClassLabels((uint64_t)this);
}

uint64_t CoreML::Specification::SupportVectorClassifier::IsInitialized(CoreML::Specification::SupportVectorClassifier *this)
{
  return 1;
}

uint64_t CoreML::Specification::SupportVectorClassifier::MergePartialFromCodedStream(CoreML::Specification::SupportVectorClassifier *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  google::protobuf::internal::RepeatedPtrFieldBase *v8;
  signed int *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  BOOL v16;
  unsigned int TagFallback;
  unsigned int v18;
  CoreML::Specification::Kernel *v19;
  char *v20;
  int VarintSizeAsIntFallback;
  CoreML::Specification::Int64Vector *v22;
  char *v23;
  int v24;
  CoreML::Specification::SparseSupportVectors *v25;
  CoreML::Specification::DenseSupportVectors *v26;
  int *v27;
  int v28;
  int v29;
  CoreML::Specification::Coefficients *Aligned;
  char *v31;
  unsigned int v32;
  char *v33;
  unsigned int v34;
  char *v35;
  unsigned int v36;
  CoreML::Specification::StringVector *v37;
  int v38;
  unint64_t **v39;
  uint64_t v40;
  char *v41;
  int v42;
  char *v43;
  int v44;
  char *v45;
  int v46;
  char *v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  BOOL v52;
  int v53;
  uint64_t result;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  google::protobuf::Arena *v67;
  google::protobuf::Arena **v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  char *v83;
  int v84;
  uint64_t Varint32Fallback;
  signed int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  signed int v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  google::protobuf::internal::RepeatedPtrFieldBase *v103;
  unsigned int *v104;
  unsigned int *v105;
  signed int v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  signed int v112;
  unsigned int v113;
  int v114;
  int v115;
  int v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  google::protobuf::internal::RepeatedPtrFieldBase *v120;
  unsigned int *v121;
  unsigned int *v122;
  signed int v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  signed int v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  google::protobuf::internal::RepeatedPtrFieldBase *v137;
  unsigned int *v138;
  unsigned int *v139;
  signed int v140;
  unsigned int *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  signed int *v149;
  unint64_t v150;

  v5 = (unsigned int *)((char *)this + 112);
  v6 = (unsigned int *)((char *)this + 88);
  v7 = (unsigned int *)((char *)this + 64);
  v8 = (CoreML::Specification::SupportVectorClassifier *)((char *)this + 40);
  v9 = (signed int *)((char *)this + 16);
  v149 = (signed int *)((char *)this + 16);
LABEL_2:
  while (2)
  {
    v10 = *(unsigned __int8 **)a2;
    v11 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 >= v11)
    {
      LODWORD(v13) = 0;
    }
    else
    {
      v12 = v10 + 1;
      v13 = *v10;
      if ((char)*v10 >= 1)
      {
        *(_QWORD *)a2 = v12;
        v14 = v13 | 0x100000000;
        if ((v14 & 0x100000000) == 0)
          goto LABEL_9;
        goto LABEL_17;
      }
      if ((unint64_t)v12 < v11)
      {
        v15 = *v12;
        if ((v13 & ~v15) >= 0x80)
        {
          *(_QWORD *)a2 = v10 + 2;
          v14 = (v13 + (v15 << 7) - 128) | 0x100000000;
          goto LABEL_17;
        }
      }
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v13);
    v14 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v14 & 0x100000000) == 0)
      goto LABEL_9;
LABEL_17:
    v18 = v14 >> 3;
    switch(v14 >> 3)
    {
      case 1u:
        if (v14 != 10)
          goto LABEL_9;
        v19 = (CoreML::Specification::Kernel *)*((_QWORD *)this + 17);
        if (!v19)
        {
          v19 = (CoreML::Specification::Kernel *)operator new();
          CoreML::Specification::Kernel::Kernel(v19);
          *((_QWORD *)this + 17) = v19;
        }
        v20 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v20;
          *(_QWORD *)a2 = v20 + 1;
        }
        v49 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v51 = *((_DWORD *)a2 + 13);
        v52 = __OFSUB__(v51--, 1);
        *((_DWORD *)a2 + 13) = v51;
        if (v51 < 0 != v52)
          return 0;
        v53 = v49;
        result = CoreML::Specification::Kernel::MergePartialFromCodedStream(v19, a2, v50);
        if ((_DWORD)result)
          goto LABEL_122;
        return result;
      case 2u:
        if (v14 == 16)
        {
          if ((google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<int,(google::protobuf::internal::WireFormatLite::FieldType)5>(18, a2, v9) & 1) != 0)continue;
          return 0;
        }
        if (v14 != 18)
          goto LABEL_9;
        v23 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v23 < 0)
        {
          v24 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v24 < 0)
            return 0;
        }
        else
        {
          v24 = *v23;
          *(_QWORD *)a2 = v23 + 1;
        }
        v78 = google::protobuf::io::CodedInputStream::PushLimit(a2, v24);
        while (1)
        {
          v79 = *((_DWORD *)a2 + 10);
          v80 = *((int *)a2 + 11);
          v81 = *((_QWORD *)a2 + 1);
          v82 = *((_DWORD *)a2 + 6);
          if (v79 == 0x7FFFFFFF || (v83 = *(char **)a2, (int)(v79 - v82 + v80 + v81 - *(_QWORD *)a2) < 1))
          {
            *((_DWORD *)a2 + 10) = v78;
            v88 = v81 + v80;
            *((_QWORD *)a2 + 1) = v88;
            v89 = *((_DWORD *)a2 + 12);
            if (v89 >= v78)
              v89 = v78;
            v52 = __OFSUB__(v82, v89);
            v90 = v82 - v89;
            if ((v90 < 0) ^ v52 | (v90 == 0))
              v90 = 0;
            else
              *((_QWORD *)a2 + 1) = v88 - v90;
            *((_DWORD *)a2 + 11) = v90;
            *((_BYTE *)a2 + 36) = 0;
            goto LABEL_2;
          }
          if ((unint64_t)v83 >= v81)
          {
            v84 = 0;
          }
          else
          {
            v84 = *v83;
            if ((*v83 & 0x80000000) == 0)
            {
              *(_QWORD *)a2 = v83 + 1;
              goto LABEL_133;
            }
          }
          Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v84);
          v84 = Varint32Fallback;
          if (Varint32Fallback < 0)
            return 0;
LABEL_133:
          v86 = *((_DWORD *)this + 4);
          if (v86 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<float>::Reserve((unsigned int *)v9, v86 + 1);
            v86 = *v9;
          }
          v87 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v86 + 1;
          *(_DWORD *)(v87 + 4 * v86 + 8) = v84;
        }
      case 3u:
        if (v14 != 26)
          goto LABEL_9;
        if (*((_DWORD *)this + 41) == 3)
        {
          v25 = (CoreML::Specification::SparseSupportVectors *)*((_QWORD *)this + 18);
        }
        else
        {
          CoreML::Specification::SupportVectorClassifier::clear_supportVectors((uint64_t)this);
          *((_DWORD *)this + 41) = 3;
          v25 = (CoreML::Specification::SparseSupportVectors *)operator new();
          CoreML::Specification::SparseSupportVectors::SparseSupportVectors(v25);
          *((_QWORD *)this + 18) = v25;
        }
        v43 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v43 < 0)
        {
          v44 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v44 < 0)
            return 0;
        }
        else
        {
          v44 = *v43;
          *(_QWORD *)a2 = v43 + 1;
        }
        v58 = google::protobuf::io::CodedInputStream::PushLimit(a2, v44);
        v60 = *((_DWORD *)a2 + 13);
        v52 = __OFSUB__(v60--, 1);
        *((_DWORD *)a2 + 13) = v60;
        if (v60 < 0 != v52)
          return 0;
        v53 = v58;
        result = CoreML::Specification::SparseSupportVectors::MergePartialFromCodedStream(v25, a2, v59);
        if (!(_DWORD)result)
          return result;
        goto LABEL_122;
      case 4u:
        if (v14 != 34)
          goto LABEL_9;
        if (*((_DWORD *)this + 41) == 4)
        {
          v26 = (CoreML::Specification::DenseSupportVectors *)*((_QWORD *)this + 18);
        }
        else
        {
          CoreML::Specification::SupportVectorClassifier::clear_supportVectors((uint64_t)this);
          *((_DWORD *)this + 41) = 4;
          v26 = (CoreML::Specification::DenseSupportVectors *)operator new();
          CoreML::Specification::DenseSupportVectors::DenseSupportVectors(v26);
          *((_QWORD *)this + 18) = v26;
        }
        v45 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v45 < 0)
        {
          v46 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v46 < 0)
            return 0;
        }
        else
        {
          v46 = *v45;
          *(_QWORD *)a2 = v45 + 1;
        }
        v61 = google::protobuf::io::CodedInputStream::PushLimit(a2, v46);
        v63 = *((_DWORD *)a2 + 13);
        v52 = __OFSUB__(v63--, 1);
        *((_DWORD *)a2 + 13) = v63;
        if (v63 < 0 != v52)
          return 0;
        v53 = v61;
        result = CoreML::Specification::DenseSupportVectors::MergePartialFromCodedStream(v26, a2, v62);
        if (!(_DWORD)result)
          return result;
        goto LABEL_122;
      case 5u:
        if (v14 != 42)
          goto LABEL_9;
        v27 = (int *)*((_QWORD *)this + 7);
        if (!v27)
        {
          v28 = *((_DWORD *)this + 12);
          v29 = *((_DWORD *)this + 13);
LABEL_107:
          if (v28 <= v29)
          {
            google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v8, v29 - v28 + 1);
            v27 = (int *)*((_QWORD *)this + 7);
          }
          v29 = *v27;
          goto LABEL_110;
        }
        v28 = *((_DWORD *)this + 12);
        v29 = *v27;
        if (v28 < *v27)
        {
          *((_DWORD *)this + 12) = v28 + 1;
          Aligned = *(CoreML::Specification::Coefficients **)&v27[2 * v28 + 2];
          goto LABEL_116;
        }
        if (v29 == *((_DWORD *)this + 13))
          goto LABEL_107;
LABEL_110:
        *v27 = v29 + 1;
        v67 = *(google::protobuf::Arena **)v8;
        if (*(_QWORD *)v8)
        {
          CoreML::Specification::Coefficients::Coefficients(Aligned);
          v68 = google::protobuf::Arena::AllocateAligned(v67, 0, 24);
          *v68 = Aligned;
          v68[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::Coefficients>;
          v69 = (unint64_t *)((char *)v67 + 32);
          do
            v70 = __ldxr(v69);
          while (__stxr((unint64_t)v68, v69));
          v68[2] = (google::protobuf::Arena *)v70;
        }
        else
        {
          Aligned = (CoreML::Specification::Coefficients *)operator new();
          CoreML::Specification::Coefficients::Coefficients(Aligned);
        }
        v71 = *((_QWORD *)this + 7);
        v72 = *((int *)this + 12);
        *((_DWORD *)this + 12) = v72 + 1;
        *(_QWORD *)(v71 + 8 * v72 + 8) = Aligned;
LABEL_116:
        v73 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v73 < 0)
        {
          v74 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v74 < 0)
            return 0;
        }
        else
        {
          v74 = *v73;
          *(_QWORD *)a2 = v73 + 1;
        }
        v75 = google::protobuf::io::CodedInputStream::PushLimit(a2, v74);
        v77 = *((_DWORD *)a2 + 13);
        v52 = __OFSUB__(v77--, 1);
        *((_DWORD *)a2 + 13) = v77;
        if (v77 < 0 != v52)
          return 0;
        v53 = v75;
        result = CoreML::Specification::Coefficients::MergePartialFromCodedStream(Aligned, (char **)a2, v76);
        if (!(_DWORD)result)
          return result;
        goto LABEL_122;
      case 6u:
        if (v14 == 49)
        {
          v38 = 50;
          v39 = (unint64_t **)a2;
          v40 = (uint64_t)v7;
          goto LABEL_67;
        }
        if (v14 != 50)
          goto LABEL_9;
        v31 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v31 < 0)
        {
          v32 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if ((v32 & 0x80000000) != 0)
            return 0;
        }
        else
        {
          v32 = *v31;
          *(_QWORD *)a2 = v31 + 1;
        }
        if ((v32 & 7) != 0)
          return 0;
        v91 = *((_DWORD *)a2 + 12);
        if (v91 == 0x7FFFFFFF)
          v92 = -1;
        else
          v92 = v91 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
        v93 = *((_DWORD *)a2 + 10);
        if (v93 == 0x7FFFFFFF)
          v94 = -1;
        else
          v94 = v93 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
        v95 = *v7;
        v96 = v32 >> 3;
        if (v94 >= v92)
          v97 = v92;
        else
          v97 = v94;
        if (v92 == -1)
          v98 = v94;
        else
          v98 = v97;
        if (v98 >= (uint64_t)v32)
        {
          v103 = v8;
          v104 = v6;
          v105 = v5;
          v106 = v95 + v96;
          if (v32 > 7)
          {
            google::protobuf::RepeatedField<double>::Reserve(v7, v95 + v96);
            v107 = *((_QWORD *)this + 9);
            v143 = 8 * v106 - 8 * *((int *)this + 16);
            if (v143 >= 1)
              bzero((void *)(v107 + 8 + 8 * *((int *)this + 16)), 8 * (((unint64_t)v143 >> 3) - ((unint64_t)v143 > 7)) + 8);
          }
          else
          {
            v107 = *((_QWORD *)this + 9);
          }
          *v7 = v106;
          v144 = v107 + 8;
          if (!v107)
            v144 = 0;
          v5 = v105;
          v6 = v104;
          v8 = v103;
          v9 = v149;
          if (!google::protobuf::io::CodedInputStream::ReadRaw(a2, (char *)(v144 + 8 * v95), v32))
          {
            if ((int)*v7 < 1)
              return 0;
            result = 0;
            *v7 = v95;
            return result;
          }
        }
        else if (v32 >= 8)
        {
          if (v96 <= 1)
            v99 = 1;
          else
            v99 = v32 >> 3;
          do
          {
            v150 = 0;
            v100 = *(unint64_t **)a2;
            if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
            {
              result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v150);
              if (!(_DWORD)result)
                return result;
              v101 = v150;
              v95 = *v7;
            }
            else
            {
              v101 = *v100;
              *(_QWORD *)a2 = v100 + 1;
            }
            if (v95 == *((_DWORD *)this + 17))
            {
              google::protobuf::RepeatedField<double>::Reserve(v7, v95 + 1);
              v95 = *v7;
            }
            v102 = *((_QWORD *)this + 9) + 8 * v95;
            *((_DWORD *)this + 16) = v95 + 1;
            *(_QWORD *)(v102 + 8) = v101;
            ++v95;
            --v99;
          }
          while (v99);
        }
        continue;
      case 7u:
        if (v14 == 57)
        {
          v38 = 58;
          v39 = (unint64_t **)a2;
          v40 = (uint64_t)v6;
          goto LABEL_67;
        }
        if (v14 != 58)
          goto LABEL_9;
        v33 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v33 < 0)
        {
          v34 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if ((v34 & 0x80000000) != 0)
            return 0;
        }
        else
        {
          v34 = *v33;
          *(_QWORD *)a2 = v33 + 1;
        }
        if ((v34 & 7) != 0)
          return 0;
        v108 = *((_DWORD *)a2 + 12);
        if (v108 == 0x7FFFFFFF)
          v109 = -1;
        else
          v109 = v108 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
        v110 = *((_DWORD *)a2 + 10);
        if (v110 == 0x7FFFFFFF)
          v111 = -1;
        else
          v111 = v110 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
        v112 = *v6;
        v113 = v34 >> 3;
        if (v111 >= v109)
          v114 = v109;
        else
          v114 = v111;
        if (v109 == -1)
          v115 = v111;
        else
          v115 = v114;
        if (v115 >= (uint64_t)v34)
        {
          v120 = v8;
          v121 = v7;
          v122 = v5;
          v123 = v112 + v113;
          if (v34 > 7)
          {
            google::protobuf::RepeatedField<double>::Reserve(v6, v112 + v113);
            v124 = *((_QWORD *)this + 12);
            v145 = 8 * v123 - 8 * *((int *)this + 22);
            if (v145 >= 1)
              bzero((void *)(v124 + 8 + 8 * *((int *)this + 22)), 8 * (((unint64_t)v145 >> 3) - ((unint64_t)v145 > 7)) + 8);
          }
          else
          {
            v124 = *((_QWORD *)this + 12);
          }
          *v6 = v123;
          v146 = v124 + 8;
          if (!v124)
            v146 = 0;
          v5 = v122;
          v7 = v121;
          v8 = v120;
          v9 = v149;
          if (!google::protobuf::io::CodedInputStream::ReadRaw(a2, (char *)(v146 + 8 * v112), v34))
          {
            if ((int)*v6 < 1)
              return 0;
            result = 0;
            *v6 = v112;
            return result;
          }
        }
        else if (v34 >= 8)
        {
          if (v113 <= 1)
            v116 = 1;
          else
            v116 = v34 >> 3;
          do
          {
            v150 = 0;
            v117 = *(unint64_t **)a2;
            if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
            {
              result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v150);
              if (!(_DWORD)result)
                return result;
              v118 = v150;
              v112 = *v6;
            }
            else
            {
              v118 = *v117;
              *(_QWORD *)a2 = v117 + 1;
            }
            if (v112 == *((_DWORD *)this + 23))
            {
              google::protobuf::RepeatedField<double>::Reserve(v6, v112 + 1);
              v112 = *v6;
            }
            v119 = *((_QWORD *)this + 12) + 8 * v112;
            *((_DWORD *)this + 22) = v112 + 1;
            *(_QWORD *)(v119 + 8) = v118;
            ++v112;
            --v116;
          }
          while (v116);
        }
        continue;
      case 8u:
        if (v14 == 65)
        {
          v38 = 66;
          v39 = (unint64_t **)a2;
          v40 = (uint64_t)v5;
LABEL_67:
          if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(v38, v39, v40))return 0;
          continue;
        }
        if (v14 != 66)
        {
LABEL_9:
          if ((_DWORD)v14)
            v16 = (v14 & 7) == 4;
          else
            v16 = 1;
          if (v16)
            return 1;
          if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v14, a3) & 1) == 0)return 0;
          continue;
        }
        v35 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v35 < 0)
        {
          v36 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if ((v36 & 0x80000000) != 0)
            return 0;
        }
        else
        {
          v36 = *v35;
          *(_QWORD *)a2 = v35 + 1;
        }
        if ((v36 & 7) != 0)
          return 0;
        v125 = *((_DWORD *)a2 + 12);
        if (v125 == 0x7FFFFFFF)
          v126 = -1;
        else
          v126 = v125 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
        v127 = *((_DWORD *)a2 + 10);
        if (v127 == 0x7FFFFFFF)
          v128 = -1;
        else
          v128 = v127 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
        v129 = *v5;
        v130 = v36 >> 3;
        if (v128 >= v126)
          v131 = v126;
        else
          v131 = v128;
        if (v126 == -1)
          v132 = v128;
        else
          v132 = v131;
        if (v132 < (uint64_t)v36)
        {
          if (v36 >= 8)
          {
            if (v130 <= 1)
              v133 = 1;
            else
              v133 = v36 >> 3;
            do
            {
              v150 = 0;
              v134 = *(unint64_t **)a2;
              if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
              {
                result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v150);
                if (!(_DWORD)result)
                  return result;
                v135 = v150;
                v129 = *v5;
              }
              else
              {
                v135 = *v134;
                *(_QWORD *)a2 = v134 + 1;
              }
              if (v129 == *((_DWORD *)this + 29))
              {
                google::protobuf::RepeatedField<double>::Reserve(v5, v129 + 1);
                v129 = *v5;
              }
              v136 = *((_QWORD *)this + 15) + 8 * v129;
              *((_DWORD *)this + 28) = v129 + 1;
              *(_QWORD *)(v136 + 8) = v135;
              ++v129;
              --v133;
            }
            while (v133);
          }
          continue;
        }
        v137 = v8;
        v138 = v7;
        v139 = v6;
        v140 = v129 + v130;
        if (v36 > 7)
        {
          v141 = v5;
          google::protobuf::RepeatedField<double>::Reserve(v5, v129 + v130);
          v142 = *((_QWORD *)this + 15);
          v147 = 8 * v140 - 8 * *((int *)this + 28);
          if (v147 >= 1)
            bzero((void *)(v142 + 8 + 8 * *((int *)this + 28)), 8 * (((unint64_t)v147 >> 3) - ((unint64_t)v147 > 7)) + 8);
        }
        else
        {
          v141 = v5;
          v142 = *((_QWORD *)this + 15);
        }
        *v141 = v140;
        v148 = v142 + 8;
        v16 = v142 == 0;
        v5 = v141;
        if (v16)
          v148 = 0;
        v6 = v139;
        v7 = v138;
        v8 = v137;
        v9 = v149;
        if (google::protobuf::io::CodedInputStream::ReadRaw(a2, (char *)(v148 + 8 * v129), v36))
          continue;
        if ((int)*v5 >= 1)
        {
          result = 0;
          *v5 = v129;
          return result;
        }
        return 0;
      default:
        if (v18 == 100)
        {
          if (v14 != 34)
            goto LABEL_9;
          if (*((_DWORD *)this + 42) == 100)
          {
            v37 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 19);
          }
          else
          {
            CoreML::Specification::SupportVectorClassifier::clear_ClassLabels((uint64_t)this);
            *((_DWORD *)this + 42) = 100;
            v37 = (CoreML::Specification::StringVector *)operator new();
            CoreML::Specification::StringVector::StringVector(v37);
            *((_QWORD *)this + 19) = v37;
          }
          v47 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v47 < 0)
          {
            v48 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v48 < 0)
              return 0;
          }
          else
          {
            v48 = *v47;
            *(_QWORD *)a2 = v47 + 1;
          }
          v64 = google::protobuf::io::CodedInputStream::PushLimit(a2, v48);
          v66 = *((_DWORD *)a2 + 13);
          v52 = __OFSUB__(v66--, 1);
          *((_DWORD *)a2 + 13) = v66;
          if (v66 < 0 != v52)
            return 0;
          v53 = v64;
          result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v37, (char **)a2, v65);
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          if (v18 != 101 || v14 != 42)
            goto LABEL_9;
          if (*((_DWORD *)this + 42) == 101)
          {
            v22 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 19);
          }
          else
          {
            CoreML::Specification::SupportVectorClassifier::clear_ClassLabels((uint64_t)this);
            *((_DWORD *)this + 42) = 101;
            v22 = (CoreML::Specification::Int64Vector *)operator new();
            CoreML::Specification::Int64Vector::Int64Vector(v22);
            *((_QWORD *)this + 19) = v22;
          }
          v41 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v41 < 0)
          {
            v42 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v42 < 0)
              return 0;
          }
          else
          {
            v42 = *v41;
            *(_QWORD *)a2 = v41 + 1;
          }
          v55 = google::protobuf::io::CodedInputStream::PushLimit(a2, v42);
          v57 = *((_DWORD *)a2 + 13);
          v52 = __OFSUB__(v57--, 1);
          *((_DWORD *)a2 + 13) = v57;
          if (v57 < 0 != v52)
            return 0;
          v53 = v55;
          result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v22, a2, v56);
          if (!(_DWORD)result)
            return result;
        }
LABEL_122:
        if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v53))
          return 0;
        continue;
    }
  }
}

void sub_19CA04BE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SupportVectorClassifier::ByteSizeLong(CoreML::Specification::SupportVectorClassifier *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CoreML::Specification::Kernel *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size(*((_DWORD *)this + 4), *((_QWORD *)this + 3));
  if (v2)
  {
    v3 = 11;
    v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((int)v2 >= 0)
      v3 = v4;
    v5 = v2;
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  *((_DWORD *)this + 8) = v5;
  v6 = *((unsigned int *)this + 12);
  v7 = v3 + v6 + v2;
  if ((_DWORD)v6)
  {
    v8 = 0;
    v9 = *((_QWORD *)this + 7);
    do
    {
      v10 = *(unsigned int **)(v9 + 8 * v8 + 8);
      v11 = v10[4];
      v12 = 8 * v11;
      if ((_DWORD)v11)
      {
        if ((v12 & 0x80000000) != 0)
          v13 = 11;
        else
          v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v13 = 0;
      }
      v14 = v13 + v12;
      v10[8] = v12;
      v10[9] = v14;
      v7 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      ++v8;
    }
    while ((_DWORD)v6 != v8);
  }
  v15 = *((unsigned int *)this + 16);
  v16 = 8 * v15;
  v17 = 11;
  v18 = ((9 * (__clz((8 * v15) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v15 & 0x10000000) == 0)
    v17 = v18;
  v19 = v17 + v7;
  if ((_DWORD)v15)
    v7 = v19;
  *((_DWORD *)this + 20) = v16;
  v20 = v7 + v16;
  v21 = *((unsigned int *)this + 22);
  v22 = 8 * v21;
  v23 = 11;
  v24 = ((9 * (__clz((8 * v21) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v21 & 0x10000000) == 0)
    v23 = v24;
  v25 = v23 + v20;
  if ((_DWORD)v21)
    v20 = v25;
  *((_DWORD *)this + 26) = v22;
  v26 = v20 + v22;
  v27 = *((unsigned int *)this + 28);
  v28 = 8 * v27;
  v29 = 11;
  v30 = ((9 * (__clz((8 * v27) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v27 & 0x10000000) == 0)
    v29 = v30;
  v31 = v29 + v26;
  if ((_DWORD)v27)
    v26 = v31;
  *((_DWORD *)this + 32) = v28;
  v32 = v26 + v28;
  if (this != (CoreML::Specification::SupportVectorClassifier *)&CoreML::Specification::_SupportVectorClassifier_default_instance_)
  {
    v33 = (CoreML::Specification::Kernel *)*((_QWORD *)this + 17);
    if (v33)
    {
      v34 = CoreML::Specification::Kernel::ByteSizeLong(v33);
      v32 += v34 + ((9 * (__clz(v34 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  v35 = *((_DWORD *)this + 41);
  if (v35 == 4)
  {
    v36 = CoreML::Specification::DenseSupportVectors::ByteSizeLong(*((CoreML::Specification::DenseSupportVectors **)this
                                                                   + 18));
  }
  else
  {
    if (v35 != 3)
      goto LABEL_34;
    v36 = CoreML::Specification::SparseSupportVectors::ByteSizeLong(*((CoreML::Specification::SparseSupportVectors **)this
                                                                    + 18));
  }
  v32 += v36 + ((9 * (__clz(v36 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_34:
  v37 = *((_DWORD *)this + 42);
  if (v37 == 101)
  {
    v38 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 19));
    goto LABEL_38;
  }
  if (v37 == 100)
  {
    v38 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 19));
LABEL_38:
    v32 += v38 + ((9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 40) = v32;
  return v32;
}

uint64_t *CoreML::Specification::SupportVectorClassifier::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t i;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  int j;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  char *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  char *v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  _BYTE *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  char *v51;
  int v52;
  char __src[5];

  v5 = this;
  if (this != &CoreML::Specification::_SupportVectorClassifier_default_instance_)
  {
    v6 = this[17];
    if (v6)
      this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  if (*((int *)v5 + 4) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 18;
      this = (uint64_t *)google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v7 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 18;
      v7 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v7;
    }
    v8 = *((_DWORD *)v5 + 8);
    if (v7 < 5)
    {
      this = (uint64_t *)google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v8);
    }
    else
    {
      v9 = *((_QWORD *)a2 + 1);
      if (v8 < 0x80)
      {
        v11 = *((_DWORD *)v5 + 8);
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v10++ = v8 | 0x80;
          v11 = v8 >> 7;
          v12 = v8 >> 14;
          v8 >>= 7;
        }
        while (v12);
      }
      *v10 = v11;
      v13 = (_DWORD)v10 - v9 + 1;
      *((_QWORD *)a2 + 1) += v13;
      *((_DWORD *)a2 + 4) -= v13;
    }
    v14 = *((unsigned int *)v5 + 4);
    if ((int)v14 >= 1)
    {
      for (i = 0; i != v14; ++i)
      {
        v16 = *(int *)(v5[3] + 4 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = (uint64_t *)google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v16);
        }
        else
        {
          v17 = *((_QWORD *)a2 + 1);
          if (v16 < 0x80)
          {
            LODWORD(v19) = *(_DWORD *)(v5[3] + 4 * i + 8);
            v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          }
          else
          {
            v18 = (_BYTE *)*((_QWORD *)a2 + 1);
            do
            {
              *v18++ = v16 | 0x80;
              v19 = v16 >> 7;
              v20 = v16 >> 14;
              v16 >>= 7;
            }
            while (v20);
          }
          *v18 = v19;
          v21 = (_DWORD)v18 - v17 + 1;
          *((_QWORD *)a2 + 1) += v21;
          *((_DWORD *)a2 + 4) -= v21;
        }
      }
    }
  }
  v22 = *((_DWORD *)v5 + 41);
  if (v22 == 3)
  {
    this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, v5[18], a2, a4);
    v22 = *((_DWORD *)v5 + 41);
  }
  if (v22 == 4)
    this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v5[18], a2, a4);
  v23 = *((_DWORD *)v5 + 12);
  if (v23)
  {
    for (j = 0; j != v23; ++j)
      this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5[7] + 8 * j + 8), a2, a4);
  }
  if (*((int *)v5 + 16) > 0)
  {
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 50;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v25 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 50;
      v25 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v25;
    }
    v26 = *((_DWORD *)v5 + 20);
    if (v25 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v26);
    }
    else
    {
      v27 = *((_QWORD *)a2 + 1);
      if (v26 < 0x80)
      {
        v29 = *((_DWORD *)v5 + 20);
        v28 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v28 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v28++ = v26 | 0x80;
          v29 = v26 >> 7;
          v30 = v26 >> 14;
          v26 >>= 7;
        }
        while (v30);
      }
      *v28 = v29;
      v31 = (_DWORD)v28 - v27 + 1;
      *((_QWORD *)a2 + 1) += v31;
      *((_DWORD *)a2 + 4) -= v31;
    }
    v32 = v5[9];
    if (v32)
      v33 = (char *)(v32 + 8);
    else
      v33 = 0;
    this = (uint64_t *)google::protobuf::io::CodedOutputStream::WriteRaw(a2, v33, 8 * *((_DWORD *)v5 + 16));
  }
  if (*((int *)v5 + 22) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 58;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v34 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 58;
      v34 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v34;
    }
    v35 = *((_DWORD *)v5 + 26);
    if (v34 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v35);
    }
    else
    {
      v36 = *((_QWORD *)a2 + 1);
      if (v35 < 0x80)
      {
        v38 = *((_DWORD *)v5 + 26);
        v37 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v37 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v37++ = v35 | 0x80;
          v38 = v35 >> 7;
          v39 = v35 >> 14;
          v35 >>= 7;
        }
        while (v39);
      }
      *v37 = v38;
      v40 = (_DWORD)v37 - v36 + 1;
      *((_QWORD *)a2 + 1) += v40;
      *((_DWORD *)a2 + 4) -= v40;
    }
    v41 = v5[12];
    if (v41)
      v42 = (char *)(v41 + 8);
    else
      v42 = 0;
    this = (uint64_t *)google::protobuf::io::CodedOutputStream::WriteRaw(a2, v42, 8 * *((_DWORD *)v5 + 22));
  }
  if (*((int *)v5 + 28) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 66;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v43 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 66;
      v43 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v43;
    }
    v44 = *((_DWORD *)v5 + 32);
    if (v43 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v44);
    }
    else
    {
      v45 = *((_QWORD *)a2 + 1);
      if (v44 < 0x80)
      {
        v47 = *((_DWORD *)v5 + 32);
        v46 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v46 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v46++ = v44 | 0x80;
          v47 = v44 >> 7;
          v48 = v44 >> 14;
          v44 >>= 7;
        }
        while (v48);
      }
      *v46 = v47;
      v49 = (_DWORD)v46 - v45 + 1;
      *((_QWORD *)a2 + 1) += v49;
      *((_DWORD *)a2 + 4) -= v49;
    }
    v50 = v5[15];
    if (v50)
      v51 = (char *)(v50 + 8);
    else
      v51 = 0;
    this = (uint64_t *)google::protobuf::io::CodedOutputStream::WriteRaw(a2, v51, 8 * *((_DWORD *)v5 + 28));
  }
  v52 = *((_DWORD *)v5 + 42);
  if (v52 == 100)
  {
    this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x64, v5[19], a2, a4);
    v52 = *((_DWORD *)v5 + 42);
  }
  if (v52 == 101)
    return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x65, v5[19], a2, a4);
  return this;
}

uint64_t CoreML::Specification::SupportVectorClassifier::GetCachedSize(CoreML::Specification::SupportVectorClassifier *this)
{
  return *((unsigned int *)this + 40);
}

uint64_t CoreML::Specification::Kernel::ByteSizeLong(CoreML::Specification::Kernel *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  switch(*((_DWORD *)this + 7))
  {
    case 1:
      *(_DWORD *)(*((_QWORD *)this + 2) + 16) = 0;
      result = 2;
      break;
    case 2:
      v3 = *((_QWORD *)this + 2);
      v4 = 9;
      if (*(double *)(v3 + 16) == 0.0)
        v4 = 0;
      *(_DWORD *)(v3 + 24) = v4;
      result = v4 | 2;
      break;
    case 3:
      v5 = CoreML::Specification::PolyKernel::ByteSizeLong(*((CoreML::Specification::PolyKernel **)this + 2));
      v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_13;
    case 4:
      v7 = *((_QWORD *)this + 2);
      v8 = 9;
      if (*(double *)(v7 + 16) == 0.0)
        v8 = 0;
      if (*(double *)(v7 + 24) != 0.0)
        v8 += 9;
      *(_DWORD *)(v7 + 32) = v8;
      v6 = v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
LABEL_13:
      result = v6 + 1;
      break;
    default:
      result = 0;
      break;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::SparseSupportVectors::ByteSizeLong(CoreML::Specification::SparseSupportVectors *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::SparseVector::ByteSizeLong(*(CoreML::Specification::SparseVector **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::DenseSupportVectors::ByteSizeLong(CoreML::Specification::DenseSupportVectors *this)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *((_DWORD *)this + 6);
  if (v1)
  {
    v2 = 0;
    v3 = *((_QWORD *)this + 4);
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = *(unsigned int **)(v3 + 8 * v2 + 8);
      v6 = v5[4];
      v7 = 8 * v6;
      if ((_DWORD)v6)
      {
        if ((v7 & 0x80000000) != 0)
          v8 = 11;
        else
          v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v8 = 0;
      }
      v9 = v8 + v7;
      v5[8] = v7;
      v5[9] = v9;
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v2;
    }
    while (v1 != v2);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::SparseVector::ByteSizeLong(CoreML::Specification::SparseVector *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::SparseNode::ByteSizeLong(*(CoreML::Specification::SparseNode **)(*((_QWORD *)this + 4)
                                                                                                 + 8 * v3
                                                                                                 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::SparseNode::ByteSizeLong(CoreML::Specification::SparseNode *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = 9;
  if (*((double *)this + 2) == 0.0)
    v1 = 0;
  v2 = *((_DWORD *)this + 6);
  v3 = 11;
  v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v2 >= 0)
    v3 = v4;
  v5 = v3 + v1;
  if (v2)
    v1 = v5;
  *((_DWORD *)this + 7) = v1;
  return v1;
}

uint64_t CoreML::Specification::PolyKernel::ByteSizeLong(CoreML::Specification::PolyKernel *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = 9;
  if (*((double *)this + 2) == 0.0)
    v1 = 0;
  if (*((double *)this + 3) != 0.0)
    v1 += 9;
  v2 = *((_DWORD *)this + 8);
  v3 = 11;
  v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v2 >= 0)
    v3 = v4;
  v5 = v3 + v1;
  if (v2)
    v1 = v5;
  *((_DWORD *)this + 9) = v1;
  return v1;
}

CoreML::Specification::Kernel *CoreML::Specification::Kernel::Kernel(CoreML::Specification::Kernel *this)
{
  *(_QWORD *)this = &off_1E3D57B68;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Kernel *)&CoreML::Specification::_Kernel_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_19CA057C0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Kernel::MergePartialFromCodedStream(CoreML::Specification::Kernel *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::LinearKernel *v9;
  char *v10;
  int VarintSizeAsIntFallback;
  CoreML::Specification::RBFKernel *v12;
  CoreML::Specification::PolyKernel *v13;
  CoreML::Specification::SigmoidKernel *v14;
  BOOL v15;
  char *v16;
  int v17;
  char *v18;
  int v19;
  char *v20;
  int v21;
  CoreML::Specification::LinearKernel *v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t result;
  google::protobuf::io::CodedInputStream *v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;

  while (2)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        break;
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) != 0)
        goto LABEL_7;
LABEL_23:
      if ((_DWORD)v7)
        v15 = (v7 & 7) == 4;
      else
        v15 = 1;
      if (v15)
        return 1;
      if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        goto LABEL_58;
    }
    LODWORD(v6) = 0;
LABEL_6:
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
    v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v7 & 0x100000000) == 0)
      goto LABEL_23;
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) != 1)
        {
          CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          v9 = (CoreML::Specification::LinearKernel *)operator new();
          CoreML::Specification::LinearKernel::LinearKernel(v9);
          *((_QWORD *)this + 2) = v9;
        }
        v10 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v10 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_58;
        }
        else
        {
          VarintSizeAsIntFallback = *v10;
          *(_QWORD *)a2 = v10 + 1;
        }
        v22 = (CoreML::Specification::LinearKernel *)google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v24 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v24--, 1);
        *((_DWORD *)a2 + 13) = v24;
        if (v24 < 0 != v25)
          goto LABEL_58;
        v26 = (int)v22;
        result = CoreML::Specification::LinearKernel::MergePartialFromCodedStream(v22, (char **)a2, v23);
        if (!(_DWORD)result)
          return result;
        v28 = a2;
        v29 = v26;
        goto LABEL_57;
      case 2u:
        if (v7 != 18)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 2)
        {
          v12 = (CoreML::Specification::RBFKernel *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v12 = (CoreML::Specification::RBFKernel *)operator new();
          CoreML::Specification::RBFKernel::RBFKernel(v12);
          *((_QWORD *)this + 2) = v12;
        }
        v16 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v16 < 0)
        {
          v17 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v17 < 0)
            goto LABEL_58;
        }
        else
        {
          v17 = *v16;
          *(_QWORD *)a2 = v16 + 1;
        }
        v30 = google::protobuf::io::CodedInputStream::PushLimit(a2, v17);
        v32 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v32--, 1);
        *((_DWORD *)a2 + 13) = v32;
        if (v32 < 0 != v25)
          goto LABEL_58;
        v33 = v30;
        result = CoreML::Specification::RBFKernel::MergePartialFromCodedStream(v12, (char **)a2, v31);
        if (!(_DWORD)result)
          return result;
        goto LABEL_56;
      case 3u:
        if (v7 != 26)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 3)
        {
          v13 = (CoreML::Specification::PolyKernel *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          v13 = (CoreML::Specification::PolyKernel *)operator new();
          CoreML::Specification::PolyKernel::PolyKernel(v13);
          *((_QWORD *)this + 2) = v13;
        }
        v18 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v18 < 0)
        {
          v19 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v19 < 0)
            goto LABEL_58;
        }
        else
        {
          v19 = *v18;
          *(_QWORD *)a2 = v18 + 1;
        }
        v34 = google::protobuf::io::CodedInputStream::PushLimit(a2, v19);
        v36 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v36--, 1);
        *((_DWORD *)a2 + 13) = v36;
        if (v36 < 0 != v25)
          goto LABEL_58;
        v33 = v34;
        result = CoreML::Specification::PolyKernel::MergePartialFromCodedStream(v13, (char **)a2, v35);
        if (!(_DWORD)result)
          return result;
        goto LABEL_56;
      case 4u:
        if (v7 != 34)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 4)
        {
          v14 = (CoreML::Specification::SigmoidKernel *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          v14 = (CoreML::Specification::SigmoidKernel *)operator new();
          CoreML::Specification::SigmoidKernel::SigmoidKernel(v14);
          *((_QWORD *)this + 2) = v14;
        }
        v20 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
        {
          v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v21 < 0)
            goto LABEL_58;
        }
        else
        {
          v21 = *v20;
          *(_QWORD *)a2 = v20 + 1;
        }
        v37 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
        v39 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v39--, 1);
        *((_DWORD *)a2 + 13) = v39;
        if (v39 < 0 != v25)
          goto LABEL_58;
        v33 = v37;
        result = CoreML::Specification::SigmoidKernel::MergePartialFromCodedStream(v14, (char **)a2, v38);
        if (!(_DWORD)result)
          return result;
LABEL_56:
        v28 = a2;
        v29 = v33;
LABEL_57:
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v28, v29))
          continue;
LABEL_58:
        result = 0;
        break;
      default:
        goto LABEL_23;
    }
    return result;
  }
}

void sub_19CA05BA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SupportVectorClassifier::clear_supportVectors(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 164);
  if (v2 == 4 || v2 == 3)
  {
    this = *(_QWORD *)(this + 144);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 164) = 0;
  return this;
}

CoreML::Specification::SparseSupportVectors *CoreML::Specification::SparseSupportVectors::SparseSupportVectors(CoreML::Specification::SparseSupportVectors *this)
{
  *(_QWORD *)this = &off_1E3D52C70;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::SparseSupportVectors *)&CoreML::Specification::_SparseSupportVectors_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_19CA05CAC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::SparseSupportVectors::MergePartialFromCodedStream(CoreML::Specification::SparseSupportVectors *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int *v12;
  int v13;
  int v14;
  CoreML::Specification::SparseVector *Aligned;
  google::protobuf::Arena *v16;
  google::protobuf::Arena **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int VarintSizeAsIntFallback;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  _BOOL8 result;

  v5 = (CoreML::Specification::SparseSupportVectors *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
        }
        v14 = *v12;
        goto LABEL_26;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 < *v12)
      {
        *((_DWORD *)this + 6) = v13 + 1;
        Aligned = *(CoreML::Specification::SparseVector **)&v12[2 * v13 + 2];
        goto LABEL_32;
      }
      if (v14 == *((_DWORD *)this + 7))
        goto LABEL_23;
LABEL_26:
      *v12 = v14 + 1;
      v16 = *(google::protobuf::Arena **)v5;
      if (*(_QWORD *)v5)
      {
        CoreML::Specification::SparseVector::SparseVector(Aligned);
        v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
        *v17 = Aligned;
        v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseVector>;
        v18 = (unint64_t *)((char *)v16 + 32);
        do
          v19 = __ldxr(v18);
        while (__stxr((unint64_t)v17, v18));
        v17[2] = (google::protobuf::Arena *)v19;
      }
      else
      {
        Aligned = (CoreML::Specification::SparseVector *)operator new();
        CoreML::Specification::SparseVector::SparseVector(Aligned);
      }
      v20 = *((_QWORD *)this + 4);
      v21 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v21 + 1;
      *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
LABEL_32:
      v22 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v22;
        *(_QWORD *)a2 = v22 + 1;
      }
      v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v26 = *((_DWORD *)a2 + 13);
      v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 == v27)
      {
        v28 = v24;
        result = CoreML::Specification::SparseVector::MergePartialFromCodedStream(Aligned, a2, v25);
        if (!result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
      return 0;
  }
}

void sub_19CA05F0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

CoreML::Specification::DenseSupportVectors *CoreML::Specification::DenseSupportVectors::DenseSupportVectors(CoreML::Specification::DenseSupportVectors *this)
{
  *(_QWORD *)this = &off_1E3D51D98;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::DenseSupportVectors *)&CoreML::Specification::_DenseSupportVectors_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_19CA05F90(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::DenseSupportVectors::MergePartialFromCodedStream(CoreML::Specification::DenseSupportVectors *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int *v12;
  int v13;
  int v14;
  CoreML::Specification::DenseVector *Aligned;
  google::protobuf::Arena *v16;
  google::protobuf::Arena **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int VarintSizeAsIntFallback;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  _BOOL8 result;

  v5 = (CoreML::Specification::DenseSupportVectors *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
        }
        v14 = *v12;
        goto LABEL_26;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 < *v12)
      {
        *((_DWORD *)this + 6) = v13 + 1;
        Aligned = *(CoreML::Specification::DenseVector **)&v12[2 * v13 + 2];
        goto LABEL_32;
      }
      if (v14 == *((_DWORD *)this + 7))
        goto LABEL_23;
LABEL_26:
      *v12 = v14 + 1;
      v16 = *(google::protobuf::Arena **)v5;
      if (*(_QWORD *)v5)
      {
        CoreML::Specification::DenseVector::DenseVector(Aligned);
        v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
        *v17 = Aligned;
        v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::DenseVector>;
        v18 = (unint64_t *)((char *)v16 + 32);
        do
          v19 = __ldxr(v18);
        while (__stxr((unint64_t)v17, v18));
        v17[2] = (google::protobuf::Arena *)v19;
      }
      else
      {
        Aligned = (CoreML::Specification::DenseVector *)operator new();
        CoreML::Specification::DenseVector::DenseVector(Aligned);
      }
      v20 = *((_QWORD *)this + 4);
      v21 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v21 + 1;
      *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
LABEL_32:
      v22 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v22;
        *(_QWORD *)a2 = v22 + 1;
      }
      v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v26 = *((_DWORD *)a2 + 13);
      v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 == v27)
      {
        v28 = v24;
        result = CoreML::Specification::DenseVector::MergePartialFromCodedStream(Aligned, (char **)a2, v25);
        if (!result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
      return 0;
  }
}

void sub_19CA061F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::Coefficients::MergePartialFromCodedStream(CoreML::Specification::Coefficients *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  signed int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 result;
  signed int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 9)
          break;
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(10, (unint64_t **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0)
        return 0;
      v13 = *((_DWORD *)a2 + 12);
      v14 = v13 == 0x7FFFFFFF
          ? -1
          : v13 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v15 = *((_DWORD *)a2 + 10);
      v16 = v15 == 0x7FFFFFFF
          ? -1
          : v15 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v17 = *v5;
      v18 = VarintSizeAsIntFallback >> 3;
      v19 = v16 >= v14 ? v14 : v16;
      v20 = v14 == -1 ? v16 : v19;
      if (v20 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v18 <= 1)
          v21 = 1;
        else
          v21 = VarintSizeAsIntFallback >> 3;
        do
        {
          v30 = 0;
          v22 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v30);
            if (!result)
              return result;
            v23 = v30;
            v17 = *v5;
          }
          else
          {
            v23 = *v22;
            *a2 = (char *)(v22 + 1);
          }
          if (v17 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v17 + 1);
            v17 = *v5;
          }
          v24 = *((_QWORD *)this + 3) + 8 * v17;
          *((_DWORD *)this + 4) = v17 + 1;
          *(_QWORD *)(v24 + 8) = v23;
          ++v17;
          --v21;
        }
        while (v21);
      }
    }
    v26 = v17 + v18;
    if (VarintSizeAsIntFallback > 7)
    {
      google::protobuf::RepeatedField<double>::Reserve(v5, v17 + v18);
      v27 = *((_QWORD *)this + 3);
      v28 = 8 * v26 - 8 * *((int *)this + 4);
      if (v28 >= 1)
        bzero((void *)(v27 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v28 >> 3) - ((unint64_t)v28 > 7)) + 8);
    }
    else
    {
      v27 = *((_QWORD *)this + 3);
    }
    *v5 = v26;
    v29 = v27 + 8;
    if (!v27)
      v29 = 0;
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v29 + 8 * v17), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v17;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::SupportVectorClassifier::clear_ClassLabels(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 168);
  if (v2 == 101 || v2 == 100)
  {
    this = *(_QWORD *)(this + 152);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 168) = 0;
  return this;
}

CoreML::Specification::Coefficients *CoreML::Specification::Coefficients::Coefficients(CoreML::Specification::Coefficients *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D4D3F8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::Coefficients *)&CoreML::Specification::_Coefficients_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_19CA065AC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::Coefficients>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

BOOL CoreML::Specification::DenseVector::MergePartialFromCodedStream(CoreML::Specification::DenseVector *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  signed int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 result;
  signed int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 9)
          break;
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(10, (unint64_t **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0)
        return 0;
      v13 = *((_DWORD *)a2 + 12);
      v14 = v13 == 0x7FFFFFFF
          ? -1
          : v13 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v15 = *((_DWORD *)a2 + 10);
      v16 = v15 == 0x7FFFFFFF
          ? -1
          : v15 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v17 = *v5;
      v18 = VarintSizeAsIntFallback >> 3;
      v19 = v16 >= v14 ? v14 : v16;
      v20 = v14 == -1 ? v16 : v19;
      if (v20 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v18 <= 1)
          v21 = 1;
        else
          v21 = VarintSizeAsIntFallback >> 3;
        do
        {
          v30 = 0;
          v22 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v30);
            if (!result)
              return result;
            v23 = v30;
            v17 = *v5;
          }
          else
          {
            v23 = *v22;
            *a2 = (char *)(v22 + 1);
          }
          if (v17 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v17 + 1);
            v17 = *v5;
          }
          v24 = *((_QWORD *)this + 3) + 8 * v17;
          *((_DWORD *)this + 4) = v17 + 1;
          *(_QWORD *)(v24 + 8) = v23;
          ++v17;
          --v21;
        }
        while (v21);
      }
    }
    v26 = v17 + v18;
    if (VarintSizeAsIntFallback > 7)
    {
      google::protobuf::RepeatedField<double>::Reserve(v5, v17 + v18);
      v27 = *((_QWORD *)this + 3);
      v28 = 8 * v26 - 8 * *((int *)this + 4);
      if (v28 >= 1)
        bzero((void *)(v27 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v28 >> 3) - ((unint64_t)v28 > 7)) + 8);
    }
    else
    {
      v27 = *((_QWORD *)this + 3);
    }
    *v5 = v26;
    v29 = v27 + 8;
    if (!v27)
      v29 = 0;
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v29 + 8 * v17), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v17;
    return result;
  }
  return 0;
}

CoreML::Specification::DenseVector *CoreML::Specification::DenseVector::DenseVector(CoreML::Specification::DenseVector *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D4CF38;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::DenseVector *)&CoreML::Specification::_DenseVector_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_19CA06930(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::DenseVector>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

BOOL CoreML::Specification::SparseVector::MergePartialFromCodedStream(CoreML::Specification::SparseVector *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int *v12;
  int v13;
  int v14;
  CoreML::Specification::SparseNode *Aligned;
  google::protobuf::Arena *v16;
  google::protobuf::Arena **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int VarintSizeAsIntFallback;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  _BOOL8 result;

  v5 = (CoreML::Specification::SparseVector *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
        }
        v14 = *v12;
        goto LABEL_26;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 < *v12)
      {
        *((_DWORD *)this + 6) = v13 + 1;
        Aligned = *(CoreML::Specification::SparseNode **)&v12[2 * v13 + 2];
        goto LABEL_32;
      }
      if (v14 == *((_DWORD *)this + 7))
        goto LABEL_23;
LABEL_26:
      *v12 = v14 + 1;
      v16 = *(google::protobuf::Arena **)v5;
      if (*(_QWORD *)v5)
      {
        CoreML::Specification::SparseNode::SparseNode(Aligned);
        v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
        *v17 = Aligned;
        v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseNode>;
        v18 = (unint64_t *)((char *)v16 + 32);
        do
          v19 = __ldxr(v18);
        while (__stxr((unint64_t)v17, v18));
        v17[2] = (google::protobuf::Arena *)v19;
      }
      else
      {
        Aligned = (CoreML::Specification::SparseNode *)operator new();
        CoreML::Specification::SparseNode::SparseNode(Aligned);
      }
      v20 = *((_QWORD *)this + 4);
      v21 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v21 + 1;
      *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
LABEL_32:
      v22 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v22;
        *(_QWORD *)a2 = v22 + 1;
      }
      v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v26 = *((_DWORD *)a2 + 13);
      v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 == v27)
      {
        v28 = v24;
        result = CoreML::Specification::SparseNode::MergePartialFromCodedStream(Aligned, (char **)a2, v25);
        if (!result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
          continue;
      }
      return 0;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
      return 0;
  }
}

void sub_19CA06BA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::SparseNode::MergePartialFromCodedStream(CoreML::Specification::SparseNode *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  char *v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  uint64_t Varint32Fallback;
  _BOOL8 result;
  unint64_t v17;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 >= a2[1])
        {
          LODWORD(v6) = 0;
LABEL_6:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_20;
          goto LABEL_7;
        }
        v6 = *v5;
        if (*v5 < 1)
          goto LABEL_6;
        *a2 = v5 + 1;
        v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0)
          goto LABEL_20;
LABEL_7:
        if (v7 >> 3 != 2)
          break;
        if (v7 != 17)
          goto LABEL_20;
        v17 = 0;
        v12 = (unint64_t *)*a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
        {
          result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v17);
          if (!result)
            return result;
          v13 = v17;
        }
        else
        {
          v13 = *v12;
          *a2 = (char *)(v12 + 1);
        }
        *((_QWORD *)this + 2) = v13;
      }
      if (v7 >> 3 != 1 || v7 != 8)
        break;
      v10 = *a2;
      if (*a2 >= a2[1])
      {
        v11 = 0;
      }
      else
      {
        v11 = *v10;
        if ((*v10 & 0x80000000) == 0)
        {
          *a2 = v10 + 1;
          goto LABEL_28;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback((google::protobuf::io::CodedInputStream *)a2, v11);
      v11 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_28:
      *((_DWORD *)this + 6) = v11;
    }
LABEL_20:
    if ((_DWORD)v7)
      v14 = (v7 & 7) == 4;
    else
      v14 = 1;
    if (v14)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

CoreML::Specification::SparseNode *CoreML::Specification::SparseNode::SparseNode(CoreML::Specification::SparseNode *this)
{
  *(_QWORD *)this = &off_1E3D4CE08;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::SparseNode *)&CoreML::Specification::_SparseNode_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_19CA06D64(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::SparseVector *CoreML::Specification::SparseVector::SparseVector(CoreML::Specification::SparseVector *this)
{
  *(_QWORD *)this = &off_1E3D4DE10;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::SparseVector *)&CoreML::Specification::_SparseVector_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_19CA06DE4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseVector>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t CoreML::Specification::Kernel::clear_kernel(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
      this = *(_QWORD *)(this + 16);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::RBFKernel *CoreML::Specification::RBFKernel::RBFKernel(CoreML::Specification::RBFKernel *this)
{
  *(_QWORD *)this = &off_1E3D593C0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::RBFKernel *)&CoreML::Specification::_RBFKernel_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_19CA06EBC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::RBFKernel::MergePartialFromCodedStream(CoreML::Specification::RBFKernel *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  _BOOL8 result;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  do
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 9 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v14 = 0;
      v12 = (unint64_t *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
      {
        result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v14);
        if (!result)
          return result;
        v13 = v14;
      }
      else
      {
        v13 = *v12;
        *a2 = (char *)(v12 + 1);
      }
      *((_QWORD *)this + 2) = v13;
    }
    if ((_DWORD)v7)
      v10 = (v7 & 7) == 4;
    else
      v10 = 1;
    result = v10;
    if (v10)
      return result;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

CoreML::Specification::PolyKernel *CoreML::Specification::PolyKernel::PolyKernel(CoreML::Specification::PolyKernel *this)
{
  *(_QWORD *)this = &off_1E3D4CD70;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::PolyKernel *)&CoreML::Specification::_PolyKernel_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_19CA07018(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::PolyKernel::MergePartialFromCodedStream(CoreML::Specification::PolyKernel *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unsigned int v9;
  char *v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  BOOL v17;
  uint64_t Varint32Fallback;
  _BOOL8 result;
  unint64_t v20;

  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = *a2;
          if (*a2 >= a2[1])
          {
            LODWORD(v6) = 0;
LABEL_6:
            TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
            v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
            if ((v7 & 0x100000000) == 0)
              goto LABEL_25;
            goto LABEL_7;
          }
          v6 = *v5;
          if (*v5 < 1)
            goto LABEL_6;
          *a2 = v5 + 1;
          v7 = v6 | 0x100000000;
          if ((v7 & 0x100000000) == 0)
            goto LABEL_25;
LABEL_7:
          v9 = v7 >> 3;
          if (v7 >> 3 != 3)
            break;
          if (v7 != 25)
            goto LABEL_25;
          v20 = 0;
          v13 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v20);
            if (!result)
              return result;
            v14 = v20;
          }
          else
          {
            v14 = *v13;
            *a2 = (char *)(v13 + 1);
          }
          *((_QWORD *)this + 3) = v14;
        }
        if (v9 != 2)
          break;
        if (v7 != 17)
          goto LABEL_25;
        v20 = 0;
        v15 = (unint64_t *)*a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
        {
          result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v20);
          if (!result)
            return result;
          v16 = v20;
        }
        else
        {
          v16 = *v15;
          *a2 = (char *)(v15 + 1);
        }
        *((_QWORD *)this + 2) = v16;
      }
      if (v9 != 1 || v7 != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1])
      {
        v12 = 0;
      }
      else
      {
        v12 = *v11;
        if ((*v11 & 0x80000000) == 0)
        {
          *a2 = v11 + 1;
          goto LABEL_33;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback((google::protobuf::io::CodedInputStream *)a2, v12);
      v12 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_33:
      *((_DWORD *)this + 8) = v12;
    }
LABEL_25:
    if ((_DWORD)v7)
      v17 = (v7 & 7) == 4;
    else
      v17 = 1;
    if (v17)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

CoreML::Specification::SigmoidKernel *CoreML::Specification::SigmoidKernel::SigmoidKernel(CoreML::Specification::SigmoidKernel *this)
{
  *(_QWORD *)this = &off_1E3D4E498;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::SigmoidKernel *)&CoreML::Specification::_SigmoidKernel_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_19CA07220(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::SigmoidKernel::MergePartialFromCodedStream(CoreML::Specification::SigmoidKernel *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  _BOOL8 result;
  unint64_t v16;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 >= a2[1])
        {
          LODWORD(v6) = 0;
LABEL_6:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_20;
          goto LABEL_7;
        }
        v6 = *v5;
        if (*v5 < 1)
          goto LABEL_6;
        *a2 = v5 + 1;
        v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0)
          goto LABEL_20;
LABEL_7:
        if (v7 >> 3 != 2)
          break;
        if (v7 != 17)
          goto LABEL_20;
        v16 = 0;
        v12 = (unint64_t *)*a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
        {
          result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v16);
          if (!result)
            return result;
          v13 = v16;
        }
        else
        {
          v13 = *v12;
          *a2 = (char *)(v12 + 1);
        }
        *((_QWORD *)this + 3) = v13;
      }
      if (v7 >> 3 != 1 || v7 != 9)
        break;
      v16 = 0;
      v10 = (unint64_t *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
      {
        result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v16);
        if (!result)
          return result;
        v11 = v16;
      }
      else
      {
        v11 = *v10;
        *a2 = (char *)(v10 + 1);
      }
      *((_QWORD *)this + 2) = v11;
    }
LABEL_20:
    if ((_DWORD)v7)
      v14 = (v7 & 7) == 4;
    else
      v14 = 1;
    result = v14;
    if (v14)
      return result;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

std::string *CoreML::Specification::SupportVectorClassifier::MergeFrom(std::string *this, const CoreML::Specification::SupportVectorClassifier *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v7;
  unsigned int *v8;
  signed int v9;
  signed int *v10;
  int v11;
  int v12;
  int v13;
  const CoreML::Specification::Kernel *v14;
  CoreML::Specification::Kernel *v15;
  const CoreML::Specification::Kernel *v16;
  int v17;
  CoreML::Specification::SparseSupportVectors *v18;
  CoreML::Specification::DenseSupportVectors *v19;
  CoreML::Specification::protobuf_SVM_2eproto *v20;
  const CoreML::Specification::SparseSupportVectors *v21;
  CoreML::Specification::protobuf_SVM_2eproto *v22;
  const CoreML::Specification::DenseSupportVectors *v23;
  int v24;
  CoreML::Specification::StringVector *v25;
  CoreML::Specification::Int64Vector *v26;
  CoreML::Specification::protobuf_DataStructures_2eproto *v27;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v28;
  CoreML::Specification::protobuf_DataStructures_2eproto *v29;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v30;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v3 + 16), *(_DWORD *)(v3 + 16) + v5);
    this = (std::string *)memcpy((void *)(*(_QWORD *)(v3 + 24) + 4 * *(int *)(v3 + 16) + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 4 * *((int *)a2 + 4));
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
  }
  v6 = *((_DWORD *)a2 + 12);
  if (v6)
  {
    v7 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)(*((_QWORD *)a2 + 7) + 8);
    v8 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 40), *((_DWORD *)a2 + 12));
    this = (std::string *)google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::Coefficients>::TypeHandler>((uint64_t *)(v3 + 40), (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)v8, v7, v6, **(_DWORD **)(v3 + 56) - *(_DWORD *)(v3 + 48));
    v9 = *(_DWORD *)(v3 + 48) + v6;
    *(_DWORD *)(v3 + 48) = v9;
    v10 = *(signed int **)(v3 + 56);
    if (*v10 < v9)
      *v10 = v9;
  }
  v11 = *((_DWORD *)a2 + 16);
  if (v11)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v3 + 64), *(_DWORD *)(v3 + 64) + v11);
    this = (std::string *)memcpy((void *)(*(_QWORD *)(v3 + 72) + 8 * *(int *)(v3 + 64) + 8), (const void *)(*((_QWORD *)a2 + 9) + 8), 8 * *((int *)a2 + 16));
    *(_DWORD *)(v3 + 64) += *((_DWORD *)a2 + 16);
  }
  v12 = *((_DWORD *)a2 + 22);
  if (v12)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v3 + 88), *(_DWORD *)(v3 + 88) + v12);
    this = (std::string *)memcpy((void *)(*(_QWORD *)(v3 + 96) + 8 * *(int *)(v3 + 88) + 8), (const void *)(*((_QWORD *)a2 + 12) + 8), 8 * *((int *)a2 + 22));
    *(_DWORD *)(v3 + 88) += *((_DWORD *)a2 + 22);
  }
  v13 = *((_DWORD *)a2 + 28);
  if (v13)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v3 + 112), *(_DWORD *)(v3 + 112) + v13);
    this = (std::string *)memcpy((void *)(*(_QWORD *)(v3 + 120) + 8 * *(int *)(v3 + 112) + 8), (const void *)(*((_QWORD *)a2 + 15) + 8), 8 * *((int *)a2 + 28));
    *(_DWORD *)(v3 + 112) += *((_DWORD *)a2 + 28);
  }
  if (a2 != (const CoreML::Specification::SupportVectorClassifier *)&CoreML::Specification::_SupportVectorClassifier_default_instance_)
  {
    v14 = (const CoreML::Specification::Kernel *)*((_QWORD *)a2 + 17);
    if (v14)
    {
      v15 = *(CoreML::Specification::Kernel **)(v3 + 136);
      if (!v15)
      {
        v15 = (CoreML::Specification::Kernel *)operator new();
        CoreML::Specification::Kernel::Kernel(v15);
        *(_QWORD *)(v3 + 136) = v15;
        v14 = (const CoreML::Specification::Kernel *)*((_QWORD *)a2 + 17);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (const CoreML::Specification::Kernel *)&CoreML::Specification::_Kernel_default_instance_;
      this = CoreML::Specification::Kernel::MergeFrom((std::string *)v15, v16);
    }
  }
  v17 = *((_DWORD *)a2 + 41);
  if (v17 != 4)
  {
    if (v17 != 3)
      goto LABEL_36;
    if (*(_DWORD *)(v3 + 164) == 3)
    {
      v18 = *(CoreML::Specification::SparseSupportVectors **)(v3 + 144);
    }
    else
    {
      CoreML::Specification::SupportVectorClassifier::clear_supportVectors(v3);
      *(_DWORD *)(v3 + 164) = 3;
      v18 = (CoreML::Specification::SparseSupportVectors *)operator new();
      v20 = CoreML::Specification::SparseSupportVectors::SparseSupportVectors(v18);
      *(_QWORD *)(v3 + 144) = v18;
      if (*((_DWORD *)a2 + 41) != 3)
      {
        CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v20);
        v21 = (const CoreML::Specification::SparseSupportVectors *)&CoreML::Specification::_SparseSupportVectors_default_instance_;
        goto LABEL_33;
      }
    }
    v21 = (const CoreML::Specification::SparseSupportVectors *)*((_QWORD *)a2 + 18);
LABEL_33:
    this = CoreML::Specification::SparseSupportVectors::MergeFrom((std::string *)v18, v21);
    goto LABEL_36;
  }
  if (*(_DWORD *)(v3 + 164) == 4)
  {
    v19 = *(CoreML::Specification::DenseSupportVectors **)(v3 + 144);
  }
  else
  {
    CoreML::Specification::SupportVectorClassifier::clear_supportVectors(v3);
    *(_DWORD *)(v3 + 164) = 4;
    v19 = (CoreML::Specification::DenseSupportVectors *)operator new();
    v22 = CoreML::Specification::DenseSupportVectors::DenseSupportVectors(v19);
    *(_QWORD *)(v3 + 144) = v19;
    if (*((_DWORD *)a2 + 41) != 4)
    {
      CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v22);
      v23 = (const CoreML::Specification::DenseSupportVectors *)&CoreML::Specification::_DenseSupportVectors_default_instance_;
      goto LABEL_35;
    }
  }
  v23 = (const CoreML::Specification::DenseSupportVectors *)*((_QWORD *)a2 + 18);
LABEL_35:
  this = CoreML::Specification::DenseSupportVectors::MergeFrom((std::string *)v19, v23);
LABEL_36:
  v24 = *((_DWORD *)a2 + 42);
  if (v24 == 101)
  {
    if (*(_DWORD *)(v3 + 168) == 101)
    {
      v26 = *(CoreML::Specification::Int64Vector **)(v3 + 152);
    }
    else
    {
      CoreML::Specification::SupportVectorClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 168) = 101;
      v26 = (CoreML::Specification::Int64Vector *)operator new();
      v29 = CoreML::Specification::Int64Vector::Int64Vector(v26);
      *(_QWORD *)(v3 + 152) = v26;
      if (*((_DWORD *)a2 + 42) != 101)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v29);
        v30 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&CoreML::Specification::_Int64Vector_default_instance_;
        return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v26, v30);
      }
    }
    v30 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)a2 + 19);
    return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v26, v30);
  }
  if (v24 == 100)
  {
    if (*(_DWORD *)(v3 + 168) == 100)
    {
      v25 = *(CoreML::Specification::StringVector **)(v3 + 152);
    }
    else
    {
      CoreML::Specification::SupportVectorClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 168) = 100;
      v25 = (CoreML::Specification::StringVector *)operator new();
      v27 = CoreML::Specification::StringVector::StringVector(v25);
      *(_QWORD *)(v3 + 152) = v25;
      if (*((_DWORD *)a2 + 42) != 100)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v27);
        v28 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)&CoreML::Specification::_StringVector_default_instance_;
        return CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v25, v28);
      }
    }
    v28 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((_QWORD *)a2 + 19);
    return CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v25, v28);
  }
  return this;
}

void sub_19CA077D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::Coefficients>::TypeHandler>(uint64_t *result, CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **a2, CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **a3, unsigned int a4, unsigned int a5)
{
  google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v11;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v12;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v13;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v14;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v15;
  BOOL v16;
  int v17;
  google::protobuf::Arena *v18;
  CoreML::Specification::Coefficients **v19;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v20;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v21;
  CoreML::Specification::Coefficients *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;

  v9 = (google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMClassifier_DoubleArray>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20;
      if (v18)
      {
        CoreML::Specification::Coefficients::Coefficients(Aligned);
        v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
        *v23 = Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::Coefficients>;
        v24 = (unint64_t *)((char *)v18 + 32);
        do
          v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
      }
      else
      {
        Aligned = (CoreML::Specification::Coefficients *)operator new();
        CoreML::Specification::Coefficients::Coefficients(Aligned);
      }
      result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMClassifier_DoubleArray>::Merge(v21, Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_19CA07944(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::Kernel::MergeFrom(std::string *this, const CoreML::Specification::Kernel *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  CoreML::Specification::PolyKernel *v6;
  std::string *v7;
  uint64_t v8;
  CoreML::Specification::protobuf_SVM_2eproto *v9;
  const CoreML::Specification::PolyKernel *v10;
  CoreML::Specification::protobuf_SVM_2eproto *v11;
  const CoreML::Specification::SigmoidKernel *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*(_DWORD *)(v3 + 28) == 1)
      {
        v5 = *(uint64_t **)(v3 + 16);
LABEL_17:
        v13 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_25;
      }
      CoreML::Specification::Kernel::clear_kernel(v3);
      *(_DWORD *)(v3 + 28) = 1;
      v5 = (uint64_t *)operator new();
      this = (std::string *)CoreML::Specification::LinearKernel::LinearKernel((CoreML::Specification::LinearKernel *)v5);
      *(_QWORD *)(v3 + 16) = v5;
      if (*((_DWORD *)a2 + 7) == 1)
        goto LABEL_17;
      this = (std::string *)CoreML::Specification::protobuf_SVM_2eproto::InitDefaults((CoreML::Specification::protobuf_SVM_2eproto *)this);
      v13 = &CoreML::Specification::_LinearKernel_default_instance_;
LABEL_25:
      v15 = v13[1];
      if ((v15 & 1) != 0)
        return google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v5 + 1, v15 & 0xFFFFFFFFFFFFFFFELL);
      return this;
    case 2:
      if (*(_DWORD *)(v3 + 28) == 2)
      {
        v8 = *(_QWORD *)(v3 + 16);
LABEL_19:
        v14 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_28;
      }
      CoreML::Specification::Kernel::clear_kernel(v3);
      *(_DWORD *)(v3 + 28) = 2;
      v8 = operator new();
      this = (std::string *)CoreML::Specification::RBFKernel::RBFKernel((CoreML::Specification::RBFKernel *)v8);
      *(_QWORD *)(v3 + 16) = v8;
      if (*((_DWORD *)a2 + 7) == 2)
        goto LABEL_19;
      this = (std::string *)CoreML::Specification::protobuf_SVM_2eproto::InitDefaults((CoreML::Specification::protobuf_SVM_2eproto *)this);
      v14 = &CoreML::Specification::_RBFKernel_default_instance_;
LABEL_28:
      v16 = v14[1];
      if ((v16 & 1) != 0)
        this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v8 + 8), v16 & 0xFFFFFFFFFFFFFFFELL);
      v17 = *((double *)v14 + 2);
      if (v17 != 0.0)
        *(double *)(v8 + 16) = v17;
      return this;
    case 3:
      if (*(_DWORD *)(v3 + 28) == 3)
      {
        v6 = *(CoreML::Specification::PolyKernel **)(v3 + 16);
      }
      else
      {
        CoreML::Specification::Kernel::clear_kernel(v3);
        *(_DWORD *)(v3 + 28) = 3;
        v6 = (CoreML::Specification::PolyKernel *)operator new();
        v9 = CoreML::Specification::PolyKernel::PolyKernel(v6);
        *(_QWORD *)(v3 + 16) = v6;
        if (*((_DWORD *)a2 + 7) != 3)
        {
          CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v9);
          v10 = (const CoreML::Specification::PolyKernel *)&CoreML::Specification::_PolyKernel_default_instance_;
          return CoreML::Specification::PolyKernel::MergeFrom((std::string *)v6, v10);
        }
      }
      v10 = (const CoreML::Specification::PolyKernel *)*((_QWORD *)a2 + 2);
      return CoreML::Specification::PolyKernel::MergeFrom((std::string *)v6, v10);
    case 4:
      if (*(_DWORD *)(v3 + 28) == 4)
      {
        v7 = *(std::string **)(v3 + 16);
LABEL_15:
        v12 = (const CoreML::Specification::SigmoidKernel *)*((_QWORD *)a2 + 2);
        return CoreML::Specification::SigmoidKernel::MergeFrom(v7, v12);
      }
      CoreML::Specification::Kernel::clear_kernel(v3);
      *(_DWORD *)(v3 + 28) = 4;
      v7 = (std::string *)operator new();
      v11 = CoreML::Specification::SigmoidKernel::SigmoidKernel((CoreML::Specification::SigmoidKernel *)v7);
      *(_QWORD *)(v3 + 16) = v7;
      if (*((_DWORD *)a2 + 7) == 4)
        goto LABEL_15;
      CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v11);
      v12 = (const CoreML::Specification::SigmoidKernel *)&CoreML::Specification::_SigmoidKernel_default_instance_;
      return CoreML::Specification::SigmoidKernel::MergeFrom(v7, v12);
    default:
      return this;
  }
}

void sub_19CA07BD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::SparseSupportVectors::MergeFrom(std::string *this, const CoreML::Specification::SparseSupportVectors *a2)
{
  std::string *v3;
  uint64_t v4;
  unsigned int v5;
  const CoreML::Specification::SparseVector **v6;
  unsigned int *v7;
  signed int v8;
  signed int *size;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (const CoreML::Specification::SparseVector **)(*((_QWORD *)a2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = (std::string *)google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::SparseVector>::TypeHandler>((uint64_t *)&v3->__r_.__value_.__r.__words[2], (uint64_t **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  return this;
}

std::string *CoreML::Specification::DenseSupportVectors::MergeFrom(std::string *this, const CoreML::Specification::DenseSupportVectors *a2)
{
  std::string *v3;
  uint64_t v4;
  unsigned int v5;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v6;
  unsigned int *v7;
  signed int v8;
  signed int *size;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)(*((_QWORD *)a2 + 4) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = (std::string *)google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::DenseVector>::TypeHandler>((uint64_t *)&v3->__r_.__value_.__r.__words[2], (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  return this;
}

uint64_t *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::DenseVector>::TypeHandler>(uint64_t *result, CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **a2, CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **a3, unsigned int a4, unsigned int a5)
{
  google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v11;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v12;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v13;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v14;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v15;
  BOOL v16;
  int v17;
  google::protobuf::Arena *v18;
  CoreML::Specification::DenseVector **v19;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **v20;
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v21;
  CoreML::Specification::DenseVector *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;

  v9 = (google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMClassifier_DoubleArray>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20;
      if (v18)
      {
        CoreML::Specification::DenseVector::DenseVector(Aligned);
        v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
        *v23 = Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::DenseVector>;
        v24 = (unint64_t *)((char *)v18 + 32);
        do
          v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
      }
      else
      {
        Aligned = (CoreML::Specification::DenseVector *)operator new();
        CoreML::Specification::DenseVector::DenseVector(Aligned);
      }
      result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMClassifier_DoubleArray>::Merge(v21, Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_19CA07E94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::SparseVector>::TypeHandler>(uint64_t *result, uint64_t **a2, const CoreML::Specification::SparseVector **a3, unsigned int a4, unsigned int a5)
{
  google::protobuf::Arena **v9;
  uint64_t v10;
  const CoreML::Specification::SparseVector **v11;
  uint64_t **v12;
  const CoreML::Specification::SparseVector *v13;
  const CoreML::Specification::SparseVector *v14;
  uint64_t *v15;
  BOOL v16;
  int v17;
  google::protobuf::Arena *v18;
  CoreML::Specification::SparseVector **v19;
  const CoreML::Specification::SparseVector **v20;
  const CoreML::Specification::SparseVector *v21;
  CoreML::Specification::SparseVector *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;

  v9 = (google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseVector>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = (CoreML::Specification::SparseVector **)&a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20;
      if (v18)
      {
        CoreML::Specification::SparseVector::SparseVector(Aligned);
        v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
        *v23 = Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseVector>;
        v24 = (unint64_t *)((char *)v18 + 32);
        do
          v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
      }
      else
      {
        Aligned = (CoreML::Specification::SparseVector *)operator new();
        CoreML::Specification::SparseVector::SparseVector(Aligned);
      }
      result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseVector>::Merge(v21, (uint64_t *)Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_19CA07FD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseVector>::Merge(const CoreML::Specification::SparseVector *a1, uint64_t *a2)
{
  return CoreML::Specification::SparseVector::MergeFrom(a2, a1);
}

uint64_t *CoreML::Specification::SparseVector::MergeFrom(uint64_t *this, const CoreML::Specification::SparseVector *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const CoreML::Specification::SparseNode **v11;
  std::string **v12;
  const CoreML::Specification::SparseNode *v13;
  const CoreML::Specification::SparseNode *v14;
  std::string *v15;
  google::protobuf::Arena *v16;
  int v17;
  uint64_t v18;
  CoreML::Specification::SparseNode **v19;
  const CoreML::Specification::SparseNode **v20;
  const CoreML::Specification::SparseNode *v21;
  CoreML::Specification::SparseNode *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  int *v27;
  uint64_t v28;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v28 = *((_QWORD *)a2 + 4);
    this = (uint64_t *)google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 2), v5);
    v6 = this;
    v7 = *(int *)v3[4];
    v8 = *((int *)v3 + 6);
    v9 = v7 - v8;
    if ((int)v7 - (int)v8 >= v5)
      v10 = v5;
    else
      v10 = v9;
    if ((int)v10 >= 1)
    {
      v11 = (const CoreML::Specification::SparseNode **)(v28 + 8);
      v12 = (std::string **)this;
      do
      {
        v14 = *v11++;
        v13 = v14;
        v15 = *v12++;
        this = (uint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseNode>::Merge(v13, v15);
        --v10;
      }
      while (v10);
    }
    if (v9 < v5)
    {
      v16 = (google::protobuf::Arena *)v3[2];
      v17 = v8 + v5 - v7;
      v18 = 8 * v7 - 8 * v8;
      v19 = (CoreML::Specification::SparseNode **)((char *)v6 + v18);
      v20 = (const CoreML::Specification::SparseNode **)(v18 + v28 + 8);
      do
      {
        v21 = *v20;
        if (v16)
        {
          CoreML::Specification::SparseNode::SparseNode(Aligned);
          v23 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
          *v23 = Aligned;
          v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseNode>;
          v24 = (unint64_t *)((char *)v16 + 32);
          do
            v25 = __ldxr(v24);
          while (__stxr((unint64_t)v23, v24));
          v23[2] = (google::protobuf::Arena *)v25;
        }
        else
        {
          Aligned = (CoreML::Specification::SparseNode *)operator new();
          CoreML::Specification::SparseNode::SparseNode(Aligned);
        }
        this = (uint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseNode>::Merge(v21, (std::string *)Aligned);
        *v19++ = Aligned;
        ++v20;
        --v17;
      }
      while (v17);
    }
    v26 = *((_DWORD *)v3 + 6) + v5;
    *((_DWORD *)v3 + 6) = v26;
    v27 = (int *)v3[4];
    if (*v27 < v26)
      *v27 = v26;
  }
  return this;
}

void sub_19CA081AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseNode>::Merge(const CoreML::Specification::SparseNode *a1, std::string *a2)
{
  return CoreML::Specification::SparseNode::MergeFrom(a2, a1);
}

std::string *CoreML::Specification::SparseNode::MergeFrom(std::string *this, const CoreML::Specification::SparseNode *a2)
{
  std::string *v3;
  uint64_t v4;
  double v5;
  int v6;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((double *)a2 + 2);
  if (v5 != 0.0)
    *(double *)&v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((_DWORD *)a2 + 6);
  if (v6)
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v6;
  return this;
}

std::string *CoreML::Specification::PolyKernel::MergeFrom(std::string *this, const CoreML::Specification::PolyKernel *a2)
{
  std::string *v3;
  uint64_t v4;
  double v5;
  double v6;
  int v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((double *)a2 + 2);
  if (v5 != 0.0)
    *(double *)&v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((double *)a2 + 3);
  if (v6 != 0.0)
    *(double *)&v3[1].__r_.__value_.__l.__data_ = v6;
  v7 = *((_DWORD *)a2 + 8);
  if (v7)
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v7;
  return this;
}

std::string *CoreML::Specification::SigmoidKernel::MergeFrom(std::string *this, const CoreML::Specification::SigmoidKernel *a2)
{
  std::string *v3;
  uint64_t v4;
  double v5;
  double v6;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((double *)a2 + 2);
  if (v5 != 0.0)
    *(double *)&v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((double *)a2 + 3);
  if (v6 != 0.0)
    *(double *)&v3[1].__r_.__value_.__l.__data_ = v6;
  return this;
}

CoreML::Specification::SupportVectorClassifier *CoreML::Specification::SupportVectorClassifier::SupportVectorClassifier(CoreML::Specification::SupportVectorClassifier *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_QWORD *)this = &off_1E3D547C0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  if (this != (CoreML::Specification::SupportVectorClassifier *)&CoreML::Specification::_SupportVectorClassifier_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_QWORD *)this + 20) = 0;
  return this;
}

void sub_19CA08360(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)v2[15];
  if (v5 && !*v5)
    operator delete(v5);
  v6 = (_QWORD *)v2[12];
  if (v6 && !*v6)
    operator delete(v6);
  v7 = (_QWORD *)v2[9];
  if (v7 && !*v7)
    operator delete(v7);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v3);
  v8 = (_QWORD *)v2[3];
  if (v8)
  {
    if (!*v8)
      operator delete(v8);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::SupportVectorClassifier>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::SupportVectorClassifier>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::SupportVectorClassifier>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::SupportVectorRegressor::~SupportVectorRegressor(CoreML::Specification::SupportVectorRegressor *this)
{
  CoreML::Specification::SupportVectorRegressor::~SupportVectorRegressor(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E3D53F70;
  if (this != (CoreML::Specification::SupportVectorRegressor *)&CoreML::Specification::_SupportVectorRegressor_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  if (*((_DWORD *)this + 13))
    CoreML::Specification::SupportVectorRegressor::clear_supportVectors((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::SupportVectorRegressor::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SupportVectorRegressor");
}

CoreML::Specification::SupportVectorRegressor *CoreML::Specification::SupportVectorRegressor::New(CoreML::Specification::SupportVectorRegressor *this)
{
  return CoreML::Specification::SupportVectorRegressor::New(this, 0);
}

CoreML::Specification::SupportVectorRegressor *CoreML::Specification::SupportVectorRegressor::New(CoreML::Specification::SupportVectorRegressor *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::SupportVectorRegressor *v3;

  v3 = (CoreML::Specification::SupportVectorRegressor *)operator new();
  CoreML::Specification::SupportVectorRegressor::SupportVectorRegressor(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::SupportVectorRegressor>(a2, v3);
  return v3;
}

void sub_19CA0859C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4034009599);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SupportVectorRegressor::Clear(CoreML::Specification::SupportVectorRegressor *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  return CoreML::Specification::SupportVectorRegressor::clear_supportVectors((uint64_t)this);
}

uint64_t CoreML::Specification::SupportVectorRegressor::IsInitialized(CoreML::Specification::SupportVectorRegressor *this)
{
  return 1;
}

uint64_t CoreML::Specification::SupportVectorRegressor::MergePartialFromCodedStream(CoreML::Specification::SupportVectorRegressor *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::Kernel *v9;
  char *v10;
  int VarintSizeAsIntFallback;
  CoreML::Specification::SparseSupportVectors *v12;
  CoreML::Specification::DenseSupportVectors *v13;
  CoreML::Specification::Coefficients *v14;
  char *v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  char *v20;
  int v21;
  char *v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t result;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  unint64_t v39;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1))
        break;
      LODWORD(v6) = 0;
LABEL_6:
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0)
        goto LABEL_30;
LABEL_7:
      switch(v7 >> 3)
      {
        case 1u:
          if (v7 != 10)
            goto LABEL_30;
          v9 = (CoreML::Specification::Kernel *)*((_QWORD *)this + 2);
          if (!v9)
          {
            v9 = (CoreML::Specification::Kernel *)operator new();
            CoreML::Specification::Kernel::Kernel(v9);
            *((_QWORD *)this + 2) = v9;
          }
          v10 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v10 < 0)
          {
            VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v10;
            *(_QWORD *)a2 = v10 + 1;
          }
          v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
          v26 = *((_DWORD *)a2 + 13);
          v27 = __OFSUB__(v26--, 1);
          *((_DWORD *)a2 + 13) = v26;
          if (v26 < 0 != v27)
            return 0;
          v28 = v24;
          result = CoreML::Specification::Kernel::MergePartialFromCodedStream(v9, a2, v25);
          if (!(_DWORD)result)
            return result;
          goto LABEL_59;
        case 2u:
          if (v7 != 18)
            goto LABEL_30;
          if (*((_DWORD *)this + 13) == 2)
          {
            v12 = (CoreML::Specification::SparseSupportVectors *)*((_QWORD *)this + 5);
          }
          else
          {
            CoreML::Specification::SupportVectorRegressor::clear_supportVectors((uint64_t)this);
            *((_DWORD *)this + 13) = 2;
            v12 = (CoreML::Specification::SparseSupportVectors *)operator new();
            CoreML::Specification::SparseSupportVectors::SparseSupportVectors(v12);
            *((_QWORD *)this + 5) = v12;
          }
          v20 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
          {
            v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v21 < 0)
              return 0;
          }
          else
          {
            v21 = *v20;
            *(_QWORD *)a2 = v20 + 1;
          }
          v33 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
          v35 = *((_DWORD *)a2 + 13);
          v27 = __OFSUB__(v35--, 1);
          *((_DWORD *)a2 + 13) = v35;
          if (v35 < 0 != v27)
            return 0;
          v28 = v33;
          result = CoreML::Specification::SparseSupportVectors::MergePartialFromCodedStream(v12, a2, v34);
          if (!(_DWORD)result)
            return result;
          goto LABEL_59;
        case 3u:
          if (v7 != 26)
            goto LABEL_30;
          if (*((_DWORD *)this + 13) == 3)
          {
            v13 = (CoreML::Specification::DenseSupportVectors *)*((_QWORD *)this + 5);
          }
          else
          {
            CoreML::Specification::SupportVectorRegressor::clear_supportVectors((uint64_t)this);
            *((_DWORD *)this + 13) = 3;
            v13 = (CoreML::Specification::DenseSupportVectors *)operator new();
            CoreML::Specification::DenseSupportVectors::DenseSupportVectors(v13);
            *((_QWORD *)this + 5) = v13;
          }
          v22 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
          {
            v23 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v23 < 0)
              return 0;
          }
          else
          {
            v23 = *v22;
            *(_QWORD *)a2 = v22 + 1;
          }
          v36 = google::protobuf::io::CodedInputStream::PushLimit(a2, v23);
          v38 = *((_DWORD *)a2 + 13);
          v27 = __OFSUB__(v38--, 1);
          *((_DWORD *)a2 + 13) = v38;
          if (v38 < 0 != v27)
            return 0;
          v28 = v36;
          result = CoreML::Specification::DenseSupportVectors::MergePartialFromCodedStream(v13, a2, v37);
          if (!(_DWORD)result)
            return result;
LABEL_59:
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
            continue;
          return 0;
        case 4u:
          if (v7 != 34)
            goto LABEL_30;
          v14 = (CoreML::Specification::Coefficients *)*((_QWORD *)this + 3);
          if (!v14)
          {
            v14 = (CoreML::Specification::Coefficients *)operator new();
            CoreML::Specification::Coefficients::Coefficients(v14);
            *((_QWORD *)this + 3) = v14;
          }
          v15 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
          {
            v16 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v16 < 0)
              return 0;
          }
          else
          {
            v16 = *v15;
            *(_QWORD *)a2 = v15 + 1;
          }
          v30 = google::protobuf::io::CodedInputStream::PushLimit(a2, v16);
          v32 = *((_DWORD *)a2 + 13);
          v27 = __OFSUB__(v32--, 1);
          *((_DWORD *)a2 + 13) = v32;
          if (v32 < 0 != v27)
            return 0;
          v28 = v30;
          result = CoreML::Specification::Coefficients::MergePartialFromCodedStream(v14, (char **)a2, v31);
          if (!(_DWORD)result)
            return result;
          goto LABEL_59;
        case 5u:
          if (v7 != 41)
            goto LABEL_30;
          v39 = 0;
          v17 = *(unint64_t **)a2;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v39);
            if (!(_DWORD)result)
              return result;
            v18 = v39;
          }
          else
          {
            v18 = *v17;
            *(_QWORD *)a2 = v17 + 1;
          }
          *((_QWORD *)this + 4) = v18;
          break;
        default:
          goto LABEL_30;
      }
    }
    v6 = *v5;
    if (*v5 < 1)
      goto LABEL_6;
    *(_QWORD *)a2 = v5 + 1;
    v7 = v6 | 0x100000000;
    if ((v7 & 0x100000000) != 0)
      goto LABEL_7;
LABEL_30:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_19CA08A0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SupportVectorRegressor::ByteSizeLong(CoreML::Specification::SupportVectorRegressor *this)
{
  CoreML::Specification::Kernel *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (this == (CoreML::Specification::SupportVectorRegressor *)&CoreML::Specification::_SupportVectorRegressor_default_instance_)
  {
    v4 = 0;
  }
  else
  {
    v2 = (CoreML::Specification::Kernel *)*((_QWORD *)this + 2);
    if (v2)
    {
      v3 = CoreML::Specification::Kernel::ByteSizeLong(v2);
      v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v4 = 0;
    }
    v5 = (unsigned int *)*((_QWORD *)this + 3);
    if (v5)
    {
      v6 = v5[4];
      v7 = 8 * v6;
      if ((_DWORD)v6)
      {
        if ((v7 & 0x80000000) != 0)
          v8 = 11;
        else
          v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v8 = 0;
      }
      v9 = v8 + v7;
      v5[8] = v7;
      v5[9] = v9;
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  if (*((double *)this + 4) == 0.0)
    v10 = v4;
  else
    v10 = v4 + 9;
  v11 = *((_DWORD *)this + 13);
  if (v11 == 3)
  {
    v12 = CoreML::Specification::DenseSupportVectors::ByteSizeLong(*((CoreML::Specification::DenseSupportVectors **)this
                                                                   + 5));
    goto LABEL_20;
  }
  if (v11 == 2)
  {
    v12 = CoreML::Specification::SparseSupportVectors::ByteSizeLong(*((CoreML::Specification::SparseSupportVectors **)this
                                                                    + 5));
LABEL_20:
    v10 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 12) = v10;
  return v10;
}

uint64_t *CoreML::Specification::SupportVectorRegressor::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double v9;

  v5 = this;
  if (this != &CoreML::Specification::_SupportVectorRegressor_default_instance_)
  {
    v6 = this[2];
    if (v6)
      this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  v7 = *((_DWORD *)v5 + 13);
  if (v7 == 2)
  {
    this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v5[5], a2, a4);
    v7 = *((_DWORD *)v5 + 13);
  }
  if (v7 == 3)
    this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, v5[5], a2, a4);
  if (v5 != &CoreML::Specification::_SupportVectorRegressor_default_instance_)
  {
    v8 = v5[3];
    if (v8)
      this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v8, a2, a4);
  }
  v9 = *((double *)v5 + 4);
  if (v9 != 0.0)
    return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteDouble(5, a2, v9, a3);
  return this;
}

uint64_t CoreML::Specification::SupportVectorRegressor::GetCachedSize(CoreML::Specification::SupportVectorRegressor *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t CoreML::Specification::SupportVectorRegressor::clear_supportVectors(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 52);
  if (v2 == 3 || v2 == 2)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

std::string *CoreML::Specification::SupportVectorRegressor::MergeFrom(std::string *this, const CoreML::Specification::SupportVectorRegressor *a2)
{
  uint64_t v3;
  uint64_t v4;
  const CoreML::Specification::Kernel *v5;
  CoreML::Specification::Kernel *v6;
  const CoreML::Specification::Kernel *v7;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v8;
  CoreML::Specification::Coefficients *v9;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v10;
  double v11;
  int v12;
  CoreML::Specification::SparseSupportVectors *v13;
  CoreML::Specification::DenseSupportVectors *v14;
  CoreML::Specification::protobuf_SVM_2eproto *v15;
  const CoreML::Specification::SparseSupportVectors *v16;
  CoreML::Specification::protobuf_SVM_2eproto *v17;
  const CoreML::Specification::DenseSupportVectors *v18;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::SupportVectorRegressor *)&CoreML::Specification::_SupportVectorRegressor_default_instance_)
  {
    v5 = (const CoreML::Specification::Kernel *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = *(CoreML::Specification::Kernel **)(v3 + 16);
      if (!v6)
      {
        v6 = (CoreML::Specification::Kernel *)operator new();
        CoreML::Specification::Kernel::Kernel(v6);
        *(_QWORD *)(v3 + 16) = v6;
        v5 = (const CoreML::Specification::Kernel *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::Kernel *)&CoreML::Specification::_Kernel_default_instance_;
      this = CoreML::Specification::Kernel::MergeFrom((std::string *)v6, v7);
    }
    v8 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = *(CoreML::Specification::Coefficients **)(v3 + 24);
      if (!v9)
      {
        v9 = (CoreML::Specification::Coefficients *)operator new();
        CoreML::Specification::Coefficients::Coefficients(v9);
        *(_QWORD *)(v3 + 24) = v9;
        v8 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&CoreML::Specification::_Coefficients_default_instance_;
      this = (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v9, v10);
    }
  }
  v11 = *((double *)a2 + 4);
  if (v11 != 0.0)
    *(double *)(v3 + 32) = v11;
  v12 = *((_DWORD *)a2 + 13);
  if (v12 == 3)
  {
    if (*(_DWORD *)(v3 + 52) == 3)
    {
      v14 = *(CoreML::Specification::DenseSupportVectors **)(v3 + 40);
    }
    else
    {
      CoreML::Specification::SupportVectorRegressor::clear_supportVectors(v3);
      *(_DWORD *)(v3 + 52) = 3;
      v14 = (CoreML::Specification::DenseSupportVectors *)operator new();
      v17 = CoreML::Specification::DenseSupportVectors::DenseSupportVectors(v14);
      *(_QWORD *)(v3 + 40) = v14;
      if (*((_DWORD *)a2 + 13) != 3)
      {
        CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v17);
        v18 = (const CoreML::Specification::DenseSupportVectors *)&CoreML::Specification::_DenseSupportVectors_default_instance_;
        return CoreML::Specification::DenseSupportVectors::MergeFrom((std::string *)v14, v18);
      }
    }
    v18 = (const CoreML::Specification::DenseSupportVectors *)*((_QWORD *)a2 + 5);
    return CoreML::Specification::DenseSupportVectors::MergeFrom((std::string *)v14, v18);
  }
  if (v12 == 2)
  {
    if (*(_DWORD *)(v3 + 52) == 2)
    {
      v13 = *(CoreML::Specification::SparseSupportVectors **)(v3 + 40);
    }
    else
    {
      CoreML::Specification::SupportVectorRegressor::clear_supportVectors(v3);
      *(_DWORD *)(v3 + 52) = 2;
      v13 = (CoreML::Specification::SparseSupportVectors *)operator new();
      v15 = CoreML::Specification::SparseSupportVectors::SparseSupportVectors(v13);
      *(_QWORD *)(v3 + 40) = v13;
      if (*((_DWORD *)a2 + 13) != 2)
      {
        CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v15);
        v16 = (const CoreML::Specification::SparseSupportVectors *)&CoreML::Specification::_SparseSupportVectors_default_instance_;
        return CoreML::Specification::SparseSupportVectors::MergeFrom((std::string *)v13, v16);
      }
    }
    v16 = (const CoreML::Specification::SparseSupportVectors *)*((_QWORD *)a2 + 5);
    return CoreML::Specification::SparseSupportVectors::MergeFrom((std::string *)v13, v16);
  }
  return this;
}

void sub_19CA08EB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

CoreML::Specification::SupportVectorRegressor *CoreML::Specification::SupportVectorRegressor::SupportVectorRegressor(CoreML::Specification::SupportVectorRegressor *this)
{
  *(_QWORD *)this = &off_1E3D53F70;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::SupportVectorRegressor *)&CoreML::Specification::_SupportVectorRegressor_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 6) = 0;
  return this;
}

void sub_19CA08F58(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::SupportVectorRegressor>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::SupportVectorRegressor>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::SupportVectorRegressor>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::Coefficients::~Coefficients(CoreML::Specification::Coefficients *this)
{
  CoreML::Specification::Coefficients::~Coefficients(this);
  JUMPOUT(0x1A1AD6260);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E3D4D3F8;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::Coefficients::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Coefficients");
}

CoreML::Specification::Coefficients *CoreML::Specification::Coefficients::New(CoreML::Specification::Coefficients *this)
{
  return CoreML::Specification::Coefficients::New(this, 0);
}

CoreML::Specification::Coefficients *CoreML::Specification::Coefficients::New(CoreML::Specification::Coefficients *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Coefficients *v3;

  v3 = (CoreML::Specification::Coefficients *)operator new();
  CoreML::Specification::Coefficients::Coefficients(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Coefficients>(a2, v3);
  return v3;
}

void sub_19CA090E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Coefficients::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::Coefficients::IsInitialized(CoreML::Specification::Coefficients *this)
{
  return 1;
}

uint64_t CoreML::Specification::Coefficients::ByteSizeLong(CoreML::Specification::Coefficients *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 8 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::Coefficients::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(_QWORD *)(v3 + 24);
    if (v11)
      v12 = (char *)(v11 + 8);
    else
      v12 = 0;
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, 8 * *(_DWORD *)(v3 + 16));
  }
  return this;
}

uint64_t CoreML::Specification::Coefficients::GetCachedSize(CoreML::Specification::Coefficients *this)
{
  return *((unsigned int *)this + 9);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Coefficients>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Coefficients>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Coefficients>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::DenseSupportVectors::~DenseSupportVectors(CoreML::Specification::DenseSupportVectors *this)
{
  CoreML::Specification::DenseSupportVectors::~DenseSupportVectors(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D51D98;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::DenseSupportVectors::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DenseSupportVectors");
}

CoreML::Specification::DenseSupportVectors *CoreML::Specification::DenseSupportVectors::New(CoreML::Specification::DenseSupportVectors *this)
{
  return CoreML::Specification::DenseSupportVectors::New(this, 0);
}

CoreML::Specification::DenseSupportVectors *CoreML::Specification::DenseSupportVectors::New(CoreML::Specification::DenseSupportVectors *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::DenseSupportVectors *v3;

  v3 = (CoreML::Specification::DenseSupportVectors *)operator new();
  CoreML::Specification::DenseSupportVectors::DenseSupportVectors(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::DenseSupportVectors>(a2, v3);
  return v3;
}

void sub_19CA093C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::DenseSupportVectors::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v3 = *v2++;
      *(_DWORD *)(v3 + 16) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::DenseSupportVectors::IsInitialized(CoreML::Specification::DenseSupportVectors *this)
{
  return 1;
}

uint64_t CoreML::Specification::DenseSupportVectors::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::DenseSupportVectors::GetCachedSize(CoreML::Specification::DenseSupportVectors *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::DenseSupportVectors>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::DenseSupportVectors>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::DenseSupportVectors>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::DenseVector::~DenseVector(CoreML::Specification::DenseVector *this)
{
  CoreML::Specification::DenseVector::~DenseVector(this);
  JUMPOUT(0x1A1AD6260);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E3D4CF38;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::DenseVector::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DenseVector");
}

CoreML::Specification::DenseVector *CoreML::Specification::DenseVector::New(CoreML::Specification::DenseVector *this)
{
  return CoreML::Specification::DenseVector::New(this, 0);
}

CoreML::Specification::DenseVector *CoreML::Specification::DenseVector::New(CoreML::Specification::DenseVector *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::DenseVector *v3;

  v3 = (CoreML::Specification::DenseVector *)operator new();
  CoreML::Specification::DenseVector::DenseVector(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::DenseVector>(a2, v3);
  return v3;
}

void sub_19CA095B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::DenseVector::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::DenseVector::IsInitialized(CoreML::Specification::DenseVector *this)
{
  return 1;
}

uint64_t CoreML::Specification::DenseVector::ByteSizeLong(CoreML::Specification::DenseVector *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 8 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::DenseVector::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(_QWORD *)(v3 + 24);
    if (v11)
      v12 = (char *)(v11 + 8);
    else
      v12 = 0;
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, 8 * *(_DWORD *)(v3 + 16));
  }
  return this;
}

uint64_t CoreML::Specification::DenseVector::GetCachedSize(CoreML::Specification::DenseVector *this)
{
  return *((unsigned int *)this + 9);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::DenseVector>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::DenseVector>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::DenseVector>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::SparseSupportVectors::~SparseSupportVectors(CoreML::Specification::SparseSupportVectors *this)
{
  CoreML::Specification::SparseSupportVectors::~SparseSupportVectors(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D52C70;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::SparseSupportVectors::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SparseSupportVectors");
}

CoreML::Specification::SparseSupportVectors *CoreML::Specification::SparseSupportVectors::New(CoreML::Specification::SparseSupportVectors *this)
{
  return CoreML::Specification::SparseSupportVectors::New(this, 0);
}

CoreML::Specification::SparseSupportVectors *CoreML::Specification::SparseSupportVectors::New(CoreML::Specification::SparseSupportVectors *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::SparseSupportVectors *v3;

  v3 = (CoreML::Specification::SparseSupportVectors *)operator new();
  CoreML::Specification::SparseSupportVectors::SparseSupportVectors(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::SparseSupportVectors>(a2, v3);
  return v3;
}

void sub_19CA0989C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SparseSupportVectors::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(this + 32) + 8;
    do
    {
      v4 = *(_QWORD *)(v3 + 8 * v2);
      v5 = *(unsigned int *)(v4 + 24);
      if ((int)v5 >= 1)
      {
        v6 = (uint64_t *)(*(_QWORD *)(v4 + 32) + 8);
        do
        {
          v7 = *v6++;
          *(_DWORD *)(v7 + 24) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          --v5;
        }
        while (v5);
        *(_DWORD *)(v4 + 24) = 0;
      }
      ++v2;
    }
    while (v2 != v1);
    *(_DWORD *)(this + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::SparseSupportVectors::IsInitialized(CoreML::Specification::SparseSupportVectors *this)
{
  return 1;
}

uint64_t CoreML::Specification::SparseSupportVectors::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::SparseSupportVectors::GetCachedSize(CoreML::Specification::SparseSupportVectors *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::SparseSupportVectors>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseSupportVectors>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseSupportVectors>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::SparseVector::~SparseVector(CoreML::Specification::SparseVector *this)
{
  CoreML::Specification::SparseVector::~SparseVector(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D4DE10;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::SparseVector::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SparseVector");
}

CoreML::Specification::SparseVector *CoreML::Specification::SparseVector::New(CoreML::Specification::SparseVector *this)
{
  return CoreML::Specification::SparseVector::New(this, 0);
}

CoreML::Specification::SparseVector *CoreML::Specification::SparseVector::New(CoreML::Specification::SparseVector *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::SparseVector *v3;

  v3 = (CoreML::Specification::SparseVector *)operator new();
  CoreML::Specification::SparseVector::SparseVector(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::SparseVector>(a2, v3);
  return v3;
}

void sub_19CA09AB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SparseVector::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v3 = *v2++;
      *(_DWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::SparseVector::IsInitialized(CoreML::Specification::SparseVector *this)
{
  return 1;
}

uint64_t CoreML::Specification::SparseVector::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::SparseVector::GetCachedSize(CoreML::Specification::SparseVector *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::SparseVector>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseVector>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseVector>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::SparseNode::~SparseNode(CoreML::Specification::SparseNode *this)
{
  *(_QWORD *)this = &off_1E3D4CE08;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D4CE08;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::SparseNode::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SparseNode");
}

CoreML::Specification::SparseNode *CoreML::Specification::SparseNode::New(CoreML::Specification::SparseNode *this)
{
  return CoreML::Specification::SparseNode::New(this, 0);
}

CoreML::Specification::SparseNode *CoreML::Specification::SparseNode::New(CoreML::Specification::SparseNode *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::SparseNode *v3;

  v3 = (CoreML::Specification::SparseNode *)operator new();
  CoreML::Specification::SparseNode::SparseNode(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::SparseNode>(a2, v3);
  return v3;
}

void sub_19CA09CF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SparseNode::Clear(uint64_t this)
{
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::SparseNode::IsInitialized(CoreML::Specification::SparseNode *this)
{
  return 1;
}

uint64_t CoreML::Specification::SparseNode::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  signed int v6;
  double v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
    this = google::protobuf::internal::WireFormatLite::WriteInt32(1, v6, a2, a4);
  v7 = *(double *)(v5 + 16);
  if (v7 != 0.0)
    return google::protobuf::internal::WireFormatLite::WriteDouble(2, a2, v7, a3);
  return this;
}

uint64_t CoreML::Specification::SparseNode::GetCachedSize(CoreML::Specification::SparseNode *this)
{
  return *((unsigned int *)this + 7);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::SparseNode>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseNode>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseNode>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::Kernel::~Kernel(CoreML::Specification::Kernel *this)
{
  CoreML::Specification::Kernel::~Kernel(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D57B68;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::Kernel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Kernel");
}

CoreML::Specification::Kernel *CoreML::Specification::Kernel::New(CoreML::Specification::Kernel *this)
{
  return CoreML::Specification::Kernel::New(this, 0);
}

CoreML::Specification::Kernel *CoreML::Specification::Kernel::New(CoreML::Specification::Kernel *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Kernel *v3;

  v3 = (CoreML::Specification::Kernel *)operator new();
  CoreML::Specification::Kernel::Kernel(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Kernel>(a2, v3);
  return v3;
}

void sub_19CA09E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Kernel::IsInitialized(CoreML::Specification::Kernel *this)
{
  return 1;
}

uint64_t CoreML::Specification::Kernel::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 3)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 4)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::Kernel::GetCachedSize(CoreML::Specification::Kernel *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Kernel>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Kernel>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Kernel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::SigmoidKernel::~SigmoidKernel(CoreML::Specification::SigmoidKernel *this)
{
  *(_QWORD *)this = &off_1E3D4E498;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D4E498;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::SigmoidKernel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SigmoidKernel");
}

CoreML::Specification::SigmoidKernel *CoreML::Specification::SigmoidKernel::New(CoreML::Specification::SigmoidKernel *this)
{
  return CoreML::Specification::SigmoidKernel::New(this, 0);
}

CoreML::Specification::SigmoidKernel *CoreML::Specification::SigmoidKernel::New(CoreML::Specification::SigmoidKernel *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::SigmoidKernel *v3;

  v3 = (CoreML::Specification::SigmoidKernel *)operator new();
  CoreML::Specification::SigmoidKernel::SigmoidKernel(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::SigmoidKernel>(a2, v3);
  return v3;
}

void sub_19CA0A0D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SigmoidKernel::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::SigmoidKernel::IsInitialized(CoreML::Specification::SigmoidKernel *this)
{
  return 1;
}

uint64_t CoreML::Specification::SigmoidKernel::ByteSizeLong(CoreML::Specification::SigmoidKernel *this)
{
  uint64_t v1;

  v1 = 9;
  if (*((double *)this + 2) == 0.0)
    v1 = 0;
  if (*((double *)this + 3) != 0.0)
    v1 += 9;
  *((_DWORD *)this + 8) = v1;
  return v1;
}

uint64_t CoreML::Specification::SigmoidKernel::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  double v5;
  double v6;

  v4 = this;
  v5 = *(double *)(this + 16);
  if (v5 != 0.0)
    this = google::protobuf::internal::WireFormatLite::WriteDouble(1, a2, v5, a3);
  v6 = *(double *)(v4 + 24);
  if (v6 != 0.0)
    return google::protobuf::internal::WireFormatLite::WriteDouble(2, a2, v6, a3);
  return this;
}

uint64_t CoreML::Specification::SigmoidKernel::GetCachedSize(CoreML::Specification::SigmoidKernel *this)
{
  return *((unsigned int *)this + 8);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::SigmoidKernel>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::SigmoidKernel>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::SigmoidKernel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::PolyKernel::~PolyKernel(CoreML::Specification::PolyKernel *this)
{
  *(_QWORD *)this = &off_1E3D4CD70;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D4CD70;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::PolyKernel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.PolyKernel");
}

CoreML::Specification::PolyKernel *CoreML::Specification::PolyKernel::New(CoreML::Specification::PolyKernel *this)
{
  return CoreML::Specification::PolyKernel::New(this, 0);
}

CoreML::Specification::PolyKernel *CoreML::Specification::PolyKernel::New(CoreML::Specification::PolyKernel *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::PolyKernel *v3;

  v3 = (CoreML::Specification::PolyKernel *)operator new();
  CoreML::Specification::PolyKernel::PolyKernel(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::PolyKernel>(a2, v3);
  return v3;
}

void sub_19CA0A2D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40825B58B5);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::PolyKernel::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CoreML::Specification::PolyKernel::IsInitialized(CoreML::Specification::PolyKernel *this)
{
  return 1;
}

uint64_t CoreML::Specification::PolyKernel::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  signed int v6;
  double v7;
  double v8;

  v5 = this;
  v6 = *(_DWORD *)(this + 32);
  if (v6)
    this = google::protobuf::internal::WireFormatLite::WriteInt32(1, v6, a2, a4);
  v7 = *(double *)(v5 + 16);
  if (v7 != 0.0)
    this = google::protobuf::internal::WireFormatLite::WriteDouble(2, a2, v7, a3);
  v8 = *(double *)(v5 + 24);
  if (v8 != 0.0)
    return google::protobuf::internal::WireFormatLite::WriteDouble(3, a2, v8, a3);
  return this;
}

uint64_t CoreML::Specification::PolyKernel::GetCachedSize(CoreML::Specification::PolyKernel *this)
{
  return *((unsigned int *)this + 9);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::PolyKernel>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::PolyKernel>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::PolyKernel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::RBFKernel::~RBFKernel(CoreML::Specification::RBFKernel *this)
{
  *(_QWORD *)this = &off_1E3D593C0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D593C0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::RBFKernel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.RBFKernel");
}

CoreML::Specification::RBFKernel *CoreML::Specification::RBFKernel::New(CoreML::Specification::RBFKernel *this)
{
  return CoreML::Specification::RBFKernel::New(this, 0);
}

CoreML::Specification::RBFKernel *CoreML::Specification::RBFKernel::New(CoreML::Specification::RBFKernel *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::RBFKernel *v3;

  v3 = (CoreML::Specification::RBFKernel *)operator new();
  CoreML::Specification::RBFKernel::RBFKernel(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::RBFKernel>(a2, v3);
  return v3;
}

void sub_19CA0A4BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::RBFKernel::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::RBFKernel::IsInitialized(CoreML::Specification::RBFKernel *this)
{
  return 1;
}

std::string *CoreML::Specification::RBFKernel::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;
  double v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((double *)a2 + 2);
  if (v5 != 0.0)
    *(double *)&v3->__r_.__value_.__r.__words[2] = v5;
  return this;
}

uint64_t CoreML::Specification::RBFKernel::ByteSizeLong(CoreML::Specification::RBFKernel *this)
{
  uint64_t v1;

  v1 = 9;
  if (*((double *)this + 2) == 0.0)
    v1 = 0;
  *((_DWORD *)this + 6) = v1;
  return v1;
}

uint64_t CoreML::Specification::RBFKernel::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3)
{
  double v3;

  v3 = *(double *)(this + 16);
  if (v3 != 0.0)
    return google::protobuf::internal::WireFormatLite::WriteDouble(1, a2, v3, a3);
  return this;
}

uint64_t CoreML::Specification::RBFKernel::GetCachedSize(CoreML::Specification::RBFKernel *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::RBFKernel>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::RBFKernel>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::RBFKernel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

CoreML::Specification::Kernel *CoreML::Specification::Kernel::Kernel(CoreML::Specification::Kernel *this, const CoreML::Specification::Kernel *a2)
{
  uint64_t v4;
  uint64_t *v5;
  CoreML::Specification::protobuf_SVM_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  CoreML::Specification::protobuf_SVM_2eproto *v9;
  uint64_t *v10;
  CoreML::Specification::PolyKernel *v11;
  CoreML::Specification::protobuf_SVM_2eproto *v12;
  const CoreML::Specification::PolyKernel *v13;
  CoreML::Specification::SigmoidKernel *v14;
  CoreML::Specification::protobuf_SVM_2eproto *v15;
  const CoreML::Specification::SigmoidKernel *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;

  *(_QWORD *)this = &off_1E3D57B68;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 7) = 0;
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      v5 = (uint64_t *)operator new();
      v6 = CoreML::Specification::LinearKernel::LinearKernel((CoreML::Specification::LinearKernel *)v5);
      *((_QWORD *)this + 2) = v5;
      if (*((_DWORD *)a2 + 7) == 1)
      {
        v7 = (uint64_t *)*((_QWORD *)a2 + 2);
      }
      else
      {
        CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v6);
        v7 = &CoreML::Specification::_LinearKernel_default_instance_;
      }
      v17 = v7[1];
      if ((v17 & 1) != 0)
        google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v5 + 1, v17 & 0xFFFFFFFFFFFFFFFELL);
      break;
    case 2:
      CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      v8 = operator new();
      v9 = CoreML::Specification::RBFKernel::RBFKernel((CoreML::Specification::RBFKernel *)v8);
      *((_QWORD *)this + 2) = v8;
      if (*((_DWORD *)a2 + 7) == 2)
      {
        v10 = (uint64_t *)*((_QWORD *)a2 + 2);
      }
      else
      {
        CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v9);
        v10 = &CoreML::Specification::_RBFKernel_default_instance_;
      }
      v18 = v10[1];
      if ((v18 & 1) != 0)
        google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v8 + 8), v18 & 0xFFFFFFFFFFFFFFFELL);
      v19 = *((double *)v10 + 2);
      if (v19 != 0.0)
        *(double *)(v8 + 16) = v19;
      break;
    case 3:
      CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      v11 = (CoreML::Specification::PolyKernel *)operator new();
      v12 = CoreML::Specification::PolyKernel::PolyKernel(v11);
      *((_QWORD *)this + 2) = v11;
      if (*((_DWORD *)a2 + 7) == 3)
      {
        v13 = (const CoreML::Specification::PolyKernel *)*((_QWORD *)a2 + 2);
      }
      else
      {
        CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v12);
        v13 = (const CoreML::Specification::PolyKernel *)&CoreML::Specification::_PolyKernel_default_instance_;
      }
      CoreML::Specification::PolyKernel::MergeFrom((std::string *)v11, v13);
      break;
    case 4:
      CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
      *((_DWORD *)this + 7) = 4;
      v14 = (CoreML::Specification::SigmoidKernel *)operator new();
      v15 = CoreML::Specification::SigmoidKernel::SigmoidKernel(v14);
      *((_QWORD *)this + 2) = v14;
      if (*((_DWORD *)a2 + 7) == 4)
      {
        v16 = (const CoreML::Specification::SigmoidKernel *)*((_QWORD *)a2 + 2);
      }
      else
      {
        CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v15);
        v16 = (const CoreML::Specification::SigmoidKernel *)&CoreML::Specification::_SigmoidKernel_default_instance_;
      }
      CoreML::Specification::SigmoidKernel::MergeFrom((std::string *)v14, v16);
      break;
    default:
      return this;
  }
  return this;
}

void sub_19CA0A7FC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1A1AD6260](v2, 0x1081C40B7564605);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::SparseSupportVectors *CoreML::Specification::SparseSupportVectors::SparseSupportVectors(CoreML::Specification::SparseSupportVectors *this, const CoreML::Specification::SparseSupportVectors *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  signed int v9;
  signed int *v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E3D52C70;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (uint64_t *)((char *)this + 16);
  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = *((_DWORD *)a2 + 6);
  if (v6)
  {
    v7 = *((_QWORD *)a2 + 4);
    v8 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::SparseSupportVectors *)((char *)this + 16), *((_DWORD *)a2 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::SparseVector>::TypeHandler>(v5, (uint64_t **)v8, (const CoreML::Specification::SparseVector **)(v7 + 8), v6, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v9 = *((_DWORD *)this + 6) + v6;
    *((_DWORD *)this + 6) = v9;
    v10 = (signed int *)*((_QWORD *)this + 4);
    if (*v10 < v9)
      *v10 = v9;
  }
  *((_DWORD *)this + 10) = 0;
  v11 = *((_QWORD *)a2 + 1);
  if ((v11 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v11 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

void sub_19CA0A934(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::DenseSupportVectors *CoreML::Specification::DenseSupportVectors::DenseSupportVectors(CoreML::Specification::DenseSupportVectors *this, const CoreML::Specification::DenseSupportVectors *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  signed int v9;
  signed int *v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E3D51D98;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (uint64_t *)((char *)this + 16);
  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = *((_DWORD *)a2 + 6);
  if (v6)
  {
    v7 = *((_QWORD *)a2 + 4);
    v8 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::DenseSupportVectors *)((char *)this + 16), *((_DWORD *)a2 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::DenseVector>::TypeHandler>(v5, (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)v8, (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)(v7 + 8), v6, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v9 = *((_DWORD *)this + 6) + v6;
    *((_DWORD *)this + 6) = v9;
    v10 = (signed int *)*((_QWORD *)this + 4);
    if (*v10 < v9)
      *v10 = v9;
  }
  *((_DWORD *)this + 10) = 0;
  v11 = *((_QWORD *)a2 + 1);
  if ((v11 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v11 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

void sub_19CA0AA24(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CoreMLModels::Gazetteer::~Gazetteer(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  CoreML::Specification::CoreMLModels::Gazetteer::~Gazetteer(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;
  uint64_t v4;
  int v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E3D4DA80;
  v2 = *((_QWORD *)this + 2);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((__int128 *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1A1AD6260](v4, 0x1012C40EC159624);
  }
  v6 = *((_DWORD *)this + 13);
  if (v6)
  {
    if (v6 == 200)
    {
      v7 = *((_QWORD *)this + 5);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    *((_DWORD *)this + 13) = 0;
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::CoreMLModels::Gazetteer::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.Gazetteer");
}

CoreML::Specification::CoreMLModels::Gazetteer *CoreML::Specification::CoreMLModels::Gazetteer::New(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  return CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0);
}

CoreML::Specification::CoreMLModels::Gazetteer *CoreML::Specification::CoreMLModels::Gazetteer::New(CoreML::Specification::CoreMLModels::Gazetteer *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::Gazetteer *v3;

  v3 = (CoreML::Specification::CoreMLModels::Gazetteer *)operator new();
  CoreML::Specification::CoreMLModels::Gazetteer::Gazetteer(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::Gazetteer>(a2, v3);
  return v3;
}

void sub_19CA0AADC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40C43D3D65);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::Gazetteer::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *(_QWORD *)(this + 24);
  if ((__int128 *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(_DWORD *)(this + 52) == 200)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::Gazetteer::IsInitialized(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  return 1;
}

uint64_t CoreML::Specification::CoreMLModels::Gazetteer::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::Gazetteer *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  std::string *v14;
  uint64_t result;
  unsigned int *v16;
  std::string::size_type size;
  CoreML::Specification::StringVector *v18;
  char *v19;
  int v20;
  std::string *v21;
  char *v22;
  int VarintSizeAsIntFallback;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  unsigned int TagFallback;
  uint64_t Varint32Fallback;

  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v7 = *(unsigned __int8 **)a2;
      v8 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v8)
      {
        LODWORD(v10) = 0;
LABEL_45:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
        v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v11 & 0x100000000) == 0)
          goto LABEL_46;
        goto LABEL_9;
      }
      v9 = v7 + 1;
      v10 = *v7;
      if ((char)*v7 >= 1)
        break;
      if ((unint64_t)v9 >= v8)
        goto LABEL_45;
      v12 = *v9;
      if ((v10 & ~v12) < 0x80)
        goto LABEL_45;
      *(_QWORD *)a2 = v7 + 2;
      v11 = (v10 + (v12 << 7) - 128) | 0x100000000;
LABEL_9:
      v13 = v11 >> 3;
      if (v11 >> 3 > 0x63)
      {
        if (v13 == 100)
        {
          if (v11 != 34)
            goto LABEL_46;
          v21 = *v5;
          if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v21 = *v5;
          }
          if ((google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v21) & 1) == 0)
            return 0;
        }
        else
        {
          if (v13 != 200 || v11 != 66)
            goto LABEL_46;
          if (*((_DWORD *)this + 13) == 200)
          {
            v18 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 5);
          }
          else
          {
            *((_DWORD *)this + 13) = 200;
            v18 = (CoreML::Specification::StringVector *)operator new();
            CoreML::Specification::StringVector::StringVector(v18);
            *((_QWORD *)this + 5) = v18;
          }
          v22 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
          {
            VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v22;
            *(_QWORD *)a2 = v22 + 1;
          }
          v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
          v26 = *((_DWORD *)a2 + 13);
          v27 = __OFSUB__(v26--, 1);
          *((_DWORD *)a2 + 13) = v26;
          if (v26 < 0 != v27)
            return 0;
          v28 = v24;
          result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v18, (char **)a2, v25);
          if (!(_DWORD)result)
            return result;
          if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
            return 0;
        }
      }
      else if (v13 == 1)
      {
        if (v11 != 8)
          goto LABEL_46;
        v19 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          v20 = 0;
          goto LABEL_53;
        }
        v20 = *v19;
        if (*v19 < 0)
        {
LABEL_53:
          Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v20);
          *((_DWORD *)this + 8) = Varint32Fallback;
          if (Varint32Fallback < 0)
            return 0;
        }
        else
        {
          *((_DWORD *)this + 8) = v20;
          *(_QWORD *)a2 = v19 + 1;
        }
      }
      else
      {
        if (v13 != 10 || v11 != 82)
          goto LABEL_46;
        v14 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v6;
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v14);
        if (!(_DWORD)result)
          return result;
        v16 = (unsigned int *)*v6;
        if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
        {
          v16 = *(unsigned int **)v16;
          size = (*v6)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v16, size, 0, (uint64_t)"CoreML.Specification.CoreMLModels.Gazetteer.language"))return 0;
      }
    }
    *(_QWORD *)a2 = v9;
    v11 = v10 | 0x100000000;
    if ((v11 & 0x100000000) != 0)
      goto LABEL_9;
LABEL_46:
    if (!(_DWORD)v11 || (v11 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v11, a3) & 1) == 0)
      return 0;
  }
}

void sub_19CA0AE88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::Gazetteer::ByteSizeLong(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_13:
  v9 = *((_DWORD *)this + 8);
  if (v9)
    v5 += ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (*((_DWORD *)this + 13) == 200)
  {
    v10 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 5));
    v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 12) = v5;
  return v5;
}

uint64_t CoreML::Specification::CoreMLModels::Gazetteer::SerializeWithCachedSizes(CoreML::Specification::CoreMLModels::Gazetteer *this, google::protobuf::io::CodedOutputStream *a2, unsigned int a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v6 = *((unsigned int *)this + 8);
  if ((_DWORD)v6)
    google::protobuf::internal::WireFormatLite::WriteUInt32(v6, a2, a3, a4);
  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v8 = *(_QWORD *)(result + 8);
    if (!v8)
      goto LABEL_9;
    result = *(_QWORD *)result;
    goto LABEL_8;
  }
  LODWORD(v8) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_8:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v8, 1, (uint64_t)"CoreML.Specification.CoreMLModels.Gazetteer.language");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xAu, *((_QWORD *)this + 2), a2);
  }
LABEL_9:
  v9 = *((_QWORD *)this + 3);
  if ((*(char *)(v9 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v9 + 23))
      goto LABEL_12;
    goto LABEL_11;
  }
  if (*(_QWORD *)(v9 + 8))
LABEL_11:
    result = google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(0x64u, v9, a2);
LABEL_12:
  if (*((_DWORD *)this + 13) == 200)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xC8, *((_QWORD *)this + 5), a2, a4);
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::Gazetteer::GetCachedSize(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  return *((unsigned int *)this + 12);
}

void CoreML::Specification::CoreMLModels::Gazetteer::MergeFrom(CoreML::Specification::CoreMLModels::Gazetteer *this, const CoreML::Specification::CoreMLModels::Gazetteer *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  int v9;
  CoreML::Specification::StringVector *v10;
  CoreML::Specification::protobuf_DataStructures_2eproto *v11;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v12;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (__int128 *)*((_QWORD *)this + 2);
  if (v6 != (__int128 *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_19;
  }
  v8 = (__int128 *)*((_QWORD *)this + 3);
  if (v8 != (__int128 *)v7)
  {
    if (v8 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v7);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v7);
  }
LABEL_19:
  v9 = *((_DWORD *)a2 + 8);
  if (v9)
    *((_DWORD *)this + 8) = v9;
  if (*((_DWORD *)a2 + 13) == 200)
  {
    if (*((_DWORD *)this + 13) == 200)
    {
      v10 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 5);
    }
    else
    {
      *((_DWORD *)this + 13) = 200;
      v10 = (CoreML::Specification::StringVector *)operator new();
      v11 = CoreML::Specification::StringVector::StringVector(v10);
      *((_QWORD *)this + 5) = v10;
      if (*((_DWORD *)a2 + 13) != 200)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v11);
        v12 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)&CoreML::Specification::_StringVector_default_instance_;
        goto LABEL_28;
      }
    }
    v12 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((_QWORD *)a2 + 5);
LABEL_28:
    CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v10, v12);
  }
}

void sub_19CA0B214(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::Gazetteer *CoreML::Specification::CoreMLModels::Gazetteer::Gazetteer(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  *(_QWORD *)this = &off_1E3D4DA80;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::Gazetteer *)&CoreML::Specification::CoreMLModels::_Gazetteer_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  return this;
}

void sub_19CA0B294(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::Gazetteer>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::Gazetteer>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::Gazetteer>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::Normalizer::~Normalizer(CoreML::Specification::Normalizer *this)
{
  *(_QWORD *)this = &off_1E3D4CCD8;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D4CCD8;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::Normalizer::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Normalizer");
}

CoreML::Specification::Normalizer *CoreML::Specification::Normalizer::New(CoreML::Specification::Normalizer *this)
{
  return CoreML::Specification::Normalizer::New(this, 0);
}

CoreML::Specification::Normalizer *CoreML::Specification::Normalizer::New(CoreML::Specification::Normalizer *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Normalizer *v3;

  v3 = (CoreML::Specification::Normalizer *)operator new();
  CoreML::Specification::Normalizer::Normalizer(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Normalizer>(a2, v3);
  return v3;
}

void sub_19CA0B4C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Normalizer::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::Normalizer::IsInitialized(CoreML::Specification::Normalizer *this)
{
  return 1;
}

std::string *CoreML::Specification::Normalizer::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
    LODWORD(v3->__r_.__value_.__r.__words[2]) = v5;
  return this;
}

uint64_t CoreML::Specification::Normalizer::MergePartialFromCodedStream(CoreML::Specification::Normalizer *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  char *v11;
  int v12;
  uint64_t Varint32Fallback;

  do
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1])
      {
        v12 = 0;
      }
      else
      {
        v12 = *v11;
        if ((*v11 & 0x80000000) == 0)
        {
          *a2 = v11 + 1;
          goto LABEL_22;
        }
      }
      Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback((google::protobuf::io::CodedInputStream *)a2, v12);
      v12 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_22:
      *((_DWORD *)this + 4) = v12;
    }
    if ((_DWORD)v7)
      v10 = (v7 & 7) == 4;
    else
      v10 = 1;
    if (v10)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::Normalizer::ByteSizeLong(CoreML::Specification::Normalizer *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0)
      v2 = 11;
    else
      v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v2 = 0;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t CoreML::Specification::Normalizer::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  signed int v5;

  v5 = *(_DWORD *)(this + 16);
  if (v5)
    return google::protobuf::internal::WireFormatLite::WriteEnum(1, v5, a2, a4);
  return this;
}

uint64_t CoreML::Specification::Normalizer::GetCachedSize(CoreML::Specification::Normalizer *this)
{
  return *((unsigned int *)this + 5);
}

CoreML::Specification::Normalizer *CoreML::Specification::Normalizer::Normalizer(CoreML::Specification::Normalizer *this)
{
  *(_QWORD *)this = &off_1E3D4CCD8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Normalizer *)&CoreML::Specification::_Normalizer_default_instance_)
    CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  return this;
}

void sub_19CA0B6D8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Normalizer>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Normalizer>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Normalizer>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::validate<(MLModelType)610>(CoreML::Specification::protobuf_NonMaximumSuppression_2eproto *a1, uint64_t a2)
{
  CoreML::Specification::protobuf_NonMaximumSuppression_2eproto *v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  const void **v9;
  size_t v10;
  int v11;
  int v12;
  int v13;
  size_t v14;
  const void *v15;
  uint64_t v16;
  int v17;
  size_t v18;
  const void *v19;
  size_t v20;
  _BOOL4 v21;
  size_t v22;
  const void *v23;
  size_t v24;
  _BOOL4 v25;
  size_t v26;
  const void *v27;
  size_t v28;
  _BOOL4 v29;
  int v30;
  size_t v31;
  const void *v32;
  size_t v33;
  _BOOL4 v34;
  uint64_t v35;
  const void **v36;
  size_t v37;
  int v38;
  int v39;
  size_t v40;
  const void *v41;
  uint64_t v42;
  int v43;
  size_t v44;
  const void *v45;
  size_t v46;
  _BOOL4 v47;
  size_t v48;
  const void *v49;
  size_t v50;
  _BOOL4 v51;
  const void **v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  void *v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  const void **v66;
  const void **v67;
  const void **v68;
  const void **v69;
  unint64_t *inited;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  int v80;
  uint64_t *v81;
  uint64_t *v82;
  int v83;
  uint64_t *v84;
  uint64_t *v85;
  int v86;
  uint64_t *v87;
  uint64_t *v88;
  _QWORD *v89;
  const CoreML::Specification::FeatureType *v90;
  std::string *v91;
  std::string::size_type v92;
  _QWORD *v93;
  _QWORD *v94;
  const CoreML::Specification::FeatureType *v95;
  std::string *v96;
  std::string::size_type v97;
  _QWORD *v98;
  _QWORD *v99;
  const CoreML::Specification::FeatureType *v100;
  std::string *v101;
  std::string::size_type v102;
  _QWORD *v103;
  _QWORD *v104;
  const CoreML::Specification::FeatureType *v105;
  std::string *v106;
  std::string::size_type v107;
  _QWORD *v108;
  _QWORD *v109;
  const CoreML::Specification::FeatureType *v110;
  std::string *v111;
  std::string::size_type size;
  _QWORD *v113;
  _QWORD *v114;
  const CoreML::Specification::FeatureType *v115;
  std::string *v116;
  std::string::size_type v117;
  _QWORD *v118;
  _QWORD *v119;
  const CoreML::Specification::FeatureType *v120;
  std::string *v121;
  std::string::size_type v122;
  _QWORD *v123;
  _QWORD *v124;
  const CoreML::Specification::FeatureType *v125;
  std::string *v126;
  std::string::size_type v127;
  _QWORD *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  int v132;
  uint64_t *v133;
  int v134;
  int *v135;
  _QWORD *v136;
  _QWORD *v137;
  const CoreML::Specification::FeatureType *v138;
  std::string *v139;
  std::string::size_type v140;
  _QWORD *v141;
  _QWORD *v142;
  const CoreML::Specification::FeatureType *v143;
  std::string *v144;
  std::string::size_type v145;
  _QWORD *v146;
  _QWORD *v147;
  const CoreML::Specification::FeatureType *v148;
  std::string *v149;
  std::string::size_type v150;
  _QWORD *v151;
  _QWORD *v152;
  const CoreML::Specification::FeatureType *v153;
  std::string *v154;
  std::string::size_type v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  BOOL v159;
  _BOOL4 v160;
  _BOOL4 v161;
  BOOL v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t *v169;
  int v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  unsigned int *v182;
  unint64_t v183;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t *v188;
  uint64_t *v189;
  std::string *v190;
  __int128 v191;
  std::string *v192;
  __int128 v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t v197;
  unint64_t v198;
  std::string *v199;
  __int128 v200;
  std::string *v201;
  __int128 v202;
  std::string *v203;
  std::string::size_type v204;
  std::string *v205;
  __int128 v206;
  std::string *v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t *v213;
  CoreML::Specification::protobuf_NonMaximumSuppression_2eproto *v214;
  const void **v215;
  uint64_t v216;
  size_t v217;
  size_t v218;
  size_t v219;
  uint64_t v220;
  uint64_t v221;
  size_t v222;
  const void **v223;
  uint64_t v224;
  const void **v225;
  const void **v226;
  const void **v227;
  int v228;
  int v229;
  int v230;
  int v231;
  std::string v232;
  std::string v233;
  std::string v234;
  std::string v235;
  _BYTE __p[24];
  uint64_t v237;
  std::string v238;
  uint64_t v239;
  __int128 v240;
  uint64_t v241;

  v3 = a1;
  if (*(_QWORD *)(a2 + 16))
    v4 = *(uint64_t **)(a2 + 16);
  else
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_DWORD *)(a2 + 44) == 610)
  {
    v5 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(a1);
    v5 = &CoreML::Specification::_NonMaximumSuppression_default_instance_;
  }
  CoreML::Result::Result((CoreML::Result *)&v239);
  v6 = *(_DWORD *)(a2 + 24);
  LODWORD(v238.__r_.__value_.__l.__data_) = 0;
  CoreML::validateModelDescription((uint64_t)__p, (uint64_t)v4, v6, (char *)&v238);
  v7 = *(_DWORD *)__p;
  v239 = *(_QWORD *)__p;
  if (SHIBYTE(v241) < 0)
  {
    operator delete((void *)v240);
    v7 = v239;
  }
  v240 = *(_OWORD *)&__p[8];
  v241 = v237;
  if ((v7 & 0xFFFFFFEF) != 0)
  {
    *(_QWORD *)v3 = v239;
    *(_OWORD *)((char *)v3 + 8) = v240;
    *((_QWORD *)v3 + 3) = v241;
    v240 = 0uLL;
    v241 = 0;
    goto LABEL_102;
  }
  v221 = *((unsigned int *)v4 + 6);
  if ((int)v221 <= 0)
    goto LABEL_96;
  v213 = v5;
  v214 = v3;
  v8 = 0;
  v211 = (uint64_t)(v4 + 2);
  v209 = a2;
  v210 = (uint64_t)(v4 + 5);
  v212 = v4;
  v9 = (const void **)v5[2];
  v227 = (const void **)v5[3];
  v218 = *((unsigned __int8 *)v227 + 23);
  v219 = *((unsigned __int8 *)v9 + 23);
  v223 = (const void **)v5[5];
  v225 = (const void **)v5[4];
  v216 = v4[4] + 8;
  v217 = *((unsigned __int8 *)v225 + 23);
  v10 = *((unsigned __int8 *)v223 + 23);
  v11 = -1;
  v12 = -1;
  v231 = -1;
  v13 = -1;
  v215 = v9;
  do
  {
    v14 = v219;
    v15 = v9;
    if ((v219 & 0x80) != 0)
    {
      v15 = *v9;
      v14 = (size_t)v9[1];
    }
    v16 = *(_QWORD *)(*(_QWORD *)(v216 + 8 * v8) + 16);
    v17 = *(char *)(v16 + 23);
    if (v17 >= 0)
      v18 = *(unsigned __int8 *)(v16 + 23);
    else
      v18 = *(_QWORD *)(v16 + 8);
    if (v17 >= 0)
      v19 = *(const void **)(*(_QWORD *)(v216 + 8 * v8) + 16);
    else
      v19 = *(const void **)v16;
    if (v18 >= v14)
      v20 = v14;
    else
      v20 = v18;
    v21 = memcmp(v15, v19, v20) == 0 && v18 == v14;
    if (v21)
      v11 = v8;
    v22 = v218;
    v23 = v227;
    if ((v218 & 0x80) != 0)
    {
      v23 = *v227;
      v22 = (size_t)v227[1];
    }
    v230 = v11;
    if (v18 >= v22)
      v24 = v22;
    else
      v24 = v18;
    v25 = memcmp(v23, v19, v24) == 0 && v18 == v22;
    if (v25)
      v12 = v8;
    v229 = v12;
    v26 = v217;
    v27 = v225;
    if ((v217 & 0x80) != 0)
    {
      v27 = *v225;
      v26 = (size_t)v225[1];
    }
    if (v18 >= v26)
      v28 = v26;
    else
      v28 = v18;
    v29 = memcmp(v27, v19, v28) == 0 && v18 == v26;
    v30 = v231;
    if (v29)
      v30 = v8;
    v231 = v30;
    v31 = v10;
    v32 = v223;
    if ((v10 & 0x80) != 0)
    {
      v32 = *v223;
      v31 = (size_t)v223[1];
    }
    if (v18 >= v31)
      v33 = v31;
    else
      v33 = v18;
    v34 = memcmp(v32, v19, v33) == 0;
    if (v18 != v31)
      v34 = 0;
    if (!v34 && !v29 && !v25 && !v21)
    {
      std::operator+<char>();
      v53 = std::string::append(&v238, "' was not requested by any of the input feature names (e.g. confidenceInputFeatureName).");
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v53->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v214 = 9;
      std::operator+<char>();
      goto LABEL_97;
    }
    if (v34)
      v13 = v8;
    ++v8;
    v12 = v229;
    v11 = v230;
    v9 = v215;
  }
  while (v221 != v8);
  if (v230 == -1)
  {
    v3 = v214;
LABEL_96:
    std::operator+<char>();
    v55 = std::string::append(&v238, "' (as defined by confidenceInputFeatureName) to the model is not present in the model description.");
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v55->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)v3 = 10;
    std::operator+<char>();
    goto LABEL_97;
  }
  if (v229 == -1)
  {
    std::operator+<char>();
    v58 = std::string::append(&v238, "' (as defined by coordinatesInputFeatureName) to the model is not present in the model description.");
    v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v58->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)v214 = 10;
    std::operator+<char>();
  }
  else
  {
    v224 = *((unsigned int *)v212 + 12);
    if ((int)v224 <= 0)
    {
LABEL_106:
      std::operator+<char>();
      v60 = std::string::append(&v238, "' (as defined by confidenceOutputFeatureName) from the model is not present in the model description.");
      v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v60->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v214 = 10;
      std::operator+<char>();
    }
    else
    {
      v35 = 0;
      v36 = (const void **)v213[6];
      v226 = (const void **)v213[7];
      v37 = *((unsigned __int8 *)v226 + 23);
      v220 = v212[7] + 8;
      v222 = *((unsigned __int8 *)v36 + 23);
      v38 = -1;
      v39 = -1;
      do
      {
        v40 = v222;
        v41 = v36;
        if ((v222 & 0x80) != 0)
        {
          v41 = *v36;
          v40 = (size_t)v36[1];
        }
        v42 = *(_QWORD *)(*(_QWORD *)(v220 + 8 * v35) + 16);
        v43 = *(char *)(v42 + 23);
        if (v43 >= 0)
          v44 = *(unsigned __int8 *)(v42 + 23);
        else
          v44 = *(_QWORD *)(v42 + 8);
        if (v43 >= 0)
          v45 = *(const void **)(*(_QWORD *)(v220 + 8 * v35) + 16);
        else
          v45 = *(const void **)v42;
        if (v44 >= v40)
          v46 = v40;
        else
          v46 = v44;
        v47 = memcmp(v41, v45, v46) == 0 && v44 == v40;
        if (v47)
          v38 = v35;
        v228 = v38;
        v48 = v37;
        v49 = v226;
        if ((v37 & 0x80) != 0)
        {
          v49 = *v226;
          v48 = (size_t)v226[1];
        }
        if (v44 >= v48)
          v50 = v48;
        else
          v50 = v44;
        v51 = memcmp(v49, v45, v50) == 0;
        if (v44 != v48)
          v51 = 0;
        if (!v51 && !v47)
        {
          std::operator+<char>();
          v62 = std::string::append(&v238, "' was not requested by any of the output feature names (e.g. confidenceOutputFeatureName).");
          v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          *(_QWORD *)&__p[16] = *((_QWORD *)&v62->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)v214 = 9;
          std::operator+<char>();
          goto LABEL_97;
        }
        if (v51)
          v39 = v35;
        ++v35;
        v38 = v228;
      }
      while (v224 != v35);
      if (v228 == -1)
        goto LABEL_106;
      if (v39 != -1)
      {
        LODWORD(v235.__r_.__value_.__l.__data_) = 5;
        std::vector<CoreML::Specification::FeatureType::TypeCase>::vector[abi:ne180100](&v238, &v235, 1uLL);
        CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((CoreML::Result *)__p, v211, v215, (unsigned int **)&v238);
        v239 = *(_QWORD *)__p;
        if (SHIBYTE(v241) < 0)
          operator delete((void *)v240);
        v240 = *(_OWORD *)&__p[8];
        v241 = v237;
        HIBYTE(v237) = 0;
        __p[8] = 0;
        if (v238.__r_.__value_.__r.__words[0])
        {
          v238.__r_.__value_.__l.__size_ = v238.__r_.__value_.__r.__words[0];
          operator delete(v238.__r_.__value_.__l.__data_);
        }
        if ((v239 & 0xFFFFFFEF) != 0)
          goto LABEL_91;
        v52 = (const void **)v213[3];
        LODWORD(v235.__r_.__value_.__l.__data_) = 5;
        std::vector<CoreML::Specification::FeatureType::TypeCase>::vector[abi:ne180100](&v238, &v235, 1uLL);
        CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((CoreML::Result *)__p, v211, v52, (unsigned int **)&v238);
        v239 = *(_QWORD *)__p;
        if (SHIBYTE(v241) < 0)
          operator delete((void *)v240);
        v240 = *(_OWORD *)&__p[8];
        v241 = v237;
        HIBYTE(v237) = 0;
        __p[8] = 0;
        if (v238.__r_.__value_.__r.__words[0])
        {
          v238.__r_.__value_.__l.__size_ = v238.__r_.__value_.__r.__words[0];
          operator delete(v238.__r_.__value_.__l.__data_);
        }
        if ((v239 & 0xFFFFFFEF) != 0)
          goto LABEL_91;
        if ((v231 & 0x80000000) == 0)
        {
          v66 = (const void **)v213[4];
          LODWORD(v235.__r_.__value_.__l.__data_) = 2;
          std::vector<CoreML::Specification::FeatureType::TypeCase>::vector[abi:ne180100](&v238, &v235, 1uLL);
          CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((CoreML::Result *)__p, v211, v66, (unsigned int **)&v238);
          v239 = *(_QWORD *)__p;
          if (SHIBYTE(v241) < 0)
            operator delete((void *)v240);
          v240 = *(_OWORD *)&__p[8];
          v241 = v237;
          HIBYTE(v237) = 0;
          __p[8] = 0;
          if (v238.__r_.__value_.__r.__words[0])
          {
            v238.__r_.__value_.__l.__size_ = v238.__r_.__value_.__r.__words[0];
            operator delete(v238.__r_.__value_.__l.__data_);
          }
          if ((v239 & 0xFFFFFFEF) != 0)
            goto LABEL_91;
        }
        if ((v13 & 0x80000000) == 0)
        {
          v67 = (const void **)v213[5];
          LODWORD(v235.__r_.__value_.__l.__data_) = 2;
          std::vector<CoreML::Specification::FeatureType::TypeCase>::vector[abi:ne180100](&v238, &v235, 1uLL);
          CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((CoreML::Result *)__p, v211, v67, (unsigned int **)&v238);
          v239 = *(_QWORD *)__p;
          if (SHIBYTE(v241) < 0)
            operator delete((void *)v240);
          v240 = *(_OWORD *)&__p[8];
          v241 = v237;
          HIBYTE(v237) = 0;
          __p[8] = 0;
          if (v238.__r_.__value_.__r.__words[0])
          {
            v238.__r_.__value_.__l.__size_ = v238.__r_.__value_.__r.__words[0];
            operator delete(v238.__r_.__value_.__l.__data_);
          }
          if ((v239 & 0xFFFFFFEF) != 0)
          {
LABEL_91:
            *(_QWORD *)v214 = v239;
            *(_OWORD *)((char *)v214 + 8) = v240;
            *((_QWORD *)v214 + 3) = v241;
LABEL_92:
            v240 = 0uLL;
            v241 = 0;
            goto LABEL_102;
          }
        }
        v68 = (const void **)v213[6];
        LODWORD(v235.__r_.__value_.__l.__data_) = 5;
        std::vector<CoreML::Specification::FeatureType::TypeCase>::vector[abi:ne180100](&v238, &v235, 1uLL);
        CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((CoreML::Result *)__p, v210, v68, (unsigned int **)&v238);
        v239 = *(_QWORD *)__p;
        if (SHIBYTE(v241) < 0)
          operator delete((void *)v240);
        v240 = *(_OWORD *)&__p[8];
        v241 = v237;
        HIBYTE(v237) = 0;
        __p[8] = 0;
        if (v238.__r_.__value_.__r.__words[0])
        {
          v238.__r_.__value_.__l.__size_ = v238.__r_.__value_.__r.__words[0];
          operator delete(v238.__r_.__value_.__l.__data_);
        }
        if ((v239 & 0xFFFFFFEF) != 0)
        {
          *(_QWORD *)v214 = v239;
          *(_OWORD *)((char *)v214 + 8) = v240;
          *((_QWORD *)v214 + 3) = v241;
          goto LABEL_92;
        }
        v69 = (const void **)v213[7];
        LODWORD(v235.__r_.__value_.__l.__data_) = 5;
        std::vector<CoreML::Specification::FeatureType::TypeCase>::vector[abi:ne180100](&v238, &v235, 1uLL);
        CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((CoreML::Result *)__p, v210, v69, (unsigned int **)&v238);
        v239 = *(_QWORD *)__p;
        if (SHIBYTE(v241) < 0)
          operator delete((void *)v240);
        v240 = *(_OWORD *)&__p[8];
        v241 = v237;
        HIBYTE(v237) = 0;
        __p[8] = 0;
        inited = (unint64_t *)v238.__r_.__value_.__r.__words[0];
        if (v238.__r_.__value_.__r.__words[0])
        {
          v238.__r_.__value_.__l.__size_ = v238.__r_.__value_.__r.__words[0];
          operator delete(v238.__r_.__value_.__l.__data_);
        }
        if ((v239 & 0xFFFFFFEF) != 0)
          goto LABEL_132;
        v71 = *((double *)v213 + 8);
        if (v71 < 0.0 || v71 > 1.0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "iouThreshold must be a value between 0.0 and 1.0.");
          *(_QWORD *)v214 = 13;
          std::operator+<char>();
          goto LABEL_138;
        }
        if (*((double *)v213 + 9) < 0.0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "confidenceThreshold must be a non-negative value. If you do not want to eliminate any predictions based on confidence, set it to 0.0.");
          *(_QWORD *)v214 = 13;
          std::operator+<char>();
          goto LABEL_138;
        }
        v72 = v212[4] + 8;
        v73 = *(_QWORD *)(v72 + 8 * v230);
        v74 = *(_QWORD *)(v72 + 8 * v229);
        v75 = v212[7] + 8;
        v76 = *(_QWORD *)(v75 + 8 * v228);
        v77 = *(_QWORD *)(v75 + 8 * v39);
        v78 = *(uint64_t **)(v73 + 32);
        if (!v78)
          v78 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v78 + 9) == 5)
        {
          v79 = (uint64_t *)v78[3];
        }
        else
        {
          inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
          v79 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        v80 = *((_DWORD *)v79 + 9);
        v81 = *(uint64_t **)(v76 + 32);
        if (!v81)
          v81 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v81 + 9) == 5)
        {
          v82 = (uint64_t *)v81[3];
        }
        else
        {
          inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
          v82 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        v83 = *((_DWORD *)v82 + 9);
        v84 = *(uint64_t **)(v74 + 32);
        if (!v84)
          v84 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v84 + 9) == 5)
        {
          v85 = (uint64_t *)v84[3];
        }
        else
        {
          inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
          v85 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        v86 = *((_DWORD *)v85 + 9);
        v87 = *(uint64_t **)(v77 + 32);
        if (!v87)
          v87 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v87 + 9) == 5)
        {
          v88 = (uint64_t *)v87[3];
        }
        else
        {
          inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
          v88 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        if (v80 != v83 || v80 != v86 || v80 != *((_DWORD *)v88 + 9))
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'confidence' and 'coordinates' must use a same element type, but ", 65);
          v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'input confidence' is ", 22);
          if (*(_QWORD *)(v73 + 32))
            v110 = *(const CoreML::Specification::FeatureType **)(v73 + 32);
          else
            v110 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
          CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v235, v110);
          CoreML::FeatureType::toString(&v238, (uint64_t)&v235);
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v111 = &v238;
          else
            v111 = (std::string *)v238.__r_.__value_.__r.__words[0];
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v238.__r_.__value_.__r.__words[2]);
          else
            size = v238.__r_.__value_.__l.__size_;
          v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)v111, size);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)", ", 2);
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v238.__r_.__value_.__l.__data_);
          std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v235);
          v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'output confidence' is ", 23);
          if (*(_QWORD *)(v76 + 32))
            v115 = *(const CoreML::Specification::FeatureType **)(v76 + 32);
          else
            v115 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
          CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v235, v115);
          CoreML::FeatureType::toString(&v238, (uint64_t)&v235);
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v116 = &v238;
          else
            v116 = (std::string *)v238.__r_.__value_.__r.__words[0];
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v117 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
          else
            v117 = v238.__r_.__value_.__l.__size_;
          v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)v116, v117);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)", ", 2);
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v238.__r_.__value_.__l.__data_);
          std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v235);
          v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'input coordinates' are ", 24);
          if (*(_QWORD *)(v74 + 32))
            v120 = *(const CoreML::Specification::FeatureType **)(v74 + 32);
          else
            v120 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
          CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v235, v120);
          CoreML::FeatureType::toString(&v238, (uint64_t)&v235);
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v121 = &v238;
          else
            v121 = (std::string *)v238.__r_.__value_.__r.__words[0];
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v122 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
          else
            v122 = v238.__r_.__value_.__l.__size_;
          v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)v121, v122);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)", ", 2);
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v238.__r_.__value_.__l.__data_);
          std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v235);
          v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"and 'output coordinates' are ", 29);
          if (*(_QWORD *)(v77 + 32))
            v125 = *(const CoreML::Specification::FeatureType **)(v77 + 32);
          else
            v125 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
          CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v235, v125);
          CoreML::FeatureType::toString(&v238, (uint64_t)&v235);
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v126 = &v238;
          else
            v126 = (std::string *)v238.__r_.__value_.__r.__words[0];
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v127 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
          else
            v127 = v238.__r_.__value_.__l.__size_;
          v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)v126, v127);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)".", 1);
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v238.__r_.__value_.__l.__data_);
          goto LABEL_255;
        }
        if (*(int *)(v209 + 24) < 5)
        {
          if (v80 != 65600)
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"The element data type of 'confidence' and 'coordinates' must be MultiArray<DOUBLE> for model specification version earlier than ", 128);
            v136 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)", but ", 6);
            v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'input confidence' is ", 22);
            if (*(_QWORD *)(v73 + 32))
              v138 = *(const CoreML::Specification::FeatureType **)(v73 + 32);
            else
              v138 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
            CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v235, v138);
            CoreML::FeatureType::toString(&v238, (uint64_t)&v235);
            if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v139 = &v238;
            else
              v139 = (std::string *)v238.__r_.__value_.__r.__words[0];
            if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v140 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
            else
              v140 = v238.__r_.__value_.__l.__size_;
            v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)v139, v140);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)", ", 2);
            if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v238.__r_.__value_.__l.__data_);
            std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v235);
            v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'output confidence' is ", 23);
            if (*(_QWORD *)(v76 + 32))
              v143 = *(const CoreML::Specification::FeatureType **)(v76 + 32);
            else
              v143 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
            CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v235, v143);
            CoreML::FeatureType::toString(&v238, (uint64_t)&v235);
            if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v144 = &v238;
            else
              v144 = (std::string *)v238.__r_.__value_.__r.__words[0];
            if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v145 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
            else
              v145 = v238.__r_.__value_.__l.__size_;
            v146 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)v144, v145);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)", ", 2);
            if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v238.__r_.__value_.__l.__data_);
            std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v235);
            v147 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'input coordinates' are ", 24);
            if (*(_QWORD *)(v74 + 32))
              v148 = *(const CoreML::Specification::FeatureType **)(v74 + 32);
            else
              v148 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
            CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v235, v148);
            CoreML::FeatureType::toString(&v238, (uint64_t)&v235);
            if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v149 = &v238;
            else
              v149 = (std::string *)v238.__r_.__value_.__r.__words[0];
            if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v150 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
            else
              v150 = v238.__r_.__value_.__l.__size_;
            v151 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)v149, v150);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)", ", 2);
            if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v238.__r_.__value_.__l.__data_);
            std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v235);
            v152 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"and 'output coordinates' are ", 29);
            if (*(_QWORD *)(v77 + 32))
              v153 = *(const CoreML::Specification::FeatureType **)(v77 + 32);
            else
              v153 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
            CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v235, v153);
            CoreML::FeatureType::toString(&v238, (uint64_t)&v235);
            if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v154 = &v238;
            else
              v154 = (std::string *)v238.__r_.__value_.__r.__words[0];
            if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v155 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
            else
              v155 = v238.__r_.__value_.__l.__size_;
            v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)v154, v155);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)". ", 2);
            if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v238.__r_.__value_.__l.__data_);
            std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v235);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"To enable MultiArray<FLOAT32>, use the model specification version ", 67);
            v157 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)" or later.", 10);
            std::stringbuf::str();
            *(_QWORD *)v214 = 13;
            std::operator+<char>();
            goto LABEL_256;
          }
        }
        else if (v80 != 65568 && v80 != 65600)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"The element data type of 'confidence' and 'coordinates' must be either MultiArray<DOUBLE> or MultiArray<FLOAT32>, but ", 118);
          v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'input confidence' is ", 22);
          if (*(_QWORD *)(v73 + 32))
            v90 = *(const CoreML::Specification::FeatureType **)(v73 + 32);
          else
            v90 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
          CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v235, v90);
          CoreML::FeatureType::toString(&v238, (uint64_t)&v235);
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v91 = &v238;
          else
            v91 = (std::string *)v238.__r_.__value_.__r.__words[0];
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v92 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
          else
            v92 = v238.__r_.__value_.__l.__size_;
          v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)v91, v92);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)", ", 2);
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v238.__r_.__value_.__l.__data_);
          std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v235);
          v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'output confidence' is ", 23);
          if (*(_QWORD *)(v76 + 32))
            v95 = *(const CoreML::Specification::FeatureType **)(v76 + 32);
          else
            v95 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
          CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v235, v95);
          CoreML::FeatureType::toString(&v238, (uint64_t)&v235);
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v96 = &v238;
          else
            v96 = (std::string *)v238.__r_.__value_.__r.__words[0];
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v97 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
          else
            v97 = v238.__r_.__value_.__l.__size_;
          v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)v96, v97);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)", ", 2);
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v238.__r_.__value_.__l.__data_);
          std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v235);
          v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'input coordinates' are ", 24);
          if (*(_QWORD *)(v74 + 32))
            v100 = *(const CoreML::Specification::FeatureType **)(v74 + 32);
          else
            v100 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
          CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v235, v100);
          CoreML::FeatureType::toString(&v238, (uint64_t)&v235);
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v101 = &v238;
          else
            v101 = (std::string *)v238.__r_.__value_.__r.__words[0];
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v102 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
          else
            v102 = v238.__r_.__value_.__l.__size_;
          v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v101, v102);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)", ", 2);
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v238.__r_.__value_.__l.__data_);
          std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v235);
          v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"and 'output coordinates' are ", 29);
          if (*(_QWORD *)(v77 + 32))
            v105 = *(const CoreML::Specification::FeatureType **)(v77 + 32);
          else
            v105 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
          CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v235, v105);
          CoreML::FeatureType::toString(&v238, (uint64_t)&v235);
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v106 = &v238;
          else
            v106 = (std::string *)v238.__r_.__value_.__r.__words[0];
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v107 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
          else
            v107 = v238.__r_.__value_.__l.__size_;
          v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)v106, v107);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)".", 1);
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v238.__r_.__value_.__l.__data_);
LABEL_255:
          std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v235);
          std::stringbuf::str();
          *(_QWORD *)v214 = 13;
          std::operator+<char>();
LABEL_256:
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v238.__r_.__value_.__l.__data_);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)__p);
          goto LABEL_102;
        }
        v129 = *(uint64_t **)(v76 + 32);
        if (v129)
          v130 = *(uint64_t **)(v76 + 32);
        else
          v130 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v130 + 9) == 5)
        {
          v131 = (uint64_t *)v130[3];
        }
        else
        {
          inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
          v129 = *(uint64_t **)(v76 + 32);
          v131 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        v132 = *((_DWORD *)v131 + 4);
        if (!v129)
          v129 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v129 + 9) == 5)
        {
          v133 = (uint64_t *)v129[3];
        }
        else
        {
          inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
          v133 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        v134 = *((_DWORD *)v133 + 15);
        if (v134 == 31)
        {
          v135 = (int *)(v133[5] + 24);
        }
        else
        {
          if (v134 != 21)
          {
            v158 = 0;
LABEL_322:
            v159 = v132 == 0;
            v160 = v158 == 2 && v132 == 0;
            if (v132 == 2)
              v159 = 1;
            if (v158)
              v161 = 0;
            else
              v161 = v132 == 2;
            if (v158)
              v162 = 0;
            else
              v162 = v159;
            if (!v162 && !v160)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "If shape information is provided for confidence output, 2 dimensions must be specified using either shape (deprecated) or allowedShapes.");
              *(_QWORD *)v214 = 13;
              std::operator+<char>();
              goto LABEL_138;
            }
            if (!v161)
              goto LABEL_348;
            v163 = *(uint64_t **)(v76 + 32);
            if (!v163)
              v163 = &CoreML::Specification::_FeatureType_default_instance_;
            if (*((_DWORD *)v163 + 9) == 5)
            {
              v164 = (uint64_t *)v163[3];
            }
            else
            {
              inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
              v164 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
            }
            v165 = *(_QWORD *)(v164[3] + 8);
            v166 = *(uint64_t **)(v77 + 32);
            if (!v166)
              v166 = &CoreML::Specification::_FeatureType_default_instance_;
            if (*((_DWORD *)v166 + 9) == 5)
            {
              v167 = (uint64_t *)v166[3];
            }
            else
            {
              inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
              v167 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
            }
            if (v165 != *(_QWORD *)(v167[3] + 8))
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "Confidence and coordinates output shapes must be consistent (must have the same size along dimension 0).");
              *(_QWORD *)v214 = 13;
              std::operator+<char>();
            }
            else
            {
LABEL_348:
              if (!v160)
                goto LABEL_381;
              v168 = *(uint64_t **)(v76 + 32);
              if (!v168)
                v168 = &CoreML::Specification::_FeatureType_default_instance_;
              if (*((_DWORD *)v168 + 9) == 5)
              {
                v169 = (uint64_t *)v168[3];
              }
              else
              {
                inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                v169 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
              }
              v170 = *((_DWORD *)v169 + 15);
              v171 = *(uint64_t **)(v77 + 32);
              if (!v171)
                v171 = &CoreML::Specification::_FeatureType_default_instance_;
              if (*((_DWORD *)v171 + 9) == 5)
              {
                v172 = (uint64_t *)v171[3];
              }
              else
              {
                inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                v172 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
              }
              if (v170 == 31 && *((_DWORD *)v172 + 15) == 31)
              {
                v173 = *(uint64_t **)(v76 + 32);
                if (!v173)
                  v173 = &CoreML::Specification::_FeatureType_default_instance_;
                if (*((_DWORD *)v173 + 9) == 5)
                {
                  v174 = (uint64_t *)v173[3];
                }
                else
                {
                  inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                  v174 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
                }
                if (*((_DWORD *)v174 + 15) == 31)
                {
                  v175 = (uint64_t *)v174[5];
                }
                else
                {
                  inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                  v175 = &CoreML::Specification::_ArrayFeatureType_ShapeRange_default_instance_;
                }
                v176 = *(uint64_t **)(v76 + 32);
                if (!v176)
                  v176 = &CoreML::Specification::_FeatureType_default_instance_;
                if (*((_DWORD *)v176 + 9) == 5)
                {
                  v177 = (uint64_t *)v176[3];
                }
                else
                {
                  inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                  v177 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
                }
                if (*((_DWORD *)v177 + 15) == 31)
                {
                  v178 = (uint64_t *)v177[5];
                }
                else
                {
                  inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                  v178 = &CoreML::Specification::_ArrayFeatureType_ShapeRange_default_instance_;
                }
                v179 = *(_QWORD *)(v175[4] + 8);
                v180 = *(_QWORD *)(v178[4] + 8);
                if (*(_QWORD *)(v179 + 16) == *(_QWORD *)(v180 + 16)
                  && *(_QWORD *)(v179 + 24) == *(_QWORD *)(v180 + 24))
                {
LABEL_381:
                  v181 = *((_DWORD *)v213 + 26);
                  if (v181 == 100)
                  {
                    v182 = (unsigned int *)(v213[11] + 24);
                  }
                  else
                  {
                    if (v181 != 101)
                      goto LABEL_132;
                    v182 = (unsigned int *)(v213[11] + 16);
                  }
                  v183 = *v182;
                  if ((int)v183 > 0 && v161)
                  {
                    v185 = *(uint64_t **)(v76 + 32);
                    if (!v185)
                      v185 = &CoreML::Specification::_FeatureType_default_instance_;
                    if (*((_DWORD *)v185 + 9) == 5)
                    {
                      v186 = (uint64_t *)v185[3];
                    }
                    else
                    {
                      inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                      v186 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
                    }
                    if (*(_QWORD *)(v186[3] + 16) != v183)
                    {
                      std::to_string(&v233, v183);
                      v190 = std::string::insert(&v233, 0, "Number of classes is not consistent for class labels (");
                      v191 = *(_OWORD *)&v190->__r_.__value_.__l.__data_;
                      v234.__r_.__value_.__r.__words[2] = v190->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v191;
                      v190->__r_.__value_.__l.__size_ = 0;
                      v190->__r_.__value_.__r.__words[2] = 0;
                      v190->__r_.__value_.__r.__words[0] = 0;
                      v192 = std::string::append(&v234, ") and dimension 1 of output confidence shape (");
                      v193 = *(_OWORD *)&v192->__r_.__value_.__l.__data_;
                      v235.__r_.__value_.__r.__words[2] = v192->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v193;
                      v192->__r_.__value_.__l.__size_ = 0;
                      v192->__r_.__value_.__r.__words[2] = 0;
                      v192->__r_.__value_.__r.__words[0] = 0;
                      v194 = *(uint64_t **)(v76 + 32);
                      if (!v194)
                        v194 = &CoreML::Specification::_FeatureType_default_instance_;
                      if (*((_DWORD *)v194 + 9) == 5)
                      {
                        v195 = (uint64_t *)v194[3];
                      }
                      else
                      {
                        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v192);
                        v195 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
                      }
                      std::to_string(&v232, *(_QWORD *)(v195[3] + 16));
                      if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v203 = &v232;
                      else
                        v203 = (std::string *)v232.__r_.__value_.__r.__words[0];
                      if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v204 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
                      else
                        v204 = v232.__r_.__value_.__l.__size_;
                      v205 = std::string::append(&v235, (const std::string::value_type *)v203, v204);
                      v206 = *(_OWORD *)&v205->__r_.__value_.__l.__data_;
                      v238.__r_.__value_.__r.__words[2] = v205->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v206;
                      v205->__r_.__value_.__l.__size_ = 0;
                      v205->__r_.__value_.__r.__words[2] = 0;
                      v205->__r_.__value_.__r.__words[0] = 0;
                      v207 = std::string::append(&v238, ")");
                      v208 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
                      *(_QWORD *)&__p[16] = *((_QWORD *)&v207->__r_.__value_.__l + 2);
                      *(_OWORD *)__p = v208;
                      v207->__r_.__value_.__l.__size_ = 0;
                      v207->__r_.__value_.__r.__words[2] = 0;
                      v207->__r_.__value_.__r.__words[0] = 0;
                      *(_QWORD *)v214 = 13;
                      std::operator+<char>();
                      if ((__p[23] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
                      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v238.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v232.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v235.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v234.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                      {
                        v57 = (void *)v233.__r_.__value_.__r.__words[0];
                        goto LABEL_101;
                      }
                      goto LABEL_102;
                    }
                  }
                  if ((int)v183 > 0 && v160)
                  {
                    v188 = *(uint64_t **)(v76 + 32);
                    if (!v188)
                      v188 = &CoreML::Specification::_FeatureType_default_instance_;
                    if (*((_DWORD *)v188 + 9) == 5)
                    {
                      v189 = (uint64_t *)v188[3];
                    }
                    else
                    {
                      inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                      v189 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
                    }
                    if (*((_DWORD *)v189 + 15) == 31)
                    {
                      v196 = (uint64_t *)v189[5];
                    }
                    else
                    {
                      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                      v196 = &CoreML::Specification::_ArrayFeatureType_ShapeRange_default_instance_;
                    }
                    v197 = *(_QWORD *)(v196[4] + 16);
                    if (*(_QWORD *)(v197 + 16) > v183
                      || (v198 = *(_QWORD *)(v197 + 24), (v198 & 0x8000000000000000) == 0) && v198 < v183)
                    {
                      std::to_string(&v235, v183);
                      v199 = std::string::insert(&v235, 0, "Number of classes is not consistent for class labels (");
                      v200 = *(_OWORD *)&v199->__r_.__value_.__l.__data_;
                      v238.__r_.__value_.__r.__words[2] = v199->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v200;
                      v199->__r_.__value_.__l.__size_ = 0;
                      v199->__r_.__value_.__r.__words[2] = 0;
                      v199->__r_.__value_.__r.__words[0] = 0;
                      v201 = std::string::append(&v238, ") and dimension 1 of output confidence shape range");
                      v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
                      *(_QWORD *)&__p[16] = *((_QWORD *)&v201->__r_.__value_.__l + 2);
                      *(_OWORD *)__p = v202;
                      v201->__r_.__value_.__l.__size_ = 0;
                      v201->__r_.__value_.__r.__words[2] = 0;
                      v201->__r_.__value_.__r.__words[0] = 0;
                      *(_QWORD *)v214 = 13;
                      std::operator+<char>();
                      if ((__p[23] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
                      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v238.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
                      {
                        v57 = (void *)v235.__r_.__value_.__r.__words[0];
                        goto LABEL_101;
                      }
                      goto LABEL_102;
                    }
                  }
LABEL_132:
                  *(_QWORD *)v214 = v239;
                  *(_OWORD *)((char *)v214 + 8) = v240;
                  *((_QWORD *)v214 + 3) = v241;
                  v240 = 0uLL;
                  v241 = 0;
                  goto LABEL_102;
                }
                std::string::basic_string[abi:ne180100]<0>(__p, "Confidence and coordinates output shapes must be consistent (must have the same range of sizes along dimension 0).");
                *(_QWORD *)v214 = 13;
                std::operator+<char>();
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(__p, "Confidence and coordinates output shapes fexibility must both be ranges");
                *(_QWORD *)v214 = 13;
                std::operator+<char>();
              }
            }
LABEL_138:
            if ((__p[23] & 0x80000000) != 0)
            {
              v57 = *(void **)__p;
              goto LABEL_101;
            }
            goto LABEL_102;
          }
          v135 = (int *)(*(_QWORD *)(*(_QWORD *)(v133[5] + 32) + 8) + 16);
        }
        v158 = *v135;
        goto LABEL_322;
      }
      std::operator+<char>();
      v64 = std::string::append(&v238, "' (as defined by coordinatesOutputFeatureName) from the model is not present in the model description.");
      v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v64->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v214 = 10;
      std::operator+<char>();
    }
  }
LABEL_97:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
  {
    v57 = (void *)v238.__r_.__value_.__r.__words[0];
LABEL_101:
    operator delete(v57);
  }
LABEL_102:
  if (SHIBYTE(v241) < 0)
    operator delete((void *)v240);
}

void sub_19CA0D10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a58 < 0)
    operator delete(__p);
  if (*(char *)(v58 - 121) < 0)
    operator delete(*(void **)(v58 - 144));
  if (a32 < 0)
    operator delete(a27);
  if (a51 < 0)
    operator delete(a46);
  if (a44 < 0)
    operator delete(a39);
  if (a38 < 0)
    operator delete(a33);
  if (*(char *)(v58 - 89) < 0)
    operator delete(*(void **)(v58 - 112));
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<CoreML::Specification::FeatureType::TypeCase>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  size_t v6;
  char *v7;
  char *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v6 = 4 * a3;
    v7 = (char *)operator new(4 * a3);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[4 * a3];
    a1[2] = v8;
    memmove(v7, a2, v6);
    a1[1] = v8;
  }
  return a1;
}

void sub_19CA0D498(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::Specification::StringToInt64Map::~StringToInt64Map(CoreML::Specification::StringToInt64Map *this)
{
  *(_QWORD *)this = &off_1E3D505D8;
  google::protobuf::Map<std::string,long long>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D505D8;
  google::protobuf::Map<std::string,long long>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::StringToInt64Map::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.StringToInt64Map");
}

CoreML::Specification::StringToInt64Map *CoreML::Specification::StringToInt64Map::New(CoreML::Specification::StringToInt64Map *this)
{
  return CoreML::Specification::StringToInt64Map::New(this, 0);
}

CoreML::Specification::StringToInt64Map *CoreML::Specification::StringToInt64Map::New(CoreML::Specification::StringToInt64Map *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::StringToInt64Map *v3;

  v3 = (CoreML::Specification::StringToInt64Map *)operator new();
  CoreML::Specification::StringToInt64Map::StringToInt64Map(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::StringToInt64Map>(a2, v3);
  return v3;
}

void sub_19CA0D59C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::StringToInt64Map::Clear(CoreML::Specification::StringToInt64Map *this)
{
  google::protobuf::Map<std::string,long long>::clear((_QWORD *)this + 3);
}

uint64_t CoreML::Specification::StringToInt64Map::IsInitialized(CoreML::Specification::StringToInt64Map *this)
{
  return 1;
}

uint64_t CoreML::Specification::StringToInt64Map::MergePartialFromCodedStream(CoreML::Specification::StringToInt64Map *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::Arena **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int v12;
  char *v13;
  int VarintSizeAsIntFallback;
  __n128 v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  unsigned __int8 *v24;
  unint64_t Varint64Fallback;
  char *v26;
  uint64_t v27;
  __int128 *v28;
  int v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  google::protobuf::Arena **v33;
  _QWORD *v34;
  _DWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  unsigned int *p_p;
  int v40;
  _BOOL4 v41;
  google::protobuf::Arena **v43;
  _QWORD *v44;
  std::string __p;
  google::protobuf::Arena **v46;
  _DWORD *v47;

  v4 = (google::protobuf::Arena **)((char *)this + 16);
  v5 = (_QWORD *)((char *)this + 24);
  while (1)
  {
    v6 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
    {
      LODWORD(v7) = 0;
    }
    else
    {
      v7 = *v6;
      if (*v6 >= 1)
      {
        *(_QWORD *)a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_12;
        goto LABEL_8;
      }
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
    v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v8 & 0x100000000) == 0)
      goto LABEL_12;
LABEL_8:
    if (v8 == 10 && (v8 & 0xFFFFFFF8) == 8)
    {
      v43 = v4;
      v44 = v5;
      memset(&__p, 0, sizeof(__p));
      v47 = 0;
      v13 = *(char **)a2;
      if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && (*v13 & 0x80000000) == 0)
      {
        VarintSizeAsIntFallback = *v13;
        *(_QWORD *)a2 = v13 + 1;
        goto LABEL_24;
      }
      VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
      if (VarintSizeAsIntFallback < 0)
        goto LABEL_50;
LABEL_24:
      v16 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v17 = *((_DWORD *)a2 + 13);
      v18 = __OFSUB__(v17--, 1);
      *((_DWORD *)a2 + 13) = v17;
      if (v17 < 0 == v18)
      {
        v19 = v16;
        v20 = *(char **)a2;
        if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && *v20 == 10)
        {
          *(_QWORD *)a2 = v20 + 1;
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, &__p))
            goto LABEL_50;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) >= 1 && **(_BYTE **)a2 == 16)
          {
            v21 = *(_QWORD *)v44[2];
            v46 = google::protobuf::Map<std::string,long long>::operator[]((uint64_t)v44, (uint64_t)&__p);
            if (v21 != *(_QWORD *)v44[2])
            {
              google::protobuf::io::CodedInputStream::Skip(a2, 1u);
              v22 = v46;
              v24 = *(unsigned __int8 **)a2;
              v23 = (char *)*((_QWORD *)a2 + 1);
              if (*(_QWORD *)a2 >= (unint64_t)v23 || (char)*v24 < 0)
              {
                Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
                if ((v31 & 1) != 0)
                {
                  v26 = *(char **)a2;
                  v23 = (char *)*((_QWORD *)a2 + 1);
                  goto LABEL_52;
                }
                v15.n128_f64[0] = google::protobuf::Map<std::string,long long>::erase(v44, (unsigned __int8 *)&__p);
                goto LABEL_50;
              }
              Varint64Fallback = *v24;
              v26 = (char *)(v24 + 1);
              *(_QWORD *)a2 = v26;
LABEL_52:
              *v22 = Varint64Fallback;
              if (v26 == v23 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                *((_BYTE *)a2 + 36) = 1;
LABEL_65:
                if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v19))
                {
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    p_p = (unsigned int *)&__p;
                  else
                    p_p = (unsigned int *)__p.__r_.__value_.__r.__words[0];
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                  else
                    v40 = __p.__r_.__value_.__r.__words[1];
                  v41 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v40, 0, (uint64_t)"CoreML.Specification.StringToInt64Map.MapEntry.key");
                  v30 = v41;
                  if (v41)
                    v12 = 0;
                  else
                    v12 = 6;
                  goto LABEL_75;
                }
                goto LABEL_50;
              }
              v32 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::NewEntry(*v43);
              if (v47 != (_DWORD *)v32)
              {
                if (v47)
                  (*(void (**)(void))(*(_QWORD *)v47 + 8))();
                v47 = (_DWORD *)v32;
              }
              v33 = v46;
              v34 = v44;
              *(_DWORD *)(v32 + 40) |= 2u;
              *(_QWORD *)(v32 + 24) = *v33;
              google::protobuf::Map<std::string,long long>::erase(v34, (unsigned __int8 *)&__p);
              v35 = v47;
              v47[10] |= 1u;
              v36 = (uint64_t *)(v35 + 4);
              v37 = *((_QWORD *)v35 + 2);
              if ((__int128 *)v37 == &google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)v35 + 2, *((google::protobuf::Arena ***)v35 + 4), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
                v37 = *v36;
              }
              if (*(char *)(v37 + 23) < 0)
                operator delete(*(void **)v37);
              v38 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(_QWORD *)(v37 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)v37 = v38;
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
              __p.__r_.__value_.__s.__data_[0] = 0;
              v29 = (*(uint64_t (**)(_DWORD *, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v47 + 88))(v47, a2);
              if (v29)
                google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::Map<std::string,long long>>::UseKeyAndValueFromEntry((uint64_t)&v43);
              if (!(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v47 + 40))(v47))
              {
LABEL_64:
                if (v29)
                  goto LABEL_65;
                goto LABEL_50;
              }
LABEL_46:
              v47 = 0;
              if ((v29 & 1) != 0)
                goto LABEL_65;
              v30 = 0;
              v12 = 6;
LABEL_77:
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (!v30)
                goto LABEL_18;
              goto LABEL_17;
            }
          }
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          memset(&__p, 0, sizeof(__p));
        }
        v27 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::NewEntry(*v43);
        if (v47 != (_DWORD *)v27)
        {
          if (v47)
            (*(void (**)(void))(*(_QWORD *)v47 + 8))();
          v47 = (_DWORD *)v27;
        }
        v28 = *(__int128 **)(v27 + 16);
        *(_DWORD *)(v27 + 40) |= 1u;
        if (v28 == &google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v27 + 16), *(google::protobuf::Arena ***)(v27 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v28 = *(__int128 **)(v27 + 16);
        }
        std::string::operator=((std::string *)v28, &__p);
        v29 = (*(uint64_t (**)(_DWORD *, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v47 + 88))(v47, a2);
        if (v29)
          google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::Map<std::string,long long>>::UseKeyAndValueFromEntry((uint64_t)&v43);
        if (!(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v47 + 40))(v47))
          goto LABEL_64;
        goto LABEL_46;
      }
LABEL_50:
      v30 = 0;
      v12 = 6;
LABEL_75:
      if (v47)
        (*(void (**)(_DWORD *, __n128))(*(_QWORD *)v47 + 8))(v47, v15);
      goto LABEL_77;
    }
LABEL_12:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3))return 0;
LABEL_17:
    v12 = 0;
LABEL_18:
    if (v12)
      return 0;
  }
}

void sub_19CA0DA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::StringToInt64Map::ByteSizeLong(CoreML::Specification::StringToInt64Map *this)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v8[3];

  v2 = (_QWORD *)*((_QWORD *)this + 5);
  v3 = *(unsigned int *)v2;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v8, v2);
  v4 = 0;
  while (v8[0])
  {
    v5 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::Wrap(*((_QWORD *)v8[0] + 3), *((_QWORD *)v8[0] + 3) + 24, *((google::protobuf::Arena **)this + 2));
    if (v4 != (_DWORD *)v5)
    {
      if (v4)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v4 = (_DWORD *)v5;
    }
    v6 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::ByteSizeLong(v4);
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v8);
  }
  if (v4)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  *((_DWORD *)this + 12) = v3;
  return v3;
}

void sub_19CA0DB70(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *CoreML::Specification::StringToInt64Map::SerializeWithCachedSizes(_QWORD *this, google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  google::protobuf::io::CodedOutputStream *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  google::protobuf::io::CodedOutputStream *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned __int8 *v24[3];

  v3 = (unint64_t *)this[5];
  v4 = *v3;
  if (!*v3)
    return this;
  v5 = (uint64_t)this;
  if (*((_BYTE *)a2 + 26))
  {
    if (v4 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_24:
      v13 = operator new[]();
      google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v24, *(_QWORD **)(v5 + 40));
      v14 = v24[0];
      if (v24[0])
      {
        v15 = 0;
        do
        {
          *(_QWORD *)(v13 + 8 * v15) = *((_QWORD *)v14 + 3);
          google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v24);
          ++v15;
          v14 = v24[0];
        }
        while (v24[0]);
      }
      else
      {
        v15 = 0;
      }
      v16 = 126 - 2 * __clz(v15);
      if (v15)
        v17 = v16;
      else
        v17 = 0;
      std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,long long> const*> &,google::protobuf::MapPair<std::string,long long> const**,false>(v13, (char *)(v13 + 8 * v15), v17, 1);
      if (v15)
      {
        v18 = 0;
        v19 = 0;
        do
        {
          v21 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::Wrap(*(_QWORD *)(v13 + 8 * v18), *(_QWORD *)(v13 + 8 * v18) + 24, *(google::protobuf::Arena **)(v5 + 16));
          if (v19 != v21)
          {
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
            v19 = v21;
          }
          google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v19, a2, v20);
          v22 = *(unsigned int **)(v13 + 8 * v18);
          if (*((char *)v22 + 23) < 0)
          {
            v22 = *(unsigned int **)v22;
            v23 = *(_QWORD *)(*(_QWORD *)(v13 + 8 * v18) + 8);
          }
          else
          {
            LODWORD(v23) = *((unsigned __int8 *)v22 + 23);
          }
          google::protobuf::internal::WireFormatLite::VerifyUtf8String(v22, v23, 1, (uint64_t)"CoreML.Specification.StringToInt64Map.MapEntry.key");
          ++v18;
        }
        while (v15 != v18);
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      return (_QWORD *)MEMORY[0x1A1AD6248](v13, 0x60C8044C4A2DFLL);
    }
  }
  else if (v4 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_24;
  }
  this = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v24, v3);
  v7 = 0;
  while (v24[0])
  {
    v9 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::Wrap(*((_QWORD *)v24[0] + 3), *((_QWORD *)v24[0] + 3) + 24, *(google::protobuf::Arena **)(v5 + 16));
    if (v7 != v9)
    {
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v7 = v9;
    }
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v7, a2, v8);
    v10 = (unsigned int *)*((_QWORD *)v24[0] + 3);
    if (*((char *)v10 + 23) < 0)
    {
      v10 = *(unsigned int **)v10;
      v11 = *(_QWORD *)(*((_QWORD *)v24[0] + 3) + 8);
    }
    else
    {
      LODWORD(v11) = *((unsigned __int8 *)v10 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v10, v11, 1, (uint64_t)"CoreML.Specification.StringToInt64Map.MapEntry.key");
    this = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v24);
  }
  if (v7)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return this;
}

void sub_19CA0DDEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1A1AD6248](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::StringToInt64Map::GetCachedSize(CoreML::Specification::StringToInt64Map *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,long long> const*> &,google::protobuf::MapPair<std::string,long long> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL4 v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _QWORD *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  char *v97;

  v6 = (char *)result;
LABEL_2:
  v94 = a2 - 8;
  v90 = a2 - 24;
  v91 = a2 - 16;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = a2 - v7;
    v10 = (a2 - v7) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(_QWORD **)v94;
        v41 = *(_QWORD **)v7;
        result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v94, *(_QWORD **)v7);
        if ((_DWORD)result)
        {
          *(_QWORD *)v7 = v40;
          *(_QWORD *)v94 = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v94);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v94);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v7 + 3, (_QWORD **)v94);
      default:
        if (v9 <= 191)
        {
          v42 = v7 + 8;
          v44 = v7 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v7;
              do
              {
                v48 = *(_QWORD **)v46;
                v47 = (_QWORD *)*((_QWORD *)v46 + 1);
                v46 = v42;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v47, v48);
                if ((_DWORD)result)
                {
                  v49 = v45;
                  while (1)
                  {
                    *(_QWORD *)&v7[v49 + 8] = v48;
                    if (!v49)
                      break;
                    v48 = *(_QWORD **)&v7[v49 - 8];
                    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v47, v48);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v7[v49 + 8];
                      goto LABEL_73;
                    }
                  }
                  v50 = v7;
LABEL_73:
                  *(_QWORD *)v50 = v47;
                }
                v42 = v46 + 8;
                v45 += 8;
              }
              while (v46 + 8 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v86 = *(_QWORD **)v8;
              v85 = (_QWORD *)*((_QWORD *)v8 + 1);
              v8 = v42;
              result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v85, v86);
              if ((_DWORD)result)
              {
                v87 = v8;
                do
                {
                  *(_QWORD *)v87 = v86;
                  v86 = (_QWORD *)*((_QWORD *)v87 - 2);
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v85, v86);
                  v87 -= 8;
                }
                while ((result & 1) != 0);
                *(_QWORD *)v87 = v85;
              }
              v42 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v97 = v7;
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            v88 = a2;
            v89 = a2 - v7;
            do
            {
              v53 = v52;
              if (v9 >= 16 && v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v97[8 * v54];
                v56 = 2 * v52 + 2;
                v95 = v52;
                if (v56 >= v10)
                {
                  v58 = *(_QWORD **)v55;
                }
                else
                {
                  v57 = *(_QWORD **)v55;
                  v58 = (_QWORD *)*((_QWORD *)v55 + 1);
                  v59 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v55, v58);
                  if (v59)
                    v55 += 8;
                  else
                    v58 = v57;
                  if (v59)
                    v54 = v56;
                }
                v60 = &v97[8 * v53];
                v61 = *(_QWORD **)v60;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v58, *(_QWORD **)v60);
                v9 = v89;
                if ((result & 1) == 0)
                {
                  do
                  {
                    v62 = v55;
                    *(_QWORD *)v60 = v58;
                    if (v51 < v54)
                      break;
                    v63 = (2 * v54) | 1;
                    v55 = &v97[8 * v63];
                    v64 = 2 * v54 + 2;
                    if (v64 >= v10)
                    {
                      v58 = *(_QWORD **)v55;
                      v54 = (2 * v54) | 1;
                    }
                    else
                    {
                      v58 = *(_QWORD **)v55;
                      v65 = (_QWORD *)*((_QWORD *)v55 + 1);
                      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v55, v65))
                      {
                        v58 = v65;
                        v55 += 8;
                        v54 = v64;
                      }
                      else
                      {
                        v54 = v63;
                      }
                    }
                    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v58, v61);
                    v60 = v62;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v62 = v61;
                  a2 = v88;
                  v9 = v89;
                  v53 = v95;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v66 = (unint64_t)v9 >> 3;
            v67 = v97;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = v66 - 2;
              v93 = *(_QWORD **)v67;
              if (v66 < 2)
                v70 = v66 - 1;
              v71 = v70 >> 1;
              do
              {
                v72 = &v67[8 * v69 + 8];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 >= v66)
                {
                  v77 = *(_QWORD **)v72;
                  v69 = (2 * v69) | 1;
                }
                else
                {
                  v75 = *(_QWORD **)v72;
                  v76 = *(_QWORD **)&v67[8 * v69 + 16];
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v72, v76);
                  if ((_DWORD)result)
                    v77 = v76;
                  else
                    v77 = v75;
                  if ((_DWORD)result)
                  {
                    v72 += 8;
                    v69 = v74;
                  }
                  else
                  {
                    v69 = v73;
                  }
                }
                *(_QWORD *)v67 = v77;
                v67 = v72;
              }
              while (v69 <= v71);
              a2 = v68 - 8;
              if (v72 == v68 - 8)
              {
                *(_QWORD *)v72 = v93;
              }
              else
              {
                *(_QWORD *)v72 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v93;
                v78 = v72 - v97 + 8;
                if (v78 >= 9)
                {
                  v79 = (unint64_t)((v78 >> 3) - 2) >> 1;
                  v80 = &v97[8 * v79];
                  v81 = *(_QWORD **)v80;
                  v82 = *(_QWORD **)v72;
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v80, *(_QWORD **)v72);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v83 = v80;
                      *(_QWORD *)v72 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v97[8 * v79];
                      v81 = *(_QWORD **)v80;
                      result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v80, v82);
                      v72 = v83;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v83 = v82;
                  }
                }
              }
              v84 = v66-- <= 2;
              v67 = v97;
            }
            while (!v84);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7[8 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12, (_QWORD **)v7, (_QWORD **)v94);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v12, (_QWORD **)v94);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 1, (_QWORD **)v12 - 1, (_QWORD **)v91);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 2, (_QWORD **)&v7[8 * v11 + 8], (_QWORD **)v90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12 - 1, (_QWORD **)v12, (_QWORD **)&v7[8 * v11 + 8]);
          v13 = *(_QWORD **)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD **)v7;
        v15 = v7;
        if ((a4 & 1) == 0)
        {
          v15 = v7;
          if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*((_QWORD **)v7 - 1), *(_QWORD **)v7))
          {
            result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, *(_QWORD **)v94);
            if ((result & 1) != 0)
            {
              do
              {
                v30 = (_QWORD *)*((_QWORD *)v7 + 1);
                v7 += 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v30);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v31 = v7 + 8;
              do
              {
                v7 = v31;
                if (v31 >= a2)
                  break;
                v31 += 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, *(_QWORD **)v7);
              }
              while (!(_DWORD)result);
            }
            v32 = a2;
            if (v7 < a2)
            {
              v32 = a2;
              do
              {
                v33 = (_QWORD *)*((_QWORD *)v32 - 1);
                v32 -= 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v33);
              }
              while ((result & 1) != 0);
            }
            v34 = a2;
            if (v7 < v32)
            {
              v35 = *(_QWORD **)v7;
              v36 = *(_QWORD **)v32;
              do
              {
                *(_QWORD *)v7 = v36;
                *(_QWORD *)v32 = v35;
                do
                {
                  v37 = (_QWORD *)*((_QWORD *)v7 + 1);
                  v7 += 8;
                  v35 = v37;
                }
                while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v37));
                do
                {
                  v38 = (_QWORD *)*((_QWORD *)v32 - 1);
                  v32 -= 8;
                  v36 = v38;
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v38);
                }
                while ((result & 1) != 0);
              }
              while (v7 < v32);
            }
            v39 = v7 - 8;
            a2 = v34;
            if (v7 - 8 != v8)
              *(_QWORD *)v8 = *(_QWORD *)v39;
            a4 = 0;
            *(_QWORD *)v39 = v14;
            continue;
          }
        }
        do
        {
          v16 = v15;
          v18 = (_QWORD *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v17 = v18;
        }
        while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v18, v14));
        v96 = a3;
        v19 = a2;
        if (v16 == v8)
        {
          v19 = a2;
          do
          {
            if (v15 >= v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v21, v14));
        }
        else
        {
          do
          {
            v20 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v20, v14));
        }
        v6 = v8;
        v22 = a2;
        if (v15 < v19)
        {
          v23 = *(_QWORD **)v19;
          v24 = v15;
          v25 = v19;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v17;
            do
            {
              v16 = v24;
              v26 = (_QWORD *)*((_QWORD *)v24 + 1);
              v24 += 8;
              v17 = v26;
            }
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v26, v14));
            do
            {
              v27 = (_QWORD *)*((_QWORD *)v25 - 1);
              v25 -= 8;
              v23 = v27;
            }
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v27, v14));
          }
          while (v24 < v25);
        }
        if (v16 != v6)
          *(_QWORD *)v6 = *(_QWORD *)v16;
        *(_QWORD *)v16 = v14;
        v28 = v15 >= v19;
        a2 = v22;
        a3 = v96;
        if (!v28)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,long long> const*> &,google::protobuf::MapPair<std::string,long long> const**,false>(v6, v16, v96, a4 & 1);
          a4 = 0;
          v7 = v16 + 8;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,long long> const*> &,google::protobuf::MapPair<std::string,long long> const**>((_QWORD **)v6, (_QWORD **)v16);
        v7 = v16 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,long long> const*> &,google::protobuf::MapPair<std::string,long long> const**>((_QWORD **)v16 + 1, (_QWORD **)v22);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v16;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::Wrap(uint64_t a1, uint64_t a2, google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)result = &off_1E3D5A458;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  *a1 = &off_1E3D5A500;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  *a1 = &off_1E3D5A500;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_19CB39696);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E3D5AD88;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E3D5AD88;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::Clear(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if ((__int128 *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) &= 0xFFFFFFFC;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::IsInitialized()
{
  return 1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(__int128 **)(a1 + 16) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::MergePartialFromCodedStream(uint64_t a1, google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  unint64_t TagFallback;
  __int128 *v8;
  uint64_t result;
  int v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;
  unint64_t Varint64Fallback;
  unsigned __int8 *v16;
  char v17;

  v5 = (google::protobuf::Arena **)(a1 + 16);
  do
  {
    while (1)
    {
      v6 = *(char **)this;
      if (*(_QWORD *)this >= *((_QWORD *)this + 1))
      {
        LODWORD(TagFallback) = 0;
      }
      else
      {
        TagFallback = *v6;
        if ((*v6 & 0x80000000) == 0)
        {
          *(_QWORD *)this = v6 + 1;
          goto LABEL_7;
        }
      }
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_7:
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 40) |= 1u;
      v8 = *(__int128 **)(a1 + 16);
      if (v8 == &google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v8 = *(__int128 **)(a1 + 16);
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)this, (std::string *)v8);
      if (!(_DWORD)result)
        return result;
      v10 = *(_DWORD *)(a1 + 40) | 1;
      *(_DWORD *)(a1 + 40) = v10;
      v12 = *(char **)this;
      v11 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this < v11 && *v12 == 16)
      {
        v13 = v12 + 1;
        *(_QWORD *)this = v13;
LABEL_20:
        v14 = v10 | 2;
        *(_DWORD *)(a1 + 40) = v14;
        if ((unint64_t)v13 >= v11 || *v13 < 0)
        {
          Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
          if ((v17 & 1) == 0)
            return 0;
          v14 = *(_DWORD *)(a1 + 40);
          v16 = *(unsigned __int8 **)this;
          v11 = *((_QWORD *)this + 1);
        }
        else
        {
          Varint64Fallback = *v13;
          v16 = (unsigned __int8 *)(v13 + 1);
          *(_QWORD *)this = v16;
        }
        *(_QWORD *)(a1 + 24) = Varint64Fallback;
        *(_DWORD *)(a1 + 40) = v14 | 2;
        if (v16 == (unsigned __int8 *)v11
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if ((_DWORD)TagFallback == 16)
    {
      v10 = *(_DWORD *)(a1 + 40);
      v13 = *(char **)this;
      v11 = *((_QWORD *)this + 1);
      goto LABEL_20;
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField(this, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return 0;
}

unint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v5 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v6 = *(unsigned __int8 *)(v5 + 23);
    if ((v6 & 0x80u) != 0)
      v6 = *(_DWORD *)(v5 + 8);
    v3 = (int)(v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    return v4 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = ((9 * (__clz(*(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1) | 1) ^ 0x3F) + 73) >> 6)
     + 1;
  return v4 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  unint64_t *v5;
  google::protobuf::io::CodedOutputStream *v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  v5 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return google::protobuf::internal::WireFormatLite::WriteInt64(2, *v5, a2, v6);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  int v6;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v5 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v6 = *(unsigned __int8 *)(v5 + 23);
    if ((v6 & 0x80u) != 0)
      v6 = *(_DWORD *)(v5 + 8);
    v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    return v4 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = ((9 * (__clz(*(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1) | 1) ^ 0x3F) + 73) >> 6)
     + 1;
  return v4 + v3;
}

_BYTE *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v5;
  char *v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;

  v5 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v6 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v5, a3 + 1);
  v7 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v6 = 16;
  v8 = v6 + 1;
  if (v7 < 0x80)
  {
    LOBYTE(v9) = v7;
  }
  else
  {
    do
    {
      *v8++ = v7 | 0x80;
      v9 = v7 >> 7;
      v10 = v7 >> 14;
      v7 >>= 7;
    }
    while (v10);
  }
  *v8 = v9;
  return v8 + 1;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

_QWORD *google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::~MapEntryLite(_QWORD *a1)
{
  *a1 = &off_1E3D5A500;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
  return a1;
}

void google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::~MapEntryLite(_QWORD *a1)
{
  *a1 = &off_1E3D5A500;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
  JUMPOUT(0x1A1AD6260);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::value(uint64_t a1)
{
  int v3;
  const char *v4;
  int v5;
  std::string __p;

  if (!*(_QWORD *)(a1 + 8))
  {
    v3 = 3;
    v4 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    v5 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1 + 24;
}

void sub_19CA0EDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::~MapEntryImpl(_QWORD *a1)
{
  *a1 = &off_1E3D5A500;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::~MapEntryImpl(_QWORD *a1)
{
  *a1 = &off_1E3D5A500;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
  JUMPOUT(0x1A1AD6260);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,long long> const*> &,google::protobuf::MapPair<std::string,long long> const**>(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD **v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(_QWORD **)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(_QWORD **)((char *)a1 + v14 - 16);
        v16 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v12, v13);
        v14 = v15;
        if (!v16)
        {
          v17 = (_QWORD **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

google::protobuf::Arena **google::protobuf::Map<std::string,long long>::operator[](uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  google::protobuf::Arena *v12;
  std::string *Aligned;
  std::string::__raw *v14;
  __int128 v15;
  google::protobuf::Arena **v16;
  google::protobuf::Arena *v17;
  std::string *v18;
  uint64_t v20;
  char v21;
  unint64_t v22;
  std::string __p;
  std::string::size_type v24;
  uint64_t v25[4];
  _QWORD v26[4];

  v4 = *(_QWORD **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v24 = 0;
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  v6 = v26[0];
  if (v26[0])
    goto LABEL_18;
  v7 = v4[1];
  v8 = *v4 + 1;
  v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      v20 = 2 * v7;
LABEL_37:
      google::protobuf::Map<std::string,std::string>::InnerMap::Resize((uint64_t)v4, v20, v5);
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v25, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      v11 = v25[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    v21 = 0;
    v22 = ((5 * v8) >> 2) + 1;
    do
      ++v21;
    while (v22 << v21 < v9);
    v20 = v7 >> v21 <= 8 ? 8 : v7 >> v21;
    if (v20 != v7)
      goto LABEL_37;
  }
  v11 = v26[3];
LABEL_11:
  v12 = (google::protobuf::Arena *)v4[5];
  if (v12)
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E0DE4EE8], 40);
  else
    Aligned = (std::string *)operator new(0x28uLL);
  v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v24;
  google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v25, (uint64_t)v4, v11, v14);
  ++*v4;
  v6 = v25[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (*(_QWORD *)a1)
    {
      v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E0DE4EE8], 32);
      v17 = *(google::protobuf::Arena **)a1;
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
      v16[3] = 0;
      std::string::operator=((std::string *)v16, (const std::string *)a2);
    }
    else
    {
      v18 = (std::string *)operator new();
      v16 = (google::protobuf::Arena **)v18;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v18->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      v16[3] = 0;
    }
    *(_QWORD *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_19CA0F284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1A1AD6260](v14, 0x1012C4092066FB6);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,long long>::erase(_QWORD *a1, unsigned __int8 *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  result = *(double *)&v6;
  if ((_QWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    *(_QWORD *)&result = google::protobuf::Map<std::string,long long>::erase((uint64_t)&v6, a1, (uint64_t *)&v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::NewEntry(google::protobuf::Arena *a1)
{
  uint64_t result;

  if (a1)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E3D5AD88;
  return result;
}

google::protobuf::Arena **google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::MessageLite,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)3,0>,google::protobuf::Map<std::string,long long>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  google::protobuf::Arena **result;
  uint64_t v4;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  result = google::protobuf::Map<std::string,long long>::operator[](*(_QWORD *)(a1 + 8), a1 + 16);
  *(_QWORD *)(a1 + 40) = result;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  *result = *(google::protobuf::Arena **)(v4 + 24);
  return result;
}

__n128 google::protobuf::Map<std::string,long long>::erase(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _BOOL4 v17;
  unint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  __n128 result;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  _QWORD *v29;

  v6 = *a3;
  if (!*a2)
  {
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      MEMORY[0x1A1AD6260](v7, 0x1012C4092066FB6);
      v6 = *a3;
    }
  }
  v27 = *(__n128 *)a3;
  v28 = a3[2];
  v8 = *(_QWORD *)(v6 + 32);
  if (v8)
    goto LABEL_7;
  v29 = 0;
  if (google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary((uint64_t)a3, (uint64_t *)&v29))
  {
    v9 = a3[2] + 1;
  }
  else
  {
    v10 = a3[2];
    v11 = *(_QWORD *)(*(_QWORD *)(a3[1] + 32) + 8 * v10);
    v12 = (uint64_t)v29;
    v13 = (_QWORD *)v29[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = *(_QWORD **)(v12 + 16);
        v15 = *v14 == v12;
        v12 = (uint64_t)v14;
      }
      while (!v15);
    }
    v29 = v14;
    if (v14 != (_QWORD *)(v11 + 8))
    {
      v8 = v14[4];
LABEL_7:
      *a3 = v8;
      goto LABEL_19;
    }
    v9 = v10 + 2;
  }
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::SearchFrom(a3, v9);
LABEL_19:
  v16 = (_QWORD *)a2[2];
  v29 = 0;
  v17 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v27, (uint64_t *)&v29);
  v18 = v28;
  v19 = (void **)v27.n128_u64[0];
  v20 = v16[4];
  v21 = *(_QWORD *)(v20 + 8 * v28);
  if (v17)
  {
    v22 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v27.n128_i64[0], *(_QWORD *)(v20 + 8 * v28));
LABEL_25:
    *(_QWORD *)(v16[4] + 8 * v18) = v22;
    goto LABEL_26;
  }
  v23 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v21, (_QWORD *)v29[4]);
  if ((uint64_t *)(v21 + 8) != v23)
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v21, v23);
  if (!*(_QWORD *)(v21 + 24))
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(v16[5], (_QWORD **)v21);
    v22 = 0;
    *(_QWORD *)(v16[4] + ((8 * v18) | 8)) = 0;
    v18 &= ~1uLL;
    goto LABEL_25;
  }
LABEL_26:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v16, v19);
  --*v16;
  if (v18 == v16[3])
  {
    v25 = v16[1];
    if (v18 < v25)
    {
      v26 = v16[4];
      do
      {
        if (*(_QWORD *)(v26 + 8 * v18))
          break;
        v16[3] = ++v18;
      }
      while (v25 != v18);
    }
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  return result;
}

void *CoreML::Specification::StringToInt64Map::MergeFrom(CoreML::Specification::StringToInt64Map *this, const CoreML::Specification::StringToInt64Map *a2)
{
  uint64_t v4;
  void *result;
  unsigned __int8 *v6;
  char *v7;
  uint64_t v8;
  google::protobuf::Arena *v9;
  unsigned __int8 *v10[3];

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v10, *((_QWORD **)a2 + 5));
  v6 = v10[0];
  if (v10[0])
  {
    v7 = (char *)this + 24;
    do
    {
      v8 = *((_QWORD *)v6 + 3);
      v9 = *(google::protobuf::Arena **)(v8 + 24);
      *google::protobuf::Map<std::string,long long>::operator[]((uint64_t)v7, v8) = v9;
      result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v10);
      v6 = v10[0];
    }
    while (v10[0]);
  }
  return result;
}

void google::protobuf::Map<std::string,long long>::clear(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[3];
  _QWORD v8[3];

  v1 = (_QWORD *)a1[2];
  v2 = v1[3];
  v3 = v1[1];
  if (v3 > v2)
  {
    v5 = v1[4];
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 8 * v2);
      if (v6)
        break;
      if (v3 == ++v2)
        return;
    }
    if (v6 != *(_QWORD *)(v5 + 8 * (v2 ^ 1)) || (v6 = *(_QWORD *)(*(_QWORD *)v6 + 32)) != 0)
    {
      do
      {
        v7[0] = v6;
        v7[1] = (uint64_t)v1;
        v7[2] = v2;
        google::protobuf::Map<std::string,long long>::erase((uint64_t)v8, a1, v7);
        v6 = v8[0];
        v1 = (_QWORD *)v8[1];
        v2 = v8[2];
      }
      while (v8[0]);
    }
  }
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::StringToInt64Map>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::StringToInt64Map>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::StringToInt64Map>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *google::protobuf::Map<std::string,long long>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<std::string,long long>::clear(a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x1A1AD6260](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

void CoreML::Specification::PrecisionRecallCurve::~PrecisionRecallCurve(CoreML::Specification::PrecisionRecallCurve *this)
{
  CoreML::Specification::PrecisionRecallCurve::~PrecisionRecallCurve(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E3D528E0;
  if (this != (CoreML::Specification::PrecisionRecallCurve *)&CoreML::Specification::_PrecisionRecallCurve_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 4);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 5);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::PrecisionRecallCurve::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.PrecisionRecallCurve");
}

CoreML::Specification::PrecisionRecallCurve *CoreML::Specification::PrecisionRecallCurve::New(CoreML::Specification::PrecisionRecallCurve *this)
{
  return CoreML::Specification::PrecisionRecallCurve::New(this, 0);
}

CoreML::Specification::PrecisionRecallCurve *CoreML::Specification::PrecisionRecallCurve::New(CoreML::Specification::PrecisionRecallCurve *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::PrecisionRecallCurve *v3;

  v3 = (CoreML::Specification::PrecisionRecallCurve *)operator new();
  CoreML::Specification::PrecisionRecallCurve::PrecisionRecallCurve(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::PrecisionRecallCurve>(a2, v3);
  return v3;
}

void sub_19CA0F85C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::PrecisionRecallCurve::Clear(CoreML::Specification::PrecisionRecallCurve *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t CoreML::Specification::PrecisionRecallCurve::IsInitialized(CoreML::Specification::PrecisionRecallCurve *this)
{
  return 1;
}

BOOL CoreML::Specification::PrecisionRecallCurve::MergePartialFromCodedStream(CoreML::Specification::PrecisionRecallCurve *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::FloatVector *v9;
  char *v10;
  int VarintSizeAsIntFallback;
  int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  _BOOL8 result;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)a2;
      if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1))
        break;
      LODWORD(v6) = 0;
LABEL_6:
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0)
        goto LABEL_23;
LABEL_7:
      switch(v7 >> 3)
      {
        case 1u:
          if (v7 != 10)
            goto LABEL_23;
          v9 = (CoreML::Specification::FloatVector *)*((_QWORD *)this + 2);
          if (!v9)
          {
            v9 = (CoreML::Specification::FloatVector *)operator new();
            CoreML::Specification::FloatVector::FloatVector(v9);
            *((_QWORD *)this + 2) = v9;
          }
          break;
        case 2u:
          if (v7 != 18)
            goto LABEL_23;
          v9 = (CoreML::Specification::FloatVector *)*((_QWORD *)this + 3);
          if (!v9)
          {
            v9 = (CoreML::Specification::FloatVector *)operator new();
            CoreML::Specification::FloatVector::FloatVector(v9);
            *((_QWORD *)this + 3) = v9;
          }
          break;
        case 3u:
          if (v7 != 26)
            goto LABEL_23;
          v9 = (CoreML::Specification::FloatVector *)*((_QWORD *)this + 4);
          if (!v9)
          {
            v9 = (CoreML::Specification::FloatVector *)operator new();
            CoreML::Specification::FloatVector::FloatVector(v9);
            *((_QWORD *)this + 4) = v9;
          }
          break;
        case 4u:
          if (v7 != 34)
            goto LABEL_23;
          v9 = (CoreML::Specification::FloatVector *)*((_QWORD *)this + 5);
          if (!v9)
          {
            v9 = (CoreML::Specification::FloatVector *)operator new();
            CoreML::Specification::FloatVector::FloatVector(v9);
            *((_QWORD *)this + 5) = v9;
          }
          break;
        default:
          goto LABEL_23;
      }
      v10 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v10 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *(_QWORD *)a2 = v10 + 1;
      }
      v13 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v15 = *((_DWORD *)a2 + 13);
      v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        v17 = v13;
        result = CoreML::Specification::FloatVector::MergePartialFromCodedStream(v9, (char **)a2, v14);
        if (!result)
          return result;
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17))
          continue;
      }
      return 0;
    }
    v6 = *v5;
    if (*v5 < 1)
      goto LABEL_6;
    *(_QWORD *)a2 = v5 + 1;
    v7 = v6 | 0x100000000;
    if ((v7 & 0x100000000) != 0)
      goto LABEL_7;
LABEL_23:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_19CA0FB3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

unsigned int *CoreML::Specification::PrecisionRecallCurve::ByteSizeLong(CoreML::Specification::PrecisionRecallCurve *this)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (this == (CoreML::Specification::PrecisionRecallCurve *)&CoreML::Specification::_PrecisionRecallCurve_default_instance_)
  {
    v1 = 0;
  }
  else
  {
    v1 = (unsigned int *)*((_QWORD *)this + 2);
    if (v1)
    {
      v2 = v1[4];
      v3 = 4 * v2;
      if ((_DWORD)v2)
      {
        if ((v3 & 0x80000000) != 0)
          v4 = 11;
        else
          v4 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v4 = 0;
      }
      v5 = v4 + v3;
      v1[8] = v3;
      v1[9] = v5;
      v1 = (unsigned int *)(v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
    v6 = (unsigned int *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = v6[4];
      v8 = 4 * v7;
      if ((_DWORD)v7)
      {
        if ((v8 & 0x80000000) != 0)
          v9 = 11;
        else
          v9 = ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v9 = 0;
      }
      v10 = v9 + v8;
      v6[8] = v8;
      v6[9] = v10;
      v1 = (unsigned int *)((char *)v1 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
    v11 = (unsigned int *)*((_QWORD *)this + 4);
    if (v11)
    {
      v12 = v11[4];
      v13 = 4 * v12;
      if ((_DWORD)v12)
      {
        if ((v13 & 0x80000000) != 0)
          v14 = 11;
        else
          v14 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v14 = 0;
      }
      v15 = v14 + v13;
      v11[8] = v13;
      v11[9] = v15;
      v1 = (unsigned int *)((char *)v1 + v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
    v16 = (unsigned int *)*((_QWORD *)this + 5);
    if (v16)
    {
      v17 = v16[4];
      v18 = 4 * v17;
      if ((_DWORD)v17)
      {
        if ((v18 & 0x80000000) != 0)
          v19 = 11;
        else
          v19 = ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v19 = 0;
      }
      v20 = v19 + v18;
      v16[8] = v18;
      v16[9] = v20;
      v1 = (unsigned int *)((char *)v1 + v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  *((_DWORD *)this + 12) = (_DWORD)v1;
  return v1;
}

_QWORD *CoreML::Specification::PrecisionRecallCurve::SerializeWithCachedSizes(_QWORD *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (this != (_QWORD *)&CoreML::Specification::_PrecisionRecallCurve_default_instance_)
  {
    v5 = this;
    v6 = this[2];
    if (v6)
      this = (_QWORD *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    v7 = v5[3];
    if (v7)
      this = (_QWORD *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
    v8 = v5[4];
    if (v8)
      this = (_QWORD *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
    v9 = v5[5];
    if (v9)
      return (_QWORD *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::PrecisionRecallCurve::GetCachedSize(CoreML::Specification::PrecisionRecallCurve *this)
{
  return *((unsigned int *)this + 12);
}

CoreML::Specification::FloatVector *CoreML::Specification::FloatVector::FloatVector(CoreML::Specification::FloatVector *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D4D100;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::FloatVector *)&CoreML::Specification::_FloatVector_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_19CA0FE34(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::FloatVector::MergePartialFromCodedStream(CoreML::Specification::FloatVector *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  signed int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  _BOOL8 result;
  signed int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 13)
          break;
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<float,(google::protobuf::internal::WireFormatLite::FieldType)2>(10, (unsigned int **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 3) != 0)
        return 0;
      v13 = *((_DWORD *)a2 + 12);
      v14 = v13 == 0x7FFFFFFF
          ? -1
          : v13 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v15 = *((_DWORD *)a2 + 10);
      v16 = v15 == 0x7FFFFFFF
          ? -1
          : v15 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v17 = *v5;
      v18 = VarintSizeAsIntFallback >> 2;
      v19 = v16 >= v14 ? v14 : v16;
      v20 = v14 == -1 ? v16 : v19;
      if (v20 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 4)
      {
        if (v18 <= 1)
          v21 = 1;
        else
          v21 = VarintSizeAsIntFallback >> 2;
        do
        {
          v30 = 0;
          v22 = (unsigned int *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v30);
            if (!result)
              return result;
            v23 = v30;
            v17 = *v5;
          }
          else
          {
            v23 = *v22;
            *a2 = (char *)(v22 + 1);
          }
          if (v17 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<float>::Reserve(v5, v17 + 1);
            v17 = *v5;
          }
          v24 = *((_QWORD *)this + 3) + 4 * v17;
          *((_DWORD *)this + 4) = v17 + 1;
          *(_DWORD *)(v24 + 8) = v23;
          ++v17;
          --v21;
        }
        while (v21);
      }
    }
    v26 = v17 + v18;
    if (VarintSizeAsIntFallback > 3)
    {
      google::protobuf::RepeatedField<float>::Reserve(v5, v17 + v18);
      v27 = *((_QWORD *)this + 3);
      v28 = 4 * v26 - 4 * *((int *)this + 4);
      if (v28 >= 1)
        bzero((void *)(v27 + 8 + 4 * *((int *)this + 4)), 4 * (((unint64_t)v28 >> 2) - ((unint64_t)v28 > 3)) + 4);
    }
    else
    {
      v27 = *((_QWORD *)this + 3);
    }
    *v5 = v26;
    v29 = v27 + 8;
    if (!v27)
      v29 = 0;
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v29 + 4 * v17), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v17;
    return result;
  }
  return 0;
}

std::string *CoreML::Specification::PrecisionRecallCurve::MergeFrom(std::string *this, const CoreML::Specification::PrecisionRecallCurve *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *v5;
  CoreML::Specification::FloatVector *v6;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *v7;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *v8;
  CoreML::Specification::FloatVector *data;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *v10;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *v11;
  CoreML::Specification::FloatVector *size;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *v13;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *v14;
  CoreML::Specification::FloatVector *v15;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *v16;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::PrecisionRecallCurve *)&CoreML::Specification::_PrecisionRecallCurve_default_instance_)
  {
    v5 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::FloatVector *)v3->__r_.__value_.__r.__words[2];
      if (!v6)
      {
        v6 = (CoreML::Specification::FloatVector *)operator new();
        CoreML::Specification::FloatVector::FloatVector(v6);
        v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
        v5 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)&CoreML::Specification::_FloatVector_default_instance_;
      this = (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergeFrom((uint64_t *)v6, v7);
    }
    v8 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      data = (CoreML::Specification::FloatVector *)v3[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        data = (CoreML::Specification::FloatVector *)operator new();
        CoreML::Specification::FloatVector::FloatVector(data);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
        v8 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)&CoreML::Specification::_FloatVector_default_instance_;
      this = (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergeFrom((uint64_t *)data, v10);
    }
    v11 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)*((_QWORD *)a2 + 4);
    if (v11)
    {
      size = (CoreML::Specification::FloatVector *)v3[1].__r_.__value_.__l.__size_;
      if (!size)
      {
        size = (CoreML::Specification::FloatVector *)operator new();
        CoreML::Specification::FloatVector::FloatVector(size);
        v3[1].__r_.__value_.__l.__size_ = (std::string::size_type)size;
        v11 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)&CoreML::Specification::_FloatVector_default_instance_;
      this = (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergeFrom((uint64_t *)size, v13);
    }
    v14 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (CoreML::Specification::FloatVector *)v3[1].__r_.__value_.__r.__words[2];
      if (!v15)
      {
        v15 = (CoreML::Specification::FloatVector *)operator new();
        CoreML::Specification::FloatVector::FloatVector(v15);
        v3[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
        v14 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)&CoreML::Specification::_FloatVector_default_instance_;
      return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergeFrom((uint64_t *)v15, v16);
    }
  }
  return this;
}

void sub_19CA102D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

CoreML::Specification::PrecisionRecallCurve *CoreML::Specification::PrecisionRecallCurve::PrecisionRecallCurve(CoreML::Specification::PrecisionRecallCurve *this)
{
  *(_QWORD *)this = &off_1E3D528E0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::PrecisionRecallCurve *)&CoreML::Specification::_PrecisionRecallCurve_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  *((_DWORD *)this + 12) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  return this;
}

void sub_19CA10358(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::PrecisionRecallCurve>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::PrecisionRecallCurve>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::PrecisionRecallCurve>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::DoubleRange::~DoubleRange(CoreML::Specification::DoubleRange *this)
{
  *(_QWORD *)this = &off_1E3D4CFD0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D4CFD0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::DoubleRange::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DoubleRange");
}

CoreML::Specification::DoubleRange *CoreML::Specification::DoubleRange::New(CoreML::Specification::DoubleRange *this)
{
  return CoreML::Specification::DoubleRange::New(this, 0);
}

CoreML::Specification::DoubleRange *CoreML::Specification::DoubleRange::New(CoreML::Specification::DoubleRange *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::DoubleRange *v3;

  v3 = (CoreML::Specification::DoubleRange *)operator new();
  CoreML::Specification::DoubleRange::DoubleRange(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::DoubleRange>(a2, v3);
  return v3;
}

void sub_19CA1053C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::DoubleRange::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::DoubleRange::IsInitialized(CoreML::Specification::DoubleRange *this)
{
  return 1;
}

BOOL CoreML::Specification::DoubleRange::MergePartialFromCodedStream(CoreML::Specification::DoubleRange *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  _BOOL8 result;
  unint64_t v16;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 >= a2[1])
        {
          LODWORD(v6) = 0;
LABEL_6:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_20;
          goto LABEL_7;
        }
        v6 = *v5;
        if (*v5 < 1)
          goto LABEL_6;
        *a2 = v5 + 1;
        v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0)
          goto LABEL_20;
LABEL_7:
        if (v7 >> 3 != 2)
          break;
        if (v7 != 17)
          goto LABEL_20;
        v16 = 0;
        v12 = (unint64_t *)*a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
        {
          result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v16);
          if (!result)
            return result;
          v13 = v16;
        }
        else
        {
          v13 = *v12;
          *a2 = (char *)(v12 + 1);
        }
        *((_QWORD *)this + 3) = v13;
      }
      if (v7 >> 3 != 1 || v7 != 9)
        break;
      v16 = 0;
      v10 = (unint64_t *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
      {
        result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v16);
        if (!result)
          return result;
        v11 = v16;
      }
      else
      {
        v11 = *v10;
        *a2 = (char *)(v10 + 1);
      }
      *((_QWORD *)this + 2) = v11;
    }
LABEL_20:
    if ((_DWORD)v7)
      v14 = (v7 & 7) == 4;
    else
      v14 = 1;
    result = v14;
    if (v14)
      return result;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::DoubleRange::ByteSizeLong(CoreML::Specification::DoubleRange *this)
{
  uint64_t v1;

  v1 = 9;
  if (*((double *)this + 2) == 0.0)
    v1 = 0;
  if (*((double *)this + 3) != 0.0)
    v1 += 9;
  *((_DWORD *)this + 8) = v1;
  return v1;
}

uint64_t CoreML::Specification::DoubleRange::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  double v5;
  double v6;

  v4 = this;
  v5 = *(double *)(this + 16);
  if (v5 != 0.0)
    this = google::protobuf::internal::WireFormatLite::WriteDouble(1, a2, v5, a3);
  v6 = *(double *)(v4 + 24);
  if (v6 != 0.0)
    return google::protobuf::internal::WireFormatLite::WriteDouble(2, a2, v6, a3);
  return this;
}

uint64_t CoreML::Specification::DoubleRange::GetCachedSize(CoreML::Specification::DoubleRange *this)
{
  return *((unsigned int *)this + 8);
}

CoreML::Specification::DoubleRange *CoreML::Specification::DoubleRange::DoubleRange(CoreML::Specification::DoubleRange *this)
{
  *(_QWORD *)this = &off_1E3D4CFD0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::DoubleRange *)&CoreML::Specification::_DoubleRange_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_19CA10798(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::DoubleRange>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleRange>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleRange>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::Int64Set::~Int64Set(CoreML::Specification::Int64Set *this)
{
  CoreML::Specification::Int64Set::~Int64Set(this);
  JUMPOUT(0x1A1AD6260);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E3D590C8;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::Int64Set::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64Set");
}

CoreML::Specification::Int64Set *CoreML::Specification::Int64Set::New(CoreML::Specification::Int64Set *this)
{
  return CoreML::Specification::Int64Set::New(this, 0);
}

CoreML::Specification::Int64Set *CoreML::Specification::Int64Set::New(CoreML::Specification::Int64Set *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Int64Set *v3;

  v3 = (CoreML::Specification::Int64Set *)operator new();
  CoreML::Specification::Int64Set::Int64Set(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Int64Set>(a2, v3);
  return v3;
}

void sub_19CA108A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Int64Set::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::Int64Set::IsInitialized(CoreML::Specification::Int64Set *this)
{
  return 1;
}

uint64_t CoreML::Specification::Int64Set::MergePartialFromCodedStream(CoreML::Specification::Int64Set *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  char *v18;
  unint64_t v19;
  unint64_t Varint64Fallback;
  char v21;
  signed int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8)
        break;
      if (v8 == 8)
      {
        if ((google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(google::protobuf::internal::WireFormatLite::FieldType)3>(10, a2, (uint64_t)v5) & 1) == 0)return 0;
      }
      else
      {
        if (v8 != 10)
          break;
        v10 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v10 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v10;
          *(_QWORD *)a2 = v10 + 1;
        }
        v13 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        while (1)
        {
          v14 = *((_DWORD *)a2 + 10);
          v15 = *((int *)a2 + 11);
          v16 = *((_QWORD *)a2 + 1);
          v17 = *((_DWORD *)a2 + 6);
          if (v14 == 0x7FFFFFFF)
            break;
          v18 = *(char **)a2;
          if ((int)(v14 - v17 + v15 + v16 - *(_QWORD *)a2) < 1)
            break;
          if ((unint64_t)v18 >= v16 || *v18 < 0)
          {
            Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v21 & 1) == 0)
              return 0;
            v19 = Varint64Fallback;
          }
          else
          {
            v19 = *v18;
            *(_QWORD *)a2 = v18 + 1;
          }
          v22 = *((_DWORD *)this + 4);
          if (v22 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v22 + 1);
            v22 = *v5;
          }
          v23 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v22 + 1;
          *(_QWORD *)(v23 + 8 * v22 + 8) = v19;
        }
        *((_DWORD *)a2 + 10) = v13;
        v24 = v16 + v15;
        *((_QWORD *)a2 + 1) = v16 + v15;
        v25 = *((_DWORD *)a2 + 12);
        if (v25 >= v13)
          v25 = v13;
        v26 = __OFSUB__(v17, v25);
        v27 = v17 - v25;
        if ((v27 < 0) ^ v26 | (v27 == 0))
          v27 = 0;
        else
          *((_QWORD *)a2 + 1) = v24 - v27;
        *((_DWORD *)a2 + 11) = v27;
        *((_BYTE *)a2 + 36) = 0;
      }
    }
    if ((_DWORD)v8)
      v12 = (v8 & 7) == 4;
    else
      v12 = 1;
    if (v12)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::Int64Set::ByteSizeLong(CoreML::Specification::Int64Set *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    v2 = 0;
LABEL_8:
    v5 = 0;
    goto LABEL_10;
  }
  v2 = 0;
  v3 = (uint64_t *)(*((_QWORD *)this + 3) + 8);
  do
  {
    v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2)
    goto LABEL_8;
  if ((v2 & 0x80000000) != 0)
    v5 = 11;
  else
    v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_10:
  v6 = v5 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v6;
  return v6;
}

uint64_t CoreML::Specification::Int64Set::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      this = google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          v14 = *((_QWORD *)a2 + 1);
          if (v13 < 0x80)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          }
          else
          {
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              v16 = v13 >> 7;
              v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          *v15 = v16;
          v18 = (_DWORD)v15 - v14 + 1;
          *((_QWORD *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::Int64Set::GetCachedSize(CoreML::Specification::Int64Set *this)
{
  return *((unsigned int *)this + 9);
}

CoreML::Specification::Int64Set *CoreML::Specification::Int64Set::Int64Set(CoreML::Specification::Int64Set *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D590C8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::Int64Set *)&CoreML::Specification::_Int64Set_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_19CA10D54(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Int64Set>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Set>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Set>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::Int64Range::~Int64Range(CoreML::Specification::Int64Range *this)
{
  *(_QWORD *)this = &off_1E3D4CBA8;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D4CBA8;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::Int64Range::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64Range");
}

CoreML::Specification::Int64Range *CoreML::Specification::Int64Range::New(CoreML::Specification::Int64Range *this)
{
  return CoreML::Specification::Int64Range::New(this, 0);
}

CoreML::Specification::Int64Range *CoreML::Specification::Int64Range::New(CoreML::Specification::Int64Range *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Int64Range *v3;

  v3 = (CoreML::Specification::Int64Range *)operator new();
  CoreML::Specification::Int64Range::Int64Range(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Int64Range>(a2, v3);
  return v3;
}

void sub_19CA10F00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Int64Range::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::Int64Range::IsInitialized(CoreML::Specification::Int64Range *this)
{
  return 1;
}

uint64_t CoreML::Specification::Int64Range::MergePartialFromCodedStream(CoreML::Specification::Int64Range *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t Varint64Fallback;
  BOOL v14;
  char v15;
  char v16;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 >= a2[1])
        {
          LODWORD(v6) = 0;
LABEL_6:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_20;
          goto LABEL_7;
        }
        v6 = *v5;
        if (*v5 < 1)
          goto LABEL_6;
        *a2 = v5 + 1;
        v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0)
          goto LABEL_20;
LABEL_7:
        if (v7 >> 3 != 2)
          break;
        if (v7 != 16)
          goto LABEL_20;
        v12 = *a2;
        if (*a2 >= a2[1] || *v12 < 0)
        {
          Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
          if ((v16 & 1) == 0)
            return 0;
        }
        else
        {
          Varint64Fallback = *v12;
          *a2 = v12 + 1;
        }
        *((_QWORD *)this + 3) = Varint64Fallback;
      }
      if (v7 >> 3 != 1 || v7 != 8)
        break;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        v11 = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
        if ((v15 & 1) == 0)
          return 0;
      }
      else
      {
        v11 = *v10;
        *a2 = v10 + 1;
      }
      *((_QWORD *)this + 2) = v11;
    }
LABEL_20:
    if ((_DWORD)v7)
      v14 = (v7 & 7) == 4;
    else
      v14 = 1;
    if (v14)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

unint64_t CoreML::Specification::Int64Range::ByteSizeLong(CoreML::Specification::Int64Range *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = *((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 3);
  v3 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1)
    v4 = v3 + 1;
  else
    v4 = 0;
  v5 = v4 + ((9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6);
  if (v2)
    v4 = v5 + 1;
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::Int64Range::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = this;
  v6 = *(_QWORD *)(this + 16);
  if (v6)
    this = google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  v7 = *(_QWORD *)(v5 + 24);
  if (v7)
    return google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  return this;
}

uint64_t CoreML::Specification::Int64Range::GetCachedSize(CoreML::Specification::Int64Range *this)
{
  return *((unsigned int *)this + 8);
}

std::string *CoreML::Specification::Int64Range::MergeFrom(std::string *this, const CoreML::Specification::Int64Range *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;
  std::string::size_type v6;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((_QWORD *)a2 + 3);
  if (v6)
    v3[1].__r_.__value_.__r.__words[0] = v6;
  return this;
}

CoreML::Specification::Int64Range *CoreML::Specification::Int64Range::Int64Range(CoreML::Specification::Int64Range *this)
{
  *(_QWORD *)this = &off_1E3D4CBA8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Int64Range *)&CoreML::Specification::_Int64Range_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_19CA111B4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Int64Range>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Range>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Range>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::DoubleVector::~DoubleVector(CoreML::Specification::DoubleVector *this)
{
  CoreML::Specification::DoubleVector::~DoubleVector(this);
  JUMPOUT(0x1A1AD6260);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E3D4DB18;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::DoubleVector::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DoubleVector");
}

CoreML::Specification::DoubleVector *CoreML::Specification::DoubleVector::New(CoreML::Specification::DoubleVector *this)
{
  return CoreML::Specification::DoubleVector::New(this, 0);
}

CoreML::Specification::DoubleVector *CoreML::Specification::DoubleVector::New(CoreML::Specification::DoubleVector *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::DoubleVector *v3;

  v3 = (CoreML::Specification::DoubleVector *)operator new();
  CoreML::Specification::DoubleVector::DoubleVector(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::DoubleVector>(a2, v3);
  return v3;
}

void sub_19CA112BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::DoubleVector::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::DoubleVector::IsInitialized(CoreML::Specification::DoubleVector *this)
{
  return 1;
}

BOOL CoreML::Specification::DoubleVector::MergePartialFromCodedStream(CoreML::Specification::DoubleVector *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  signed int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 result;
  signed int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 9)
          break;
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(10, (unint64_t **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0)
        return 0;
      v13 = *((_DWORD *)a2 + 12);
      v14 = v13 == 0x7FFFFFFF
          ? -1
          : v13 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v15 = *((_DWORD *)a2 + 10);
      v16 = v15 == 0x7FFFFFFF
          ? -1
          : v15 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      v17 = *v5;
      v18 = VarintSizeAsIntFallback >> 3;
      v19 = v16 >= v14 ? v14 : v16;
      v20 = v14 == -1 ? v16 : v19;
      if (v20 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v18 <= 1)
          v21 = 1;
        else
          v21 = VarintSizeAsIntFallback >> 3;
        do
        {
          v30 = 0;
          v22 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v30);
            if (!result)
              return result;
            v23 = v30;
            v17 = *v5;
          }
          else
          {
            v23 = *v22;
            *a2 = (char *)(v22 + 1);
          }
          if (v17 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v17 + 1);
            v17 = *v5;
          }
          v24 = *((_QWORD *)this + 3) + 8 * v17;
          *((_DWORD *)this + 4) = v17 + 1;
          *(_QWORD *)(v24 + 8) = v23;
          ++v17;
          --v21;
        }
        while (v21);
      }
    }
    v26 = v17 + v18;
    if (VarintSizeAsIntFallback > 7)
    {
      google::protobuf::RepeatedField<double>::Reserve(v5, v17 + v18);
      v27 = *((_QWORD *)this + 3);
      v28 = 8 * v26 - 8 * *((int *)this + 4);
      if (v28 >= 1)
        bzero((void *)(v27 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v28 >> 3) - ((unint64_t)v28 > 7)) + 8);
    }
    else
    {
      v27 = *((_QWORD *)this + 3);
    }
    *v5 = v26;
    v29 = v27 + 8;
    if (!v27)
      v29 = 0;
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v29 + 8 * v17), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v17;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::DoubleVector::ByteSizeLong(CoreML::Specification::DoubleVector *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 8 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::DoubleVector::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(_QWORD *)(v3 + 24);
    if (v11)
      v12 = (char *)(v11 + 8);
    else
      v12 = 0;
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, 8 * *(_DWORD *)(v3 + 16));
  }
  return this;
}

uint64_t CoreML::Specification::DoubleVector::GetCachedSize(CoreML::Specification::DoubleVector *this)
{
  return *((unsigned int *)this + 9);
}

CoreML::Specification::DoubleVector *CoreML::Specification::DoubleVector::DoubleVector(CoreML::Specification::DoubleVector *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D4DB18;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::DoubleVector *)&CoreML::Specification::_DoubleVector_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_19CA117B8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::DoubleVector>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleVector>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleVector>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::FloatVector::~FloatVector(CoreML::Specification::FloatVector *this)
{
  CoreML::Specification::FloatVector::~FloatVector(this);
  JUMPOUT(0x1A1AD6260);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E3D4D100;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::FloatVector::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.FloatVector");
}

CoreML::Specification::FloatVector *CoreML::Specification::FloatVector::New(CoreML::Specification::FloatVector *this)
{
  return CoreML::Specification::FloatVector::New(this, 0);
}

CoreML::Specification::FloatVector *CoreML::Specification::FloatVector::New(CoreML::Specification::FloatVector *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::FloatVector *v3;

  v3 = (CoreML::Specification::FloatVector *)operator new();
  CoreML::Specification::FloatVector::FloatVector(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::FloatVector>(a2, v3);
  return v3;
}

void sub_19CA1191C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FloatVector::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::FloatVector::IsInitialized(CoreML::Specification::FloatVector *this)
{
  return 1;
}

uint64_t CoreML::Specification::FloatVector::ByteSizeLong(CoreML::Specification::FloatVector *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 4 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::FloatVector::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(_QWORD *)(v3 + 24);
    if (v11)
      v12 = (char *)(v11 + 8);
    else
      v12 = 0;
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, 4 * *(_DWORD *)(v3 + 16));
  }
  return this;
}

uint64_t CoreML::Specification::FloatVector::GetCachedSize(CoreML::Specification::FloatVector *this)
{
  return *((unsigned int *)this + 9);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::FloatVector>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::FloatVector>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::FloatVector>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::Int64Vector::~Int64Vector(CoreML::Specification::Int64Vector *this)
{
  CoreML::Specification::Int64Vector::~Int64Vector(this);
  JUMPOUT(0x1A1AD6260);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E3D4D198;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::Int64Vector::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64Vector");
}

CoreML::Specification::Int64Vector *CoreML::Specification::Int64Vector::New(CoreML::Specification::Int64Vector *this)
{
  return CoreML::Specification::Int64Vector::New(this, 0);
}

CoreML::Specification::Int64Vector *CoreML::Specification::Int64Vector::New(CoreML::Specification::Int64Vector *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Int64Vector *v3;

  v3 = (CoreML::Specification::Int64Vector *)operator new();
  CoreML::Specification::Int64Vector::Int64Vector(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Int64Vector>(a2, v3);
  return v3;
}

void sub_19CA11C04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Int64Vector::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::Int64Vector::IsInitialized(CoreML::Specification::Int64Vector *this)
{
  return 1;
}

uint64_t CoreML::Specification::Int64Vector::MergePartialFromCodedStream(CoreML::Specification::Int64Vector *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  char *v18;
  unint64_t v19;
  unint64_t Varint64Fallback;
  char v21;
  signed int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      v6 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *(_QWORD *)a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8)
        break;
      if (v8 == 8)
      {
        if ((google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(google::protobuf::internal::WireFormatLite::FieldType)3>(10, a2, (uint64_t)v5) & 1) == 0)return 0;
      }
      else
      {
        if (v8 != 10)
          break;
        v10 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v10 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v10;
          *(_QWORD *)a2 = v10 + 1;
        }
        v13 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        while (1)
        {
          v14 = *((_DWORD *)a2 + 10);
          v15 = *((int *)a2 + 11);
          v16 = *((_QWORD *)a2 + 1);
          v17 = *((_DWORD *)a2 + 6);
          if (v14 == 0x7FFFFFFF)
            break;
          v18 = *(char **)a2;
          if ((int)(v14 - v17 + v15 + v16 - *(_QWORD *)a2) < 1)
            break;
          if ((unint64_t)v18 >= v16 || *v18 < 0)
          {
            Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v21 & 1) == 0)
              return 0;
            v19 = Varint64Fallback;
          }
          else
          {
            v19 = *v18;
            *(_QWORD *)a2 = v18 + 1;
          }
          v22 = *((_DWORD *)this + 4);
          if (v22 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v22 + 1);
            v22 = *v5;
          }
          v23 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v22 + 1;
          *(_QWORD *)(v23 + 8 * v22 + 8) = v19;
        }
        *((_DWORD *)a2 + 10) = v13;
        v24 = v16 + v15;
        *((_QWORD *)a2 + 1) = v16 + v15;
        v25 = *((_DWORD *)a2 + 12);
        if (v25 >= v13)
          v25 = v13;
        v26 = __OFSUB__(v17, v25);
        v27 = v17 - v25;
        if ((v27 < 0) ^ v26 | (v27 == 0))
          v27 = 0;
        else
          *((_QWORD *)a2 + 1) = v24 - v27;
        *((_DWORD *)a2 + 11) = v27;
        *((_BYTE *)a2 + 36) = 0;
      }
    }
    if ((_DWORD)v8)
      v12 = (v8 & 7) == 4;
    else
      v12 = 1;
    if (v12)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::Int64Vector::ByteSizeLong(CoreML::Specification::Int64Vector *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    v2 = 0;
LABEL_8:
    v5 = 0;
    goto LABEL_10;
  }
  v2 = 0;
  v3 = (uint64_t *)(*((_QWORD *)this + 3) + 8);
  do
  {
    v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2)
    goto LABEL_8;
  if ((v2 & 0x80000000) != 0)
    v5 = 11;
  else
    v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_10:
  v6 = v5 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v6;
  return v6;
}

uint64_t CoreML::Specification::Int64Vector::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  char __src[5];

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      this = google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          v14 = *((_QWORD *)a2 + 1);
          if (v13 < 0x80)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          }
          else
          {
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              v16 = v13 >> 7;
              v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          *v15 = v16;
          v18 = (_DWORD)v15 - v14 + 1;
          *((_QWORD *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::Int64Vector::GetCachedSize(CoreML::Specification::Int64Vector *this)
{
  return *((unsigned int *)this + 9);
}

CoreML::Specification::Int64Vector *CoreML::Specification::Int64Vector::Int64Vector(CoreML::Specification::Int64Vector *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D4D198;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::Int64Vector *)&CoreML::Specification::_Int64Vector_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_19CA120B8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Int64Vector>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Vector>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Vector>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::StringVector::~StringVector(CoreML::Specification::StringVector *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E3D4DEA8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E3D4DEA8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::StringVector::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.StringVector");
}

CoreML::Specification::StringVector *CoreML::Specification::StringVector::New(CoreML::Specification::StringVector *this)
{
  return CoreML::Specification::StringVector::New(this, 0);
}

CoreML::Specification::StringVector *CoreML::Specification::StringVector::New(CoreML::Specification::StringVector *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::StringVector *v3;

  v3 = (CoreML::Specification::StringVector *)operator new();
  CoreML::Specification::StringVector::StringVector(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::StringVector>(a2, v3);
  return v3;
}

void sub_19CA12284(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::StringVector::Clear(CoreML::Specification::StringVector *this)
{
  return google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16);
}

uint64_t CoreML::Specification::StringVector::IsInitialized(CoreML::Specification::StringVector *this)
{
  return 1;
}

uint64_t CoreML::Specification::StringVector::MergePartialFromCodedStream(CoreML::Specification::StringVector *this, char **a2, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int *v12;
  int v13;
  int v14;
  std::string *Aligned;
  google::protobuf::Arena *v16;
  google::protobuf::Arena **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;

  v5 = (google::protobuf::Arena **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v7) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v13 = *((_DWORD *)this + 6);
        v14 = *((_DWORD *)this + 7);
        goto LABEL_23;
      }
      v13 = *((_DWORD *)this + 6);
      v14 = *v12;
      if (v13 >= *v12)
      {
        if (v14 != *((_DWORD *)this + 7))
        {
LABEL_26:
          *v12 = v14 + 1;
          v16 = *v5;
          if (*v5)
          {
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
            v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
            *v17 = (google::protobuf::Arena *)Aligned;
            v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
            v18 = (unint64_t *)((char *)v16 + 32);
            do
              v19 = __ldxr(v18);
            while (__stxr((unint64_t)v17, v18));
            v17[2] = (google::protobuf::Arena *)v19;
          }
          else
          {
            Aligned = (std::string *)operator new();
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
          }
          v20 = *((_QWORD *)this + 4);
          v21 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v21 + 1;
          *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
          goto LABEL_32;
        }
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)v5, v14 - v13 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
        }
        v14 = *v12;
        goto LABEL_26;
      }
      *((_DWORD *)this + 6) = v13 + 1;
      Aligned = *(std::string **)&v12[2 * v13 + 2];
LABEL_32:
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, Aligned);
      if (!(_DWORD)result)
        return result;
      v23 = *((_QWORD *)this + 4);
      v24 = *(unsigned int **)(v23 + 8 * *((int *)this + 6));
      if (*((char *)v24 + 23) < 0)
      {
        v24 = *(unsigned int **)v24;
        v25 = *(_QWORD *)(*(_QWORD *)(v23 + 8 * *((int *)this + 6)) + 8);
      }
      else
      {
        LODWORD(v25) = *((unsigned __int8 *)v24 + 23);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 0, (uint64_t)"CoreML.Specification.StringVector.vector"))return 0;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::StringVector::ByteSizeLong(CoreML::Specification::StringVector *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 6);
  if ((int)v1 < 1)
  {
    v3 = *((unsigned int *)this + 6);
  }
  else
  {
    v2 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    v3 = *((unsigned int *)this + 6);
    do
    {
      v4 = *v2++;
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  *((_DWORD *)this + 10) = v3;
  return v3;
}

uint64_t CoreML::Specification::StringVector::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;

  v2 = *(unsigned int *)(this + 24);
  if ((int)v2 >= 1)
  {
    v4 = this;
    v5 = -v2;
    v6 = 1;
    do
    {
      v7 = *(unsigned int **)(*(_QWORD *)(v4 + 32) + 8 * v6);
      if (*((char *)v7 + 23) < 0)
      {
        v7 = *(unsigned int **)v7;
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v6) + 8);
      }
      else
      {
        LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (uint64_t)"CoreML.Specification.StringVector.vector");
      this = google::protobuf::internal::WireFormatLite::WriteString(1u, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v6++), a2);
    }
    while (v5 + v6 != 1);
  }
  return this;
}

uint64_t CoreML::Specification::StringVector::GetCachedSize(CoreML::Specification::StringVector *this)
{
  return *((unsigned int *)this + 10);
}

CoreML::Specification::StringVector *CoreML::Specification::StringVector::StringVector(CoreML::Specification::StringVector *this)
{
  *(_QWORD *)this = &off_1E3D4DEA8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::StringVector *)&CoreML::Specification::_StringVector_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_19CA12644(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::StringVector>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::StringVector>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::StringVector>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *google::protobuf::Map<long long,double>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<long long,double>::clear(a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = google::protobuf::Map<long long,double>::InnerMap::~InnerMap(v2);
      MEMORY[0x1A1AD6260](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

void google::protobuf::Map<long long,double>::clear(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[3];
  _QWORD v8[3];

  v1 = (_QWORD *)a1[2];
  v2 = v1[3];
  v3 = v1[1];
  if (v3 > v2)
  {
    v5 = v1[4];
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 8 * v2);
      if (v6)
        break;
      if (v3 == ++v2)
        return;
    }
    if (v6 != *(_QWORD *)(v5 + 8 * (v2 ^ 1)) || (v6 = *(_QWORD *)(*(_QWORD *)v6 + 32)) != 0)
    {
      do
      {
        v7[0] = v6;
        v7[1] = (uint64_t)v1;
        v7[2] = v2;
        google::protobuf::Map<long long,double>::erase((uint64_t)v8, a1, v7);
        v6 = v8[0];
        v1 = (_QWORD *)v8[1];
        v2 = v8[2];
      }
      while (v8[0]);
    }
  }
}

uint64_t google::protobuf::Map<long long,double>::InnerMap::~InnerMap(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = 0;
      do
      {
        v4 = *(_QWORD *)(a1 + 32);
        v5 = *(_QWORD *)(v4 + 8 * v3);
        if (v5)
        {
          if (v5 == *(_QWORD *)(v4 + 8 * (v3 ^ 1)))
          {
            v7 = v3 + 1;
            *(_QWORD *)(v4 + 8 * (v3 + 1)) = 0;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v3) = 0;
            v8 = *(uint64_t **)v5;
            do
            {
              v9 = (void *)v8[4];
              v10 = (uint64_t *)v8[1];
              v11 = v8;
              if (v10)
              {
                do
                {
                  v12 = v10;
                  v10 = (uint64_t *)*v10;
                }
                while (v10);
              }
              else
              {
                do
                {
                  v12 = (uint64_t *)v11[2];
                  v13 = *v12 == (_QWORD)v11;
                  v11 = v12;
                }
                while (!v13);
              }
              std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v5, v8);
              if (!*(_QWORD *)(a1 + 40))
                operator delete(v9);
              v8 = v12;
            }
            while (v12 != (uint64_t *)(v5 + 8));
            google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(*(_QWORD *)(a1 + 40), (_QWORD **)v5);
            goto LABEL_21;
          }
          *(_QWORD *)(v4 + 8 * v3) = 0;
          do
          {
            v6 = *(_QWORD *)(v5 + 16);
            if (!*(_QWORD *)(a1 + 40))
              operator delete((void *)v5);
            v5 = v6;
          }
          while (v6);
        }
        v7 = v3;
LABEL_21:
        v3 = v7 + 1;
        v2 = *(_QWORD *)(a1 + 8);
      }
      while (v7 + 1 < v2);
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 24) = v2;
    if (!*(_QWORD *)(a1 + 40))
      operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

__n128 google::protobuf::Map<long long,double>::erase(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _BOOL4 v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  __n128 result;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  _QWORD *v29;

  v6 = *a3;
  if (!*a2)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      MEMORY[0x1A1AD6260](v7, 0x1000C40451B5BE8);
      v6 = *a3;
    }
  }
  v27 = *(__n128 *)a3;
  v28 = a3[2];
  v8 = *(_QWORD *)(v6 + 16);
  if (v8)
    goto LABEL_5;
  v29 = 0;
  if (google::protobuf::Map<long long,double>::InnerMap::iterator_base<google::protobuf::Map<long long,double>::KeyValuePair>::revalidate_if_necessary((uint64_t)a3, &v29))
  {
    v9 = a3[2] + 1;
  }
  else
  {
    v10 = a3[2];
    v11 = *(_QWORD *)(*(_QWORD *)(a3[1] + 32) + 8 * v10);
    v12 = v29;
    v13 = (_QWORD *)v29[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v12[2];
        v15 = *v14 == (_QWORD)v12;
        v12 = v14;
      }
      while (!v15);
    }
    v29 = v14;
    if (v14 != (_QWORD *)(v11 + 8))
    {
      v8 = v14[4];
LABEL_5:
      *a3 = v8;
      goto LABEL_17;
    }
    v9 = v10 + 2;
  }
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::SearchFrom(a3, v9);
LABEL_17:
  v16 = (_QWORD *)a2[2];
  v29 = 0;
  v17 = google::protobuf::Map<long long,double>::InnerMap::iterator_base<google::protobuf::Map<long long,double>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v27, &v29);
  v18 = v28;
  v19 = (void *)v27.n128_u64[0];
  v20 = v16[4];
  v21 = *(_QWORD *)(v20 + 8 * v28);
  if (v17)
  {
    v22 = google::protobuf::Map<long long,double>::InnerMap::EraseFromLinkedList(v27.n128_i64[0], *(_QWORD *)(v20 + 8 * v28));
LABEL_23:
    *(_QWORD *)(v16[4] + 8 * v18) = v22;
    goto LABEL_24;
  }
  v23 = (uint64_t *)std::__tree<long long *,google::protobuf::Map<long long,double>::InnerMap::KeyCompare,google::protobuf::Map<long long,double>::MapAllocator<long long *>>::find<long long *>(v21, (uint64_t *)v29[4]);
  if ((uint64_t *)(v21 + 8) != v23)
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v21, v23);
  if (!*(_QWORD *)(v21 + 24))
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(v16[5], (_QWORD **)v21);
    v22 = 0;
    *(_QWORD *)(v16[4] + ((8 * v18) | 8)) = 0;
    v18 &= ~1uLL;
    goto LABEL_23;
  }
LABEL_24:
  if (!v16[5])
    operator delete(v19);
  --*v16;
  if (v18 == v16[3])
  {
    v25 = v16[1];
    if (v18 < v25)
    {
      v26 = v16[4];
      do
      {
        if (*(_QWORD *)(v26 + 8 * v18))
          break;
        v16[3] = ++v18;
      }
      while (v25 != v18);
    }
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  return result;
}

BOOL google::protobuf::Map<long long,double>::InnerMap::iterator_base<google::protobuf::Map<long long,double>::KeyValuePair>::revalidate_if_necessary(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = *(uint64_t **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16) & (v3[1] - 1);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = v3[4];
  v7 = *(uint64_t **)(v6 + 8 * v5);
  if (v7 == v4)
    return 1;
  if (v7 && v7 != *(uint64_t **)(v6 + 8 * (v5 ^ 1)))
  {
    while (1)
    {
      v7 = (uint64_t *)v7[2];
      if (!v7)
        break;
      if (v7 == v4)
        return 1;
    }
  }
  google::protobuf::Map<long long,double>::InnerMap::FindHelper(&v13, v3, v4, a2);
  v9 = v14;
  *(_QWORD *)(a1 + 16) = v14;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v11 = *(_QWORD *)(v10 + 8 * v9);
  return !v11 || v11 != *(_QWORD *)(v10 + 8 * (v9 ^ 1));
}

uint64_t google::protobuf::Map<long long,double>::InnerMap::EraseFromLinkedList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 16);
  if (v2 == a1)
    return v3;
  *(_QWORD *)(v2 + 16) = google::protobuf::Map<long long,double>::InnerMap::EraseFromLinkedList();
  return v2;
}

void CoreML::Specification::Int64ToDoubleMap::~Int64ToDoubleMap(CoreML::Specification::Int64ToDoubleMap *this)
{
  *(_QWORD *)this = &off_1E3D4FFE8;
  google::protobuf::Map<long long,double>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D4FFE8;
  google::protobuf::Map<long long,double>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::Int64ToDoubleMap::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64ToDoubleMap");
}

CoreML::Specification::Int64ToDoubleMap *CoreML::Specification::Int64ToDoubleMap::New(CoreML::Specification::Int64ToDoubleMap *this)
{
  return CoreML::Specification::Int64ToDoubleMap::New(this, 0);
}

CoreML::Specification::Int64ToDoubleMap *CoreML::Specification::Int64ToDoubleMap::New(CoreML::Specification::Int64ToDoubleMap *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Int64ToDoubleMap *v3;

  v3 = (CoreML::Specification::Int64ToDoubleMap *)operator new();
  CoreML::Specification::Int64ToDoubleMap::Int64ToDoubleMap(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Int64ToDoubleMap>(a2, v3);
  return v3;
}

void sub_19CA12CB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Int64ToDoubleMap::Clear(CoreML::Specification::Int64ToDoubleMap *this)
{
  google::protobuf::Map<long long,double>::clear((_QWORD *)this + 3);
}

uint64_t CoreML::Specification::Int64ToDoubleMap::IsInitialized(CoreML::Specification::Int64ToDoubleMap *this)
{
  return 1;
}

uint64_t CoreML::Specification::Int64ToDoubleMap::MergePartialFromCodedStream(CoreML::Specification::Int64ToDoubleMap *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int TagFallback;
  int v13;
  char *v14;
  int VarintSizeAsIntFallback;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t Varint64Fallback;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  double v38;
  _BOOL4 v39;
  BOOL v40;
  _QWORD v42[2];
  uint64_t v43[2];
  uint64_t v44;
  unint64_t v45;

  v5 = (google::protobuf::Arena **)((char *)this + 16);
  v6 = (char *)this + 24;
  while (1)
  {
    v7 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
    {
      LODWORD(v8) = 0;
    }
    else
    {
      v8 = *v7;
      if (*v7 >= 1)
      {
        *(_QWORD *)a2 = v7 + 1;
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          goto LABEL_12;
        goto LABEL_8;
      }
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
    v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v9 & 0x100000000) == 0)
      goto LABEL_12;
LABEL_8:
    if (v9 == 10 && (v9 & 0xFFFFFFF8) == 8)
    {
      v42[0] = v5;
      v42[1] = v6;
      v44 = 0;
      v14 = *(char **)a2;
      if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && (*v14 & 0x80000000) == 0)
      {
        VarintSizeAsIntFallback = *v14;
        *(_QWORD *)a2 = v14 + 1;
        goto LABEL_24;
      }
      VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
      if (VarintSizeAsIntFallback < 0)
        goto LABEL_63;
LABEL_24:
      v16 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v17 = *((_DWORD *)a2 + 13);
      v18 = __OFSUB__(v17--, 1);
      *((_DWORD *)a2 + 13) = v17;
      if (v17 < 0 != v18)
        goto LABEL_63;
      v19 = v16;
      v21 = *(char **)a2;
      v20 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 < v20 && *v21 == 8)
      {
        *(_QWORD *)a2 = v21 + 1;
        if ((unint64_t)(v21 + 1) >= v20 || v21[1] < 0)
        {
          Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v25 & 1) != 0)
          {
            v22 = Varint64Fallback;
            v23 = *(char **)a2;
            v20 = *((_QWORD *)a2 + 1);
            goto LABEL_33;
          }
          goto LABEL_63;
        }
        v22 = v21[1];
        v23 = v21 + 2;
        *(_QWORD *)a2 = v23;
LABEL_33:
        v43[0] = v22;
        if ((int)v20 - (int)v23 >= 1 && *v23 == 17)
        {
          v26 = **((_QWORD **)this + 5);
          v27 = google::protobuf::Map<long long,double>::operator[]((uint64_t)v6, v43);
          v43[1] = (uint64_t)v27;
          if (v26 != **((_QWORD **)this + 5))
          {
            google::protobuf::io::CodedInputStream::Skip(a2, 1u);
            v45 = 0;
            v28 = *(unint64_t **)a2;
            v29 = (char *)*((_QWORD *)a2 + 1);
            if ((int)((_DWORD)v29 - *(_QWORD *)a2) < 8)
            {
              if (google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v45))
              {
                v32 = v45;
                v30 = *(char **)a2;
                v29 = (char *)*((_QWORD *)a2 + 1);
                goto LABEL_38;
              }
              google::protobuf::Map<long long,double>::erase((uint64_t)v6, v43);
              goto LABEL_63;
            }
            v31 = *v28;
            v30 = (char *)(v28 + 1);
            v32 = v31;
            *(_QWORD *)a2 = v30;
LABEL_38:
            *v27 = v32;
            if (v30 == v29 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              *((_BYTE *)a2 + 36) = 1;
              goto LABEL_57;
            }
            v33 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(*v5);
            if (v33)
            {
              v44 = v33;
              v34 = v33;
            }
            else
            {
              v34 = 0;
            }
            *(_DWORD *)(v33 + 40) |= 2u;
            *(_QWORD *)(v33 + 24) = *v27;
            v38 = google::protobuf::Map<long long,double>::erase((uint64_t)v6, v43);
            *(_DWORD *)(v34 + 40) |= 1u;
            *(_QWORD *)(v34 + 16) = v22;
            v37 = (*(uint64_t (**)(uint64_t, google::protobuf::io::CodedInputStream *, double))(*(_QWORD *)v34 + 88))(v34, a2, v38);
            if (v37)
            {
              google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::Map<long long,double>>::UseKeyAndValueFromEntry((uint64_t)v42);
              v34 = v44;
            }
            if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34))
            {
LABEL_56:
              if (v37)
                goto LABEL_57;
LABEL_63:
              v40 = 0;
              v13 = 6;
LABEL_64:
              if (v44)
                (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
              if (!v40)
                goto LABEL_18;
              goto LABEL_17;
            }
LABEL_47:
            v44 = 0;
            if ((v37 & 1) == 0)
              return 0;
LABEL_57:
            v39 = google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v19);
            v40 = v39;
            if (v39)
              v13 = 0;
            else
              v13 = 6;
            goto LABEL_64;
          }
        }
      }
      else
      {
        v22 = 0;
        v43[0] = 0;
      }
      v35 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(*v5);
      if (v35)
      {
        v44 = v35;
        v36 = v35;
      }
      else
      {
        v36 = 0;
      }
      *(_DWORD *)(v35 + 40) |= 1u;
      *(_QWORD *)(v35 + 16) = v22;
      v37 = (*(uint64_t (**)(uint64_t, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v35 + 88))(v35, a2);
      if (v37)
      {
        google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::Map<long long,double>>::UseKeyAndValueFromEntry((uint64_t)v42);
        v36 = v44;
      }
      if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36))
        goto LABEL_56;
      goto LABEL_47;
    }
LABEL_12:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3))return 0;
LABEL_17:
    v13 = 0;
LABEL_18:
    if (v13)
      return 0;
  }
}

void sub_19CA130A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::Int64ToDoubleMap::ByteSizeLong(CoreML::Specification::Int64ToDoubleMap *this)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8[3];

  v2 = (_QWORD *)*((_QWORD *)this + 5);
  v3 = *(unsigned int *)v2;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v8, v2);
  v4 = 0;
  while (v8[0])
  {
    v5 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(v8[0][1], v8[0][1] + 8, *((google::protobuf::Arena **)this + 2));
    if (v4 != (_DWORD *)v5)
    {
      if (v4)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v4 = (_DWORD *)v5;
    }
    v6 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::ByteSizeLong(v4);
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<long long,double>::InnerMap::iterator_base<google::protobuf::Map<long long,double>::KeyValuePair const>::operator++(v8);
  }
  if (v4)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  *((_DWORD *)this + 12) = v3;
  return v3;
}

void sub_19CA13194(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *CoreML::Specification::Int64ToDoubleMap::SerializeWithCachedSizes(_QWORD *this, google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  google::protobuf::io::CodedOutputStream *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  google::protobuf::io::CodedOutputStream *v21;
  uint64_t v22;
  uint64_t *v23[3];

  v3 = (unint64_t *)this[5];
  v4 = *v3;
  if (!*v3)
    return this;
  v5 = (uint64_t)this;
  if (*((_BYTE *)a2 + 26))
  {
    if (v4 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_21:
      v11 = operator new[]();
      google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v23, *(_QWORD **)(v5 + 40));
      v12 = v23[0];
      if (v23[0])
      {
        v13 = 0;
        v14 = (_QWORD *)(v11 + 8);
        do
        {
          v15 = (_QWORD *)v12[1];
          *(v14 - 1) = *v15;
          *v14 = v15;
          google::protobuf::Map<long long,double>::InnerMap::iterator_base<google::protobuf::Map<long long,double>::KeyValuePair const>::operator++(v23);
          ++v13;
          v12 = v23[0];
          v14 += 2;
        }
        while (v23[0]);
      }
      else
      {
        v13 = 0;
      }
      v16 = 126 - 2 * __clz(v13);
      if (v13)
        v17 = v16;
      else
        v17 = 0;
      v18.n128_f64[0] = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*,false>(v11, (_QWORD *)(v11 + 16 * v13), v17, 1);
      if (v13)
      {
        v19 = 0;
        v20 = 8;
        do
        {
          v22 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(*(_QWORD *)(v11 + v20), *(_QWORD *)(v11 + v20) + 8, *(google::protobuf::Arena **)(v5 + 16));
          if (v19 != v22)
          {
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
            v19 = v22;
          }
          google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v19, a2, v21);
          v20 += 16;
          --v13;
        }
        while (v13);
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      return (_QWORD *)MEMORY[0x1A1AD6248](v11, 0x1060C80832E3BDALL, v18);
    }
  }
  else if (v4 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_21;
  }
  this = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v23, v3);
  v7 = 0;
  while (v23[0])
  {
    v9 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(v23[0][1], v23[0][1] + 8, *(google::protobuf::Arena **)(v5 + 16));
    if (v7 != v9)
    {
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v7 = v9;
    }
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v7, a2, v8);
    this = google::protobuf::Map<long long,double>::InnerMap::iterator_base<google::protobuf::Map<long long,double>::KeyValuePair const>::operator++(v23);
  }
  if (v7)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return this;
}

void sub_19CA133C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1A1AD6248](v1, 0x1060C80832E3BDALL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Int64ToDoubleMap::GetCachedSize(CoreML::Specification::Int64ToDoubleMap *this)
{
  return *((unsigned int *)this + 12);
}

double std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*,false>(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  _QWORD *v36;
  BOOL v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int64_t v47;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  BOOL v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _OWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(uint64_t a1, uint64_t a2, google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  {
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = a3;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  else
  {
    result = operator new();
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
  }
  *(_QWORD *)result = &off_1E3D5A6F8;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *result)
{
  *result = &off_1E3D5A7A0;
  return result;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  *a1 = &off_1E3D5A7A0;
  JUMPOUT(0x1A1AD6260);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_19CB39696);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E3D5AED8;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  uint64_t result;
  uint64_t v5;

  if (a2)
  {
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = a2;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  else
  {
    result = operator new();
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_DWORD *)(result + 40) = 0;
  }
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E3D5AED8;
  *(_QWORD *)(result + 8) = v5;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::Clear(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) &= 0xFFFFFFFC;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::IsInitialized()
{
  return 1;
}

double google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *a2)
{
  int v2;
  double result;
  double *v6;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      v6 = (double *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      result = *v6;
      *(double *)(a1 + 24) = *v6;
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
  return result;
}

BOOL google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergePartialFromCodedStream(uint64_t a1, google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  char *v5;
  unint64_t TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  unint64_t Varint64Fallback;
  char *v11;
  int v12;
  unint64_t *v13;
  char v14;
  int v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  _BOOL8 result;
  unint64_t v20;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)this;
      if (*(_QWORD *)this >= *((_QWORD *)this + 1))
      {
        LODWORD(TagFallback) = 0;
      }
      else
      {
        TagFallback = *v5;
        if ((*v5 & 0x80000000) == 0)
        {
          *(_QWORD *)this = v5 + 1;
          goto LABEL_6;
        }
      }
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_6:
      if ((_DWORD)TagFallback == 8)
        break;
      if ((_DWORD)TagFallback == 17)
      {
        v12 = *(_DWORD *)(a1 + 40);
        v13 = *(unint64_t **)this;
        v8 = *((_QWORD *)this + 1);
        goto LABEL_21;
      }
      if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
        return 1;
      if ((google::protobuf::internal::WireFormatLite::SkipField(this, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
    }
    v7 = *(_DWORD *)(a1 + 40) | 1;
    *(_DWORD *)(a1 + 40) = v7;
    v9 = *(char **)this;
    v8 = *((_QWORD *)this + 1);
    if (*(_QWORD *)this >= v8 || *v9 < 0)
    {
      Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
      if ((v14 & 1) == 0)
        return 0;
      v7 = *(_DWORD *)(a1 + 40);
      v11 = *(char **)this;
      v8 = *((_QWORD *)this + 1);
    }
    else
    {
      Varint64Fallback = *v9;
      v11 = v9 + 1;
      *(_QWORD *)this = v11;
    }
    *(_QWORD *)(a1 + 16) = Varint64Fallback;
    v12 = v7 | 1;
    *(_DWORD *)(a1 + 40) = v7 | 1;
    if ((unint64_t)v11 < v8 && *v11 == 17)
    {
      v13 = (unint64_t *)(v11 + 1);
      *(_QWORD *)this = v11 + 1;
LABEL_21:
      v15 = v12 | 2;
      *(_DWORD *)(a1 + 40) = v12 | 2;
      v20 = 0;
      if ((int)v8 - (int)v13 < 8)
      {
        result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)this, &v20);
        if (!result)
          return result;
        v18 = v20;
        v15 = *(_DWORD *)(a1 + 40);
        v16 = *(char **)this;
        v8 = *((_QWORD *)this + 1);
      }
      else
      {
        v17 = *v13;
        v16 = (char *)(v13 + 1);
        v18 = v17;
        *(_QWORD *)this = v16;
      }
      *(_QWORD *)(a1 + 24) = v18;
      *(_DWORD *)(a1 + 40) = v15 | 2;
      if (v16 == (char *)v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        break;
    }
  }
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

unint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  unint64_t v3;
  uint64_t v4;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v3 = ((9 * (__clz(*(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1) | 1) ^ 0x3F) + 73) >> 6)
       + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v4 = 0;
    return v4 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_5;
LABEL_3:
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v4 = 9;
  return v4 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t *v4;
  google::protobuf::io::CodedOutputStream *v5;
  double *v6;
  google::protobuf::io::CodedOutputStream *v7;

  v4 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteInt64(1, *v4, a2, v5);
  v6 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return google::protobuf::internal::WireFormatLite::WriteDouble(2, a2, *v6, v7);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  int v3;
  int v4;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v3 = ((9 * (__clz(*(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1) | 1) ^ 0x3F) + 73) >> 6)
       + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v4 = 0;
    return (v4 + v3);
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_5;
LABEL_3:
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v4 = 9;
  return (v4 + v3);
}

_BYTE *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 8;
  v6 = a3 + 1;
  if (v5 < 0x80)
  {
    LOBYTE(v7) = v5;
  }
  else
  {
    do
    {
      *v6++ = v5 | 0x80;
      v7 = v5 >> 7;
      v8 = v5 >> 14;
      v5 >>= 7;
    }
    while (v8);
  }
  *v6 = v7;
  v9 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  v6[1] = 17;
  *(_QWORD *)(v6 + 2) = v9;
  return v6 + 10;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryImpl(_QWORD *result)
{
  *result = &off_1E3D5A7A0;
  return result;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryImpl(_QWORD *a1)
{
  *a1 = &off_1E3D5A7A0;
  JUMPOUT(0x1A1AD6260);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::key(uint64_t a1)
{
  return a1 + 16;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::value(uint64_t a1)
{
  int v3;
  const char *v4;
  int v5;
  std::string __p;

  if (!*(_QWORD *)(a1 + 8))
  {
    v3 = 3;
    v4 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    v5 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1 + 24;
}

void sub_19CA14120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>(__int128 *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *(_QWORD *)result)
  {
    if (v4 < v3)
    {
      v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*a2 < *(_QWORD *)result)
      {
        v7 = *result;
        *result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v8 = *result;
      *result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a3 >= *a2)
        return result;
      v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      v5 = *result;
      *result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>(__int128 *a1, uint64_t *a2, uint64_t *a3, _OWORD *a4)
{
  __n128 result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>(a1, a2, a3);
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_QWORD *)a1)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>(__int128 *a1, uint64_t *a2, uint64_t *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>(a1, a2, a3, a4).n128_u64[0];
  if ((int64_t)a5->n128_u64[0] < (int64_t)a4->n128_u64[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if ((int64_t)a4->n128_u64[0] < *a3)
    {
      result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(_QWORD *)a1)
        {
          result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (_QWORD *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32));
      v9 = (_QWORD *)(a1 + 48);
      if ((_QWORD *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (_QWORD *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (_QWORD *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

_QWORD *google::protobuf::Map<long long,double>::operator[](uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  google::protobuf::Arena *v12;
  uint64_t *Aligned;
  _QWORD *v14;
  uint64_t v16;
  char v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20[4];
  _QWORD v21[4];

  v4 = *(_QWORD **)(a1 + 16);
  v19 = (unint64_t)*a2;
  google::protobuf::Map<long long,double>::InnerMap::FindHelper(v21, v4, (uint64_t *)&v19, 0);
  v6 = v21[0];
  if (v21[0])
    goto LABEL_12;
  v7 = v4[1];
  v8 = *v4 + 1;
  v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      v16 = 2 * v7;
LABEL_26:
      google::protobuf::Map<long long,double>::InnerMap::Resize((uint64_t)v4, v16, v5);
      google::protobuf::Map<long long,double>::InnerMap::FindHelper(v20, v4, (uint64_t *)&v19, 0);
      v11 = v20[3];
      goto LABEL_8;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    v17 = 0;
    v18 = ((5 * v8) >> 2) + 1;
    do
      ++v17;
    while (v18 << v17 < v9);
    v16 = v7 >> v17 <= 8 ? 8 : v7 >> v17;
    if (v16 != v7)
      goto LABEL_26;
  }
  v11 = v21[3];
LABEL_8:
  v12 = (google::protobuf::Arena *)v4[5];
  if (v12)
    Aligned = (uint64_t *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E0DE4EE8], 24);
  else
    Aligned = (uint64_t *)operator new(0x18uLL);
  *(_OWORD *)Aligned = v19;
  google::protobuf::Map<long long,double>::InnerMap::InsertUnique(v20, (uint64_t)v4, v11, Aligned);
  ++*v4;
  v6 = v20[0];
LABEL_12:
  v14 = *(_QWORD **)(v6 + 8);
  if (!v14)
  {
    if (*(_QWORD *)a1)
    {
      v14 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E0DE4EE8], 16);
      *v14 = 0;
      v14[1] = 0;
      *v14 = *a2;
    }
    else
    {
      v14 = (_QWORD *)operator new();
      *v14 = *a2;
      v14[1] = 0;
    }
    *(_QWORD *)(v6 + 8) = v14;
  }
  return v14 + 1;
}

double google::protobuf::Map<long long,double>::erase(uint64_t a1, uint64_t *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  google::protobuf::Map<long long,double>::InnerMap::FindHelper(&v6, *(_QWORD **)(a1 + 16), a2, 0);
  result = *(double *)&v6;
  if ((_QWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    *(_QWORD *)&result = google::protobuf::Map<long long,double>::erase((uint64_t)&v6, (_QWORD *)a1, (uint64_t *)&v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(google::protobuf::Arena *a1)
{
  uint64_t result;

  if (a1)
  {
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = a1;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  else
  {
    result = operator new();
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_DWORD *)(result + 40) = 0;
  }
  *(_QWORD *)result = &off_1E3D5AED8;
  return result;
}

double google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::Map<long long,double>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  double *v2;
  uint64_t v3;
  double result;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 136))(*(_QWORD *)(a1 + 32));
  v2 = (double *)google::protobuf::Map<long long,double>::operator[](*(_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 24) = v2;
  v3 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 40) |= 2u;
  result = *(double *)(v3 + 24);
  *v2 = result;
  return result;
}

uint64_t *google::protobuf::Map<long long,double>::InnerMap::InsertUnique(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v4 = a4;
  v5 = a3;
  v7 = result;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(v8 + 8 * a3);
  if (!v9)
  {
    a4[2] = 0;
    *(_QWORD *)(v8 + 8 * a3) = a4;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a3 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a3);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 16);
    }
    while (v11);
    if (v10 < 8)
    {
      a4[2] = v9;
      *(_QWORD *)(v8 + 8 * a3) = a4;
LABEL_11:
      *v7 = v4;
      v7[1] = a2;
      v7[2] = v5;
      return result;
    }
    google::protobuf::Map<long long,double>::InnerMap::TreeConvert(a2, a3);
    v4[2] = 0;
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v5);
    v15 = v4;
    result = std::__tree<long long *,google::protobuf::Map<long long,double>::InnerMap::KeyCompare,google::protobuf::Map<long long,double>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(v14, v4, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = (uint64_t *)result[4];
LABEL_8:
    v12 = *(_QWORD *)(a2 + 24);
    if (v5 < v12)
      v12 = v5;
    *(_QWORD *)(a2 + 24) = v12;
    goto LABEL_11;
  }
  a4[2] = 0;
  v13 = *(_QWORD *)(v8 + 8 * a3);
  v15 = a4;
  result = std::__tree<long long *,google::protobuf::Map<long long,double>::InnerMap::KeyCompare,google::protobuf::Map<long long,double>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(v13, a4, (uint64_t *)&v15);
  *v7 = result[4];
  v7[1] = a2;
  v7[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

uint64_t *google::protobuf::Map<long long,double>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  google::protobuf::Arena *v4;
  _QWORD *Aligned;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  _QWORD **v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t **v13;
  BOOL v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD **v20;
  uint64_t v21;
  uint64_t *result;
  _QWORD **v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x1E0DE4EE8], 32);
  else
    Aligned = operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v25 = *(_QWORD *)(a1 + 40);
  v7 = v25;
  v26 = 0;
  v23 = &v24;
  v24 = 0;
  Aligned[1] = 0;
  v8 = (uint64_t **)(Aligned + 1);
  Aligned[2] = v7;
  Aligned[3] = 0;
  *Aligned = Aligned + 1;
  v9 = v23;
  if (v23 != &v24)
  {
    do
    {
      v10 = *(uint64_t **)(v6 + 8);
      v11 = v8;
      if (*(uint64_t ***)v6 == v8)
        goto LABEL_11;
      v12 = *(_QWORD *)(v6 + 8);
      v13 = v8;
      if (v10)
      {
        do
        {
          v11 = (uint64_t **)v12;
          v12 = *(_QWORD *)(v12 + 8);
        }
        while (v12);
      }
      else
      {
        do
        {
          v11 = (uint64_t **)v13[2];
          v14 = *v11 == (uint64_t *)v13;
          v13 = v11;
        }
        while (v14);
      }
      v15 = *v9[4];
      if (*v11[4] < v15)
      {
LABEL_11:
        if (v10)
          v16 = v11;
        else
          v16 = v8;
        if (v10)
          v17 = v11 + 1;
        else
          v17 = v8;
      }
      else
      {
        v16 = v8;
        v17 = v8;
        if (v10)
        {
          v17 = v8;
          while (1)
          {
            while (1)
            {
              v16 = (uint64_t **)v10;
              v21 = *(_QWORD *)v10[4];
              if (v15 >= v21)
                break;
              v10 = *v16;
              v17 = v16;
              if (!*v16)
                goto LABEL_18;
            }
            if (v21 >= v15)
              break;
            v17 = v16 + 1;
            v10 = v16[1];
            if (!v10)
              goto LABEL_18;
          }
        }
      }
      if (!*v17)
      {
LABEL_18:
        v18 = (uint64_t *)google::protobuf::Map<std::string,std::string>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate(*(google::protobuf::Arena **)(v6 + 16));
        v18[4] = (uint64_t)v9[4];
        std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)v6, (uint64_t)v16, v17, v18);
      }
      v19 = v9[1];
      if (v19)
      {
        do
        {
          v20 = (_QWORD **)v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD **)v9[2];
          v14 = *v20 == v9;
          v9 = v20;
        }
        while (!v14);
      }
      v9 = v20;
    }
    while (v20 != &v24);
  }
  std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy((uint64_t)&v23, v24);
  google::protobuf::Map<long long,double>::InnerMap::CopyListToTree(*(uint64_t **)(a1 + 32), a2, v6);
  result = google::protobuf::Map<long long,double>::InnerMap::CopyListToTree(*(uint64_t **)(a1 + 32), a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_19CA14A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;

  std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy(v10, *(_QWORD **)(v10 + 8));
  std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<long long *,google::protobuf::Map<long long,double>::InnerMap::KeyCompare,google::protobuf::Map<long long,double>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *(_QWORD *)v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    v10 = (uint64_t *)google::protobuf::Map<std::string,std::string>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate(*(google::protobuf::Arena **)(a1 + 16));
    v10[4] = *a3;
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t *google::protobuf::Map<long long,double>::InnerMap::CopyListToTree(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t *v6;

  v3 = (uint64_t *)result[a2];
  if (v3)
  {
    do
    {
      v6 = v3;
      result = std::__tree<long long *,google::protobuf::Map<long long,double>::InnerMap::KeyCompare,google::protobuf::Map<long long,double>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(a3, v3, (uint64_t *)&v6);
      v5 = (uint64_t *)v3[2];
      v3[2] = 0;
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

void google::protobuf::Map<long long,double>::InnerMap::Resize(uint64_t a1, uint64_t a2, size_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  google::protobuf::Arena **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15[3];

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2;
  v6 = *(_QWORD **)(a1 + 32);
  v7 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(*(google::protobuf::Arena **)(a1 + 40), a2, a3);
  bzero(v7, 8 * a2);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 32) = v7;
  while (v8 < v5)
  {
    v9 = v6[v8];
    if (v9)
    {
      if (v9 == v6[v8 ^ 1])
      {
        v11 = *(_QWORD **)v9;
        do
        {
          google::protobuf::Map<long long,double>::InnerMap::InsertUnique(v15, a1, (*(_QWORD *)(a1 + 8) - 1) & (*(_QWORD *)(a1 + 16) + *(_QWORD *)v11[4]), (uint64_t *)v11[4]);
          v12 = (_QWORD *)v11[1];
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v11[2];
              v14 = *v13 == (_QWORD)v11;
              v11 = v13;
            }
            while (!v14);
          }
          v11 = v13;
        }
        while (v13 != (_QWORD *)(v9 + 8));
        ++v8;
        google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(*(_QWORD *)(a1 + 40), (_QWORD **)v9);
      }
      else
      {
        do
        {
          v10 = *(_QWORD *)(v9 + 16);
          google::protobuf::Map<long long,double>::InnerMap::InsertUnique(v15, a1, (*(_QWORD *)(a1 + 8) - 1) & (*(_QWORD *)(a1 + 16) + *(_QWORD *)v9), (uint64_t *)v9);
          v9 = v10;
        }
        while (v10);
      }
    }
    ++v8;
  }
  if (!*(_QWORD *)(a1 + 40))
    operator delete(v6);
}

void *CoreML::Specification::Int64ToDoubleMap::MergeFrom(CoreML::Specification::Int64ToDoubleMap *this, const CoreML::Specification::Int64ToDoubleMap *a2)
{
  uint64_t v4;
  void *result;
  uint64_t *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10[3];

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v10, *((_QWORD **)a2 + 5));
  v6 = v10[0];
  if (v10[0])
  {
    v7 = (char *)this + 24;
    do
    {
      v8 = (_QWORD *)v6[1];
      v9 = v8[1];
      *google::protobuf::Map<long long,double>::operator[]((uint64_t)v7, v8) = v9;
      result = google::protobuf::Map<long long,double>::InnerMap::iterator_base<google::protobuf::Map<long long,double>::KeyValuePair const>::operator++(v10);
      v6 = v10[0];
    }
    while (v10[0]);
  }
  return result;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Int64ToDoubleMap>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64ToDoubleMap>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64ToDoubleMap>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryLite(_QWORD *result)
{
  *result = &off_1E3D5A7A0;
  return result;
}

void google::protobuf::internal::MapEntryLite<long long,double,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryLite(_QWORD *a1)
{
  *a1 = &off_1E3D5A7A0;
  JUMPOUT(0x1A1AD6260);
}

void CoreML::Specification::StringToDoubleMap::~StringToDoubleMap(CoreML::Specification::StringToDoubleMap *this)
{
  *(_QWORD *)this = &off_1E3D50FF0;
  google::protobuf::Map<std::string,long long>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D50FF0;
  google::protobuf::Map<std::string,long long>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::StringToDoubleMap::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.StringToDoubleMap");
}

CoreML::Specification::StringToDoubleMap *CoreML::Specification::StringToDoubleMap::New(CoreML::Specification::StringToDoubleMap *this)
{
  return CoreML::Specification::StringToDoubleMap::New(this, 0);
}

CoreML::Specification::StringToDoubleMap *CoreML::Specification::StringToDoubleMap::New(CoreML::Specification::StringToDoubleMap *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::StringToDoubleMap *v3;

  v3 = (CoreML::Specification::StringToDoubleMap *)operator new();
  CoreML::Specification::StringToDoubleMap::StringToDoubleMap(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::StringToDoubleMap>(a2, v3);
  return v3;
}

void sub_19CA14F04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::StringToDoubleMap::Clear(CoreML::Specification::StringToDoubleMap *this)
{
  google::protobuf::Map<std::string,long long>::clear((_QWORD *)this + 3);
}

uint64_t CoreML::Specification::StringToDoubleMap::IsInitialized(CoreML::Specification::StringToDoubleMap *this)
{
  return 1;
}

uint64_t CoreML::Specification::StringToDoubleMap::MergePartialFromCodedStream(CoreML::Specification::StringToDoubleMap *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::Arena **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int v12;
  char *v13;
  int VarintSizeAsIntFallback;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  google::protobuf::Arena **v28;
  _QWORD *v29;
  _DWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  __n128 v35;
  uint64_t v36;
  __int128 *v37;
  __n128 v38;
  unsigned int *p_p;
  int v40;
  _BOOL4 v41;
  BOOL v42;
  google::protobuf::Arena **v44;
  _QWORD *v45;
  std::string __p;
  google::protobuf::Arena **v47;
  _DWORD *v48;
  unint64_t v49;

  v4 = (google::protobuf::Arena **)((char *)this + 16);
  v5 = (_QWORD *)((char *)this + 24);
  while (1)
  {
    v6 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
    {
      LODWORD(v7) = 0;
    }
    else
    {
      v7 = *v6;
      if (*v6 >= 1)
      {
        *(_QWORD *)a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_12;
        goto LABEL_8;
      }
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
    v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v8 & 0x100000000) == 0)
      goto LABEL_12;
LABEL_8:
    if (v8 == 10 && (v8 & 0xFFFFFFF8) == 8)
    {
      v44 = v4;
      v45 = v5;
      memset(&__p, 0, sizeof(__p));
      v48 = 0;
      v13 = *(char **)a2;
      if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && (*v13 & 0x80000000) == 0)
      {
        VarintSizeAsIntFallback = *v13;
        *(_QWORD *)a2 = v13 + 1;
        goto LABEL_24;
      }
      VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
      if (VarintSizeAsIntFallback < 0)
        goto LABEL_83;
LABEL_24:
      v15 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v16 = *((_DWORD *)a2 + 13);
      v17 = __OFSUB__(v16--, 1);
      *((_DWORD *)a2 + 13) = v16;
      if (v16 < 0 == v17)
      {
        v18 = v15;
        v19 = *(char **)a2;
        if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && *v19 == 10)
        {
          *(_QWORD *)a2 = v19 + 1;
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, &__p))
            goto LABEL_83;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) >= 1 && **(_BYTE **)a2 == 17)
          {
            v20 = *(_QWORD *)v45[2];
            v47 = google::protobuf::Map<std::string,double>::operator[]((uint64_t)v45, (uint64_t)&__p);
            if (v20 != *(_QWORD *)v45[2])
            {
              google::protobuf::io::CodedInputStream::Skip(a2, 1u);
              v21 = v47;
              v49 = 0;
              v22 = *(unint64_t **)a2;
              v23 = (char *)*((_QWORD *)a2 + 1);
              if ((int)((_DWORD)v23 - *(_QWORD *)a2) < 8)
              {
                if (google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v49))
                {
                  v26 = v49;
                  v24 = *(char **)a2;
                  v23 = (char *)*((_QWORD *)a2 + 1);
                  goto LABEL_33;
                }
                google::protobuf::Map<std::string,long long>::erase(v45, (unsigned __int8 *)&__p);
                goto LABEL_83;
              }
              v25 = *v22;
              v24 = (char *)(v22 + 1);
              v26 = v25;
              *(_QWORD *)a2 = v24;
LABEL_33:
              *v21 = v26;
              if (v24 == v23 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                *((_BYTE *)a2 + 36) = 1;
LABEL_60:
                if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v18))
                {
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    p_p = (unsigned int *)&__p;
                  else
                    p_p = (unsigned int *)__p.__r_.__value_.__r.__words[0];
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                  else
                    v40 = __p.__r_.__value_.__r.__words[1];
                  v41 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v40, 0, (uint64_t)"CoreML.Specification.StringToDoubleMap.MapEntry.key");
                  v42 = v41;
                  if (v41)
                    v12 = 0;
                  else
                    v12 = 6;
                  goto LABEL_70;
                }
                goto LABEL_83;
              }
              v27 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(*v44);
              if (v48 != (_DWORD *)v27)
              {
                if (v48)
                  (*(void (**)(void))(*(_QWORD *)v48 + 8))();
                v48 = (_DWORD *)v27;
              }
              v28 = v47;
              v29 = v45;
              *(_DWORD *)(v27 + 40) |= 2u;
              *(_QWORD *)(v27 + 24) = *v28;
              google::protobuf::Map<std::string,long long>::erase(v29, (unsigned __int8 *)&__p);
              v30 = v48;
              v48[10] |= 1u;
              v31 = (uint64_t *)(v30 + 4);
              v32 = *((_QWORD *)v30 + 2);
              if ((__int128 *)v32 == &google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)v30 + 2, *((google::protobuf::Arena ***)v30 + 4), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
                v32 = *v31;
              }
              if (*(char *)(v32 + 23) < 0)
                operator delete(*(void **)v32);
              v33 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(_QWORD *)(v32 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)v32 = v33;
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
              __p.__r_.__value_.__s.__data_[0] = 0;
              v34 = (*(uint64_t (**)(_DWORD *, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v48 + 88))(v48, a2);
              if (v34)
                v35.n128_f64[0] = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::Map<std::string,double>>::UseKeyAndValueFromEntry((uint64_t)&v44);
              if (!(*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v48 + 40))(v48, v35))
              {
LABEL_45:
                if (v34)
                  goto LABEL_60;
                goto LABEL_83;
              }
LABEL_59:
              v48 = 0;
              if ((v34 & 1) != 0)
                goto LABEL_60;
              v42 = 0;
              v12 = 6;
LABEL_72:
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (!v42)
                goto LABEL_18;
              goto LABEL_17;
            }
          }
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          memset(&__p, 0, sizeof(__p));
        }
        v36 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(*v44);
        if (v48 != (_DWORD *)v36)
        {
          if (v48)
            (*(void (**)(void))(*(_QWORD *)v48 + 8))();
          v48 = (_DWORD *)v36;
        }
        v37 = *(__int128 **)(v36 + 16);
        *(_DWORD *)(v36 + 40) |= 1u;
        if (v37 == &google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v36 + 16), *(google::protobuf::Arena ***)(v36 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v37 = *(__int128 **)(v36 + 16);
        }
        std::string::operator=((std::string *)v37, &__p);
        v34 = (*(uint64_t (**)(_DWORD *, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v48 + 88))(v48, a2);
        if (v34)
          v38.n128_f64[0] = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::Map<std::string,double>>::UseKeyAndValueFromEntry((uint64_t)&v44);
        if (!(*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v48 + 40))(v48, v38))
          goto LABEL_45;
        goto LABEL_59;
      }
LABEL_83:
      v42 = 0;
      v12 = 6;
LABEL_70:
      if (v48)
        (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 8))(v48);
      goto LABEL_72;
    }
LABEL_12:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3))return 0;
LABEL_17:
    v12 = 0;
LABEL_18:
    if (v12)
      return 0;
  }
}

void sub_19CA153E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::StringToDoubleMap::ByteSizeLong(CoreML::Specification::StringToDoubleMap *this)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8[3];

  v2 = (_QWORD *)*((_QWORD *)this + 5);
  v3 = *(unsigned int *)v2;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v8, v2);
  v4 = 0;
  while (v8[0])
  {
    v5 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(*((_QWORD *)v8[0] + 3), *((_QWORD *)v8[0] + 3) + 24, *((google::protobuf::Arena **)this + 2));
    if (v4 != (_DWORD *)v5)
    {
      if (v4)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v4 = (_DWORD *)v5;
    }
    v6 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::ByteSizeLong(v4);
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v8);
  }
  if (v4)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  *((_DWORD *)this + 12) = v3;
  return v3;
}

void sub_19CA154E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *CoreML::Specification::StringToDoubleMap::SerializeWithCachedSizes(_QWORD *this, google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  google::protobuf::io::CodedOutputStream *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  google::protobuf::io::CodedOutputStream *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned __int8 *v24[3];

  v3 = (unint64_t *)this[5];
  v4 = *v3;
  if (!*v3)
    return this;
  v5 = (uint64_t)this;
  if (*((_BYTE *)a2 + 26))
  {
    if (v4 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_24:
      v13 = operator new[]();
      google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v24, *(_QWORD **)(v5 + 40));
      v14 = v24[0];
      if (v24[0])
      {
        v15 = 0;
        do
        {
          *(_QWORD *)(v13 + 8 * v15) = *((_QWORD *)v14 + 3);
          google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v24);
          ++v15;
          v14 = v24[0];
        }
        while (v24[0]);
      }
      else
      {
        v15 = 0;
      }
      v16 = 126 - 2 * __clz(v15);
      if (v15)
        v17 = v16;
      else
        v17 = 0;
      std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,double> const*> &,google::protobuf::MapPair<std::string,double> const**,false>(v13, (char *)(v13 + 8 * v15), v17, 1);
      if (v15)
      {
        v18 = 0;
        v19 = 0;
        do
        {
          v21 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(*(_QWORD *)(v13 + 8 * v18), *(_QWORD *)(v13 + 8 * v18) + 24, *(google::protobuf::Arena **)(v5 + 16));
          if (v19 != v21)
          {
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
            v19 = v21;
          }
          google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v19, a2, v20);
          v22 = *(unsigned int **)(v13 + 8 * v18);
          if (*((char *)v22 + 23) < 0)
          {
            v22 = *(unsigned int **)v22;
            v23 = *(_QWORD *)(*(_QWORD *)(v13 + 8 * v18) + 8);
          }
          else
          {
            LODWORD(v23) = *((unsigned __int8 *)v22 + 23);
          }
          google::protobuf::internal::WireFormatLite::VerifyUtf8String(v22, v23, 1, (uint64_t)"CoreML.Specification.StringToDoubleMap.MapEntry.key");
          ++v18;
        }
        while (v15 != v18);
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      return (_QWORD *)MEMORY[0x1A1AD6248](v13, 0x60C8044C4A2DFLL);
    }
  }
  else if (v4 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_24;
  }
  this = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v24, v3);
  v7 = 0;
  while (v24[0])
  {
    v9 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(*((_QWORD *)v24[0] + 3), *((_QWORD *)v24[0] + 3) + 24, *(google::protobuf::Arena **)(v5 + 16));
    if (v7 != v9)
    {
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v7 = v9;
    }
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v7, a2, v8);
    v10 = (unsigned int *)*((_QWORD *)v24[0] + 3);
    if (*((char *)v10 + 23) < 0)
    {
      v10 = *(unsigned int **)v10;
      v11 = *(_QWORD *)(*((_QWORD *)v24[0] + 3) + 8);
    }
    else
    {
      LODWORD(v11) = *((unsigned __int8 *)v10 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v10, v11, 1, (uint64_t)"CoreML.Specification.StringToDoubleMap.MapEntry.key");
    this = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v24);
  }
  if (v7)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return this;
}

void sub_19CA1575C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1A1AD6248](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::StringToDoubleMap::GetCachedSize(CoreML::Specification::StringToDoubleMap *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,double> const*> &,google::protobuf::MapPair<std::string,double> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL4 v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _QWORD *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  char *v97;

  v6 = (char *)result;
LABEL_2:
  v94 = a2 - 8;
  v90 = a2 - 24;
  v91 = a2 - 16;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = a2 - v7;
    v10 = (a2 - v7) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(_QWORD **)v94;
        v41 = *(_QWORD **)v7;
        result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v94, *(_QWORD **)v7);
        if ((_DWORD)result)
        {
          *(_QWORD *)v7 = v40;
          *(_QWORD *)v94 = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v94);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v94);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v7 + 3, (_QWORD **)v94);
      default:
        if (v9 <= 191)
        {
          v42 = v7 + 8;
          v44 = v7 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v7;
              do
              {
                v48 = *(_QWORD **)v46;
                v47 = (_QWORD *)*((_QWORD *)v46 + 1);
                v46 = v42;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v47, v48);
                if ((_DWORD)result)
                {
                  v49 = v45;
                  while (1)
                  {
                    *(_QWORD *)&v7[v49 + 8] = v48;
                    if (!v49)
                      break;
                    v48 = *(_QWORD **)&v7[v49 - 8];
                    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v47, v48);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v7[v49 + 8];
                      goto LABEL_73;
                    }
                  }
                  v50 = v7;
LABEL_73:
                  *(_QWORD *)v50 = v47;
                }
                v42 = v46 + 8;
                v45 += 8;
              }
              while (v46 + 8 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v86 = *(_QWORD **)v8;
              v85 = (_QWORD *)*((_QWORD *)v8 + 1);
              v8 = v42;
              result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v85, v86);
              if ((_DWORD)result)
              {
                v87 = v8;
                do
                {
                  *(_QWORD *)v87 = v86;
                  v86 = (_QWORD *)*((_QWORD *)v87 - 2);
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v85, v86);
                  v87 -= 8;
                }
                while ((result & 1) != 0);
                *(_QWORD *)v87 = v85;
              }
              v42 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v97 = v7;
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            v88 = a2;
            v89 = a2 - v7;
            do
            {
              v53 = v52;
              if (v9 >= 16 && v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v97[8 * v54];
                v56 = 2 * v52 + 2;
                v95 = v52;
                if (v56 >= v10)
                {
                  v58 = *(_QWORD **)v55;
                }
                else
                {
                  v57 = *(_QWORD **)v55;
                  v58 = (_QWORD *)*((_QWORD *)v55 + 1);
                  v59 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v55, v58);
                  if (v59)
                    v55 += 8;
                  else
                    v58 = v57;
                  if (v59)
                    v54 = v56;
                }
                v60 = &v97[8 * v53];
                v61 = *(_QWORD **)v60;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v58, *(_QWORD **)v60);
                v9 = v89;
                if ((result & 1) == 0)
                {
                  do
                  {
                    v62 = v55;
                    *(_QWORD *)v60 = v58;
                    if (v51 < v54)
                      break;
                    v63 = (2 * v54) | 1;
                    v55 = &v97[8 * v63];
                    v64 = 2 * v54 + 2;
                    if (v64 >= v10)
                    {
                      v58 = *(_QWORD **)v55;
                      v54 = (2 * v54) | 1;
                    }
                    else
                    {
                      v58 = *(_QWORD **)v55;
                      v65 = (_QWORD *)*((_QWORD *)v55 + 1);
                      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v55, v65))
                      {
                        v58 = v65;
                        v55 += 8;
                        v54 = v64;
                      }
                      else
                      {
                        v54 = v63;
                      }
                    }
                    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v58, v61);
                    v60 = v62;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v62 = v61;
                  a2 = v88;
                  v9 = v89;
                  v53 = v95;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v66 = (unint64_t)v9 >> 3;
            v67 = v97;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = v66 - 2;
              v93 = *(_QWORD **)v67;
              if (v66 < 2)
                v70 = v66 - 1;
              v71 = v70 >> 1;
              do
              {
                v72 = &v67[8 * v69 + 8];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 >= v66)
                {
                  v77 = *(_QWORD **)v72;
                  v69 = (2 * v69) | 1;
                }
                else
                {
                  v75 = *(_QWORD **)v72;
                  v76 = *(_QWORD **)&v67[8 * v69 + 16];
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v72, v76);
                  if ((_DWORD)result)
                    v77 = v76;
                  else
                    v77 = v75;
                  if ((_DWORD)result)
                  {
                    v72 += 8;
                    v69 = v74;
                  }
                  else
                  {
                    v69 = v73;
                  }
                }
                *(_QWORD *)v67 = v77;
                v67 = v72;
              }
              while (v69 <= v71);
              a2 = v68 - 8;
              if (v72 == v68 - 8)
              {
                *(_QWORD *)v72 = v93;
              }
              else
              {
                *(_QWORD *)v72 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v93;
                v78 = v72 - v97 + 8;
                if (v78 >= 9)
                {
                  v79 = (unint64_t)((v78 >> 3) - 2) >> 1;
                  v80 = &v97[8 * v79];
                  v81 = *(_QWORD **)v80;
                  v82 = *(_QWORD **)v72;
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v80, *(_QWORD **)v72);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v83 = v80;
                      *(_QWORD *)v72 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v97[8 * v79];
                      v81 = *(_QWORD **)v80;
                      result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)v80, v82);
                      v72 = v83;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v83 = v82;
                  }
                }
              }
              v84 = v66-- <= 2;
              v67 = v97;
            }
            while (!v84);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7[8 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12, (_QWORD **)v7, (_QWORD **)v94);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v12, (_QWORD **)v94);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 1, (_QWORD **)v12 - 1, (_QWORD **)v91);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 2, (_QWORD **)&v7[8 * v11 + 8], (_QWORD **)v90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12 - 1, (_QWORD **)v12, (_QWORD **)&v7[8 * v11 + 8]);
          v13 = *(_QWORD **)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD **)v7;
        v15 = v7;
        if ((a4 & 1) == 0)
        {
          v15 = v7;
          if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*((_QWORD **)v7 - 1), *(_QWORD **)v7))
          {
            result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, *(_QWORD **)v94);
            if ((result & 1) != 0)
            {
              do
              {
                v30 = (_QWORD *)*((_QWORD *)v7 + 1);
                v7 += 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v30);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v31 = v7 + 8;
              do
              {
                v7 = v31;
                if (v31 >= a2)
                  break;
                v31 += 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, *(_QWORD **)v7);
              }
              while (!(_DWORD)result);
            }
            v32 = a2;
            if (v7 < a2)
            {
              v32 = a2;
              do
              {
                v33 = (_QWORD *)*((_QWORD *)v32 - 1);
                v32 -= 8;
                result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v33);
              }
              while ((result & 1) != 0);
            }
            v34 = a2;
            if (v7 < v32)
            {
              v35 = *(_QWORD **)v7;
              v36 = *(_QWORD **)v32;
              do
              {
                *(_QWORD *)v7 = v36;
                *(_QWORD *)v32 = v35;
                do
                {
                  v37 = (_QWORD *)*((_QWORD *)v7 + 1);
                  v7 += 8;
                  v35 = v37;
                }
                while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v37));
                do
                {
                  v38 = (_QWORD *)*((_QWORD *)v32 - 1);
                  v32 -= 8;
                  v36 = v38;
                  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v14, v38);
                }
                while ((result & 1) != 0);
              }
              while (v7 < v32);
            }
            v39 = v7 - 8;
            a2 = v34;
            if (v7 - 8 != v8)
              *(_QWORD *)v8 = *(_QWORD *)v39;
            a4 = 0;
            *(_QWORD *)v39 = v14;
            continue;
          }
        }
        do
        {
          v16 = v15;
          v18 = (_QWORD *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v17 = v18;
        }
        while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v18, v14));
        v96 = a3;
        v19 = a2;
        if (v16 == v8)
        {
          v19 = a2;
          do
          {
            if (v15 >= v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v21, v14));
        }
        else
        {
          do
          {
            v20 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v20, v14));
        }
        v6 = v8;
        v22 = a2;
        if (v15 < v19)
        {
          v23 = *(_QWORD **)v19;
          v24 = v15;
          v25 = v19;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v17;
            do
            {
              v16 = v24;
              v26 = (_QWORD *)*((_QWORD *)v24 + 1);
              v24 += 8;
              v17 = v26;
            }
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v26, v14));
            do
            {
              v27 = (_QWORD *)*((_QWORD *)v25 - 1);
              v25 -= 8;
              v23 = v27;
            }
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v27, v14));
          }
          while (v24 < v25);
        }
        if (v16 != v6)
          *(_QWORD *)v6 = *(_QWORD *)v16;
        *(_QWORD *)v16 = v14;
        v28 = v15 >= v19;
        a2 = v22;
        a3 = v96;
        if (!v28)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,double> const*> &,google::protobuf::MapPair<std::string,double> const**,false>(v6, v16, v96, a4 & 1);
          a4 = 0;
          v7 = v16 + 8;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,double> const*> &,google::protobuf::MapPair<std::string,double> const**>((_QWORD **)v6, (_QWORD **)v16);
        v7 = v16 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,double> const*> &,google::protobuf::MapPair<std::string,double> const**>((_QWORD **)v16 + 1, (_QWORD **)v22);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v16;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(uint64_t a1, uint64_t a2, google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)result = &off_1E3D5A308;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  *a1 = &off_1E3D5A3B0;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  *a1 = &off_1E3D5A3B0;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_19CB39696);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E3D5ACE0;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E3D5ACE0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::Clear(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if ((__int128 *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) &= 0xFFFFFFFC;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::IsInitialized()
{
  return 1;
}

double google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  double result;
  double *v8;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(__int128 **)(a1 + 16) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 16), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      v8 = (double *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      result = *v8;
      *(double *)(a1 + 24) = *v8;
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergePartialFromCodedStream(uint64_t a1, char **this, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  unint64_t TagFallback;
  __int128 *v8;
  int v9;
  char *v10;
  char *v11;
  unint64_t *v12;
  int v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  unint64_t v18;

  v5 = (google::protobuf::Arena **)(a1 + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        v6 = *this;
        if (*this >= this[1])
        {
          LODWORD(TagFallback) = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *this = v6 + 1;
            goto LABEL_7;
          }
        }
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)this, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 10)
          break;
        *(_DWORD *)(a1 + 40) |= 1u;
        v8 = *(__int128 **)(a1 + 16);
        if (v8 == &google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v8 = *(__int128 **)(a1 + 16);
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)this, (std::string *)v8);
        if (!(_DWORD)result)
          return result;
        v9 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v9;
        v11 = *this;
        v10 = this[1];
        if (*this < v10 && *v11 == 17)
        {
          v12 = (unint64_t *)(v11 + 1);
          *this = (char *)v12;
          goto LABEL_20;
        }
      }
      if ((_DWORD)TagFallback == 17)
        break;
      if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
        return 1;
      if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)this, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
    }
    v9 = *(_DWORD *)(a1 + 40);
    v12 = (unint64_t *)*this;
    v10 = this[1];
LABEL_20:
    v13 = v9 | 2;
    *(_DWORD *)(a1 + 40) = v13;
    v18 = 0;
    if ((int)v10 - (int)v12 < 8)
    {
      result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)this, &v18);
      if (!(_DWORD)result)
        return result;
      v16 = v18;
      v13 = *(_DWORD *)(a1 + 40);
      v14 = *this;
      v10 = this[1];
    }
    else
    {
      v15 = *v12;
      v14 = (char *)(v12 + 1);
      v16 = v15;
      *this = v14;
    }
    *(_QWORD *)(a1 + 24) = v16;
    *(_DWORD *)(a1 + 40) = v13 | 2;
  }
  while (v14 != v10 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v5 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v6 = *(unsigned __int8 *)(v5 + 23);
    if ((v6 & 0x80u) != 0)
      v6 = *(_DWORD *)(v5 + 8);
    v3 = (int)(v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    return v4 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v4 = 9;
  return v4 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  double *v5;
  google::protobuf::io::CodedOutputStream *v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  v5 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return google::protobuf::internal::WireFormatLite::WriteDouble(2, a2, *v5, v6);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  int v6;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v5 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v6 = *(unsigned __int8 *)(v5 + 23);
    if ((v6 & 0x80u) != 0)
      v6 = *(_DWORD *)(v5 + 8);
    v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    return v4 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v4 = 9;
  return v4 + v3;
}

char *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v5;
  char *v6;
  uint64_t v7;

  v5 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v6 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v5, a3 + 1);
  v7 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v6 = 17;
  *(_QWORD *)(v6 + 1) = v7;
  return v6 + 9;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryImpl(_QWORD *a1)
{
  *a1 = &off_1E3D5A3B0;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryImpl(_QWORD *a1)
{
  *a1 = &off_1E3D5A3B0;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
  JUMPOUT(0x1A1AD6260);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::value(uint64_t a1)
{
  int v3;
  const char *v4;
  int v5;
  std::string __p;

  if (!*(_QWORD *)(a1 + 8))
  {
    v3 = 3;
    v4 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    v5 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1 + 24;
}

void sub_19CA16714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,double> const*> &,google::protobuf::MapPair<std::string,double> const**>(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD **v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(_QWORD **)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(_QWORD **)((char *)a1 + v14 - 16);
        v16 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v12, v13);
        v14 = v15;
        if (!v16)
        {
          v17 = (_QWORD **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

google::protobuf::Arena **google::protobuf::Map<std::string,double>::operator[](uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  google::protobuf::Arena *v12;
  std::string *Aligned;
  std::string::__raw *v14;
  __int128 v15;
  google::protobuf::Arena **v16;
  google::protobuf::Arena *v17;
  std::string *v18;
  uint64_t v20;
  char v21;
  unint64_t v22;
  std::string __p;
  std::string::size_type v24;
  uint64_t v25[4];
  _QWORD v26[4];

  v4 = *(_QWORD **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v24 = 0;
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  v6 = v26[0];
  if (v26[0])
    goto LABEL_18;
  v7 = v4[1];
  v8 = *v4 + 1;
  v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      v20 = 2 * v7;
LABEL_37:
      google::protobuf::Map<std::string,std::string>::InnerMap::Resize((uint64_t)v4, v20, v5);
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v25, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      v11 = v25[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    v21 = 0;
    v22 = ((5 * v8) >> 2) + 1;
    do
      ++v21;
    while (v22 << v21 < v9);
    v20 = v7 >> v21 <= 8 ? 8 : v7 >> v21;
    if (v20 != v7)
      goto LABEL_37;
  }
  v11 = v26[3];
LABEL_11:
  v12 = (google::protobuf::Arena *)v4[5];
  if (v12)
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E0DE4EE8], 40);
  else
    Aligned = (std::string *)operator new(0x28uLL);
  v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v24;
  google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v25, (uint64_t)v4, v11, v14);
  ++*v4;
  v6 = v25[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (*(_QWORD *)a1)
    {
      v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E0DE4EE8], 32);
      v17 = *(google::protobuf::Arena **)a1;
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
      v16[3] = 0;
      std::string::operator=((std::string *)v16, (const std::string *)a2);
    }
    else
    {
      v18 = (std::string *)operator new();
      v16 = (google::protobuf::Arena **)v18;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v18->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      v16[3] = 0;
    }
    *(_QWORD *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_19CA16B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1A1AD6260](v14, 0x1012C4092066FB6);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(google::protobuf::Arena *a1)
{
  uint64_t result;

  if (a1)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E3D5ACE0;
  return result;
}

double google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::MessageLite,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>,google::protobuf::Map<std::string,double>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  google::protobuf::Arena **v3;
  uint64_t v4;
  double result;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  v3 = google::protobuf::Map<std::string,double>::operator[](*(_QWORD *)(a1 + 8), a1 + 16);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  result = *(double *)(v4 + 24);
  *(double *)v3 = result;
  return result;
}

void *CoreML::Specification::StringToDoubleMap::MergeFrom(CoreML::Specification::StringToDoubleMap *this, const CoreML::Specification::StringToDoubleMap *a2)
{
  uint64_t v4;
  void *result;
  unsigned __int8 *v6;
  char *v7;
  uint64_t v8;
  google::protobuf::Arena *v9;
  unsigned __int8 *v10[3];

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v10, *((_QWORD **)a2 + 5));
  v6 = v10[0];
  if (v10[0])
  {
    v7 = (char *)this + 24;
    do
    {
      v8 = *((_QWORD *)v6 + 3);
      v9 = *(google::protobuf::Arena **)(v8 + 24);
      *google::protobuf::Map<std::string,double>::operator[]((uint64_t)v7, v8) = v9;
      result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v10);
      v6 = v10[0];
    }
    while (v10[0]);
  }
  return result;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::StringToDoubleMap>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::StringToDoubleMap>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::StringToDoubleMap>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryLite(_QWORD *a1)
{
  *a1 = &off_1E3D5A3B0;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
  return a1;
}

void google::protobuf::internal::MapEntryLite<std::string,double,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryLite(_QWORD *a1)
{
  *a1 = &off_1E3D5A3B0;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *google::protobuf::Map<long long,std::string>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<long long,std::string>::clear(a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = google::protobuf::Map<long long,double>::InnerMap::~InnerMap(v2);
      MEMORY[0x1A1AD6260](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

void google::protobuf::Map<long long,std::string>::clear(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[3];
  _QWORD v8[3];

  v1 = (_QWORD *)a1[2];
  v2 = v1[3];
  v3 = v1[1];
  if (v3 > v2)
  {
    v5 = v1[4];
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 8 * v2);
      if (v6)
        break;
      if (v3 == ++v2)
        return;
    }
    if (v6 != *(_QWORD *)(v5 + 8 * (v2 ^ 1)) || (v6 = *(_QWORD *)(*(_QWORD *)v6 + 32)) != 0)
    {
      do
      {
        v7[0] = v6;
        v7[1] = (uint64_t)v1;
        v7[2] = v2;
        google::protobuf::Map<long long,std::string>::erase((uint64_t)v8, a1, v7);
        v6 = v8[0];
        v1 = (_QWORD *)v8[1];
        v2 = v8[2];
      }
      while (v8[0]);
    }
  }
}

__n128 google::protobuf::Map<long long,std::string>::erase(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _BOOL4 v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  __n128 result;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  _QWORD *v29;

  v6 = *a3;
  if (!*a2)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      if (*(char *)(v7 + 31) < 0)
        operator delete(*(void **)(v7 + 8));
      MEMORY[0x1A1AD6260](v7, 0x1012C404EF22A49);
      v6 = *a3;
    }
  }
  v27 = *(__n128 *)a3;
  v28 = a3[2];
  v8 = *(_QWORD *)(v6 + 16);
  if (v8)
    goto LABEL_7;
  v29 = 0;
  if (google::protobuf::Map<long long,double>::InnerMap::iterator_base<google::protobuf::Map<long long,double>::KeyValuePair>::revalidate_if_necessary((uint64_t)a3, &v29))
  {
    v9 = a3[2] + 1;
  }
  else
  {
    v10 = a3[2];
    v11 = *(_QWORD *)(*(_QWORD *)(a3[1] + 32) + 8 * v10);
    v12 = v29;
    v13 = (_QWORD *)v29[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v12[2];
        v15 = *v14 == (_QWORD)v12;
        v12 = v14;
      }
      while (!v15);
    }
    v29 = v14;
    if (v14 != (_QWORD *)(v11 + 8))
    {
      v8 = v14[4];
LABEL_7:
      *a3 = v8;
      goto LABEL_19;
    }
    v9 = v10 + 2;
  }
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::SearchFrom(a3, v9);
LABEL_19:
  v16 = (_QWORD *)a2[2];
  v29 = 0;
  v17 = google::protobuf::Map<long long,double>::InnerMap::iterator_base<google::protobuf::Map<long long,double>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v27, &v29);
  v18 = v28;
  v19 = (void *)v27.n128_u64[0];
  v20 = v16[4];
  v21 = *(_QWORD *)(v20 + 8 * v28);
  if (v17)
  {
    v22 = google::protobuf::Map<long long,double>::InnerMap::EraseFromLinkedList(v27.n128_i64[0], *(_QWORD *)(v20 + 8 * v28));
LABEL_25:
    *(_QWORD *)(v16[4] + 8 * v18) = v22;
    goto LABEL_26;
  }
  v23 = (uint64_t *)std::__tree<long long *,google::protobuf::Map<long long,double>::InnerMap::KeyCompare,google::protobuf::Map<long long,double>::MapAllocator<long long *>>::find<long long *>(v21, (uint64_t *)v29[4]);
  if ((uint64_t *)(v21 + 8) != v23)
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v21, v23);
  if (!*(_QWORD *)(v21 + 24))
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(v16[5], (_QWORD **)v21);
    v22 = 0;
    *(_QWORD *)(v16[4] + ((8 * v18) | 8)) = 0;
    v18 &= ~1uLL;
    goto LABEL_25;
  }
LABEL_26:
  if (!v16[5])
    operator delete(v19);
  --*v16;
  if (v18 == v16[3])
  {
    v25 = v16[1];
    if (v18 < v25)
    {
      v26 = v16[4];
      do
      {
        if (*(_QWORD *)(v26 + 8 * v18))
          break;
        v16[3] = ++v18;
      }
      while (v25 != v18);
    }
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  return result;
}

void CoreML::Specification::Int64ToStringMap::~Int64ToStringMap(CoreML::Specification::Int64ToStringMap *this)
{
  *(_QWORD *)this = &off_1E3D50080;
  google::protobuf::Map<long long,std::string>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D50080;
  google::protobuf::Map<long long,std::string>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::Int64ToStringMap::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64ToStringMap");
}

CoreML::Specification::Int64ToStringMap *CoreML::Specification::Int64ToStringMap::New(CoreML::Specification::Int64ToStringMap *this)
{
  return CoreML::Specification::Int64ToStringMap::New(this, 0);
}

CoreML::Specification::Int64ToStringMap *CoreML::Specification::Int64ToStringMap::New(CoreML::Specification::Int64ToStringMap *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Int64ToStringMap *v3;

  v3 = (CoreML::Specification::Int64ToStringMap *)operator new();
  CoreML::Specification::Int64ToStringMap::Int64ToStringMap(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Int64ToStringMap>(a2, v3);
  return v3;
}

void sub_19CA17180(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Int64ToStringMap::Clear(CoreML::Specification::Int64ToStringMap *this)
{
  google::protobuf::Map<long long,std::string>::clear((_QWORD *)this + 3);
}

uint64_t CoreML::Specification::Int64ToStringMap::IsInitialized(CoreML::Specification::Int64ToStringMap *this)
{
  return 1;
}

uint64_t CoreML::Specification::Int64ToStringMap::MergePartialFromCodedStream(CoreML::Specification::Int64ToStringMap *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int TagFallback;
  int v14;
  char *v15;
  int VarintSizeAsIntFallback;
  __n128 v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t Varint64Fallback;
  char v27;
  uint64_t v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  double v39;
  unsigned int *v40;
  std::string::size_type v41;
  _BOOL4 v42;
  uint64_t *v44;
  _QWORD v45[2];
  unint64_t v46;
  std::string::__raw *v47;
  uint64_t v48;

  v5 = (google::protobuf::Arena **)((char *)this + 16);
  v6 = (char *)this + 24;
  v7 = (uint64_t *)&v46;
  while (1)
  {
    v8 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
    {
      LODWORD(v9) = 0;
    }
    else
    {
      v9 = *v8;
      if (*v8 >= 1)
      {
        *(_QWORD *)a2 = v8 + 1;
        v10 = v9 | 0x100000000;
        if ((v10 & 0x100000000) == 0)
          goto LABEL_12;
        goto LABEL_8;
      }
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
    v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v10 & 0x100000000) == 0)
      goto LABEL_12;
LABEL_8:
    if (v10 == 10 && (v10 & 0xFFFFFFF8) == 8)
    {
      v45[0] = v5;
      v45[1] = v6;
      v48 = 0;
      v15 = *(char **)a2;
      if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && (*v15 & 0x80000000) == 0)
      {
        VarintSizeAsIntFallback = *v15;
        *(_QWORD *)a2 = v15 + 1;
        goto LABEL_24;
      }
      VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
      if (VarintSizeAsIntFallback < 0)
        goto LABEL_49;
LABEL_24:
      v18 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v19 = *((_DWORD *)a2 + 13);
      v20 = __OFSUB__(v19--, 1);
      *((_DWORD *)a2 + 13) = v19;
      if (v19 < 0 != v20)
        goto LABEL_49;
      v21 = v18;
      v23 = *(char **)a2;
      v22 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 < v22 && *v23 == 8)
      {
        *(_QWORD *)a2 = v23 + 1;
        if ((unint64_t)(v23 + 1) >= v22 || v23[1] < 0)
        {
          Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v27 & 1) != 0)
          {
            v24 = Varint64Fallback;
            v25 = *(char **)a2;
            v22 = *((_QWORD *)a2 + 1);
            goto LABEL_33;
          }
          goto LABEL_49;
        }
        v24 = v23[1];
        v25 = v23 + 2;
        *(_QWORD *)a2 = v25;
LABEL_33:
        v46 = v24;
        if ((int)v22 - (int)v25 >= 1 && *v25 == 18)
        {
          v28 = **((_QWORD **)this + 5);
          v29 = (std::string *)google::protobuf::Map<long long,std::string>::operator[]((uint64_t)v6, v7);
          v47 = (std::string::__raw *)v29;
          if (v28 != **((_QWORD **)this + 5))
          {
            google::protobuf::io::CodedInputStream::Skip(a2, 1u);
            if ((google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v29) & 1) == 0)
            {
              v17.n128_f64[0] = google::protobuf::Map<long long,std::string>::erase((uint64_t)v6, v7);
              goto LABEL_49;
            }
            if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1)
              && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              *((_BYTE *)a2 + 36) = 1;
              goto LABEL_62;
            }
            v30 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(*v5);
            v44 = v7;
            if (v30)
            {
              v48 = v30;
              v31 = v30;
            }
            else
            {
              v31 = 0;
            }
            v36 = (uint64_t *)(v30 + 24);
            v37 = *(_QWORD *)(v30 + 24);
            *(_DWORD *)(v30 + 40) |= 2u;
            if ((__int128 *)v37 == &google::protobuf::internal::fixed_address_empty_string)
            {
              google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v30 + 24), *(google::protobuf::Arena ***)(v30 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v37 = *v36;
            }
            if (*(char *)(v37 + 23) < 0)
              operator delete(*(void **)v37);
            v38 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
            *(_QWORD *)(v37 + 16) = *((_QWORD *)&v29->__r_.__value_.__l + 2);
            *(_OWORD *)v37 = v38;
            *((_BYTE *)&v29->__r_.__value_.__s + 23) = 0;
            v29->__r_.__value_.__s.__data_[0] = 0;
            v7 = v44;
            v39 = google::protobuf::Map<long long,std::string>::erase((uint64_t)v6, v44);
            *(_DWORD *)(v31 + 40) |= 1u;
            *(_QWORD *)(v31 + 16) = v24;
            v34 = (*(uint64_t (**)(uint64_t, google::protobuf::io::CodedInputStream *, double))(*(_QWORD *)v31 + 88))(v31, a2, v39);
            if (v34)
            {
              google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<long long,std::string>>::UseKeyAndValueFromEntry((uint64_t)v45);
              v31 = v48;
            }
            if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31))
            {
LABEL_61:
              if (v34)
                goto LABEL_62;
              goto LABEL_49;
            }
LABEL_46:
            v48 = 0;
            if ((v34 & 1) == 0)
              return 0;
LABEL_62:
            if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v21))
            {
              v40 = (unsigned int *)v47;
              if (SHIBYTE(v47->__words[2]) < 0)
              {
                v40 = (unsigned int *)v47->__words[0];
                v41 = v47->__words[1];
              }
              else
              {
                LODWORD(v41) = HIBYTE(v47->__words[2]);
              }
              v42 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(v40, v41, 0, (uint64_t)"CoreML.Specification.Int64ToStringMap.MapEntry.value");
              v35 = v42;
              if (v42)
                v14 = 0;
              else
                v14 = 6;
            }
            else
            {
LABEL_49:
              v35 = 0;
              v14 = 6;
            }
            if (v48)
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v48 + 8))(v48, v17);
            if (!v35)
              goto LABEL_18;
            goto LABEL_17;
          }
        }
      }
      else
      {
        v24 = 0;
        v46 = 0;
      }
      v32 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(*v5);
      if (v32)
      {
        v48 = v32;
        v33 = v32;
      }
      else
      {
        v33 = 0;
      }
      *(_DWORD *)(v32 + 40) |= 1u;
      *(_QWORD *)(v32 + 16) = v24;
      v34 = (*(uint64_t (**)(uint64_t, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v32 + 88))(v32, a2);
      if (v34)
      {
        google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<long long,std::string>>::UseKeyAndValueFromEntry((uint64_t)v45);
        v33 = v48;
      }
      if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33))
        goto LABEL_61;
      goto LABEL_46;
    }
LABEL_12:
    if (!(_DWORD)v10 || (v10 & 7) == 4)
      return 1;
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3))return 0;
LABEL_17:
    v14 = 0;
LABEL_18:
    if (v14)
      return 0;
  }
}

void sub_19CA175D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::Int64ToStringMap::ByteSizeLong(CoreML::Specification::Int64ToStringMap *this)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8[3];

  v2 = (_QWORD *)*((_QWORD *)this + 5);
  v3 = *(unsigned int *)v2;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v8, v2);
  v4 = 0;
  while (v8[0])
  {
    v5 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(v8[0][1], v8[0][1] + 8, *((google::protobuf::Arena **)this + 2));
    if (v4 != (_DWORD *)v5)
    {
      if (v4)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v4 = (_DWORD *)v5;
    }
    v6 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(v4);
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<long long,double>::InnerMap::iterator_base<google::protobuf::Map<long long,double>::KeyValuePair const>::operator++(v8);
  }
  if (v4)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  *((_DWORD *)this + 12) = v3;
  return v3;
}

void sub_19CA176C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *CoreML::Specification::Int64ToStringMap::SerializeWithCachedSizes(_QWORD *this, google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  google::protobuf::io::CodedOutputStream *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  google::protobuf::io::CodedOutputStream *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t *v29[3];

  v3 = (unint64_t *)this[5];
  v4 = *v3;
  if (!*v3)
    return this;
  v5 = (uint64_t)this;
  if (*((_BYTE *)a2 + 26))
  {
    if (v4 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_24:
      v14 = operator new[]();
      google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v29, *(_QWORD **)(v5 + 40));
      v15 = v29[0];
      if (v29[0])
      {
        v16 = 0;
        v17 = (_QWORD *)(v14 + 8);
        do
        {
          v18 = (_QWORD *)v15[1];
          *(v17 - 1) = *v18;
          *v17 = v18;
          google::protobuf::Map<long long,double>::InnerMap::iterator_base<google::protobuf::Map<long long,double>::KeyValuePair const>::operator++(v29);
          ++v16;
          v15 = v29[0];
          v17 += 2;
        }
        while (v29[0]);
      }
      else
      {
        v16 = 0;
      }
      v19 = 126 - 2 * __clz(v16);
      if (v16)
        v20 = v19;
      else
        v20 = 0;
      v21.n128_f64[0] = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,std::string> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,std::string> const*>*,false>(v14, (_QWORD *)(v14 + 16 * v16), v20, 1);
      if (v16)
      {
        v22 = 0;
        v23 = 8;
        do
        {
          v25 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*(_QWORD *)(v14 + v23), *(_QWORD *)(v14 + v23) + 8, *(google::protobuf::Arena **)(v5 + 16));
          if (v22 != v25)
          {
            if (v22)
              (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
            v22 = v25;
          }
          google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v22, a2, v24);
          v26 = *(_QWORD *)(v14 + v23);
          if (*(char *)(v26 + 31) < 0)
          {
            v27 = *(unsigned int **)(v26 + 8);
            v28 = *(_QWORD *)(v26 + 16);
          }
          else
          {
            v27 = (unsigned int *)(v26 + 8);
            LODWORD(v28) = *(unsigned __int8 *)(v26 + 31);
          }
          google::protobuf::internal::WireFormatLite::VerifyUtf8String(v27, v28, 1, (uint64_t)"CoreML.Specification.Int64ToStringMap.MapEntry.value");
          v23 += 16;
          --v16;
        }
        while (v16);
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      }
      return (_QWORD *)MEMORY[0x1A1AD6248](v14, 0x1060C80832E3BDALL, v21);
    }
  }
  else if (v4 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_24;
  }
  this = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v29, v3);
  v7 = 0;
  while (v29[0])
  {
    v9 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(v29[0][1], v29[0][1] + 8, *(google::protobuf::Arena **)(v5 + 16));
    if (v7 != v9)
    {
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v7 = v9;
    }
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v7, a2, v8);
    v10 = v29[0][1];
    if (*(char *)(v10 + 31) < 0)
    {
      v11 = *(unsigned int **)(v10 + 8);
      v12 = *(_QWORD *)(v10 + 16);
    }
    else
    {
      v11 = (unsigned int *)(v10 + 8);
      LODWORD(v12) = *(unsigned __int8 *)(v10 + 31);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (uint64_t)"CoreML.Specification.Int64ToStringMap.MapEntry.value");
    this = google::protobuf::Map<long long,double>::InnerMap::iterator_base<google::protobuf::Map<long long,double>::KeyValuePair const>::operator++(v29);
  }
  if (v7)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return this;
}

void sub_19CA17950(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1A1AD6248](v1, 0x1060C80832E3BDALL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Int64ToStringMap::GetCachedSize(CoreML::Specification::Int64ToStringMap *this)
{
  return *((unsigned int *)this + 12);
}

double std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,std::string> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,std::string> const*>*,false>(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  _QWORD *v36;
  BOOL v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int64_t v47;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  BOOL v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _OWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(uint64_t a1, uint64_t a2, google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 32) = a3;
  }
  else
  {
    result = operator new();
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  *(_QWORD *)(result + 24) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)result = &off_1E3D5A5A8;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  *a1 = &off_1E3D5A650;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[3]);
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  *a1 = &off_1E3D5A650;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[3]);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_19CB39696);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E3D5AE30;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  uint64_t result;
  uint64_t v5;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 32) = a2;
  }
  else
  {
    result = operator new();
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  *(_QWORD *)(result + 24) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E3D5AE30;
  *(_QWORD *)(result + 8) = v5;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Clear(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(result + 16) = 0;
  v1 = *(_QWORD *)(result + 24);
  if ((__int128 *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  *(_DWORD *)(result + 40) &= 0xFFFFFFFC;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::IsInitialized()
{
  return 1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      v5 = (std::string **)(a1 + 24);
      if (*(__int128 **)(a1 + 24) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 24), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(a1 + 24), *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergePartialFromCodedStream(uint64_t a1, google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  google::protobuf::Arena **v5;
  char *v6;
  unint64_t TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  unint64_t Varint64Fallback;
  char *v12;
  int v13;
  char v14;
  __int128 *v15;
  uint64_t result;

  v5 = (google::protobuf::Arena **)(a1 + 24);
  do
  {
    while (1)
    {
      while (1)
      {
        v6 = *(char **)this;
        if (*(_QWORD *)this >= *((_QWORD *)this + 1))
        {
          LODWORD(TagFallback) = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *(_QWORD *)this = v6 + 1;
            goto LABEL_7;
          }
        }
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 8)
          break;
        v8 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v8;
        v10 = *(char **)this;
        v9 = *((_QWORD *)this + 1);
        if (*(_QWORD *)this >= v9 || *v10 < 0)
        {
          Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
          if ((v14 & 1) == 0)
            return 0;
          v8 = *(_DWORD *)(a1 + 40);
          v12 = *(char **)this;
          v9 = *((_QWORD *)this + 1);
        }
        else
        {
          Varint64Fallback = *v10;
          v12 = v10 + 1;
          *(_QWORD *)this = v12;
        }
        *(_QWORD *)(a1 + 16) = Varint64Fallback;
        v13 = v8 | 1;
        *(_DWORD *)(a1 + 40) = v13;
        if ((unint64_t)v12 < v9 && *v12 == 18)
        {
          *(_QWORD *)this = v12 + 1;
          goto LABEL_22;
        }
      }
      if ((_DWORD)TagFallback != 18)
        break;
      v13 = *(_DWORD *)(a1 + 40);
LABEL_22:
      *(_DWORD *)(a1 + 40) = v13 | 2;
      v15 = *(__int128 **)(a1 + 24);
      if (v15 == &google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena ***)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v15 = *(__int128 **)(a1 + 24);
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)this, (std::string *)v15);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*(_QWORD *)this == *((_QWORD *)this + 1)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField(this, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return 0;
}

unint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v3 = ((9 * (__clz(*(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1) | 1) ^ 0x3F) + 73) >> 6)
       + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_DWORD *)(v4 + 8);
  v6 = (int)(v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6)) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t *v4;
  google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;

  v4 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteInt64(1, *v4, a2, v5);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return google::protobuf::internal::WireFormatLite::WriteString(2u, v6, a2);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v3 = ((9 * (__clz(*(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1) | 1) ^ 0x3F) + 73) >> 6)
       + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_DWORD *)(v4 + 8);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

char *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  const void **v9;

  v5 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 8;
  v6 = a3 + 1;
  if (v5 < 0x80)
  {
    LOBYTE(v7) = v5;
  }
  else
  {
    do
    {
      *v6++ = v5 | 0x80;
      v7 = v5 >> 7;
      v8 = v5 >> 14;
      v5 >>= 7;
    }
    while (v8);
  }
  *v6 = v7;
  v9 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  v6[1] = 18;
  return google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v9, v6 + 2);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

_QWORD *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(_QWORD *a1)
{
  *a1 = &off_1E3D5A650;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[3]);
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(_QWORD *a1)
{
  *a1 = &off_1E3D5A650;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[3]);
  JUMPOUT(0x1A1AD6260);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::key(uint64_t a1)
{
  return a1 + 16;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::value(uint64_t a1)
{
  int v3;
  const char *v4;
  int v5;
  std::string __p;

  if (!*(_QWORD *)(a1 + 8))
  {
    v3 = 3;
    v4 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    v5 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(a1 + 24);
}

void sub_19CA1887C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,std::string> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,std::string> const*>*>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (_QWORD *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32));
      v9 = (_QWORD *)(a1 + 48);
      if ((_QWORD *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (_QWORD *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (_QWORD *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

_QWORD *google::protobuf::Map<long long,std::string>::operator[](uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  google::protobuf::Arena *v12;
  uint64_t *Aligned;
  _QWORD *v14;
  google::protobuf::Arena *v15;
  uint64_t v17;
  char v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21[4];
  _QWORD v22[4];

  v4 = *(_QWORD **)(a1 + 16);
  v20 = (unint64_t)*a2;
  google::protobuf::Map<long long,double>::InnerMap::FindHelper(v22, v4, (uint64_t *)&v20, 0);
  v6 = v22[0];
  if (v22[0])
    goto LABEL_12;
  v7 = v4[1];
  v8 = *v4 + 1;
  v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      v17 = 2 * v7;
LABEL_26:
      google::protobuf::Map<long long,std::string>::InnerMap::Resize((uint64_t)v4, v17, v5);
      google::protobuf::Map<long long,double>::InnerMap::FindHelper(v21, v4, (uint64_t *)&v20, 0);
      v11 = v21[3];
      goto LABEL_8;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    v18 = 0;
    v19 = ((5 * v8) >> 2) + 1;
    do
      ++v18;
    while (v19 << v18 < v9);
    v17 = v7 >> v18 <= 8 ? 8 : v7 >> v18;
    if (v17 != v7)
      goto LABEL_26;
  }
  v11 = v22[3];
LABEL_8:
  v12 = (google::protobuf::Arena *)v4[5];
  if (v12)
    Aligned = (uint64_t *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E0DE4EE8], 24);
  else
    Aligned = (uint64_t *)operator new(0x18uLL);
  *(_OWORD *)Aligned = v20;
  google::protobuf::Map<long long,std::string>::InnerMap::InsertUnique(v21, (uint64_t)v4, v11, Aligned);
  ++*v4;
  v6 = v21[0];
LABEL_12:
  v14 = *(_QWORD **)(v6 + 8);
  if (!v14)
  {
    if (*(_QWORD *)a1)
    {
      v14 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E0DE4EE8], 32);
      *v14 = 0;
      v15 = *(google::protobuf::Arena **)a1;
      v14[2] = 0;
      v14[3] = 0;
      v14[1] = 0;
      google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v15, (google::protobuf::Arena *)(v14 + 1));
      *v14 = *a2;
    }
    else
    {
      v14 = (_QWORD *)operator new();
      *v14 = *a2;
      v14[1] = 0;
      v14[2] = 0;
      v14[3] = 0;
    }
    *(_QWORD *)(v6 + 8) = v14;
  }
  return v14 + 1;
}

double google::protobuf::Map<long long,std::string>::erase(uint64_t a1, uint64_t *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  google::protobuf::Map<long long,double>::InnerMap::FindHelper(&v6, *(_QWORD **)(a1 + 16), a2, 0);
  result = *(double *)&v6;
  if ((_QWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    *(_QWORD *)&result = google::protobuf::Map<long long,std::string>::erase((uint64_t)&v6, (_QWORD *)a1, (uint64_t *)&v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(google::protobuf::Arena *a1)
{
  uint64_t result;

  if (a1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 32) = a1;
  }
  else
  {
    result = operator new();
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  *(_QWORD *)(result + 24) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E3D5AE30;
  return result;
}

__n128 google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<long long,std::string>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 136))(*(_QWORD *)(a1 + 32));
  v2 = (void **)google::protobuf::Map<long long,std::string>::operator[](*(_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 24) = v2;
  v3 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 40) |= 2u;
  v4 = *(_QWORD *)(v3 + 24);
  if ((__int128 *)v4 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v3 + 24), *(google::protobuf::Arena ***)(v3 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
    v4 = *(_QWORD *)(v3 + 24);
    v2 = *(void ***)(a1 + 24);
  }
  if (*((char *)v2 + 23) < 0)
    operator delete(*v2);
  result = *(__n128 *)v4;
  v2[2] = *(void **)(v4 + 16);
  *(__n128 *)v2 = result;
  *(_BYTE *)(v4 + 23) = 0;
  *(_BYTE *)v4 = 0;
  return result;
}

uint64_t *google::protobuf::Map<long long,std::string>::InnerMap::InsertUnique(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v4 = a4;
  v5 = a3;
  v7 = result;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(v8 + 8 * a3);
  if (!v9)
  {
    a4[2] = 0;
    *(_QWORD *)(v8 + 8 * a3) = a4;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a3 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a3);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 16);
    }
    while (v11);
    if (v10 < 8)
    {
      a4[2] = v9;
      *(_QWORD *)(v8 + 8 * a3) = a4;
LABEL_11:
      *v7 = v4;
      v7[1] = a2;
      v7[2] = v5;
      return result;
    }
    google::protobuf::Map<long long,std::string>::InnerMap::TreeConvert(a2, a3);
    v4[2] = 0;
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v5);
    v15 = v4;
    result = std::__tree<long long *,google::protobuf::Map<long long,double>::InnerMap::KeyCompare,google::protobuf::Map<long long,double>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(v14, v4, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = (uint64_t *)result[4];
LABEL_8:
    v12 = *(_QWORD *)(a2 + 24);
    if (v5 < v12)
      v12 = v5;
    *(_QWORD *)(a2 + 24) = v12;
    goto LABEL_11;
  }
  a4[2] = 0;
  v13 = *(_QWORD *)(v8 + 8 * a3);
  v15 = a4;
  result = std::__tree<long long *,google::protobuf::Map<long long,double>::InnerMap::KeyCompare,google::protobuf::Map<long long,double>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(v13, a4, (uint64_t *)&v15);
  *v7 = result[4];
  v7[1] = a2;
  v7[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

uint64_t *google::protobuf::Map<long long,std::string>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  google::protobuf::Arena *v4;
  _QWORD *Aligned;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  _QWORD **v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t **v13;
  BOOL v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD **v20;
  uint64_t v21;
  uint64_t *result;
  _QWORD **v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x1E0DE4EE8], 32);
  else
    Aligned = operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v25 = *(_QWORD *)(a1 + 40);
  v7 = v25;
  v26 = 0;
  v23 = &v24;
  v24 = 0;
  Aligned[1] = 0;
  v8 = (uint64_t **)(Aligned + 1);
  Aligned[2] = v7;
  Aligned[3] = 0;
  *Aligned = Aligned + 1;
  v9 = v23;
  if (v23 != &v24)
  {
    do
    {
      v10 = *(uint64_t **)(v6 + 8);
      v11 = v8;
      if (*(uint64_t ***)v6 == v8)
        goto LABEL_11;
      v12 = *(_QWORD *)(v6 + 8);
      v13 = v8;
      if (v10)
      {
        do
        {
          v11 = (uint64_t **)v12;
          v12 = *(_QWORD *)(v12 + 8);
        }
        while (v12);
      }
      else
      {
        do
        {
          v11 = (uint64_t **)v13[2];
          v14 = *v11 == (uint64_t *)v13;
          v13 = v11;
        }
        while (v14);
      }
      v15 = *v9[4];
      if (*v11[4] < v15)
      {
LABEL_11:
        if (v10)
          v16 = v11;
        else
          v16 = v8;
        if (v10)
          v17 = v11 + 1;
        else
          v17 = v8;
      }
      else
      {
        v16 = v8;
        v17 = v8;
        if (v10)
        {
          v17 = v8;
          while (1)
          {
            while (1)
            {
              v16 = (uint64_t **)v10;
              v21 = *(_QWORD *)v10[4];
              if (v15 >= v21)
                break;
              v10 = *v16;
              v17 = v16;
              if (!*v16)
                goto LABEL_18;
            }
            if (v21 >= v15)
              break;
            v17 = v16 + 1;
            v10 = v16[1];
            if (!v10)
              goto LABEL_18;
          }
        }
      }
      if (!*v17)
      {
LABEL_18:
        v18 = (uint64_t *)google::protobuf::Map<std::string,std::string>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate(*(google::protobuf::Arena **)(v6 + 16));
        v18[4] = (uint64_t)v9[4];
        std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)v6, (uint64_t)v16, v17, v18);
      }
      v19 = v9[1];
      if (v19)
      {
        do
        {
          v20 = (_QWORD **)v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD **)v9[2];
          v14 = *v20 == v9;
          v9 = v20;
        }
        while (!v14);
      }
      v9 = v20;
    }
    while (v20 != &v24);
  }
  std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy((uint64_t)&v23, v24);
  google::protobuf::Map<long long,double>::InnerMap::CopyListToTree(*(uint64_t **)(a1 + 32), a2, v6);
  result = google::protobuf::Map<long long,double>::InnerMap::CopyListToTree(*(uint64_t **)(a1 + 32), a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_19CA19058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;

  std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy(v10, *(_QWORD **)(v10 + 8));
  std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void google::protobuf::Map<long long,std::string>::InnerMap::Resize(uint64_t a1, uint64_t a2, size_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  google::protobuf::Arena **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15[3];

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2;
  v6 = *(_QWORD **)(a1 + 32);
  v7 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(*(google::protobuf::Arena **)(a1 + 40), a2, a3);
  bzero(v7, 8 * a2);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 32) = v7;
  while (v8 < v5)
  {
    v9 = v6[v8];
    if (v9)
    {
      if (v9 == v6[v8 ^ 1])
      {
        v11 = *(_QWORD **)v9;
        do
        {
          google::protobuf::Map<long long,std::string>::InnerMap::InsertUnique(v15, a1, (*(_QWORD *)(a1 + 8) - 1) & (*(_QWORD *)(a1 + 16) + *(_QWORD *)v11[4]), (uint64_t *)v11[4]);
          v12 = (_QWORD *)v11[1];
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v11[2];
              v14 = *v13 == (_QWORD)v11;
              v11 = v13;
            }
            while (!v14);
          }
          v11 = v13;
        }
        while (v13 != (_QWORD *)(v9 + 8));
        ++v8;
        google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(*(_QWORD *)(a1 + 40), (_QWORD **)v9);
      }
      else
      {
        do
        {
          v10 = *(_QWORD *)(v9 + 16);
          google::protobuf::Map<long long,std::string>::InnerMap::InsertUnique(v15, a1, (*(_QWORD *)(a1 + 8) - 1) & (*(_QWORD *)(a1 + 16) + *(_QWORD *)v9), (uint64_t *)v9);
          v9 = v10;
        }
        while (v10);
      }
    }
    ++v8;
  }
  if (!*(_QWORD *)(a1 + 40))
    operator delete(v6);
}

void *CoreML::Specification::Int64ToStringMap::MergeFrom(CoreML::Specification::Int64ToStringMap *this, const CoreML::Specification::Int64ToStringMap *a2)
{
  uint64_t v4;
  void *result;
  uint64_t *v6;
  char *v7;
  _QWORD *v8;
  const std::string *v9;
  std::string *v10;
  uint64_t *v11[3];

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v11, *((_QWORD **)a2 + 5));
  v6 = v11[0];
  if (v11[0])
  {
    v7 = (char *)this + 24;
    do
    {
      v8 = (_QWORD *)v6[1];
      v9 = (const std::string *)(v8 + 1);
      v10 = (std::string *)google::protobuf::Map<long long,std::string>::operator[]((uint64_t)v7, v8);
      std::string::operator=(v10, v9);
      result = google::protobuf::Map<long long,double>::InnerMap::iterator_base<google::protobuf::Map<long long,double>::KeyValuePair const>::operator++(v11);
      v6 = v11[0];
    }
    while (v11[0]);
  }
  return result;
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Int64ToStringMap>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64ToStringMap>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64ToStringMap>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryLite(_QWORD *a1)
{
  *a1 = &off_1E3D5A650;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[3]);
  return a1;
}

void google::protobuf::internal::MapEntryLite<long long,std::string,(google::protobuf::internal::WireFormatLite::FieldType)3,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryLite(_QWORD *a1)
{
  *a1 = &off_1E3D5A650;
  if ((_QWORD *)a1[1] != a1 && !a1[4])
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[3]);
  JUMPOUT(0x1A1AD6260);
}

void CoreML::validate<(MLModelType)200>(CoreML::Specification::protobuf_Model_2eproto *a1, uint64_t a2)
{
  uint64_t *v4;
  const CoreML::Specification::Pipeline *v5;
  const CoreML::Specification::Pipeline *v6;

  if (*(_DWORD *)(a2 + 44) == 200)
  {
    v4 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(a1);
    v4 = &CoreML::Specification::_PipelineClassifier_default_instance_;
  }
  v5 = (const CoreML::Specification::Pipeline *)v4[2];
  if (v5)
    v6 = v5;
  else
    v6 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
  CoreML::validate(a1, (const CoreML::Specification::Model *)a2, v6);
}

void CoreML::validate(CoreML *this, const CoreML::Specification::Model *a2, const CoreML::Specification::Pipeline *a3)
{
  CoreML *v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  const CoreML::Specification::Model **v16;
  const CoreML::Specification::Model **v17;
  uint64_t v18;
  const CoreML::Specification::Model *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  std::string::size_type size;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  std::string::size_type v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  void *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  __int128 *v67;
  __int128 v68;
  void **v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  std::string::size_type v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  std::string::size_type v87;
  std::string *v88;
  __int128 v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  __int128 v97;
  std::string *v98;
  __int128 v99;
  int v101;
  void **v102;
  std::string v104;
  void *__p[2];
  std::string::size_type v106;
  char v107;
  std::string v108;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string v112;
  uint64_t v113[4];
  int v114;

  v3 = this;
  v4 = *((int *)a3 + 6);
  if ((_DWORD)v4)
  {
    memset(v113, 0, sizeof(v113));
    v114 = 1065353216;
    v7 = (uint64_t *)*((_QWORD *)a2 + 2);
    if (!v7)
      v7 = &CoreML::Specification::_ModelDescription_default_instance_;
    v8 = v7[4];
    if (v8)
      v9 = v8 + 8;
    else
      v9 = 0;
    v10 = *((int *)v7 + 6);
    v101 = v4;
    if (!(_DWORD)v10)
    {
      v14 = (_QWORD *)((char *)a3 + 32);
      v18 = *((_QWORD *)a3 + 4);
      if (v18)
        v16 = (const CoreML::Specification::Model **)(v18 + 8);
      else
        v16 = 0;
      v17 = &v16[v4];
LABEL_21:
      v102 = (void **)((char *)v3 + 8);
      while (1)
      {
        v19 = *v16;
        v20 = (uint64_t *)*((_QWORD *)*v16 + 2);
        if (!v20)
          v20 = &CoreML::Specification::_ModelDescription_default_instance_;
        v21 = v20[4];
        v22 = v21 ? v21 + 8 : 0;
        v23 = *((int *)v20 + 6);
        if ((_DWORD)v23)
          break;
LABEL_32:
        v3 = this;
        CoreML::Model::validate(this, v19);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          goto LABEL_138;
        v28 = (uint64_t *)*((_QWORD *)v19 + 2);
        if (!v28)
          v28 = &CoreML::Specification::_ModelDescription_default_instance_;
        v29 = v28[7];
        if (v29)
          v30 = v29 + 8;
        else
          v30 = 0;
        v31 = *((int *)v28 + 12);
        if ((_DWORD)v31)
        {
          v32 = 8 * v31;
          do
          {
            v33 = *(_QWORD *)v30;
            __p[0] = *(void **)(*(_QWORD *)v30 + 16);
            *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,CoreML::Specification::FeatureDescription const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CoreML::Specification::FeatureDescription const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CoreML::Specification::FeatureDescription const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CoreML::Specification::FeatureDescription const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v113, (unsigned __int8 *)__p[0], (__int128 **)__p)+ 5) = v33;
            v30 += 8;
            v32 -= 8;
          }
          while (v32);
        }
        if (*((char *)this + 31) < 0)
          operator delete(*v102);
        if (++v16 == v17)
          goto LABEL_44;
      }
      v24 = 8 * v23;
      while (1)
      {
        v25 = *(_QWORD *)v22;
        v26 = *(unsigned __int8 **)(*(_QWORD *)v22 + 16);
        v27 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>>>::find<std::string>(v113, v26);
        if (!v27)
        {
          std::operator+<char>();
          v45 = std::string::append(&v110, "' of model '");
          v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
          v111.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v46;
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v109, "CoreML.Specification.ModelDescription");
          if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v47 = &v109;
          else
            v47 = (std::string *)v109.__r_.__value_.__r.__words[0];
          if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v109.__r_.__value_.__r.__words[2]);
          else
            size = v109.__r_.__value_.__l.__size_;
          v49 = std::string::append(&v111, (const std::string::value_type *)v47, size);
          v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          v112.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v50;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          v51 = std::string::append(&v112, "' does not present in pipeline input or previous model.");
          v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v106 = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)this = 13;
          std::operator+<char>();
          if (SHIBYTE(v106) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v112.__r_.__value_.__l.__data_);
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v109.__r_.__value_.__l.__data_);
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v111.__r_.__value_.__l.__data_);
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          {
            v44 = (void *)v110.__r_.__value_.__r.__words[0];
            goto LABEL_137;
          }
          goto LABEL_138;
        }
        if (!CoreML::Specification::isEquivalent((CoreML::Specification *)v26, *(const CoreML::Specification::FeatureDescription **)(v25 + 32), *(const CoreML::Specification::FeatureDescription **)(*((_QWORD *)v27 + 5) + 16), *(uint64_t **)(*((_QWORD *)v27 + 5) + 32)))break;
        v22 += 8;
        v24 -= 8;
        if (!v24)
          goto LABEL_32;
      }
      std::operator+<char>();
      v53 = std::string::append(&v109, "' of model '");
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v110.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v108, "CoreML.Specification.ModelDescription");
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = &v108;
      else
        v55 = (std::string *)v108.__r_.__value_.__r.__words[0];
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
      else
        v56 = v108.__r_.__value_.__l.__size_;
      v57 = std::string::append(&v110, (const std::string::value_type *)v55, v56);
      v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v111.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      v59 = std::string::append(&v111, "' does not match the type previously specified by the pipeline input or the output of a previous model.");
      v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      v61 = std::string::append(&v112, " For the second case, make sure the input and previous model's output has the matching name and shapes.");
      v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v106 = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)this = 1;
      std::operator+<char>();
      if (SHIBYTE(v106) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      {
        v63 = (void *)v108.__r_.__value_.__r.__words[0];
        goto LABEL_92;
      }
LABEL_93:
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_138;
      v44 = (void *)v109.__r_.__value_.__r.__words[0];
      goto LABEL_137;
    }
    v11 = 8 * v10;
    do
    {
      v12 = *(_QWORD *)v9;
      __p[0] = *(void **)(*(_QWORD *)v9 + 16);
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,CoreML::Specification::FeatureDescription const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CoreML::Specification::FeatureDescription const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CoreML::Specification::FeatureDescription const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CoreML::Specification::FeatureDescription const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v113, (unsigned __int8 *)__p[0], (__int128 **)__p)+ 5) = v12;
      v9 += 8;
      v11 -= 8;
    }
    while (v11);
    v14 = (_QWORD *)((char *)a3 + 32);
    v13 = *((_QWORD *)a3 + 4);
    v15 = *((int *)a3 + 6);
    if (v13)
      v16 = (const CoreML::Specification::Model **)(v13 + 8);
    else
      v16 = 0;
    if ((_DWORD)v15)
    {
      v17 = &v16[v15];
      goto LABEL_21;
    }
LABEL_44:
    v34 = (uint64_t *)*((_QWORD *)a2 + 2);
    if (!v34)
      v34 = &CoreML::Specification::_ModelDescription_default_instance_;
    v35 = v34[7];
    if (v35)
      v36 = v35 + 8;
    else
      v36 = 0;
    v37 = *((int *)v34 + 12);
    if ((_DWORD)v37)
    {
      v38 = 8 * v37;
      while (1)
      {
        v39 = *(_QWORD *)v36;
        v40 = *(unsigned __int8 **)(*(_QWORD *)v36 + 16);
        v41 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>>>::find<std::string>(v113, v40);
        if (!v41)
        {
          std::operator+<char>();
          v78 = std::string::append(&v112, "' not present in pipeline input or a contained model.");
          v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
          v106 = v78->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v79;
          v78->__r_.__value_.__l.__size_ = 0;
          v78->__r_.__value_.__r.__words[2] = 0;
          v78->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)v3 = 13;
          std::operator+<char>();
          goto LABEL_133;
        }
        if (!CoreML::Specification::isEquivalent((CoreML::Specification *)v40, *(const CoreML::Specification::FeatureDescription **)(v39 + 32), *(const CoreML::Specification::FeatureDescription **)(*((_QWORD *)v41 + 5) + 16), *(uint64_t **)(*((_QWORD *)v41 + 5) + 32)))break;
        v36 += 8;
        v38 -= 8;
        if (!v38)
          goto LABEL_54;
      }
      std::operator+<char>();
      v80 = std::string::append(&v112, "' does not match type produced in pipeline input.");
      v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v106 = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v3 = 1;
      std::operator+<char>();
LABEL_133:
      if (SHIBYTE(v106) < 0)
        operator delete(__p[0]);
      if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_138;
      v44 = (void *)v112.__r_.__value_.__r.__words[0];
      goto LABEL_137;
    }
LABEL_54:
    if (*((_BYTE *)a2 + 28))
    {
      v42 = (v101 - 1);
      if (v101 >= 2)
      {
        v43 = 0;
        while (1)
        {
          CoreML::Specification::Model::Model((CoreML::Specification::Model *)__p, *(const CoreML::Specification::Model **)(*v14 + 8 * v43 + 8));
          if (v107)
            break;
          CoreML::Specification::Model::~Model((CoreML::Specification::Model *)__p);
          if (v42 == ++v43)
            goto LABEL_59;
        }
        std::to_string(&v110, v43);
        v92 = std::string::insert(&v110, 0, "Only the last model in the pipeline can be updatable. Model at position '");
        v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
        v111.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v93;
        v92->__r_.__value_.__l.__size_ = 0;
        v92->__r_.__value_.__r.__words[2] = 0;
        v92->__r_.__value_.__r.__words[0] = 0;
        v94 = std::string::append(&v111, "' is marked as updatable.");
        v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
        v112.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v95;
        v94->__r_.__value_.__l.__size_ = 0;
        v94->__r_.__value_.__r.__words[2] = 0;
        v94->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)v3 = 15;
        std::operator+<char>();
LABEL_156:
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        CoreML::Specification::Model::~Model((CoreML::Specification::Model *)__p);
        goto LABEL_138;
      }
LABEL_59:
      if (!*(_BYTE *)(*(_QWORD *)(*v14 + 8 * (int)v42 + 8) + 28))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Last model in an updatable pipeline model should be marked as updatable.");
        *(_QWORD *)v3 = 15;
        std::operator+<char>();
        if (SHIBYTE(v106) < 0)
        {
          v44 = __p[0];
LABEL_137:
          operator delete(v44);
        }
LABEL_138:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v113);
        return;
      }
    }
    else if (v101 >= 1)
    {
      v64 = 0;
      while (1)
      {
        CoreML::Specification::Model::Model((CoreML::Specification::Model *)__p, *(const CoreML::Specification::Model **)(*v14 + 8 * v64 + 8));
        if (v107)
          break;
        CoreML::Specification::Model::~Model((CoreML::Specification::Model *)__p);
        if (v101 == ++v64)
          goto LABEL_101;
      }
      std::to_string(&v110, v64);
      v96 = std::string::insert(&v110, 0, "Found an updatable model at '");
      v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
      v111.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v97;
      v96->__r_.__value_.__l.__size_ = 0;
      v96->__r_.__value_.__r.__words[2] = 0;
      v96->__r_.__value_.__r.__words[0] = 0;
      v98 = std::string::append(&v111, "' inside a non-updatable pipeline.");
      v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v99;
      v98->__r_.__value_.__l.__size_ = 0;
      v98->__r_.__value_.__r.__words[2] = 0;
      v98->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v3 = 15;
      std::operator+<char>();
      goto LABEL_156;
    }
LABEL_101:
    v65 = *((_DWORD *)a3 + 12);
    if (v65 >= 1)
    {
      if (v65 == v101)
      {
        v66 = 0;
        __p[1] = 0;
        v106 = 0;
        __p[0] = &__p[1];
        while (1)
        {
          v67 = *(__int128 **)(*((_QWORD *)a3 + 7) + 8 * v66 + 8);
          if (*((char *)v67 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)v67, *((_QWORD *)v67 + 1));
          }
          else
          {
            v68 = *v67;
            v112.__r_.__value_.__r.__words[2] = *((_QWORD *)v67 + 2);
            *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v68;
          }
          v69 = (void **)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)__p, &v112);
          if (&__p[1] == v69)
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)__p, &v112, (uint64_t)&v112);
          }
          else
          {
            std::operator+<char>();
            v70 = std::string::append(&v108, "' at index '");
            v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
            v109.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v71;
            v70->__r_.__value_.__l.__size_ = 0;
            v70->__r_.__value_.__r.__words[2] = 0;
            v70->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v104, v66);
            if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v72 = &v104;
            else
              v72 = (std::string *)v104.__r_.__value_.__r.__words[0];
            if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v73 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
            else
              v73 = v104.__r_.__value_.__l.__size_;
            v74 = std::string::append(&v109, (const std::string::value_type *)v72, v73);
            v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
            v110.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v75;
            v74->__r_.__value_.__l.__size_ = 0;
            v74->__r_.__value_.__r.__words[2] = 0;
            v74->__r_.__value_.__r.__words[0] = 0;
            v76 = std::string::append(&v110, " has already been used for previous models");
            v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
            v111.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v77;
            v76->__r_.__value_.__l.__size_ = 0;
            v76->__r_.__value_.__r.__words[2] = 0;
            v76->__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)this = 13;
            std::operator+<char>();
            if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v111.__r_.__value_.__l.__data_);
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v110.__r_.__value_.__l.__data_);
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v104.__r_.__value_.__l.__data_);
            if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v109.__r_.__value_.__l.__data_);
            if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v108.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v112.__r_.__value_.__l.__data_);
          if (&__p[1] != v69)
            break;
          if (v101 == ++v66)
          {
            std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)__p[1]);
            v3 = this;
            goto LABEL_130;
          }
        }
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)__p[1]);
        goto LABEL_138;
      }
      std::to_string(&v109, v65);
      v82 = std::string::insert(&v109, 0, "The number of pipeline model names '");
      v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      v110.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      v84 = std::string::append(&v110, "' doesn't match the number of models '");
      v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      v111.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v108, v101);
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v86 = &v108;
      else
        v86 = (std::string *)v108.__r_.__value_.__r.__words[0];
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v87 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
      else
        v87 = v108.__r_.__value_.__l.__size_;
      v88 = std::string::append(&v111, (const std::string::value_type *)v86, v87);
      v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v89;
      v88->__r_.__value_.__l.__size_ = 0;
      v88->__r_.__value_.__r.__words[2] = 0;
      v88->__r_.__value_.__r.__words[0] = 0;
      v90 = std::string::append(&v112, "'");
      v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v106 = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v3 = 13;
      std::operator+<char>();
      if (SHIBYTE(v106) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v108.__r_.__value_.__l.__data_);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      {
        v63 = (void *)v111.__r_.__value_.__r.__words[0];
LABEL_92:
        operator delete(v63);
      }
      goto LABEL_93;
    }
LABEL_130:
    CoreML::Result::Result(v3);
    goto LABEL_138;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Pipeline must contain one or more models.");
  *(_QWORD *)v3 = 13;
  std::operator+<char>();
  if (SHIBYTE(v106) < 0)
    operator delete(__p[0]);
}

void sub_19CA19F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;

  if (*(char *)(v55 - 169) < 0)
    operator delete(*(void **)(v55 - 192));
  if (a55 < 0)
    operator delete(__p);
  if (a48 < 0)
    operator delete(a43);
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)&a20);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v55 - 160);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,CoreML::Specification::FeatureDescription const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CoreML::Specification::FeatureDescription const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CoreML::Specification::FeatureDescription const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CoreML::Specification::FeatureDescription const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  std::string *v15;
  __int128 *v16;
  __int128 v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v15 = (std::string *)(v13 + 16);
  v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v17 = *v16;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  v18 = a1 + 2;
  *((_QWORD *)v13 + 5) = 0;
  v19 = (float)(unint64_t)(a1[3] + 1);
  v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = a1[1];
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v18;
          if (*v18)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v29) = v18;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v35))
                  {
                    *(_QWORD *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*a1 + 8 * v35);
                  **(_QWORD **)(*a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v13 = *v37;
LABEL_75:
    *v37 = v13;
    goto LABEL_76;
  }
  *(_QWORD *)v13 = *v18;
  *v18 = v13;
  *(_QWORD *)(v36 + 8 * v3) = v18;
  if (*(_QWORD *)v13)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return v13;
}

void sub_19CA1A678(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void CoreML::validate<(MLModelType)201>(CoreML *this, CoreML::Specification::Model *a2)
{
  uint64_t *v4;
  const CoreML::Specification::Pipeline *v5;
  const CoreML::Specification::Pipeline *v6;

  if (*((_DWORD *)a2 + 11) == 201)
  {
    v4 = (uint64_t *)*((_QWORD *)a2 + 4);
  }
  else
  {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
    v4 = &CoreML::Specification::_PipelineRegressor_default_instance_;
  }
  v5 = (const CoreML::Specification::Pipeline *)v4[2];
  if (v5)
    v6 = v5;
  else
    v6 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
  CoreML::validate(this, a2, v6);
}

void CoreML::validate<(MLModelType)202>(CoreML *this, CoreML::Specification::Model *a2)
{
  const CoreML::Specification::Pipeline *v4;

  if (*((_DWORD *)a2 + 11) == 202)
  {
    v4 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 4);
  }
  else
  {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
    v4 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
  }
  CoreML::validate(this, a2, v4);
}

void CoreML::Specification::BayesianProbitRegressor_Gaussian::~BayesianProbitRegressor_Gaussian(CoreML::Specification::BayesianProbitRegressor_Gaussian *this)
{
  *(_QWORD *)this = &off_1E3D56C90;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D56C90;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::BayesianProbitRegressor_Gaussian::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.BayesianProbitRegressor.Gaussian");
}

CoreML::Specification::BayesianProbitRegressor_Gaussian *CoreML::Specification::BayesianProbitRegressor_Gaussian::New(CoreML::Specification::BayesianProbitRegressor_Gaussian *this)
{
  return CoreML::Specification::BayesianProbitRegressor_Gaussian::New(this, 0);
}

CoreML::Specification::BayesianProbitRegressor_Gaussian *CoreML::Specification::BayesianProbitRegressor_Gaussian::New(CoreML::Specification::BayesianProbitRegressor_Gaussian *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::BayesianProbitRegressor_Gaussian *v3;

  v3 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)operator new();
  CoreML::Specification::BayesianProbitRegressor_Gaussian::BayesianProbitRegressor_Gaussian(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor_Gaussian>(a2, v3);
  return v3;
}

void sub_19CA1A818(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::BayesianProbitRegressor_Gaussian::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_Gaussian::IsInitialized(CoreML::Specification::BayesianProbitRegressor_Gaussian *this)
{
  return 1;
}

BOOL CoreML::Specification::BayesianProbitRegressor_Gaussian::MergePartialFromCodedStream(CoreML::Specification::BayesianProbitRegressor_Gaussian *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  _BOOL8 result;
  unint64_t v16;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 >= a2[1])
        {
          LODWORD(v6) = 0;
LABEL_6:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_20;
          goto LABEL_7;
        }
        v6 = *v5;
        if (*v5 < 1)
          goto LABEL_6;
        *a2 = v5 + 1;
        v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0)
          goto LABEL_20;
LABEL_7:
        if (v7 >> 3 != 2)
          break;
        if (v7 != 17)
          goto LABEL_20;
        v16 = 0;
        v12 = (unint64_t *)*a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
        {
          result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v16);
          if (!result)
            return result;
          v13 = v16;
        }
        else
        {
          v13 = *v12;
          *a2 = (char *)(v12 + 1);
        }
        *((_QWORD *)this + 3) = v13;
      }
      if (v7 >> 3 != 1 || v7 != 9)
        break;
      v16 = 0;
      v10 = (unint64_t *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
      {
        result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v16);
        if (!result)
          return result;
        v11 = v16;
      }
      else
      {
        v11 = *v10;
        *a2 = (char *)(v10 + 1);
      }
      *((_QWORD *)this + 2) = v11;
    }
LABEL_20:
    if ((_DWORD)v7)
      v14 = (v7 & 7) == 4;
    else
      v14 = 1;
    result = v14;
    if (v14)
      return result;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_Gaussian::ByteSizeLong(CoreML::Specification::BayesianProbitRegressor_Gaussian *this)
{
  uint64_t v1;

  v1 = 9;
  if (*((double *)this + 2) == 0.0)
    v1 = 0;
  if (*((double *)this + 3) != 0.0)
    v1 += 9;
  *((_DWORD *)this + 8) = v1;
  return v1;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_Gaussian::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  double v5;
  double v6;

  v4 = this;
  v5 = *(double *)(this + 16);
  if (v5 != 0.0)
    this = google::protobuf::internal::WireFormatLite::WriteDouble(1, a2, v5, a3);
  v6 = *(double *)(v4 + 24);
  if (v6 != 0.0)
    return google::protobuf::internal::WireFormatLite::WriteDouble(2, a2, v6, a3);
  return this;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_Gaussian::GetCachedSize(CoreML::Specification::BayesianProbitRegressor_Gaussian *this)
{
  return *((unsigned int *)this + 8);
}

CoreML::Specification::BayesianProbitRegressor_Gaussian *CoreML::Specification::BayesianProbitRegressor_Gaussian::BayesianProbitRegressor_Gaussian(CoreML::Specification::BayesianProbitRegressor_Gaussian *this)
{
  *(_QWORD *)this = &off_1E3D56C90;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::BayesianProbitRegressor_Gaussian *)&CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_)
    CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_19CA1AA74(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor_Gaussian>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_Gaussian>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_Gaussian>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::BayesianProbitRegressor::~BayesianProbitRegressor(CoreML::Specification::BayesianProbitRegressor *this)
{
  CoreML::Specification::BayesianProbitRegressor::~BayesianProbitRegressor(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E3D54138;
  v2 = *((_QWORD *)this + 5);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 6);
  if ((__int128 *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1A1AD6260](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 7);
  if ((__int128 *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1A1AD6260](v6, 0x1012C40EC159624);
  }
  v7 = *((_QWORD *)this + 8);
  if ((__int128 *)v7 != &google::protobuf::internal::fixed_address_empty_string && v7)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x1A1AD6260](v7, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 9);
  if ((__int128 *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x1A1AD6260](v8, 0x1012C40EC159624);
  }
  v9 = *((_QWORD *)this + 10);
  if ((__int128 *)v9 != &google::protobuf::internal::fixed_address_empty_string && v9)
  {
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    MEMORY[0x1A1AD6260](v9, 0x1012C40EC159624);
  }
  v10 = *((_QWORD *)this + 11);
  if ((__int128 *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x1A1AD6260](v10, 0x1012C40EC159624);
  }
  v11 = *((_QWORD *)this + 12);
  if ((__int128 *)v11 != &google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x1A1AD6260](v11, 0x1012C40EC159624);
  }
  if (this != (CoreML::Specification::BayesianProbitRegressor *)&CoreML::Specification::_BayesianProbitRegressor_default_instance_)
  {
    v12 = *((_QWORD *)this + 13);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::BayesianProbitRegressor::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.BayesianProbitRegressor");
}

CoreML::Specification::BayesianProbitRegressor *CoreML::Specification::BayesianProbitRegressor::New(CoreML::Specification::BayesianProbitRegressor *this)
{
  return CoreML::Specification::BayesianProbitRegressor::New(this, 0);
}

CoreML::Specification::BayesianProbitRegressor *CoreML::Specification::BayesianProbitRegressor::New(CoreML::Specification::BayesianProbitRegressor *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::BayesianProbitRegressor *v3;

  v3 = (CoreML::Specification::BayesianProbitRegressor *)operator new();
  CoreML::Specification::BayesianProbitRegressor::BayesianProbitRegressor(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor>(a2, v3);
  return v3;
}

void sub_19CA1AB7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4092A090F6);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::BayesianProbitRegressor::Clear(CoreML::Specification::BayesianProbitRegressor *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>(v4 + 16);
      *(_DWORD *)(v4 + 40) = 0;
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  v5 = *((_QWORD *)this + 5);
  if ((__int128 *)v5 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
  v6 = *((_QWORD *)this + 6);
  if ((__int128 *)v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
  v7 = *((_QWORD *)this + 7);
  if ((__int128 *)v7 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
    }
  }
  v8 = *((_QWORD *)this + 8);
  if ((__int128 *)v8 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v8 + 23) < 0)
    {
      **(_BYTE **)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v8 = 0;
      *(_BYTE *)(v8 + 23) = 0;
    }
  }
  v9 = *((_QWORD *)this + 9);
  if ((__int128 *)v9 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v9 + 23) < 0)
    {
      **(_BYTE **)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v9 = 0;
      *(_BYTE *)(v9 + 23) = 0;
    }
  }
  v10 = *((_QWORD *)this + 10);
  if ((__int128 *)v10 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v10 + 23) < 0)
    {
      **(_BYTE **)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v10 = 0;
      *(_BYTE *)(v10 + 23) = 0;
    }
  }
  v11 = *((_QWORD *)this + 11);
  if ((__int128 *)v11 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v11 + 23) < 0)
    {
      **(_BYTE **)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v11 = 0;
      *(_BYTE *)(v11 + 23) = 0;
    }
  }
  v12 = *((_QWORD *)this + 12);
  if ((__int128 *)v12 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v12 + 23) < 0)
    {
      **(_BYTE **)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v12 = 0;
      *(_BYTE *)(v12 + 23) = 0;
    }
  }
  result = *((_QWORD *)this + 13);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor::IsInitialized(CoreML::Specification::BayesianProbitRegressor *this)
{
  return 1;
}

uint64_t CoreML::Specification::BayesianProbitRegressor::MergePartialFromCodedStream(CoreML::Specification::BayesianProbitRegressor *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  std::string **v7;
  std::string **v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int TagFallback;
  char *v17;
  int v18;
  CoreML::Specification::BayesianProbitRegressor_Gaussian *v19;
  char *v20;
  int VarintSizeAsIntFallback;
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight *v22;
  char *v23;
  int v24;
  std::string *v25;
  uint64_t result;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  std::string *v30;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  std::string *v35;
  int v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  const char *v44;
  uint64_t Varint32Fallback;
  google::protobuf::internal::RepeatedPtrFieldBase *v46;
  std::string **v47;
  std::string **v48;
  std::string **v49;
  std::string **v50;

  v49 = (std::string **)((char *)this + 88);
  v50 = (std::string **)((char *)this + 96);
  v47 = (std::string **)((char *)this + 72);
  v48 = (std::string **)((char *)this + 80);
  v5 = (std::string **)((char *)this + 64);
  v6 = (std::string **)((char *)this + 56);
  v7 = (std::string **)((char *)this + 48);
  v8 = (std::string **)((char *)this + 40);
  v46 = (CoreML::Specification::BayesianProbitRegressor *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v9 = *(unsigned __int8 **)a2;
      v10 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v10)
      {
        LODWORD(v12) = 0;
        goto LABEL_16;
      }
      v11 = v9 + 1;
      v12 = *v9;
      if ((char)*v9 >= 1)
        break;
      if ((unint64_t)v11 < v10)
      {
        v14 = *v11;
        if ((v12 & ~v14) >= 0x80)
        {
          *(_QWORD *)a2 = v9 + 2;
          v13 = (v12 + (v14 << 7) - 128) | 0x100000000;
          goto LABEL_17;
        }
      }
LABEL_16:
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v12);
      v13 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v13 & 0x100000000) == 0)
        goto LABEL_9;
LABEL_17:
      switch(v13 >> 3)
      {
        case 1u:
          if (v13 != 8)
            goto LABEL_9;
          v17 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
          {
            v18 = 0;
          }
          else
          {
            v18 = *v17;
            if ((*v17 & 0x80000000) == 0)
            {
              *((_DWORD *)this + 28) = v18;
              *(_QWORD *)a2 = v17 + 1;
              continue;
            }
          }
          Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v18);
          *((_DWORD *)this + 28) = Varint32Fallback;
          if (Varint32Fallback < 0)
            return 0;
          break;
        case 2u:
          if (v13 != 18)
            goto LABEL_9;
          v19 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)*((_QWORD *)this + 13);
          if (!v19)
          {
            v19 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)operator new();
            CoreML::Specification::BayesianProbitRegressor_Gaussian::BayesianProbitRegressor_Gaussian(v19);
            *((_QWORD *)this + 13) = v19;
          }
          v20 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
          {
            VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v20;
            *(_QWORD *)a2 = v20 + 1;
          }
          v41 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
          v43 = *((_DWORD *)a2 + 13);
          v39 = __OFSUB__(v43--, 1);
          *((_DWORD *)a2 + 13) = v43;
          if (v43 < 0 != v39)
            return 0;
          v40 = v41;
          result = CoreML::Specification::BayesianProbitRegressor_Gaussian::MergePartialFromCodedStream(v19, (char **)a2, v42);
          if (!(_DWORD)result)
            return result;
LABEL_87:
          if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v40))
            return 0;
          continue;
        case 3u:
          if (v13 != 26)
            goto LABEL_9;
          v22 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::TypeHandler>(v46);
          v23 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v23 < 0)
          {
            v24 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v24 < 0)
              return 0;
          }
          else
          {
            v24 = *v23;
            *(_QWORD *)a2 = v23 + 1;
          }
          v36 = google::protobuf::io::CodedInputStream::PushLimit(a2, v24);
          v38 = *((_DWORD *)a2 + 13);
          v39 = __OFSUB__(v38--, 1);
          *((_DWORD *)a2 + 13) = v38;
          if (v38 < 0 != v39)
            return 0;
          v40 = v36;
          result = CoreML::Specification::BayesianProbitRegressor_FeatureWeight::MergePartialFromCodedStream(v22, a2, v37);
          if (!(_DWORD)result)
            return result;
          goto LABEL_87;
        case 0xAu:
          if (v13 != 82)
            goto LABEL_9;
          v25 = *v8;
          if (*v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v25 = *v8;
          }
          result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v25);
          if (!(_DWORD)result)
            return result;
          v27 = *v8;
          if (SHIBYTE((*v8)->__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            size = (*v8)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v8)->__r_.__value_.__r.__words[2]);
          }
          v44 = "CoreML.Specification.BayesianProbitRegressor.regressionInputFeatureName";
          goto LABEL_105;
        case 0xBu:
          if (v13 != 90)
            goto LABEL_9;
          v29 = *v7;
          if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v29 = *v7;
          }
          result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v29);
          if (!(_DWORD)result)
            return result;
          v27 = *v7;
          if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            size = (*v7)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
          }
          v44 = "CoreML.Specification.BayesianProbitRegressor.optimismInputFeatureName";
          goto LABEL_105;
        case 0xCu:
          if (v13 != 98)
            goto LABEL_9;
          v30 = *v6;
          if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v30 = *v6;
          }
          result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v30);
          if (!(_DWORD)result)
            return result;
          v27 = *v6;
          if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            size = (*v6)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
          }
          v44 = "CoreML.Specification.BayesianProbitRegressor.samplingScaleInputFeatureName";
          goto LABEL_105;
        case 0xDu:
          if (v13 != 106)
            goto LABEL_9;
          v31 = *v5;
          if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v31 = *v5;
          }
          result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v31);
          if (!(_DWORD)result)
            return result;
          v27 = *v5;
          if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            size = (*v5)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
          }
          v44 = "CoreML.Specification.BayesianProbitRegressor.samplingTruncationInputFeatureName";
          goto LABEL_105;
        case 0x14u:
          if (v13 != 162)
            goto LABEL_9;
          v32 = *v47;
          if (*v47 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v47, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v32 = *v47;
          }
          result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v32);
          if (!(_DWORD)result)
            return result;
          v27 = *v47;
          if (SHIBYTE((*v47)->__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            size = (*v47)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v47)->__r_.__value_.__r.__words[2]);
          }
          v44 = "CoreML.Specification.BayesianProbitRegressor.meanOutputFeatureName";
          goto LABEL_105;
        case 0x15u:
          if (v13 != 170)
            goto LABEL_9;
          v33 = *v48;
          if (*v48 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v48, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v33 = *v48;
          }
          result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v33);
          if (!(_DWORD)result)
            return result;
          v27 = *v48;
          if (SHIBYTE((*v48)->__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            size = (*v48)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v48)->__r_.__value_.__r.__words[2]);
          }
          v44 = "CoreML.Specification.BayesianProbitRegressor.varianceOutputFeatureName";
          goto LABEL_105;
        case 0x16u:
          if (v13 != 178)
            goto LABEL_9;
          v34 = *v49;
          if (*v49 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v49, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v34 = *v49;
          }
          result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v34);
          if (!(_DWORD)result)
            return result;
          v27 = *v49;
          if (SHIBYTE((*v49)->__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            size = (*v49)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v49)->__r_.__value_.__r.__words[2]);
          }
          v44 = "CoreML.Specification.BayesianProbitRegressor.pessimisticProbabilityOutputFeatureName";
          goto LABEL_105;
        case 0x17u:
          if (v13 != 186)
            goto LABEL_9;
          v35 = *v50;
          if (*v50 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v50, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v35 = *v50;
          }
          result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v35);
          if (!(_DWORD)result)
            return result;
          v27 = *v50;
          if (SHIBYTE((*v50)->__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            size = (*v50)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v50)->__r_.__value_.__r.__words[2]);
          }
          v44 = "CoreML.Specification.BayesianProbitRegressor.sampledProbabilityOutputFeatureName";
LABEL_105:
          if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v27, size, 0, (uint64_t)v44))
            return 0;
          continue;
        default:
          goto LABEL_9;
      }
    }
    *(_QWORD *)a2 = v11;
    v13 = v12 | 0x100000000;
    if ((v13 & 0x100000000) != 0)
      goto LABEL_17;
LABEL_9:
    if (!(_DWORD)v13 || (v13 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v13, a3) & 1) == 0)
      return 0;
  }
}

void sub_19CA1B368(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::BayesianProbitRegressor::ByteSizeLong(CoreML::Specification::BayesianProbitRegressor *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::BayesianProbitRegressor_FeatureWeight::ByteSizeLong(*(CoreML::Specification::BayesianProbitRegressor_FeatureWeight **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((_QWORD *)this + 5);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_11:
  v9 = *((_QWORD *)this + 6);
  v10 = *(unsigned __int8 *)(v9 + 23);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(_QWORD *)(v9 + 8))
      goto LABEL_16;
  }
  else if (!*(_BYTE *)(v9 + 23))
  {
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v11 = v10;
  v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_16:
  v12 = *((_QWORD *)this + 7);
  v13 = *(unsigned __int8 *)(v12 + 23);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(_QWORD *)(v12 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v12 + 23))
  {
    goto LABEL_21;
  }
  v14 = *(_QWORD *)(v12 + 8);
  if ((v13 & 0x80u) == 0)
    v14 = v13;
  v4 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_21:
  v15 = *((_QWORD *)this + 8);
  v16 = *(unsigned __int8 *)(v15 + 23);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(_QWORD *)(v15 + 8))
      goto LABEL_26;
  }
  else if (!*(_BYTE *)(v15 + 23))
  {
    goto LABEL_26;
  }
  v17 = *(_QWORD *)(v15 + 8);
  if ((v16 & 0x80u) == 0)
    v17 = v16;
  v4 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_26:
  v18 = *((_QWORD *)this + 9);
  v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0)
  {
    if (!*(_QWORD *)(v18 + 8))
      goto LABEL_31;
  }
  else if (!*(_BYTE *)(v18 + 23))
  {
    goto LABEL_31;
  }
  v20 = *(_QWORD *)(v18 + 8);
  if ((v19 & 0x80u) == 0)
    v20 = v19;
  v4 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_31:
  v21 = *((_QWORD *)this + 10);
  v22 = *(unsigned __int8 *)(v21 + 23);
  if (*(char *)(v21 + 23) < 0)
  {
    if (!*(_QWORD *)(v21 + 8))
      goto LABEL_36;
  }
  else if (!*(_BYTE *)(v21 + 23))
  {
    goto LABEL_36;
  }
  v23 = *(_QWORD *)(v21 + 8);
  if ((v22 & 0x80u) == 0)
    v23 = v22;
  v4 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_36:
  v24 = *((_QWORD *)this + 11);
  v25 = *(unsigned __int8 *)(v24 + 23);
  if (*(char *)(v24 + 23) < 0)
  {
    if (!*(_QWORD *)(v24 + 8))
      goto LABEL_41;
  }
  else if (!*(_BYTE *)(v24 + 23))
  {
    goto LABEL_41;
  }
  v26 = *(_QWORD *)(v24 + 8);
  if ((v25 & 0x80u) == 0)
    v26 = v25;
  v4 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_41:
  v27 = *((_QWORD *)this + 12);
  v28 = *(unsigned __int8 *)(v27 + 23);
  if (*(char *)(v27 + 23) < 0)
  {
    if (!*(_QWORD *)(v27 + 8))
      goto LABEL_46;
  }
  else if (!*(_BYTE *)(v27 + 23))
  {
    goto LABEL_46;
  }
  v29 = *(_QWORD *)(v27 + 8);
  if ((v28 & 0x80u) == 0)
    v29 = v28;
  v4 += v29 + ((9 * (__clz(v29 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_46:
  if (this != (CoreML::Specification::BayesianProbitRegressor *)&CoreML::Specification::_BayesianProbitRegressor_default_instance_)
  {
    v30 = *((_QWORD *)this + 13);
    if (v30)
    {
      v31 = 9;
      if (*(double *)(v30 + 16) == 0.0)
        v31 = 0;
      if (*(double *)(v30 + 24) != 0.0)
        v31 += 9;
      *(_DWORD *)(v30 + 32) = v31;
      v4 += v31 + ((9 * (__clz(v31 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  v32 = *((_DWORD *)this + 28);
  if (v32)
    v4 += ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 1;
  *((_DWORD *)this + 29) = v4;
  return v4;
}

uint64_t CoreML::Specification::BayesianProbitRegressor::SerializeWithCachedSizes(CoreML::Specification::BayesianProbitRegressor *this, google::protobuf::io::CodedOutputStream *a2, unsigned int a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int i;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;

  v6 = *((unsigned int *)this + 28);
  if ((_DWORD)v6)
    google::protobuf::internal::WireFormatLite::WriteUInt32(v6, a2, a3, a4);
  if (this != (CoreML::Specification::BayesianProbitRegressor *)&CoreML::Specification::_BayesianProbitRegressor_default_instance_)
  {
    v7 = *((_QWORD *)this + 13);
    if (v7)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  v8 = *((_DWORD *)this + 6);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i + 8), a2, a4);
  }
  v10 = (unsigned int *)*((_QWORD *)this + 5);
  if (*((char *)v10 + 23) < 0)
  {
    v11 = *((_QWORD *)v10 + 1);
    if (!v11)
      goto LABEL_15;
    v10 = *(unsigned int **)v10;
    goto LABEL_14;
  }
  LODWORD(v11) = *((unsigned __int8 *)v10 + 23);
  if (*((_BYTE *)v10 + 23))
  {
LABEL_14:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v10, v11, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.regressionInputFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xAu, *((_QWORD *)this + 5), a2);
  }
LABEL_15:
  v12 = (unsigned int *)*((_QWORD *)this + 6);
  if (*((char *)v12 + 23) < 0)
  {
    v13 = *((_QWORD *)v12 + 1);
    if (!v13)
      goto LABEL_21;
    v12 = *(unsigned int **)v12;
    goto LABEL_20;
  }
  LODWORD(v13) = *((unsigned __int8 *)v12 + 23);
  if (*((_BYTE *)v12 + 23))
  {
LABEL_20:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, v13, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.optimismInputFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xBu, *((_QWORD *)this + 6), a2);
  }
LABEL_21:
  v14 = (unsigned int *)*((_QWORD *)this + 7);
  if (*((char *)v14 + 23) < 0)
  {
    v15 = *((_QWORD *)v14 + 1);
    if (!v15)
      goto LABEL_27;
    v14 = *(unsigned int **)v14;
    goto LABEL_26;
  }
  LODWORD(v15) = *((unsigned __int8 *)v14 + 23);
  if (*((_BYTE *)v14 + 23))
  {
LABEL_26:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v14, v15, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.samplingScaleInputFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xCu, *((_QWORD *)this + 7), a2);
  }
LABEL_27:
  v16 = (unsigned int *)*((_QWORD *)this + 8);
  if (*((char *)v16 + 23) < 0)
  {
    v17 = *((_QWORD *)v16 + 1);
    if (!v17)
      goto LABEL_33;
    v16 = *(unsigned int **)v16;
    goto LABEL_32;
  }
  LODWORD(v17) = *((unsigned __int8 *)v16 + 23);
  if (*((_BYTE *)v16 + 23))
  {
LABEL_32:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v16, v17, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.samplingTruncationInputFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xDu, *((_QWORD *)this + 8), a2);
  }
LABEL_33:
  v18 = (unsigned int *)*((_QWORD *)this + 9);
  if (*((char *)v18 + 23) < 0)
  {
    v19 = *((_QWORD *)v18 + 1);
    if (!v19)
      goto LABEL_39;
    v18 = *(unsigned int **)v18;
    goto LABEL_38;
  }
  LODWORD(v19) = *((unsigned __int8 *)v18 + 23);
  if (*((_BYTE *)v18 + 23))
  {
LABEL_38:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v18, v19, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.meanOutputFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0x14u, *((_QWORD *)this + 9), a2);
  }
LABEL_39:
  v20 = (unsigned int *)*((_QWORD *)this + 10);
  if (*((char *)v20 + 23) < 0)
  {
    v21 = *((_QWORD *)v20 + 1);
    if (!v21)
      goto LABEL_45;
    v20 = *(unsigned int **)v20;
    goto LABEL_44;
  }
  LODWORD(v21) = *((unsigned __int8 *)v20 + 23);
  if (*((_BYTE *)v20 + 23))
  {
LABEL_44:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v20, v21, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.varianceOutputFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0x15u, *((_QWORD *)this + 10), a2);
  }
LABEL_45:
  v22 = (unsigned int *)*((_QWORD *)this + 11);
  if (*((char *)v22 + 23) < 0)
  {
    v23 = *((_QWORD *)v22 + 1);
    if (!v23)
      goto LABEL_51;
    v22 = *(unsigned int **)v22;
    goto LABEL_50;
  }
  LODWORD(v23) = *((unsigned __int8 *)v22 + 23);
  if (*((_BYTE *)v22 + 23))
  {
LABEL_50:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v22, v23, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.pessimisticProbabilityOutputFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0x16u, *((_QWORD *)this + 11), a2);
  }
LABEL_51:
  result = *((_QWORD *)this + 12);
  if (*(char *)(result + 23) < 0)
  {
    v25 = *(_QWORD *)(result + 8);
    if (!v25)
      return result;
    result = *(_QWORD *)result;
    goto LABEL_56;
  }
  LODWORD(v25) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_56:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v25, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.sampledProbabilityOutputFeatureName");
    return google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0x17u, *((_QWORD *)this + 12), a2);
  }
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor::GetCachedSize(CoreML::Specification::BayesianProbitRegressor *this)
{
  return *((unsigned int *)this + 29);
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureWeight::ByteSizeLong(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::ByteSizeLong(*(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((_DWORD *)this + 10);
  if (v6)
    v4 += ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  *((_DWORD *)this + 11) = v4;
  return v4;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::ByteSizeLong(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (this == (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)&CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_)
  {
    v1 = 0;
  }
  else
  {
    v1 = *((_QWORD *)this + 2);
    if (v1)
    {
      v2 = 9;
      if (*(double *)(v1 + 16) == 0.0)
        v2 = 0;
      if (*(double *)(v1 + 24) != 0.0)
        v2 += 9;
      *(_DWORD *)(v1 + 32) = v2;
      v1 = v2 + ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  v3 = *((_DWORD *)this + 6);
  if (v3)
    v1 += ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  *((_DWORD *)this + 7) = v1;
  return v1;
}

BOOL CoreML::Specification::BayesianProbitRegressor_FeatureWeight::MergePartialFromCodedStream(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v11;
  int v12;
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *v13;
  char *v14;
  int VarintSizeAsIntFallback;
  int v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  int v21;
  _BOOL8 result;
  uint64_t Varint32Fallback;

  v5 = (CoreML::Specification::BayesianProbitRegressor_FeatureWeight *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          LODWORD(v7) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_21;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *(_QWORD *)a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_21;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 18)
          goto LABEL_21;
        v13 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>(v5);
        v14 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v14;
          *(_QWORD *)a2 = v14 + 1;
        }
        v17 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v19 = *((_DWORD *)a2 + 13);
        v20 = __OFSUB__(v19--, 1);
        *((_DWORD *)a2 + 13) = v19;
        if (v19 < 0 == v20)
        {
          v21 = v17;
          result = CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::MergePartialFromCodedStream(v13, a2, v18);
          if (!result)
            return result;
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v21))
            continue;
        }
        return 0;
      }
      if (v8 >> 3 != 1 || v8 != 8)
        break;
      v11 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v12 = 0;
        goto LABEL_33;
      }
      v12 = *v11;
      if (*v11 < 0)
      {
LABEL_33:
        Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v12);
        *((_DWORD *)this + 10) = Varint32Fallback;
        if (Varint32Fallback < 0)
          return 0;
      }
      else
      {
        *((_DWORD *)this + 10) = v12;
        *(_QWORD *)a2 = v11 + 1;
      }
    }
LABEL_21:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)
      return 0;
  }
}

BOOL CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::MergePartialFromCodedStream(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  char *v10;
  int v11;
  CoreML::Specification::BayesianProbitRegressor_Gaussian *v12;
  char *v13;
  int VarintSizeAsIntFallback;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  _BOOL8 result;
  uint64_t Varint32Fallback;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          LODWORD(v6) = 0;
LABEL_6:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_22;
          goto LABEL_7;
        }
        v6 = *v5;
        if (*v5 < 1)
          goto LABEL_6;
        *(_QWORD *)a2 = v5 + 1;
        v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0)
          goto LABEL_22;
LABEL_7:
        if (v7 >> 3 != 2)
          break;
        if (v7 != 18)
          goto LABEL_22;
        v12 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)*((_QWORD *)this + 2);
        if (!v12)
        {
          v12 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)operator new();
          CoreML::Specification::BayesianProbitRegressor_Gaussian::BayesianProbitRegressor_Gaussian(v12);
          *((_QWORD *)this + 2) = v12;
        }
        v13 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v13 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v13;
          *(_QWORD *)a2 = v13 + 1;
        }
        v16 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v18 = *((_DWORD *)a2 + 13);
        v19 = __OFSUB__(v18--, 1);
        *((_DWORD *)a2 + 13) = v18;
        if (v18 < 0 == v19)
        {
          v20 = v16;
          result = CoreML::Specification::BayesianProbitRegressor_Gaussian::MergePartialFromCodedStream(v12, (char **)a2, v17);
          if (!result)
            return result;
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v20))
            continue;
        }
        return 0;
      }
      if (v7 >> 3 != 1 || v7 != 8)
        break;
      v10 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v11 = 0;
        goto LABEL_34;
      }
      v11 = *v10;
      if (*v10 < 0)
      {
LABEL_34:
        Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v11);
        *((_DWORD *)this + 6) = Varint32Fallback;
        if (Varint32Fallback < 0)
          return 0;
      }
      else
      {
        *((_DWORD *)this + 6) = v11;
        *(_QWORD *)a2 = v10 + 1;
      }
    }
LABEL_22:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_19CA1BE90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

void CoreML::Specification::BayesianProbitRegressor::MergeFrom(CoreML::Specification::BayesianProbitRegressor *this, const CoreML::Specification::BayesianProbitRegressor *a2)
{
  CoreML::Specification::BayesianProbitRegressor *v3;
  uint64_t v4;
  int v5;
  google::protobuf::Arena **v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const CoreML::Specification::BayesianProbitRegressor_FeatureWeight **v13;
  uint64_t **v14;
  const CoreML::Specification::BayesianProbitRegressor_FeatureWeight *v15;
  const CoreML::Specification::BayesianProbitRegressor_FeatureWeight *v16;
  uint64_t *v17;
  google::protobuf::Arena *v18;
  int v19;
  uint64_t v20;
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight **v21;
  const CoreML::Specification::BayesianProbitRegressor_FeatureWeight **v22;
  const CoreML::Specification::BayesianProbitRegressor_FeatureWeight *v23;
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight *Aligned;
  google::protobuf::Arena **v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  int *v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  __int128 *v43;
  uint64_t v44;
  __int128 *v45;
  const CoreML::Specification::SigmoidKernel *v46;
  CoreML::Specification::BayesianProbitRegressor_Gaussian *v47;
  const CoreML::Specification::SigmoidKernel *v48;
  int v49;
  CoreML::Specification::BayesianProbitRegressor *v50;
  uint64_t v51;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (google::protobuf::Arena **)((char *)v3 + 16);
    v51 = *((_QWORD *)a2 + 4);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::BayesianProbitRegressor *)((char *)v3 + 16), v5);
    v8 = v7;
    v9 = **((int **)v3 + 4);
    v50 = v3;
    v10 = *((int *)v3 + 6);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (const CoreML::Specification::BayesianProbitRegressor_FeatureWeight **)(v51 + 8);
      v14 = (uint64_t **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = *v6;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (CoreML::Specification::BayesianProbitRegressor_FeatureWeight **)((char *)v8 + v20);
      v22 = (const CoreML::Specification::BayesianProbitRegressor_FeatureWeight **)(v20 + v51 + 8);
      do
      {
        v23 = *v22;
        if (v18)
        {
          CoreML::Specification::BayesianProbitRegressor_FeatureWeight::BayesianProbitRegressor_FeatureWeight(Aligned);
          v25 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
          *v25 = Aligned;
          v25[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>;
          v26 = (unint64_t *)((char *)v18 + 32);
          do
            v27 = __ldxr(v26);
          while (__stxr((unint64_t)v25, v26));
          v25[2] = (google::protobuf::Arena *)v27;
        }
        else
        {
          Aligned = (CoreML::Specification::BayesianProbitRegressor_FeatureWeight *)operator new();
          CoreML::Specification::BayesianProbitRegressor_FeatureWeight::BayesianProbitRegressor_FeatureWeight(Aligned);
        }
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::Merge(v23, (uint64_t *)Aligned);
        *v21++ = Aligned;
        ++v22;
        --v19;
      }
      while (v19);
    }
    v3 = v50;
    v28 = *((_DWORD *)v50 + 6) + v5;
    *((_DWORD *)v50 + 6) = v28;
    v29 = (int *)*((_QWORD *)v50 + 4);
    if (*v29 < v28)
      *v29 = v28;
  }
  v30 = *((_QWORD *)a2 + 5);
  if (*(char *)(v30 + 23) < 0)
  {
    if (!*(_QWORD *)(v30 + 8))
      goto LABEL_28;
  }
  else if (!*(_BYTE *)(v30 + 23))
  {
    goto LABEL_28;
  }
  v31 = (__int128 *)*((_QWORD *)v3 + 5);
  if (v31 != (__int128 *)v30)
  {
    if (v31 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v3 + 5, v30);
    else
      std::string::operator=(*((std::string **)v3 + 5), (const std::string *)v30);
  }
LABEL_28:
  v32 = *((_QWORD *)a2 + 6);
  if (*(char *)(v32 + 23) < 0)
  {
    if (!*(_QWORD *)(v32 + 8))
      goto LABEL_36;
  }
  else if (!*(_BYTE *)(v32 + 23))
  {
    goto LABEL_36;
  }
  v33 = (__int128 *)*((_QWORD *)v3 + 6);
  if (v33 != (__int128 *)v32)
  {
    if (v33 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v3 + 6, v32);
    else
      std::string::operator=(*((std::string **)v3 + 6), (const std::string *)v32);
  }
LABEL_36:
  v34 = *((_QWORD *)a2 + 7);
  if (*(char *)(v34 + 23) < 0)
  {
    if (!*(_QWORD *)(v34 + 8))
      goto LABEL_44;
  }
  else if (!*(_BYTE *)(v34 + 23))
  {
    goto LABEL_44;
  }
  v35 = (__int128 *)*((_QWORD *)v3 + 7);
  if (v35 != (__int128 *)v34)
  {
    if (v35 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v3 + 7, v34);
    else
      std::string::operator=(*((std::string **)v3 + 7), (const std::string *)v34);
  }
LABEL_44:
  v36 = *((_QWORD *)a2 + 8);
  if (*(char *)(v36 + 23) < 0)
  {
    if (!*(_QWORD *)(v36 + 8))
      goto LABEL_52;
  }
  else if (!*(_BYTE *)(v36 + 23))
  {
    goto LABEL_52;
  }
  v37 = (__int128 *)*((_QWORD *)v3 + 8);
  if (v37 != (__int128 *)v36)
  {
    if (v37 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v3 + 8, v36);
    else
      std::string::operator=(*((std::string **)v3 + 8), (const std::string *)v36);
  }
LABEL_52:
  v38 = *((_QWORD *)a2 + 9);
  if (*(char *)(v38 + 23) < 0)
  {
    if (!*(_QWORD *)(v38 + 8))
      goto LABEL_60;
  }
  else if (!*(_BYTE *)(v38 + 23))
  {
    goto LABEL_60;
  }
  v39 = (__int128 *)*((_QWORD *)v3 + 9);
  if (v39 != (__int128 *)v38)
  {
    if (v39 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v3 + 9, v38);
    else
      std::string::operator=(*((std::string **)v3 + 9), (const std::string *)v38);
  }
LABEL_60:
  v40 = *((_QWORD *)a2 + 10);
  if (*(char *)(v40 + 23) < 0)
  {
    if (!*(_QWORD *)(v40 + 8))
      goto LABEL_68;
  }
  else if (!*(_BYTE *)(v40 + 23))
  {
    goto LABEL_68;
  }
  v41 = (__int128 *)*((_QWORD *)v3 + 10);
  if (v41 != (__int128 *)v40)
  {
    if (v41 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v3 + 10, v40);
    else
      std::string::operator=(*((std::string **)v3 + 10), (const std::string *)v40);
  }
LABEL_68:
  v42 = *((_QWORD *)a2 + 11);
  if (*(char *)(v42 + 23) < 0)
  {
    if (!*(_QWORD *)(v42 + 8))
      goto LABEL_76;
  }
  else if (!*(_BYTE *)(v42 + 23))
  {
    goto LABEL_76;
  }
  v43 = (__int128 *)*((_QWORD *)v3 + 11);
  if (v43 != (__int128 *)v42)
  {
    if (v43 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v3 + 11, v42);
    else
      std::string::operator=(*((std::string **)v3 + 11), (const std::string *)v42);
  }
LABEL_76:
  v44 = *((_QWORD *)a2 + 12);
  if (*(char *)(v44 + 23) < 0)
  {
    if (!*(_QWORD *)(v44 + 8))
      goto LABEL_84;
  }
  else if (!*(_BYTE *)(v44 + 23))
  {
    goto LABEL_84;
  }
  v45 = (__int128 *)*((_QWORD *)v3 + 12);
  if (v45 != (__int128 *)v44)
  {
    if (v45 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v3 + 12, v44);
    else
      std::string::operator=(*((std::string **)v3 + 12), (const std::string *)v44);
  }
LABEL_84:
  if (a2 != (const CoreML::Specification::BayesianProbitRegressor *)&CoreML::Specification::_BayesianProbitRegressor_default_instance_)
  {
    v46 = (const CoreML::Specification::SigmoidKernel *)*((_QWORD *)a2 + 13);
    if (v46)
    {
      v47 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)*((_QWORD *)v3 + 13);
      if (!v47)
      {
        v47 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)operator new();
        CoreML::Specification::BayesianProbitRegressor_Gaussian::BayesianProbitRegressor_Gaussian(v47);
        *((_QWORD *)v3 + 13) = v47;
        v46 = (const CoreML::Specification::SigmoidKernel *)*((_QWORD *)a2 + 13);
      }
      if (v46)
        v48 = v46;
      else
        v48 = (const CoreML::Specification::SigmoidKernel *)&CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_;
      CoreML::Specification::SigmoidKernel::MergeFrom((std::string *)v47, v48);
    }
  }
  v49 = *((_DWORD *)a2 + 28);
  if (v49)
    *((_DWORD *)v3 + 28) = v49;
}

void sub_19CA1C34C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::Merge(const CoreML::Specification::BayesianProbitRegressor_FeatureWeight *a1, uint64_t *a2)
{
  return CoreML::Specification::BayesianProbitRegressor_FeatureWeight::MergeFrom(a2, a1);
}

CoreML::Specification::BayesianProbitRegressor_FeatureWeight *CoreML::Specification::BayesianProbitRegressor_FeatureWeight::BayesianProbitRegressor_FeatureWeight(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  *(_QWORD *)this = &off_1E3D57578;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::BayesianProbitRegressor_FeatureWeight *)&CoreML::Specification::_BayesianProbitRegressor_FeatureWeight_default_instance_)
    CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(this);
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_19CA1C3FC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::BayesianProbitRegressor_FeatureWeight::MergeFrom(uint64_t *this, const CoreML::Specification::BayesianProbitRegressor_FeatureWeight *a2)
{
  const CoreML::Specification::BayesianProbitRegressor_FeatureWeight *v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **v11;
  std::string **v12;
  const CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *v13;
  const CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *v14;
  std::string *v15;
  google::protobuf::Arena *v16;
  int v17;
  uint64_t v18;
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **v19;
  const CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **v20;
  const CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *v21;
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  int *v27;
  int v28;
  const CoreML::Specification::BayesianProbitRegressor_FeatureWeight *v29;
  uint64_t v30;

  v2 = a2;
  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)v2 + 6);
  if (v5)
  {
    v29 = v2;
    v30 = *((_QWORD *)v2 + 4);
    this = (uint64_t *)google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 2), v5);
    v6 = this;
    v7 = *(int *)v3[4];
    v8 = *((int *)v3 + 6);
    v9 = v7 - v8;
    if ((int)v7 - (int)v8 >= v5)
      v10 = v5;
    else
      v10 = v9;
    if ((int)v10 >= 1)
    {
      v11 = (const CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **)(v30 + 8);
      v12 = (std::string **)this;
      do
      {
        v14 = *v11++;
        v13 = v14;
        v15 = *v12++;
        this = (uint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::Merge(v13, v15);
        --v10;
      }
      while (v10);
    }
    if (v9 < v5)
    {
      v16 = (google::protobuf::Arena *)v3[2];
      v17 = v8 + v5 - v7;
      v18 = 8 * v7 - 8 * v8;
      v19 = (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **)((char *)v6 + v18);
      v20 = (const CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **)(v18 + v30 + 8);
      do
      {
        v21 = *v20;
        if (v16)
        {
          CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::BayesianProbitRegressor_FeatureValueWeight(Aligned);
          v23 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
          *v23 = Aligned;
          v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>;
          v24 = (unint64_t *)((char *)v16 + 32);
          do
            v25 = __ldxr(v24);
          while (__stxr((unint64_t)v23, v24));
          v23[2] = (google::protobuf::Arena *)v25;
        }
        else
        {
          Aligned = (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)operator new();
          CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::BayesianProbitRegressor_FeatureValueWeight(Aligned);
        }
        this = (uint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::Merge(v21, (std::string *)Aligned);
        *v19++ = Aligned;
        ++v20;
        --v17;
      }
      while (v17);
    }
    v26 = *((_DWORD *)v3 + 6) + v5;
    *((_DWORD *)v3 + 6) = v26;
    v27 = (int *)v3[4];
    v2 = v29;
    if (*v27 < v26)
      *v27 = v26;
  }
  v28 = *((_DWORD *)v2 + 10);
  if (v28)
    *((_DWORD *)v3 + 10) = v28;
  return this;
}

void sub_19CA1C5D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::Merge(const CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *a1, std::string *a2)
{
  return CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::MergeFrom(a2, a1);
}

CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::BayesianProbitRegressor_FeatureValueWeight(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  *(_QWORD *)this = &off_1E3D579A0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)&CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_)
    CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_19CA1C650(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::MergeFrom(std::string *this, const CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::SigmoidKernel *v5;
  CoreML::Specification::BayesianProbitRegressor_Gaussian *v7;
  const CoreML::Specification::SigmoidKernel *v8;
  int v9;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::SigmoidKernel *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)&CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_
    && v5 != 0)
  {
    v7 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)v3->__r_.__value_.__r.__words[2];
    if (!v7)
    {
      v7 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)operator new();
      CoreML::Specification::BayesianProbitRegressor_Gaussian::BayesianProbitRegressor_Gaussian(v7);
      v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
      v5 = (const CoreML::Specification::SigmoidKernel *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::SigmoidKernel *)&CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_;
    this = CoreML::Specification::SigmoidKernel::MergeFrom((std::string *)v7, v8);
  }
  v9 = *((_DWORD *)a2 + 6);
  if (v9)
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v9;
  return this;
}

void sub_19CA1C70C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 16) + 8;
    do
    {
      v4 = *(_QWORD *)v3;
      result = *(_QWORD *)(*(_QWORD *)v3 + 16);
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      *(_QWORD *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 24) = 0;
      v3 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

CoreML::Specification::BayesianProbitRegressor *CoreML::Specification::BayesianProbitRegressor::BayesianProbitRegressor(CoreML::Specification::BayesianProbitRegressor *this)
{
  *(_QWORD *)this = &off_1E3D54138;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::BayesianProbitRegressor *)&CoreML::Specification::_BayesianProbitRegressor_default_instance_)
    CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(this);
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  return this;
}

void sub_19CA1C810(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::BayesianProbitRegressor_FeatureWeight::~BayesianProbitRegressor_FeatureWeight(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight::~BayesianProbitRegressor_FeatureWeight(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D57578;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::BayesianProbitRegressor_FeatureWeight::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.BayesianProbitRegressor.FeatureWeight");
}

CoreML::Specification::BayesianProbitRegressor_FeatureWeight *CoreML::Specification::BayesianProbitRegressor_FeatureWeight::New(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  return CoreML::Specification::BayesianProbitRegressor_FeatureWeight::New(this, 0);
}

CoreML::Specification::BayesianProbitRegressor_FeatureWeight *CoreML::Specification::BayesianProbitRegressor_FeatureWeight::New(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight *v3;

  v3 = (CoreML::Specification::BayesianProbitRegressor_FeatureWeight *)operator new();
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight::BayesianProbitRegressor_FeatureWeight(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>(a2, v3);
  return v3;
}

void sub_19CA1CB58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureWeight::Clear(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  uint64_t result;

  result = google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>((uint64_t)this + 16);
  *((_DWORD *)this + 10) = 0;
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureWeight::IsInitialized(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  return 1;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureWeight::SerializeWithCachedSizes(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this, google::protobuf::io::CodedOutputStream *a2, unsigned int a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result;
  int v7;
  int i;

  result = *((unsigned int *)this + 10);
  if ((_DWORD)result)
    result = google::protobuf::internal::WireFormatLite::WriteUInt32(result, a2, a3, a4);
  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i + 8), a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureWeight::GetCachedSize(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  return *((unsigned int *)this + 11);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::~BayesianProbitRegressor_FeatureValueWeight(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::~BayesianProbitRegressor_FeatureValueWeight(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E3D579A0;
  if (this != (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)&CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.BayesianProbitRegressor.FeatureValueWeight");
}

CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::New(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  return CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::New(this, 0);
}

CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::New(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *v3;

  v3 = (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)operator new();
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::BayesianProbitRegressor_FeatureValueWeight(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>(a2, v3);
  return v3;
}

void sub_19CA1CD50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::Clear(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::IsInitialized(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  return 1;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::SerializeWithCachedSizes(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this, google::protobuf::io::CodedOutputStream *a2, unsigned int a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result;
  uint64_t v7;

  result = *((unsigned int *)this + 6);
  if ((_DWORD)result)
    result = google::protobuf::internal::WireFormatLite::WriteUInt32(result, a2, a3, a4);
  if (this != (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)&CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_)
  {
    v7 = *((_QWORD *)this + 2);
    if (v7)
      return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::GetCachedSize(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  return *((unsigned int *)this + 7);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::validate<(MLModelType)2002>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _DWORD *v5;
  CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto *v6;
  void *v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  void *v12;
  int v13;
  _DWORD *v14;
  CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  CoreML::Specification::FeatureType *v27;
  const void **v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  const void *v35;
  unsigned __int8 *v36;
  const void **v37;
  uint64_t v38;
  const void *v39;
  unsigned __int8 *v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  _BYTE __p[24];
  uint64_t v57;
  void *v58;
  char v59;
  uint64_t v60;
  std::string v61;
  std::string *v62[2];
  int v63;
  std::string v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;

  if (*(_QWORD *)(a2 + 16))
    v3 = *(uint64_t **)(a2 + 16);
  else
    v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_DWORD *)(a2 + 44) == 2002)
  {
    CoreML::Result::Result((CoreML::Result *)&v65);
    v5 = operator new(4uLL);
    *v5 = 4;
    v61.__r_.__value_.__l.__size_ = (std::string::size_type)(v5 + 1);
    v61.__r_.__value_.__r.__words[2] = (std::string::size_type)(v5 + 1);
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
    CoreML::validateDescriptionsContainFeatureWithTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)__p, (uint64_t)(v3 + 2), 1, (unsigned int **)&v61);
    v65 = *(_QWORD *)__p;
    if (SHIBYTE(v67) < 0)
      operator delete((void *)v66);
    v66 = *(_OWORD *)&__p[8];
    v67 = v57;
    HIBYTE(v57) = 0;
    __p[8] = 0;
    operator delete(v5);
    if ((v65 & 0xFFFFFFEF) != 0)
      goto LABEL_8;
    if (*(_DWORD *)(a2 + 44) == 2002)
    {
      v8 = *(uint64_t **)(a2 + 32);
    }
    else
    {
      CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(v6);
      v8 = &CoreML::Specification::CoreMLModels::_VisionFeaturePrint_default_instance_;
    }
    v9 = *((_DWORD *)v8 + 7);
    switch(v9)
    {
      case 0:
        std::string::basic_string[abi:ne180100]<0>(__p, "Type for vision feature print not set");
        *(_QWORD *)a1 = 13;
        std::operator+<char>();
        goto LABEL_25;
      case 20:
        v13 = *(_DWORD *)(v8[2] + 16);
        if ((v13 - 1) >= 2)
        {
          if (!v13)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "Version for scene is invalid");
            *(_QWORD *)a1 = 13;
            std::operator+<char>();
            goto LABEL_25;
          }
          std::to_string(&v64, v13);
          v45 = std::string::insert(&v64, 0, "Version: '");
          v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
          v61.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v46;
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          v47 = std::string::append(&v61, "' for scene print is invalid");
          v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          *(_QWORD *)&__p[16] = *((_QWORD *)&v47->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)a1 = 13;
          std::operator+<char>();
          goto LABEL_96;
        }
        v14 = operator new(4uLL);
        *v14 = 5;
        v61.__r_.__value_.__l.__size_ = (std::string::size_type)(v14 + 1);
        v61.__r_.__value_.__r.__words[2] = (std::string::size_type)(v14 + 1);
        v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
        CoreML::validateDescriptionsContainFeatureWithTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)__p, (uint64_t)(v3 + 5), 1, (unsigned int **)&v61);
        v65 = *(_QWORD *)__p;
        if (SHIBYTE(v67) < 0)
          operator delete((void *)v66);
        v66 = *(_OWORD *)&__p[8];
        v67 = v57;
        HIBYTE(v57) = 0;
        __p[8] = 0;
        operator delete(v14);
        break;
      case 21:
        v10 = v8[2];
        v11 = *(_DWORD *)(v10 + 40);
        if (v11 == 1)
        {
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            LODWORD(v64.__r_.__value_.__l.__data_) = 5;
            std::vector<CoreML::Specification::FeatureType::TypeCase>::vector[abi:ne180100](&v61, &v64, 1uLL);
            CoreML::validateDescriptionsContainFeatureWithTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)__p, (uint64_t)(v3 + 5), 2, (unsigned int **)&v61);
            v65 = *(_QWORD *)__p;
            if (SHIBYTE(v67) < 0)
              operator delete((void *)v66);
            v66 = *(_OWORD *)&__p[8];
            v67 = v57;
            HIBYTE(v57) = 0;
            __p[8] = 0;
            v15 = (CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto *)v61.__r_.__value_.__r.__words[0];
            if (v61.__r_.__value_.__r.__words[0])
            {
              v61.__r_.__value_.__l.__size_ = v61.__r_.__value_.__r.__words[0];
              operator delete(v61.__r_.__value_.__l.__data_);
            }
            if ((v65 & 0xFFFFFFEF) == 0)
            {
              v16 = v3[7];
              v17 = v16 ? (uint64_t *)(v16 + 8) : 0;
              v18 = *((int *)v3 + 12);
              if ((_DWORD)v18)
              {
                v55 = &v17[v18];
                while (1)
                {
                  v19 = *v17;
                  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E3D51418;
                  v61.__r_.__value_.__l.__size_ = 0;
                  v63 = 0;
                  v20 = *(_QWORD *)(v19 + 8);
                  if ((v20 & 1) != 0)
                    v15 = (CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&v61.__r_.__value_.__l.__size_, v20 & 0xFFFFFFFFFFFFFFFELL);
                  v61.__r_.__value_.__r.__words[2] = (std::string::size_type)&google::protobuf::internal::fixed_address_empty_string;
                  v21 = *(_QWORD *)(v19 + 16);
                  if (*(char *)(v21 + 23) < 0)
                    v22 = *(_QWORD *)(v21 + 8);
                  else
                    v22 = *(unsigned __int8 *)(v21 + 23);
                  if ((__int128 *)v21 != &google::protobuf::internal::fixed_address_empty_string && v22 != 0)
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)&v61.__r_.__value_.__r.__words[2], v21);
                  v62[0] = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
                  v24 = *(_QWORD *)(v19 + 24);
                  if (*(char *)(v24 + 23) < 0)
                    v25 = *(_QWORD *)(v24 + 8);
                  else
                    v25 = *(unsigned __int8 *)(v24 + 23);
                  if ((__int128 *)v24 != &google::protobuf::internal::fixed_address_empty_string && v25 != 0)
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v62, v24);
                  v27 = 0;
                  if ((_UNKNOWN *)v19 != &CoreML::Specification::_FeatureDescription_default_instance_
                    && *(_QWORD *)(v19 + 32))
                  {
                    v27 = (CoreML::Specification::FeatureType *)operator new();
                    v15 = CoreML::Specification::FeatureType::FeatureType(v27, *(const CoreML::Specification::FeatureType **)(v19 + 32));
                  }
                  v62[1] = (std::string *)v27;
                  v28 = (const void **)v61.__r_.__value_.__r.__words[2];
                  if (*((_DWORD *)v8 + 7) == 21)
                  {
                    v29 = (uint64_t *)v8[2];
                  }
                  else
                  {
                    CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(v15);
                    v29 = &CoreML::Specification::CoreMLModels::_VisionFeaturePrint_Objects_default_instance_;
                  }
                  v30 = v29[4];
                  v31 = v30 ? v30 + 8 : 0;
                  v32 = *((int *)v29 + 6);
                  v33 = v31 + 8 * v32;
                  if ((_DWORD)v32)
                    break;
LABEL_91:
                  if (v33 == v31)
                    goto LABEL_104;
                  CoreML::Specification::FeatureDescription::~FeatureDescription((CoreML::Specification::FeatureDescription *)&v61);
                  if (++v17 == v55)
                    goto LABEL_8;
                }
                v34 = *((_BYTE *)v28 + 23);
                if (v34 >= 0)
                  v35 = (const void *)*((unsigned __int8 *)v28 + 23);
                else
                  v35 = v28[1];
                if (v34 >= 0)
                  v36 = (unsigned __int8 *)v28;
                else
                  v36 = (unsigned __int8 *)*v28;
                do
                {
                  v37 = *(const void ***)v31;
                  v38 = *(unsigned __int8 *)(*(_QWORD *)v31 + 23);
                  if ((v38 & 0x80u) == 0)
                    v39 = (const void *)*(unsigned __int8 *)(*(_QWORD *)v31 + 23);
                  else
                    v39 = *(const void **)(*(_QWORD *)v31 + 8);
                  if (v39 == v35)
                  {
                    if ((v38 & 0x80) != 0)
                    {
                      if (!memcmp(*v37, v36, *(_QWORD *)(*(_QWORD *)v31 + 8)))
                        goto LABEL_91;
                    }
                    else
                    {
                      if (!*(_BYTE *)(*(_QWORD *)v31 + 23))
                        goto LABEL_91;
                      v40 = v36;
                      while (*(unsigned __int8 *)v37 == *v40)
                      {
                        v37 = (const void **)((char *)v37 + 1);
                        ++v40;
                        if (!--v38)
                          goto LABEL_91;
                      }
                    }
                  }
                  v31 += 8;
                }
                while (v31 != v33);
LABEL_104:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
                v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"Model description declares an output: ", 38);
                v50 = *((char *)v28 + 23);
                if (v50 >= 0)
                  v51 = (uint64_t)v28;
                else
                  v51 = (uint64_t)*v28;
                if (v50 >= 0)
                  v52 = *((unsigned __int8 *)v28 + 23);
                else
                  v52 = (uint64_t)v28[1];
                v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, v51, v52);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" but it is not declared in Vision Feature Print output", 54);
                std::stringbuf::str();
                *(_QWORD *)a1 = 13;
                std::operator+<char>();
                if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v64.__r_.__value_.__l.__data_);
                *(_QWORD *)__p = *MEMORY[0x1E0DE4F50];
                v54 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
                *(_QWORD *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
                *(_QWORD *)&__p[16] = v54;
                v57 = MEMORY[0x1E0DE4FB8] + 16;
                if (v59 < 0)
                  operator delete(v58);
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x1A1AD61C4](&v60);
                CoreML::Specification::FeatureDescription::~FeatureDescription((CoreML::Specification::FeatureDescription *)&v61);
                goto LABEL_9;
              }
            }
            break;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "Two outputs for objects need to be provided");
          *(_QWORD *)a1 = 13;
          std::operator+<char>();
          goto LABEL_25;
        }
        if (!v11)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "Version for objects is invalid");
          *(_QWORD *)a1 = 13;
          std::operator+<char>();
LABEL_25:
          if ((__p[23] & 0x80000000) == 0)
            goto LABEL_9;
          v12 = *(void **)__p;
LABEL_102:
          operator delete(v12);
          goto LABEL_9;
        }
        std::to_string(&v64, v11);
        v41 = std::string::insert(&v64, 0, "Version: '");
        v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        v43 = std::string::append(&v61, "' for object print is invalid");
        v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v43->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)a1 = 13;
        std::operator+<char>();
LABEL_96:
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v61.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_9;
        v12 = (void *)v64.__r_.__value_.__r.__words[0];
        goto LABEL_102;
    }
LABEL_8:
    *(_QWORD *)a1 = v65;
    *(_OWORD *)(a1 + 8) = v66;
    *(_QWORD *)(a1 + 24) = v67;
    v66 = 0uLL;
    v67 = 0;
LABEL_9:
    if ((SHIBYTE(v67) & 0x80000000) == 0)
      return;
    v7 = (void *)v66;
    goto LABEL_13;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Model not a vision feature print.");
  *(_QWORD *)a1 = 13;
  std::operator+<char>();
  if ((__p[23] & 0x80000000) == 0)
    return;
  v7 = *(void **)__p;
LABEL_13:
  operator delete(v7);
}

void sub_19CA1D690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 121) < 0)
    operator delete(*(void **)(v18 - 144));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
  CoreML::Specification::FeatureDescription::~FeatureDescription((CoreML::Specification::FeatureDescription *)(v18 - 192));
  if (*(char *)(v18 - 89) < 0)
    operator delete(*(void **)(v18 - 112));
  _Unwind_Resume(a1);
}

void CoreML::Specification::CoreMLModels::WordEmbedding::~WordEmbedding(CoreML::Specification::CoreMLModels::WordEmbedding *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E3D4D528;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::SerializedModel::SharedDtor((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E3D4D528;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::SerializedModel::SharedDtor((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::CoreMLModels::WordEmbedding::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.WordEmbedding");
}

CoreML::Specification::CoreMLModels::WordEmbedding *CoreML::Specification::CoreMLModels::WordEmbedding::New(CoreML::Specification::CoreMLModels::WordEmbedding *this)
{
  return CoreML::Specification::CoreMLModels::WordEmbedding::New(this, 0);
}

CoreML::Specification::CoreMLModels::WordEmbedding *CoreML::Specification::CoreMLModels::WordEmbedding::New(CoreML::Specification::CoreMLModels::WordEmbedding *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::CoreMLModels::WordEmbedding *v3;

  v3 = (CoreML::Specification::CoreMLModels::WordEmbedding *)operator new();
  CoreML::Specification::CoreMLModels::WordEmbedding::WordEmbedding(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::WordEmbedding>(a2, v3);
  return v3;
}

void sub_19CA1D8E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::WordEmbedding::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 16);
  if ((__int128 *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v2 = *(_QWORD *)(this + 24);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::WordEmbedding::IsInitialized(CoreML::Specification::CoreMLModels::WordEmbedding *this)
{
  return 1;
}

uint64_t CoreML::Specification::CoreMLModels::WordEmbedding::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::WordEmbedding *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  char *v15;
  int v16;
  std::string *v17;
  std::string *v18;
  uint64_t result;
  unsigned int *v20;
  std::string::size_type size;
  unsigned int TagFallback;
  uint64_t Varint32Fallback;

  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v7 = *(unsigned __int8 **)a2;
          v8 = *((_QWORD *)a2 + 1);
          if (*(_QWORD *)a2 >= v8)
          {
            LODWORD(v10) = 0;
LABEL_34:
            TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
            v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
            if ((v11 & 0x100000000) == 0)
              goto LABEL_35;
            goto LABEL_9;
          }
          v9 = v7 + 1;
          v10 = *v7;
          if ((char)*v7 < 1)
          {
            if ((unint64_t)v9 < v8)
            {
              v12 = *v9;
              if ((v10 & ~v12) >= 0x80)
              {
                *(_QWORD *)a2 = v7 + 2;
                v11 = (v10 + (v12 << 7) - 128) | 0x100000000;
                goto LABEL_9;
              }
            }
            goto LABEL_34;
          }
          *(_QWORD *)a2 = v9;
          v11 = v10 | 0x100000000;
          if ((v11 & 0x100000000) == 0)
            goto LABEL_35;
LABEL_9:
          v13 = v11 >> 3;
          if (v11 >> 3 != 100)
            break;
          if (v11 != 34)
            goto LABEL_35;
          v17 = *v5;
          if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v17 = *v5;
          }
          if ((google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v17) & 1) == 0)
            return 0;
        }
        if (v13 != 10)
          break;
        if (v11 != 82)
          goto LABEL_35;
        v18 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v18 = *v6;
        }
        result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v18);
        if (!(_DWORD)result)
          return result;
        v20 = (unsigned int *)*v6;
        if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
        {
          v20 = *(unsigned int **)v20;
          size = (*v6)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v20, size, 0, (uint64_t)"CoreML.Specification.CoreMLModels.WordEmbedding.language"))return 0;
      }
      if (v13 != 1 || v11 != 8)
        break;
      v15 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v16 = 0;
        goto LABEL_42;
      }
      v16 = *v15;
      if (*v15 < 0)
      {
LABEL_42:
        Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v16);
        *((_DWORD *)this + 8) = Varint32Fallback;
        if (Varint32Fallback < 0)
          return 0;
      }
      else
      {
        *((_DWORD *)this + 8) = v16;
        *(_QWORD *)a2 = v15 + 1;
      }
    }
LABEL_35:
    if (!(_DWORD)v11 || (v11 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v11, a3) & 1) == 0)
      return 0;
  }
}

uint64_t CoreML::Specification::CoreMLModels::WordEmbedding::ByteSizeLong(CoreML::Specification::CoreMLModels::WordEmbedding *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v5 = *((_QWORD *)this + 3);
  v6 = *(unsigned __int8 *)(v5 + 23);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v7 = v6;
  v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_13:
  v8 = *((_DWORD *)this + 8);
  if (v8)
    v4 += ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::CoreMLModels::WordEmbedding::SerializeWithCachedSizes(CoreML::Specification::CoreMLModels::WordEmbedding *this, google::protobuf::io::CodedOutputStream *a2, unsigned int a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v6 = *((unsigned int *)this + 8);
  if ((_DWORD)v6)
    google::protobuf::internal::WireFormatLite::WriteUInt32(v6, a2, a3, a4);
  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v8 = *(_QWORD *)(result + 8);
    if (!v8)
      goto LABEL_9;
    result = *(_QWORD *)result;
    goto LABEL_8;
  }
  LODWORD(v8) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_8:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v8, 1, (uint64_t)"CoreML.Specification.CoreMLModels.WordEmbedding.language");
    result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xAu, *((_QWORD *)this + 2), a2);
  }
LABEL_9:
  v9 = *((_QWORD *)this + 3);
  if ((*(char *)(v9 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v9 + 23))
      return result;
    return google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(0x64u, v9, a2);
  }
  if (*(_QWORD *)(v9 + 8))
    return google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(0x64u, v9, a2);
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::WordEmbedding::GetCachedSize(CoreML::Specification::CoreMLModels::WordEmbedding *this)
{
  return *((unsigned int *)this + 9);
}

void CoreML::Specification::CoreMLModels::WordEmbedding::MergeFrom(CoreML::Specification::CoreMLModels::WordEmbedding *this, const CoreML::Specification::CoreMLModels::WordEmbedding *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  int v9;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (__int128 *)*((_QWORD *)this + 2);
  if (v6 != (__int128 *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_19;
  }
  v8 = (__int128 *)*((_QWORD *)this + 3);
  if (v8 != (__int128 *)v7)
  {
    if (v8 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v7);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v7);
  }
LABEL_19:
  v9 = *((_DWORD *)a2 + 8);
  if (v9)
    *((_DWORD *)this + 8) = v9;
}

CoreML::Specification::CoreMLModels::WordEmbedding *CoreML::Specification::CoreMLModels::WordEmbedding::WordEmbedding(CoreML::Specification::CoreMLModels::WordEmbedding *this)
{
  *(_QWORD *)this = &off_1E3D4D528;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::WordEmbedding *)&CoreML::Specification::CoreMLModels::_WordEmbedding_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_19CA1DE40(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::WordEmbedding>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::WordEmbedding>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::WordEmbedding>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::Int64Parameter::~Int64Parameter(CoreML::Specification::Int64Parameter *this)
{
  CoreML::Specification::Int64Parameter::~Int64Parameter(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D4E958;
  if (*((_DWORD *)this + 9))
    CoreML::Specification::Int64Parameter::clear_AllowedValues((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::Int64Parameter::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64Parameter");
}

CoreML::Specification::Int64Parameter *CoreML::Specification::Int64Parameter::New(CoreML::Specification::Int64Parameter *this)
{
  return CoreML::Specification::Int64Parameter::New(this, 0);
}

CoreML::Specification::Int64Parameter *CoreML::Specification::Int64Parameter::New(CoreML::Specification::Int64Parameter *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::Int64Parameter *v3;

  v3 = (CoreML::Specification::Int64Parameter *)operator new();
  CoreML::Specification::Int64Parameter::Int64Parameter(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::Int64Parameter>(a2, v3);
  return v3;
}

void sub_19CA1DF48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Int64Parameter::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  return CoreML::Specification::Int64Parameter::clear_AllowedValues(this);
}

uint64_t CoreML::Specification::Int64Parameter::IsInitialized(CoreML::Specification::Int64Parameter *this)
{
  return 1;
}

uint64_t CoreML::Specification::Int64Parameter::MergePartialFromCodedStream(CoreML::Specification::Int64Parameter *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unsigned int v9;
  char *v11;
  unint64_t Varint64Fallback;
  CoreML::Specification::Int64Set *v13;
  CoreML::Specification::Int64Range *v14;
  char *v16;
  int VarintSizeAsIntFallback;
  char *v18;
  int v19;
  char v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  uint64_t result;
  int v27;
  unsigned int v28;
  int v29;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          LODWORD(v6) = 0;
LABEL_6:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_23;
          goto LABEL_7;
        }
        v6 = *v5;
        if (*v5 < 1)
          goto LABEL_6;
        *(_QWORD *)a2 = v5 + 1;
        v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0)
          goto LABEL_23;
LABEL_7:
        v9 = v7 >> 3;
        if (v7 >> 3 == 11)
        {
          if (v7 != 90)
            goto LABEL_23;
          if (*((_DWORD *)this + 9) == 11)
          {
            v13 = (CoreML::Specification::Int64Set *)*((_QWORD *)this + 3);
          }
          else
          {
            CoreML::Specification::Int64Parameter::clear_AllowedValues((uint64_t)this);
            *((_DWORD *)this + 9) = 11;
            v13 = (CoreML::Specification::Int64Set *)operator new();
            CoreML::Specification::Int64Set::Int64Set(v13);
            *((_QWORD *)this + 3) = v13;
          }
          v16 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v16 < 0)
          {
            VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v16;
            *(_QWORD *)a2 = v16 + 1;
          }
          v21 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
          v23 = *((_DWORD *)a2 + 13);
          v24 = __OFSUB__(v23--, 1);
          *((_DWORD *)a2 + 13) = v23;
          if (v23 < 0 != v24)
            return 0;
          v25 = v21;
          result = CoreML::Specification::Int64Set::MergePartialFromCodedStream(v13, a2, v22);
          if (!(_DWORD)result)
            return result;
          goto LABEL_46;
        }
        if (v9 != 10)
          break;
        if (v7 != 82)
          goto LABEL_23;
        if (*((_DWORD *)this + 9) == 10)
        {
          v14 = (CoreML::Specification::Int64Range *)*((_QWORD *)this + 3);
        }
        else
        {
          CoreML::Specification::Int64Parameter::clear_AllowedValues((uint64_t)this);
          *((_DWORD *)this + 9) = 10;
          v14 = (CoreML::Specification::Int64Range *)operator new();
          CoreML::Specification::Int64Range::Int64Range(v14);
          *((_QWORD *)this + 3) = v14;
        }
        v18 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v18 < 0)
        {
          v19 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v19 < 0)
            return 0;
        }
        else
        {
          v19 = *v18;
          *(_QWORD *)a2 = v18 + 1;
        }
        v27 = google::protobuf::io::CodedInputStream::PushLimit(a2, v19);
        v29 = *((_DWORD *)a2 + 13);
        v24 = __OFSUB__(v29--, 1);
        *((_DWORD *)a2 + 13) = v29;
        if (v29 < 0 != v24)
          return 0;
        v25 = v27;
        result = CoreML::Specification::Int64Range::MergePartialFromCodedStream(v14, (char **)a2, v28);
        if (!(_DWORD)result)
          return result;
LABEL_46:
        if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v25))
          return 0;
      }
      if (v9 != 1 || v7 != 8)
        break;
      v11 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v11 < 0)
      {
        Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
        if ((v20 & 1) == 0)
          return 0;
      }
      else
      {
        Varint64Fallback = *v11;
        *(_QWORD *)a2 = v11 + 1;
      }
      *((_QWORD *)this + 2) = Varint64Fallback;
    }
LABEL_23:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      return 0;
  }
}

void sub_19CA1E208(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

unint64_t CoreML::Specification::Int64Parameter::ByteSizeLong(CoreML::Specification::Int64Parameter *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;

  v2 = *((_QWORD *)this + 2);
  v3 = (9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6;
  if (v2)
    v4 = v3 + 1;
  else
    v4 = 0;
  v5 = *((_DWORD *)this + 9);
  if (v5 == 11)
  {
    v6 = CoreML::Specification::Int64Set::ByteSizeLong(*((CoreML::Specification::Int64Set **)this + 3));
    goto LABEL_8;
  }
  if (v5 == 10)
  {
    v6 = CoreML::Specification::Int64Range::ByteSizeLong(*((CoreML::Specification::Int64Range **)this + 3));
LABEL_8:
    v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::Int64Parameter::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  unint64_t v6;
  int v7;

  v5 = this;
  v6 = *(_QWORD *)(this + 16);
  if (v6)
    this = google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  v7 = *(_DWORD *)(v5 + 36);
  if (v7 == 10)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xA, *(_QWORD *)(v5 + 24), a2, a4);
    v7 = *(_DWORD *)(v5 + 36);
  }
  if (v7 == 11)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xB, *(_QWORD *)(v5 + 24), a2, a4);
  return this;
}

uint64_t CoreML::Specification::Int64Parameter::GetCachedSize(CoreML::Specification::Int64Parameter *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CoreML::Specification::Int64Parameter::clear_AllowedValues(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 36);
  if (v2 == 11 || v2 == 10)
  {
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

std::string *CoreML::Specification::Int64Parameter::MergeFrom(std::string *this, const CoreML::Specification::Int64Parameter *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  CoreML::Specification::Int64Range *v7;
  CoreML::Specification::Int64Set *v8;
  CoreML::Specification::protobuf_DataStructures_2eproto *v9;
  const CoreML::Specification::Int64Range *v10;
  CoreML::Specification::protobuf_DataStructures_2eproto *v11;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v12;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    *(_QWORD *)(v3 + 16) = v5;
  v6 = *((_DWORD *)a2 + 9);
  if (v6 == 11)
  {
    if (*(_DWORD *)(v3 + 36) == 11)
    {
      v8 = *(CoreML::Specification::Int64Set **)(v3 + 24);
    }
    else
    {
      CoreML::Specification::Int64Parameter::clear_AllowedValues(v3);
      *(_DWORD *)(v3 + 36) = 11;
      v8 = (CoreML::Specification::Int64Set *)operator new();
      v11 = CoreML::Specification::Int64Set::Int64Set(v8);
      *(_QWORD *)(v3 + 24) = v8;
      if (*((_DWORD *)a2 + 9) != 11)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v11);
        v12 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&CoreML::Specification::_Int64Set_default_instance_;
        return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v8, v12);
      }
    }
    v12 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)a2 + 3);
    return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v8, v12);
  }
  if (v6 == 10)
  {
    if (*(_DWORD *)(v3 + 36) == 10)
    {
      v7 = *(CoreML::Specification::Int64Range **)(v3 + 24);
    }
    else
    {
      CoreML::Specification::Int64Parameter::clear_AllowedValues(v3);
      *(_DWORD *)(v3 + 36) = 10;
      v7 = (CoreML::Specification::Int64Range *)operator new();
      v9 = CoreML::Specification::Int64Range::Int64Range(v7);
      *(_QWORD *)(v3 + 24) = v7;
      if (*((_DWORD *)a2 + 9) != 10)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v9);
        v10 = (const CoreML::Specification::Int64Range *)&CoreML::Specification::_Int64Range_default_instance_;
        return CoreML::Specification::Int64Range::MergeFrom((std::string *)v7, v10);
      }
    }
    v10 = (const CoreML::Specification::Int64Range *)*((_QWORD *)a2 + 3);
    return CoreML::Specification::Int64Range::MergeFrom((std::string *)v7, v10);
  }
  return this;
}

void sub_19CA1E4F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

CoreML::Specification::Int64Parameter *CoreML::Specification::Int64Parameter::Int64Parameter(CoreML::Specification::Int64Parameter *this)
{
  *(_QWORD *)this = &off_1E3D4E958;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Int64Parameter *)&CoreML::Specification::_Int64Parameter_default_instance_)
    CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_19CA1E584(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Int64Parameter>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Parameter>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Parameter>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::BoolParameter::~BoolParameter(CoreML::Specification::BoolParameter *this)
{
  *(_QWORD *)this = &off_1E3D4E1A0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D4E1A0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::BoolParameter::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.BoolParameter");
}

CoreML::Specification::BoolParameter *CoreML::Specification::BoolParameter::New(CoreML::Specification::BoolParameter *this)
{
  return CoreML::Specification::BoolParameter::New(this, 0);
}

CoreML::Specification::BoolParameter *CoreML::Specification::BoolParameter::New(CoreML::Specification::BoolParameter *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::BoolParameter *v3;

  v3 = (CoreML::Specification::BoolParameter *)operator new();
  CoreML::Specification::BoolParameter::BoolParameter(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::BoolParameter>(a2, v3);
  return v3;
}

void sub_19CA1E6D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::BoolParameter::Clear(uint64_t this)
{
  *(_BYTE *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::BoolParameter::IsInitialized(CoreML::Specification::BoolParameter *this)
{
  return 1;
}

std::string *CoreML::Specification::BoolParameter::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_BYTE *)a2 + 16))
    v3->__r_.__value_.__s.__data_[16] = 1;
  return this;
}

uint64_t CoreML::Specification::BoolParameter::MergePartialFromCodedStream(CoreML::Specification::BoolParameter *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  char *v11;
  unint64_t Varint64Fallback;
  char v13;

  do
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
        if ((v13 & 1) == 0)
          return 0;
      }
      else
      {
        Varint64Fallback = *v11;
        *a2 = v11 + 1;
      }
      *((_BYTE *)this + 16) = Varint64Fallback != 0;
    }
    if ((_DWORD)v7)
      v10 = (v7 & 7) == 4;
    else
      v10 = 1;
    if (v10)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::BoolParameter::ByteSizeLong(CoreML::Specification::BoolParameter *this)
{
  uint64_t v1;

  v1 = 2 * *((unsigned __int8 *)this + 16);
  *((_DWORD *)this + 5) = v1;
  return v1;
}

uint64_t CoreML::Specification::BoolParameter::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_BYTE *)(this + 16))
    return google::protobuf::internal::WireFormatLite::WriteBool(1, 1u, a2, a4);
  return this;
}

uint64_t CoreML::Specification::BoolParameter::GetCachedSize(CoreML::Specification::BoolParameter *this)
{
  return *((unsigned int *)this + 5);
}

CoreML::Specification::BoolParameter *CoreML::Specification::BoolParameter::BoolParameter(CoreML::Specification::BoolParameter *this)
{
  *(_QWORD *)this = &off_1E3D4E1A0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::BoolParameter *)&CoreML::Specification::_BoolParameter_default_instance_)
    CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(this);
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  return this;
}

void sub_19CA1E8C8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::BoolParameter>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::BoolParameter>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::BoolParameter>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::StringParameter::~StringParameter(CoreML::Specification::StringParameter *this)
{
  *(_QWORD *)this = &off_1E3D4F798;
  google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(*((_QWORD *)this + 2));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D4F798;
  google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(*((_QWORD *)this + 2));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::StringParameter::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.StringParameter");
}

CoreML::Specification::StringParameter *CoreML::Specification::StringParameter::New(CoreML::Specification::StringParameter *this)
{
  return CoreML::Specification::StringParameter::New(this, 0);
}

CoreML::Specification::StringParameter *CoreML::Specification::StringParameter::New(CoreML::Specification::StringParameter *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::StringParameter *v3;

  v3 = (CoreML::Specification::StringParameter *)operator new();
  CoreML::Specification::StringParameter::StringParameter(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::StringParameter>(a2, v3);
  return v3;
}

void sub_19CA1EA30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::StringParameter::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 16);
  if ((__int128 *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  return this;
}

uint64_t CoreML::Specification::StringParameter::IsInitialized(CoreML::Specification::StringParameter *this)
{
  return 1;
}

uint64_t CoreML::Specification::StringParameter::MergePartialFromCodedStream(CoreML::Specification::StringParameter *this, char **a2, unsigned int a3)
{
  std::string **v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  std::string *v11;
  uint64_t result;
  unsigned int *v13;
  std::string::size_type size;

  v4 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_7:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *v4;
      if (*v4 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v4;
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v11);
      if (!(_DWORD)result)
        return result;
      v13 = (unsigned int *)*v4;
      if (SHIBYTE((*v4)->__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = *(unsigned int **)v13;
        size = (*v4)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v4)->__r_.__value_.__r.__words[2]);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, size, 0, (uint64_t)"CoreML.Specification.StringParameter.defaultValue"))return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::StringParameter::ByteSizeLong(CoreML::Specification::StringParameter *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  *((_DWORD *)this + 6) = v4;
  return v4;
}

uint64_t CoreML::Specification::StringParameter::SerializeWithCachedSizes(CoreML::Specification::StringParameter *this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t result;
  uint64_t v5;

  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      return result;
    result = *(_QWORD *)result;
    goto LABEL_6;
  }
  LODWORD(v5) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v5, 1, (uint64_t)"CoreML.Specification.StringParameter.defaultValue");
    return google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((_QWORD *)this + 2), a2);
  }
  return result;
}

uint64_t CoreML::Specification::StringParameter::GetCachedSize(CoreML::Specification::StringParameter *this)
{
  return *((unsigned int *)this + 6);
}

CoreML::Specification::StringParameter *CoreML::Specification::StringParameter::StringParameter(CoreML::Specification::StringParameter *this)
{
  *(_QWORD *)this = &off_1E3D4F798;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::StringParameter *)&CoreML::Specification::_StringParameter_default_instance_)
    CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_19CA1ECE4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::StringParameter>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::StringParameter>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::StringParameter>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::DoubleParameter::~DoubleParameter(CoreML::Specification::DoubleParameter *this)
{
  CoreML::Specification::DoubleParameter::~DoubleParameter(this);
  JUMPOUT(0x1A1AD6260);
}

{
  int v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E3D4F2D8;
  v2 = *((_DWORD *)this + 9);
  if (v2)
  {
    if (v2 == 10)
    {
      v3 = *((_QWORD *)this + 3);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    *((_DWORD *)this + 9) = 0;
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::DoubleParameter::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DoubleParameter");
}

CoreML::Specification::DoubleParameter *CoreML::Specification::DoubleParameter::New(CoreML::Specification::DoubleParameter *this)
{
  return CoreML::Specification::DoubleParameter::New(this, 0);
}

CoreML::Specification::DoubleParameter *CoreML::Specification::DoubleParameter::New(CoreML::Specification::DoubleParameter *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::DoubleParameter *v3;

  v3 = (CoreML::Specification::DoubleParameter *)operator new();
  CoreML::Specification::DoubleParameter::DoubleParameter(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::DoubleParameter>(a2, v3);
  return v3;
}

void sub_19CA1EDEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::DoubleParameter::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  *(_QWORD *)(this + 16) = 0;
  if (*(_DWORD *)(this + 36) == 10)
  {
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::DoubleParameter::IsInitialized(CoreML::Specification::DoubleParameter *this)
{
  return 1;
}

BOOL CoreML::Specification::DoubleParameter::MergePartialFromCodedStream(CoreML::Specification::DoubleParameter *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t *v10;
  unint64_t v11;
  CoreML::Specification::DoubleRange *v12;
  BOOL v13;
  char *v14;
  int VarintSizeAsIntFallback;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  _BOOL8 result;
  unint64_t v22;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = *(char **)a2;
        if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1))
          break;
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) != 0)
          goto LABEL_7;
LABEL_19:
        if ((_DWORD)v7)
          v13 = (v7 & 7) == 4;
        else
          v13 = 1;
        if (v13)
          return 1;
        if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *(_QWORD *)a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_19;
LABEL_7:
      if (v7 >> 3 == 10)
        break;
      if (v7 >> 3 != 1 || v7 != 9)
        goto LABEL_19;
      v22 = 0;
      v10 = *(unint64_t **)a2;
      if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
      {
        result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v22);
        if (!result)
          return result;
        v11 = v22;
      }
      else
      {
        v11 = *v10;
        *(_QWORD *)a2 = v10 + 1;
      }
      *((_QWORD *)this + 2) = v11;
    }
    if (v7 != 82)
      goto LABEL_19;
    if (*((_DWORD *)this + 9) == 10)
    {
      v12 = (CoreML::Specification::DoubleRange *)*((_QWORD *)this + 3);
    }
    else
    {
      *((_DWORD *)this + 9) = 10;
      v12 = (CoreML::Specification::DoubleRange *)operator new();
      CoreML::Specification::DoubleRange::DoubleRange(v12);
      *((_QWORD *)this + 3) = v12;
    }
    v14 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
    {
      VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
      if (VarintSizeAsIntFallback < 0)
        return 0;
    }
    else
    {
      VarintSizeAsIntFallback = *v14;
      *(_QWORD *)a2 = v14 + 1;
    }
    v16 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
    v18 = *((_DWORD *)a2 + 13);
    v19 = __OFSUB__(v18--, 1);
    *((_DWORD *)a2 + 13) = v18;
    if (v18 < 0 != v19)
      break;
    v20 = v16;
    result = CoreML::Specification::DoubleRange::MergePartialFromCodedStream(v12, (char **)a2, v17);
    if (!result)
      return result;
  }
  while (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v20));
  return 0;
}

void sub_19CA1F034(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::DoubleParameter::ByteSizeLong(CoreML::Specification::DoubleParameter *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = 9;
  if (*((double *)this + 2) == 0.0)
    v1 = 0;
  if (*((_DWORD *)this + 9) == 10)
  {
    v2 = *((_QWORD *)this + 3);
    v3 = 9;
    if (*(double *)(v2 + 16) == 0.0)
      v3 = 0;
    if (*(double *)(v2 + 24) != 0.0)
      v3 += 9;
    *(_DWORD *)(v2 + 32) = v3;
    v1 += v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 8) = v1;
  return v1;
}

uint64_t CoreML::Specification::DoubleParameter::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  double v6;

  v5 = this;
  v6 = *(double *)(this + 16);
  if (v6 != 0.0)
    this = google::protobuf::internal::WireFormatLite::WriteDouble(1, a2, v6, a3);
  if (*(_DWORD *)(v5 + 36) == 10)
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xA, *(_QWORD *)(v5 + 24), a2, a4);
  return this;
}

uint64_t CoreML::Specification::DoubleParameter::GetCachedSize(CoreML::Specification::DoubleParameter *this)
{
  return *((unsigned int *)this + 8);
}

std::string *CoreML::Specification::DoubleParameter::MergeFrom(std::string *this, const CoreML::Specification::DoubleParameter *a2)
{
  std::string *v3;
  uint64_t v4;
  double v5;
  CoreML::Specification::DoubleRange *data;
  CoreML::Specification::protobuf_DataStructures_2eproto *v7;
  const CoreML::Specification::SigmoidKernel *v8;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((double *)a2 + 2);
  if (v5 != 0.0)
    *(double *)&v3->__r_.__value_.__r.__words[2] = v5;
  if (*((_DWORD *)a2 + 9) == 10)
  {
    if (HIDWORD(v3[1].__r_.__value_.__r.__words[1]) == 10)
    {
      data = (CoreML::Specification::DoubleRange *)v3[1].__r_.__value_.__l.__data_;
    }
    else
    {
      HIDWORD(v3[1].__r_.__value_.__r.__words[1]) = 10;
      data = (CoreML::Specification::DoubleRange *)operator new();
      v7 = CoreML::Specification::DoubleRange::DoubleRange(data);
      v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      if (*((_DWORD *)a2 + 9) != 10)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v7);
        v8 = (const CoreML::Specification::SigmoidKernel *)&CoreML::Specification::_DoubleRange_default_instance_;
        return CoreML::Specification::SigmoidKernel::MergeFrom((std::string *)data, v8);
      }
    }
    v8 = (const CoreML::Specification::SigmoidKernel *)*((_QWORD *)a2 + 3);
    return CoreML::Specification::SigmoidKernel::MergeFrom((std::string *)data, v8);
  }
  return this;
}

void sub_19CA1F1F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

CoreML::Specification::DoubleParameter *CoreML::Specification::DoubleParameter::DoubleParameter(CoreML::Specification::DoubleParameter *this)
{
  *(_QWORD *)this = &off_1E3D4F2D8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::DoubleParameter *)&CoreML::Specification::_DoubleParameter_default_instance_)
    CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_19CA1F26C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::DoubleParameter>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleParameter>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleParameter>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

CoreML::Specification::Int64Parameter *CoreML::Specification::Int64Parameter::Int64Parameter(CoreML::Specification::Int64Parameter *this, const CoreML::Specification::Int64Parameter *a2)
{
  uint64_t v4;
  int v5;
  CoreML::Specification::Int64Set *v6;
  CoreML::Specification::protobuf_DataStructures_2eproto *v7;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v8;
  CoreML::Specification::Int64Range *v9;
  CoreML::Specification::protobuf_DataStructures_2eproto *v10;
  const CoreML::Specification::Int64Range *v11;

  *(_QWORD *)this = &off_1E3D4E958;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_DWORD *)this + 9) = 0;
  v5 = *((_DWORD *)a2 + 9);
  if (v5 == 10)
  {
    CoreML::Specification::Int64Parameter::clear_AllowedValues((uint64_t)this);
    *((_DWORD *)this + 9) = 10;
    v9 = (CoreML::Specification::Int64Range *)operator new();
    v10 = CoreML::Specification::Int64Range::Int64Range(v9);
    *((_QWORD *)this + 3) = v9;
    if (*((_DWORD *)a2 + 9) == 10)
    {
      v11 = (const CoreML::Specification::Int64Range *)*((_QWORD *)a2 + 3);
    }
    else
    {
      CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v10);
      v11 = (const CoreML::Specification::Int64Range *)&CoreML::Specification::_Int64Range_default_instance_;
    }
    CoreML::Specification::Int64Range::MergeFrom((std::string *)v9, v11);
  }
  else if (v5 == 11)
  {
    CoreML::Specification::Int64Parameter::clear_AllowedValues((uint64_t)this);
    *((_DWORD *)this + 9) = 11;
    v6 = (CoreML::Specification::Int64Set *)operator new();
    v7 = CoreML::Specification::Int64Set::Int64Set(v6);
    *((_QWORD *)this + 3) = v6;
    if (*((_DWORD *)a2 + 9) == 11)
    {
      v8 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)a2 + 3);
    }
    else
    {
      CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v7);
      v8 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&CoreML::Specification::_Int64Set_default_instance_;
    }
    CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v6, v8);
  }
  return this;
}

void sub_19CA1F4BC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1A1AD6260](v2, 0x1081C40B7564605);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::DoubleParameter *CoreML::Specification::DoubleParameter::DoubleParameter(CoreML::Specification::DoubleParameter *this, const CoreML::Specification::DoubleParameter *a2)
{
  uint64_t v4;
  CoreML::Specification::DoubleRange *v5;
  CoreML::Specification::protobuf_DataStructures_2eproto *v6;
  const CoreML::Specification::SigmoidKernel *v7;

  *(_QWORD *)this = &off_1E3D4F2D8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_DWORD *)this + 9) = 0;
  if (*((_DWORD *)a2 + 9) == 10)
  {
    *((_DWORD *)this + 9) = 10;
    v5 = (CoreML::Specification::DoubleRange *)operator new();
    v6 = CoreML::Specification::DoubleRange::DoubleRange(v5);
    *((_QWORD *)this + 3) = v5;
    if (*((_DWORD *)a2 + 9) == 10)
    {
      v7 = (const CoreML::Specification::SigmoidKernel *)*((_QWORD *)a2 + 3);
    }
    else
    {
      CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v6);
      v7 = (const CoreML::Specification::SigmoidKernel *)&CoreML::Specification::_DoubleRange_default_instance_;
    }
    CoreML::Specification::SigmoidKernel::MergeFrom((std::string *)v5, v7);
  }
  return this;
}

void sub_19CA1F5CC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1A1AD6260](v2, 0x1081C40B7564605);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::StringParameter *CoreML::Specification::StringParameter::StringParameter(CoreML::Specification::StringParameter *this, const CoreML::Specification::StringParameter *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E3D4F798;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((__int128 *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  return this;
}

void sub_19CA1F690(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::TreeEnsembles *this, const CoreML::Specification::Model *a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char **v13;
  char **v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *shared_weak_owners;
  char *shared_owners;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  char *v52;
  uint64_t *v53;
  char **v54;
  uint64_t *v55;
  char **v56;
  BOOL v57;
  char *v58;
  char **v59;
  _OWORD *v60;
  __int128 v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  char *v67;
  char **v68;
  uint64_t *v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t *v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t **v82;
  _QWORD *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  unint64_t *p_shared_owners;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  unint64_t *v125;
  std::__shared_weak_count *v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  char *v142;
  __int128 v143;
  int64x2_t v144;
  uint64_t v145;
  char *v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  char *v156;
  __int128 v157;
  unint64_t *v158;
  unint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  char *v162;
  __int128 v163;
  int64x2_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t **v167;
  _QWORD *v168;
  _QWORD *v169;
  unint64_t *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count *v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  _OWORD *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  __int128 v201;
  unint64_t *v202;
  unint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  char *v206;
  __int128 v207;
  int64x2_t v208;
  char *v209;
  unint64_t j;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t *v230;
  char *v231;
  _QWORD *v232;
  uint64_t *v233;
  char *i;
  char *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  char *v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t *v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t *v270;
  _QWORD *v271;
  std::string::size_type *k;
  std::string::size_type *v273;
  std::string::size_type size;
  std::string::size_type v275;
  std::string *v276;
  std::string *v277;
  std::string *v278;
  std::string::size_type v279;
  std::string::size_type *v280;
  _QWORD *v281;
  _QWORD *v282;
  char *v283;
  char *v284;
  _QWORD *v285;
  _QWORD *v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  _QWORD **v294;
  uint64_t v295;
  _QWORD *v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  _BYTE *v301;
  uint64_t v302;
  unint64_t v303;
  _QWORD *v304;
  _QWORD *v305;
  uint64_t v306;
  _QWORD *v307;
  _QWORD *v308;
  char *v309;
  unint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  char *v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  CoreML::Specification::protobuf_TreeEnsemble_2eproto *v317;
  int v318;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v319;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t *v324;
  int v325;
  int v326;
  int v327;
  std::vector<std::string>::size_type v328;
  int v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  _QWORD *v341;
  _QWORD *v342;
  char *v343;
  int64_t v344;
  _BYTE *v345;
  int64_t v346;
  uint64_t v347;
  std::logic_error *v349;
  std::logic_error *v350;
  std::string *v351;
  __int128 v352;
  std::logic_error *exception;
  const CoreML::Specification::Model *v354;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  char *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  std::string v366;
  int v367;
  uint64_t v368;
  char *v369;
  char *v370;
  void *v371;
  uint64_t v372;
  void *v373;
  std::__shared_weak_count *v374;
  char v375;
  uint64_t v376;
  std::__shared_weak_count *v377;
  int64x2_t v378;
  char *v379;
  int64x2_t v380;
  _QWORD v381[2];
  _QWORD *v382[2];
  _QWORD v383[11];
  char v384;
  uint64_t v385;
  uint64_t v386;
  _BYTE __p[32];
  char **v388;
  void *v389;
  char v390;
  _QWORD v391[22];

  v391[19] = *MEMORY[0x1E0C80C00];
  v386 = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v383);
  v382[0] = &v386;
  v382[1] = v383;
  v3 = *((_DWORD *)a2 + 11);
  if (v3 != 302 && v3 != 402)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Model is not a tree ensemble.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E3D427E8, MEMORY[0x1E0DE4360]);
  }
  if (*(_QWORD *)(*((_QWORD *)a2 + 4) + 16))
    v4 = *(uint64_t **)(*((_QWORD *)a2 + 4) + 16);
  else
    v4 = &CoreML::Specification::_TreeEnsembleParameters_default_instance_;
  v380 = 0uLL;
  v381[0] = 0;
  v5 = v4[8];
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Given output dimension equals 0.");
    CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v382, (uint64_t)__p, 1);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  v365 = v5;
  v370 = 0;
  v371 = 0;
  v369 = (char *)&v370;
  v6 = v4[4];
  if (v6)
    v7 = v6 + 8;
  else
    v7 = 0;
  v8 = *((int *)v4 + 6);
  v354 = a2;
  v356 = v4;
  if ((_DWORD)v8)
  {
    v358 = v7 + 8 * v8;
    v363 = *MEMORY[0x1E0DE4F60];
    v361 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v357 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      v9 = *(_QWORD *)v7;
      v10 = *(_QWORD *)(*(_QWORD *)v7 + 40);
      v11 = *(_QWORD *)(*(_QWORD *)v7 + 48);
      v12 = v370;
      v13 = &v370;
      if (!v370)
        goto LABEL_33;
      v14 = &v370;
      do
      {
        v15 = *((_QWORD *)v12 + 4);
        if (v15 >= v10)
        {
          if (v10 >= v15)
          {
            if (*((_QWORD *)v12 + 5) < v11)
              v12 += 8;
            else
              v14 = (char **)v12;
          }
          else
          {
            v14 = (char **)v12;
          }
        }
        else
        {
          v12 += 8;
        }
        v12 = *(char **)v12;
      }
      while (v12);
      v13 = &v370;
      if (v14 == &v370)
        goto LABEL_33;
      v16 = v14[6];
      if (*((_QWORD *)v16 + 4) != v10)
        break;
      v13 = v14;
      if (*((_QWORD *)v16 + 5) != v11)
        goto LABEL_33;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Tree Node with TreeID=", 22);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"and NodeID=", 11);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" duplicated in specification.", 29);
      std::stringbuf::str();
      CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v382, (uint64_t)&v366, 0);
      if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v366.__r_.__value_.__l.__data_);
      *(_QWORD *)__p = v363;
      *(_QWORD *)&__p[*(_QWORD *)(v363 - 24)] = v361;
      *(_QWORD *)&__p[8] = MEMORY[0x1E0DE4FB8] + 16;
      if (v390 < 0)
        operator delete(v389);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1A1AD61C4](v391);
LABEL_103:
      v7 += 8;
      if (v7 == v358)
      {
        v78 = v369;
        v378.i64[0] = (uint64_t)&v369;
        v378.i64[1] = (uint64_t)v382;
        if (v369 != (char *)&v370)
        {
          v79 = MEMORY[0x1E0DE4FB8] + 16;
          while (1)
          {
            v80 = *((_QWORD *)v78 + 6);
            if (*(_BYTE *)v80)
              goto LABEL_143;
            CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_2::operator()(&v373, &v378, *(_QWORD *)(v80 + 32), *(_QWORD *)(v80 + 56));
            v83 = v373;
            if (!v373)
              goto LABEL_171;
            if (v373 == *((void **)v78 + 6))
              break;
            v84 = (std::__shared_weak_count *)*((_QWORD *)v373 + 14);
            if (v84)
            {
              v85 = std::__shared_weak_count::lock(v84);
              if (v85)
              {
                v86 = v85;
                v87 = v83[13];
                p_shared_owners = (unint64_t *)&v85->__shared_owners_;
                do
                  v89 = __ldaxr(p_shared_owners);
                while (__stlxr(v89 - 1, p_shared_owners));
                if (v89)
                {
                  if (v87)
                    goto LABEL_158;
                }
                else
                {
                  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                  std::__shared_weak_count::__release_weak(v86);
                  if (v87)
                  {
LABEL_158:
                    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"In TreeID=", 10);
                    v90 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)", false child of NodeID=", 24);
                    v91 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)" is already the child of node NodeID=", 37);
                    v92 = v373;
                    v93 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)v373 + 14));
                    v366.__r_.__value_.__r.__words[0] = v92[13];
                    v366.__r_.__value_.__l.__size_ = (std::string::size_type)v93;
                    std::ostream::operator<<();
                    v94 = (unint64_t *)&v93->__shared_owners_;
                    do
                      v95 = __ldaxr(v94);
                    while (__stlxr(v95 - 1, v94));
                    if (!v95)
                    {
                      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                      std::__shared_weak_count::__release_weak(v93);
                    }
                    std::stringbuf::str();
                    CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v382, (uint64_t)&v366, 0);
                    if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v366.__r_.__value_.__l.__data_);
                    *(_QWORD *)__p = v363;
                    *(_QWORD *)&__p[*(_QWORD *)(v363 - 24)] = v361;
                    *(_QWORD *)&__p[8] = MEMORY[0x1E0DE4FB8] + 16;
                    goto LABEL_168;
                  }
                }
              }
            }
            v101 = v373;
            v102 = v374;
            std::shared_ptr<unsigned char>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v78 + 6) + 136), (uint64_t)v373, (uint64_t)v374);
            v104 = *((_QWORD *)v78 + 6);
            v103 = *((_QWORD *)v78 + 7);
            if (v103)
            {
              v105 = (unint64_t *)(v103 + 16);
              do
                v106 = __ldxr(v105);
              while (__stxr(v106 + 1, v105));
            }
            v107 = (std::__shared_weak_count *)*((_QWORD *)v101 + 14);
            *((_QWORD *)v101 + 13) = v104;
            *((_QWORD *)v101 + 14) = v103;
            if (v107)
              std::__shared_weak_count::__release_weak(v107);
            if (v102)
            {
              v108 = (unint64_t *)&v102->__shared_owners_;
              do
                v109 = __ldaxr(v108);
              while (__stlxr(v109 - 1, v108));
              if (!v109)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_2::operator()(&v373, &v378, *(_QWORD *)(*((_QWORD *)v78 + 6) + 32), *(_QWORD *)(*((_QWORD *)v78 + 6) + 48));
            v110 = v373;
            if (v373)
            {
              if (v373 == *((void **)v78 + 6))
              {
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"True child and parent have same ID (TreeID=", 43);
                v123 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)", NodeID=", 9);
                v124 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)")", 1);
                std::stringbuf::str();
                CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v382, (uint64_t)&v366, 0);
              }
              else
              {
                v111 = (std::__shared_weak_count *)*((_QWORD *)v373 + 14);
                if (!v111 || (v112 = std::__shared_weak_count::lock(v111)) == 0)
                {
LABEL_212:
                  v127 = v373;
                  v128 = (uint64_t)v374;
                  std::shared_ptr<unsigned char>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v78 + 6) + 120), (uint64_t)v373, (uint64_t)v374);
                  v130 = *((_QWORD *)v78 + 6);
                  v129 = *((_QWORD *)v78 + 7);
                  if (v129)
                  {
                    v131 = (unint64_t *)(v129 + 16);
                    do
                      v132 = __ldxr(v131);
                    while (__stxr(v132 + 1, v131));
                  }
                  v133 = (std::__shared_weak_count *)*((_QWORD *)v127 + 14);
                  *((_QWORD *)v127 + 13) = v130;
                  *((_QWORD *)v127 + 14) = v129;
                  if (v133)
                    std::__shared_weak_count::__release_weak(v133);
                  if (!v128)
                    goto LABEL_143;
                  v134 = (unint64_t *)(v128 + 8);
                  do
                    v135 = __ldaxr(v134);
                  while (__stlxr(v135 - 1, v134));
                  if (v135)
                    goto LABEL_143;
                  (*(void (**)(uint64_t))(*(_QWORD *)v128 + 16))(v128);
                  v126 = (std::__shared_weak_count *)v128;
                  goto LABEL_210;
                }
                v113 = v112;
                v114 = v110[13];
                v115 = (unint64_t *)&v112->__shared_owners_;
                do
                  v116 = __ldaxr(v115);
                while (__stlxr(v116 - 1, v115));
                if (v116)
                {
                  if (!v114)
                    goto LABEL_212;
                }
                else
                {
                  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                  std::__shared_weak_count::__release_weak(v113);
                  if (!v114)
                    goto LABEL_212;
                }
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"In TreeID=", 10);
                v117 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)", true child of NodeID=", 23);
                v118 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)" is already the child of node NodeID=", 37);
                v119 = v373;
                v120 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)v373 + 14));
                v366.__r_.__value_.__r.__words[0] = v119[13];
                v366.__r_.__value_.__l.__size_ = (std::string::size_type)v120;
                std::ostream::operator<<();
                v121 = (unint64_t *)&v120->__shared_owners_;
                do
                  v122 = __ldaxr(v121);
                while (__stlxr(v122 - 1, v121));
                if (!v122)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v120);
                }
                std::stringbuf::str();
                CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v382, (uint64_t)&v366, 0);
              }
              if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v366.__r_.__value_.__l.__data_);
              *(_QWORD *)__p = v363;
              *(_QWORD *)&__p[*(_QWORD *)(v363 - 24)] = v361;
              *(_QWORD *)&__p[8] = MEMORY[0x1E0DE4FB8] + 16;
              if (v390 < 0)
                operator delete(v389);
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x1A1AD61C4](v391);
            }
            v98 = (uint64_t)v374;
            if (v374)
            {
              v125 = (unint64_t *)&v374->__shared_owners_;
              do
                v100 = __ldaxr(v125);
              while (__stlxr(v100 - 1, v125));
              goto LABEL_208;
            }
LABEL_143:
            v81 = (uint64_t *)*((_QWORD *)v78 + 1);
            if (v81)
            {
              do
              {
                v82 = (uint64_t **)v81;
                v81 = (uint64_t *)*v81;
              }
              while (v81);
            }
            else
            {
              do
              {
                v82 = (uint64_t **)*((_QWORD *)v78 + 2);
                v57 = *v82 == (uint64_t *)v78;
                v78 = (char *)v82;
              }
              while (!v57);
            }
            v78 = (char *)v82;
            if (v82 == (uint64_t **)&v370)
              goto LABEL_223;
          }
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"False child and parent have same ID (TreeID=", 44);
          v96 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)", NodeID=", 9);
          v97 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)")", 1);
          std::stringbuf::str();
          CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v382, (uint64_t)&v366, 0);
          if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v366.__r_.__value_.__l.__data_);
          *(_QWORD *)__p = v363;
          *(_QWORD *)&__p[*(_QWORD *)(v363 - 24)] = v361;
          *(_QWORD *)&__p[8] = v79;
LABEL_168:
          if (v390 < 0)
            operator delete(v389);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1A1AD61C4](v391);
LABEL_171:
          v98 = (uint64_t)v374;
          if (!v374)
            goto LABEL_143;
          v99 = (unint64_t *)&v374->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
LABEL_208:
          if (!v100)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v98 + 16))(v98);
            v126 = (std::__shared_weak_count *)v98;
LABEL_210:
            std::__shared_weak_count::__release_weak(v126);
            goto LABEL_143;
          }
          goto LABEL_143;
        }
        goto LABEL_223;
      }
    }
    v13 = v14;
LABEL_33:
    v19 = (char *)operator new(0xB0uLL);
    v20 = (std::__shared_weak_count *)v19;
    *((_QWORD *)v19 + 1) = 0;
    v21 = (unint64_t *)(v19 + 8);
    *((_QWORD *)v19 + 2) = 0;
    *(_QWORD *)v19 = &off_1E3D5BD10;
    *(_OWORD *)(v19 + 24) = 0u;
    *(_OWORD *)(v19 + 40) = 0u;
    *(_OWORD *)(v19 + 56) = 0u;
    *(_OWORD *)(v19 + 72) = 0u;
    *(_OWORD *)(v19 + 88) = 0u;
    *(_OWORD *)(v19 + 104) = 0u;
    *(_OWORD *)(v19 + 120) = 0u;
    *(_OWORD *)(v19 + 136) = 0u;
    *(_OWORD *)(v19 + 152) = 0u;
    *((_QWORD *)v19 + 21) = 0;
    v378.i64[0] = (uint64_t)(v19 + 24);
    v378.i64[1] = (uint64_t)v19;
    *(_OWORD *)(v19 + 56) = *(_OWORD *)(v9 + 40);
    v22 = *(_DWORD *)(v9 + 56);
    v19[24] = v22 == 6;
    *((_QWORD *)v19 + 12) = *(_QWORD *)(v9 + 96);
    v359 = v19 + 24;
    v360 = v7;
    if (v22 == 6)
    {
      v23 = *(int *)(v9 + 24);
      if ((_DWORD)v23)
      {
        if ((v23 & 0x80000000) != 0)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(*(int *)(v9 + 24));
        v26 = v25;
        bzero(v24, 16 * v23);
        shared_owners = (char *)v20[4].__shared_owners_;
        shared_weak_owners = (char *)v20[4].__shared_weak_owners_;
        v29 = (unint64_t *)v24;
        if (shared_weak_owners != shared_owners)
        {
          do
          {
            *((_OWORD *)v29 - 1) = *((_OWORD *)shared_weak_owners - 1);
            v29 -= 2;
            shared_weak_owners -= 16;
          }
          while (shared_weak_owners != shared_owners);
          shared_weak_owners = (char *)v20[4].__shared_owners_;
        }
        v20[4].__shared_owners_ = (uint64_t)v29;
        v20[4].__shared_weak_owners_ = (uint64_t)&v24[16 * v23];
        v20[5].__vftable = (std::__shared_weak_count_vtbl *)&v24[16 * v26];
        if (shared_weak_owners)
        {
          operator delete(shared_weak_owners);
          v29 = (unint64_t *)v20[4].__shared_owners_;
        }
        v30 = *(unsigned int *)(v9 + 24);
        if ((int)v30 >= 1)
        {
          v31 = 0;
          v32 = 16 * v30;
          v33 = (uint64_t *)(*(_QWORD *)(v9 + 32) + 8);
          do
          {
            v34 = *v33++;
            v35 = *(_QWORD *)(v34 + 24);
            v36 = &v29[v31 / 8];
            *v36 = *(_QWORD *)(v34 + 16);
            v36[1] = v35;
            v31 += 16;
          }
          while (v32 != v31);
        }
      }
      else
      {
        v29 = 0;
      }
      v37 = (unint64_t *)v20[4].__shared_weak_owners_;
      v38 = (char *)v37 - (char *)v29;
      if (v37 == v29)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Leaf Node (TreeID=", 18);
        v44 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", NodeID=", 9);
        v45 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)") has no evaluation value(s) specified.", 39);
        std::stringbuf::str();
        CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v382, (uint64_t)&v366, 0);
        if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v366.__r_.__value_.__l.__data_);
        *(_QWORD *)__p = v363;
        *(_QWORD *)&__p[*(_QWORD *)(v363 - 24)] = v361;
        *(_QWORD *)&__p[8] = v357;
        if (v390 < 0)
          operator delete(v389);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1A1AD61C4](v391);
      }
      else
      {
        if ((unint64_t)v38 >= 0x11)
        {
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *,false>(v29, v20[4].__shared_weak_owners_, 126 - 2 * __clz(v38 >> 4), 1);
          v29 = (unint64_t *)v20[4].__shared_owners_;
          v37 = (unint64_t *)v20[4].__shared_weak_owners_;
        }
        if (v29 == v37)
        {
          v43 = (uint64_t)v37;
        }
        else
        {
          do
          {
            if (*v29 >= v365)
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Leaf Node (TreeID=", 18);
              v39 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)", NodeID=", 9);
              v40 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") specifies evaluation value applied to dimension ", 50);
              v41 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"; which is out of range. Dimension must be less than ",
                53);
              v42 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)".", 1);
              std::stringbuf::str();
              CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v382, (uint64_t)&v366, 0);
              if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v366.__r_.__value_.__l.__data_);
              *(_QWORD *)__p = v363;
              *(_QWORD *)&__p[*(_QWORD *)(v363 - 24)] = v361;
              *(_QWORD *)&__p[8] = MEMORY[0x1E0DE4FB8] + 16;
              if (v390 < 0)
                operator delete(v389);
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x1A1AD61C4](v391);
            }
            v29 += 2;
          }
          while (v29 != v37);
          v37 = (unint64_t *)v20[4].__shared_owners_;
          v43 = v20[4].__shared_weak_owners_;
        }
        if (v43 - (_QWORD)v37 != 16)
        {
          v46 = 0;
          v47 = 0;
          do
          {
            if (v37[v46] == v37[v46 + 2])
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Leaf Node (TreeID=", 18);
              v48 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)", NodeID=", 9);
              v49 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)") specifies multipule evaluation values applied to dimension ", 61);
              v50 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)".", 1);
              std::stringbuf::str();
              CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v382, (uint64_t)&v366, 0);
              if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v366.__r_.__value_.__l.__data_);
              *(_QWORD *)__p = v363;
              *(_QWORD *)&__p[*(_QWORD *)(v363 - 24)] = v361;
              *(_QWORD *)&__p[8] = MEMORY[0x1E0DE4FB8] + 16;
              if (v390 < 0)
                operator delete(v389);
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x1A1AD61C4](v391);
              v37 = (unint64_t *)v20[4].__shared_owners_;
              v43 = v20[4].__shared_weak_owners_;
            }
            ++v47;
            v46 += 2;
          }
          while (v47 < ((v43 - (uint64_t)v37) >> 4) - 1);
        }
      }
    }
    else
    {
      if (v22 >= 6)
      {
        v349 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v349, "Branch mode hit bad value -- this is confusing; error in validator?");
        __cxa_throw(v349, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      *((_DWORD *)v19 + 7) = v22;
      *((_QWORD *)v19 + 4) = *(_QWORD *)(v9 + 64);
      *((_QWORD *)v19 + 5) = *(_QWORD *)(v9 + 72);
      *(_OWORD *)(v19 + 72) = *(_OWORD *)(v9 + 80);
      v19[88] = *(_BYTE *)(v9 + 60);
    }
    *(_QWORD *)__p = v10;
    *(_QWORD *)&__p[8] = v11;
    *(_QWORD *)&__p[16] = v359;
    *(_QWORD *)&__p[24] = v20;
    do
      v51 = __ldxr(v21);
    while (__stxr(v51 + 1, v21));
    v7 = v360;
    if (&v370 == v13)
      goto LABEL_79;
    v52 = v13[4];
    if (v10 < (unint64_t)v52)
      goto LABEL_79;
    if ((unint64_t)v52 >= v10)
    {
      v72 = v13[5];
      if (v11 < (unint64_t)v72)
      {
LABEL_79:
        v53 = (uint64_t *)*v13;
        v54 = v13;
        if (v369 != (char *)v13)
        {
          v55 = (uint64_t *)*v13;
          v56 = v13;
          if (v53)
          {
            do
            {
              v54 = (char **)v55;
              v55 = (uint64_t *)v55[1];
            }
            while (v55);
          }
          else
          {
            do
            {
              v54 = (char **)v56[2];
              v57 = *v54 == (char *)v56;
              v56 = v54;
            }
            while (v57);
          }
          v58 = v54[4];
          if ((unint64_t)v58 >= v10 && (v10 < (unint64_t)v58 || (unint64_t)v54[5] >= v11))
          {
            v69 = (uint64_t *)v370;
            v59 = &v370;
            v13 = &v370;
            if (v370)
            {
              v59 = &v370;
              do
              {
                while (1)
                {
                  v13 = (char **)v69;
                  v70 = v69[4];
                  if (v10 >= v70)
                    break;
LABEL_114:
                  v69 = (uint64_t *)*v13;
                  v59 = v13;
                  if (!*v13)
                    goto LABEL_91;
                }
                if (v70 >= v10)
                {
                  v71 = v13[5];
                  if (v11 < (unint64_t)v71)
                    goto LABEL_114;
                  if ((unint64_t)v71 >= v11)
                    goto LABEL_90;
                }
                v59 = v13 + 1;
                v69 = (uint64_t *)v13[1];
              }
              while (v69);
            }
LABEL_91:
            v60 = operator new(0x40uLL);
            v61 = *(_OWORD *)&__p[16];
            v60[2] = *(_OWORD *)__p;
            v60[3] = v61;
            *(_QWORD *)&__p[16] = 0;
            *(_QWORD *)&__p[24] = 0;
            *(_QWORD *)v60 = 0;
            *((_QWORD *)v60 + 1) = 0;
            *((_QWORD *)v60 + 2) = v13;
            *v59 = (char *)v60;
            if (*(_QWORD *)v369)
            {
              v369 = *(char **)v369;
              v60 = *v59;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v370, (uint64_t *)v60);
            v371 = (char *)v371 + 1;
            v20 = *(std::__shared_weak_count **)&__p[24];
            if (!*(_QWORD *)&__p[24])
              goto LABEL_98;
            goto LABEL_94;
          }
        }
        if (v53)
          v59 = v54 + 1;
        else
          v59 = v13;
        if (v53)
          v13 = v54;
        goto LABEL_90;
      }
      if ((unint64_t)v72 >= v11)
        goto LABEL_94;
    }
    v59 = v13 + 1;
    v67 = v13[1];
    if (v67)
    {
      do
      {
        v59 = (char **)v67;
        v67 = *(char **)v67;
        v13 = v59;
        v68 = v59;
      }
      while (v67);
    }
    else
    {
      v68 = v13;
      do
      {
        v73 = (char *)v68;
        v68 = (char **)v68[2];
      }
      while (*v68 != v73);
    }
    if (v68 == &v370
      || (v74 = v68[4], v10 < (unint64_t)v74)
      || (unint64_t)v74 >= v10 && v11 < (unint64_t)v68[5])
    {
LABEL_90:
      if (!*v59)
        goto LABEL_91;
LABEL_94:
      v62 = (unint64_t *)&v20->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
LABEL_98:
      v64 = (std::__shared_weak_count *)v378.i64[1];
      if (v378.i64[1])
      {
        v65 = (unint64_t *)(v378.i64[1] + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      goto LABEL_103;
    }
    v75 = (uint64_t *)v370;
    v59 = &v370;
    v13 = &v370;
    if (!v370)
      goto LABEL_91;
    v59 = &v370;
    while (1)
    {
      while (1)
      {
        v13 = (char **)v75;
        v76 = v75[4];
        if (v10 >= v76)
          break;
LABEL_133:
        v75 = (uint64_t *)*v13;
        v59 = v13;
        if (!*v13)
          goto LABEL_91;
      }
      if (v76 >= v10)
      {
        v77 = v13[5];
        if (v11 < (unint64_t)v77)
          goto LABEL_133;
        if ((unint64_t)v77 >= v11)
          goto LABEL_90;
      }
      v59 = v13 + 1;
      v75 = (uint64_t *)v13[1];
      if (!v75)
        goto LABEL_91;
    }
  }
  v378.i64[0] = (uint64_t)&v369;
  v378.i64[1] = (uint64_t)v382;
LABEL_223:
  v136 = v380.i64[0];
  if ((unint64_t)v371 > (v381[0] - v380.i64[0]) >> 4)
  {
    if ((unint64_t)v371 >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v137 = v380.i64[1];
    v388 = (char **)v381;
    v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>((unint64_t)v371);
    v140 = (_QWORD *)v380.i64[1];
    v141 = (_QWORD *)v380.i64[0];
    if (v380.i64[1] == v380.i64[0])
    {
      v144 = vdupq_n_s64(v380.u64[1]);
      v142 = &v138[v137 - v136];
    }
    else
    {
      v142 = &v138[v137 - v136];
      do
      {
        v143 = *((_OWORD *)v140 - 1);
        v140 -= 2;
        *((_OWORD *)v142 - 1) = v143;
        v142 -= 16;
        *v140 = 0;
        v140[1] = 0;
      }
      while (v140 != v141);
      v144 = v380;
    }
    v380.i64[0] = (uint64_t)v142;
    v380.i64[1] = (uint64_t)&v138[v137 - v136];
    *(int64x2_t *)&__p[8] = v144;
    v145 = v381[0];
    v381[0] = &v138[16 * v139];
    *(_QWORD *)&__p[24] = v145;
    *(_QWORD *)__p = v144.i64[0];
    std::__split_buffer<std::shared_ptr<MIL::IRValue const>>::~__split_buffer((uint64_t)__p);
  }
  v146 = v369;
  if (v369 != (char *)&v370)
  {
    v147 = (_QWORD *)v380.i64[1];
    do
    {
      if ((unint64_t)v147 >= v381[0])
      {
        v151 = ((uint64_t)v147 - v380.i64[0]) >> 4;
        if ((unint64_t)(v151 + 1) >> 60)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v152 = (v381[0] - v380.i64[0]) >> 3;
        if (v152 <= v151 + 1)
          v152 = v151 + 1;
        if (v381[0] - v380.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
          v153 = 0xFFFFFFFFFFFFFFFLL;
        else
          v153 = v152;
        v388 = (char **)v381;
        v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v153);
        v156 = &v154[16 * v151];
        v157 = *((_OWORD *)v146 + 3);
        *(_OWORD *)v156 = v157;
        if (*((_QWORD *)&v157 + 1))
        {
          v158 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
          do
            v159 = __ldxr(v158);
          while (__stxr(v159 + 1, v158));
        }
        v160 = (_QWORD *)v380.i64[1];
        v161 = (_QWORD *)v380.i64[0];
        if (v380.i64[1] == v380.i64[0])
        {
          v164 = vdupq_n_s64(v380.u64[1]);
          v162 = &v154[16 * v151];
        }
        else
        {
          v162 = &v154[16 * v151];
          do
          {
            v163 = *((_OWORD *)v160 - 1);
            v160 -= 2;
            *((_OWORD *)v162 - 1) = v163;
            v162 -= 16;
            *v160 = 0;
            v160[1] = 0;
          }
          while (v160 != v161);
          v164 = v380;
        }
        v147 = v156 + 16;
        v380.i64[0] = (uint64_t)v162;
        v380.i64[1] = (uint64_t)(v156 + 16);
        *(int64x2_t *)&__p[8] = v164;
        v165 = v381[0];
        v381[0] = &v154[16 * v155];
        *(_QWORD *)&__p[24] = v165;
        *(_QWORD *)__p = v164.i64[0];
        std::__split_buffer<std::shared_ptr<MIL::IRValue const>>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        *v147 = *((_QWORD *)v146 + 6);
        v148 = *((_QWORD *)v146 + 7);
        v147[1] = v148;
        if (v148)
        {
          v149 = (unint64_t *)(v148 + 8);
          do
            v150 = __ldxr(v149);
          while (__stxr(v150 + 1, v149));
        }
        v147 += 2;
      }
      v380.i64[1] = (uint64_t)v147;
      v166 = (uint64_t *)*((_QWORD *)v146 + 1);
      if (v166)
      {
        do
        {
          v167 = (uint64_t **)v166;
          v166 = (uint64_t *)*v166;
        }
        while (v166);
      }
      else
      {
        do
        {
          v167 = (uint64_t **)*((_QWORD *)v146 + 2);
          v57 = *v167 == (uint64_t *)v146;
          v146 = (char *)v167;
        }
        while (!v57);
      }
      v146 = (char *)v167;
    }
    while (v167 != (uint64_t **)&v370);
  }
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>>>::destroy(v370);
  v378 = 0uLL;
  v379 = 0;
  v169 = (_QWORD *)v380.i64[1];
  v168 = (_QWORD *)v380.i64[0];
  if (v380.i64[0] == v380.i64[1])
  {
    v170 = 0;
    goto LABEL_336;
  }
  v170 = 0;
  v171 = 0;
  v172 = 0;
  do
  {
    v173 = *v168;
    v174 = *(std::__shared_weak_count **)(*v168 + 112);
    if (v174)
    {
      v175 = std::__shared_weak_count::lock(v174);
      if (v175)
      {
        v176 = v175;
        v177 = *(_QWORD *)(v173 + 104);
        v178 = (unint64_t *)&v175->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (v179)
        {
          if (v177)
            goto LABEL_309;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
          std::__shared_weak_count::__release_weak(v176);
          if (v177)
            goto LABEL_309;
        }
      }
    }
    v181 = *(_QWORD *)(*v168 + 32);
    v180 = *(_QWORD *)(*v168 + 40);
    if ((unint64_t)v171 >= v172)
    {
      v182 = ((char *)v171 - (char *)v170) >> 4;
      v183 = v182 + 1;
      if ((unint64_t)(v182 + 1) >> 60)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v172 - (_QWORD)v170) >> 3 > v183)
        v183 = (uint64_t)(v172 - (_QWORD)v170) >> 3;
      if (v172 - (unint64_t)v170 >= 0x7FFFFFFFFFFFFFF0)
        v184 = 0xFFFFFFFFFFFFFFFLL;
      else
        v184 = v183;
      if (v184)
        v184 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v184);
      else
        v185 = 0;
      v186 = (unint64_t *)(v184 + 16 * v182);
      *v186 = v181;
      v186[1] = v180;
      if (v171 == v170)
      {
        v188 = (unint64_t *)(v184 + 16 * v182);
      }
      else
      {
        v187 = v184 + 16 * v182;
        do
        {
          v188 = (unint64_t *)(v187 - 16);
          *(_OWORD *)(v187 - 16) = *((_OWORD *)v171 - 1);
          v171 -= 2;
          v187 -= 16;
        }
        while (v171 != v170);
      }
      v172 = v184 + 16 * v185;
      v171 = v186 + 2;
      if (v170)
        operator delete(v170);
      v170 = v188;
    }
    else
    {
      *v171 = v181;
      v171[1] = v180;
      v171 += 2;
    }
    v189 = v378.i64[1];
    if (v378.i64[1] >= (unint64_t)v379)
    {
      v194 = (v378.i64[1] - v378.i64[0]) >> 4;
      v195 = v194 + 1;
      if ((unint64_t)(v194 + 1) >> 60)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v196 = (uint64_t)&v379[-v378.i64[0]];
      if ((uint64_t)&v379[-v378.i64[0]] >> 3 > v195)
        v195 = v196 >> 3;
      if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFF0)
        v197 = 0xFFFFFFFFFFFFFFFLL;
      else
        v197 = v195;
      v388 = &v379;
      v198 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v197);
      v200 = &v198[16 * v194];
      v201 = *(_OWORD *)v168;
      *(_OWORD *)v200 = *(_OWORD *)v168;
      if (*((_QWORD *)&v201 + 1))
      {
        v202 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
        do
          v203 = __ldxr(v202);
        while (__stxr(v203 + 1, v202));
      }
      v204 = (_QWORD *)v378.i64[1];
      v205 = (_QWORD *)v378.i64[0];
      if (v378.i64[1] == v378.i64[0])
      {
        v208 = vdupq_n_s64(v378.u64[1]);
        v206 = &v198[16 * v194];
      }
      else
      {
        v206 = &v198[16 * v194];
        do
        {
          v207 = *((_OWORD *)v204 - 1);
          v204 -= 2;
          *((_OWORD *)v206 - 1) = v207;
          v206 -= 16;
          *v204 = 0;
          v204[1] = 0;
        }
        while (v204 != v205);
        v208 = v378;
      }
      v193 = v200 + 16;
      v378.i64[0] = (uint64_t)v206;
      v378.i64[1] = (uint64_t)(v200 + 16);
      *(int64x2_t *)&__p[8] = v208;
      v209 = v379;
      v379 = &v198[16 * v199];
      *(_QWORD *)&__p[24] = v209;
      *(_QWORD *)__p = v208.i64[0];
      std::__split_buffer<std::shared_ptr<MIL::IRValue const>>::~__split_buffer((uint64_t)__p);
    }
    else
    {
      *(_QWORD *)v378.i64[1] = *v168;
      v190 = v168[1];
      *(_QWORD *)(v189 + 8) = v190;
      if (v190)
      {
        v191 = (unint64_t *)(v190 + 8);
        do
          v192 = __ldxr(v191);
        while (__stxr(v192 + 1, v191));
      }
      v193 = (_OWORD *)(v189 + 16);
    }
    v378.i64[1] = (uint64_t)v193;
LABEL_309:
    v168 += 2;
  }
  while (v168 != v169);
  j = v365;
  if (v378.i64[1] != v378.i64[0])
  {
    v211 = 126 - 2 * __clz(((char *)v171 - (char *)v170) >> 4);
    v212 = v171 == v170 ? 0 : v211;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *,false>((unint64_t)v170, v171, v212, 1);
    if ((char *)v171 - (char *)v170 != 16)
    {
      v213 = 0;
      v214 = *MEMORY[0x1E0DE4F60];
      v364 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v362 = MEMORY[0x1E0DE4FB8] + 16;
      v215 = ((char *)v171 - (char *)v170) >> 4;
      do
      {
        v216 = v170[2 * v213];
        v217 = v213 + 1;
        if (v170[2 * v213 + 2] == v216)
        {
          if (v217 < v215)
          {
            v218 = &v170[2 * v213 + 2];
            while (1)
            {
              v219 = *v218;
              v218 += 2;
              if (v219 != v216)
                break;
              if (v215 == ++v217)
              {
                v217 = v215;
                break;
              }
            }
          }
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Tree TreeID=", 12);
          v220 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v220, (uint64_t)" has multiple root nodes: ", 26);
          v221 = v217 - v213;
          if (v217 > v213)
          {
            v222 = (uint64_t)&v170[2 * v213 + 1];
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"NodeID=", 7);
              std::ostream::operator<<();
              if (v221 != 1)
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)", ", 2);
              v222 += 16;
              --v221;
            }
            while (v221);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)".", 1);
          std::stringbuf::str();
          CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v382, (uint64_t)&v366, 0);
          if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v366.__r_.__value_.__l.__data_);
          *(_QWORD *)__p = v214;
          *(_QWORD *)&__p[*(_QWORD *)(v214 - 24)] = v364;
          *(_QWORD *)&__p[8] = v362;
          if (v390 < 0)
            operator delete(v389);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1A1AD61C4](v391);
          v215 = ((char *)v171 - (char *)v170) >> 4;
        }
        else
        {
          v215 = ((char *)v171 - (char *)v170) >> 4;
        }
        v213 = v217;
      }
      while (v217 < v215 - 1);
LABEL_336:
      j = v365;
    }
  }
  *(_OWORD *)&v366.__r_.__value_.__r.__words[1] = 0uLL;
  v366.__r_.__value_.__r.__words[0] = (std::string::size_type)&v366.__r_.__value_.__l.__size_;
  v369 = 0;
  v370 = 0;
  v371 = 0;
  v224 = v378.i64[1];
  v223 = v378.i64[0];
  if (v378.i64[0] != v378.i64[1])
  {
    while (2)
    {
      v225 = *(void **)v223;
      v226 = *(std::__shared_weak_count **)(v223 + 8);
      v373 = *(void **)v223;
      v374 = v226;
      if (v226)
      {
        v227 = (unint64_t *)&v226->__shared_owners_;
        do
          v228 = __ldxr(v227);
        while (__stxr(v228 + 1, v227));
        *(_QWORD *)&__p[8] = v226;
        do
          v229 = __ldxr(v227);
        while (__stxr(v229 + 1, v227));
      }
      else
      {
        *(_QWORD *)&__p[8] = 0;
      }
      *(_QWORD *)__p = v225;
      *(_QWORD *)&__p[16] = 0;
      v230 = (uint64_t *)v371;
      v231 = v369;
      if (v371 == v369)
      {
        if (v371)
        {
          v235 = v370;
          v236 = (char *)v371;
          if (v370 != v371)
          {
            do
              v235 = (char *)std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(v235 - 24));
            while (v235 != (char *)v230);
            v236 = v369;
          }
          v370 = (char *)v230;
          operator delete(v236);
          v369 = 0;
          v370 = 0;
          v371 = 0;
        }
        v237 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<long long>>>(1uLL);
        v369 = v237;
        v370 = v237;
        v371 = &v237[24 * v238];
        *(_QWORD *)v237 = *(_QWORD *)__p;
        v239 = *(_QWORD *)&__p[8];
        *((_QWORD *)v237 + 1) = *(_QWORD *)&__p[8];
        if (v239)
        {
          v240 = (unint64_t *)(v239 + 8);
          do
            v241 = __ldxr(v240);
          while (__stxr(v241 + 1, v240));
        }
        v233 = (uint64_t *)(v237 + 24);
        *((_QWORD *)v237 + 2) = *(_QWORD *)&__p[16];
      }
      else if (v370 == v369)
      {
        *(_QWORD *)v369 = *(_QWORD *)__p;
        v242 = *(_QWORD *)&__p[8];
        *((_QWORD *)v231 + 1) = *(_QWORD *)&__p[8];
        if (v242)
        {
          v243 = (unint64_t *)(v242 + 8);
          do
            v244 = __ldxr(v243);
          while (__stxr(v244 + 1, v243));
        }
        *((_QWORD *)v231 + 2) = *(_QWORD *)&__p[16];
        v233 = (uint64_t *)(v231 + 24);
      }
      else
      {
        v232 = std::shared_ptr<unsigned char>::operator=[abi:ne180100](v369, *(uint64_t *)__p, *(uint64_t *)&__p[8]);
        v232[2] = *(_QWORD *)&__p[16];
        v233 = v232 + 3;
        for (i = v370;
              i != (char *)v233;
      }
      v370 = (char *)v233;
      v245 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v246 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v247 = __ldaxr(v246);
        while (__stlxr(v247 - 1, v246));
        if (!v247)
        {
          ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
          std::__shared_weak_count::__release_weak(v245);
        }
      }
      v248 = v370;
      if (v369 != v370)
      {
        while (1)
        {
          v249 = *((_QWORD *)v248 - 3);
          v376 = v249;
          v250 = (std::__shared_weak_count *)*((_QWORD *)v248 - 2);
          v377 = v250;
          if (v250)
          {
            v251 = (unint64_t *)&v250->__shared_owners_;
            do
              v252 = __ldxr(v251);
            while (__stxr(v252 + 1, v251));
          }
          if (!v249)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "Internal error: null child node; likely specification error.");
            CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v382, (uint64_t)__p, 1);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
          if (!*(_BYTE *)v249)
          {
            v256 = *((_QWORD *)v248 - 1);
            if (v256 == 1)
            {
              *((_QWORD *)v248 - 1) = 2;
              std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t *)&v366, *(_QWORD *)(v249 + 120), *(_QWORD *)(v249 + 120));
              v263 = *(_QWORD *)(v249 + 128);
              *(_QWORD *)__p = *(_QWORD *)(v249 + 120);
              *(_QWORD *)&__p[8] = v263;
              if (v263)
              {
                v264 = (unint64_t *)(v263 + 8);
                do
                  v265 = __ldxr(v264);
                while (__stxr(v265 + 1, v264));
              }
              *(_QWORD *)&__p[16] = 0;
              std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::push_back[abi:ne180100](&v369, (uint64_t)__p);
              v260 = *(std::__shared_weak_count **)&__p[8];
              if (!*(_QWORD *)&__p[8])
                goto LABEL_377;
              v266 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
              do
                v262 = __ldaxr(v266);
              while (__stlxr(v262 - 1, v266));
LABEL_399:
              if (!v262)
              {
                ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                std::__shared_weak_count::__release_weak(v260);
              }
              goto LABEL_377;
            }
            if (!v256)
            {
              *((_QWORD *)v248 - 1) = 1;
              std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t *)&v366, *(_QWORD *)(v249 + 136), *(_QWORD *)(v249 + 136));
              v257 = *(_QWORD *)(v249 + 144);
              *(_QWORD *)__p = *(_QWORD *)(v249 + 136);
              *(_QWORD *)&__p[8] = v257;
              if (v257)
              {
                v258 = (unint64_t *)(v257 + 8);
                do
                  v259 = __ldxr(v258);
                while (__stxr(v259 + 1, v258));
              }
              *(_QWORD *)&__p[16] = 0;
              std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::push_back[abi:ne180100](&v369, (uint64_t)__p);
              v260 = *(std::__shared_weak_count **)&__p[8];
              if (!*(_QWORD *)&__p[8])
                goto LABEL_377;
              v261 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
              do
                v262 = __ldaxr(v261);
              while (__stlxr(v262 - 1, v261));
              goto LABEL_399;
            }
          }
          v370 = (char *)std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(v370 - 24));
LABEL_377:
          v253 = v377;
          if (v377)
          {
            v254 = (unint64_t *)&v377->__shared_owners_;
            do
              v255 = __ldaxr(v254);
            while (__stlxr(v255 - 1, v254));
            if (!v255)
            {
              ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
              std::__shared_weak_count::__release_weak(v253);
            }
          }
          v248 = v370;
          if (v369 == v370)
          {
            v226 = v374;
            break;
          }
        }
      }
      if (v226)
      {
        v267 = (unint64_t *)&v226->__shared_owners_;
        do
          v268 = __ldaxr(v267);
        while (__stlxr(v268 - 1, v267));
        if (!v268)
        {
          ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
          std::__shared_weak_count::__release_weak(v226);
        }
      }
      v223 += 16;
      if (v223 != v224)
        continue;
      break;
    }
    v270 = (unint64_t *)v378.i64[1];
    v269 = (unint64_t *)v378.i64[0];
    for (j = v365; v269 != v270; v269 += 2)
      std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t *)&v366, *v269, *v269);
  }
  v271 = (_QWORD *)MEMORY[0x1E0DE4F60];
  if (v366.__r_.__value_.__r.__words[2] != (v380.i64[1] - v380.i64[0]) >> 4)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Node detected that are not connected to any single root node. Note: ", 68);
    v273 = (std::string::size_type *)v380.i64[1];
    for (k = (std::string::size_type *)v380.i64[0]; k != v273; k += 2)
    {
      size = v366.__r_.__value_.__l.__size_;
      if (v366.__r_.__value_.__l.__size_)
      {
        v275 = *k;
        v276 = (std::string *)&v366.__r_.__value_.__r.__words[1];
        do
        {
          v277 = (std::string *)size;
          v278 = v276;
          v279 = *(_QWORD *)(size + 32);
          v280 = (std::string::size_type *)(size + 8);
          if (v279 >= v275)
          {
            v280 = (std::string::size_type *)v277;
            v276 = v277;
          }
          size = *v280;
        }
        while (size);
        if (v276 != (std::string *)&v366.__r_.__value_.__r.__words[1])
        {
          if (v279 < v275)
            v277 = v278;
          if (v275 >= v277[1].__r_.__value_.__l.__size_)
            continue;
        }
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"(TreeID=", 8);
      v281 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v281, (uint64_t)", NodeID=", 9);
      v282 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v282, (uint64_t)") ", 2);
    }
    std::stringbuf::str();
    CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v382, (uint64_t)&v373, 0);
    v271 = (_QWORD *)MEMORY[0x1E0DE4F60];
    if (v375 < 0)
      operator delete(v373);
    *(_QWORD *)__p = *v271;
    *(_QWORD *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24)] = v271[3];
    *(_QWORD *)&__p[8] = MEMORY[0x1E0DE4FB8] + 16;
    if (v390 < 0)
      operator delete(v389);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AD61C4](v391);
  }
  *(_QWORD *)__p = &v369;
  std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v366.__r_.__value_.__l.__size_);
  if (v170)
    operator delete(v170);
  v283 = (char *)operator new(0xA0uLL);
  v284 = v283;
  *((_QWORD *)v283 + 1) = 0;
  *((_QWORD *)v283 + 2) = 0;
  *(_QWORD *)v283 = &off_1E3D5BCD8;
  *(_OWORD *)(v283 + 40) = 0u;
  *(_OWORD *)(v283 + 56) = 0u;
  *(_OWORD *)(v283 + 72) = 0u;
  *(_OWORD *)(v283 + 88) = 0u;
  *(_OWORD *)(v283 + 104) = 0u;
  *(_OWORD *)(v283 + 120) = 0u;
  *(_OWORD *)(v283 + 136) = 0u;
  *(_OWORD *)(v283 + 24) = 0u;
  *((_QWORD *)v283 + 19) = 0;
  *(_QWORD *)this = v283 + 24;
  *((_QWORD *)this + 1) = v283;
  v286 = (_QWORD *)v378.i64[1];
  v285 = (_QWORD *)v378.i64[0];
  v287 = v378.i64[1] - v378.i64[0];
  if (v378.i64[1] == v378.i64[0])
  {
    *((_QWORD *)v283 + 10) = 0;
  }
  else
  {
    if (v287 < 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v288 = std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v287 >> 4);
    *((_QWORD *)v284 + 9) = v288;
    *((_QWORD *)v284 + 10) = v288;
    *((_QWORD *)v284 + 11) = &v288[2 * v289];
    do
    {
      *v288 = *v285;
      v290 = v285[1];
      v288[1] = v290;
      if (v290)
      {
        v291 = (unint64_t *)(v290 + 8);
        do
          v292 = __ldxr(v291);
        while (__stxr(v292 + 1, v291));
      }
      v285 += 2;
      v288 += 2;
    }
    while (v285 != v286);
    *((_QWORD *)v284 + 10) = v288;
  }
  v293 = (v378.i64[1] - v378.i64[0]) >> 4;
  *((_QWORD *)v284 + 3) = (v380.i64[1] - v380.i64[0]) >> 4;
  *((_QWORD *)v284 + 4) = v293;
  *((_QWORD *)v284 + 5) = j;
  v294 = (_QWORD **)(v284 + 48);
  std::vector<double>::resize((char **)v284 + 6, j);
  v295 = *((int *)v356 + 10);
  if ((_DWORD)v295)
  {
    if (j == v295)
    {
      if ((int)v295 >= 1)
      {
        v296 = *v294;
        v297 = *((unsigned int *)v356 + 10);
        v298 = (uint64_t *)(v356[6] + 8);
        do
        {
          v299 = *v298++;
          *v296++ = v299;
          --v297;
        }
        while (v297);
      }
    }
    else
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Dimension of default value array (", 34);
      v307 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v307, (uint64_t)") does not match specified output dimension (", 45);
      v308 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v308, (uint64_t)").", 2);
      std::stringbuf::str();
      CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v382, (uint64_t)&v366, 0);
      if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v366.__r_.__value_.__l.__data_);
      *(_QWORD *)__p = *v271;
      *(_QWORD *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24)] = v271[3];
      *(_QWORD *)&__p[8] = MEMORY[0x1E0DE4FB8] + 16;
      if (v390 < 0)
        operator delete(v389);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1A1AD61C4](v391);
    }
  }
  else
  {
    v300 = *((_QWORD *)v284 + 8);
    v301 = (_BYTE *)*((_QWORD *)v284 + 6);
    if (j <= (v300 - (uint64_t)v301) >> 3)
    {
      v309 = (char *)*((_QWORD *)v284 + 7);
      v310 = (v309 - v301) >> 3;
      if (v310 >= j)
        v311 = j;
      else
        v311 = (v309 - v301) >> 3;
      if (v311)
      {
        v312 = (_QWORD *)*((_QWORD *)v284 + 6);
        do
        {
          *v312++ = 0;
          --v311;
        }
        while (v311);
      }
      if (j <= v310)
      {
        *((_QWORD *)v284 + 7) = &v301[8 * j];
      }
      else
      {
        v313 = &v309[8 * (j - v310)];
        v314 = 8 * j - 8 * v310;
        do
        {
          *(_QWORD *)v309 = 0;
          v309 += 8;
          v314 -= 8;
        }
        while (v314);
        *((_QWORD *)v284 + 7) = v313;
      }
    }
    else
    {
      if (v301)
      {
        *((_QWORD *)v284 + 7) = v301;
        operator delete(v301);
        v300 = 0;
        *v294 = 0;
        *((_QWORD *)v284 + 7) = 0;
        *((_QWORD *)v284 + 8) = 0;
      }
      if (j >> 61)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v302 = v300 >> 2;
      if (v300 >> 2 <= j)
        v302 = j;
      if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFF8)
        v303 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v303 = v302;
      std::vector<_KDInterval>::__vallocate[abi:ne180100]((_QWORD *)v284 + 6, v303);
      v304 = (_QWORD *)*((_QWORD *)v284 + 7);
      v305 = &v304[j];
      v306 = 8 * j;
      do
      {
        *v304++ = 0;
        v306 -= 8;
      }
      while (v306);
      *((_QWORD *)v284 + 7) = v305;
    }
  }
  v315 = *((_DWORD *)v354 + 11);
  if (v315 == 402)
  {
    v316 = *((_QWORD *)v354 + 4);
    CoreML::Specification::Int64Vector::Int64Vector((CoreML::Specification::Int64Vector *)&v369);
    v317 = CoreML::Specification::StringVector::StringVector((CoreML::Specification::StringVector *)&v366);
    v318 = *(_DWORD *)(v316 + 44);
    if (v318 == 100)
    {
      v320 = *(const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings **)(v316 + 32);
      if (v320 != (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)&v366)
      {
        v321 = v367;
        if (v367 >= 1)
        {
          v322 = (uint64_t *)(v368 + 8);
          do
          {
            v323 = *v322;
            if (*(char *)(*v322 + 23) < 0)
            {
              **(_BYTE **)v323 = 0;
              *(_QWORD *)(v323 + 8) = 0;
            }
            else
            {
              *(_BYTE *)v323 = 0;
              *(_BYTE *)(v323 + 23) = 0;
            }
            ++v322;
            --v321;
          }
          while (v321);
          v367 = 0;
        }
        v317 = (CoreML::Specification::protobuf_TreeEnsemble_2eproto *)CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom(&v366, v320);
      }
    }
    else if (v318 == 101)
    {
      v319 = *(const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)(v316 + 32);
      if (v319 != (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&v369)
      {
        LODWORD(v371) = 0;
        v317 = (CoreML::Specification::protobuf_TreeEnsemble_2eproto *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)&v369, v319);
      }
    }
    if (*((_DWORD *)v354 + 11) == 402)
    {
      v324 = (uint64_t *)*((_QWORD *)v354 + 4);
    }
    else
    {
      CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(v317);
      v324 = &CoreML::Specification::_TreeEnsembleClassifier_default_instance_;
    }
    *((_DWORD *)v284 + 38) = *((_DWORD *)v324 + 6);
    v325 = (int)v371;
    v326 = v367;
    if ((int)v371 <= v367)
      v327 = v367;
    else
      v327 = (int)v371;
    if (v327)
    {
      v328 = v327;
      if (j == 1 && v327 == 2)
      {
        v329 = 1;
      }
      else
      {
        if (j < 2 || j != v327)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Specified output dimension (", 28);
          v341 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v341, (uint64_t)") does not match the given number of classes (", 46);
          v342 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v342, (uint64_t)").", 2);
          std::stringbuf::str();
          CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v382, (uint64_t)&v373, 0);
          if (v375 < 0)
            operator delete(v373);
          *(_QWORD *)__p = *v271;
          *(_QWORD *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24)] = v271[3];
          *(_QWORD *)&__p[8] = MEMORY[0x1E0DE4FB8] + 16;
          if (v390 < 0)
            operator delete(v389);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1A1AD61C4](v391);
          goto LABEL_537;
        }
        v329 = 2;
      }
      *((_DWORD *)v284 + 24) = v329;
      if (v325 <= v326)
        std::vector<std::string>::resize((std::vector<std::string> *)(v284 + 104), v328);
      else
        std::vector<long long>::resize((char **)v284 + 16, v328);
      v334 = 0;
      v335 = 0;
      v336 = 0;
      if (v328 <= 1)
        v328 = 1;
      do
      {
        v337 = v334 >> 32;
        if (v325 <= v326)
          std::string::operator=((std::string *)(*((_QWORD *)v284 + 13) + v335), *(const std::string **)(v368 + 8 * v337 + 8));
        else
          *(_QWORD *)(*((_QWORD *)v284 + 16) + 8 * v336) = *(_QWORD *)(v372 + 8 * v337 + 8);
        ++v336;
        v335 += 24;
        v334 += 0x100000000;
      }
      while (v328 != v336);
LABEL_537:
      v366.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E3D4DEA8;
      google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(&v366.__r_.__value_.__r.__words[2]);
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)&v366.__r_.__value_.__l.__size_);
      CoreML::Specification::Int64Vector::~Int64Vector((CoreML::Specification::Int64Vector *)&v369);
      v271 = (_QWORD *)MEMORY[0x1E0DE4F60];
      goto LABEL_538;
    }
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v284 + 13);
    if (j != 1)
    {
      std::vector<long long>::resize((char **)v284 + 16, j);
      if (j)
      {
        v338 = 0;
        v339 = *((_QWORD *)v284 + 16);
        do
        {
          *(_QWORD *)(v339 + 8 * v338) = v338;
          ++v338;
        }
        while (j != v338);
      }
      v340 = 2;
      goto LABEL_536;
    }
    *(_OWORD *)__p = xmmword_19CAE7980;
    v330 = (char *)*((_QWORD *)v284 + 16);
    v331 = *((_QWORD *)v284 + 18);
    if ((unint64_t)(v331 - (_QWORD)v330) >= 0x10)
    {
      v343 = (char *)*((_QWORD *)v284 + 17);
      v344 = v343 - v330;
      if ((unint64_t)(v343 - v330) <= 0xF)
      {
        v345 = &__p[v344];
        if (v343 != v330)
        {
          memcpy(*((void **)v284 + 16), __p, v343 - v330);
          v330 = (char *)*((_QWORD *)v284 + 17);
        }
        v346 = 16 - v344;
        memcpy(v330, v345, v346);
        v347 = v346 >> 3;
        goto LABEL_535;
      }
    }
    else
    {
      if (v330)
      {
        *((_QWORD *)v284 + 17) = v330;
        operator delete(v330);
        v331 = 0;
        *((_QWORD *)v284 + 16) = 0;
        *((_QWORD *)v284 + 17) = 0;
        *((_QWORD *)v284 + 18) = 0;
      }
      v332 = v331 >> 2;
      if ((unint64_t)(v331 >> 2) <= 2)
        v332 = 2;
      if ((unint64_t)v331 >= 0x7FFFFFFFFFFFFFF8)
        v333 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v333 = v332;
      std::vector<_KDInterval>::__vallocate[abi:ne180100]((_QWORD *)v284 + 16, v333);
      v330 = (char *)*((_QWORD *)v284 + 17);
    }
    *(_OWORD *)v330 = *(_OWORD *)__p;
    v347 = 2;
LABEL_535:
    *((_QWORD *)v284 + 17) = &v330[8 * v347];
    v340 = 1;
LABEL_536:
    *((_DWORD *)v284 + 24) = v340;
    goto LABEL_537;
  }
  if (v315 == 302)
  {
    *((_DWORD *)v284 + 24) = 0;
    *((_DWORD *)v284 + 38) = *(_DWORD *)(*((_QWORD *)v354 + 4) + 24);
  }
LABEL_538:
  if (v386)
  {
    v350 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    v351 = std::string::insert(&v366, 0, "Error(s) in tree structure: \n");
    v352 = *(_OWORD *)&v351->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v351->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v352;
    v351->__r_.__value_.__l.__size_ = 0;
    v351->__r_.__value_.__r.__words[2] = 0;
    v351->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v350, (const std::string *)__p);
    __cxa_throw(v350, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  *(_QWORD *)__p = &v378;
  std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(_QWORD *)__p = &v380;
  std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v383[0] = *v271;
  *(_QWORD *)((char *)v383 + *(_QWORD *)(v383[0] - 24)) = v271[3];
  v383[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v384 < 0)
    operator delete((void *)v383[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AD61C4](&v385);
}

void sub_19CA21BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  a23 = &off_1E3D4DEA8;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(&a25);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a24);
  CoreML::Specification::Int64Vector::~Int64Vector((CoreML::Specification::Int64Vector *)&a29);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a10);
  a23 = &a39;
  std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = &a43;
  std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::ostringstream::~ostringstream((uint64_t)&a49);
  _Unwind_Resume(a1);
}

_QWORD *CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(_QWORD **a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;
  std::logic_error *exception;
  std::string *v16;
  __int128 v17;
  std::string v18;
  std::string v19;

  ++**a1;
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1[1], (uint64_t)"\n  ", 3);
  if (a3)
    v7 = "FATAL: ";
  else
    v7 = (const char *)&unk_19CB39696;
  if (a3)
    v8 = 7;
  else
    v8 = 0;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = a2;
  else
    v11 = *(_QWORD *)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)";", 1);
  if (**a1 >= 0x32uLL)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1[1], (uint64_t)"\n  FATAL: maximum number of errors reached; aborting processing.",
      64);
LABEL_17:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    v16 = std::string::insert(&v18, 0, "Errors encountered during processing tree model:\n");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v19);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (a3)
    goto LABEL_17;
  return result;
}

void sub_19CA220E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *,false>(unint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  unint64_t *k;
  unint64_t v21;
  unint64_t v22;
  unint64_t m;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v28;
  double *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t j;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  double v47;
  double v48;
  unint64_t *v49;
  BOOL v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  double v57;
  double v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  double v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  double v73;
  double v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  double v80;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  double v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  double v106;
  unint64_t v107;
  unint64_t v108;
  double v109;

_QWORD *CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_2::operator()(_QWORD *result, _QWORD *a2, unint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD **v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p;
  char v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  v5 = result;
  v6 = *(_QWORD **)(*a2 + 8);
  if (!v6)
    goto LABEL_13;
  v7 = (_QWORD *)(*a2 + 8);
  do
  {
    v8 = v6[4];
    if (v8 >= a3)
    {
      if (a3 >= v8)
      {
        if (v6[5] < a4)
          ++v6;
        else
          v7 = v6;
      }
      else
      {
        v7 = v6;
      }
    }
    else
    {
      ++v6;
    }
    v6 = (_QWORD *)*v6;
  }
  while (v6);
  if (v7 == (_QWORD *)(*a2 + 8) || (v9 = v7[4], a3 < v9) || v9 >= a3 && a4 < v7[5])
  {
LABEL_13:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Tree Node with TreeID=", 22);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" and NodeID=", 12);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" referenced but not declared in specification.", 46);
    v12 = (_QWORD **)a2[1];
    std::stringbuf::str();
    CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v12, (uint64_t)&__p, 0);
    if (v17 < 0)
      operator delete(__p);
    v18[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    *v5 = 0;
    v5[1] = 0;
    v18[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v19 < 0)
      operator delete((void *)v18[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x1A1AD61C4](&v20);
  }
  else
  {
    *result = v7[6];
    v13 = v7[7];
    result[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  return result;
}

void sub_19CA22CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>>>::destroy(a1[1]);
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 6));
    operator delete(a1);
  }
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *,false>(unint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *k;
  unint64_t v20;
  unint64_t v21;
  unint64_t *m;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *j;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  BOOL v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t *v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = a2 - 2;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = ((char *)a2 - (char *)i) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v43 = *v8;
        v44 = *i;
        if (*v8 < *i || v44 >= v43 && *(a2 - 1) < i[1])
        {
          *i = v43;
          *(a2 - 2) = v44;
          v45 = i[1];
          i[1] = *(a2 - 1);
          *(a2 - 1) = v45;
        }
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(i, i + 2, a2 - 2);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(i, i + 2, i + 4, a2 - 2);
      case 5uLL:
        return (unint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(i, i + 2, i + 4, i + 6, a2 - 2);
      default:
        if (v10 > 383)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v60 = (v11 - 2) >> 1;
            v61 = v60;
            while (1)
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &i[2 * v63];
                if (2 * v62 + 2 < (uint64_t)v11)
                {
                  v65 = v64[2];
                  if (*v64 < v65 || v65 >= *v64 && i[2 * v63 + 1] < v64[3])
                  {
                    v64 += 2;
                    v63 = 2 * v62 + 2;
                  }
                }
                v66 = &i[2 * v62];
                v67 = *v64;
                v68 = *v66;
                if (*v64 >= *v66)
                {
                  if (v68 < v67)
                  {
                    v69 = v66[1];
LABEL_129:
                    *v66 = v67;
                    v66[1] = v64[1];
                    if (v60 >= v63)
                    {
                      while (1)
                      {
                        v71 = 2 * v63;
                        v63 = (2 * v63) | 1;
                        v70 = &i[2 * v63];
                        v72 = v71 + 2;
                        if (v72 < (uint64_t)v11)
                        {
                          v73 = v70[2];
                          if (*v70 < v73 || v73 >= *v70 && i[2 * v63 + 1] < v70[3])
                          {
                            v70 += 2;
                            v63 = v72;
                          }
                        }
                        v74 = *v70;
                        if (*v70 < v68 || v68 >= v74 && v70[1] < v69)
                          break;
                        *v64 = v74;
                        v64[1] = v70[1];
                        v64 = v70;
                        if (v60 < v63)
                          goto LABEL_131;
                      }
                    }
                    v70 = v64;
LABEL_131:
                    *v70 = v68;
                    v70[1] = v69;
                    goto LABEL_132;
                  }
                  v69 = i[2 * v62 + 1];
                  if (v64[1] >= v69)
                    goto LABEL_129;
                }
              }
LABEL_132:
              v61 = v62 - 1;
              if (!v62)
              {
                v83 = (unint64_t)v10 >> 4;
                while (1)
                {
                  v84 = 0;
                  v85 = *i;
                  v86 = i[1];
                  v87 = v83 - 2;
                  if (v83 < 2)
                    v87 = v83 - 1;
                  v88 = v87 >> 1;
                  v89 = i;
                  do
                  {
                    v90 = v89;
                    v91 = v84 + 1;
                    v89 += 2 * v84 + 2;
                    v92 = 2 * v84;
                    result = (2 * v84) | 1;
                    v84 = result;
                    v93 = v92 + 2;
                    if (v93 < v83)
                    {
                      result = (unint64_t)(v89 + 2);
                      v94 = v89[2];
                      if (*v89 < v94 || v94 >= *v89 && v90[2 * v91 + 1] < v89[3])
                      {
                        v89 += 2;
                        v84 = v93;
                      }
                    }
                    *v90 = *v89;
                    v90[1] = v89[1];
                  }
                  while (v84 <= v88);
                  if (v89 == a2 - 2)
                  {
                    *v89 = v85;
                    v89[1] = v86;
                  }
                  else
                  {
                    *v89 = *(a2 - 2);
                    v89[1] = *(a2 - 1);
                    *(a2 - 2) = v85;
                    *(a2 - 1) = v86;
                    v95 = (char *)v89 - (char *)i + 16;
                    if (v95 >= 17)
                    {
                      v96 = (v95 >> 4) - 2;
                      v97 = v96 >> 1;
                      v98 = &i[2 * (v96 >> 1)];
                      v99 = *v98;
                      v100 = *v89;
                      if (*v98 < *v89)
                      {
                        v101 = v89[1];
LABEL_171:
                        *v89 = v99;
                        v89[1] = i[2 * v97 + 1];
                        if (v96 >= 2)
                        {
                          while (1)
                          {
                            v103 = v97 - 1;
                            v97 = (v97 - 1) >> 1;
                            v102 = &i[2 * v97];
                            v104 = *v102;
                            if (*v102 >= v100)
                            {
                              if (v100 < v104)
                                break;
                              result = i[2 * v97 + 1];
                              if (result >= v101)
                                break;
                            }
                            else
                            {
                              result = v102[1];
                            }
                            *v98 = v104;
                            v98[1] = result;
                            v98 = &i[2 * v97];
                            if (v103 <= 1)
                              goto LABEL_178;
                          }
                        }
                        v102 = v98;
LABEL_178:
                        *v102 = v100;
                        v102[1] = v101;
                        goto LABEL_180;
                      }
                      if (v100 >= v99)
                      {
                        result = i[2 * v97 + 1];
                        v101 = v89[1];
                        if (result < v101)
                          goto LABEL_171;
                      }
                    }
                  }
LABEL_180:
                  a2 -= 2;
                  if (v83-- <= 2)
                    return result;
                }
              }
            }
          }
          v12 = v11 >> 1;
          v13 = &i[2 * (v11 >> 1)];
          if ((unint64_t)v10 < 0x801)
          {
            result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(&v7[2 * (v11 >> 1)], v7, a2 - 2);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v7, &v7[2 * (v11 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v7 + 2, v13 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v7 + 4, &v7[2 * v12 + 2], a2 - 6);
            result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v13 - 2, v13, &v7[2 * v12 + 2]);
            v14 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v13;
            *(_OWORD *)v13 = v14;
          }
          --a3;
          v15 = *v7;
          if ((a4 & 1) == 0)
          {
            v16 = *(v7 - 2);
            if (v16 >= v15)
            {
              if (v15 < v16)
              {
                v17 = v7[1];
              }
              else
              {
                v17 = v7[1];
                if (*(v7 - 1) < v17)
                  goto LABEL_13;
              }
              v33 = *v8;
              if (v15 >= *v8 && (v33 < v15 || v17 >= *(a2 - 1)))
              {
                for (i = v7 + 2; i < a2 && v15 >= *i && (*i < v15 || v17 >= i[1]); i += 2)
                  ;
              }
              else
              {
                i = v7;
                do
                {
                  v35 = i[2];
                  i += 2;
                  v34 = v35;
                }
                while (v15 >= v35 && (v34 < v15 || v17 >= i[1]));
              }
              j = a2;
              if (i < a2)
              {
                for (j = a2 - 2; v15 < v33 || v33 >= v15 && v17 < j[1]; j -= 2)
                {
                  v37 = *(j - 2);
                  v33 = v37;
                }
              }
              if (i < j)
              {
                v38 = *i;
                v39 = *j;
                do
                {
                  *i = v39;
                  *j = v38;
                  v40 = i[1];
                  i[1] = j[1];
                  j[1] = v40;
                  do
                  {
                    v41 = i[2];
                    i += 2;
                    v38 = v41;
                  }
                  while (v15 >= v41 && (v38 < v15 || v17 >= i[1]));
                  do
                  {
                    do
                    {
                      v42 = *(j - 2);
                      j -= 2;
                      v39 = v42;
                    }
                    while (v15 < v42);
                  }
                  while (v39 >= v15 && v17 < j[1]);
                }
                while (i < j);
              }
              if (i - 2 != v7)
              {
                *v7 = *(i - 2);
                v7[1] = *(i - 1);
              }
              a4 = 0;
              *(i - 2) = v15;
              *(i - 1) = v17;
              continue;
            }
          }
LABEL_13:
          v18 = v7[1];
          for (k = v7 + 2; ; k += 2)
          {
            v20 = *k;
            if (*k >= v15 && (v15 < v20 || k[1] >= v18))
              break;
          }
          if (k - 2 == v7)
          {
            m = a2;
            if (k < a2)
            {
              v24 = *v8;
              m = a2 - 2;
              if (*v8 >= v15)
              {
                m = a2 - 2;
                do
                {
                  if (v15 >= v24)
                  {
                    if (m[1] < v18 || k >= m)
                      break;
                  }
                  else if (k >= m)
                  {
                    break;
                  }
                  v26 = *(m - 2);
                  m -= 2;
                  v24 = v26;
                }
                while (v26 >= v15);
              }
            }
          }
          else
          {
            v21 = *v8;
            for (m = a2 - 2; v21 >= v15 && (v15 < v21 || m[1] >= v18); m -= 2)
            {
              v23 = *(m - 2);
              v21 = v23;
            }
          }
          i = k;
          if (k < m)
          {
            v27 = *m;
            i = k;
            v28 = m;
            do
            {
              *i = v27;
              *v28 = v20;
              v29 = i[1];
              i[1] = v28[1];
              v28[1] = v29;
              do
              {
                do
                {
                  v30 = i[2];
                  i += 2;
                  v20 = v30;
                }
                while (v30 < v15);
              }
              while (v15 >= v20 && i[1] < v18);
              do
              {
                v31 = *(v28 - 2);
                v28 -= 2;
                v27 = v31;
              }
              while (v31 >= v15 && (v15 < v27 || v28[1] >= v18));
            }
            while (i < v28);
          }
          if (i - 2 != v7)
          {
            *v7 = *(i - 2);
            v7[1] = *(i - 1);
          }
          *(i - 2) = v15;
          *(i - 1) = v18;
          if (k < m)
          {
LABEL_50:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *,false>(v7, i - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v7, i - 2);
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(i, a2);
          if (!(_DWORD)result)
          {
            if (v32)
              continue;
            goto LABEL_50;
          }
          a2 = i - 2;
          if (v32)
            return result;
          goto LABEL_2;
        }
        v46 = i + 2;
        v48 = i == a2 || v46 == a2;
        if ((a4 & 1) == 0)
        {
          if (v48)
            return result;
          while (1)
          {
            v75 = v7;
            v7 = v46;
            v76 = v75[2];
            v77 = *v75;
            if (v76 < *v75)
              break;
            if (v77 >= v76)
            {
              v78 = v75[3];
              if (v78 < v75[1])
                goto LABEL_152;
            }
LABEL_156:
            v46 = v7 + 2;
            if (v7 + 2 == a2)
              return result;
          }
          v78 = v75[3];
          do
          {
            do
            {
LABEL_152:
              v79 = v75;
              v80 = v77;
              v81 = *(v75 - 2);
              v75 -= 2;
              v77 = v81;
              v82 = v75[3];
              v75[4] = v80;
              v75[5] = v82;
            }
            while (v76 < v81);
          }
          while (v77 >= v76 && v78 < *(v79 - 1));
          *v79 = v76;
          v79[1] = v78;
          goto LABEL_156;
        }
        if (v48)
          return result;
        v49 = 0;
        v50 = i;
        do
        {
          v51 = v50;
          v50 = v46;
          v52 = v51[2];
          v53 = *v51;
          if (v52 >= *v51)
          {
            if (v53 < v52)
              goto LABEL_115;
            v54 = v51[3];
            if (v54 >= v51[1])
              goto LABEL_115;
          }
          else
          {
            v54 = v51[3];
          }
          v51[2] = v53;
          v50[1] = v51[1];
          v55 = i;
          if (v51 == i)
            goto LABEL_114;
          v56 = v49;
          while (1)
          {
            v57 = *(unint64_t *)((char *)i + v56 - 16);
            if (v52 >= v57)
              break;
            v58 = *(unint64_t *)((char *)i + v56 - 8);
LABEL_111:
            v51 -= 2;
            v59 = (unint64_t *)((char *)i + v56);
            *v59 = v57;
            v59[1] = v58;
            v56 -= 16;
            if (!v56)
            {
              v55 = i;
              goto LABEL_114;
            }
          }
          if (v57 >= v52)
          {
            v55 = (unint64_t *)((char *)i + v56);
            v58 = *(unint64_t *)((char *)i + v56 - 8);
            if (v54 >= v58)
              goto LABEL_114;
            goto LABEL_111;
          }
          v55 = v51;
LABEL_114:
          *v55 = v52;
          v55[1] = v54;
LABEL_115:
          v46 = v50 + 2;
          v49 += 16;
        }
        while (v50 + 2 != a2);
        return result;
    }
  }
}

void std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::push_back[abi:ne180100](char **a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;

  v4 = (unint64_t)a1[1];
  v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)*a1) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<long long>>>(v10);
    v12 = &v11[24 * v7];
    v14 = &v11[24 * v13];
    *(_OWORD *)v12 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *((_QWORD *)v12 + 2) = *(_QWORD *)(a2 + 16);
    v6 = v12 + 24;
    v15 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      *a1 = v12;
      a1[1] = v6;
      a1[2] = v14;
    }
    else
    {
      do
      {
        v17 = *(_OWORD *)(v16 - 24);
        v16 -= 24;
        *(_OWORD *)(v12 - 24) = v17;
        v12 -= 24;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v12 + 2) = *((_QWORD *)v16 + 2);
      }
      while (v16 != v15);
      v16 = *a1;
      v18 = (uint64_t)a1[1];
      *a1 = v12;
      a1[1] = v6;
      a1[2] = v14;
      while ((char *)v18 != v16)
        v18 = std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v18 - 24);
    }
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
    v6 = (char *)(v4 + 24);
  }
  a1[1] = v6;
}

void std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v4 - 24);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeEnsemble>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BCD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeEnsemble>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BCD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeEnsemble>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(_QWORD *)(a1 + 136) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 72);
  std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
}

unint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *a2;
  v4 = *result;
  if (*a2 >= *result && (v4 < v3 || a2[1] >= result[1]))
  {
    v7 = *a3;
    if (*a3 < v3 || v3 >= v7 && a3[1] < a2[1])
    {
      *a2 = v7;
      *a3 = v3;
      v8 = a2 + 1;
      v9 = a2[1];
      a2[1] = a3[1];
      a3[1] = v9;
      v10 = *a2;
      v11 = *result;
      if (*a2 < *result || v11 >= v10 && *v8 < result[1])
      {
        *result++ = v10;
        *a2 = v11;
LABEL_18:
        v15 = *result;
        *result = *v8;
        *v8 = v15;
      }
    }
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *result++ = v5;
      *a3 = v4;
      v6 = a3 + 1;
LABEL_17:
      v8 = v6;
      goto LABEL_18;
    }
    *result = v3;
    *a2 = v4;
    v12 = result[1];
    result[1] = a2[1];
    a2[1] = v12;
    v13 = *a3;
    v14 = *a2;
    if (*a3 < *a2 || v14 >= v13 && a3[1] < v12)
    {
      *a2 = v13;
      *a3 = v14;
      v6 = a3 + 1;
      result = a2 + 1;
      goto LABEL_17;
    }
  }
  return result;
}

unint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a3;
    v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a2;
      v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

unint64_t *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t *result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a4;
    v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a3;
      v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a2;
        v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v10;
    v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13)
        goto LABEL_23;
      v15 = v10[1];
      if (v15 >= v9[1])
        goto LABEL_23;
    }
    else
    {
      v15 = v10[1];
    }
    *v10 = v14;
    v10[1] = v9[1];
    v16 = a1;
    if (v9 == a1)
      goto LABEL_22;
    v17 = v11;
    while (1)
    {
      v18 = (char *)a1 + v17;
      v19 = *(unint64_t *)((char *)a1 + v17 + 16);
      if (v13 < v19)
      {
        v20 = *((_QWORD *)v18 + 3);
        goto LABEL_18;
      }
      if (v19 < v13)
      {
        v16 = v9;
        goto LABEL_22;
      }
      v20 = *(unint64_t *)((char *)a1 + v17 + 24);
      if (v15 >= v20)
        break;
LABEL_18:
      v9 -= 2;
      *((_QWORD *)v18 + 4) = v19;
      *(unint64_t *)((char *)a1 + v17 + 40) = v20;
      v17 -= 16;
      if (v17 == -32)
      {
        v16 = a1;
        goto LABEL_22;
      }
    }
    v16 = (unint64_t *)((char *)a1 + v17 + 32);
LABEL_22:
    *v16 = v13;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_23:
    v9 = v10;
    v11 += 16;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD *)(a2 - 16);
      v7 = *(_QWORD *)a1;
      if (v6 < *(_QWORD *)a1)
      {
        v8 = *(double *)(a1 + 8);
        v9 = *(double *)(a2 - 8);
LABEL_30:
        *(_QWORD *)a1 = v6;
        *(_QWORD *)(a2 - 16) = v7;
        *(double *)(a1 + 8) = v9;
        *(double *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        v9 = *(double *)(a2 - 8);
        v8 = *(double *)(a1 + 8);
        if (v9 < v8)
          goto LABEL_30;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a1 + 16, a1 + 32, a1 + 48, (unint64_t *)(a2 - 16));
      return 1;
    default:
      v10 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_6:
  v14 = *(_QWORD *)v11;
  v15 = *(_QWORD *)v10;
  if (*(_QWORD *)v11 >= *(_QWORD *)v10)
  {
    if (v15 < v14)
      goto LABEL_21;
    v16 = *(double *)(v11 + 8);
    v17 = *(double *)(v10 + 8);
    if (v16 >= v17)
      goto LABEL_21;
  }
  else
  {
    v16 = *(double *)(v11 + 8);
    v17 = *(double *)(v10 + 8);
  }
  *(_QWORD *)v11 = v15;
  *(double *)(v11 + 8) = v17;
  v18 = a1;
  if (v10 == a1)
    goto LABEL_20;
  v19 = v12;
  while (1)
  {
    v20 = a1 + v19;
    v21 = *(_QWORD *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        v18 = v10;
        goto LABEL_20;
      }
      v22 = *(double *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        v18 = a1 + v19 + 32;
LABEL_20:
        *(_QWORD *)v18 = v14;
        *(double *)(v18 + 8) = v16;
        if (++v13 == 8)
          return v11 + 16 == a2;
LABEL_21:
        v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v22 = *(double *)(v20 + 24);
    }
    v10 -= 16;
    *(_QWORD *)(v20 + 32) = v21;
    *(double *)(a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      v18 = a1;
      goto LABEL_20;
    }
  }
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeComputationNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BD10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeComputationNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BD10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeComputationNode>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  void *v3;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 20));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 18));
  v2 = (std::__shared_weak_count *)a1[17];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
}

void CoreML::validate<(MLModelType)609>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  int v5;
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto *v9;
  void *v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  __int128 __p;
  uint64_t v21;

  if (*(_QWORD *)(a2 + 16))
    v3 = *(uint64_t **)(a2 + 16);
  else
    v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_DWORD *)(a2 + 44) == 609)
  {
    CoreML::Result::Result((CoreML::Result *)&v19);
    v5 = *(_DWORD *)(a2 + 24);
    LODWORD(v13) = 0;
    CoreML::validateModelDescription((uint64_t)&v16, (uint64_t)v3, v5, (char *)&v13);
    v6 = (int)v16;
    v19 = v16;
    if (SHIBYTE(v21) < 0)
    {
      operator delete((void *)__p);
      v6 = (int)v19;
    }
    __p = v17;
    v21 = v18;
    if ((v6 & 0xFFFFFFEF) != 0)
      goto LABEL_14;
    v7 = (unsigned int *)operator new(4uLL);
    *v7 = 5;
    v14 = v7 + 1;
    v15 = v7 + 1;
    v13 = v7;
    CoreML::validateDescriptionsContainFeatureWithTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&v16, (uint64_t)(v3 + 2), 1, &v13);
    v19 = v16;
    if (SHIBYTE(v21) < 0)
      operator delete((void *)__p);
    __p = v17;
    v21 = v18;
    HIBYTE(v18) = 0;
    LOBYTE(v17) = 0;
    operator delete(v7);
    if ((v19 & 0xFFFFFFEF) != 0)
      goto LABEL_14;
    v8 = (unsigned int *)operator new(0xCuLL);
    v14 = v8 + 3;
    v15 = v8 + 3;
    *(_QWORD *)v8 = 0x100000002;
    v8[2] = 5;
    v13 = v8;
    CoreML::validateDescriptionsContainFeatureWithTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&v16, (uint64_t)(v3 + 5), 1, &v13);
    v19 = v16;
    if (SHIBYTE(v21) < 0)
      operator delete((void *)__p);
    __p = v17;
    v21 = v18;
    HIBYTE(v18) = 0;
    LOBYTE(v17) = 0;
    operator delete(v8);
    if ((v19 & 0xFFFFFFEF) != 0)
      goto LABEL_14;
    if (*((_DWORD *)v3 + 6) == 1)
    {
      v11 = *(uint64_t **)(*(_QWORD *)(v3[7] + 8) + 32);
      if (!v11)
        v11 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_DWORD *)v11 + 9) != 2
        || (*(_DWORD *)(a2 + 44) != 609
          ? (CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults(v9),
             v12 = &CoreML::Specification::_ArrayFeatureExtractor_default_instance_)
          : (v12 = *(uint64_t **)(a2 + 32)),
            *((_DWORD *)v12 + 4) == 1))
      {
LABEL_14:
        *(_QWORD *)a1 = v19;
        *(_OWORD *)(a1 + 8) = __p;
        *(_QWORD *)(a1 + 24) = v21;
        __p = 0uLL;
        v21 = 0;
LABEL_15:
        if ((SHIBYTE(v21) & 0x80000000) == 0)
          return;
        v10 = (void *)__p;
        goto LABEL_19;
      }
      std::string::basic_string[abi:ne180100]<0>(&v16, "If output type is Double in interface, exactly one extraction index must be specified.");
      *(_QWORD *)a1 = 13;
      std::operator+<char>();
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "Exactly one input array column must be specified.");
      *(_QWORD *)a1 = 13;
      std::operator+<char>();
    }
    if (SHIBYTE(v17) < 0)
      operator delete(v16);
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(&v19, "Model not an array feature extractor.");
  *(_QWORD *)a1 = 13;
  std::operator+<char>();
  if ((SHIBYTE(__p) & 0x80000000) == 0)
    return;
  v10 = v19;
LABEL_19:
  operator delete(v10);
}

void sub_19CA243E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

BOOL CoreML::Specification::operator==(unint64_t *inited, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  _BOOL8 result;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int *v19;
  int v20;
  int *v21;
  int v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (*(_DWORD *)(a3 + 36) != a2)
    return 0;
  switch(a2)
  {
    case 4:
      v6 = *(_QWORD *)(a3 + 24);
      if (inited[2] != *(_QWORD *)(v6 + 16) || inited[3] != *(_QWORD *)(v6 + 24))
        return 0;
      v7 = *((_DWORD *)inited + 8);
      v8 = *(_DWORD *)(v6 + 32);
      return v7 == v8;
    case 5:
      v9 = *(_QWORD *)(a3 + 24);
      v10 = *((unsigned int *)inited + 9);
      if ((_DWORD)v10 != *(_DWORD *)(v9 + 36))
        return 0;
      v11 = *((_DWORD *)inited + 15);
      if (v11)
      {
        if (v11 == 31)
        {
          v12 = (int *)(inited[5] + 24);
        }
        else
        {
          if (v11 != 21)
            goto LABEL_31;
          v12 = (int *)(*(_QWORD *)(*(_QWORD *)(inited[5] + 32) + 8) + 16);
        }
      }
      else
      {
        v12 = (int *)(inited + 2);
      }
      v10 = *v12;
LABEL_31:
      v20 = *(_DWORD *)(v9 + 60);
      if (v20)
      {
        if (v20 == 31)
        {
          v21 = (int *)(*(_QWORD *)(v9 + 40) + 24);
        }
        else
        {
          if (v20 != 21)
            goto LABEL_45;
          v21 = (int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 32) + 8) + 16);
        }
      }
      else
      {
        v21 = (int *)(v9 + 16);
      }
      v4 = *v21;
LABEL_45:
      if (v10 != v4)
        return 0;
      if (v20 | v11)
        goto LABEL_67;
      v24 = *((unsigned int *)inited + 4);
      if ((int)v24 < 1)
        goto LABEL_67;
      v25 = *(_QWORD *)(v9 + 24);
      v26 = v24 - 1;
      v27 = (uint64_t *)(v25 + 8);
      v28 = (uint64_t *)(inited[3] + 8);
      do
      {
        v30 = *v28++;
        v29 = v30;
        v32 = *v27++;
        v31 = v32;
        v34 = v26-- != 0;
        result = v29 == v31;
      }
      while (v29 == v31 && v34);
      return result;
    case 6:
      v8 = *(_DWORD *)(*(_QWORD *)(a3 + 24) + 28);
      v7 = *((_DWORD *)inited + 7);
      return v7 == v8;
    case 7:
      v8 = *(_DWORD *)(*(_QWORD *)(a3 + 24) + 36);
      v7 = *((_DWORD *)inited + 9);
      return v7 == v8;
    case 8:
      if (*((_DWORD *)inited + 7) == 1)
      {
        v14 = (uint64_t *)inited[2];
LABEL_18:
        v15 = *(uint64_t **)(a3 + 24);
        goto LABEL_20;
      }
      inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
      if (*(_DWORD *)(a3 + 36) == 8)
      {
        v14 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        goto LABEL_18;
      }
      inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
      v15 = &CoreML::Specification::_StateFeatureType_default_instance_;
      v14 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
LABEL_20:
      if (*((_DWORD *)v15 + 7) == 1)
      {
        v16 = (uint64_t *)v15[2];
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
        v16 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      v17 = *((unsigned int *)v14 + 9);
      if ((_DWORD)v17 != *((_DWORD *)v16 + 9))
        return 0;
      v18 = *((_DWORD *)v14 + 15);
      if (v18)
      {
        if (v18 == 31)
        {
          v19 = (int *)(v14[5] + 24);
        }
        else
        {
          if (v18 != 21)
            goto LABEL_38;
          v19 = (int *)(*(_QWORD *)(*(_QWORD *)(v14[5] + 32) + 8) + 16);
        }
      }
      else
      {
        v19 = (int *)(v14 + 2);
      }
      v17 = *v19;
LABEL_38:
      v22 = *((_DWORD *)v16 + 15);
      if (v22)
      {
        if (v22 == 31)
        {
          v23 = (int *)(v16[5] + 24);
        }
        else
        {
          if (v22 != 21)
            goto LABEL_58;
          v23 = (int *)(*(_QWORD *)(*(_QWORD *)(v16[5] + 32) + 8) + 16);
        }
      }
      else
      {
        v23 = (int *)(v16 + 2);
      }
      v3 = *v23;
LABEL_58:
      if (v17 != v3)
        return 0;
      v35 = *((unsigned int *)v14 + 4);
      if ((int)v35 < 1)
      {
LABEL_67:
        result = 1;
      }
      else
      {
        v36 = v14[3];
        v37 = v16[3];
        if (*(_QWORD *)(v36 + 8) != *(_QWORD *)(v37 + 8))
          return 0;
        v38 = 0;
        v39 = v36 + 16;
        v40 = v37 + 16;
        while (v35 - 1 != v38)
        {
          v41 = *(_QWORD *)(v39 + 8 * v38);
          v42 = *(_QWORD *)(v40 + 8 * v38++);
          if (v41 != v42)
            goto LABEL_69;
        }
        v38 = *((unsigned int *)v14 + 4);
LABEL_69:
        result = v38 >= v35;
      }
      break;
    default:
      goto LABEL_67;
  }
  return result;
}

BOOL CoreML::Specification::isEquivalent(CoreML::Specification *this, const CoreML::Specification::FeatureDescription *a2, const CoreML::Specification::FeatureDescription *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const CoreML::Specification::FeatureDescription *v10;
  uint64_t *v12;
  uint64_t *v13;

  v4 = *((unsigned __int8 *)this + 23);
  if ((v4 & 0x80u) == 0)
    v5 = *((unsigned __int8 *)this + 23);
  else
    v5 = *((_QWORD *)this + 1);
  v6 = *((unsigned __int8 *)a3 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 >= 0)
    v10 = a3;
  else
    v10 = *(const CoreML::Specification::FeatureDescription **)a3;
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)this, v10, *((_QWORD *)this + 1)))
      goto LABEL_17;
    return 0;
  }
  if (*((_BYTE *)this + 23))
  {
    while (*(unsigned __int8 *)this == *(unsigned __int8 *)v10)
    {
      this = (CoreML::Specification *)((char *)this + 1);
      v10 = (const CoreML::Specification::FeatureDescription *)((char *)v10 + 1);
      if (!--v4)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  if (a2)
    v12 = (uint64_t *)a2;
  else
    v12 = &CoreML::Specification::_FeatureType_default_instance_;
  if (a4)
    v13 = a4;
  else
    v13 = &CoreML::Specification::_FeatureType_default_instance_;
  return CoreML::Specification::operator==((unint64_t *)v12[3], *((_DWORD *)v12 + 9), (uint64_t)v13);
}

void CoreML::Specification::NonMaximumSuppression_PickTop::~NonMaximumSuppression_PickTop(CoreML::Specification::NonMaximumSuppression_PickTop *this)
{
  *(_QWORD *)this = &off_1E3D56608;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E3D56608;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *CoreML::Specification::NonMaximumSuppression_PickTop::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.NonMaximumSuppression.PickTop");
}

CoreML::Specification::NonMaximumSuppression_PickTop *CoreML::Specification::NonMaximumSuppression_PickTop::New(CoreML::Specification::NonMaximumSuppression_PickTop *this)
{
  return CoreML::Specification::NonMaximumSuppression_PickTop::New(this, 0);
}

CoreML::Specification::NonMaximumSuppression_PickTop *CoreML::Specification::NonMaximumSuppression_PickTop::New(CoreML::Specification::NonMaximumSuppression_PickTop *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::NonMaximumSuppression_PickTop *v3;

  v3 = (CoreML::Specification::NonMaximumSuppression_PickTop *)operator new();
  CoreML::Specification::NonMaximumSuppression_PickTop::NonMaximumSuppression_PickTop(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::NonMaximumSuppression_PickTop>(a2, v3);
  return v3;
}

void sub_19CA248F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NonMaximumSuppression_PickTop::Clear(uint64_t this)
{
  *(_BYTE *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::NonMaximumSuppression_PickTop::IsInitialized(CoreML::Specification::NonMaximumSuppression_PickTop *this)
{
  return 1;
}

std::string *CoreML::Specification::NonMaximumSuppression_PickTop::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_BYTE *)a2 + 16))
    v3->__r_.__value_.__s.__data_[16] = 1;
  return this;
}

uint64_t CoreML::Specification::NonMaximumSuppression_PickTop::MergePartialFromCodedStream(CoreML::Specification::NonMaximumSuppression_PickTop *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  char *v11;
  unint64_t Varint64Fallback;
  char v13;

  do
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_6:
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
        if ((v13 & 1) == 0)
          return 0;
      }
      else
      {
        Varint64Fallback = *v11;
        *a2 = v11 + 1;
      }
      *((_BYTE *)this + 16) = Varint64Fallback != 0;
    }
    if ((_DWORD)v7)
      v10 = (v7 & 7) == 4;
    else
      v10 = 1;
    if (v10)
      return 1;
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::NonMaximumSuppression_PickTop::ByteSizeLong(CoreML::Specification::NonMaximumSuppression_PickTop *this)
{
  uint64_t v1;

  v1 = 2 * *((unsigned __int8 *)this + 16);
  *((_DWORD *)this + 5) = v1;
  return v1;
}

uint64_t CoreML::Specification::NonMaximumSuppression_PickTop::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_BYTE *)(this + 16))
    return google::protobuf::internal::WireFormatLite::WriteBool(1, 1u, a2, a4);
  return this;
}

uint64_t CoreML::Specification::NonMaximumSuppression_PickTop::GetCachedSize(CoreML::Specification::NonMaximumSuppression_PickTop *this)
{
  return *((unsigned int *)this + 5);
}

CoreML::Specification::NonMaximumSuppression_PickTop *CoreML::Specification::NonMaximumSuppression_PickTop::NonMaximumSuppression_PickTop(CoreML::Specification::NonMaximumSuppression_PickTop *this)
{
  *(_QWORD *)this = &off_1E3D56608;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::NonMaximumSuppression_PickTop *)&CoreML::Specification::_NonMaximumSuppression_PickTop_default_instance_)
    CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(this);
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  return this;
}

void sub_19CA24AE4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::NonMaximumSuppression_PickTop>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::NonMaximumSuppression_PickTop>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::NonMaximumSuppression_PickTop>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Specification::NonMaximumSuppression::~NonMaximumSuppression(CoreML::Specification::NonMaximumSuppression *this)
{
  CoreML::Specification::NonMaximumSuppression::~NonMaximumSuppression(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E3D53428;
  v2 = *((_QWORD *)this + 2);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((__int128 *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1A1AD6260](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 4);
  if ((__int128 *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1A1AD6260](v6, 0x1012C40EC159624);
  }
  v7 = *((_QWORD *)this + 5);
  if ((__int128 *)v7 != &google::protobuf::internal::fixed_address_empty_string && v7)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x1A1AD6260](v7, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 6);
  if ((__int128 *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x1A1AD6260](v8, 0x1012C40EC159624);
  }
  v9 = *((_QWORD *)this + 7);
  if ((__int128 *)v9 != &google::protobuf::internal::fixed_address_empty_string && v9)
  {
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    MEMORY[0x1A1AD6260](v9, 0x1012C40EC159624);
  }
  v10 = *((_DWORD *)this + 25);
  if (v10)
  {
    if (v10 == 1)
    {
      v11 = *((_QWORD *)this + 10);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    *((_DWORD *)this + 25) = 0;
  }
  if (*((_DWORD *)this + 26))
    CoreML::Specification::NonMaximumSuppression::clear_ClassLabels((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *CoreML::Specification::NonMaximumSuppression::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.NonMaximumSuppression");
}

CoreML::Specification::NonMaximumSuppression *CoreML::Specification::NonMaximumSuppression::New(CoreML::Specification::NonMaximumSuppression *this)
{
  return CoreML::Specification::NonMaximumSuppression::New(this, 0);
}

CoreML::Specification::NonMaximumSuppression *CoreML::Specification::NonMaximumSuppression::New(CoreML::Specification::NonMaximumSuppression *this, google::protobuf::Arena **a2)
{
  CoreML::Specification::NonMaximumSuppression *v3;

  v3 = (CoreML::Specification::NonMaximumSuppression *)operator new();
  CoreML::Specification::NonMaximumSuppression::NonMaximumSuppression(v3);
  if (a2)
    google::protobuf::Arena::Own<CoreML::Specification::NonMaximumSuppression>(a2, v3);
  return v3;
}

void sub_19CA24BEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40D18C2FB1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NonMaximumSuppression::Clear(CoreML::Specification::NonMaximumSuppression *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 2);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((__int128 *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if ((__int128 *)v4 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
  v5 = *((_QWORD *)this + 5);
  if ((__int128 *)v5 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
  v6 = *((_QWORD *)this + 6);
  if ((__int128 *)v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
  v7 = *((_QWORD *)this + 7);
  if ((__int128 *)v7 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
    }
  }
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  if (*((_DWORD *)this + 25) == 1)
  {
    v8 = *((_QWORD *)this + 10);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  *((_DWORD *)this + 25) = 0;
  return CoreML::Specification::NonMaximumSuppression::clear_ClassLabels((uint64_t)this);
}

uint64_t CoreML::Specification::NonMaximumSuppression::IsInitialized(CoreML::Specification::NonMaximumSuppression *this)
{
  return 1;
}

uint64_t CoreML::Specification::NonMaximumSuppression::MergePartialFromCodedStream(CoreML::Specification::NonMaximumSuppression *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  std::string **v7;
  std::string **v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  unsigned int TagFallback;
  unsigned int v17;
  std::string *v18;
  uint64_t result;
  std::string *v20;
  std::string::size_type size;
  CoreML::Specification::Int64Vector *v22;
  unint64_t *v23;
  unint64_t v24;
  CoreML::Specification::NonMaximumSuppression_PickTop *v25;
  CoreML::Specification::StringVector *v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  std::string *v30;
  std::string *v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  int v35;
  char *v36;
  int VarintSizeAsIntFallback;
  char *v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  const char *v51;
  std::string **v52;
  std::string **v53;
  unint64_t v54;

  v52 = (std::string **)((char *)this + 48);
  v53 = (std::string **)((char *)this + 56);
  v5 = (std::string **)((char *)this + 40);
  v6 = (std::string **)((char *)this + 32);
  v7 = (std::string **)((char *)this + 24);
  v8 = (std::string **)((char *)this + 16);
  while (1)
  {
LABEL_2:
    v9 = *(unsigned __int8 **)a2;
    v10 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 >= v10)
    {
      LODWORD(v12) = 0;
    }
    else
    {
      v11 = v9 + 1;
      v12 = *v9;
      if ((char)*v9 >= 1)
      {
        *(_QWORD *)a2 = v11;
        v13 = v12 | 0x100000000;
        if ((v13 & 0x100000000) == 0)
          goto LABEL_9;
        goto LABEL_17;
      }
      if ((unint64_t)v11 < v10)
      {
        v14 = *v11;
        if ((v12 & ~v14) >= 0x80)
        {
          *(_QWORD *)a2 = v9 + 2;
          v13 = (v12 + (v14 << 7) - 128) | 0x100000000;
          goto LABEL_17;
        }
      }
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v12);
    v13 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v13 & 0x100000000) == 0)
      goto LABEL_9;
LABEL_17:
    v17 = v13 >> 3;
    if (v13 >> 3 > 0x6D)
      break;
    if (v17 == 1)
    {
      if (v13 != 10)
        goto LABEL_9;
      if (*((_DWORD *)this + 25) == 1)
      {
        v25 = (CoreML::Specification::NonMaximumSuppression_PickTop *)*((_QWORD *)this + 10);
      }
      else
      {
        *((_DWORD *)this + 25) = 1;
        v25 = (CoreML::Specification::NonMaximumSuppression_PickTop *)operator new();
        CoreML::Specification::NonMaximumSuppression_PickTop::NonMaximumSuppression_PickTop(v25);
        *((_QWORD *)this + 10) = v25;
      }
      v36 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v36 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v36;
        *(_QWORD *)a2 = v36 + 1;
      }
      v45 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v47 = *((_DWORD *)a2 + 13);
      v43 = __OFSUB__(v47--, 1);
      *((_DWORD *)a2 + 13) = v47;
      if (v47 < 0 != v43)
        return 0;
      v44 = v45;
      result = CoreML::Specification::NonMaximumSuppression_PickTop::MergePartialFromCodedStream(v25, (char **)a2, v46);
      if (!(_DWORD)result)
        return result;
    }
    else if (v17 == 100)
    {
      if (v13 != 34)
        goto LABEL_9;
      if (*((_DWORD *)this + 26) == 100)
      {
        v26 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 11);
      }
      else
      {
        CoreML::Specification::NonMaximumSuppression::clear_ClassLabels((uint64_t)this);
        *((_DWORD *)this + 26) = 100;
        v26 = (CoreML::Specification::StringVector *)operator new();
        CoreML::Specification::StringVector::StringVector(v26);
        *((_QWORD *)this + 11) = v26;
      }
      v38 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v38 < 0)
      {
        v39 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v39 < 0)
          return 0;
      }
      else
      {
        v39 = *v38;
        *(_QWORD *)a2 = v38 + 1;
      }
      v48 = google::protobuf::io::CodedInputStream::PushLimit(a2, v39);
      v50 = *((_DWORD *)a2 + 13);
      v43 = __OFSUB__(v50--, 1);
      *((_DWORD *)a2 + 13) = v50;
      if (v50 < 0 != v43)
        return 0;
      v44 = v48;
      result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v26, (char **)a2, v49);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      if (v17 != 101 || v13 != 42)
        goto LABEL_9;
      if (*((_DWORD *)this + 26) == 101)
      {
        v22 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 11);
      }
      else
      {
        CoreML::Specification::NonMaximumSuppression::clear_ClassLabels((uint64_t)this);
        *((_DWORD *)this + 26) = 101;
        v22 = (CoreML::Specification::Int64Vector *)operator new();
        CoreML::Specification::Int64Vector::Int64Vector(v22);
        *((_QWORD *)this + 11) = v22;
      }
      v34 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v34 < 0)
      {
        v35 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v35 < 0)
          return 0;
      }
      else
      {
        v35 = *v34;
        *(_QWORD *)a2 = v34 + 1;
      }
      v40 = google::protobuf::io::CodedInputStream::PushLimit(a2, v35);
      v42 = *((_DWORD *)a2 + 13);
      v43 = __OFSUB__(v42--, 1);
      *((_DWORD *)a2 + 13) = v42;
      if (v42 < 0 != v43)
        return 0;
      v44 = v40;
      result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v22, a2, v41);
      if (!(_DWORD)result)
        return result;
    }
    if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v44))
      return 0;
  }
  switch(v17)
  {
    case 0xC8u:
      if (v13 != 66)
        goto LABEL_9;
      v18 = *v8;
      if (*v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v18 = *v8;
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v18);
      if (!(_DWORD)result)
        return result;
      v20 = *v8;
      if (SHIBYTE((*v8)->__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (*v8)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v8)->__r_.__value_.__r.__words[2]);
      }
      v51 = "CoreML.Specification.NonMaximumSuppression.confidenceInputFeatureName";
      goto LABEL_114;
    case 0xC9u:
      if (v13 != 74)
        goto LABEL_9;
      v27 = *v7;
      if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v27 = *v7;
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v27);
      if (!(_DWORD)result)
        return result;
      v20 = *v7;
      if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (*v7)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
      }
      v51 = "CoreML.Specification.NonMaximumSuppression.coordinatesInputFeatureName";
      goto LABEL_114;
    case 0xCAu:
      if (v13 != 82)
        goto LABEL_9;
      v28 = *v6;
      if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v28 = *v6;
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v28);
      if (!(_DWORD)result)
        return result;
      v20 = *v6;
      if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (*v6)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
      }
      v51 = "CoreML.Specification.NonMaximumSuppression.iouThresholdInputFeatureName";
      goto LABEL_114;
    case 0xCBu:
      if (v13 != 90)
        goto LABEL_9;
      v29 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v29 = *v5;
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v29);
      if (!(_DWORD)result)
        return result;
      v20 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      v51 = "CoreML.Specification.NonMaximumSuppression.confidenceThresholdInputFeatureName";
      goto LABEL_114;
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
      goto LABEL_9;
    case 0xD2u:
      if (v13 != 146)
        goto LABEL_9;
      v30 = *v52;
      if (*v52 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v52, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v30 = *v52;
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v30);
      if (!(_DWORD)result)
        return result;
      v20 = *v52;
      if (SHIBYTE((*v52)->__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (*v52)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v52)->__r_.__value_.__r.__words[2]);
      }
      v51 = "CoreML.Specification.NonMaximumSuppression.confidenceOutputFeatureName";
      goto LABEL_114;
    case 0xD3u:
      if (v13 != 154)
        goto LABEL_9;
      v31 = *v53;
      if (*v53 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v53, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v31 = *v53;
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v31);
      if (!(_DWORD)result)
        return result;
      v20 = *v53;
      if (SHIBYTE((*v53)->__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (*v53)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v53)->__r_.__value_.__r.__words[2]);
      }
      v51 = "CoreML.Specification.NonMaximumSuppression.coordinatesOutputFeatureName";
LABEL_114:
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v20, size, 0, (uint64_t)v51))
        return 0;
      goto LABEL_2;
    default:
      if (v17 != 110)
      {
        if (v17 != 111 || v13 != 121)
          goto LABEL_9;
        v54 = 0;
        v23 = *(unint64_t **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
        {
          result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v54);
          if (!(_DWORD)result)
            return result;
          v24 = v54;
        }
        else
        {
          v24 = *v23;
          *(_QWORD *)a2 = v23 + 1;
        }
        *((_QWORD *)this + 9) = v24;
        goto LABEL_2;
      }
      if (v13 == 113)
      {
        v54 = 0;
        v32 = *(unint64_t **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
        {
          result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v54);
          if (!(_DWORD)result)
            return result;
          v33 = v54;
        }
        else
        {
          v33 = *v32;
          *(_QWORD *)a2 = v32 + 1;
        }
        *((_QWORD *)this + 8) = v33;
        goto LABEL_2;
      }
LABEL_9:
      if ((_DWORD)v13)
        v15 = (v13 & 7) == 4;
      else
        v15 = 1;
      if (!v15)
      {
        if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v13, a3) & 1) == 0)return 0;
        goto LABEL_2;
      }
      return 1;
  }
}

void sub_19CA253FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NonMaximumSuppression::ByteSizeLong(CoreML::Specification::NonMaximumSuppression *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_13:
  v9 = *((_QWORD *)this + 4);
  v10 = *(unsigned __int8 *)(v9 + 23);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(_QWORD *)(v9 + 8))
      goto LABEL_18;
  }
  else if (!*(_BYTE *)(v9 + 23))
  {
    goto LABEL_18;
  }
  v11 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v11 = v10;
  v5 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_18:
  v12 = *((_QWORD *)this + 5);
  v13 = *(unsigned __int8 *)(v12 + 23);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(_QWORD *)(v12 + 8))
      goto LABEL_23;
  }
  else if (!*(_BYTE *)(v12 + 23))
  {
    goto LABEL_23;
  }
  v14 = *(_QWORD *)(v12 + 8);
  if ((v13 & 0x80u) == 0)
    v14 = v13;
  v5 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_23:
  v15 = *((_QWORD *)this + 6);
  v16 = *(unsigned __int8 *)(v15 + 23);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(_QWORD *)(v15 + 8))
      goto LABEL_28;
  }
  else if (!*(_BYTE *)(v15 + 23))
  {
    goto LABEL_28;
  }
  v17 = *(_QWORD *)(v15 + 8);
  if ((v16 & 0x80u) == 0)
    v17 = v16;
  v5 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_28:
  v18 = *((_QWORD *)this + 7);
  v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0)
  {
    if (!*(_QWORD *)(v18 + 8))
      goto LABEL_33;
  }
  else if (!*(_BYTE *)(v18 + 23))
  {
    goto LABEL_33;
  }
  v20 = *(_QWORD *)(v18 + 8);
  if ((v19 & 0x80u) == 0)
    v20 = v19;
  v5 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_33:
  if (*((double *)this + 8) != 0.0)
    v5 += 10;
  if (*((double *)this + 9) == 0.0)
    v21 = v5;
  else
    v21 = v5 + 10;
  if (*((_DWORD *)this + 25) == 1)
  {
    v22 = *((_QWORD *)this + 10);
    v23 = *(unsigned __int8 *)(v22 + 16);
    *(_DWORD *)(v22 + 20) = 2 * v23;
    v21 += 2 * v23 + 2;
  }
  v24 = *((_DWORD *)this + 26);
  if (v24 == 101)
  {
    v25 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 11));
    goto LABEL_54;
  }
  if (v24 == 100)
  {
    v25 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 11));
LABEL_54:
    v21 += v25 + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 24) = v21;
  return v21;
}

uint64_t CoreML::Specification::NonMaximumSuppression::SerializeWithCachedSizes(CoreML::Specification::NonMaximumSuppression *this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  double v7;
  double v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  if (*((_DWORD *)this + 25) == 1)
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *((_QWORD *)this + 10), a2, a4);
  v6 = *((_DWORD *)this + 26);
  if (v6 == 100)
  {
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x64, *((_QWORD *)this + 11), a2, a4);
    v6 = *((_DWORD *)this + 26);
  }
  if (v6 == 101)
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x65, *((_QWORD *)this + 11), a2, a4);
  v7 = *((double *)this + 8);
  if (v7 != 0.0)
    google::protobuf::internal::WireFormatLite::WriteDouble(110, a2, v7, a3);
  v8 = *((double *)this + 9);
  if (v8 != 0.0)
    google::protobuf::internal::WireFormatLite::WriteDouble(111, a2, v8, a3);
  v9 = (unsigned int *)*((_QWORD *)this + 2);
  if (*((char *)v9 + 23) < 0)
  {
    v10 = *((_QWORD *)v9 + 1);
    if (!v10)
      goto LABEL_17;
    v9 = *(unsigned int **)v9;
    goto LABEL_16;
  }
  LODWORD(v10) = *((unsigned __int8 *)v9 + 23);
  if (*((_BYTE *)v9 + 23))
  {
LABEL_16:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v9, v10, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.confidenceInputFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xC8u, *((_QWORD *)this + 2), a2);
  }
LABEL_17:
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  if (*((char *)v11 + 23) < 0)
  {
    v12 = *((_QWORD *)v11 + 1);
    if (!v12)
      goto LABEL_23;
    v11 = *(unsigned int **)v11;
    goto LABEL_22;
  }
  LODWORD(v12) = *((unsigned __int8 *)v11 + 23);
  if (*((_BYTE *)v11 + 23))
  {
LABEL_22:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.coordinatesInputFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xC9u, *((_QWORD *)this + 3), a2);
  }
LABEL_23:
  v13 = (unsigned int *)*((_QWORD *)this + 4);
  if (*((char *)v13 + 23) < 0)
  {
    v14 = *((_QWORD *)v13 + 1);
    if (!v14)
      goto LABEL_29;
    v13 = *(unsigned int **)v13;
    goto LABEL_28;
  }
  LODWORD(v14) = *((unsigned __int8 *)v13 + 23);
  if (*((_BYTE *)v13 + 23))
  {
LABEL_28:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, v14, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.iouThresholdInputFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xCAu, *((_QWORD *)this + 4), a2);
  }
LABEL_29:
  v15 = (unsigned int *)*((_QWORD *)this + 5);
  if (*((char *)v15 + 23) < 0)
  {
    v16 = *((_QWORD *)v15 + 1);
    if (!v16)
      goto LABEL_35;
    v15 = *(unsigned int **)v15;
    goto LABEL_34;
  }
  LODWORD(v16) = *((unsigned __int8 *)v15 + 23);
  if (*((_BYTE *)v15 + 23))
  {
LABEL_34:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v15, v16, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.confidenceThresholdInputFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xCBu, *((_QWORD *)this + 5), a2);
  }
LABEL_35:
  v17 = (unsigned int *)*((_QWORD *)this + 6);
  if (*((char *)v17 + 23) < 0)
  {
    v18 = *((_QWORD *)v17 + 1);
    if (!v18)
      goto LABEL_41;
    v17 = *(unsigned int **)v17;
    goto LABEL_40;
  }
  LODWORD(v18) = *((unsigned __int8 *)v17 + 23);
  if (*((_BYTE *)v17 + 23))
  {
LABEL_40:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v17, v18, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.confidenceOutputFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xD2u, *((_QWORD *)this + 6), a2);
  }
LABEL_41:
  result = *((_QWORD *)this + 7);
  if (*(char *)(result + 23) < 0)
  {
    v20 = *(_QWORD *)(result + 8);
    if (!v20)
      return result;
    result = *(_QWORD *)result;
    goto LABEL_46;
  }
  LODWORD(v20) = *(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_46:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v20, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.coordinatesOutputFeatureName");
    return google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xD3u, *((_QWORD *)this + 7), a2);
  }
  return result;
}

uint64_t CoreML::Specification::NonMaximumSuppression::GetCachedSize(CoreML::Specification::NonMaximumSuppression *this)
{
  return *((unsigned int *)this + 24);
}

uint64_t CoreML::Specification::NonMaximumSuppression::clear_ClassLabels(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 104);
  if (v2 == 101 || v2 == 100)
  {
    this = *(_QWORD *)(this + 88);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 104) = 0;
  return this;
}

void CoreML::Specification::NonMaximumSuppression::MergeFrom(CoreML::Specification::NonMaximumSuppression *this, const CoreML::Specification::NonMaximumSuppression *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  __int128 *v16;
  double v17;
  double v18;
  uint64_t v19;
  CoreML::Specification::protobuf_NonMaximumSuppression_2eproto *v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  CoreML::Specification::StringVector *v24;
  CoreML::Specification::Int64Vector *v25;
  CoreML::Specification::protobuf_DataStructures_2eproto *v26;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v27;
  CoreML::Specification::protobuf_DataStructures_2eproto *v28;
  const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *v29;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (__int128 *)*((_QWORD *)this + 2);
  if (v6 != (__int128 *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_19;
  }
  v8 = (__int128 *)*((_QWORD *)this + 3);
  if (v8 != (__int128 *)v7)
  {
    if (v8 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v7);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v7);
  }
LABEL_19:
  v9 = *((_QWORD *)a2 + 4);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(_QWORD *)(v9 + 8))
      goto LABEL_27;
  }
  else if (!*(_BYTE *)(v9 + 23))
  {
    goto LABEL_27;
  }
  v10 = (__int128 *)*((_QWORD *)this + 4);
  if (v10 != (__int128 *)v9)
  {
    if (v10 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, v9);
    else
      std::string::operator=(*((std::string **)this + 4), (const std::string *)v9);
  }
LABEL_27:
  v11 = *((_QWORD *)a2 + 5);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(_QWORD *)(v11 + 8))
      goto LABEL_35;
  }
  else if (!*(_BYTE *)(v11 + 23))
  {
    goto LABEL_35;
  }
  v12 = (__int128 *)*((_QWORD *)this + 5);
  if (v12 != (__int128 *)v11)
  {
    if (v12 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v11);
    else
      std::string::operator=(*((std::string **)this + 5), (const std::string *)v11);
  }
LABEL_35:
  v13 = *((_QWORD *)a2 + 6);
  if (*(char *)(v13 + 23) < 0)
  {
    if (!*(_QWORD *)(v13 + 8))
      goto LABEL_43;
  }
  else if (!*(_BYTE *)(v13 + 23))
  {
    goto LABEL_43;
  }
  v14 = (__int128 *)*((_QWORD *)this + 6);
  if (v14 != (__int128 *)v13)
  {
    if (v14 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v13);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v13);
  }
LABEL_43:
  v15 = *((_QWORD *)a2 + 7);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(_QWORD *)(v15 + 8))
      goto LABEL_51;
  }
  else if (!*(_BYTE *)(v15 + 23))
  {
    goto LABEL_51;
  }
  v16 = (__int128 *)*((_QWORD *)this + 7);
  if (v16 != (__int128 *)v15)
  {
    if (v16 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, v15);
    else
      std::string::operator=(*((std::string **)this + 7), (const std::string *)v15);
  }
LABEL_51:
  v17 = *((double *)a2 + 8);
  if (v17 != 0.0)
    *((double *)this + 8) = v17;
  v18 = *((double *)a2 + 9);
  if (v18 != 0.0)
    *((double *)this + 9) = v18;
  if (*((_DWORD *)a2 + 25) == 1)
  {
    if (*((_DWORD *)this + 25) == 1)
    {
      v19 = *((_QWORD *)this + 10);
    }
    else
    {
      *((_DWORD *)this + 25) = 1;
      v19 = operator new();
      v20 = CoreML::Specification::NonMaximumSuppression_PickTop::NonMaximumSuppression_PickTop((CoreML::Specification::NonMaximumSuppression_PickTop *)v19);
      *((_QWORD *)this + 10) = v19;
      if (*((_DWORD *)a2 + 25) != 1)
      {
        CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(v20);
        v21 = &CoreML::Specification::_NonMaximumSuppression_PickTop_default_instance_;
        goto LABEL_61;
      }
    }
    v21 = (uint64_t *)*((_QWORD *)a2 + 10);
LABEL_61:
    v22 = v21[1];
    if ((v22 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v19 + 8), v22 & 0xFFFFFFFFFFFFFFFELL);
    if (*((_BYTE *)v21 + 16))
      *(_BYTE *)(v19 + 16) = 1;
  }
  v23 = *((_DWORD *)a2 + 26);
  if (v23 == 101)
  {
    if (*((_DWORD *)this + 26) == 101)
    {
      v25 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 11);
    }
    else
    {
      CoreML::Specification::NonMaximumSuppression::clear_ClassLabels((uint64_t)this);
      *((_DWORD *)this + 26) = 101;
      v25 = (CoreML::Specification::Int64Vector *)operator new();
      v28 = CoreML::Specification::Int64Vector::Int64Vector(v25);
      *((_QWORD *)this + 11) = v25;
      if (*((_DWORD *)a2 + 26) != 101)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v28);
        v29 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&CoreML::Specification::_Int64Vector_default_instance_;
        goto LABEL_79;
      }
    }
    v29 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((_QWORD *)a2 + 11);
LABEL_79:
    CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((uint64_t *)v25, v29);
    return;
  }
  if (v23 == 100)
  {
    if (*((_DWORD *)this + 26) == 100)
    {
      v24 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 11);
    }
    else
    {
      CoreML::Specification::NonMaximumSuppression::clear_ClassLabels((uint64_t)this);
      *((_DWORD *)this + 26) = 100;
      v24 = (CoreML::Specification::StringVector *)operator new();
      v26 = CoreML::Specification::StringVector::StringVector(v24);
      *((_QWORD *)this + 11) = v24;
      if (*((_DWORD *)a2 + 26) != 100)
      {
        CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v26);
        v27 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)&CoreML::Specification::_StringVector_default_instance_;
        goto LABEL_77;
      }
    }
    v27 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((_QWORD *)a2 + 11);
LABEL_77:
    CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom((std::string *)v24, v27);
  }
}

