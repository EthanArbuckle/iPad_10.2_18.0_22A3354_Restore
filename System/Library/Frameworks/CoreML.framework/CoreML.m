void CoreML::MIL::CoreMLUtil::MakeContext(CoreML::MIL::CoreMLUtil *this)
{
  MIL::Opsets::Common::CreateMILContext(this);
  CoreML::MIL::Opsets::RegisterCoreMLOpsets(*(_QWORD *)this);
}

void sub_19C488B94(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_19C488F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v12;

  v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x40uLL);
    v8 = (std::string *)(v6 + 32);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      *((_QWORD *)v6 + 6) = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    *((_DWORD *)v6 + 14) = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_19C48906C(_Unwind_Exception *a1)
{
  void **v1;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,_BlobShape>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void sub_19C4892D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CoreML::MultiArrayBuffer::~MultiArrayBuffer(CoreML::MultiArrayBuffer *this)
{
  __CVBuffer *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E3D59518;
  v2 = (__CVBuffer *)*((_QWORD *)this + 12);
  if (v2)
    CVPixelBufferRelease(v2);
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  CoreML::MultiArrayBuffer::~MultiArrayBuffer(this);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_emplace<CoreML::MultiArrayBuffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Archiver::_IDataBlobImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Archiver::_IDataBlobImpl::~_IDataBlobImpl(void **this)
{
  *this = &off_1E3D5B080;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  Archiver::_IDataBlobImpl::~_IDataBlobImpl(this);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<std::ifstream *,std::shared_ptr<std::istream>::__shared_ptr_default_delete<std::istream,std::ifstream>,std::allocator<std::ifstream>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_emplace<Archiver::_IArchiveDiskImpl>::__on_zero_shared(uint64_t a1)
{
  Archiver::_IArchiveImpl::~_IArchiveImpl((void **)(a1 + 24));
}

void Archiver::_IArchiveImpl::~_IArchiveImpl(void **this)
{
  *this = off_1E3D5AFD8;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t std::__shared_ptr_pointer<MIL::IRParameter  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_emplace<CoreML::Specification::ModelDescription>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void CoreML::Specification::ModelDescription::~ModelDescription(CoreML::Specification::ModelDescription *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E3D501B0;
  v2 = *((_QWORD *)this + 17);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 18);
  if ((__int128 *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1A1AD6260](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 19);
  if ((__int128 *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1A1AD6260](v6, 0x1012C40EC159624);
  }
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
  {
    v7 = *((_QWORD *)this + 20);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 14);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 11);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::ModelDescription::~ModelDescription(this);
  JUMPOUT(0x1A1AD6260);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(_QWORD *a1)
{
  unsigned int *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 2;
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
          (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void CoreML::Specification::FeatureDescription::~FeatureDescription(CoreML::Specification::FeatureDescription *this)
{
  CoreML::Specification::FeatureDescription::~FeatureDescription(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E3D51418;
  v2 = *((_QWORD *)this + 2);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((__int128 *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1A1AD6260](v4, 0x1012C40EC159624);
  }
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t std::__shared_ptr_pointer<Archiver::MMappedFile *,std::shared_ptr<Archiver::MMappedFile>::__shared_ptr_default_delete<Archiver::MMappedFile,Archiver::MMappedFile>,std::allocator<Archiver::MMappedFile>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void Archiver::MMappedFile::~MMappedFile(Archiver::MMappedFile *this)
{
  Archiver::MMappedFile::~MMappedFile(this);
  JUMPOUT(0x1A1AD6260);
}

{
  void *v2;
  NSObject *v3;
  _QWORD *v4;
  int v5;
  int v6;
  _QWORD *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E3D5AFA8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2 != (void *)-1 && munmap(v2, *((_QWORD *)this + 5)) == -1)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = (_QWORD *)((char *)this + 8);
      if (*((char *)this + 31) < 0)
        v4 = (_QWORD *)*v4;
      v5 = *__error();
      v6 = 136315394;
      v7 = v4;
      v8 = 1024;
      v9 = v5;
      _os_log_error_impl(&dword_19C486000, v3, OS_LOG_TYPE_ERROR, "File %s: error unmapping memory; msg=%{errno}d",
        (uint8_t *)&v6,
        0x12u);
    }

  }
  *((_QWORD *)this + 4) = -1;
  *((_QWORD *)this + 5) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void sub_19C489E68(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__shared_ptr_emplace<CoreML::Specification::Metadata>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void CoreML::Specification::Metadata::~Metadata(CoreML::Specification::Metadata *this)
{
  CoreML::Specification::Metadata::~Metadata(this);
  JUMPOUT(0x1A1AD6260);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E3D59160;
  v2 = *((_QWORD *)this + 6);
  if ((__int128 *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 7);
  if ((__int128 *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1A1AD6260](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 8);
  if ((__int128 *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1A1AD6260](v6, 0x1012C40EC159624);
  }
  v7 = *((_QWORD *)this + 9);
  if ((__int128 *)v7 != &google::protobuf::internal::fixed_address_empty_string && v7)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x1A1AD6260](v7, 0x1012C40EC159624);
  }
  google::protobuf::Map<std::string,std::string>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *google::protobuf::Map<std::string,std::string>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<std::string,std::string>::clear(a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x1A1AD6260](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = 0;
      do
      {
        v4 = *(_QWORD *)(a1 + 32);
        v5 = *(_QWORD *)(v4 + 8 * v3);
        if (v5)
        {
          if (v5 == *(_QWORD *)(v4 + 8 * (v3 ^ 1)))
          {
            v7 = v3 + 1;
            *(_QWORD *)(v4 + 8 * (v3 + 1)) = 0;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v3) = 0;
            v8 = *(uint64_t **)v5;
            do
            {
              v9 = (void **)v8[4];
              v10 = (uint64_t *)v8[1];
              v11 = v8;
              if (v10)
              {
                do
                {
                  v12 = v10;
                  v10 = (uint64_t *)*v10;
                }
                while (v10);
              }
              else
              {
                do
                {
                  v12 = (uint64_t *)v11[2];
                  v13 = *v12 == (_QWORD)v11;
                  v11 = v12;
                }
                while (!v13);
              }
              std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v5, v8);
              google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(a1, v9);
              v8 = v12;
            }
            while (v12 != (uint64_t *)(v5 + 8));
            google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(*(_QWORD *)(a1 + 40), (_QWORD **)v5);
            goto LABEL_17;
          }
          *(_QWORD *)(v4 + 8 * v3) = 0;
          do
          {
            v6 = *(_QWORD *)(v5 + 32);
            google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(a1, (void **)v5);
            v5 = v6;
          }
          while (v6);
        }
        v7 = v3;
LABEL_17:
        v3 = v7 + 1;
        v2 = *(_QWORD *)(a1 + 8);
      }
      while (v7 + 1 < v2);
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 24) = v2;
    if (!*(_QWORD *)(a1 + 40))
      operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void google::protobuf::Map<std::string,std::string>::clear(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];

  v1 = (_QWORD *)a1[2];
  v2 = v1[3];
  v3 = v1[1];
  if (v3 > v2)
  {
    v5 = v1[4];
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 8 * v2);
      if (v6)
        break;
      if (v3 == ++v2)
        return;
    }
    if (v6 != *(_QWORD *)(v5 + 8 * (v2 ^ 1)) || (v6 = *(_QWORD *)(*(_QWORD *)v6 + 32)) != 0)
    {
      do
      {
        v7[0] = v6;
        v7[1] = v1;
        v7[2] = v2;
        google::protobuf::Map<std::string,std::string>::erase((uint64_t)v8, a1, v7);
        v6 = v8[0];
        v1 = (_QWORD *)v8[1];
        v2 = v8[2];
      }
      while (v8[0]);
    }
  }
}

__n128 google::protobuf::Map<std::string,std::string>::erase(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BOOL4 v8;
  unint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  __n128 result;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;

  if (!*a2)
  {
    v6 = *(_QWORD *)(*a3 + 24);
    if (v6)
    {
      if (*(char *)(v6 + 47) < 0)
        operator delete(*(void **)(v6 + 24));
      if (*(char *)(v6 + 23) < 0)
        operator delete(*(void **)v6);
      MEMORY[0x1A1AD6260](v6, 0x1012C403467C318);
    }
  }
  v18 = *(_OWORD *)a3;
  v19 = a3[2];
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(a3);
  v7 = (_QWORD *)a2[2];
  v20 = 0;
  v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v18, &v20);
  v9 = v19;
  v10 = (void **)v18;
  v11 = v7[4];
  v12 = *(_QWORD *)(v11 + 8 * v19);
  if (v8)
  {
    v13 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v18, *(_QWORD *)(v11 + 8 * v19));
LABEL_14:
    *(_QWORD *)(v7[4] + 8 * v9) = v13;
    goto LABEL_15;
  }
  v14 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v12, *(_QWORD **)(v20 + 32));
  if ((uint64_t *)(v12 + 8) != v14)
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v12, v14);
  if (!*(_QWORD *)(v12 + 24))
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(v7[5], (_QWORD **)v12);
    v13 = 0;
    *(_QWORD *)(v7[4] + ((8 * v9) | 8)) = 0;
    v9 &= ~1uLL;
    goto LABEL_14;
  }
LABEL_15:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v7, v10);
  --*v7;
  if (v9 == v7[3])
  {
    v16 = v7[1];
    if (v9 < v16)
    {
      v17 = v7[4];
      do
      {
        if (*(_QWORD *)(v17 + 8 * v9))
          break;
        v7[3] = ++v9;
      }
      while (v16 != v9);
    }
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  return result;
}

BOOL google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = *(unsigned __int8 **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16) & (*(_QWORD *)(v3 + 8) - 1);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(v3 + 32);
  v7 = *(_QWORD *)(v6 + 8 * v5);
  if ((unsigned __int8 *)v7 == v4)
    return 1;
  if (v7 && v7 != *(_QWORD *)(v6 + 8 * (v5 ^ 1)))
  {
    while (1)
    {
      v7 = *(_QWORD *)(v7 + 32);
      if (!v7)
        break;
      if ((unsigned __int8 *)v7 == v4)
        return 1;
    }
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v13, v3, v4, a2);
  v9 = v14;
  *(_QWORD *)(a1 + 16) = v14;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v11 = *(_QWORD *)(v10 + 8 * v9);
  return !v11 || v11 != *(_QWORD *)(v10 + 8 * (v9 ^ 1));
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 32);
  if (v2 == a1)
    return v3;
  *(_QWORD *)(v2 + 32) = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList();
  return v2;
}

void google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(uint64_t a1, void **__p)
{
  if (*((char *)__p + 23) < 0)
    operator delete(*__p);
  if (!*(_QWORD *)(a1 + 40))
    operator delete(__p);
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::SearchFrom(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *result = 0;
  v2 = result[1];
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 <= a2)
  {
LABEL_6:
    result[2] = a2;
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 32);
    while (1)
    {
      v5 = *(_QWORD *)(v4 + 8 * a2);
      if (v5)
        break;
      if (v3 == ++a2)
      {
        a2 = v3;
        goto LABEL_6;
      }
    }
    v6 = *(_QWORD *)(v4 + 8 * (a2 ^ 1));
    result[2] = a2;
    if (v5 == v6)
      *result = *(_QWORD *)(*(_QWORD *)v5 + 32);
    else
      *result = v5;
  }
  return result;
}

void sub_19C48A78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19C48A8C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_19C48A93C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19C48C110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,void *a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x280]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x298]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x2B0]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x2C8]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x2E0]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x2F8]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x310]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x328]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x340]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x358]);

  if (SLOBYTE(STACK[0x37F]) < 0)
    operator delete((void *)STACK[0x368]);

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

char *IArchive::nestedArchive(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  uint64_t **v9;
  unint64_t *v10;
  unint64_t v11;
  void **v12;
  char *v13;
  uint64_t **v14;
  std::string *v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = a1 + 3;
  v5 = (_QWORD *)a1[3];
  if (!v5)
    goto LABEL_8;
  v6 = a1 + 3;
  do
  {
    v7 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v5 + 4, (_QWORD *)a2);
    v8 = v5 + 1;
    if (!v7)
    {
      v8 = v5;
      v6 = v5;
    }
    v5 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 != v4
    && !google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()((_QWORD *)a2, v6 + 4))
  {
    return (char *)(v6 + 7);
  }
LABEL_8:
  v9 = (uint64_t **)(v4 - 1);
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(&v30, *a1, a2);
  v31 = v30;
  if (*((_QWORD *)&v30 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v33 = 0;
  v34 = 0;
  v32 = &v33;
  v12 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)v9, &v35, (_QWORD *)a2);
  v13 = (char *)*v12;
  if (!*v12)
  {
    v14 = (uint64_t **)v12;
    v13 = (char *)operator new(0x60uLL);
    v15 = (std::string *)(v13 + 32);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((_QWORD *)v13 + 6) = *(_QWORD *)(a2 + 16);
    }
    *((_QWORD *)v13 + 7) = 0;
    *((_QWORD *)v13 + 8) = 0;
    *((_QWORD *)v13 + 11) = 0;
    *((_QWORD *)v13 + 10) = 0;
    *((_QWORD *)v13 + 9) = v13 + 80;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v9, v35, v14, (uint64_t *)v13);
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)v13 + 8);
  *(_OWORD *)(v13 + 56) = v31;
  v16 = v13 + 56;
  v31 = 0uLL;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v13 + 80;
  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(*((char **)v13 + 10));
  v21 = v33;
  *((_QWORD *)v13 + 9) = v32;
  *((_QWORD *)v13 + 10) = v21;
  v22 = v34;
  *((_QWORD *)v13 + 11) = v34;
  if (v22)
  {
    *(_QWORD *)(v21 + 16) = v20;
    v21 = 0;
    v32 = &v33;
    v33 = 0;
    v34 = 0;
  }
  else
  {
    *((_QWORD *)v13 + 9) = v20;
  }
  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy((char *)v21);
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  return v16;
}

void sub_19C48C8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  uint64_t v14;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,IArchive>,void *>>>::operator()[abi:ne180100](0, v14);
  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(a14);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(*((_QWORD *)a1 + 1));
    std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(*((_QWORD *)a1 + 10));
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 56));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t operator>><std::string,float>(uint64_t a1, uint64_t a2)
{
  unint64_t i;
  uint64_t **v5;
  uint64_t **v6;
  char *v7;
  std::string *v8;
  std::string __p;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = 0;
  operator>>(a1);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  if (v12)
  {
    for (i = 0; i < v12; ++i)
    {
      operator>>(a1, &__p);
      operator>>(a1);
      v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_equal<std::string>((_QWORD *)a2, (_QWORD *)(a2 + 8), &v14, &v13, &__p);
      if (!*v5)
      {
        v6 = v5;
        v7 = (char *)operator new(0x40uLL);
        v8 = (std::string *)(v7 + 32);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *((_QWORD *)v7 + 6) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        }
        *((_DWORD *)v7 + 14) = v11;
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a2, v14, v6, (uint64_t *)v7);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_19C48CA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,_BlobShape>,void *>>>::operator()[abi:ne180100](0, v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t operator>><std::string,std::string>(uint64_t a1, uint64_t **a2)
{
  unint64_t i;
  uint64_t **v5;
  uint64_t **v6;
  char *v7;
  char *v8;
  std::string *v9;
  void *v11[2];
  void *__p[4];
  unint64_t v13;
  _QWORD v14[2];
  char v15;
  uint64_t v16;
  uint64_t v17;

  v13 = 0;
  operator>>(a1);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a2[1]);
  *a2 = (uint64_t *)(a2 + 1);
  a2[2] = 0;
  a2[1] = 0;
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)v11 = 0u;
  if (v13)
  {
    for (i = 0; i < v13; ++i)
    {
      operator>>(a1, (std::string *)v11);
      operator>>(a1, (std::string *)&__p[1]);
      v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_equal<std::string>(a2, a2 + 1, &v17, &v16, v11);
      if (!*v5)
      {
        v6 = v5;
        v7 = (char *)operator new(0x50uLL);
        v8 = v7;
        v14[0] = v7;
        v14[1] = a2 + 1;
        v15 = 0;
        if (SHIBYTE(__p[0]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v7 + 32), (const std::string::value_type *)v11[0], (std::string::size_type)v11[1]);
        }
        else
        {
          *((_OWORD *)v7 + 2) = *(_OWORD *)v11;
          *((void **)v7 + 6) = __p[0];
        }
        v9 = (std::string *)(v8 + 56);
        if (SHIBYTE(__p[3]) < 0)
        {
          std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)__p[1], (std::string::size_type)__p[2]);
        }
        else
        {
          *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[1];
          *((void **)v8 + 9) = __p[3];
        }
        v15 = 1;
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a2, v17, v6, (uint64_t *)v8);
        v14[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
      }
    }
    if (SHIBYTE(__p[3]) < 0)
      operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v11[0]);
  return a1;
}

void sub_19C48CD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  void **v17;

  if (*(char *)(v16 + 55) < 0)
    operator delete(*v17);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&a16);
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t operator>>(uint64_t a1, std::string *a2)
{
  operator>>(a1);
  std::string::resize(a2, 0, 0);
  return a1;
}

void sub_19C48CE8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *Archiver::_IDataBlobImpl::asStream(Archiver::_IDataBlobImpl *this)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::ios_base::failure *exception;
  std::error_code __ec;
  std::string __msg;

  result = (_QWORD *)*((_QWORD *)this + 4);
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    std::ifstream::basic_ifstream(v3);
    v4 = (_QWORD *)operator new();
    *v4 = &off_1E3D5C6E8;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v3;
    *(_QWORD *)&v5 = v3;
    *((_QWORD *)&v5 + 1) = v4;
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    *((_OWORD *)this + 2) = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    result = (_QWORD *)*((_QWORD *)this + 4);
    if (*(_DWORD *)((char *)result + *(_QWORD *)(*result - 24) + 32))
    {
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      std::operator+<char>();
      *(_QWORD *)&__ec.__val_ = 1;
      __ec.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, &__msg, &__ec);
      __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
    }
  }
  return result;
}

void sub_19C48CFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t operator>>(uint64_t a1)
{
  _QWORD *v2;
  std::ios_base::failure *exception;
  std::error_code v5;

  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 32) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 32));
  v2 = (_QWORD *)std::istream::read();
  if ((*((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 32) & 5) != 0)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    *(_QWORD *)&v5.__val_ = 1;
    v5.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, "Error reading from archive.", &v5);
    __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  return a1;
}

{
  _QWORD *v2;
  std::ios_base::failure *exception;
  std::error_code v5;

  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 32) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 32));
  v2 = (_QWORD *)std::istream::read();
  if ((*((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 32) & 5) != 0)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    *(_QWORD *)&v5.__val_ = 1;
    v5.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, "Error reading from archive.", &v5);
    __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  return a1;
}

{
  _QWORD *v2;
  std::ios_base::failure *exception;
  std::error_code v5;

  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 32) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 32));
  v2 = (_QWORD *)std::istream::read();
  if ((*((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 32) & 5) != 0)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    *(_QWORD *)&v5.__val_ = 1;
    v5.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, "Error reading from archive.", &v5);
    __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  return a1;
}

{
  _QWORD *v2;
  std::ios_base::failure *exception;
  std::error_code v5;

  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 32) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 32));
  v2 = (_QWORD *)std::istream::read();
  if ((*((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 32) & 5) != 0)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    *(_QWORD *)&v5.__val_ = 1;
    v5.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, "Error reading from archive.", &v5);
    __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  return a1;
}

{
  _QWORD *v2;
  std::ios_base::failure *exception;
  std::error_code v5;

  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 32) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 32));
  v2 = (_QWORD *)std::istream::read();
  if ((*((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 32) & 5) != 0)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    *(_QWORD *)&v5.__val_ = 1;
    v5.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, "Error reading from archive.", &v5);
    __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  return a1;
}

void sub_19C48D10C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

_QWORD *std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_equal<std::string>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v9;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a5, a2 + 4))
  {
    v11 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v13 = a2;
LABEL_17:
      if (v11)
      {
        *a3 = v13;
        return v13 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v11)
    {
      v12 = (_QWORD *)*a2;
      do
      {
        v13 = v12;
        v12 = (_QWORD *)v12[1];
      }
      while (v12);
    }
    else
    {
      v16 = a2;
      do
      {
        v13 = (_QWORD *)v16[2];
        v17 = *v13 == (_QWORD)v16;
        v16 = v13;
      }
      while (v17);
    }
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v13 + 4, a5))
      goto LABEL_17;
    return std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2 + 4, a5))
  {
    v14 = a2[1];
    if (v14)
    {
      v15 = (_QWORD *)a2[1];
      do
      {
        a4 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
    else
    {
      v18 = a2;
      do
      {
        a4 = (_QWORD *)v18[2];
        v17 = *a4 == (_QWORD)v18;
        v18 = a4;
      }
      while (!v17);
    }
    if (a4 == v9 || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a5, a4 + 4))
    {
      if (v14)
      {
        *a3 = a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return a4;
    }
    return std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return a4;
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1A1AD5F3C](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1A1AD5F3C](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_19C48D3B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1A1AD61C4](v1 + 424);
  _Unwind_Resume(a1);
}

void sub_19C48D770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

BOOL Archiver::_IArchiveDiskImpl::isENMLFormat(Archiver::_IArchiveDiskImpl *this)
{
  return *((_DWORD *)this + 12) == 2;
}

uint64_t operator>><std::string>(uint64_t a1, std::vector<std::string> *a2)
{
  operator>>(a1);
  std::vector<std::string>::resize(a2, 0);
  return a1;
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  unint64_t v5;
  unint64_t v6;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *value;
  unint64_t v9;
  std::vector<std::string>::size_type v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  size_t v15;
  std::string *v16;
  size_t v17;
  std::__split_buffer<std::string> __v;

  begin = this->__begin_;
  end = this->__end_;
  v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v6 = __sz - v5;
  if (__sz <= v5)
  {
    if (__sz < v5)
    {
      v16 = &begin[__sz];
      while (end != v16)
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      this->__end_ = v16;
    }
  }
  else
  {
    p_end_cap = &this->__end_cap_;
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v6)
    {
      v17 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(end, v17);
      this->__end_ = (std::vector<std::string>::pointer)((char *)end + v17);
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&this->__end_cap_;
      v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= __sz)
        v10 = __sz;
      if (v9 >= 0x555555555555555)
        v11 = 0xAAAAAAAAAAAAAAALL;
      else
        v11 = v10;
      v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v11);
      v13 = v12 + v5;
      __v.__first_ = v12;
      __v.__begin_ = v13;
      __v.__end_cap_.__value_ = &v12[v14];
      v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v13, v15);
      __v.__end_ = (std::string *)((char *)v13 + v15);
      std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
  }
}

void sub_19C48DB18(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

id CoreML::stringArrayToObjC(uint64_t **a1)
{
  id v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      v5 = v3;
      if (*((char *)v3 + 23) < 0)
        v5 = (uint64_t *)*v3;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v6);

      v3 += 3;
    }
    while (v3 != v4);
  }
  return v2;
}

void sub_19C48DBB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

id neuralNetworkOutputFromArchive(_MLModelInputArchiver *a1)
{
  void *v2;
  void *v3;
  id v4;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)a1 + 56))(*(_QWORD *)a1) != 1)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "CompiledObject");
  (*(void (**)(_QWORD, void **))(**(_QWORD **)a1 + 40))(*(_QWORD *)a1, __p);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7 < 0)
    operator delete(__p[0]);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

void sub_19C48DD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C48DDC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D5B678;
  a2[1] = v2;
  return result;
}

NSArray *MLAllComputeDevices(void)
{
  void *v0;
  void *v1;

  +[MLAllComputeDeviceRegistry sharedRegistry](MLAllComputeDeviceRegistry, "sharedRegistry");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "registeredComputeDevices");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v1;
}

void sub_19C48E1A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C48E5A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C48ED54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v29;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v26 - 104);
  MEMORY[0x1A1AD6260](v25, 0x10A0C4077B4ED97);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  if (a2 == 1)
  {
    v29 = __cxa_begin_catch(a1);
    (*(void (**)(void *))(*(_QWORD *)v29 + 16))(v29);
    +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("%s"));
    objc_claimAutoreleasedReturnValue();

    __cxa_end_catch();
    JUMPOUT(0x19C48ECFCLL);
  }

  _Unwind_Resume(a1);
}

void `anonymous namespace'::indexVectorFromNSArray(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v21 = v3;
  std::vector<unsigned long>::reserve((void **)a1, objc_msgSend(v3, "count"));
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v4 = v21;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v23 != v6)
          objc_enumerationMutation(v4);
        v8 = objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * i), "unsignedLongLongValue");
        v9 = v8;
        v11 = *(uint64_t **)(a1 + 8);
        v10 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v11 >= v10)
        {
          v13 = *(uint64_t **)a1;
          v14 = ((uint64_t)v11 - *(_QWORD *)a1) >> 3;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          v16 = v10 - (_QWORD)v13;
          if (v16 >> 2 > v15)
            v15 = v16 >> 2;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 16, v17);
            v13 = *(uint64_t **)a1;
            v11 = *(uint64_t **)(a1 + 8);
          }
          else
          {
            v18 = 0;
          }
          v19 = (uint64_t *)&v18[8 * v14];
          *v19 = v9;
          v12 = v19 + 1;
          while (v11 != v13)
          {
            v20 = *--v11;
            *--v19 = v20;
          }
          *(_QWORD *)a1 = v19;
          *(_QWORD *)(a1 + 8) = v12;
          *(_QWORD *)(a1 + 16) = &v18[8 * v17];
          if (v13)
            operator delete(v13);
        }
        else
        {
          *v11 = v8;
          v12 = v11 + 1;
        }
        *(_QWORD *)(a1 + 8) = v12;
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v5);
  }

}

void sub_19C48F228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  void *v11;
  void *v13;

  v13 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_19C48F5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  void *v10;

  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t CoreML::MultiArrayBuffer::computeAttributes(uint64_t **a1, uint64_t *a2, uint64_t a3, int a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::runtime_error *exception;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string v19;
  std::string v20;
  std::string v21;

  v4 = (a3 - (uint64_t)a2) >> 3;
  v5 = *a1;
  v6 = a1[1];
  if (v4 != v6 - *a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v19, a1[1] - *a1);
    v15 = std::string::insert(&v19, 0, "strides must be ");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v20, " elements for shape");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v21);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (a4)
    result = 4;
  else
    result = 0;
  if (v6 == v5)
  {
LABEL_9:
    result = result | 1;
  }
  else
  {
    v8 = 1;
    v9 = (a3 - (uint64_t)a2) >> 3;
    while (a2[v9 - 1] == v8)
    {
      v8 *= v5[--v9];
      if (!v9)
        goto LABEL_9;
    }
  }
  if (v6 == v5)
    return result | 2;
  if (v4 <= 1)
    v4 = 1;
  v10 = 1;
  while (1)
  {
    v11 = *a2++;
    if (v11 != v10)
      break;
    v12 = *v5++;
    v10 *= v12;
    if (!--v4)
      return result | 2;
  }
  return result;
}

void sub_19C48F874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void sub_19C48FD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_19C49005C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v20;

  v17 = v16;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  MEMORY[0x1A1AD6260](v17, 0x10A0C4077B4ED97);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a2 == 1)
  {
    v20 = __cxa_begin_catch(a1);
    if (v15)
    {
      (*(void (**)(void *))(*(_QWORD *)v20 + 16))(v20);
      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("%s"));
      *v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    __cxa_end_catch();
    JUMPOUT(0x19C490034);
  }

  _Unwind_Resume(a1);
}

unint64_t CoreML::MultiArrayBuffer::stridesForConiguousArray(unint64_t **a1, unint64_t **a2, int a3)
{
  unint64_t v6;
  unint64_t result;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v6 = a2[1] - *a2;
  v17 = 1;
  result = (unint64_t)std::vector<unsigned long>::vector(a1, v6, &v17);
  if (a3)
  {
    v8 = *a2;
    v9 = a2[1];
    if (*a2 != v9)
    {
      v10 = *a1;
      v11 = 1;
      do
      {
        result = CoreML::SafeMultiplies<unsigned long>::operator()(v11, *v8);
        *v10++ = v11;
        ++v8;
        v11 = result;
      }
      while (v8 != v9);
    }
  }
  else
  {
    v13 = *a2;
    v12 = a2[1];
    if (v12 != *a2)
    {
      v14 = a1[1] - 1;
      v15 = 1;
      do
      {
        v16 = *--v12;
        result = CoreML::SafeMultiplies<unsigned long>::operator()(v15, v16);
        *v14-- = v15;
        v15 = result;
      }
      while (v12 != v13);
    }
  }
  return result;
}

void sub_19C49022C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CoreML::SafeMultiplies<unsigned long>::operator()(unint64_t a1, unint64_t a2)
{
  std::logic_error *exception;

  if (!is_mul_ok(a1, a2))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "integer overflow in multiplication.");
    __cxa_throw(exception, (struct type_info *)off_1E3D427D8, MEMORY[0x1E0DE42E0]);
  }
  return a1 * a2;
}

void sub_19C4902A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_19C49031C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t StorageManager::StorageManager(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  v3 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = objc_claimAutoreleasedReturnValue();
  return a1;
}

void sub_19C4903A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sub_19C490B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::NSArrayFromIndexVector(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", (uint64_t)(a1[1] - *a1) >> 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (_QWORD *)*a1;
  v4 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 != v4)
  {
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v5);

      ++v3;
    }
    while (v3 != v4);
  }
  return v2;
}

void sub_19C490DF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C4910D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(unsigned __int8 **a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *a1;
  v3 = (unsigned __int8 *)*((_QWORD *)*a1 + 4);
  if (v3)
    goto LABEL_2;
  v16 = 0;
  v4 = (uint64_t)a1[1];
  v5 = (unint64_t)a1[2] & (*(_QWORD *)(v4 + 8) - 1);
  a1[2] = (unsigned __int8 *)v5;
  v6 = *(_QWORD *)(v4 + 32);
  v7 = *(_QWORD *)(v6 + 8 * v5);
  if ((unsigned __int8 *)v7 == v2)
    goto LABEL_11;
  if (v7 && v7 != *(_QWORD *)(v6 + 8 * (v5 ^ 1)))
  {
    while (1)
    {
      v7 = *(_QWORD *)(v7 + 32);
      if (!v7)
        break;
      if ((unsigned __int8 *)v7 == v2)
        goto LABEL_11;
    }
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v17, v4, v2, (uint64_t *)&v16);
  v5 = v18;
  a1[2] = (unsigned __int8 *)v18;
  v8 = *((_QWORD *)a1[1] + 4);
  v9 = *(_QWORD *)(v8 + 8 * v5);
  if (!v9 || v9 != *(_QWORD *)(v8 + 8 * (v5 ^ 1)))
  {
LABEL_11:
    v10 = v5 + 1;
LABEL_12:
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::SearchFrom(a1, v10);
    return a1;
  }
  v12 = (uint64_t)v16;
  v13 = (_QWORD *)v16[1];
  if (v13)
  {
    do
    {
      v14 = v13;
      v13 = (_QWORD *)*v13;
    }
    while (v13);
  }
  else
  {
    do
    {
      v14 = *(_QWORD **)(v12 + 16);
      v15 = *v14 == v12;
      v12 = (uint64_t)v14;
    }
    while (!v15);
  }
  v16 = v14;
  if (v14 == (_QWORD *)(v9 + 8))
  {
    v10 = v5 + 2;
    goto LABEL_12;
  }
  v3 = (unsigned __int8 *)v14[4];
LABEL_2:
  *a1 = v3;
  return a1;
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a2[3];
  v3 = a2[1];
  if (v3 <= v2)
  {
    v5 = 0;
  }
  else
  {
    v4 = a2[4];
    while (1)
    {
      v5 = *(_QWORD *)(v4 + 8 * v2);
      if (v5)
        break;
      if (v3 == ++v2)
      {
        v5 = 0;
        v2 = a2[1];
        goto LABEL_9;
      }
    }
    if (v5 == *(_QWORD *)(v4 + 8 * (v2 ^ 1)))
      v5 = *(_QWORD *)(*(_QWORD *)v5 + 32);
  }
LABEL_9:
  *result = v5;
  result[1] = a2;
  result[2] = v2;
  return result;
}

void ___ZN8Archiver14_IDataBlobImpl6asDataEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(std::__shared_weak_count **)(v1 + 56);
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_19C491528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C491E40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t prepareEngine(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a1;
  if (objc_msgSend(v5, "conformsToProtocol:", &unk_1EE4450E0))
  {
    v6 = v5;
    objc_msgSend(v6, "configuration");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "predictionConcurrencyHint");

    if (v8 <= 1)
      v9 = 1;
    else
      v9 = v8;
    if (v9 >= a2)
      v10 = a2;
    else
      v10 = v9;
    v11 = objc_msgSend(v6, "prepareWithConcurrencyHint:error:", v10, a3);

  }
  else
  {
    v11 = 1;
  }

  return v11;
}

void sub_19C491F58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C491FF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C492308(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_19C492430(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C492994(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C492AB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C492BE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C492CC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C492E14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C49306C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19C493144(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C493204(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C493828(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C493F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{

  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19C49431C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C494554(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C494DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (**a11)(_QWORD), uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  if (a31 < 0)
    operator delete(__p);

  a11[2](a11);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,std::string>::at(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 56;
}

void sub_19C495254(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19C4963B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char *a45,uint64_t a46,uint64_t a47,char *a48,uint64_t a49,uint64_t a50,char *a51,uint64_t a52,uint64_t a53,char *a54,uint64_t a55,uint64_t a56,char *a57,uint64_t a58,uint64_t a59,char *a60,uint64_t a61,uint64_t a62,char *a63)
{
  void *__p;

  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a45);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a48);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a51);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a54);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a57);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a60);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a63);

  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,espresso_buffer_t *>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  void **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;

  v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = operator new(0x40uLL);
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 7) = 0;
    v10 = v14;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v10;
    *v7 = v6;
    v11 = **(_QWORD **)a1;
    v12 = (uint64_t *)v6;
    if (v11)
    {
      *(_QWORD *)a1 = v11;
      v12 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v12);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

void std::vector<std::map<std::string,espresso_buffer_t *>>::resize(char ***a1)
{
  char **v2;
  char **v3;
  uint64_t v4;
  unint64_t v5;
  char **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char **v12;
  _QWORD *v13;
  unint64_t v14;
  char *v16;
  char **v17;
  char **v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char **v25;
  char **v26;
  char **v27;
  char **v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;

  v3 = *a1;
  v2 = a1[1];
  v4 = (char *)v2 - (char *)*a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
  if (v5 <= 1)
  {
    v6 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * (v6 - v2) >= 2 - v5)
    {
      v29 = &v2[3 * (2 - v5)];
      v30 = 48 - 8 * (v4 >> 3);
      v31 = v2 + 1;
      do
      {
        *v31 = 0;
        v31[1] = 0;
        *(v31 - 1) = v31;
        v31 += 3;
        v30 -= 24;
      }
      while (v30);
      a1[1] = v29;
      return;
    }
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 - v3);
    v8 = 0x5555555555555556 * (v6 - v3);
    if (v8 <= 2)
      v8 = 2;
    if (v7 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v8;
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = (char *)operator new(24 * v9);
    v11 = &v10[24 * v5];
    v12 = (char **)(v10 + 48);
    v13 = v11 + 8;
    v14 = v5 - 2;
    do
    {
      *v13 = 0;
      v13[1] = 0;
      *(v13 - 1) = v13;
      v13 += 3;
    }
    while (!__CFADD__(v14++, 1));
    v16 = &v10[24 * v9];
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      *a1 = (char **)v11;
      a1[1] = v12;
      a1[2] = (char **)v16;
      if (!v17)
        return;
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = &v11[v19 * 8];
        *((_QWORD *)v20 - 3) = v17[v19 - 3];
        v21 = (char *)&v17[v19 - 2];
        v22 = *(_QWORD *)v21;
        *(_QWORD *)&v11[v19 * 8 - 16] = *(_QWORD *)v21;
        v23 = (uint64_t)&v11[v19 * 8 - 16];
        v24 = v17[v19 - 1];
        *((_QWORD *)v20 - 1) = v24;
        if (v24)
        {
          *(_QWORD *)(v22 + 16) = v23;
          v17[v19 - 3] = v21;
          *(_QWORD *)v21 = 0;
          v17[v19 - 1] = 0;
        }
        else
        {
          *((_QWORD *)v20 - 3) = v23;
        }
        v19 -= 3;
      }
      while (&v17[v19] != v18);
      v25 = *a1;
      v17 = a1[1];
      *a1 = (char **)&v11[v19 * 8];
      a1[1] = v12;
      a1[2] = (char **)v16;
      if (v17 != v25)
      {
        do
        {
          v26 = v17 - 3;
          std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(v17 - 2));
          v17 = v26;
        }
        while (v26 != v25);
        v17 = v25;
      }
      if (!v17)
        return;
    }
    operator delete(v17);
    return;
  }
  if (v4 != 48)
  {
    v27 = v3 + 6;
    if (v2 != v3 + 6)
    {
      do
      {
        v28 = v2 - 3;
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(v2 - 2));
        v2 = v28;
      }
      while (v28 != v27);
    }
    a1[1] = v27;
  }
}

void sub_19C497198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v3 + 4, a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, v5 + 4))
    return v2;
  return v5;
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 9) = 0;
    *((_QWORD *)v6 + 7) = 0;
    v12 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

void sub_19C497444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_19C49752C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void sub_19C4976E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, __int128 a10, char a11, char a12)
{
  void *v12;
  NSObject *v13;
  uint64_t v14;

  if (a2 == 1)
  {
    v12 = __cxa_begin_catch(exception_object);
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 16))(v12);
      LODWORD(__p) = 136315394;
      WORD2(a10) = 2080;
      *(_QWORD *)((char *)&a10 + 6) = v14;
      _os_log_error_impl(&dword_19C486000, v13, OS_LOG_TYPE_ERROR, "Failed to convert string %s to integer with exception message: %s. Fellback to 0.", (uint8_t *)&__p, 0x16u);
    }

    __cxa_end_catch();
    JUMPOUT(0x19C4976B8);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C4981D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C4982D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void _MLModelMetadataSpecification::_MLModelMetadataSpecification(_MLModelMetadataSpecification *this, const CoreML::Specification::Metadata *a2)
{
  _QWORD *v4;

  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E3D5BCA0;
  *(_QWORD *)this = CoreML::Specification::Metadata::Metadata((CoreML::Specification::Metadata *)(v4 + 3), a2);
  *((_QWORD *)this + 1) = v4;
}

void sub_19C498344(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

CoreML::Specification::Metadata *CoreML::Specification::Metadata::Metadata(CoreML::Specification::Metadata *this, const CoreML::Specification::Metadata *a2)
{
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E3D59160;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  v5 = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  google::protobuf::Map<std::string,std::string>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  *((_DWORD *)this + 20) = 0;
  v6 = *((_QWORD *)a2 + 1);
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v6 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom((uint64_t)v5, *((_QWORD **)a2 + 5));
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v7 = *((_QWORD *)a2 + 6);
  if (*(char *)(v7 + 23) < 0)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = *(unsigned __int8 *)(v7 + 23);
  if ((__int128 *)v7 != &google::protobuf::internal::fixed_address_empty_string && v8)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v7);
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  v9 = *((_QWORD *)a2 + 7);
  if (*(char *)(v9 + 23) < 0)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = *(unsigned __int8 *)(v9 + 23);
  if ((__int128 *)v9 != &google::protobuf::internal::fixed_address_empty_string && v10)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, v9);
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  v11 = *((_QWORD *)a2 + 8);
  if (*(char *)(v11 + 23) < 0)
    v12 = *(_QWORD *)(v11 + 8);
  else
    v12 = *(unsigned __int8 *)(v11 + 23);
  if ((__int128 *)v11 != &google::protobuf::internal::fixed_address_empty_string && v12)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, v11);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  v13 = *((_QWORD *)a2 + 9);
  if (*(char *)(v13 + 23) < 0)
    v14 = *(_QWORD *)(v13 + 8);
  else
    v14 = *(unsigned __int8 *)(v13 + 23);
  if ((__int128 *)v13 != &google::protobuf::internal::fixed_address_empty_string && v14)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, v13);
  return this;
}

void sub_19C4984B0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom(uint64_t a1, _QWORD *a2)
{
  void *result;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  const std::string *v7;
  google::protobuf::Arena **v8;
  unsigned __int8 *v9[3];

  result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v9, a2);
  v4 = v9[0];
  if (v9[0])
  {
    v5 = a1 + 8;
    do
    {
      v6 = *((_QWORD *)v4 + 3);
      v7 = (const std::string *)(v6 + 24);
      v8 = google::protobuf::Map<std::string,std::string>::operator[](v5, v6);
      std::string::operator=((std::string *)v8, v7);
      result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v9);
      v4 = v9[0];
    }
    while (v9[0]);
  }
  return result;
}

uint64_t CoreML::Specification::ModelDescription::MergePartialFromCodedStream(CoreML::Specification::ModelDescription *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  std::string **v7;
  char *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int TagFallback;
  unsigned int v17;
  uint64_t v18;
  CoreML::Specification::Metadata *v19;
  char *v20;
  int v21;
  std::string *v23;
  uint64_t result;
  std::string *v25;
  std::string::size_type size;
  std::string *v27;
  int *v28;
  int v29;
  int v30;
  CoreML::Specification::FunctionDescription *Aligned;
  std::string *v32;
  CoreML::Specification::FeatureDescription *v33;
  char *v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  const char *v41;
  int v42;
  unsigned int v43;
  int v44;
  google::protobuf::Arena *v45;
  google::protobuf::Arena **v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int VarintSizeAsIntFallback;
  int v53;
  unsigned int v54;
  int v55;
  char *v56;
  google::protobuf::internal::RepeatedPtrFieldBase *v57;
  char *v58;
  char *v59;

  v5 = (std::string **)((char *)this + 152);
  v57 = (CoreML::Specification::ModelDescription *)((char *)this + 88);
  v58 = (char *)this + 112;
  v59 = (char *)this + 64;
  v6 = (std::string **)((char *)this + 144);
  v7 = (std::string **)((char *)this + 136);
  v8 = (char *)this + 40;
  v56 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      v9 = *(unsigned __int8 **)a2;
      v10 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v10)
      {
        LODWORD(v12) = 0;
      }
      else
      {
        v11 = v9 + 1;
        v12 = *v9;
        if ((char)*v9 >= 1)
        {
          *(_QWORD *)a2 = v11;
          v13 = v12 | 0x100000000;
          if ((v13 & 0x100000000) == 0)
            goto LABEL_9;
          goto LABEL_17;
        }
        if ((unint64_t)v11 < v10)
        {
          v14 = *v11;
          if ((v12 & ~v14) >= 0x80)
          {
            *(_QWORD *)a2 = v9 + 2;
            v13 = (v12 + (v14 << 7) - 128) | 0x100000000;
            goto LABEL_17;
          }
        }
      }
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v12);
      v13 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v13 & 0x100000000) == 0)
        goto LABEL_9;
LABEL_17:
      v17 = v13 >> 3;
      if (v13 >> 3 <= 0x31)
      {
        switch(v17)
        {
          case 0xAu:
            if (v13 != 82)
              goto LABEL_9;
            v18 = (uint64_t)v8;
            goto LABEL_61;
          case 0xBu:
            if (v13 != 90)
              goto LABEL_9;
            v23 = *v7;
            if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            {
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v23 = *v7;
            }
            result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v23);
            if (!(_DWORD)result)
              return result;
            v25 = *v7;
            if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
            {
              v25 = (std::string *)v25->__r_.__value_.__r.__words[0];
              size = (*v7)->__r_.__value_.__l.__size_;
            }
            else
            {
              LODWORD(size) = HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
            }
            v41 = "CoreML.Specification.ModelDescription.predictedFeatureName";
            goto LABEL_75;
          case 0xCu:
            if (v13 != 98)
              goto LABEL_9;
            v27 = *v6;
            if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            {
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v27 = *v6;
            }
            result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v27);
            if (!(_DWORD)result)
              return result;
            v25 = *v6;
            if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
            {
              v25 = (std::string *)v25->__r_.__value_.__r.__words[0];
              size = (*v6)->__r_.__value_.__l.__size_;
            }
            else
            {
              LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
            }
            v41 = "CoreML.Specification.ModelDescription.predictedProbabilitiesName";
            goto LABEL_75;
          case 0xDu:
            if (v13 != 106)
              goto LABEL_9;
            v18 = (uint64_t)v59;
            goto LABEL_61;
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
            goto LABEL_9;
          case 0x14u:
            if (v13 != 162)
              goto LABEL_9;
            v28 = (int *)*((_QWORD *)this + 13);
            if (!v28)
            {
              v29 = *((_DWORD *)this + 24);
              v30 = *((_DWORD *)this + 25);
LABEL_82:
              if (v29 <= v30)
              {
                google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v57, v30 - v29 + 1);
                v28 = (int *)*((_QWORD *)this + 13);
              }
              v30 = *v28;
              goto LABEL_85;
            }
            v29 = *((_DWORD *)this + 24);
            v30 = *v28;
            if (v29 < *v28)
            {
              *((_DWORD *)this + 24) = v29 + 1;
              Aligned = *(CoreML::Specification::FunctionDescription **)&v28[2 * v29 + 2];
              goto LABEL_91;
            }
            if (v30 == *((_DWORD *)this + 25))
              goto LABEL_82;
LABEL_85:
            *v28 = v30 + 1;
            v45 = *(google::protobuf::Arena **)v57;
            if (*(_QWORD *)v57)
            {
              CoreML::Specification::FunctionDescription::FunctionDescription(Aligned);
              v46 = google::protobuf::Arena::AllocateAligned(v45, 0, 24);
              *v46 = Aligned;
              v46[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::FunctionDescription>;
              v47 = (unint64_t *)((char *)v45 + 32);
              do
                v48 = __ldxr(v47);
              while (__stxr((unint64_t)v46, v47));
              v46[2] = (google::protobuf::Arena *)v48;
            }
            else
            {
              Aligned = (CoreML::Specification::FunctionDescription *)operator new();
              CoreML::Specification::FunctionDescription::FunctionDescription(Aligned);
            }
            v49 = *((_QWORD *)this + 13);
            v50 = *((int *)this + 24);
            *((_DWORD *)this + 24) = v50 + 1;
            *(_QWORD *)(v49 + 8 * v50 + 8) = Aligned;
LABEL_91:
            v51 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v51 < 0)
            {
              VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (VarintSizeAsIntFallback < 0)
                return 0;
            }
            else
            {
              VarintSizeAsIntFallback = *v51;
              *(_QWORD *)a2 = v51 + 1;
            }
            v53 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
            v55 = *((_DWORD *)a2 + 13);
            v39 = __OFSUB__(v55--, 1);
            *((_DWORD *)a2 + 13) = v55;
            if (v55 < 0 != v39)
              return 0;
            v40 = v53;
            result = CoreML::Specification::FunctionDescription::MergePartialFromCodedStream(Aligned, a2, v54);
            if (!(_DWORD)result)
              return result;
            break;
          case 0x15u:
            if (v13 != 170)
              goto LABEL_9;
            v32 = *v5;
            if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            {
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v32 = *v5;
            }
            result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v32);
            if (!(_DWORD)result)
              return result;
            v25 = *v5;
            if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
            {
              v25 = (std::string *)v25->__r_.__value_.__r.__words[0];
              size = (*v5)->__r_.__value_.__l.__size_;
            }
            else
            {
              LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
            }
            v41 = "CoreML.Specification.ModelDescription.defaultFunctionName";
LABEL_75:
            if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v25, size, 0, (uint64_t)v41))return 0;
            continue;
          default:
            if (v17 != 1 || v13 != 10)
              goto LABEL_9;
            v18 = (uint64_t)v56;
            goto LABEL_61;
        }
        goto LABEL_97;
      }
      if (v17 == 50)
        break;
      if (v17 != 100 || v13 != 34)
        goto LABEL_9;
      v19 = (CoreML::Specification::Metadata *)*((_QWORD *)this + 20);
      if (!v19)
      {
        v19 = (CoreML::Specification::Metadata *)operator new();
        CoreML::Specification::Metadata::Metadata(v19);
        *((_QWORD *)this + 20) = v19;
      }
      v20 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
      {
        v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v21 < 0)
          return 0;
      }
      else
      {
        v21 = *v20;
        *(_QWORD *)a2 = v20 + 1;
      }
      v42 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
      v44 = *((_DWORD *)a2 + 13);
      v39 = __OFSUB__(v44--, 1);
      *((_DWORD *)a2 + 13) = v44;
      if (v44 < 0 != v39)
        return 0;
      v40 = v42;
      result = CoreML::Specification::Metadata::MergePartialFromCodedStream(v19, a2, v43);
      if (!(_DWORD)result)
        return result;
LABEL_97:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v40))
        return 0;
    }
    if (v13 == 146)
    {
      v18 = (uint64_t)v58;
LABEL_61:
      v33 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v18);
      v34 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v34 < 0)
      {
        v35 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v35 < 0)
          return 0;
      }
      else
      {
        v35 = *v34;
        *(_QWORD *)a2 = v34 + 1;
      }
      v36 = google::protobuf::io::CodedInputStream::PushLimit(a2, v35);
      v38 = *((_DWORD *)a2 + 13);
      v39 = __OFSUB__(v38--, 1);
      *((_DWORD *)a2 + 13) = v38;
      if (v38 < 0 != v39)
        return 0;
      v40 = v36;
      result = CoreML::Specification::FeatureDescription::MergePartialFromCodedStream(v33, a2, v37);
      if (!(_DWORD)result)
        return result;
      goto LABEL_97;
    }
LABEL_9:
    if (!(_DWORD)v13 || (v13 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v13, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C498A94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40FD9EAC30);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::CodedInputStream::PushLimit(google::protobuf::io::CodedInputStream *this, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;

  v2 = *((_DWORD *)this + 6);
  v3 = *((_QWORD *)this + 1);
  v4 = *((unsigned int *)this + 10);
  v5 = *((int *)this + 11);
  v6 = v2 - v5 + *(_DWORD *)this - v3;
  if ((v6 ^ 0x7FFFFFFF) >= a2 && (int)v4 - v6 > a2)
  {
    v8 = v6 + a2;
    *((_DWORD *)this + 10) = v8;
    v9 = v3 + v5;
    *((_QWORD *)this + 1) = v9;
    v10 = *((_DWORD *)this + 12);
    if (v10 >= v8)
      v10 = v8;
    v11 = __OFSUB__(v2, v10);
    v12 = v2 - v10;
    if ((v12 < 0) ^ v11 | (v12 == 0))
      v12 = 0;
    else
      *((_QWORD *)this + 1) = v9 - v12;
    *((_DWORD *)this + 11) = v12;
  }
  return v4;
}

BOOL google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(google::protobuf::io::CodedInputStream *this, int a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;

  v2 = *((unsigned __int8 *)this + 36);
  *((_DWORD *)this + 10) = a2;
  v3 = *((_DWORD *)this + 12);
  v4 = *((_QWORD *)this + 1) + *((int *)this + 11);
  *((_QWORD *)this + 1) = v4;
  if (v3 >= a2)
    v5 = a2;
  else
    v5 = v3;
  v6 = *((_DWORD *)this + 6);
  v7 = __OFSUB__(v6, v5);
  v8 = v6 - v5;
  if ((v8 < 0) ^ v7 | (v8 == 0))
    v8 = 0;
  else
    *((_QWORD *)this + 1) = v4 - v8;
  *((_DWORD *)this + 11) = v8;
  *((_BYTE *)this + 36) = 0;
  ++*((_DWORD *)this + 13);
  return v2 != 0;
}

CoreML::Specification::FeatureDescription *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(uint64_t a1)
{
  int *v2;
  int v3;
  int v4;
  CoreML::Specification::FeatureDescription *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena **v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v3 = *(_DWORD *)(a1 + 8);
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    if (v3 <= v4)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v4 - v3 + 1);
      v2 = *(int **)(a1 + 16);
    }
    v4 = *v2;
    goto LABEL_9;
  }
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *v2;
  if (v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::FeatureDescription **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_9:
  *v2 = v4 + 1;
  v6 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::FeatureDescription::FeatureDescription(Aligned);
    v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
    *v7 = Aligned;
    v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureDescription>;
    v8 = (unint64_t *)((char *)v6 + 32);
    do
      v9 = __ldxr(v8);
    while (__stxr((unint64_t)v7, v8));
    v7[2] = (google::protobuf::Arena *)v9;
  }
  else
  {
    Aligned = (CoreML::Specification::FeatureDescription *)operator new();
    CoreML::Specification::FeatureDescription::FeatureDescription(Aligned);
  }
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = Aligned;
  return Aligned;
}

void sub_19C498CC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

CoreML::Specification::FeatureDescription *CoreML::Specification::FeatureDescription::FeatureDescription(CoreML::Specification::FeatureDescription *this)
{
  *(_QWORD *)this = &off_1E3D51418;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_19C498D48(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unint64_t *CoreML::Specification::protobuf_Model_2eproto::InitDefaults(CoreML::Specification::protobuf_Model_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_Model_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_Model_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Model_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unsigned int *google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(google::protobuf::internal::RepeatedPtrFieldBase *this, int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int *v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *Aligned;
  uint64_t v12;

  v2 = *((_DWORD *)this + 2);
  v3 = *((_DWORD *)this + 3);
  v4 = v2 + a2;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  if (v3 < v2 + a2)
  {
    v7 = *(_QWORD *)this;
    v8 = 2 * v3;
    if (2 * v3 <= v4)
      v8 = v4;
    if (v8 <= 4)
      v9 = 4;
    else
      v9 = v8;
    v10 = 8 * v9;
    if (v7)
      Aligned = (unsigned int *)google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)this, MEMORY[0x1E0DE4EC8], v10 + 8);
    else
      Aligned = (unsigned int *)operator new(v10 + 8);
    *((_QWORD *)this + 2) = Aligned;
    *((_DWORD *)this + 3) = v9;
    if (v5 && (v12 = *v5, (int)v12 >= 1))
    {
      memcpy(Aligned + 2, v5 + 2, 8 * v12);
      Aligned = (unsigned int *)*((_QWORD *)this + 2);
      *Aligned = *v5;
      if (!v7)
        goto LABEL_15;
    }
    else
    {
      *Aligned = 0;
      if (!v7)
      {
LABEL_15:
        operator delete(v5);
        Aligned = (unsigned int *)*((_QWORD *)this + 2);
      }
    }
    v2 = *((_DWORD *)this + 2);
    v5 = Aligned;
  }
  return &v5[2 * v2 + 2];
}

uint64_t CoreML::Specification::Metadata::MergePartialFromCodedStream(CoreML::Specification::Metadata *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  google::protobuf::Arena **v4;
  std::string **v5;
  std::string **v6;
  std::string **v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  std::string *v14;
  std::string *v15;
  std::string::size_type size;
  char *v17;
  int VarintSizeAsIntFallback;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  google::protobuf::Arena **v22;
  int v23;
  int v24;
  BOOL v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  uint64_t v30;
  std::string *v31;
  __int128 v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  __int128 v36;
  int v37;
  __n128 v38;
  uint64_t v39;
  __int128 *v40;
  __n128 v41;
  unsigned int *v42;
  int v43;
  unsigned int *v44;
  std::string::size_type v45;
  const char *v46;
  _BOOL4 v47;
  BOOL v48;
  int v49;
  unsigned int TagFallback;
  std::string *v53;
  int v54;
  _QWORD *v55;
  std::string **v56;
  google::protobuf::Arena **v57;
  _QWORD *v58;
  std::string __p;
  std::string *v60;
  _DWORD *v61;

  v4 = (google::protobuf::Arena **)((char *)this + 16);
  v55 = (_QWORD *)((char *)this + 24);
  v56 = (std::string **)((char *)this + 72);
  v5 = (std::string **)((char *)this + 64);
  v6 = (std::string **)((char *)this + 56);
  v7 = (std::string **)((char *)this + 48);
  while (1)
  {
    while (1)
    {
      v8 = *(unsigned __int8 **)a2;
      v9 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 < v9)
        break;
      LODWORD(v11) = 0;
LABEL_116:
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v11);
      v12 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v12 & 0x100000000) == 0)
        goto LABEL_117;
LABEL_9:
      switch(v12 >> 3)
      {
        case 1u:
          if (v12 != 10)
            goto LABEL_117;
          v14 = *v7;
          if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v14 = *v7;
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v14))
            return 0;
          v15 = *v7;
          if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
          {
            v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
            size = (*v7)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
          }
          v46 = "CoreML.Specification.Metadata.shortDescription";
          goto LABEL_97;
        case 2u:
          if (v12 != 18)
            goto LABEL_117;
          v21 = *v6;
          if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v21 = *v6;
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v21))
            return 0;
          v15 = *v6;
          if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
          {
            v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
            size = (*v6)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
          }
          v46 = "CoreML.Specification.Metadata.versionString";
          goto LABEL_97;
        case 3u:
          if (v12 != 26)
            goto LABEL_117;
          v19 = *v5;
          if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v19 = *v5;
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v19))
            return 0;
          v15 = *v5;
          if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
          {
            v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
            size = (*v5)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
          }
          v46 = "CoreML.Specification.Metadata.author";
          goto LABEL_97;
        case 4u:
          if (v12 != 34)
            goto LABEL_117;
          v20 = *v56;
          if (*v56 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v56, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v20 = *v56;
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v20))
            return 0;
          v15 = *v56;
          if (SHIBYTE((*v56)->__r_.__value_.__r.__words[2]) < 0)
          {
            v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
            size = (*v56)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v56)->__r_.__value_.__r.__words[2]);
          }
          v46 = "CoreML.Specification.Metadata.license";
LABEL_97:
          if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v15, size, 0, (uint64_t)v46))
            return 0;
          continue;
        default:
          if (v12 >> 3 != 100 || v12 != 34)
            goto LABEL_117;
          v57 = v4;
          v58 = v55;
          memset(&__p, 0, sizeof(__p));
          v61 = 0;
          v17 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v17 < 0)
          {
            v22 = v4;
            VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              goto LABEL_111;
          }
          else
          {
            VarintSizeAsIntFallback = *v17;
            *(_QWORD *)a2 = v17 + 1;
          }
          v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
          v24 = *((_DWORD *)a2 + 13);
          v25 = __OFSUB__(v24--, 1);
          *((_DWORD *)a2 + 13) = v24;
          if (v24 < 0 != v25)
          {
            v22 = v4;
            goto LABEL_111;
          }
          v54 = v23;
          v22 = v4;
          v26 = *(_BYTE **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v26 != 10)
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            memset(&__p, 0, sizeof(__p));
LABEL_69:
            v39 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(*v57);
            if (v61 != (_DWORD *)v39)
            {
              if (v61)
                (*(void (**)(void))(*(_QWORD *)v61 + 8))();
              v61 = (_DWORD *)v39;
            }
            v40 = *(__int128 **)(v39 + 16);
            *(_DWORD *)(v39 + 40) |= 1u;
            if (v40 == &google::protobuf::internal::fixed_address_empty_string)
            {
              google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v39 + 16), *(google::protobuf::Arena ***)(v39 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v40 = *(__int128 **)(v39 + 16);
            }
            std::string::operator=((std::string *)v40, &__p);
            v37 = (*(uint64_t (**)(_DWORD *, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v61 + 88))(v61, a2);
            if (v37)
              v41 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::UseKeyAndValueFromEntry((uint64_t)&v57);
            if ((*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v61 + 40))(v61, v41))
              goto LABEL_78;
            goto LABEL_64;
          }
          *(_QWORD *)a2 = v26 + 1;
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, &__p))
            goto LABEL_111;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 1)
            goto LABEL_69;
          if (**(_BYTE **)a2 != 18)
            goto LABEL_69;
          v27 = *(_QWORD *)v58[2];
          v60 = (std::string *)google::protobuf::Map<std::string,std::string>::operator[]((uint64_t)v58, (uint64_t)&__p);
          if (v27 == *(_QWORD *)v58[2])
            goto LABEL_69;
          google::protobuf::io::CodedInputStream::Skip(a2, 1u);
          if ((google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v60) & 1) == 0)
          {
            google::protobuf::Map<std::string,std::string>::erase(v58, (unsigned __int8 *)&__p);
LABEL_111:
            v48 = 0;
            v49 = 6;
            goto LABEL_103;
          }
          if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            *((_BYTE *)a2 + 36) = 1;
            goto LABEL_79;
          }
          v28 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(*v57);
          if (v61 != (_DWORD *)v28)
          {
            if (v61)
              (*(void (**)(void))(*(_QWORD *)v61 + 8))();
            v61 = (_DWORD *)v28;
          }
          v29 = v60;
          v30 = *(_QWORD *)(v28 + 24);
          *(_DWORD *)(v28 + 40) |= 2u;
          if ((__int128 *)v30 == &google::protobuf::internal::fixed_address_empty_string)
          {
            v53 = v29;
            google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)(v28 + 24), *(google::protobuf::Arena ***)(v28 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v30 = *(_QWORD *)(v28 + 24);
            v29 = v53;
          }
          if (*(char *)(v30 + 23) < 0)
          {
            v31 = v29;
            operator delete(*(void **)v30);
            v29 = v31;
          }
          v32 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          *(_QWORD *)(v30 + 16) = *((_QWORD *)&v29->__r_.__value_.__l + 2);
          *(_OWORD *)v30 = v32;
          *((_BYTE *)&v29->__r_.__value_.__s + 23) = 0;
          v29->__r_.__value_.__s.__data_[0] = 0;
          google::protobuf::Map<std::string,std::string>::erase(v58, (unsigned __int8 *)&__p);
          v33 = v61;
          v61[10] |= 1u;
          v35 = (uint64_t *)(v33 + 4);
          v34 = *((_QWORD *)v33 + 2);
          if ((__int128 *)v34 == &google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstance((google::protobuf::Arena **)v33 + 2, *((google::protobuf::Arena ***)v33 + 4), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v34 = *v35;
          }
          if (*(char *)(v34 + 23) < 0)
            operator delete(*(void **)v34);
          v36 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v34 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v34 = v36;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          v37 = (*(uint64_t (**)(_DWORD *, google::protobuf::io::CodedInputStream *))(*(_QWORD *)v61 + 88))(v61, a2);
          if (v37)
            v38 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::UseKeyAndValueFromEntry((uint64_t)&v57);
          if ((*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v61 + 40))(v61, v38))
          {
LABEL_78:
            v61 = 0;
            if ((v37 & 1) == 0)
            {
              v48 = 0;
              v49 = 6;
              goto LABEL_105;
            }
            goto LABEL_79;
          }
LABEL_64:
          if (!v37)
            goto LABEL_111;
LABEL_79:
          if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v54))
            goto LABEL_111;
          v42 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? (unsigned int *)&__p
              : (unsigned int *)__p.__r_.__value_.__r.__words[0];
          v43 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? HIBYTE(__p.__r_.__value_.__r.__words[2])
              : LODWORD(__p.__r_.__value_.__r.__words[1]);
          if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v42, v43, 0, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.key"))goto LABEL_111;
          v44 = (unsigned int *)v60;
          if (SHIBYTE(v60->__r_.__value_.__r.__words[2]) < 0)
          {
            v44 = (unsigned int *)v60->__r_.__value_.__r.__words[0];
            v45 = v60->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(v45) = HIBYTE(v60->__r_.__value_.__r.__words[2]);
          }
          v47 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(v44, v45, 0, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.value");
          v48 = v47;
          if (v47)
            v49 = 0;
          else
            v49 = 6;
LABEL_103:
          if (v61)
            (*(void (**)(_DWORD *))(*(_QWORD *)v61 + 8))(v61);
LABEL_105:
          v4 = v22;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (!v48 && v49)
            return 0;
          break;
      }
    }
    v10 = v8 + 1;
    v11 = *v8;
    if ((char)*v8 < 1)
    {
      if ((unint64_t)v10 < v9)
      {
        v13 = *v10;
        if ((v11 & ~v13) >= 0x80)
        {
          *(_QWORD *)a2 = v8 + 2;
          v12 = (v11 + (v13 << 7) - 128) | 0x100000000;
          goto LABEL_9;
        }
      }
      goto LABEL_116;
    }
    *(_QWORD *)a2 = v10;
    v12 = v11 | 0x100000000;
    if ((v12 & 0x100000000) != 0)
      goto LABEL_9;
LABEL_117:
    if (!(_DWORD)v12 || (v12 & 7) == 4)
      return 1;
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v12, a3))return 0;
  }
}

void sub_19C4995E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  if (a23)
    (*(void (**)(uint64_t))(*(_QWORD *)a23 + 8))(a23);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::FeatureDescription::MergePartialFromCodedStream(CoreML::Specification::FeatureDescription *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int TagFallback;
  unsigned int v11;
  std::string *v13;
  uint64_t result;
  std::string *v15;
  std::string::size_type size;
  CoreML::Specification::FeatureType *v17;
  char *v18;
  int VarintSizeAsIntFallback;
  std::string *v20;
  int v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  int v26;
  const char *v27;

  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v7 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          LODWORD(v8) = 0;
LABEL_7:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
          v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v9 & 0x100000000) == 0)
            goto LABEL_32;
          goto LABEL_8;
        }
        v8 = *v7;
        if (*v7 < 1)
          goto LABEL_7;
        *(_QWORD *)a2 = v7 + 1;
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          goto LABEL_32;
LABEL_8:
        v11 = v9 >> 3;
        if (v9 >> 3 != 3)
          break;
        if (v9 != 26)
          goto LABEL_32;
        v17 = (CoreML::Specification::FeatureType *)*((_QWORD *)this + 4);
        if (!v17)
        {
          v17 = (CoreML::Specification::FeatureType *)operator new();
          CoreML::Specification::FeatureType::FeatureType(v17);
          *((_QWORD *)this + 4) = v17;
        }
        v18 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v18 < 0)
        {
          VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v18;
          *(_QWORD *)a2 = v18 + 1;
        }
        v22 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        v24 = *((_DWORD *)a2 + 13);
        v25 = __OFSUB__(v24--, 1);
        *((_DWORD *)a2 + 13) = v24;
        if (v24 < 0 == v25)
        {
          v26 = v22;
          result = CoreML::Specification::FeatureType::MergePartialFromCodedStream(v17, a2, v23);
          if (!(_DWORD)result)
            return result;
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v26))
            continue;
        }
        return 0;
      }
      if (v11 != 2)
        break;
      if (v9 != 18)
        goto LABEL_32;
      v20 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v20 = *v5;
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v20);
      if (!(_DWORD)result)
        return result;
      v15 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
        size = (*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      v27 = "CoreML.Specification.FeatureDescription.shortDescription";
LABEL_47:
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v15, size, 0, (uint64_t)v27))
        return 0;
    }
    if (v11 == 1 && v9 == 10)
    {
      v13 = *v6;
      if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v13 = *v6;
      }
      result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v13);
      if (!(_DWORD)result)
        return result;
      v15 = *v6;
      if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
      {
        v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
        size = (*v6)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
      }
      v27 = "CoreML.Specification.FeatureDescription.name";
      goto LABEL_47;
    }
LABEL_32:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)
      return 0;
  }
}

void sub_19C49986C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::WireFormatLite::ReadBytes(unsigned __int8 **a1, std::string *this)
{
  unsigned __int8 *v4;
  char *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  BOOL v10;
  const std::string::value_type *v12;
  int64_t v13;
  int v14;
  uint64_t Varint32Fallback;

  v5 = (char *)*a1;
  v4 = a1[1];
  if (*a1 >= v4)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    LODWORD(v6) = *v5;
    if ((*v5 & 0x80000000) == 0)
    {
      v7 = (unsigned __int8 *)(v5 + 1);
      *a1 = v7;
      goto LABEL_4;
    }
  }
  Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback((google::protobuf::io::CodedInputStream *)a1, v6);
  if ((Varint32Fallback & 0x8000000080000000) != 0)
    return 0;
  LODWORD(v6) = Varint32Fallback;
  v7 = *a1;
  v4 = a1[1];
LABEL_4:
  if ((int)v6 <= (int)v4 - (int)v7)
  {
    v6 = v6;
    std::string::resize(this, v6, 0);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this = (std::string *)this->__r_.__value_.__r.__words[0];
    memcpy(this, *a1, v6);
  }
  else
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      if (this->__r_.__value_.__l.__size_)
      {
        *this->__r_.__value_.__l.__data_ = 0;
        this->__r_.__value_.__l.__size_ = 0;
      }
    }
    else if (*((_BYTE *)&this->__r_.__value_.__s + 23))
    {
      this->__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
    }
    v8 = *((_DWORD *)a1 + 12);
    if (v8 >= *((_DWORD *)a1 + 10))
      v8 = *((_DWORD *)a1 + 10);
    if (v8 != 0x7FFFFFFF)
    {
      v9 = v8 - *((_DWORD *)a1 + 6) + *((_DWORD *)a1 + 11) + *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
      v10 = v9 < (int)v6 || (int)v6 < 1;
      if (!v10 && v9 >= 1)
        std::string::reserve(this, v6);
    }
    while (1)
    {
      v12 = (const std::string::value_type *)*a1;
      v13 = a1[1] - *a1;
      v14 = v6 - v13;
      if ((int)v6 <= (int)v13)
        break;
      v6 = (int)v13;
      if ((_DWORD)v13)
      {
        std::string::append(this, v12, (int)v13);
        v12 = (const std::string::value_type *)*a1;
      }
      *a1 = (unsigned __int8 *)&v12[v6];
      LODWORD(v6) = v14;
      if ((google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)a1) & 1) == 0)
        return 0;
    }
    v6 = (int)v6;
    std::string::append(this, v12, (int)v6);
  }
  *a1 += v6;
  return 1;
}

BOOL google::protobuf::internal::WireFormatLite::VerifyUtf8String(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  char v9;
  int64_t v10;
  int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  char *v15;
  unsigned int *v16;
  uint64_t v17;
  char v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  char *v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  const char *v27;
  const std::string::value_type *v28;
  std::string *p_p;
  std::string::size_type size;
  int v32;
  std::string v33;
  std::string v34;
  std::string __p;

  if (!a2)
  {
    v25 = 0;
    goto LABEL_56;
  }
  v6 = (unsigned int *)((char *)a1 + a2);
  v7 = a1;
  v8 = a1 & 7;
  if ((a1 & 7) != 0 && a2 >= 1)
  {
    v9 = (_BYTE)a1 + 1;
    v7 = a1;
    while ((*(char *)v7 & 0x80000000) == 0)
    {
      v7 = (unsigned int *)((char *)v7 + 1);
      v8 = v9 & 7;
      if ((v9 & 7) != 0)
      {
        ++v9;
        if (v7 < v6)
          continue;
      }
      goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    if (!v8 && v7 < (unsigned int *)((char *)v6 - 7))
    {
      do
      {
        if (((v7[1] | *v7) & 0x80808080) != 0)
          break;
        v7 += 2;
      }
      while (v7 < (unsigned int *)((char *)v6 - 7));
    }
  }
  if (v7 < v6)
  {
    v10 = (char *)a1 + a2 - (char *)v7;
    while ((*(char *)v7 & 0x80000000) == 0)
    {
      v7 = (unsigned int *)((char *)v7 + 1);
      if (!--v10)
      {
        LODWORD(v7) = (_DWORD)a1 + a2;
        break;
      }
    }
  }
  v11 = (_DWORD)v7 - (_DWORD)a1;
  if (a2 == (_DWORD)v7 - (_DWORD)a1)
    goto LABEL_55;
  v12 = (unsigned int *)((char *)a1 + v11);
  v13 = (unsigned int *)((char *)v12 + a2 - (uint64_t)v11);
  v14 = (unsigned int *)((char *)v13 - 7);
  v15 = (char *)a1 + a2;
  v16 = v12;
  while (1)
  {
    v17 = v16 & 7;
    if ((v16 & 7) != 0 && v16 < v13)
    {
      v18 = (_BYTE)v16 + 1;
      while (!google::protobuf::internal::utf8acceptnonsurrogates_fast[*(unsigned __int8 *)v16])
      {
        v16 = (unsigned int *)((char *)v16 + 1);
        v17 = v18 & 7;
        if ((v18 & 7) != 0)
        {
          ++v18;
          if (v16 < v13)
            continue;
        }
        goto LABEL_25;
      }
LABEL_33:
      v19 = v16;
      goto LABEL_34;
    }
LABEL_25:
    if (v17 || v16 >= v14)
      goto LABEL_33;
    v19 = v16;
    while (1)
    {
      v20 = v19[1];
      if ((((*v19 - 538976288) | ((_DWORD)v20 - 538976288) | *v19 | v20) & 0x80808080) != 0)
      {
        if (google::protobuf::internal::utf8acceptnonsurrogates_fast[BYTE1(*v19)] | google::protobuf::internal::utf8acceptnonsurrogates_fast[*v19] | google::protobuf::internal::utf8acceptnonsurrogates_fast[BYTE2(*v19)] | google::protobuf::internal::utf8acceptnonsurrogates_fast[(unint64_t)*v19 >> 24])
          goto LABEL_34;
        if (google::protobuf::internal::utf8acceptnonsurrogates_fast[BYTE1(v20)] | google::protobuf::internal::utf8acceptnonsurrogates_fast[v20] | google::protobuf::internal::utf8acceptnonsurrogates_fast[BYTE2(v20)] | google::protobuf::internal::utf8acceptnonsurrogates_fast[v20 >> 24])
          break;
      }
      v19 += 2;
      if (v19 >= v14)
        goto LABEL_34;
    }
    ++v19;
LABEL_34:
    if (v19 >= v13)
      break;
    v21 = v15 - (char *)v19;
    v22 = (unsigned int *)((char *)v19 - 1);
    v23 = (char *)&google::protobuf::internal::utf8acceptnonsurrogates;
    v16 = v19;
    while (1)
    {
      v24 = v23[*(unsigned __int8 *)v16];
      if (v24 > 0xEF)
        break;
      v16 = (unsigned int *)((char *)v16 + 1);
      v23 = (char *)&google::protobuf::internal::utf8acceptnonsurrogates + 256 * v24;
      v22 = (unsigned int *)((char *)v22 + 1);
      if (!--v21)
        goto LABEL_47;
    }
    if (v23 - &google::protobuf::internal::utf8acceptnonsurrogates >= 0x100)
    {
      do
      {
        v16 = v22;
        if (v22 <= v12)
          break;
        v22 = (unsigned int *)((char *)v22 - 1);
      }
      while ((*(_BYTE *)v16 & 0xC0) == 0x80);
    }
    if ((_DWORD)v24 != 253)
    {
      v32 = (_DWORD)v16 - (_DWORD)v12;
      goto LABEL_54;
    }
  }
  LODWORD(v13) = (_DWORD)v19;
  v23 = (char *)&google::protobuf::internal::utf8acceptnonsurrogates;
LABEL_47:
  if (v23 - &google::protobuf::internal::utf8acceptnonsurrogates >= 0x100)
  {
    if (v19 > v6)
      v6 = v19;
    v26 = (unsigned int *)((char *)v6 - 1);
    do
    {
      v13 = v26;
      if (v26 <= v12)
        break;
      v26 = (unsigned int *)((char *)v26 - 1);
    }
    while ((*(_BYTE *)v13 & 0xC0) == 0x80);
  }
  v32 = (_DWORD)v13 - (_DWORD)v12;
LABEL_54:
  LODWORD(v7) = (_DWORD)v7 + v32;
LABEL_55:
  v25 = (_DWORD)v7 - (_DWORD)a1;
LABEL_56:
  if (v25 != a2)
  {
    v27 = "serializing";
    if (a3 != 1)
      v27 = 0;
    if (a3)
      v28 = v27;
    else
      v28 = "parsing";
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_19CB39696);
    if (a4)
    {
      google::protobuf::StringPrintf(&v33, a4);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v33;
    }
    LODWORD(v33.__r_.__value_.__l.__data_) = 2;
    v33.__r_.__value_.__l.__size_ = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-int"
                                                            "ernal/deps/protobuf/src/google/protobuf/wire_format_lite.cc";
    LODWORD(v33.__r_.__value_.__r.__words[2]) = 629;
    memset(&v34, 0, sizeof(v34));
    std::string::append(&v34, "String field");
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::string::append(&v34, (const std::string::value_type *)p_p, size);
    std::string::append(&v34, " contains invalid ");
    std::string::append(&v34, "UTF-8 data when ");
    std::string::append(&v34, v28);
    std::string::append(&v34, " a protocol ");
    std::string::append(&v34, "buffer. Use the 'bytes' type if you intend to send raw ");
    std::string::append(&v34, "bytes. ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v33);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v25 == a2;
}

void sub_19C499E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(std::string **a1, uint64_t a2)
{
  std::string *v4;
  std::string *v5;

  v4 = (std::string *)operator new();
  v5 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *a1 = v5;
}

void sub_19C499F00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

CoreML::Specification::FeatureType *CoreML::Specification::FeatureType::FeatureType(CoreML::Specification::FeatureType *this)
{
  *(_QWORD *)this = &off_1E3D4D068;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_)
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_19C499F74(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FeatureType::MergePartialFromCodedStream(CoreML::Specification::FeatureType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  CoreML::Specification::Int64FeatureType *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  char *v14;
  unint64_t Varint64Fallback;
  CoreML::Specification::DoubleFeatureType *v16;
  char *v17;
  int v18;
  CoreML::Specification::StringFeatureType *v19;
  char *v20;
  int v21;
  CoreML::Specification::ImageFeatureType *v22;
  CoreML::Specification::ArrayFeatureType *v23;
  CoreML::Specification::DictionaryFeatureType *v24;
  CoreML::Specification::SequenceFeatureType *v25;
  CoreML::Specification::StateFeatureType *v26;
  char *v27;
  int v28;
  char *v29;
  int v30;
  char *v31;
  int v32;
  char *v33;
  int v34;
  char *v35;
  int v36;
  char v37;
  CoreML::Specification::Int64FeatureType *v38;
  unsigned int v39;
  int v40;
  BOOL v41;
  int v42;
  uint64_t result;
  CoreML::Specification::DoubleFeatureType *v44;
  unsigned int v45;
  int v46;
  CoreML::Specification::StringFeatureType *v47;
  unsigned int v48;
  int v49;
  google::protobuf::io::CodedInputStream *v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int TagFallback;
  BOOL v69;

  while (1)
  {
LABEL_1:
    v5 = *(unsigned __int8 **)a2;
    v6 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 >= v6)
    {
      LODWORD(v8) = 0;
      goto LABEL_104;
    }
    v7 = v5 + 1;
    v8 = *v5;
    if ((char)*v5 >= 1)
    {
      *(_QWORD *)a2 = v7;
      v9 = v8 | 0x100000000;
      if ((v9 & 0x100000000) != 0)
        goto LABEL_8;
      goto LABEL_105;
    }
    if ((unint64_t)v7 < v6)
    {
      v10 = *v7;
      if ((v8 & ~v10) >= 0x80)
        break;
    }
LABEL_104:
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
    v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v9 & 0x100000000) != 0)
      goto LABEL_8;
LABEL_105:
    if ((_DWORD)v9)
      v69 = (v9 & 7) == 4;
    else
      v69 = 1;
    if (v69)
      return 1;
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)
      return 0;
  }
  *(_QWORD *)a2 = v5 + 2;
  v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
LABEL_8:
  switch(v9 >> 3)
  {
    case 1u:
      if (v9 != 10)
        goto LABEL_105;
      if (*((_DWORD *)this + 9) != 1)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
        v11 = (CoreML::Specification::Int64FeatureType *)operator new();
        CoreML::Specification::Int64FeatureType::Int64FeatureType(v11);
        *((_QWORD *)this + 3) = v11;
      }
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v38 = (CoreML::Specification::Int64FeatureType *)google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      v40 = *((_DWORD *)a2 + 13);
      v41 = __OFSUB__(v40--, 1);
      *((_DWORD *)a2 + 13) = v40;
      if (v40 < 0 != v41)
        return 0;
      v42 = (int)v38;
      result = CoreML::Specification::Int64FeatureType::MergePartialFromCodedStream(v38, (char **)a2, v39);
      if ((_DWORD)result)
        goto LABEL_80;
      break;
    case 2u:
      if (v9 != 18)
        goto LABEL_105;
      if (*((_DWORD *)this + 9) != 2)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 2;
        v16 = (CoreML::Specification::DoubleFeatureType *)operator new();
        CoreML::Specification::DoubleFeatureType::DoubleFeatureType(v16);
        *((_QWORD *)this + 3) = v16;
      }
      v17 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v17 < 0)
      {
        v18 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v18 < 0)
          return 0;
      }
      else
      {
        v18 = *v17;
        *(_QWORD *)a2 = v17 + 1;
      }
      v44 = (CoreML::Specification::DoubleFeatureType *)google::protobuf::io::CodedInputStream::PushLimit(a2, v18);
      v46 = *((_DWORD *)a2 + 13);
      v41 = __OFSUB__(v46--, 1);
      *((_DWORD *)a2 + 13) = v46;
      if (v46 < 0 != v41)
        return 0;
      v42 = (int)v44;
      result = CoreML::Specification::DoubleFeatureType::MergePartialFromCodedStream(v44, (char **)a2, v45);
      if ((_DWORD)result)
        goto LABEL_80;
      break;
    case 3u:
      if (v9 != 26)
        goto LABEL_105;
      if (*((_DWORD *)this + 9) != 3)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 3;
        v19 = (CoreML::Specification::StringFeatureType *)operator new();
        CoreML::Specification::StringFeatureType::StringFeatureType(v19);
        *((_QWORD *)this + 3) = v19;
      }
      v20 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
      {
        v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v21 < 0)
          return 0;
      }
      else
      {
        v21 = *v20;
        *(_QWORD *)a2 = v20 + 1;
      }
      v47 = (CoreML::Specification::StringFeatureType *)google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
      v49 = *((_DWORD *)a2 + 13);
      v41 = __OFSUB__(v49--, 1);
      *((_DWORD *)a2 + 13) = v49;
      if (v49 < 0 != v41)
        return 0;
      v42 = (int)v47;
      result = CoreML::Specification::StringFeatureType::MergePartialFromCodedStream(v47, (char **)a2, v48);
      if ((_DWORD)result)
      {
LABEL_80:
        v50 = a2;
        v51 = v42;
        goto LABEL_101;
      }
      break;
    case 4u:
      if (v9 != 34)
        goto LABEL_105;
      if (*((_DWORD *)this + 9) == 4)
      {
        v22 = (CoreML::Specification::ImageFeatureType *)*((_QWORD *)this + 3);
      }
      else
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 4;
        v22 = (CoreML::Specification::ImageFeatureType *)operator new();
        CoreML::Specification::ImageFeatureType::ImageFeatureType(v22);
        *((_QWORD *)this + 3) = v22;
      }
      v27 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v27 < 0)
      {
        v28 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v28 < 0)
          return 0;
      }
      else
      {
        v28 = *v27;
        *(_QWORD *)a2 = v27 + 1;
      }
      v52 = google::protobuf::io::CodedInputStream::PushLimit(a2, v28);
      v54 = *((_DWORD *)a2 + 13);
      v41 = __OFSUB__(v54--, 1);
      *((_DWORD *)a2 + 13) = v54;
      if (v54 < 0 != v41)
        return 0;
      v55 = v52;
      result = CoreML::Specification::ImageFeatureType::MergePartialFromCodedStream(v22, a2, v53);
      if ((_DWORD)result)
        goto LABEL_100;
      break;
    case 5u:
      if (v9 != 42)
        goto LABEL_105;
      if (*((_DWORD *)this + 9) == 5)
      {
        v23 = (CoreML::Specification::ArrayFeatureType *)*((_QWORD *)this + 3);
      }
      else
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 5;
        v23 = (CoreML::Specification::ArrayFeatureType *)operator new();
        CoreML::Specification::ArrayFeatureType::ArrayFeatureType(v23);
        *((_QWORD *)this + 3) = v23;
      }
      v29 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v29 < 0)
      {
        v30 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v30 < 0)
          return 0;
      }
      else
      {
        v30 = *v29;
        *(_QWORD *)a2 = v29 + 1;
      }
      v56 = google::protobuf::io::CodedInputStream::PushLimit(a2, v30);
      v58 = *((_DWORD *)a2 + 13);
      v41 = __OFSUB__(v58--, 1);
      *((_DWORD *)a2 + 13) = v58;
      if (v58 < 0 != v41)
        return 0;
      v55 = v56;
      result = CoreML::Specification::ArrayFeatureType::MergePartialFromCodedStream(v23, a2, v57);
      if ((_DWORD)result)
        goto LABEL_100;
      break;
    case 6u:
      if (v9 != 50)
        goto LABEL_105;
      if (*((_DWORD *)this + 9) == 6)
      {
        v24 = (CoreML::Specification::DictionaryFeatureType *)*((_QWORD *)this + 3);
      }
      else
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 6;
        v24 = (CoreML::Specification::DictionaryFeatureType *)operator new();
        CoreML::Specification::DictionaryFeatureType::DictionaryFeatureType(v24);
        *((_QWORD *)this + 3) = v24;
      }
      v31 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v31 < 0)
      {
        v32 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v32 < 0)
          return 0;
      }
      else
      {
        v32 = *v31;
        *(_QWORD *)a2 = v31 + 1;
      }
      v59 = google::protobuf::io::CodedInputStream::PushLimit(a2, v32);
      v61 = *((_DWORD *)a2 + 13);
      v41 = __OFSUB__(v61--, 1);
      *((_DWORD *)a2 + 13) = v61;
      if (v61 < 0 != v41)
        return 0;
      v55 = v59;
      result = CoreML::Specification::DictionaryFeatureType::MergePartialFromCodedStream(v24, a2, v60);
      if ((_DWORD)result)
        goto LABEL_100;
      break;
    case 7u:
      if (v9 != 58)
        goto LABEL_105;
      if (*((_DWORD *)this + 9) == 7)
      {
        v25 = (CoreML::Specification::SequenceFeatureType *)*((_QWORD *)this + 3);
      }
      else
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 7;
        v25 = (CoreML::Specification::SequenceFeatureType *)operator new();
        CoreML::Specification::SequenceFeatureType::SequenceFeatureType(v25);
        *((_QWORD *)this + 3) = v25;
      }
      v33 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v33 < 0)
      {
        v34 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v34 < 0)
          return 0;
      }
      else
      {
        v34 = *v33;
        *(_QWORD *)a2 = v33 + 1;
      }
      v62 = google::protobuf::io::CodedInputStream::PushLimit(a2, v34);
      v64 = *((_DWORD *)a2 + 13);
      v41 = __OFSUB__(v64--, 1);
      *((_DWORD *)a2 + 13) = v64;
      if (v64 < 0 != v41)
        return 0;
      v55 = v62;
      result = CoreML::Specification::SequenceFeatureType::MergePartialFromCodedStream(v25, a2, v63);
      if ((_DWORD)result)
        goto LABEL_100;
      break;
    case 8u:
      if (v9 != 66)
        goto LABEL_105;
      if (*((_DWORD *)this + 9) == 8)
      {
        v26 = (CoreML::Specification::StateFeatureType *)*((_QWORD *)this + 3);
      }
      else
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 8;
        v26 = (CoreML::Specification::StateFeatureType *)operator new();
        CoreML::Specification::StateFeatureType::StateFeatureType(v26);
        *((_QWORD *)this + 3) = v26;
      }
      v35 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v35 < 0)
      {
        v36 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v36 < 0)
          return 0;
      }
      else
      {
        v36 = *v35;
        *(_QWORD *)a2 = v35 + 1;
      }
      v65 = google::protobuf::io::CodedInputStream::PushLimit(a2, v36);
      v67 = *((_DWORD *)a2 + 13);
      v41 = __OFSUB__(v67--, 1);
      *((_DWORD *)a2 + 13) = v67;
      if (v67 < 0 != v41)
        return 0;
      v55 = v65;
      result = CoreML::Specification::StateFeatureType::MergePartialFromCodedStream(v26, a2, v66);
      if ((_DWORD)result)
      {
LABEL_100:
        v50 = a2;
        v51 = v55;
LABEL_101:
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v50, v51))
          goto LABEL_1;
        return 0;
      }
      break;
    default:
      if (v9 >> 3 != 1000 || v9 != 64)
        goto LABEL_105;
      v14 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
      {
        Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
        if ((v37 & 1) == 0)
          return 0;
      }
      else
      {
        Varint64Fallback = *v14;
        *(_QWORD *)a2 = v14 + 1;
      }
      *((_BYTE *)this + 16) = Varint64Fallback != 0;
      goto LABEL_1;
  }
  return result;
}

void sub_19C49A6A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FeatureType::clear_Type(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 36))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      this = *(_QWORD *)(this + 24);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

void CoreML::Specification::ArrayFeatureType::~ArrayFeatureType(CoreML::Specification::ArrayFeatureType *this)
{
  CoreML::Specification::ArrayFeatureType::~ArrayFeatureType(this);
  JUMPOUT(0x1A1AD6260);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E3D4FBC0;
  if (*((_DWORD *)this + 15))
    CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility((uint64_t)this);
  if (*((_DWORD *)this + 16))
    *((_DWORD *)this + 16) = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

CoreML::Specification::ArrayFeatureType *CoreML::Specification::ArrayFeatureType::ArrayFeatureType(CoreML::Specification::ArrayFeatureType *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D4FBC0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::ArrayFeatureType *)&CoreML::Specification::_ArrayFeatureType_default_instance_)
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 7) = 0;
  return this;
}

void sub_19C49A878(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unint64_t *CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(CoreML::Specification::protobuf_FeatureTypes_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_FeatureTypes_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

uint64_t CoreML::Specification::ArrayFeatureType::MergePartialFromCodedStream(CoreML::Specification::ArrayFeatureType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  unsigned int TagFallback;
  unsigned int v14;
  char *v15;
  int v16;
  CoreML::Specification::ArrayFeatureType_EnumeratedShapes *v17;
  unint64_t *v18;
  unint64_t v19;
  CoreML::Specification::ArrayFeatureType_ShapeRange *v20;
  char *v21;
  int VarintSizeAsIntFallback;
  char *v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  char *v27;
  int v28;
  char *v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  int v35;
  uint64_t result;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  char *v45;
  unint64_t v46;
  unint64_t Varint64Fallback;
  char v48;
  signed int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t Varint32Fallback;
  unsigned int v56;
  unint64_t v57;

  v5 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *(unsigned __int8 **)a2;
        v7 = *((_QWORD *)a2 + 1);
        if (*(_QWORD *)a2 >= v7)
        {
          LODWORD(v9) = 0;
LABEL_16:
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
          v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
          if ((v10 & 0x100000000) == 0)
            goto LABEL_9;
          goto LABEL_17;
        }
        v8 = v6 + 1;
        v9 = *v6;
        if ((char)*v6 < 1)
        {
          if ((unint64_t)v8 < v7)
          {
            v11 = *v8;
            if ((v9 & ~v11) >= 0x80)
            {
              *(_QWORD *)a2 = v6 + 2;
              v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
              goto LABEL_17;
            }
          }
          goto LABEL_16;
        }
        *(_QWORD *)a2 = v8;
        v10 = v9 | 0x100000000;
        if ((v10 & 0x100000000) == 0)
          goto LABEL_9;
LABEL_17:
        v14 = v10 >> 3;
        if (v10 >> 3 > 0x1E)
          break;
        if (v14 == 1)
        {
          if (v10 == 8)
          {
            if ((google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(google::protobuf::internal::WireFormatLite::FieldType)3>(10, a2, (uint64_t)v5) & 1) == 0)return 0;
          }
          else
          {
            if (v10 != 10)
              goto LABEL_9;
            v21 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
            {
              VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (VarintSizeAsIntFallback < 0)
                return 0;
            }
            else
            {
              VarintSizeAsIntFallback = *v21;
              *(_QWORD *)a2 = v21 + 1;
            }
            v40 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
            while (1)
            {
              v41 = *((_DWORD *)a2 + 10);
              v42 = *((int *)a2 + 11);
              v43 = *((_QWORD *)a2 + 1);
              v44 = *((_DWORD *)a2 + 6);
              if (v41 == 0x7FFFFFFF)
                break;
              v45 = *(char **)a2;
              if ((int)(v41 - v44 + v42 + v43 - *(_QWORD *)a2) < 1)
                break;
              if ((unint64_t)v45 >= v43 || *v45 < 0)
              {
                Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
                if ((v48 & 1) == 0)
                  return 0;
                v46 = Varint64Fallback;
              }
              else
              {
                v46 = *v45;
                *(_QWORD *)a2 = v45 + 1;
              }
              v49 = *((_DWORD *)this + 4);
              if (v49 == *((_DWORD *)this + 5))
              {
                google::protobuf::RepeatedField<double>::Reserve(v5, v49 + 1);
                v49 = *v5;
              }
              v50 = *((_QWORD *)this + 3);
              *((_DWORD *)this + 4) = v49 + 1;
              *(_QWORD *)(v50 + 8 * v49 + 8) = v46;
            }
            *((_DWORD *)a2 + 10) = v40;
            v51 = v43 + v42;
            *((_QWORD *)a2 + 1) = v43 + v42;
            v52 = *((_DWORD *)a2 + 12);
            if (v52 >= v40)
              v52 = v40;
            v34 = __OFSUB__(v44, v52);
            v53 = v44 - v52;
            if ((v53 < 0) ^ v34 | (v53 == 0))
              v53 = 0;
            else
              *((_QWORD *)a2 + 1) = v51 - v53;
            *((_DWORD *)a2 + 11) = v53;
            *((_BYTE *)a2 + 36) = 0;
          }
        }
        else if (v14 == 2)
        {
          if (v10 != 16)
            goto LABEL_9;
          v23 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
          {
            v24 = 0;
          }
          else
          {
            v24 = *v23;
            if ((*v23 & 0x80000000) == 0)
            {
              *(_QWORD *)a2 = v23 + 1;
              goto LABEL_97;
            }
          }
          Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v24);
          v24 = Varint32Fallback;
          if (Varint32Fallback < 0)
            return 0;
LABEL_97:
          *((_DWORD *)this + 9) = v24;
        }
        else if (v14 == 21 && v10 == 170)
        {
          if (*((_DWORD *)this + 15) == 21)
          {
            v17 = (CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)*((_QWORD *)this + 5);
          }
          else
          {
            CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility((uint64_t)this);
            *((_DWORD *)this + 15) = 21;
            v17 = (CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)operator new();
            CoreML::Specification::ArrayFeatureType_EnumeratedShapes::ArrayFeatureType_EnumeratedShapes(v17);
            *((_QWORD *)this + 5) = v17;
          }
          v27 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v27 < 0)
          {
            v28 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v28 < 0)
              return 0;
          }
          else
          {
            v28 = *v27;
            *(_QWORD *)a2 = v27 + 1;
          }
          v31 = google::protobuf::io::CodedInputStream::PushLimit(a2, v28);
          v33 = *((_DWORD *)a2 + 13);
          v34 = __OFSUB__(v33--, 1);
          *((_DWORD *)a2 + 13) = v33;
          if (v33 < 0 != v34)
            return 0;
          v35 = v31;
          result = CoreML::Specification::ArrayFeatureType_EnumeratedShapes::MergePartialFromCodedStream(v17, a2, v32);
          if (!(_DWORD)result)
            return result;
LABEL_70:
          if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v35))
            return 0;
        }
        else
        {
LABEL_9:
          if ((_DWORD)v10)
            v12 = (v10 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3) & 1) == 0)return 0;
        }
      }
      if (v10 >> 3 <= 0x32)
        break;
      if (v14 == 51)
      {
        if (v10 != 157)
          goto LABEL_9;
        *((_DWORD *)this + 16) = 0;
        v56 = 0;
        v25 = *(unsigned int **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 4)
        {
          result = google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v56);
          if (!(_DWORD)result)
            return result;
          v26 = v56;
        }
        else
        {
          v26 = *v25;
          *(_QWORD *)a2 = v25 + 1;
        }
        *((_DWORD *)this + 12) = v26;
        *((_DWORD *)this + 16) = 51;
      }
      else
      {
        if (v14 != 61 || v10 != 233)
          goto LABEL_9;
        *((_DWORD *)this + 16) = 0;
        v57 = 0;
        v18 = *(unint64_t **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
        {
          result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v57);
          if (!(_DWORD)result)
            return result;
          v19 = v57;
        }
        else
        {
          v19 = *v18;
          *(_QWORD *)a2 = v18 + 1;
        }
        *((_QWORD *)this + 6) = v19;
        *((_DWORD *)this + 16) = 61;
      }
    }
    if (v14 == 31)
      break;
    if (v14 != 41 || v10 != 72)
      goto LABEL_9;
    *((_DWORD *)this + 16) = 0;
    v15 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
    {
      v16 = 0;
    }
    else
    {
      v16 = *v15;
      if ((*v15 & 0x80000000) == 0)
      {
        *(_QWORD *)a2 = v15 + 1;
        goto LABEL_92;
      }
    }
    v54 = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v16);
    v16 = v54;
    if (v54 < 0)
      return 0;
LABEL_92:
    *((_DWORD *)this + 12) = v16;
    *((_DWORD *)this + 16) = 41;
  }
  if (v10 != 250)
    goto LABEL_9;
  if (*((_DWORD *)this + 15) == 31)
  {
    v20 = (CoreML::Specification::ArrayFeatureType_ShapeRange *)*((_QWORD *)this + 5);
  }
  else
  {
    CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility((uint64_t)this);
    *((_DWORD *)this + 15) = 31;
    v20 = (CoreML::Specification::ArrayFeatureType_ShapeRange *)operator new();
    CoreML::Specification::ArrayFeatureType_ShapeRange::ArrayFeatureType_ShapeRange(v20);
    *((_QWORD *)this + 5) = v20;
  }
  v29 = *(char **)a2;
  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v29 < 0)
  {
    v30 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
    if (v30 < 0)
      return 0;
  }
  else
  {
    v30 = *v29;
    *(_QWORD *)a2 = v29 + 1;
  }
  v37 = google::protobuf::io::CodedInputStream::PushLimit(a2, v30);
  v39 = *((_DWORD *)a2 + 13);
  v34 = __OFSUB__(v39--, 1);
  *((_DWORD *)a2 + 13) = v39;
  if (v39 < 0 == v34)
  {
    v35 = v37;
    result = CoreML::Specification::ArrayFeatureType_ShapeRange::MergePartialFromCodedStream(v20, a2, v38);
    if (!(_DWORD)result)
      return result;
    goto LABEL_70;
  }
  return 0;
}

void sub_19C49AE58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

unint64_t google::protobuf::io::CodedInputStream::ReadTagFallback(google::protobuf::io::CodedInputStream *this, int a2)
{
  unsigned __int8 *v3;
  char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;

  v3 = *(unsigned __int8 **)this;
  v4 = (char *)*((_QWORD *)this + 1);
  v5 = (_DWORD)v4 - *(_QWORD *)this;
  if (v5 <= 9)
  {
    if (v5 < 1)
    {
      if (!v5)
      {
        v10 = *((_DWORD *)this + 11);
        v11 = *((_DWORD *)this + 6);
        if ((v10 > 0 || v11 == *((_DWORD *)this + 10)) && v11 - v10 < *((_DWORD *)this + 12))
          goto LABEL_27;
      }
    }
    else if ((*(v4 - 1) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    if (v3 != (unsigned __int8 *)v4)
      goto LABEL_12;
    if (google::protobuf::io::CodedInputStream::Refresh(this))
    {
      v3 = *(unsigned __int8 **)this;
      v4 = (char *)*((_QWORD *)this + 1);
LABEL_12:
      if (v3 >= (unsigned __int8 *)v4 || (char)*v3 < 0)
      {
        result = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
        if ((v9 & 1) == 0)
          return 0;
        return result;
      }
      result = *v3;
LABEL_15:
      *(_QWORD *)this = v3 + 1;
      return result;
    }
    v12 = *((_DWORD *)this + 12);
    if (*((_DWORD *)this + 6) - *((_DWORD *)this + 11) >= v12)
    {
      result = 0;
      v13 = *((_DWORD *)this + 10) == v12;
      goto LABEL_29;
    }
LABEL_27:
    result = 0;
    v13 = 1;
LABEL_29:
    *((_BYTE *)this + 36) = v13;
    return result;
  }
LABEL_4:
  if (!a2)
  {
    result = 0;
    goto LABEL_15;
  }
  v6 = a2 + (v3[1] << 7) - 128;
  if ((char)v3[1] < 0)
  {
    v6 = v6 + (v3[2] << 14) - 0x4000;
    if ((char)v3[2] < 0)
    {
      v6 = v6 + (v3[3] << 21) - 0x200000;
      if ((char)v3[3] < 0)
      {
        v14 = (char)v3[4];
        v6 = (v6 + (v14 << 28) - 0x10000000);
        if (v14 < 0)
        {
          v15 = 0;
          while ((char)v3[v15 + 5] < 0)
          {
            result = 0;
            if ((_DWORD)++v15 == 5)
              return result;
          }
          v7 = (uint64_t)&v3[v15 + 6];
        }
        else
        {
          v7 = (uint64_t)(v3 + 5);
        }
      }
      else
      {
        v7 = (uint64_t)(v3 + 4);
      }
    }
    else
    {
      v7 = (uint64_t)(v3 + 3);
    }
  }
  else
  {
    v7 = (uint64_t)(v3 + 2);
  }
  *(_QWORD *)this = v7;
  return v6;
}

uint64_t google::protobuf::io::CodedInputStream::ReadVarint32Fallback(google::protobuf::io::CodedInputStream *this, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t Varint64Fallback;
  char v7;
  int v8;
  uint64_t v9;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if ((int)(v2 - *(_QWORD *)this) <= 9 && (v2 <= v3 || *(char *)(v2 - 1) < 0))
  {
    Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
    if ((v7 & 1) == 0)
      return -1;
  }
  else
  {
    v4 = a2 + (*(unsigned __int8 *)(v3 + 1) << 7) - 128;
    if (*(char *)(v3 + 1) < 0)
    {
      v4 = v4 + (*(unsigned __int8 *)(v3 + 2) << 14) - 0x4000;
      if (*(char *)(v3 + 2) < 0)
      {
        v4 = v4 + (*(unsigned __int8 *)(v3 + 3) << 21) - 0x200000;
        if (*(char *)(v3 + 3) < 0)
        {
          v8 = *(char *)(v3 + 4);
          v4 = v4 + (v8 << 28) - 0x10000000;
          if (v8 < 0)
          {
            v9 = 0;
            while (*(char *)(v3 + v9 + 5) < 0)
            {
              ++v9;
              Varint64Fallback = -1;
              if ((_DWORD)v9 == 5)
                return Varint64Fallback;
            }
            v5 = v3 + v9 + 6;
          }
          else
          {
            v5 = v3 + 5;
          }
        }
        else
        {
          v5 = v3 + 4;
        }
      }
      else
      {
        v5 = v3 + 3;
      }
    }
    else
    {
      v5 = v3 + 2;
    }
    *(_QWORD *)this = v5;
    return v4;
  }
  return Varint64Fallback;
}

uint64_t *google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 24) && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      MEMORY[0x1A1AD6260](v3, 0x1032C402ED93987);
    }
  }
  *a1 = 0;
  return a1;
}

void CoreML::Specification::FeatureType::~FeatureType(CoreML::Specification::FeatureType *this)
{
  CoreML::Specification::FeatureType::~FeatureType(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *(_QWORD *)this = &off_1E3D4D068;
  if (*((_DWORD *)this + 9))
    CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void google::protobuf::RepeatedField<double>::Reserve(unsigned int *a1, int a2)
{
  signed int v2;
  google::protobuf::Arena **v4;
  google::protobuf::Arena *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *Aligned;
  uint64_t v10;

  v2 = a1[1];
  if (v2 < a2)
  {
    v4 = (google::protobuf::Arena **)*((_QWORD *)a1 + 1);
    if (v4)
      v5 = *v4;
    else
      v5 = 0;
    v6 = 2 * v2;
    if (v6 <= a2)
      v6 = a2;
    if (v6 <= 4)
      v7 = 4;
    else
      v7 = v6;
    v8 = 8 * v7;
    if (v5)
      Aligned = google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x1E0DE4EC8], v8 + 8);
    else
      Aligned = operator new(v8 + 8);
    *((_QWORD *)a1 + 1) = Aligned;
    *Aligned = v5;
    a1[1] = v7;
    v10 = *a1;
    if ((int)v10 >= 1)
      memcpy(Aligned + 1, v4 + 1, 8 * v10);
    if (v4)
    {
      if (!*v4)
        operator delete(v4);
    }
  }
}

google::protobuf::Arena **google::protobuf::Map<std::string,std::string>::operator[](uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  google::protobuf::Arena *v12;
  std::string *Aligned;
  std::string::__raw *v14;
  __int128 v15;
  google::protobuf::Arena **v16;
  google::protobuf::Arena *v17;
  google::protobuf::Arena *v18;
  std::string *v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  std::string __p;
  std::string::size_type v25;
  uint64_t v26[4];
  _QWORD v27[4];

  v4 = *(_QWORD **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v25 = 0;
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v27, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  v6 = v27[0];
  if (v27[0])
    goto LABEL_18;
  v7 = v4[1];
  v8 = *v4 + 1;
  v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      v21 = 2 * v7;
LABEL_37:
      google::protobuf::Map<std::string,std::string>::InnerMap::Resize((uint64_t)v4, v21, v5);
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      v11 = v26[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    v22 = 0;
    v23 = ((5 * v8) >> 2) + 1;
    do
      ++v22;
    while (v23 << v22 < v9);
    v21 = v7 >> v22 <= 8 ? 8 : v7 >> v22;
    if (v21 != v7)
      goto LABEL_37;
  }
  v11 = v27[3];
LABEL_11:
  v12 = (google::protobuf::Arena *)v4[5];
  if (v12)
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E0DE4EE8], 40);
  else
    Aligned = (std::string *)operator new(0x28uLL);
  v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v25;
  google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v26, (uint64_t)v4, v11, v14);
  ++*v4;
  v6 = v26[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (*(_QWORD *)a1)
    {
      v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E0DE4EE8], 48);
      v17 = *(google::protobuf::Arena **)a1;
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
      v18 = *(google::protobuf::Arena **)a1;
      v16[4] = 0;
      v16[5] = 0;
      v16[3] = 0;
      google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v18, (google::protobuf::Arena *)(v16 + 3));
      std::string::operator=((std::string *)v16, (const std::string *)a2);
    }
    else
    {
      v19 = (std::string *)operator new();
      v16 = (google::protobuf::Arena **)v19;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v19->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      v16[3] = 0;
      v16[4] = 0;
      v16[5] = 0;
    }
    *(_QWORD *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_19C49B5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1A1AD6260](v14, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(a2, a3);
  v9 = result;
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(v10 + 8 * result);
  if (v11)
  {
    if (v11 != *(_QWORD *)(v10 + 8 * (result ^ 1)))
    {
      while (1)
      {
        result = std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v11, a3);
        if ((_DWORD)result)
          break;
        v11 = *(_QWORD *)(v11 + 32);
        if (!v11)
          goto LABEL_10;
      }
      *a1 = v11;
      goto LABEL_12;
    }
    v9 = result & 0xFFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD *)(v10 + 8 * (result & 0xFFFFFFFFFFFFFFFELL));
    result = std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v12, a3);
    if (v12 + 8 != result)
    {
      if (a4)
        *a4 = result;
      *a1 = *(_QWORD *)(result + 32);
LABEL_12:
      a1[1] = a2;
      a1[2] = v9;
      goto LABEL_13;
    }
  }
LABEL_10:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
LABEL_13:
  a1[3] = v9;
  return result;
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(uint64_t a1, _BYTE *a2)
{
  _BYTE *v2;
  char v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  if ((char)a2[23] >= 0)
    v2 = a2;
  else
    v2 = *(_BYTE **)a2;
  v3 = *v2;
  if (*v2)
  {
    v4 = 0;
    v5 = v2 + 1;
    do
    {
      v4 = 5 * v4 + v3;
      v6 = *v5++;
      v3 = v6;
    }
    while (v6);
  }
  else
  {
    v4 = 0;
  }
  return (*(_QWORD *)(a1 + 8) - 1) & (*(_QWORD *)(a1 + 16) + v4);
}

uint64_t *google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(uint64_t *result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = a4;
  v5 = a3;
  v7 = result;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(v8 + 8 * a3);
  if (!v9)
  {
    a4[4] = 0;
    *(_QWORD *)(v8 + 8 * a3) = a4;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a3 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a3);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      a4[4] = v9;
      *(_QWORD *)(v8 + 8 * a3) = a4;
LABEL_11:
      *v7 = (uint64_t)v4;
      v7[1] = a2;
      v7[2] = v5;
      return result;
    }
    google::protobuf::Map<std::string,std::string>::InnerMap::TreeConvert(a2, a3);
    v4[4] = 0;
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v5);
    v15 = v4;
    result = std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, v4, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = (_QWORD *)result[4];
LABEL_8:
    v12 = *(_QWORD *)(a2 + 24);
    if (v5 < v12)
      v12 = v5;
    *(_QWORD *)(a2 + 24) = v12;
    goto LABEL_11;
  }
  a4[4] = 0;
  v13 = *(_QWORD *)(v8 + 8 * a3);
  v15 = a4;
  result = std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, a4, (uint64_t *)&v15);
  *v7 = result[4];
  v7[1] = a2;
  v7[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

uint64_t google::protobuf::io::CodedInputStream::Skip(google::protobuf::io::CodedInputStream *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  if ((a2 & 0x80000000) != 0)
    return 0;
  v3 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  v5 = __OFSUB__(a2, (_DWORD)v4);
  v6 = a2 - v4;
  if ((v6 < 0) ^ v5 | (v6 == 0))
  {
    *(_QWORD *)this = v3 + a2;
    return 1;
  }
  if (*((int *)this + 11) >= 1)
  {
    v7 = 0;
    *(_QWORD *)this = v3 + (int)v4;
    return v7;
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v8 = *((_DWORD *)this + 10);
  if (*((_DWORD *)this + 12) < v8)
    v8 = *((_DWORD *)this + 12);
  v9 = *((_DWORD *)this + 6);
  v10 = (v8 - v9);
  if ((int)v10 < v6)
  {
    if ((int)v10 >= 1)
    {
      *((_DWORD *)this + 6) = v8;
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2), v10);
    }
    return 0;
  }
  *((_DWORD *)this + 6) = v9 + v6;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
}

CoreML::Specification::Metadata *CoreML::Specification::Metadata::Metadata(CoreML::Specification::Metadata *this)
{
  CoreML::Specification::protobuf_Model_2eproto *v2;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D59160;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (CoreML::Specification::protobuf_Model_2eproto *)google::protobuf::Map<std::string,std::string>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::Metadata *)&CoreML::Specification::_Metadata_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v2);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 20) = 0;
  return this;
}

void sub_19C49B96C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::Map<std::string,std::string>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,std::string>::Init(uint64_t a1)
{
  google::protobuf::Arena *v2;
  _QWORD *Aligned;
  _QWORD *result;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::InnerMap(Aligned, v2);
    result = google::protobuf::Arena::AllocateAligned(v2, 0, 24);
    *result = Aligned;
    result[1] = google::protobuf::internal::arena_destruct_object<google::protobuf::Map<std::string,std::string>::InnerMap>;
    v5 = (unint64_t *)((char *)v2 + 32);
    do
      v6 = __ldxr(v5);
    while (__stxr((unint64_t)result, v5));
    result[2] = v6;
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    result = google::protobuf::Map<std::string,std::string>::InnerMap::InnerMap(Aligned, 0);
  }
  *(_QWORD *)(a1 + 16) = Aligned;
  return result;
}

void sub_19C49BA38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

void sub_19C49BB4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(google::protobuf::io::CodedInputStream *this)
{
  unint64_t v1;
  char *v2;
  unsigned __int8 *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t Varint64Fallback;
  char v8;
  unint64_t v10;

  v2 = *(char **)this;
  v1 = *((_QWORD *)this + 1);
  if ((int)(v1 - *(_QWORD *)this) > 9 || v1 > (unint64_t)v2 && (*(char *)(v1 - 1) & 0x80000000) == 0)
  {
    v3 = (unsigned __int8 *)(v2 + 1);
    v4 = *v2;
    if (*v2 < 0)
    {
      v4 = v4 + (v2[1] << 7) - 128;
      if (v2[1] < 0)
      {
        v4 = v4 + (v2[2] << 14) - 0x4000;
        if (v2[2] < 0)
        {
          v4 = v4 + (v2[3] << 21) - 0x200000;
          if (v2[3] < 0)
          {
            v4 -= 0x10000000;
            v5 = v2[4];
            if (v2[4] < 0)
            {
              v5 = v5 + (v2[5] << 7) - 128;
              if (v2[5] < 0)
              {
                v5 = v5 + (v2[6] << 14) - 0x4000;
                if (v2[6] < 0)
                {
                  v5 = v5 + (v2[7] << 21) - 0x200000;
                  if (v2[7] < 0)
                  {
                    v5 -= 0x10000000;
                    v6 = v2[8];
                    if (v2[8] < 0)
                    {
                      if (v2[9] < 0)
                        return 0xFFFFFFFFLL;
                      v3 = (unsigned __int8 *)(v2 + 10);
                      v6 = v6 + (v2[9] << 7) - 128;
                    }
                    else
                    {
                      v3 = (unsigned __int8 *)(v2 + 9);
                    }
                  }
                  else
                  {
                    v6 = 0;
                    v3 = (unsigned __int8 *)(v2 + 8);
                  }
                }
                else
                {
                  v6 = 0;
                  v3 = (unsigned __int8 *)(v2 + 7);
                }
              }
              else
              {
                v6 = 0;
                v3 = (unsigned __int8 *)(v2 + 6);
              }
            }
            else
            {
              v6 = 0;
              v3 = (unsigned __int8 *)(v2 + 5);
            }
          }
          else
          {
            v5 = 0;
            v6 = 0;
            v3 = (unsigned __int8 *)(v2 + 4);
          }
        }
        else
        {
          v5 = 0;
          v6 = 0;
          v3 = (unsigned __int8 *)(v2 + 3);
        }
      }
      else
      {
        v5 = 0;
        v6 = 0;
        v3 = (unsigned __int8 *)(v2 + 2);
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v10 = v4 | ((unint64_t)v5 << 28);
    if (!((v10 | (v6 << 56)) >> 31))
    {
      *(_QWORD *)this = v3;
      return v10;
    }
    return 0xFFFFFFFFLL;
  }
  Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
  if ((Varint64Fallback & 0xFFFFFFFF80000000) != 0 || (v8 & 1) == 0)
    return 0xFFFFFFFFLL;
  else
    return Varint64Fallback;
}

unint64_t google::protobuf::io::CodedInputStream::ReadVarint64Fallback(google::protobuf::io::CodedInputStream *this)
{
  unint64_t v2;
  char *v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;

  v3 = *(char **)this;
  v2 = *((_QWORD *)this + 1);
  if ((int)(v2 - *(_QWORD *)this) <= 9 && (v2 <= (unint64_t)v3 || *(char *)(v2 - 1) < 0))
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = v8;
      if (v8 == 10)
        break;
      while (1)
      {
        v11 = *(char **)this;
        if (*(_QWORD *)this != *((_QWORD *)this + 1))
          break;
        if ((google::protobuf::io::CodedInputStream::Refresh(this) & 1) == 0)
          return 0;
      }
      v12 = *v11;
      v9 |= (unint64_t)(*v11 & 0x7F) << (7 * v10);
      *(_QWORD *)this = v11 + 1;
      v8 = v10 + 1;
      if ((v12 & 0x80) == 0)
        return v9;
    }
    return 0;
  }
  else
  {
    v4 = (unsigned __int8 *)(v3 + 1);
    v5 = *v3;
    if (*v3 < 0)
    {
      v5 = v5 + (v3[1] << 7) - 128;
      if (v3[1] < 0)
      {
        v5 = v5 + (v3[2] << 14) - 0x4000;
        if (v3[2] < 0)
        {
          v5 = v5 + (v3[3] << 21) - 0x200000;
          if (v3[3] < 0)
          {
            v5 -= 0x10000000;
            v6 = v3[4];
            if (v3[4] < 0)
            {
              v6 = v6 + (v3[5] << 7) - 128;
              if (v3[5] < 0)
              {
                v6 = v6 + (v3[6] << 14) - 0x4000;
                if (v3[6] < 0)
                {
                  v6 = v6 + (v3[7] << 21) - 0x200000;
                  if (v3[7] < 0)
                  {
                    v6 -= 0x10000000;
                    v7 = v3[8];
                    if (v3[8] < 0)
                    {
                      if (v3[9] < 0)
                        return 0;
                      v4 = (unsigned __int8 *)(v3 + 10);
                      v7 = v7 + (v3[9] << 7) - 128;
                    }
                    else
                    {
                      v4 = (unsigned __int8 *)(v3 + 9);
                    }
                  }
                  else
                  {
                    v7 = 0;
                    v4 = (unsigned __int8 *)(v3 + 8);
                  }
                }
                else
                {
                  v7 = 0;
                  v4 = (unsigned __int8 *)(v3 + 7);
                }
              }
              else
              {
                v7 = 0;
                v4 = (unsigned __int8 *)(v3 + 6);
              }
            }
            else
            {
              v7 = 0;
              v4 = (unsigned __int8 *)(v3 + 5);
            }
          }
          else
          {
            v6 = 0;
            v7 = 0;
            v4 = (unsigned __int8 *)(v3 + 4);
          }
        }
        else
        {
          v6 = 0;
          v7 = 0;
          v4 = (unsigned __int8 *)(v3 + 3);
        }
      }
      else
      {
        v6 = 0;
        v7 = 0;
        v4 = (unsigned __int8 *)(v3 + 2);
      }
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    v9 = v5 | ((unint64_t)v6 << 28) | (v7 << 56);
    *(_QWORD *)this = v4;
  }
  return v9;
}

void sub_19C49C0B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CoreML::vectorizeMultiArray<float,float>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4;
  __int16 v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  _DWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[16];
  void *__p;
  void *v23;
  void *v24;
  std::__shared_weak_count *v25;
  _DWORD *v26;
  void *v27;
  void *v28;

  v4 = *(_QWORD *)(a1 + 80) == *(_QWORD *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65568 && *(_DWORD *)(a3 + 72) == 65568;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0)
    return 0;
  if (a2)
    v7 = 2;
  else
    v7 = 1;
  if (((unsigned __int16)v7 & *(_WORD *)(a1 + 88)) != 0)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a3);
    v8 = v24;
    v9 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a1);
    v12 = v24;
    v13 = v25;
    if (v25)
    {
      v14 = (unint64_t *)&v25->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    memcpy(v8, v12, 4 * *(_QWORD *)(a1 + 80));
  }
  else
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a3);
    v18 = v24;
    v17 = v25;
    if (v25)
    {
      v19 = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v24, a1, a2, 1);
    CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)v21, a1, 1, 0);
    while (v26 != (_DWORD *)v21[14])
    {
      *v18++ = *v26;
      CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v24);
    }
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v21);
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v24);
  }
  return 1;
}

void sub_19C49C300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev((CoreML::MultiArrayBuffer *)&a32);
  _Unwind_Resume(a1);
}

void CoreML::MultiArrayBuffer::loadBuffer(CoreML::MultiArrayBuffer *this, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  __CVBuffer *v6;
  CVReturn v7;
  std::__shared_weak_count_vtbl *BaseAddress;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__sp_mut *sp_mut;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *CoreChannel;
  std::bad_alloc *exception;
  std::bad_alloc *v36;
  uint64_t v37;
  __int128 v38;
  uint8_t buf[16];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)(a2 + 8);
  std::atomic_load[abi:ne180100]<CoreML::MultiArrayBuffer>(&v38, (_QWORD *)(a2 + 8));
  v5 = v38;
  if ((_QWORD)v38)
    goto LABEL_43;
  v6 = *(__CVBuffer **)(a2 + 96);
  if (v6)
  {
    *(_BYTE *)(a2 + 104) = 1;
    v7 = CVPixelBufferLockBaseAddress(v6, 0);
    if (v7)
    {
      CoreChannel = MLLoggingGetCoreChannel();
      if (os_log_type_enabled(CoreChannel, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v7;
        _os_log_error_impl(&dword_19C486000, CoreChannel, OS_LOG_TYPE_ERROR, "Failed to lock pixel buffer with error: %d", buf, 8u);
      }
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v36 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v36, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
    }
    BaseAddress = (std::__shared_weak_count_vtbl *)CVPixelBufferGetBaseAddress(v6);
    CVPixelBufferRetain(v6);
    v37 = (uint64_t)BaseAddress;
    v9 = (std::__shared_weak_count *)operator new();
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C8A8;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = BaseAddress;
    v9[1].__shared_owners_ = (uint64_t)v6;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    memset(buf, 0, sizeof(buf));
    sp_mut = std::__get_sp_mut(v4);
    std::__sp_mut::lock(sp_mut);
    v13 = *(_QWORD *)(a2 + 16);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (v13 == *((_QWORD *)&v38 + 1))
    {
      *(_QWORD *)buf = *v4;
      *(_QWORD *)&buf[8] = v13;
      *v4 = 0;
      v4[1] = 0;
      std::shared_ptr<unsigned char>::operator=[abi:ne180100](v4, (uint64_t)BaseAddress, (uint64_t)v9);
      v15 = (std::__shared_weak_count *)v13;
    }
    else
    {
      *(_OWORD *)buf = v38;
      v38 = 0uLL;
      std::shared_ptr<unsigned char>::operator=[abi:ne180100](&v38, *v4, v13);
      v15 = v14;
    }
    std::__sp_mut::unlock(sp_mut);
    if (v15)
    {
      v19 = (unint64_t *)&v15->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v9)
    {
      v21 = (unint64_t *)&v9->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if ((std::__shared_weak_count *)v13 == v14)
    {
      v30 = v9;
      std::shared_ptr<unsigned char>::operator=[abi:ne180100](&v38, v37, (uint64_t)v9);
      if (!v9)
      {
LABEL_42:
        v5 = v38;
LABEL_43:
        v33 = *((_QWORD *)&v38 + 1);
        *(_QWORD *)this = v5;
        *((_QWORD *)this + 1) = v33;
        return;
      }
    }
    else
    {
      std::atomic_load[abi:ne180100]<CoreML::MultiArrayBuffer>(buf, v4);
      v23 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      v38 = v23;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = v9;
      if (!v9)
        goto LABEL_42;
    }
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    goto LABEL_42;
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_19C49C6C0()
{
  __break(1u);
}

void sub_19C49C718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __cxa_end_catch();
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x19C49C748);
}

void sub_19C49C724(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_19C49C7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t CoreML::MultiArrayBuffer::offsetForIndex(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
    a2 += *(_QWORD *)(a1 + 80);
  v3 = *(char **)(a1 + 24);
  v4 = *(char **)(a1 + 32);
  if (v4 - v3 == 8)
    return **(_QWORD **)(a1 + 48) * a2;
  if (v4 == v3)
    return 0;
  result = 0;
  v6 = (v4 - v3) >> 3;
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(uint64_t **)(a1 + 48);
  if (v6 <= 1)
    v6 = 1;
  do
  {
    v9 = *(_QWORD *)v3;
    v3 += 8;
    v7 /= v9;
    v10 = *v8++;
    result += v10 * (a2 / v7);
    a2 %= v7;
    --v6;
  }
  while (v6);
  return result;
}

void sub_19C49C90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_19C49CA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void StorageManager::mutableStorage(StorageManager *this, uint64_t a2)
{
  StorageManager *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  os_unfair_lock_s *v8;
  unsigned __int8 v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  id v45;
  void *v46;
  StorageManager *v47;
  uint64_t *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  void *__p;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  id v56;
  uint64_t v57;
  _BYTE v58[128];
  uint64_t v59;

  v3 = this;
  v59 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 24) && (v4 = atomic_load((unsigned __int8 *)a2), (v4 & 1) != 0))
  {
    v8 = (os_unfair_lock_s *)(a2 + 4);
    os_unfair_lock_lock((os_unfair_lock_t)(a2 + 4));
    v9 = atomic_load((unsigned __int8 *)a2);
    if ((v9 & 1) != 0)
    {
      v56 = 0;
      v57 = 0;
      (*(void (**)(void))(*(_QWORD *)(a2 + 24) + 16))();
      v10 = v56;
      v11 = v56;
      v12 = v57;
      CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&__p, *(_QWORD *)(a2 + 8));
      v13 = __p;
      v14 = v54;
      if (v54)
      {
        p_shared_owners = (unint64_t *)&v54->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if ((void *)v12 != v13)
      {
        if (objc_msgSend(v11, "count") != (uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 56)
                                                   - *(_QWORD *)(*(_QWORD *)(a2 + 8) + 48)) >> 3)
        {
          objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("The mutable shaped buffer provider has reported incorrect dimensions of strides."), 0);
          v45 = (id)objc_claimAutoreleasedReturnValue();
          objc_exception_throw(v45);
        }
        v47 = v3;
        v48 = (uint64_t *)(a2 + 8);
        v46 = v10;
        __p = 0;
        v54 = 0;
        v55 = 0;
        v49 = 0u;
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        v17 = v11;
        v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v49, v58, 16);
        if (v18)
        {
          v19 = *(_QWORD *)v50;
          do
          {
            for (i = 0; i != v18; ++i)
            {
              if (*(_QWORD *)v50 != v19)
                objc_enumerationMutation(v17);
              v21 = objc_msgSend(*(id *)(*((_QWORD *)&v49 + 1) + 8 * i), "unsignedIntValue");
              v22 = v21;
              v23 = &v54->__vftable;
              if (v54 >= v55)
              {
                v25 = __p;
                v26 = ((char *)v54 - (_BYTE *)__p) >> 3;
                v27 = v26 + 1;
                if ((unint64_t)(v26 + 1) >> 61)
                  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
                v28 = (char *)v55 - (_BYTE *)__p;
                if (((char *)v55 - (_BYTE *)__p) >> 2 > v27)
                  v27 = v28 >> 2;
                if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
                  v29 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v29 = v27;
                if (v29)
                {
                  v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v55, v29);
                  v25 = __p;
                  v23 = &v54->__vftable;
                }
                else
                {
                  v30 = 0;
                }
                v31 = &v30[8 * v26];
                *(_QWORD *)v31 = v22;
                v24 = (std::__shared_weak_count *)(v31 + 8);
                while (v23 != v25)
                {
                  v32 = *--v23;
                  *((_QWORD *)v31 - 1) = v32;
                  v31 -= 8;
                }
                __p = v31;
                v54 = v24;
                v55 = (std::__shared_weak_count *)&v30[8 * v29];
                if (v25)
                  operator delete(v25);
              }
              else
              {
                v54->__vftable = (std::__shared_weak_count_vtbl *)v21;
                v24 = (std::__shared_weak_count *)(v23 + 1);
              }
              v54 = v24;
            }
            v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v49, v58, 16);
          }
          while (v18);
        }

        v3 = v47;
        v33 = *v48;
        v34 = *(_DWORD *)(*v48 + 72);
        v35 = (std::__shared_weak_count *)operator new(0x88uLL);
        v36 = v33 + 24;
        v35->__shared_owners_ = 0;
        v37 = (unint64_t *)&v35->__shared_owners_;
        v35->__shared_weak_owners_ = 0;
        v35->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BD48;
        CoreML::MultiArrayBuffer::MultiArrayBuffer((uint64_t)&v35[1], v57, v36, (uint64_t)&__p, v34);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        sp_mut = std::__get_sp_mut(v48);
        std::__sp_mut::lock(sp_mut);
        v40 = *(std::__shared_weak_count **)(a2 + 16);
        *(_QWORD *)(a2 + 8) = v35 + 1;
        *(_QWORD *)(a2 + 16) = v35;
        std::__sp_mut::unlock(sp_mut);
        v8 = (os_unfair_lock_s *)(a2 + 4);
        if (v40)
        {
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        objc_storeStrong((id *)(a2 + 32), v46);
        if (v35)
        {
          v43 = (unint64_t *)&v35->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        if (__p)
        {
          v54 = (std::__shared_weak_count *)__p;
          operator delete(__p);
        }
      }
      atomic_store(0, (unsigned __int8 *)a2);

    }
    os_unfair_lock_unlock(v8);
    std::atomic_load[abi:ne180100]<CoreML::MultiArrayBuffer>(v3, (_QWORD *)(a2 + 8));
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)this = *(_QWORD *)(a2 + 8);
    *((_QWORD *)this + 1) = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
}

void sub_19C49CE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  void *v29;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void CoreML::MultiArrayBuffer::getBytesWithHandler(uint64_t a1, void *a2)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  __CVBuffer *v12;
  void (**v13)(void);
  CVReturn v14;
  void *BaseAddress;
  size_t DataSize;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  CVReturn v24;
  NSObject *v25;
  std::bad_alloc *exception;
  std::bad_alloc *v27;
  void (**v28)(void);
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint8_t buf[4];
  CVReturn v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v28 = a2;
  std::atomic_load[abi:ne180100]<CoreML::MultiArrayBuffer>(&v29, (_QWORD *)(a1 + 8));
  if (v29)
  {
    v3 = *(unint64_t **)(a1 + 48);
    v4 = *(unint64_t **)(a1 + 56);
    if (v3 != v4)
    {
      v5 = v3 + 1;
      if (v3 + 1 == v4)
      {
        v7 = *(unint64_t **)(a1 + 48);
      }
      else
      {
        v6 = *v3;
        v7 = *(unint64_t **)(a1 + 48);
        v8 = v3 + 1;
        do
        {
          v10 = *v8++;
          v9 = v10;
          v11 = v6 >= v10;
          if (v6 <= v10)
            v6 = v9;
          if (!v11)
            v7 = v5;
          v5 = v8;
        }
        while (v8 != v4);
      }
      v17 = *v7;
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + (char *)v7 - (char *)v3);
      v19 = *v7 * v18;
      if (is_mul_ok(v17, v18))
        v20 = v19;
      else
        v20 = -1;
      is_mul_ok(v20, (unsigned __int16)*(_DWORD *)(a1 + 72) >> 3);
    }
    v28[2]();
  }
  else
  {
    v12 = *(__CVBuffer **)(a1 + 96);
    if (v12)
    {
      v13 = v28;
      v14 = CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(a1 + 96), 0);
      if (v14)
      {
        v24 = v14;
        MLLoggingGetCoreChannel();
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v32 = v24;
          _os_log_error_impl(&dword_19C486000, v25, OS_LOG_TYPE_ERROR, "Failed to lock pixel buffer with error: %d", buf, 8u);
        }

        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v27 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v27, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
      }
      BaseAddress = CVPixelBufferGetBaseAddress(v12);
      DataSize = CVPixelBufferGetDataSize(v12);
      ((void (*)(void (**)(void), void *, size_t))v13[2])(v13, BaseAddress, DataSize);
      CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 96), 0);

    }
    else
    {
      ((void (*)(void (**)(void), _QWORD, _QWORD))v28[2])(v28, 0, 0);
    }
  }
  v21 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

}

void sub_19C49D12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  void *v11;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_19C49D1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double StorageManager::storage(StorageManager *this, uint64_t a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  double result;
  __int128 v8;

  if (*(_QWORD *)(a2 + 24) && (v3 = atomic_load((unsigned __int8 *)a2), (v3 & 1) != 0))
  {
    std::atomic_load[abi:ne180100]<CoreML::MultiArrayBuffer>(&v8, (_QWORD *)(a2 + 8));
    result = *(double *)&v8;
    *(_OWORD *)this = v8;
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)this = *(_QWORD *)(a2 + 8);
    *((_QWORD *)this + 1) = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  return result;
}

uint64_t ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t CoreML::MultiArrayBuffer::copyInto(CoreML::MultiArrayBuffer *this, CoreML::MultiArrayBuffer *a2)
{
  char v2;
  int v4;
  int v5;
  _BOOL4 v6;
  __int16 v7;
  int v9;
  _BOOL4 v10;
  __int16 v11;
  int v12;
  _BOOL4 v13;
  __int16 v14;
  int v15;
  _BOOL4 v16;
  __int16 v17;
  _BOOL4 v18;
  __int16 v19;
  _BOOL4 v20;
  __int16 v21;
  _BOOL4 v22;
  __int16 v23;
  _BOOL4 v24;
  __int16 v25;
  _BOOL4 v26;
  __int16 v27;
  _BOOL4 v28;
  __int16 v29;
  _BOOL4 v30;
  __int16 v31;
  _BOOL4 v32;
  __int16 v33;
  _BOOL4 v34;
  __int16 v35;
  _BOOL4 v36;
  __int16 v37;
  _BOOL4 v38;
  __int16 v39;
  _BOOL4 v40;
  __int16 v41;
  vImage_Buffer *v42;
  vImage_Buffer *v43;
  float v44;
  vImage_Buffer *v45;
  vImage_Buffer *v46;
  _BOOL4 v47;
  _BOOL4 v48;
  vImage_Buffer *v49;
  vImage_Buffer *v50;
  vImage_Buffer *v57;
  vImage_Buffer *v58;
  vImage_Buffer *v60;
  vImage_Buffer *v61;
  _BOOL4 v62;
  _BOOL4 v63;
  _BOOL4 v64;
  _BOOL4 v65;
  _BOOL4 v66;
  _BOOL4 v67;
  vImage_Buffer *v68;
  vImage_Buffer *v69;
  _BOOL4 v70;
  _BOOL4 v71;
  _BOOL4 v72;
  _BOOL4 v73;
  _BOOL4 v74;
  _BOOL4 v75;
  _BOOL4 v76;
  _BOOL4 v77;
  _BOOL4 inited;
  _BOOL4 v79;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  void *v89;
  uint64_t *v90;
  uint64_t *v91;
  _BYTE *v92;
  double *v93;
  void *__p;
  void *v95;
  _BYTE v96[24];
  const void *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  _BYTE v101[24];
  _BYTE *v102;
  _BYTE *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  __n128 (*v110)(uint64_t, uint64_t);
  uint64_t (*v111)();
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  __n128 (*v126)(uint64_t, uint64_t);
  uint64_t (*v127)();
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;

  v4 = *((_DWORD *)this + 18);
  if (v4 > 65599)
  {
    if (v4 == 131104)
    {
      v15 = *((_DWORD *)a2 + 18);
      if (v15 > 65599)
      {
        if (v15 == 131104)
        {
          v40 = (*((_WORD *)this + 44) & 1) == 0;
          if ((*((_WORD *)this + 44) & 1) != 0)
            v41 = 1;
          else
            v41 = 2;
          if (((unsigned __int16)v41 & *((_WORD *)a2 + 44)) != 0)
            return CoreML::vectorizeMultiArray<int,int>((uint64_t)this, (*((_WORD *)this + 44) & 1) == 0, (uint64_t)a2);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v101, (uint64_t)this);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v96, (uint64_t)a2);
          if (v98 - (_QWORD)v97 == v103 - v102 && !memcmp(v102, v97, v98 - (_QWORD)v97))
          {
            v123 = 0;
            v124 = &v123;
            v125 = 0x4802000000;
            v126 = __Block_byref_object_copy__11742;
            v127 = __Block_byref_object_dispose__11743;
            v107 = 0;
            v108 = &v107;
            v109 = 0x4802000000;
            v110 = __Block_byref_object_copy__11742;
            v111 = __Block_byref_object_dispose__11743;
            if (CoreML::initVIBuffer((CoreML *)v101, (const CoreML::MultiArrayBuffer *)&v128, v68)
              && CoreML::initVIBuffer((CoreML *)v96, (const CoreML::MultiArrayBuffer *)(v108 + 5), v69))
            {
              v86 = MEMORY[0x1E0C809B0];
              v87 = 0x40000000;
              v88 = ___ZN6CoreMLL16copyMultiArrayVIIiiEEbRKNS_16MultiArrayBufferERS1__block_invoke;
              v89 = &unk_1E3D65C28;
              v92 = v96;
              v90 = &v123;
              v91 = &v107;
              CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v101, &v86);
              goto LABEL_246;
            }
            _Block_object_dispose(&v107, 8);
            _Block_object_dispose(&v123, 8);
            if (v103 != v102 && v106)
            {
              v123 = 0;
              v124 = &v123;
              v125 = 0xD802000000;
              v126 = __Block_byref_object_copy__10;
              v127 = __Block_byref_object_dispose__11;
              v107 = 0;
              v108 = &v107;
              v109 = 0xD802000000;
              v110 = __Block_byref_object_copy__10;
              v111 = __Block_byref_object_dispose__11;
              v128 = 0u;
              v129 = 0u;
              v130 = 0u;
              v131 = 0u;
              v132 = 0u;
              v133 = 0u;
              v134 = 0u;
              v135 = 0u;
              v136 = 0u;
              v137 = 0u;
              v138 = 0u;
              v112 = 0u;
              v113 = 0u;
              v114 = 0u;
              v115 = 0u;
              v116 = 0u;
              v117 = 0u;
              v118 = 0u;
              v119 = 0u;
              v120 = 0u;
              v121 = 0u;
              v122 = 0u;
              inited = CoreML::initBNNSDArrayDescriptor<int>((uint64_t)&v102, v104, v105, (uint64_t)&v128);
              v79 = CoreML::initBNNSDArrayDescriptor<int>((uint64_t)&v97, v99, v100, (uint64_t)(v108 + 5));
              if (inited && v79)
              {
                v86 = MEMORY[0x1E0C809B0];
                v87 = 0x40000000;
                v88 = ___ZN6CoreMLL18copyMultiArrayBNNSIiiEEbRKNS_16MultiArrayBufferERS1__block_invoke;
                v89 = &unk_1E3D65C78;
                v92 = v96;
                v90 = &v123;
                v91 = &v107;
                CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v101, &v86);
                goto LABEL_246;
              }
              _Block_object_dispose(&v107, 8);
              _Block_object_dispose(&v123, 8);
            }
            CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v123, (uint64_t)v101, v40, 1);
            CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v107, (uint64_t)v101, 1, 0);
            CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v86, (uint64_t)v96, v40, 1);
            while (*((_QWORD *)&v132 + 1) != *((_QWORD *)&v116 + 1))
            {
              *(_DWORD *)v93 = **((_DWORD **)&v132 + 1);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v123);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v86);
            }
            goto LABEL_283;
          }
          goto LABEL_209;
        }
        if (v15 == 65600)
        {
          v24 = (*((_WORD *)this + 44) & 1) == 0;
          if ((*((_WORD *)this + 44) & 1) != 0)
            v25 = 1;
          else
            v25 = 2;
          if (((unsigned __int16)v25 & *((_WORD *)a2 + 44)) != 0)
            return CoreML::vectorizeMultiArray<int,double>((uint64_t)this, (*((_WORD *)this + 44) & 1) == 0, (uint64_t)a2);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v101, (uint64_t)this);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v96, (uint64_t)a2);
          if (v98 - (_QWORD)v97 == v103 - v102 && !memcmp(v102, v97, v98 - (_QWORD)v97))
          {
            v123 = 0;
            v124 = &v123;
            v125 = 0x4802000000;
            v126 = __Block_byref_object_copy__11742;
            v127 = __Block_byref_object_dispose__11743;
            v107 = 0;
            v108 = &v107;
            v109 = 0x4802000000;
            v110 = __Block_byref_object_copy__11742;
            v111 = __Block_byref_object_dispose__11743;
            _Block_object_dispose(&v107, 8);
            _Block_object_dispose(&v123, 8);
            if (v103 != v102 && v106)
            {
              v123 = 0;
              v124 = &v123;
              v125 = 0xD802000000;
              v126 = __Block_byref_object_copy__10;
              v127 = __Block_byref_object_dispose__11;
              v107 = 0;
              v108 = &v107;
              v109 = 0xD802000000;
              v110 = __Block_byref_object_copy__10;
              v111 = __Block_byref_object_dispose__11;
              v128 = 0u;
              v129 = 0u;
              v130 = 0u;
              v131 = 0u;
              v132 = 0u;
              v133 = 0u;
              v134 = 0u;
              v135 = 0u;
              v136 = 0u;
              v137 = 0u;
              v138 = 0u;
              v112 = 0u;
              v113 = 0u;
              v114 = 0u;
              v115 = 0u;
              v116 = 0u;
              v117 = 0u;
              v118 = 0u;
              v119 = 0u;
              v120 = 0u;
              v121 = 0u;
              v122 = 0u;
              CoreML::initBNNSDArrayDescriptor<int>((uint64_t)&v102, v104, v105, (uint64_t)&v128);
              _Block_object_dispose(&v107, 8);
              _Block_object_dispose(&v123, 8);
            }
            CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v123, (uint64_t)v101, v24, 1);
            CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v107, (uint64_t)v101, 1, 0);
            CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v86, (uint64_t)v96, v24, 1);
            while (*((_QWORD *)&v132 + 1) != *((_QWORD *)&v116 + 1))
            {
              *v93 = (double)(int)**((_DWORD **)&v132 + 1);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v123);
              CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v86);
            }
            goto LABEL_283;
          }
          goto LABEL_209;
        }
      }
      else
      {
        if (v15 == 65552)
        {
          v32 = (*((_WORD *)this + 44) & 1) == 0;
          if ((*((_WORD *)this + 44) & 1) != 0)
            v33 = 1;
          else
            v33 = 2;
          if (((unsigned __int16)v33 & *((_WORD *)a2 + 44)) != 0)
            return _ZN6CoreMLL19vectorizeMultiArrayIiDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_((uint64_t)this, (*((_WORD *)this + 44) & 1) == 0, (uint64_t)a2);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v101, (uint64_t)this);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v96, (uint64_t)a2);
          if (v98 - (_QWORD)v97 == v103 - v102 && !memcmp(v102, v97, v98 - (_QWORD)v97))
          {
            v123 = 0;
            v124 = &v123;
            v125 = 0x4802000000;
            v126 = __Block_byref_object_copy__11742;
            v127 = __Block_byref_object_dispose__11743;
            v107 = 0;
            v108 = &v107;
            v109 = 0x4802000000;
            v110 = __Block_byref_object_copy__11742;
            v111 = __Block_byref_object_dispose__11743;
            _Block_object_dispose(&v107, 8);
            _Block_object_dispose(&v123, 8);
            if (v103 != v102 && v106)
            {
              v123 = 0;
              v124 = &v123;
              v125 = 0xD802000000;
              v126 = __Block_byref_object_copy__10;
              v127 = __Block_byref_object_dispose__11;
              v107 = 0;
              v108 = &v107;
              v109 = 0xD802000000;
              v110 = __Block_byref_object_copy__10;
              v111 = __Block_byref_object_dispose__11;
              v128 = 0u;
              v129 = 0u;
              v130 = 0u;
              v131 = 0u;
              v132 = 0u;
              v133 = 0u;
              v134 = 0u;
              v135 = 0u;
              v136 = 0u;
              v137 = 0u;
              v138 = 0u;
              v112 = 0u;
              v113 = 0u;
              v114 = 0u;
              v115 = 0u;
              v116 = 0u;
              v117 = 0u;
              v118 = 0u;
              v119 = 0u;
              v120 = 0u;
              v121 = 0u;
              v122 = 0u;
              v62 = CoreML::initBNNSDArrayDescriptor<int>((uint64_t)&v102, v104, v105, (uint64_t)&v128);
              v63 = _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor((uint64_t)&v97, v99, v100, (uint64_t)(v108 + 5));
              if (v62 && v63)
              {
                v86 = MEMORY[0x1E0C809B0];
                v87 = 0x40000000;
                v88 = ___ZN6CoreMLL18copyMultiArrayBNNSIiDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke;
                v89 = &unk_1E3D65CC8;
                v92 = v96;
                v90 = &v123;
                v91 = &v107;
                CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v101, &v86);
                goto LABEL_246;
              }
              _Block_object_dispose(&v107, 8);
              _Block_object_dispose(&v123, 8);
            }
            CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v123, (uint64_t)v101, v32, 1);
            CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v107, (uint64_t)v101, 1, 0);
            _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v86, (uint64_t)v96, v32, 1);
            while (*((_QWORD *)&v132 + 1) != *((_QWORD *)&v116 + 1))
            {
              _S0 = (float)(int)**((_DWORD **)&v132 + 1);
              __asm { FCVT            H0, S0 }
              *(_WORD *)v93 = LOWORD(_S0);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v123);
              _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v86);
            }
            goto LABEL_283;
          }
          goto LABEL_209;
        }
        if (v15 == 65568)
        {
          v16 = (*((_WORD *)this + 44) & 1) == 0;
          if ((*((_WORD *)this + 44) & 1) != 0)
            v17 = 1;
          else
            v17 = 2;
          if (((unsigned __int16)v17 & *((_WORD *)a2 + 44)) != 0)
            return CoreML::vectorizeMultiArray<int,float>((uint64_t)this, (*((_WORD *)this + 44) & 1) == 0, (uint64_t)a2);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v101, (uint64_t)this);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v96, (uint64_t)a2);
          if (v98 - (_QWORD)v97 == v103 - v102 && !memcmp(v102, v97, v98 - (_QWORD)v97))
          {
            v123 = 0;
            v124 = &v123;
            v125 = 0x4802000000;
            v126 = __Block_byref_object_copy__11742;
            v127 = __Block_byref_object_dispose__11743;
            v107 = 0;
            v108 = &v107;
            v109 = 0x4802000000;
            v110 = __Block_byref_object_copy__11742;
            v111 = __Block_byref_object_dispose__11743;
            _Block_object_dispose(&v107, 8);
            _Block_object_dispose(&v123, 8);
            if (v103 != v102 && v106)
            {
              v123 = 0;
              v124 = &v123;
              v125 = 0xD802000000;
              v126 = __Block_byref_object_copy__10;
              v127 = __Block_byref_object_dispose__11;
              v107 = 0;
              v108 = &v107;
              v109 = 0xD802000000;
              v110 = __Block_byref_object_copy__10;
              v111 = __Block_byref_object_dispose__11;
              v128 = 0u;
              v129 = 0u;
              v130 = 0u;
              v131 = 0u;
              v132 = 0u;
              v133 = 0u;
              v134 = 0u;
              v135 = 0u;
              v136 = 0u;
              v137 = 0u;
              v138 = 0u;
              v112 = 0u;
              v113 = 0u;
              v114 = 0u;
              v115 = 0u;
              v116 = 0u;
              v117 = 0u;
              v118 = 0u;
              v119 = 0u;
              v120 = 0u;
              v121 = 0u;
              v122 = 0u;
              v47 = CoreML::initBNNSDArrayDescriptor<int>((uint64_t)&v102, v104, v105, (uint64_t)&v128);
              v48 = CoreML::initBNNSDArrayDescriptor<float>((uint64_t)&v97, v99, v100, (uint64_t)(v108 + 5));
              if (v47 && v48)
              {
                v86 = MEMORY[0x1E0C809B0];
                v87 = 0x40000000;
                v88 = ___ZN6CoreMLL18copyMultiArrayBNNSIifEEbRKNS_16MultiArrayBufferERS1__block_invoke;
                v89 = &unk_1E3D65BD8;
                v92 = v96;
                v90 = &v123;
                v91 = &v107;
                CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v101, &v86);
                goto LABEL_246;
              }
              _Block_object_dispose(&v107, 8);
              _Block_object_dispose(&v123, 8);
            }
            CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v123, (uint64_t)v101, v16, 1);
            CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v107, (uint64_t)v101, 1, 0);
            CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v86, (uint64_t)v96, v16, 1);
            while (*((_QWORD *)&v132 + 1) != *((_QWORD *)&v116 + 1))
            {
              *(float *)v93 = (float)(int)**((_DWORD **)&v132 + 1);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v123);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v86);
            }
            goto LABEL_283;
          }
          goto LABEL_209;
        }
      }
    }
    else if (v4 == 65600)
    {
      v9 = *((_DWORD *)a2 + 18);
      if (v9 > 65599)
      {
        if (v9 == 131104)
        {
          v36 = (*((_WORD *)this + 44) & 1) == 0;
          if ((*((_WORD *)this + 44) & 1) != 0)
            v37 = 1;
          else
            v37 = 2;
          if (((unsigned __int16)v37 & *((_WORD *)a2 + 44)) != 0)
            return CoreML::vectorizeMultiArray<double,int>((uint64_t)this, (*((_WORD *)this + 44) & 1) == 0, (uint64_t)a2);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v101, (uint64_t)this);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v96, (uint64_t)a2);
          if (v98 - (_QWORD)v97 == v103 - v102 && !memcmp(v102, v97, v98 - (_QWORD)v97))
          {
            v123 = 0;
            v124 = &v123;
            v125 = 0x4802000000;
            v126 = __Block_byref_object_copy__11742;
            v127 = __Block_byref_object_dispose__11743;
            v107 = 0;
            v108 = &v107;
            v109 = 0x4802000000;
            v110 = __Block_byref_object_copy__11742;
            v111 = __Block_byref_object_dispose__11743;
            _Block_object_dispose(&v107, 8);
            _Block_object_dispose(&v123, 8);
            if (v103 != v102 && v106)
            {
              v123 = 0;
              v124 = &v123;
              v125 = 0xD802000000;
              v126 = __Block_byref_object_copy__10;
              v127 = __Block_byref_object_dispose__11;
              v107 = 0;
              v108 = &v107;
              v109 = 0xD802000000;
              v110 = __Block_byref_object_copy__10;
              v111 = __Block_byref_object_dispose__11;
              v128 = 0u;
              v129 = 0u;
              v130 = 0u;
              v131 = 0u;
              v132 = 0u;
              v133 = 0u;
              v134 = 0u;
              v135 = 0u;
              v136 = 0u;
              v137 = 0u;
              v138 = 0u;
              v112 = 0u;
              v113 = 0u;
              v114 = 0u;
              v115 = 0u;
              v116 = 0u;
              v117 = 0u;
              v118 = 0u;
              v119 = 0u;
              v120 = 0u;
              v121 = 0u;
              v122 = 0u;
              CoreML::initBNNSDArrayDescriptor<int>((uint64_t)&v97, v99, v100, (uint64_t)&v112);
              _Block_object_dispose(&v107, 8);
              _Block_object_dispose(&v123, 8);
            }
            CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v123, (uint64_t)v101, v36, 1);
            CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v107, (uint64_t)v101, 1, 0);
            CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v86, (uint64_t)v96, v36, 1);
            while (*((_QWORD *)&v132 + 1) != *((_QWORD *)&v116 + 1))
            {
              *(_DWORD *)v93 = (int)**((double **)&v132 + 1);
              CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v123);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v86);
            }
            goto LABEL_283;
          }
          goto LABEL_209;
        }
        if (v9 == 65600)
        {
          v20 = (*((_WORD *)this + 44) & 1) == 0;
          if ((*((_WORD *)this + 44) & 1) != 0)
            v21 = 1;
          else
            v21 = 2;
          if (((unsigned __int16)v21 & *((_WORD *)a2 + 44)) != 0)
            return CoreML::vectorizeMultiArray<double,double>((uint64_t)this, (*((_WORD *)this + 44) & 1) == 0, (uint64_t)a2);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v101, (uint64_t)this);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v96, (uint64_t)a2);
          if (v98 - (_QWORD)v97 == v103 - v102 && !memcmp(v102, v97, v98 - (_QWORD)v97))
          {
            v123 = 0;
            v124 = &v123;
            v125 = 0x4802000000;
            v126 = __Block_byref_object_copy__11742;
            v127 = __Block_byref_object_dispose__11743;
            v107 = 0;
            v108 = &v107;
            v109 = 0x4802000000;
            v110 = __Block_byref_object_copy__11742;
            v111 = __Block_byref_object_dispose__11743;
            if (CoreML::initVIBuffer((CoreML *)v101, (const CoreML::MultiArrayBuffer *)&v128, v49)
              && CoreML::initVIBuffer((CoreML *)v96, (const CoreML::MultiArrayBuffer *)(v108 + 5), v50))
            {
              v86 = MEMORY[0x1E0C809B0];
              v87 = 0x40000000;
              v88 = ___ZN6CoreMLL16copyMultiArrayVIIddEEbRKNS_16MultiArrayBufferERS1__block_invoke;
              v89 = &unk_1E3D659D0;
              v92 = v96;
              v90 = &v123;
              v91 = &v107;
              CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v101, &v86);
              goto LABEL_246;
            }
            _Block_object_dispose(&v107, 8);
            _Block_object_dispose(&v123, 8);
            if (v103 != v102 && v106)
            {
              v123 = 0;
              v124 = &v123;
              v125 = 0xD802000000;
              v126 = __Block_byref_object_copy__10;
              v127 = __Block_byref_object_dispose__11;
              v107 = 0;
              v108 = &v107;
              v109 = 0xD802000000;
              v110 = __Block_byref_object_copy__10;
              v111 = __Block_byref_object_dispose__11;
              v128 = 0u;
              v129 = 0u;
              v130 = 0u;
              v131 = 0u;
              v132 = 0u;
              v133 = 0u;
              v134 = 0u;
              v135 = 0u;
              v136 = 0u;
              v137 = 0u;
              v138 = 0u;
              v112 = 0u;
              v113 = 0u;
              v114 = 0u;
              v115 = 0u;
              v116 = 0u;
              v117 = 0u;
              v118 = 0u;
              v119 = 0u;
              v120 = 0u;
              v121 = 0u;
              v122 = 0u;
              _Block_object_dispose(&v107, 8);
              _Block_object_dispose(&v123, 8);
            }
            CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v123, (uint64_t)v101, v20, 1);
            CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v107, (uint64_t)v101, 1, 0);
            CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v86, (uint64_t)v96, v20, 1);
            while (*((_QWORD *)&v132 + 1) != *((_QWORD *)&v116 + 1))
            {
              *v93 = **((double **)&v132 + 1);
              CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v123);
              CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v86);
            }
            goto LABEL_283;
          }
          goto LABEL_209;
        }
      }
      else
      {
        if (v9 == 65552)
        {
          v28 = (*((_WORD *)this + 44) & 1) == 0;
          if ((*((_WORD *)this + 44) & 1) != 0)
            v29 = 1;
          else
            v29 = 2;
          if (((unsigned __int16)v29 & *((_WORD *)a2 + 44)) != 0)
            return _ZN6CoreMLL19vectorizeMultiArrayIdDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_((uint64_t)this, (*((_WORD *)this + 44) & 1) == 0, (uint64_t)a2);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v101, (uint64_t)this);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v96, (uint64_t)a2);
          if (v98 - (_QWORD)v97 == v103 - v102 && !memcmp(v102, v97, v98 - (_QWORD)v97))
          {
            v123 = 0;
            v124 = &v123;
            v125 = 0x4802000000;
            v126 = __Block_byref_object_copy__11742;
            v127 = __Block_byref_object_dispose__11743;
            v107 = 0;
            v108 = &v107;
            v109 = 0x4802000000;
            v110 = __Block_byref_object_copy__11742;
            v111 = __Block_byref_object_dispose__11743;
            _Block_object_dispose(&v107, 8);
            _Block_object_dispose(&v123, 8);
            if (v103 != v102 && v106)
            {
              v123 = 0;
              v124 = &v123;
              v125 = 0xD802000000;
              v126 = __Block_byref_object_copy__10;
              v127 = __Block_byref_object_dispose__11;
              v107 = 0;
              v108 = &v107;
              v109 = 0xD802000000;
              v110 = __Block_byref_object_copy__10;
              v111 = __Block_byref_object_dispose__11;
              v128 = 0u;
              v129 = 0u;
              v130 = 0u;
              v131 = 0u;
              v132 = 0u;
              v133 = 0u;
              v134 = 0u;
              v135 = 0u;
              v136 = 0u;
              v137 = 0u;
              v138 = 0u;
              v112 = 0u;
              v113 = 0u;
              v114 = 0u;
              v115 = 0u;
              v116 = 0u;
              v117 = 0u;
              v118 = 0u;
              v119 = 0u;
              v120 = 0u;
              v121 = 0u;
              v122 = 0u;
              _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor((uint64_t)&v97, v99, v100, (uint64_t)&v112);
              _Block_object_dispose(&v107, 8);
              _Block_object_dispose(&v123, 8);
            }
            CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v123, (uint64_t)v101, v28, 1);
            CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v107, (uint64_t)v101, 1, 0);
            _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v86, (uint64_t)v96, v28, 1);
            while (*((_QWORD *)&v132 + 1) != *((_QWORD *)&v116 + 1))
            {
              _D0 = **((_QWORD **)&v132 + 1);
              __asm { FCVT            H0, D0 }
              *(_WORD *)v93 = _D0;
              CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v123);
              _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v86);
            }
            goto LABEL_283;
          }
          goto LABEL_209;
        }
        if (v9 == 65568)
        {
          v10 = (*((_WORD *)this + 44) & 1) == 0;
          if ((*((_WORD *)this + 44) & 1) != 0)
            v11 = 1;
          else
            v11 = 2;
          if (((unsigned __int16)v11 & *((_WORD *)a2 + 44)) != 0)
            return CoreML::vectorizeMultiArray<double,float>((uint64_t)this, (*((_WORD *)this + 44) & 1) == 0, (uint64_t)a2);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v101, (uint64_t)this);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v96, (uint64_t)a2);
          if (v98 - (_QWORD)v97 == v103 - v102 && !memcmp(v102, v97, v98 - (_QWORD)v97))
          {
            v123 = 0;
            v124 = &v123;
            v125 = 0x4802000000;
            v126 = __Block_byref_object_copy__11742;
            v127 = __Block_byref_object_dispose__11743;
            v107 = 0;
            v108 = &v107;
            v109 = 0x4802000000;
            v110 = __Block_byref_object_copy__11742;
            v111 = __Block_byref_object_dispose__11743;
            _Block_object_dispose(&v107, 8);
            _Block_object_dispose(&v123, 8);
            if (v103 != v102 && v106)
            {
              v123 = 0;
              v124 = &v123;
              v125 = 0xD802000000;
              v126 = __Block_byref_object_copy__10;
              v127 = __Block_byref_object_dispose__11;
              v107 = 0;
              v108 = &v107;
              v109 = 0xD802000000;
              v110 = __Block_byref_object_copy__10;
              v111 = __Block_byref_object_dispose__11;
              v128 = 0u;
              v129 = 0u;
              v130 = 0u;
              v131 = 0u;
              v132 = 0u;
              v133 = 0u;
              v134 = 0u;
              v135 = 0u;
              v136 = 0u;
              v137 = 0u;
              v138 = 0u;
              v112 = 0u;
              v113 = 0u;
              v114 = 0u;
              v115 = 0u;
              v116 = 0u;
              v117 = 0u;
              v118 = 0u;
              v119 = 0u;
              v120 = 0u;
              v121 = 0u;
              v122 = 0u;
              CoreML::initBNNSDArrayDescriptor<float>((uint64_t)&v97, v99, v100, (uint64_t)&v112);
              _Block_object_dispose(&v107, 8);
              _Block_object_dispose(&v123, 8);
            }
            CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v123, (uint64_t)v101, v10, 1);
            CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v107, (uint64_t)v101, 1, 0);
            CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v86, (uint64_t)v96, v10, 1);
            while (*((_QWORD *)&v132 + 1) != *((_QWORD *)&v116 + 1))
            {
              v44 = **((double **)&v132 + 1);
              *(float *)v93 = v44;
              CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v123);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v86);
            }
            goto LABEL_283;
          }
          goto LABEL_209;
        }
      }
    }
  }
  else if (v4 == 65552)
  {
    v12 = *((_DWORD *)a2 + 18);
    if (v12 > 65599)
    {
      if (v12 == 131104)
      {
        v38 = (*((_WORD *)this + 44) & 1) == 0;
        if ((*((_WORD *)this + 44) & 1) != 0)
          v39 = 1;
        else
          v39 = 2;
        if (((unsigned __int16)v39 & *((_WORD *)a2 + 44)) != 0)
          return _ZN6CoreMLL19vectorizeMultiArrayIDF16_iEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_((uint64_t)this, (*((_WORD *)this + 44) & 1) == 0, (uint64_t)a2);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v101, (uint64_t)this);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v96, (uint64_t)a2);
        if (v98 - (_QWORD)v97 == v103 - v102 && !memcmp(v102, v97, v98 - (_QWORD)v97))
        {
          v123 = 0;
          v124 = &v123;
          v125 = 0x4802000000;
          v126 = __Block_byref_object_copy__11742;
          v127 = __Block_byref_object_dispose__11743;
          v107 = 0;
          v108 = &v107;
          v109 = 0x4802000000;
          v110 = __Block_byref_object_copy__11742;
          v111 = __Block_byref_object_dispose__11743;
          _Block_object_dispose(&v107, 8);
          _Block_object_dispose(&v123, 8);
          if (v103 != v102 && v106)
          {
            v123 = 0;
            v124 = &v123;
            v125 = 0xD802000000;
            v126 = __Block_byref_object_copy__10;
            v127 = __Block_byref_object_dispose__11;
            v107 = 0;
            v108 = &v107;
            v109 = 0xD802000000;
            v110 = __Block_byref_object_copy__10;
            v111 = __Block_byref_object_dispose__11;
            v128 = 0u;
            v129 = 0u;
            v130 = 0u;
            v131 = 0u;
            v132 = 0u;
            v133 = 0u;
            v134 = 0u;
            v135 = 0u;
            v136 = 0u;
            v137 = 0u;
            v138 = 0u;
            v112 = 0u;
            v113 = 0u;
            v114 = 0u;
            v115 = 0u;
            v116 = 0u;
            v117 = 0u;
            v118 = 0u;
            v119 = 0u;
            v120 = 0u;
            v121 = 0u;
            v122 = 0u;
            v66 = _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor((uint64_t)&v102, v104, v105, (uint64_t)&v128);
            v67 = CoreML::initBNNSDArrayDescriptor<int>((uint64_t)&v97, v99, v100, (uint64_t)(v108 + 5));
            if (v66 && v67)
            {
              v86 = MEMORY[0x1E0C809B0];
              v87 = 0x40000000;
              v88 = ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_iEEbRKNS_16MultiArrayBufferERS1__block_invoke;
              v89 = &unk_1E3D65DB8;
              v92 = v96;
              v90 = &v123;
              v91 = &v107;
              CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v101, &v86);
              goto LABEL_246;
            }
            _Block_object_dispose(&v107, 8);
            _Block_object_dispose(&v123, 8);
          }
          _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v123, (uint64_t)v101, v38, 1);
          _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v107, (uint64_t)v101, 1, 0);
          CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v86, (uint64_t)v96, v38, 1);
          while (*((_QWORD *)&v132 + 1) != *((_QWORD *)&v116 + 1))
          {
            _H0 = **((_WORD **)&v132 + 1);
            __asm { FCVT            S0, H0 }
            *(_DWORD *)v93 = (int)_S0;
            _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v123);
            CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v86);
          }
          goto LABEL_283;
        }
        goto LABEL_209;
      }
      if (v12 == 65600)
      {
        v22 = (*((_WORD *)this + 44) & 1) == 0;
        if ((*((_WORD *)this + 44) & 1) != 0)
          v23 = 1;
        else
          v23 = 2;
        if (((unsigned __int16)v23 & *((_WORD *)a2 + 44)) != 0)
          return _ZN6CoreMLL19vectorizeMultiArrayIDF16_dEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_((uint64_t)this, (*((_WORD *)this + 44) & 1) == 0, (uint64_t)a2);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v101, (uint64_t)this);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v96, (uint64_t)a2);
        if (v98 - (_QWORD)v97 == v103 - v102 && !memcmp(v102, v97, v98 - (_QWORD)v97))
        {
          v123 = 0;
          v124 = &v123;
          v125 = 0x4802000000;
          v126 = __Block_byref_object_copy__11742;
          v127 = __Block_byref_object_dispose__11743;
          v107 = 0;
          v108 = &v107;
          v109 = 0x4802000000;
          v110 = __Block_byref_object_copy__11742;
          v111 = __Block_byref_object_dispose__11743;
          _Block_object_dispose(&v107, 8);
          _Block_object_dispose(&v123, 8);
          if (v103 != v102 && v106)
          {
            v123 = 0;
            v124 = &v123;
            v125 = 0xD802000000;
            v126 = __Block_byref_object_copy__10;
            v127 = __Block_byref_object_dispose__11;
            v107 = 0;
            v108 = &v107;
            v109 = 0xD802000000;
            v110 = __Block_byref_object_copy__10;
            v111 = __Block_byref_object_dispose__11;
            v128 = 0u;
            v129 = 0u;
            v130 = 0u;
            v131 = 0u;
            v132 = 0u;
            v133 = 0u;
            v134 = 0u;
            v135 = 0u;
            v136 = 0u;
            v137 = 0u;
            v138 = 0u;
            v112 = 0u;
            v113 = 0u;
            v114 = 0u;
            v115 = 0u;
            v116 = 0u;
            v117 = 0u;
            v118 = 0u;
            v119 = 0u;
            v120 = 0u;
            v121 = 0u;
            v122 = 0u;
            _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor((uint64_t)&v102, v104, v105, (uint64_t)&v128);
            _Block_object_dispose(&v107, 8);
            _Block_object_dispose(&v123, 8);
          }
          _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v123, (uint64_t)v101, v22, 1);
          _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v107, (uint64_t)v101, 1, 0);
          CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v86, (uint64_t)v96, v22, 1);
          while (*((_QWORD *)&v132 + 1) != *((_QWORD *)&v116 + 1))
          {
            _H0 = **((_WORD **)&v132 + 1);
            __asm { FCVT            D0, H0 }
            *(_QWORD *)v93 = _D0;
            _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v123);
            CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v86);
          }
          goto LABEL_283;
        }
        goto LABEL_209;
      }
    }
    else
    {
      if (v12 == 65552)
      {
        v30 = (*((_WORD *)this + 44) & 1) == 0;
        if ((*((_WORD *)this + 44) & 1) != 0)
          v31 = 1;
        else
          v31 = 2;
        if (((unsigned __int16)v31 & *((_WORD *)a2 + 44)) != 0)
          return _ZN6CoreMLL19vectorizeMultiArrayIDF16_DF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_((uint64_t)this, (*((_WORD *)this + 44) & 1) == 0, (uint64_t)a2);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v101, (uint64_t)this);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v96, (uint64_t)a2);
        if (v98 - (_QWORD)v97 == v103 - v102 && !memcmp(v102, v97, v98 - (_QWORD)v97))
        {
          v123 = 0;
          v124 = &v123;
          v125 = 0x4802000000;
          v126 = __Block_byref_object_copy__11742;
          v127 = __Block_byref_object_dispose__11743;
          v107 = 0;
          v108 = &v107;
          v109 = 0x4802000000;
          v110 = __Block_byref_object_copy__11742;
          v111 = __Block_byref_object_dispose__11743;
          if (CoreML::initVIBuffer((CoreML *)v101, (const CoreML::MultiArrayBuffer *)&v128, v60)
            && CoreML::initVIBuffer((CoreML *)v96, (const CoreML::MultiArrayBuffer *)(v108 + 5), v61))
          {
            v86 = MEMORY[0x1E0C809B0];
            v87 = 0x40000000;
            v88 = ___ZN6CoreMLL16copyMultiArrayVIIDF16_DF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke;
            v89 = &unk_1E3D65E08;
            v92 = v96;
            v90 = &v123;
            v91 = &v107;
            CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v101, &v86);
            goto LABEL_246;
          }
          _Block_object_dispose(&v107, 8);
          _Block_object_dispose(&v123, 8);
          if (v103 != v102 && v106)
          {
            v123 = 0;
            v124 = &v123;
            v125 = 0xD802000000;
            v126 = __Block_byref_object_copy__10;
            v127 = __Block_byref_object_dispose__11;
            v107 = 0;
            v108 = &v107;
            v109 = 0xD802000000;
            v110 = __Block_byref_object_copy__10;
            v111 = __Block_byref_object_dispose__11;
            v128 = 0u;
            v129 = 0u;
            v130 = 0u;
            v131 = 0u;
            v132 = 0u;
            v133 = 0u;
            v134 = 0u;
            v135 = 0u;
            v136 = 0u;
            v137 = 0u;
            v138 = 0u;
            v112 = 0u;
            v113 = 0u;
            v114 = 0u;
            v115 = 0u;
            v116 = 0u;
            v117 = 0u;
            v118 = 0u;
            v119 = 0u;
            v120 = 0u;
            v121 = 0u;
            v122 = 0u;
            v76 = _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor((uint64_t)&v102, v104, v105, (uint64_t)&v128);
            v77 = _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor((uint64_t)&v97, v99, v100, (uint64_t)(v108 + 5));
            if (v76 && v77)
            {
              v86 = MEMORY[0x1E0C809B0];
              v87 = 0x40000000;
              v88 = ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_DF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke;
              v89 = &unk_1E3D65E58;
              v92 = v96;
              v90 = &v123;
              v91 = &v107;
              CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v101, &v86);
              goto LABEL_246;
            }
            _Block_object_dispose(&v107, 8);
            _Block_object_dispose(&v123, 8);
          }
          _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v123, (uint64_t)v101, v30, 1);
          _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v107, (uint64_t)v101, 1, 0);
          _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v86, (uint64_t)v96, v30, 1);
          while (*((_QWORD *)&v132 + 1) != *((_QWORD *)&v116 + 1))
          {
            *(_WORD *)v93 = **((_WORD **)&v132 + 1);
            _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v123);
            _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v86);
          }
          goto LABEL_283;
        }
        goto LABEL_209;
      }
      if (v12 == 65568)
      {
        v13 = (*((_WORD *)this + 44) & 1) == 0;
        if ((*((_WORD *)this + 44) & 1) != 0)
          v14 = 1;
        else
          v14 = 2;
        if (((unsigned __int16)v14 & *((_WORD *)a2 + 44)) != 0)
          return _ZN6CoreMLL19vectorizeMultiArrayIDF16_fEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_((uint64_t)this, (*((_WORD *)this + 44) & 1) == 0, (uint64_t)a2);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v101, (uint64_t)this);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v96, (uint64_t)a2);
        if (v98 - (_QWORD)v97 == v103 - v102 && !memcmp(v102, v97, v98 - (_QWORD)v97))
        {
          v123 = 0;
          v124 = &v123;
          v125 = 0x4802000000;
          v126 = __Block_byref_object_copy__11742;
          v127 = __Block_byref_object_dispose__11743;
          v107 = 0;
          v108 = &v107;
          v109 = 0x4802000000;
          v110 = __Block_byref_object_copy__11742;
          v111 = __Block_byref_object_dispose__11743;
          if (CoreML::initVIBuffer((CoreML *)v101, (const CoreML::MultiArrayBuffer *)&v128, v45)
            && CoreML::initVIBuffer((CoreML *)v96, (const CoreML::MultiArrayBuffer *)(v108 + 5), v46))
          {
            v86 = MEMORY[0x1E0C809B0];
            v87 = 0x40000000;
            v88 = ___ZN6CoreMLL16copyMultiArrayVIIDF16_fEEbRKNS_16MultiArrayBufferERS1__block_invoke;
            v89 = &unk_1E3D65D18;
            v92 = v96;
            v90 = &v123;
            v91 = &v107;
            CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v101, &v86);
            goto LABEL_246;
          }
          _Block_object_dispose(&v107, 8);
          _Block_object_dispose(&v123, 8);
          if (v103 != v102 && v106)
          {
            v123 = 0;
            v124 = &v123;
            v125 = 0xD802000000;
            v126 = __Block_byref_object_copy__10;
            v127 = __Block_byref_object_dispose__11;
            v107 = 0;
            v108 = &v107;
            v109 = 0xD802000000;
            v110 = __Block_byref_object_copy__10;
            v111 = __Block_byref_object_dispose__11;
            v128 = 0u;
            v129 = 0u;
            v130 = 0u;
            v131 = 0u;
            v132 = 0u;
            v133 = 0u;
            v134 = 0u;
            v135 = 0u;
            v136 = 0u;
            v137 = 0u;
            v138 = 0u;
            v112 = 0u;
            v113 = 0u;
            v114 = 0u;
            v115 = 0u;
            v116 = 0u;
            v117 = 0u;
            v118 = 0u;
            v119 = 0u;
            v120 = 0u;
            v121 = 0u;
            v122 = 0u;
            v72 = _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor((uint64_t)&v102, v104, v105, (uint64_t)&v128);
            v73 = CoreML::initBNNSDArrayDescriptor<float>((uint64_t)&v97, v99, v100, (uint64_t)(v108 + 5));
            if (v72 && v73)
            {
              v86 = MEMORY[0x1E0C809B0];
              v87 = 0x40000000;
              v88 = ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_fEEbRKNS_16MultiArrayBufferERS1__block_invoke;
              v89 = &unk_1E3D65D68;
              v92 = v96;
              v90 = &v123;
              v91 = &v107;
              CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v101, &v86);
              goto LABEL_246;
            }
            _Block_object_dispose(&v107, 8);
            _Block_object_dispose(&v123, 8);
          }
          _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v123, (uint64_t)v101, v13, 1);
          _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v107, (uint64_t)v101, 1, 0);
          CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v86, (uint64_t)v96, v13, 1);
          while (*((_QWORD *)&v132 + 1) != *((_QWORD *)&v116 + 1))
          {
            _H0 = **((_WORD **)&v132 + 1);
            __asm { FCVT            S0, H0 }
            *(_DWORD *)v93 = _S0;
            _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v123);
            CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v86);
          }
LABEL_283:
          if (__p)
          {
            v95 = __p;
            operator delete(__p);
          }
          CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v86);
          if (*((_QWORD *)&v117 + 1))
          {
            *(_QWORD *)&v118 = *((_QWORD *)&v117 + 1);
            operator delete(*((void **)&v117 + 1));
          }
          CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v107);
          if (*((_QWORD *)&v133 + 1))
          {
            *(_QWORD *)&v134 = *((_QWORD *)&v133 + 1);
            operator delete(*((void **)&v133 + 1));
          }
          CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v123);
          goto LABEL_290;
        }
LABEL_209:
        v2 = 0;
LABEL_210:
        CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v96);
        CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v101);
      }
    }
  }
  else if (v4 == 65568)
  {
    v5 = *((_DWORD *)a2 + 18);
    if (v5 > 65599)
    {
      if (v5 == 131104)
      {
        v34 = (*((_WORD *)this + 44) & 1) == 0;
        if ((*((_WORD *)this + 44) & 1) != 0)
          v35 = 1;
        else
          v35 = 2;
        if (((unsigned __int16)v35 & *((_WORD *)a2 + 44)) != 0)
          return CoreML::vectorizeMultiArray<float,int>((uint64_t)this, (*((_WORD *)this + 44) & 1) == 0, (uint64_t)a2);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v101, (uint64_t)this);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v96, (uint64_t)a2);
        if (v98 - (_QWORD)v97 == v103 - v102 && !memcmp(v102, v97, v98 - (_QWORD)v97))
        {
          v123 = 0;
          v124 = &v123;
          v125 = 0x4802000000;
          v126 = __Block_byref_object_copy__11742;
          v127 = __Block_byref_object_dispose__11743;
          v107 = 0;
          v108 = &v107;
          v109 = 0x4802000000;
          v110 = __Block_byref_object_copy__11742;
          v111 = __Block_byref_object_dispose__11743;
          _Block_object_dispose(&v107, 8);
          _Block_object_dispose(&v123, 8);
          if (v103 != v102 && v106)
          {
            v123 = 0;
            v124 = &v123;
            v125 = 0xD802000000;
            v126 = __Block_byref_object_copy__10;
            v127 = __Block_byref_object_dispose__11;
            v107 = 0;
            v108 = &v107;
            v109 = 0xD802000000;
            v110 = __Block_byref_object_copy__10;
            v111 = __Block_byref_object_dispose__11;
            v128 = 0u;
            v129 = 0u;
            v130 = 0u;
            v131 = 0u;
            v132 = 0u;
            v133 = 0u;
            v134 = 0u;
            v135 = 0u;
            v136 = 0u;
            v137 = 0u;
            v138 = 0u;
            v112 = 0u;
            v113 = 0u;
            v114 = 0u;
            v115 = 0u;
            v116 = 0u;
            v117 = 0u;
            v118 = 0u;
            v119 = 0u;
            v120 = 0u;
            v121 = 0u;
            v122 = 0u;
            v64 = CoreML::initBNNSDArrayDescriptor<float>((uint64_t)&v102, v104, v105, (uint64_t)&v128);
            v65 = CoreML::initBNNSDArrayDescriptor<int>((uint64_t)&v97, v99, v100, (uint64_t)(v108 + 5));
            if (v64 && v65)
            {
              v86 = MEMORY[0x1E0C809B0];
              v87 = 0x40000000;
              v88 = ___ZN6CoreMLL18copyMultiArrayBNNSIfiEEbRKNS_16MultiArrayBufferERS1__block_invoke;
              v89 = &unk_1E3D65AE8;
              v92 = v96;
              v90 = &v123;
              v91 = &v107;
              CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v101, &v86);
              goto LABEL_246;
            }
            _Block_object_dispose(&v107, 8);
            _Block_object_dispose(&v123, 8);
          }
          CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v123, (uint64_t)v101, v34, 1);
          CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v107, (uint64_t)v101, 1, 0);
          CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v86, (uint64_t)v96, v34, 1);
          while (*((_QWORD *)&v132 + 1) != *((_QWORD *)&v116 + 1))
          {
            *(_DWORD *)v93 = (int)**((float **)&v132 + 1);
            CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v123);
            CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v86);
          }
          goto LABEL_283;
        }
        goto LABEL_209;
      }
      if (v5 == 65600)
      {
        v18 = (*((_WORD *)this + 44) & 1) == 0;
        if ((*((_WORD *)this + 44) & 1) != 0)
          v19 = 1;
        else
          v19 = 2;
        if (((unsigned __int16)v19 & *((_WORD *)a2 + 44)) != 0)
          return CoreML::vectorizeMultiArray<float,double>((uint64_t)this, (*((_WORD *)this + 44) & 1) == 0, (uint64_t)a2);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v101, (uint64_t)this);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v96, (uint64_t)a2);
        if (v98 - (_QWORD)v97 == v103 - v102 && !memcmp(v102, v97, v98 - (_QWORD)v97))
        {
          v123 = 0;
          v124 = &v123;
          v125 = 0x4802000000;
          v126 = __Block_byref_object_copy__11742;
          v127 = __Block_byref_object_dispose__11743;
          v107 = 0;
          v108 = &v107;
          v109 = 0x4802000000;
          v110 = __Block_byref_object_copy__11742;
          v111 = __Block_byref_object_dispose__11743;
          _Block_object_dispose(&v107, 8);
          _Block_object_dispose(&v123, 8);
          if (v103 != v102 && v106)
          {
            v123 = 0;
            v124 = &v123;
            v125 = 0xD802000000;
            v126 = __Block_byref_object_copy__10;
            v127 = __Block_byref_object_dispose__11;
            v107 = 0;
            v108 = &v107;
            v109 = 0xD802000000;
            v110 = __Block_byref_object_copy__10;
            v111 = __Block_byref_object_dispose__11;
            v128 = 0u;
            v129 = 0u;
            v130 = 0u;
            v131 = 0u;
            v132 = 0u;
            v133 = 0u;
            v134 = 0u;
            v135 = 0u;
            v136 = 0u;
            v137 = 0u;
            v138 = 0u;
            v112 = 0u;
            v113 = 0u;
            v114 = 0u;
            v115 = 0u;
            v116 = 0u;
            v117 = 0u;
            v118 = 0u;
            v119 = 0u;
            v120 = 0u;
            v121 = 0u;
            v122 = 0u;
            CoreML::initBNNSDArrayDescriptor<float>((uint64_t)&v102, v104, v105, (uint64_t)&v128);
            _Block_object_dispose(&v107, 8);
            _Block_object_dispose(&v123, 8);
          }
          CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v123, (uint64_t)v101, v18, 1);
          CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v107, (uint64_t)v101, 1, 0);
          CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v86, (uint64_t)v96, v18, 1);
          while (*((_QWORD *)&v132 + 1) != *((_QWORD *)&v116 + 1))
          {
            *v93 = **((float **)&v132 + 1);
            CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v123);
            CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v86);
          }
          goto LABEL_283;
        }
        goto LABEL_209;
      }
    }
    else
    {
      if (v5 == 65552)
      {
        v26 = (*((_WORD *)this + 44) & 1) == 0;
        if ((*((_WORD *)this + 44) & 1) != 0)
          v27 = 1;
        else
          v27 = 2;
        if (((unsigned __int16)v27 & *((_WORD *)a2 + 44)) != 0)
          return _ZN6CoreMLL19vectorizeMultiArrayIfDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_((uint64_t)this, (*((_WORD *)this + 44) & 1) == 0, (uint64_t)a2);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v101, (uint64_t)this);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v96, (uint64_t)a2);
        if (v98 - (_QWORD)v97 == v103 - v102 && !memcmp(v102, v97, v98 - (_QWORD)v97))
        {
          v123 = 0;
          v124 = &v123;
          v125 = 0x4802000000;
          v126 = __Block_byref_object_copy__11742;
          v127 = __Block_byref_object_dispose__11743;
          v107 = 0;
          v108 = &v107;
          v109 = 0x4802000000;
          v110 = __Block_byref_object_copy__11742;
          v111 = __Block_byref_object_dispose__11743;
          if (CoreML::initVIBuffer((CoreML *)v101, (const CoreML::MultiArrayBuffer *)&v128, v57)
            && CoreML::initVIBuffer((CoreML *)v96, (const CoreML::MultiArrayBuffer *)(v108 + 5), v58))
          {
            v86 = MEMORY[0x1E0C809B0];
            v87 = 0x40000000;
            v88 = ___ZN6CoreMLL16copyMultiArrayVIIfDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke;
            v89 = &unk_1E3D65B38;
            v92 = v96;
            v90 = &v123;
            v91 = &v107;
            CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v101, &v86);
            goto LABEL_246;
          }
          _Block_object_dispose(&v107, 8);
          _Block_object_dispose(&v123, 8);
          if (v103 != v102 && v106)
          {
            v123 = 0;
            v124 = &v123;
            v125 = 0xD802000000;
            v126 = __Block_byref_object_copy__10;
            v127 = __Block_byref_object_dispose__11;
            v107 = 0;
            v108 = &v107;
            v109 = 0xD802000000;
            v110 = __Block_byref_object_copy__10;
            v111 = __Block_byref_object_dispose__11;
            v128 = 0u;
            v129 = 0u;
            v130 = 0u;
            v131 = 0u;
            v132 = 0u;
            v133 = 0u;
            v134 = 0u;
            v135 = 0u;
            v136 = 0u;
            v137 = 0u;
            v138 = 0u;
            v112 = 0u;
            v113 = 0u;
            v114 = 0u;
            v115 = 0u;
            v116 = 0u;
            v117 = 0u;
            v118 = 0u;
            v119 = 0u;
            v120 = 0u;
            v121 = 0u;
            v122 = 0u;
            v74 = CoreML::initBNNSDArrayDescriptor<float>((uint64_t)&v102, v104, v105, (uint64_t)&v128);
            v75 = _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor((uint64_t)&v97, v99, v100, (uint64_t)(v108 + 5));
            if (v74 && v75)
            {
              v86 = MEMORY[0x1E0C809B0];
              v87 = 0x40000000;
              v88 = ___ZN6CoreMLL18copyMultiArrayBNNSIfDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke;
              v89 = &unk_1E3D65B88;
              v92 = v96;
              v90 = &v123;
              v91 = &v107;
              CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v101, &v86);
              goto LABEL_246;
            }
            _Block_object_dispose(&v107, 8);
            _Block_object_dispose(&v123, 8);
          }
          CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v123, (uint64_t)v101, v26, 1);
          CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v107, (uint64_t)v101, 1, 0);
          _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v86, (uint64_t)v96, v26, 1);
          while (*((_QWORD *)&v132 + 1) != *((_QWORD *)&v116 + 1))
          {
            _S0 = **((_DWORD **)&v132 + 1);
            __asm { FCVT            H0, S0 }
            *(_WORD *)v93 = _S0;
            CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v123);
            _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v86);
          }
          goto LABEL_283;
        }
        goto LABEL_209;
      }
      if (v5 == 65568)
      {
        v6 = (*((_WORD *)this + 44) & 1) == 0;
        if ((*((_WORD *)this + 44) & 1) != 0)
          v7 = 1;
        else
          v7 = 2;
        if (((unsigned __int16)v7 & *((_WORD *)a2 + 44)) != 0)
          return CoreML::vectorizeMultiArray<float,float>((uint64_t)this, (*((_WORD *)this + 44) & 1) == 0, (uint64_t)a2);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v101, (uint64_t)this);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v96, (uint64_t)a2);
        if (v98 - (_QWORD)v97 == v103 - v102 && !memcmp(v102, v97, v98 - (_QWORD)v97))
        {
          v123 = 0;
          v124 = &v123;
          v125 = 0x4802000000;
          v126 = __Block_byref_object_copy__11742;
          v127 = __Block_byref_object_dispose__11743;
          v107 = 0;
          v108 = &v107;
          v109 = 0x4802000000;
          v110 = __Block_byref_object_copy__11742;
          v111 = __Block_byref_object_dispose__11743;
          if (CoreML::initVIBuffer((CoreML *)v101, (const CoreML::MultiArrayBuffer *)&v128, v42)
            && CoreML::initVIBuffer((CoreML *)v96, (const CoreML::MultiArrayBuffer *)(v108 + 5), v43))
          {
            v86 = MEMORY[0x1E0C809B0];
            v87 = 0x40000000;
            v88 = ___ZN6CoreMLL16copyMultiArrayVIIffEEbRKNS_16MultiArrayBufferERS1__block_invoke;
            v89 = &unk_1E3D65A48;
            v92 = v96;
            v90 = &v123;
            v91 = &v107;
            CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v101, &v86);
LABEL_246:
            _Block_object_dispose(&v107, 8);
            _Block_object_dispose(&v123, 8);
LABEL_290:
            v2 = 1;
            goto LABEL_210;
          }
          _Block_object_dispose(&v107, 8);
          _Block_object_dispose(&v123, 8);
          if (v103 != v102 && v106)
          {
            v123 = 0;
            v124 = &v123;
            v125 = 0xD802000000;
            v126 = __Block_byref_object_copy__10;
            v127 = __Block_byref_object_dispose__11;
            v107 = 0;
            v108 = &v107;
            v109 = 0xD802000000;
            v110 = __Block_byref_object_copy__10;
            v111 = __Block_byref_object_dispose__11;
            v128 = 0u;
            v129 = 0u;
            v130 = 0u;
            v131 = 0u;
            v132 = 0u;
            v133 = 0u;
            v134 = 0u;
            v135 = 0u;
            v136 = 0u;
            v137 = 0u;
            v138 = 0u;
            v112 = 0u;
            v113 = 0u;
            v114 = 0u;
            v115 = 0u;
            v116 = 0u;
            v117 = 0u;
            v118 = 0u;
            v119 = 0u;
            v120 = 0u;
            v121 = 0u;
            v122 = 0u;
            v70 = CoreML::initBNNSDArrayDescriptor<float>((uint64_t)&v102, v104, v105, (uint64_t)&v128);
            v71 = CoreML::initBNNSDArrayDescriptor<float>((uint64_t)&v97, v99, v100, (uint64_t)(v108 + 5));
            if (v70 && v71)
            {
              v86 = MEMORY[0x1E0C809B0];
              v87 = 0x40000000;
              v88 = ___ZN6CoreMLL18copyMultiArrayBNNSIffEEbRKNS_16MultiArrayBufferERS1__block_invoke;
              v89 = &unk_1E3D65A98;
              v92 = v96;
              v90 = &v123;
              v91 = &v107;
              CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v101, &v86);
              goto LABEL_246;
            }
            _Block_object_dispose(&v107, 8);
            _Block_object_dispose(&v123, 8);
          }
          CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v123, (uint64_t)v101, v6, 1);
          CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v107, (uint64_t)v101, 1, 0);
          CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v86, (uint64_t)v96, v6, 1);
          while (*((_QWORD *)&v132 + 1) != *((_QWORD *)&v116 + 1))
          {
            *(_DWORD *)v93 = **((_DWORD **)&v132 + 1);
            CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v123);
            CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v86);
          }
          goto LABEL_283;
        }
        goto LABEL_209;
      }
    }
  }
  return v2 & 1;
}

void sub_19C4A0030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&STACK[0x278], 8);
  CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&a33);
  CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&a47);
  _Unwind_Resume(a1);
}

void sub_19C4A03DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::__on_zero_shared(uint64_t result)
{
  void **v1;

  if (*(_QWORD *)(result + 24))
  {
    v1 = *(void ***)(result + 24);
    std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100](&v1);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>>>::~__hash_table(result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MIL::Blob::StorageData const>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_19C4A0658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C4A0740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4A08D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C4A0940()
{
  void *v0;

  JUMPOUT(0x19C4A0938);
}

void sub_19C4A098C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4A0DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  void *v26;

  if (a2)
  {

    objc_begin_catch(exception_object);
    JUMPOUT(0x19C4A0CE0);
  }
  _Unwind_Resume(exception_object);
}

id MLLoggingGetCoreChannel()
{
  if (MLLoggingGetCoreChannel_onceToken != -1)
    dispatch_once(&MLLoggingGetCoreChannel_onceToken, &__block_literal_global_14931);
  return (id)MLLoggingGetCoreChannel_coreChannel;
}

uint64_t IArchive::hasNestedArchive(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;

  v4 = a1 + 3;
  v5 = (_QWORD *)a1[3];
  if (!v5)
    return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 48))(*a1, a2);
  v6 = a1 + 3;
  do
  {
    v7 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v5 + 4, a2);
    v8 = v5 + 1;
    if (!v7)
    {
      v8 = v5;
      v6 = v5;
    }
    v5 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v4 || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, v6 + 4))
    return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 48))(*a1, a2);
  else
    return 1;
}

BOOL Archiver::_IArchiveDiskImpl::hasNestedArchive(uint64_t a1, uint64_t a2)
{
  size_t v4;
  std::string *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  _BOOL8 v14;
  std::string __p;
  std::string v17;
  _QWORD v18[2];
  _BYTE v19[408];
  _QWORD v20[20];

  v20[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 31) >= 0)
    v4 = *(unsigned __int8 *)(a1 + 31);
  else
    v4 = *(_QWORD *)(a1 + 16);
  v5 = &v17;
  std::string::basic_string[abi:ne180100]((uint64_t)&v17, v4 + 1);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)v17.__r_.__value_.__r.__words[0];
  if (v4)
  {
    v8 = *(char **)(a1 + 8);
    v7 = (char *)(a1 + 8);
    v6 = v8;
    if (v7[23] >= 0)
      v9 = v7;
    else
      v9 = v6;
    memmove(v5, v9, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 47;
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a2;
  else
    v11 = *(const std::string::value_type **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = std::string::append(&v17, v11, v12);
  __p = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  std::ifstream::basic_ifstream(v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v14 = *(_DWORD *)&v19[*(_QWORD *)(v18[0] - 24) + 16] == 0;
  v18[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1A1AD5F48](v19);
  std::istream::~istream();
  MEMORY[0x1A1AD61C4](v20);
  return v14;
}

void sub_19C4A11B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C4A12D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1A1AD61C4](v1 + 424);
  _Unwind_Resume(a1);
}

void sub_19C4A14F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void IArchive::blob(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(&v10, a2, a3);
  v4 = v11;
  *a1 = v10;
  a1[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v11;
    if (v11)
    {
      v8 = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void Archiver::_IArchiveDiskImpl::getNestedArchive(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  _QWORD *v13;
  __int128 v14;
  std::string __p;
  std::string v16;

  if (*(char *)(a1 + 31) >= 0)
    v6 = *(unsigned __int8 *)(a1 + 31);
  else
    v6 = *(_QWORD *)(a1 + 16);
  v7 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*(char *)(a1 + 31) >= 0)
      v8 = (const void *)(a1 + 8);
    else
      v8 = *(const void **)(a1 + 8);
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a2;
  else
    v10 = *(const std::string::value_type **)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = std::string::append(&v16, v10, v11);
  __p = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v13 = operator new(0x50uLL);
  v13[1] = 0;
  v13[2] = 0;
  *v13 = &off_1E3D5BE98;
  *(_QWORD *)&v14 = Archiver::_IArchiveDiskImpl::_IArchiveDiskImpl((uint64_t)(v13 + 3), (uint64_t)&__p, *(_DWORD *)(a1 + 48));
  *((_QWORD *)&v14 + 1) = v13;
  *a3 = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19C4A1730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Archiver::_IArchiveDiskImpl::getBlob(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  void *__p[2];
  std::string::size_type v15;
  std::string v16;

  if (*(char *)(a1 + 31) >= 0)
    v6 = *(unsigned __int8 *)(a1 + 31);
  else
    v6 = *(_QWORD *)(a1 + 16);
  v7 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*(char *)(a1 + 31) >= 0)
      v8 = (const void *)(a1 + 8);
    else
      v8 = *(const void **)(a1 + 8);
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a2;
  else
    v10 = *(const std::string::value_type **)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = std::string::append(&v16, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v15 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  Archiver::_IArchiveDiskImpl::createBlob(a1, (uint64_t)__p, a3);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_19C4A1878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Archiver::_IArchiveDiskImpl::_IArchiveDiskImpl(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  std::string::size_type size;
  std::string *v9;
  std::string *p_msg;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void *v15;
  void *v16;
  _BOOL4 v17;
  size_t v18;
  std::string *v19;
  const void *v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string *v29;
  __int128 v30;
  NSObject *v31;
  std::string *v32;
  std::ios_base::failure *exception;
  const std::error_category *v34;
  std::string *v35;
  __int128 v36;
  NSObject *v37;
  std::string *v38;
  std::ios_base::failure *v39;
  const std::error_category *v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  NSObject *v47;
  std::string *v48;
  std::ios_base::failure *v49;
  const std::error_category *v50;
  std::string v51;
  std::string v52;
  unsigned int __val;
  std::string __msg;
  void *__p[2];
  std::string::size_type v56;
  std::string v57;
  uint64_t v58;
  std::string v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v57 = *(std::string *)a2;
  *(_QWORD *)a1 = off_1E3D5AFD8;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
    v7 = SHIBYTE(v57.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v6 = a1 + 32;
    if (v7 < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)(a1 + 8) = v57;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v6 = a1 + 32;
  }
  *(_QWORD *)a1 = &off_1E3D5B158;
  if (!a3)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__msg, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __msg = *(std::string *)a2;
    std::string::basic_string[abi:ne180100]<0>(&v59, "coremldata.bin");
    if ((__msg.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__msg.__r_.__value_.__r.__words[2]);
    else
      size = __msg.__r_.__value_.__l.__size_;
    v9 = &v57;
    std::string::basic_string[abi:ne180100]((uint64_t)&v57, size + 1);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v57.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((__msg.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_msg = &__msg;
      else
        p_msg = (std::string *)__msg.__r_.__value_.__r.__words[0];
      memmove(v9, p_msg, size);
    }
    *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + size) = 47;
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v59;
    else
      v11 = (std::string *)v59.__r_.__value_.__r.__words[0];
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    else
      v12 = v59.__r_.__value_.__l.__size_;
    v13 = std::string::append(&v57, (const std::string::value_type *)v11, v12);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v56 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(__msg.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__msg.__r_.__value_.__l.__data_);
    std::ifstream::basic_ifstream(&v57);
    if (*(_DWORD *)((char *)&v57 + *(_QWORD *)(v57.__r_.__value_.__r.__words[0] - 24) + 32))
    {
      std::operator+<char>();
      v29 = std::string::append(&v59, ". It is not a valid .mlmodelc file. ");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      __msg.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        v32 = &__msg;
        if ((__msg.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v32 = (std::string *)__msg.__r_.__value_.__r.__words[0];
        LODWORD(v59.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
        _os_log_error_impl(&dword_19C486000, v31, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v59, 0xCu);
      }

      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      v34 = std::iostream_category();
      v59.__r_.__value_.__r.__words[0] = 1;
      v59.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
      std::ios_base::failure::failure(exception, &__msg, (const std::error_code *)&v59);
      __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
    }
    __val = 0;
    std::istream::read();
    if (*(_DWORD *)((char *)&v57 + *(_QWORD *)(v57.__r_.__value_.__r.__words[0] - 24) + 32))
    {
      std::operator+<char>();
      v35 = std::string::append(&v59, ". It is not a valid .mlmodelc file. ");
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      __msg.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        v38 = &__msg;
        if ((__msg.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v38 = (std::string *)__msg.__r_.__value_.__r.__words[0];
        LODWORD(v59.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
        _os_log_error_impl(&dword_19C486000, v37, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v59, 0xCu);
      }

      v39 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      v40 = std::iostream_category();
      v59.__r_.__value_.__r.__words[0] = 1;
      v59.__r_.__value_.__l.__size_ = (std::string::size_type)v40;
      std::ios_base::failure::failure(v39, &__msg, (const std::error_code *)&v59);
      __cxa_throw(v39, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
    }
    +[MLModelTypeRegistry sharedInstance](MLModelTypeRegistry, "sharedInstance");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "classesForLoadingModelType:", __val);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "count") == 0;

    if (v17)
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v52.__r_.__value_.__l.__data_, (const void **)__p, " is not a valid .mlmodelc file because the first word (");
      std::to_string(&v51, __val);
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v51;
      else
        v41 = (std::string *)v51.__r_.__value_.__r.__words[0];
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
      else
        v42 = v51.__r_.__value_.__l.__size_;
      v43 = std::string::append(&v52, (const std::string::value_type *)v41, v42);
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v45 = std::string::append(&v59, ") is not recognizable. ");
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      __msg.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        v48 = &__msg;
        if ((__msg.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v48 = (std::string *)__msg.__r_.__value_.__r.__words[0];
        LODWORD(v59.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
        _os_log_error_impl(&dword_19C486000, v47, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v59, 0xCu);
      }

      v49 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      v50 = std::iostream_category();
      v59.__r_.__value_.__r.__words[0] = 1;
      v59.__r_.__value_.__l.__size_ = (std::string::size_type)v50;
      std::ios_base::failure::failure(v49, &__msg, (const std::error_code *)&v59);
      __cxa_throw(v49, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
    }
    a3 = 1;
    v57.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
    *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words
                              + *(_QWORD *)(v57.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40]
                                                                                                + 24);
    MEMORY[0x1A1AD5F48](&v57.__r_.__value_.__r.__words[2]);
    std::istream::~istream();
    MEMORY[0x1A1AD61C4](&v58);
    if (SHIBYTE(v56) < 0)
      operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 48) = a3;
  std::string::basic_string[abi:ne180100]<0>(&__msg, "coremldata.bin");
  if (*(char *)(a1 + 31) >= 0)
    v18 = *(unsigned __int8 *)(a1 + 31);
  else
    v18 = *(_QWORD *)(a1 + 16);
  v19 = &v57;
  std::string::basic_string[abi:ne180100]((uint64_t)&v57, v18 + 1);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v19 = (std::string *)v57.__r_.__value_.__r.__words[0];
  if (v18)
  {
    if (*(char *)(a1 + 31) >= 0)
      v20 = (const void *)(a1 + 8);
    else
      v20 = *(const void **)(a1 + 8);
    memmove(v19, v20, v18);
  }
  *(_WORD *)((char *)&v19->__r_.__value_.__l.__data_ + v18) = 47;
  if ((__msg.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &__msg;
  else
    v21 = (std::string *)__msg.__r_.__value_.__r.__words[0];
  if ((__msg.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = HIBYTE(__msg.__r_.__value_.__r.__words[2]);
  else
    v22 = __msg.__r_.__value_.__l.__size_;
  v23 = std::string::append(&v57, (const std::string::value_type *)v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v56 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  Archiver::_IArchiveDiskImpl::createBlob(a1, (uint64_t)__p, (uint64_t)&v59);
  std::shared_ptr<MIL::IRProgram const>::operator=[abi:ne180100](v6, (__int128 *)&v59);
  v25 = (std::__shared_weak_count *)v59.__r_.__value_.__l.__size_;
  if (v59.__r_.__value_.__l.__size_)
  {
    v26 = (unint64_t *)(v59.__r_.__value_.__l.__size_ + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (SHIBYTE(v56) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__msg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__msg.__r_.__value_.__l.__data_);
  return a1;
}

void sub_19C4A204C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void **v42;

  if (a28 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a37);
  if (a35 < 0)
    operator delete(a30);
  Archiver::_IArchiveImpl::~_IArchiveImpl(v42);
  _Unwind_Resume(a1);
}

void sub_19C4A21D8()
{
  JUMPOUT(0x19C4A21D0);
}

double Archiver::_IArchiveDiskImpl::createBlob@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v5;
  std::string *v6;
  char *v7;
  std::string *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  NSObject *v21;
  std::string *v22;
  std::runtime_error *v23;
  NSObject *v24;
  std::string *v25;
  std::runtime_error *exception;
  NSObject *v27;
  std::string *v28;
  std::runtime_error *v29;
  std::string *v30;
  __int128 v31;
  NSObject *v32;
  std::string *v33;
  std::runtime_error *v34;
  std::string *v35;
  __int128 v36;
  NSObject *v37;
  std::string *v38;
  std::runtime_error *v39;
  std::string *v40;
  __int128 v41;
  NSObject *v42;
  std::string *v43;
  std::runtime_error *v44;
  std::string *v45;
  __int128 v46;
  NSObject *v47;
  std::string *v48;
  std::runtime_error *v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  int *v54;
  std::string *p_p;
  std::string::size_type size;
  std::string *v57;
  __int128 v58;
  NSObject *v59;
  std::string *v60;
  std::runtime_error *v61;
  std::string __p;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 48) == 2)
  {
    v5 = (char *)operator new(0x78uLL);
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = 0;
    *(_QWORD *)v5 = &off_1E3D5BF08;
    *((_QWORD *)v5 + 3) = &off_1E3D5B080;
    v6 = (std::string *)(v5 + 32);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((_QWORD *)v5 + 6) = *(_QWORD *)(a2 + 16);
    }
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *((_QWORD *)v5 + 3) = &off_1E3D5B300;
    v9 = operator new(0x58uLL);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = &off_1E3D5BFB0;
    Archiver::MMappedFile::MMappedFile((uint64_t)(v9 + 3), (__int128 *)a2);
    v9[3] = &off_1E3D5B3E0;
    v9[9] = 0;
    v9[10] = 0;
    v10 = v9[8];
    if (v10 <= 0x3F)
    {
      std::string::basic_string[abi:ne180100]<0>(&v66, "file does not contain encrypted model header");
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = &v66;
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v25 = (std::string *)v66.__r_.__value_.__r.__words[0];
        LODWORD(v67.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v67.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
        _os_log_error_impl(&dword_19C486000, v24, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v67, 0xCu);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, &v66);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v11 = v9[7];
    if (*(_DWORD *)v11 != 1162759500)
    {
      std::string::basic_string[abi:ne180100]<0>(&v66, "unrecognized magic word in the encrypted model header");
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        v28 = &v66;
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v28 = (std::string *)v66.__r_.__value_.__r.__words[0];
        LODWORD(v67.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v67.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
        _os_log_error_impl(&dword_19C486000, v27, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v67, 0xCu);
      }

      v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v29, &v66);
      __cxa_throw(v29, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (!*(_BYTE *)(v11 + 4) || *(unsigned __int8 *)(v11 + 4) >= 3u)
    {
      std::to_string(&v67, *(unsigned __int8 *)(v11 + 4));
      v19 = std::string::insert(&v67, 0, "unsupported major version = ");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v22 = &v66;
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v22 = (std::string *)v66.__r_.__value_.__r.__words[0];
        LODWORD(v67.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v67.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
        _os_log_error_impl(&dword_19C486000, v21, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v67, 0xCu);
      }

      v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v23, &v66);
      __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (*(_BYTE *)(v11 + 4) == 1)
      v12 = 64;
    else
      v12 = *(unsigned __int8 *)(v11 + 7);
    v13 = v12;
    if (v10 <= v12)
    {
      std::to_string(&v67, v12);
      v30 = std::string::insert(&v67, 0, "file does not contain any payload, sizeOfHeader = ");
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        v33 = &v66;
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v33 = (std::string *)v66.__r_.__value_.__r.__words[0];
        LODWORD(v67.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v67.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
        _os_log_error_impl(&dword_19C486000, v32, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v67, 0xCu);
      }

      v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v34, &v66);
      __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v14 = *(_QWORD *)(v11 + 8);
    if (v14 - 1 >= v10 - v12)
    {
      std::to_string(&v67, *(_QWORD *)(v11 + 8));
      v35 = std::string::insert(&v67, 0, "illegal value for original file size = ");
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        v38 = &v66;
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v38 = (std::string *)v66.__r_.__value_.__r.__words[0];
        LODWORD(v67.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v67.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
        _os_log_error_impl(&dword_19C486000, v37, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v67, 0xCu);
      }

      v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v39, &v66);
      __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v15 = *(_QWORD *)(v11 + 16);
    if (v15)
    {
      if (v15 >> 52)
      {
        std::to_string(&v67, *(_QWORD *)(v11 + 16));
        v40 = std::string::insert(&v67, 0, "illegal value for number of encrypted pages = ");
        v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v66.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v67.__r_.__value_.__l.__data_);
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v42 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          v43 = &v66;
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v43 = (std::string *)v66.__r_.__value_.__r.__words[0];
          LODWORD(v67.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v67.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
          _os_log_error_impl(&dword_19C486000, v42, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v67, 0xCu);
        }

        v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v44, &v66);
        __cxa_throw(v44, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (v10 < v15 << 12)
      {
        std::to_string(&v67, *(_QWORD *)(v11 + 16));
        v45 = std::string::insert(&v67, 0, "illegal number of encrypted pages = ");
        v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v66.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v67.__r_.__value_.__l.__data_);
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v47 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          v48 = &v66;
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v48 = (std::string *)v66.__r_.__value_.__r.__words[0];
          LODWORD(v67.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v67.__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
          _os_log_error_impl(&dword_19C486000, v47, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v67, 0xCu);
        }

        v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v49, &v66);
        __cxa_throw(v49, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v16 = mremap_encrypted();
      if (v16)
      {
        std::to_string(&v64, v16);
        v50 = std::string::insert(&v64, 0, "failed to invoke mremap_encrypted with result = ");
        v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v65.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        v52 = std::string::append(&v65, ", error = ");
        v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        v67.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        v54 = __error();
        std::to_string(&__p, *v54);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v57 = std::string::append(&v67, (const std::string::value_type *)p_p, size);
        v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        v66.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v58;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v67.__r_.__value_.__l.__data_);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64.__r_.__value_.__l.__data_);
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v59 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          v60 = &v66;
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v60 = (std::string *)v66.__r_.__value_.__r.__words[0];
          LODWORD(v67.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v67.__r_.__value_.__r.__words + 4) = (std::string::size_type)v60;
          _os_log_error_impl(&dword_19C486000, v59, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v67, 0xCu);
        }

        v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v61, &v66);
        __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v11 = v9[7];
    }
    v9[9] = v11 + v13;
    v9[10] = v14;
    *(_QWORD *)&v17 = v9 + 3;
    *((_QWORD *)&v17 + 1) = v9;
    *(_OWORD *)(v5 + 88) = v17;
    *((_QWORD *)v5 + 13) = 0;
    *((_QWORD *)v5 + 14) = 0;
    *(_QWORD *)&v18 = v5 + 24;
    *((_QWORD *)&v18 + 1) = v5;
    *(_OWORD *)a3 = v18;
  }
  else
  {
    v7 = (char *)operator new(0x58uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_1E3D5BDF0;
    v8 = (std::string *)(v7 + 32);
    *((_QWORD *)v7 + 3) = &off_1E3D5B080;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((_QWORD *)v7 + 6) = *(_QWORD *)(a2 + 16);
    }
    *(_QWORD *)&v18 = 0;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_QWORD *)a3 = v7 + 24;
    *(_QWORD *)(a3 + 8) = v7;
  }
  return *(double *)&v18;
}

void sub_19C4A2B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::__shared_weak_count *v33;
  void **v34;
  std::__shared_weak_count *v35;
  Archiver::MMappedFile *v36;
  void *v38;
  void *v39;

  if (a33 < 0)
    operator delete(__p);
  Archiver::MMappedFile::~MMappedFile(v36);
  std::__shared_weak_count::~__shared_weak_count(v35);
  operator delete(v38);
  Archiver::_IDataBlobImpl::~_IDataBlobImpl(v34);
  std::__shared_weak_count::~__shared_weak_count(v33);
  operator delete(v39);
  _Unwind_Resume(a1);
}

void sub_19C4A2CDC()
{
  JUMPOUT(0x19C4A2CB4);
}

void sub_19C4A2CE4()
{
  JUMPOUT(0x19C4A2CC0);
}

id Archiver::_IDataBlobImpl::asData(Archiver::_IDataBlobImpl *this)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v11[5];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __n128 (*v15)(__n128 *, __n128 *);
  uint64_t (*v16)(uint64_t);
  const char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v12 = 0;
  v13 = &v12;
  v14 = 0x4012000000;
  v15 = __Block_byref_object_copy__6043;
  v16 = __Block_byref_object_dispose__6044;
  v17 = "";
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 24))(&v18);
  v1 = v13[6];
  if (v1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1))
  {
    v2 = objc_alloc(MEMORY[0x1E0C99D50]);
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13[6] + 16))(v13[6]);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13[6] + 24))(v13[6]);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = ___ZN8Archiver14_IDataBlobImpl6asDataEv_block_invoke;
    v11[3] = &unk_1E3D664E8;
    v11[4] = &v12;
    v5 = objc_msgSend(v2, "initWithBytesNoCopy:length:deallocator:", v3, v4, v11);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D50], "data");
    v5 = objc_claimAutoreleasedReturnValue();
  }
  v6 = (void *)v5;
  _Block_object_dispose(&v12, 8);
  v7 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_19C4A2E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v7);
  _Unwind_Resume(a1);
}

uint64_t Archiver::MMappedFile::size(Archiver::MMappedFile *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t Archiver::MMappedFile::data(Archiver::MMappedFile *this)
{
  return *((_QWORD *)this + 4);
}

void Archiver::_IDataBlobImpl::asMMappedFile(Archiver::_IDataBlobImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::ios_base::failure *exception;
  std::string *v15;
  __int128 v16;
  std::error_code __ec;
  std::string v18;
  std::string __msg;

  v4 = *((_QWORD *)this + 6);
  if (!v4)
  {
    if (*((_QWORD *)this + 4))
    {
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      std::operator+<char>();
      v15 = std::string::append(&v18, " already opened as stream attempted to open as mmapped file.");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      __msg.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)&__ec.__val_ = 1;
      __ec.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, &__msg, &__ec);
      __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
    }
    v5 = operator new();
    Archiver::MMappedFile::MMappedFile(v5, (__int128 *)((char *)this + 8));
    v6 = (_QWORD *)operator new();
    *v6 = &off_1E3D5C640;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v5;
    *(_QWORD *)&v7 = v5;
    *((_QWORD *)&v7 + 1) = v6;
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    *((_OWORD *)this + 3) = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v4 = *((_QWORD *)this + 6);
  }
  v11 = *((_QWORD *)this + 7);
  *a2 = v4;
  a2[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
}

void sub_19C4A3008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t Archiver::MMappedFile::MMappedFile(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  const char *v5;
  int v6;
  int v7;
  void *v8;
  std::ios_base::failure *exception;
  std::string *v11;
  __int128 v12;
  int *v13;
  char *v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::ios_base::failure *v19;
  std::string *v20;
  __int128 v21;
  int *v22;
  char *v23;
  std::error_code *p_ec;
  std::string::size_type cat;
  std::string *v26;
  __int128 v27;
  std::ios_base::failure *v28;
  std::string *v29;
  __int128 v30;
  const std::error_category *v31;
  std::ios_base::failure *v32;
  std::string *v33;
  __int128 v34;
  int *v35;
  char *v36;
  std::error_code *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::error_code v41;
  std::error_code __ec;
  unsigned __int8 v43;
  stat v44;
  std::string v45;
  std::string v46;
  std::string __msg;

  *(_QWORD *)a1 = &off_1E3D5AFA8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 40) = 0;
  if (*((char *)a2 + 23) >= 0)
    v5 = (const char *)a2;
  else
    v5 = *(const char **)a2;
  v6 = open(v5, 0);
  v7 = v6;
  if (v6 == -1)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v11 = std::string::append(&v46, ":");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    __msg.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = __error();
    v14 = strerror(*v13);
    std::string::basic_string[abi:ne180100]<0>(&v45, v14);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v45;
    else
      v15 = (std::string *)v45.__r_.__value_.__r.__words[0];
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    else
      size = v45.__r_.__value_.__l.__size_;
    v17 = std::string::append(&__msg, (const std::string::value_type *)v15, size);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    *(_QWORD *)&v44.st_uid = *((_QWORD *)&v17->__r_.__value_.__l + 2);
    *(_OWORD *)&v44.st_dev = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, (const std::string *)&v44, &__ec);
    __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  memset(&v44, 0, sizeof(v44));
  if (fstat(v6, &v44) == -1)
  {
    close(v7);
    v19 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v20 = std::string::append(&v45, ":");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = __error();
    v23 = strerror(*v22);
    std::string::basic_string[abi:ne180100]<0>(&__ec, v23);
    if ((v43 & 0x80u) == 0)
      p_ec = &__ec;
    else
      p_ec = *(std::error_code **)&__ec.__val_;
    if ((v43 & 0x80u) == 0)
      cat = v43;
    else
      cat = (std::string::size_type)__ec.__cat_;
    v26 = std::string::append(&v46, (const std::string::value_type *)p_ec, cat);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    __msg.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)&v41.__val_ = 1;
    v41.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(v19, &__msg, &v41);
    __cxa_throw(v19, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  if ((v44.st_mode & 0xF000) != 0x8000)
  {
    close(v7);
    v28 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v29 = std::string::append(&v46, ": not a regular file.");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    __msg.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v31 = std::iostream_category();
    v45.__r_.__value_.__r.__words[0] = 1;
    v45.__r_.__value_.__l.__size_ = (std::string::size_type)v31;
    std::ios_base::failure::failure(v28, &__msg, (const std::error_code *)&v45);
    __cxa_throw(v28, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  v8 = mmap(0, v44.st_size, 1, 2, v7, 0);
  *(_QWORD *)(a1 + 32) = v8;
  if (v8 == (void *)-1)
  {
    close(v7);
    v32 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v33 = std::string::append(&v45, ": error opening mmap: ");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v35 = __error();
    v36 = strerror(*v35);
    std::string::basic_string[abi:ne180100]<0>(&__ec, v36);
    if ((v43 & 0x80u) == 0)
      v37 = &__ec;
    else
      v37 = *(std::error_code **)&__ec.__val_;
    if ((v43 & 0x80u) == 0)
      v38 = v43;
    else
      v38 = (std::string::size_type)__ec.__cat_;
    v39 = std::string::append(&v46, (const std::string::value_type *)v37, v38);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    __msg.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)&v41.__val_ = 1;
    v41.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(v32, &__msg, &v41);
    __cxa_throw(v32, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  *(_QWORD *)(a1 + 40) = v44.st_size;
  close(v7);
  return a1;
}

void sub_19C4A34DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void **v23;
  uint64_t v24;
  void *v25;
  int v26;
  uint64_t v27;

  if (*(char *)(v27 - 57) < 0)
    operator delete(*(void **)(v27 - 80));
  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 89) < 0)
    operator delete(*(void **)(v27 - 112));
  if (*(char *)(v27 - 113) < 0)
  {
    operator delete(*(void **)(v27 - 136));
    if ((v26 & 1) == 0)
    {
LABEL_12:
      if (*(char *)(v24 + 31) < 0)
        operator delete(*v23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v25);
  goto LABEL_12;
}

void sub_19C4A3AC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v5;

  _Unwind_Resume(a1);
}

void sub_19C4A3D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v19 = v18;

  _Unwind_Resume(a1);
}

uint64_t Archiver::_IArchiveDiskImpl::storageType(Archiver::_IArchiveDiskImpl *this)
{
  return 0;
}

uint64_t MLLoggingAllowsInstrumentation(int a1, const char *a2)
{
  int v5;
  _BOOL4 v6;
  void *v7;
  char *HomeDirectory;
  void *v9;
  void *v10;
  int v11;
  int v12;
  statfs v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((os_variant_has_internal_content() & 1) != 0)
    return 1;
  if (MLLoggingAllowsInstrumentationBasedOnEntitlements_onceToken != -1)
    dispatch_once(&MLLoggingAllowsInstrumentationBasedOnEntitlements_onceToken, &__block_literal_global_8);
  if (MLLoggingAllowsInstrumentationBasedOnEntitlements_allowed)
    return 1;
  if (MLLoggingAllowsInstrumentationBasedOnProcess_onceToken != -1)
    dispatch_once(&MLLoggingAllowsInstrumentationBasedOnProcess_onceToken, &__block_literal_global_7);
  if (MLLoggingAllowsInstrumentationBasedOnProcess_allowed != 1)
    return 0;
  if (a2)
  {
    memset(&v13, 0, 512);
    v5 = statfs(a2, &v13);
    v6 = (v5 | v13.f_flags & 0x4000) == 0;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    HomeDirectory = MLLoggingGetHomeDirectory();
    if (HomeDirectory)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", HomeDirectory);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "stringByAppendingPathComponent:", CFSTR("/Library/Trial"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      free(HomeDirectory);
      if ((objc_msgSend(v7, "hasPrefix:", v10) & 1) != 0)
        v11 = 1;
      else
        v11 = objc_msgSend(v7, "hasPrefix:", CFSTR("/private/var/mobile/Library/Trial"));
      if ((objc_msgSend(v7, "hasPrefix:", CFSTR("/System/Library/AssetsV2/")) & 1) != 0)
        v12 = 1;
      else
        v12 = objc_msgSend(v7, "hasPrefix:", CFSTR("/private/var/MobileAsset/AssetsV2"));
      LODWORD(HomeDirectory) = v6 & ((v11 | v12) ^ 1);

    }
  }
  else
  {
    LODWORD(HomeDirectory) = 0;
  }
  return HomeDirectory & a1;
}

void sub_19C4A414C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C4A4304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C4A4418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C4A4474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4A44B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4A4AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  void *v37;
  void *v38;
  void *v39;

  _Unwind_Resume(a1);
}

uint64_t IArchive::rewind(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v1 = this;
  v2 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)this + 32) + 32);
  if (v2)
  {
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
    this = std::istream::seekg();
  }
  v3 = *(_QWORD **)(v1 + 16);
  v4 = (_QWORD *)(v1 + 24);
  if (v3 != v4)
  {
    do
    {
      this = IArchive::rewind((IArchive *)(v3 + 7));
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v4);
  }
  return this;
}

void sub_19C4A5058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C4A5230(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C4A56A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v12;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x50uLL);
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v12, v7, v6);
  }
  return v6;
}

void sub_19C4A57DC(_Unwind_Exception *a1)
{
  void **v1;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,_BlobShape>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void sub_19C4A58BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C4A5A0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C4A5B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_19C4A5DC0()
{
  void *v0;

  __cxa_end_catch();
  JUMPOUT(0x19C4A5CCCLL);
}

void sub_19C4A5DDC()
{
  JUMPOUT(0x19C4A5CCCLL);
}

void sub_19C4A5DE4()
{
  JUMPOUT(0x19C4A5DECLL);
}

uint64_t *IArchive::IArchive(uint64_t *a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v6 = (std::__shared_weak_count *)operator new(0x50uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BE98;
  *a1 = Archiver::_IArchiveDiskImpl::_IArchiveDiskImpl((uint64_t)&v6[1], a2, a3);
  a1[1] = (uint64_t)v6;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = (uint64_t)(a1 + 3);
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_19C4A5EB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_19C4A6184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C4A62CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C4A652C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C4A65E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4A666C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C4A66F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C4A6C70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C4A6DDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C4A6EA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19C4A6F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void ElapsedTimeRecorder::ElapsedTimeRecorder(ElapsedTimeRecorder *this, MLPredictionEvent *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MLPredictionEvent *v11;
  MLPredictionEvent *v12;

  v11 = a2;
  *(_QWORD *)this = mach_absolute_time();
  v12 = v11;
  *((_QWORD *)this + 1) = v12;
  *((_QWORD *)this + 2) = a3;
  *((_QWORD *)this + 3) = a4;
  *((_QWORD *)this + 4) = a5;
  *((_QWORD *)this + 5) = a6;
  *((_BYTE *)this + 48) = 1;
  kdebug_trace();

}

void sub_19C4A7064(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

void ElapsedTimeRecorder::~ElapsedTimeRecorder(id *this)
{
  if (*((_BYTE *)this + 48))
  {
    kdebug_trace();
    objc_msgSend(this[1], "maybeLogPredictionEvent:", mach_absolute_time() - (_QWORD)*this);
    *((_BYTE *)this + 48) = 0;
  }

}

void sub_19C4A73F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C4A74C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C4A7958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void (**v15)(_QWORD);
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a13);

  v15[2](v15);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19C4A7AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C4A7D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_19C4A7E4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C4A7EF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C4A7FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C4A84EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  uint64_t v22;

  InputNameToShapes::~InputNameToShapes((char **)&__p);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v22 - 104);

  _Unwind_Resume(a1);
}

void sub_19C4A8624()
{
  JUMPOUT(0x19C4A8604);
}

uint64_t **std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t **v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t *v28;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v8 = result + 1;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    v26 = result;
    v27 = v9;
    v28 = v9;
    if (v9)
    {
      v27 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 4));
          *((_DWORD *)v9 + 14) = *((_DWORD *)v10 + 14);
          v11 = *v8;
          v12 = v5 + 1;
          v13 = v5 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                v12 = (uint64_t **)v11;
                if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v28 + 4, v11 + 4))
                  break;
                v11 = *v12;
                v13 = v12;
                if (!*v12)
                  goto LABEL_14;
              }
              v11 = v12[1];
            }
            while (v11);
            v13 = v12 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v5, (uint64_t)v12, v13, v28);
          v9 = v27;
          v28 = v27;
          if (v27)
            v27 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next((uint64_t)v27);
          v14 = (_QWORD *)v10[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v10[2];
              v15 = *a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v15);
          }
          if (!v9)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v26);
  }
  if (a2 != a3)
  {
    v16 = v5 + 1;
    do
    {
      v17 = (char *)operator new(0x40uLL);
      v18 = v17;
      v19 = v17 + 32;
      if (*((char *)a2 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v17 + 32), (const std::string::value_type *)a2[4], a2[5]);
      }
      else
      {
        v20 = *((_OWORD *)a2 + 2);
        *((_QWORD *)v17 + 6) = a2[6];
        *(_OWORD *)v19 = v20;
      }
      *((_DWORD *)v18 + 14) = *((_DWORD *)a2 + 14);
      v21 = *v16;
      v22 = v5 + 1;
      v23 = v5 + 1;
      if (*v16)
      {
        do
        {
          while (1)
          {
            v22 = (uint64_t **)v21;
            if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v19, v21 + 4))
              break;
            v21 = *v22;
            v23 = v22;
            if (!*v22)
              goto LABEL_35;
          }
          v21 = v22[1];
        }
        while (v21);
        v23 = v22 + 1;
      }
LABEL_35:
      result = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v5, (uint64_t)v22, v23, (uint64_t *)v18);
      v24 = (_QWORD *)a2[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)a2[2];
          v15 = *v25 == (_QWORD)a2;
          a2 = v25;
        }
        while (!v15);
      }
      a2 = v25;
    }
    while (v25 != a3);
  }
  return result;
}

void sub_19C4A886C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void **v10;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,_BlobShape>,void *>>>::operator()[abi:ne180100](0, v10);
  _Unwind_Resume(a1);
}

void sub_19C4A9E88()
{
  __cxa_end_catch();
  JUMPOUT(0x19C4A9D5CLL);
}

void sub_19C4A9E94(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_19C4A9F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::IRDimension const*>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_19C4AA10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  uint64_t v10;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v10);

  _Unwind_Resume(a1);
}

id URLOfMILTextInArchive(_MLModelInputArchiver *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kModelMILFileName);
  IArchive::blob(&v12, *(_QWORD *)a1, (uint64_t)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  v2 = (_QWORD *)(v12 + 8);
  if (*(char *)(v12 + 31) < 0)
    v2 = (_QWORD *)*v2;
  v3 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "fileURLWithPath:isDirectory:", v4, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_19C4AA238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19C4AA654(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CoreML::Archiver::MMappedContentManager::~MMappedContentManager(CoreML::Archiver::MMappedContentManager **this)
{
  CoreML::Archiver::MMappedContentManager **v2;
  CoreML::Archiver::MMappedContentManager *v3;
  CoreML::Archiver::MMappedContentManager *v4;
  CoreML::Archiver::MMappedContentManager **v5;
  BOOL v6;

  v2 = this + 1;
  v3 = *this;
  if (*this != (CoreML::Archiver::MMappedContentManager *)(this + 1))
  {
    do
    {
      free(*((void **)v3 + 4));
      v4 = (CoreML::Archiver::MMappedContentManager *)*((_QWORD *)v3 + 1);
      if (v4)
      {
        do
        {
          v5 = (CoreML::Archiver::MMappedContentManager **)v4;
          v4 = *(CoreML::Archiver::MMappedContentManager **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (CoreML::Archiver::MMappedContentManager **)*((_QWORD *)v3 + 2);
          v6 = *v5 == v3;
          v3 = (CoreML::Archiver::MMappedContentManager *)v5;
        }
        while (!v6);
      }
      v3 = (CoreML::Archiver::MMappedContentManager *)v5;
    }
    while (v5 != v2);
  }
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(this[1]);
}

void std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(*a1);
    std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void sub_19C4AB070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint8_t buf)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  v33 = v30;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&buf, 8);

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::requiredBufferSize(void *a1, void *a2, unsigned __int16 a3)
{
  id v5;
  id v6;
  unint64_t *v7;
  BOOL v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v21;
  unint64_t *v22;
  void *__p[3];

  v5 = a1;
  v6 = a2;
  v7 = v21 + 1;
  v8 = v21 == v22 || v7 == v22;
  v9 = v21;
  if (!v8)
  {
    v10 = *v21;
    v9 = v21;
    v11 = v21 + 1;
    do
    {
      v13 = *v11++;
      v12 = v13;
      v14 = v10 >= v13;
      if (v10 <= v13)
        v10 = v12;
      if (!v14)
        v9 = v7;
      v7 = v11;
    }
    while (v11 != v22);
  }
  v15 = __p[0];
  v16 = *(_QWORD *)((char *)__p[0] + (char *)v9 - (char *)v21);
  v17 = *v9;
  if (!v21 || (v22 = v21, operator delete(v21), (v15 = __p[0]) != 0))
  {
    __p[1] = v15;
    operator delete(v15);
  }
  v18 = v16 * v17;
  if (!is_mul_ok(v16, v17))
    v18 = -1;
  if (is_mul_ok(v18, a3 >> 3))
    v19 = v18 * (a3 >> 3);
  else
    v19 = -1;

  return v19;
}

void sub_19C4AB314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C4AB3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C4AB4D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C4AB848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19C4AB98C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C4ABB68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C4ABC1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4ABDE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C4AC7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_19C4ACF70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C4AD550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_19C4AD980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{

  _Unwind_Resume(a1);
}

void sub_19C4ADAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C4AE1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_19C4AE7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void (**a14)(void), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;

  a14[2]();
  _Unwind_Resume(a1);
}

void sub_19C4AEC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  _QWORD *v62;
  uint64_t v65;
  void *v66;

  if (a17 < 0)
    operator delete(__p);
  a18 = *MEMORY[0x1E0DE4F50];
  v65 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(uint64_t *)((char *)&a18 + *(_QWORD *)(a18 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  a20 = v65;
  a21 = MEMORY[0x1E0DE4FB8] + 16;
  if (a34 < 0)
    operator delete(a29);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD61C4](&a37);
  if (a62 < 0)
    operator delete(a57);
  if (a2 == 1)
  {
    v66 = __cxa_begin_catch(a1);
    if (v62)
    {
      (*(void (**)(void *))(*(_QWORD *)v66 + 16))(v66);
      +[MLModelErrorUtils IOErrorWithFormat:](MLModelErrorUtils, "IOErrorWithFormat:", CFSTR("%s"));
      *v62 = (id)objc_claimAutoreleasedReturnValue();
    }
    __cxa_end_catch();
    JUMPOUT(0x19C4AEC30);
  }
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::CodedInputStream::Refresh(google::protobuf::io::CodedInputStream *this)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  _QWORD v20[2];
  int v21;
  std::string __p;
  std::string::value_type __str[8];
  const char *v24;
  int v25;
  std::string v26[4];
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 11);
  if (v2 > 0 || *((int *)this + 7) > 0 || *((_DWORD *)this + 6) == *((_DWORD *)this + 10))
  {
    v3 = *((_DWORD *)this + 6) - v2;
    v4 = *((_DWORD *)this + 12);
    if (v3 >= v4 && v4 != *((_DWORD *)this + 10))
    {
      LODWORD(v20[0]) = 2;
      v20[1] = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/io/coded_stream.cc";
      v21 = 193;
      memset(&__p, 0, sizeof(__p));
      std::string::append(&__p, "A protocol message was rejected because it was too big (more than ");
      snprintf(__str, 0x80uLL, "%d", *((_DWORD *)this + 12));
      v27 = 0;
      std::string::append(&__p, __str);
      std::string::append(&__p, " bytes).  To increase the limit (or to disable these warnings), see CodedInputStream::SetTotalBytesLimit() in google/protobuf/io/coded_stream.h.");
      google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)v20);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  else
  {
    v20[0] = 0;
    v19 = 0;
    v7 = *((_QWORD *)this + 2);
    do
    {
      v5 = (*(uint64_t (**)(uint64_t, _QWORD *, int *))(*(_QWORD *)v7 + 16))(v7, v20, &v19);
      if (!(_DWORD)v5)
      {
        *(_QWORD *)this = 0;
        *((_QWORD *)this + 1) = 0;
        return v5;
      }
      v8 = v19;
    }
    while (!v19);
    v9 = v20[0] + v19;
    *(_QWORD *)this = v20[0];
    *((_QWORD *)this + 1) = v9;
    if (v8 < 0)
    {
      *(_DWORD *)__str = 3;
      v24 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/io/coded_stream.cc";
      v25 = 599;
      memset(v26, 0, 24);
      std::string::append(v26, "CHECK failed: (buffer_size) >= (0): ");
      google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)__str);
      if (SHIBYTE(v26[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26[0].__r_.__value_.__l.__data_);
      v8 = v19;
    }
    v10 = *((_DWORD *)this + 6);
    v11 = v10 - (v8 ^ 0x7FFFFFFF);
    if (v10 <= (v8 ^ 0x7FFFFFFF))
    {
      v13 = v8 + v10;
      v12 = *((_QWORD *)this + 1);
    }
    else
    {
      *((_DWORD *)this + 7) = v11;
      v12 = *((_QWORD *)this + 1) - v11;
      *((_QWORD *)this + 1) = v12;
      v13 = 0x7FFFFFFF;
    }
    *((_DWORD *)this + 6) = v13;
    v14 = *((_DWORD *)this + 10);
    v15 = v12 + *((int *)this + 11);
    *((_QWORD *)this + 1) = v15;
    v16 = *((_DWORD *)this + 12);
    if (v16 >= v14)
      v16 = v14;
    v17 = __OFSUB__(v13, v16);
    v18 = v13 - v16;
    if ((v18 < 0) ^ v17 | (v18 == 0))
      v18 = 0;
    else
      *((_QWORD *)this + 1) = v15 - v18;
    *((_DWORD *)this + 11) = v18;
  }
  return v5;
}

void sub_19C4AEFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::io::CopyingInputStreamAdaptor::Next(google::protobuf::io::CopyingInputStreamAdaptor *this, const void **a2, int *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  const char *v12;
  int v13;
  std::string __p;

  if (*((_BYTE *)this + 17))
    return 0;
  v7 = *((_QWORD *)this + 4);
  if (!v7)
  {
    v7 = operator new[]();
    v8 = *((_QWORD *)this + 4);
    if (v8 != v7)
    {
      if (v8)
        MEMORY[0x1A1AD6248](v8, 0x1000C8077774924);
      *((_QWORD *)this + 4) = v7;
    }
  }
  v9 = *((unsigned int *)this + 12);
  if ((int)v9 >= 1)
  {
    *a2 = (const void *)(v7 + *((int *)this + 11) - v9);
    *a3 = v9;
    *((_DWORD *)this + 12) = 0;
    return 1;
  }
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), v7, *((unsigned int *)this + 10));
  *((_DWORD *)this + 11) = v10;
  if (v10 > 0)
  {
    *((_QWORD *)this + 3) += v10;
    *a3 = v10;
    *a2 = (const void *)*((_QWORD *)this + 4);
    return 1;
  }
  if (v10 < 0)
    *((_BYTE *)this + 17) = 1;
  if (*((_DWORD *)this + 12))
  {
    v11 = 3;
    v12 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/io/zero_co"
          "py_stream_impl_lite.cc";
    v13 = 346;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (backup_bytes_) == (0): ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((_DWORD *)this + 11) = 0;
  result = *((_QWORD *)this + 4);
  if (result)
  {
    MEMORY[0x1A1AD6248](result, 0x1000C8077774924);
    result = 0;
    *((_QWORD *)this + 4) = 0;
  }
  return result;
}

void sub_19C4AF1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::io::IstreamInputStream::Next(google::protobuf::io::IstreamInputStream *this, const void **a2, int *a3)
{
  return google::protobuf::io::CopyingInputStreamAdaptor::Next((google::protobuf::io::IstreamInputStream *)((char *)this + 24), a2, a3);
}

uint64_t google::protobuf::io::IstreamInputStream::CopyingIstreamInputStream::Read(google::protobuf::io::IstreamInputStream::CopyingIstreamInputStream *this, void *a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  int v6;
  int v7;
  BOOL v8;

  std::istream::read();
  v3 = *((_QWORD *)this + 1);
  result = *(unsigned int *)(v3 + 8);
  if (!(_DWORD)result)
  {
    v5 = *(_DWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 32);
    v6 = v5 & 5;
    v7 = v5 & 2;
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
      return 0xFFFFFFFFLL;
  }
  return result;
}

CoreML::Specification::ModelDescription *CoreML::Specification::ModelDescription::ModelDescription(CoreML::Specification::ModelDescription *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_QWORD *)this = &off_1E3D501B0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  return this;
}

void sub_19C4AF2EC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v6);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor(google::protobuf::io::CopyingInputStreamAdaptor *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E3D59950;
  if (*((_BYTE *)this + 16))
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = *((_QWORD *)this + 4);
  if (v3)
    MEMORY[0x1A1AD6248](v3, 0x1000C8077774924);
}

{
  google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor(this);
  JUMPOUT(0x1A1AD6260);
}

void google::protobuf::io::CodedInputStream::~CodedInputStream(google::protobuf::io::CodedInputStream *this)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    if (*((_DWORD *)this + 7) + *((_DWORD *)this + 11) + *((_DWORD *)this + 2) - *(_DWORD *)this >= 1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
      v3 = *((_DWORD *)this + 6) - *((_DWORD *)this + 11) + *(_QWORD *)this - *((_DWORD *)this + 2);
      *((_QWORD *)this + 1) = *(_QWORD *)this;
      *((_DWORD *)this + 11) = 0;
      *((_QWORD *)this + 3) = v3;
    }
  }
}

uint64_t google::protobuf::MessageLite::ParseFromCodedStream(google::protobuf::MessageLite *this, google::protobuf::io::CodedInputStream *a2)
{
  uint64_t result;
  const std::string::value_type *v5;
  std::string::size_type v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  int v12;
  const char *v13;
  int v14;
  std::string v15;
  std::string::value_type *v16;
  std::string::size_type v17;
  unsigned __int8 v18;

  (*(void (**)(google::protobuf::MessageLite *))(*(_QWORD *)this + 56))(this);
  result = (*(uint64_t (**)(google::protobuf::MessageLite *, google::protobuf::io::CodedInputStream *))(*(_QWORD *)this + 88))(this, a2);
  if ((_DWORD)result)
  {
    if (((*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)this + 64))(this) & 1) != 0)
    {
      return 1;
    }
    else
    {
      v12 = 2;
      v13 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/message_lite.cc";
      v14 = 121;
      memset(&v15, 0, sizeof(v15));
      memset(&__p, 0, sizeof(__p));
      std::string::append(&__p, "Can't ");
      std::string::append(&__p, "parse");
      std::string::append(&__p, " message of type \"");
      (*(void (**)(std::string::value_type **__return_ptr, google::protobuf::MessageLite *))(*(_QWORD *)this + 16))(&v16, this);
      if ((v18 & 0x80u) == 0)
        v5 = (const std::string::value_type *)&v16;
      else
        v5 = v16;
      if ((v18 & 0x80u) == 0)
        v6 = v18;
      else
        v6 = v17;
      std::string::append(&__p, v5, v6);
      if ((char)v18 < 0)
        operator delete(v16);
      std::string::append(&__p, "\" because it is missing required fields: ");
      (*(void (**)(std::string::value_type **__return_ptr, google::protobuf::MessageLite *))(*(_QWORD *)this + 72))(&v16, this);
      if ((v18 & 0x80u) == 0)
        v7 = (const std::string::value_type *)&v16;
      else
        v7 = v16;
      if ((v18 & 0x80u) == 0)
        v8 = v18;
      else
        v8 = v17;
      std::string::append(&__p, v7, v8);
      if ((char)v18 < 0)
        operator delete(v16);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(&v15, (const std::string::value_type *)p_p, size);
      google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      return 0;
    }
  }
  return result;
}

void sub_19C4AF5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::ModelDescription::IsInitialized(CoreML::Specification::ModelDescription *this)
{
  return 1;
}

CoreML::Result *CoreML::Result::Result(CoreML::Result *this)
{
  void *__p;
  char v4;

  std::string::basic_string[abi:ne180100]<0>(&__p, "not an error");
  *(_QWORD *)this = 0;
  std::operator+<char>();
  if (v4 < 0)
    operator delete(__p);
  return this;
}

void sub_19C4AF69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::ModelDescription::Clear(CoreML::Specification::ModelDescription *this)
{
  uint64_t v2;
  CoreML::Specification::FeatureDescription **v3;
  CoreML::Specification::FeatureDescription *v4;
  uint64_t v5;
  CoreML::Specification::FeatureDescription **v6;
  CoreML::Specification::FeatureDescription *v7;
  uint64_t v8;
  CoreML::Specification::FeatureDescription **v9;
  CoreML::Specification::FeatureDescription *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  CoreML::Specification::FeatureDescription **v15;
  CoreML::Specification::FeatureDescription *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      CoreML::Specification::FeatureDescription::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  v5 = *((unsigned int *)this + 12);
  if ((int)v5 >= 1)
  {
    v6 = (CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 7) + 8);
    do
    {
      v7 = *v6++;
      CoreML::Specification::FeatureDescription::Clear(v7);
      --v5;
    }
    while (v5);
    *((_DWORD *)this + 12) = 0;
  }
  v8 = *((unsigned int *)this + 18);
  if ((int)v8 >= 1)
  {
    v9 = (CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 10) + 8);
    do
    {
      v10 = *v9++;
      CoreML::Specification::FeatureDescription::Clear(v10);
      --v8;
    }
    while (v8);
    *((_DWORD *)this + 18) = 0;
  }
  v11 = *((unsigned int *)this + 24);
  if ((int)v11 >= 1)
  {
    v12 = (uint64_t *)(*((_QWORD *)this + 13) + 8);
    do
    {
      v13 = *v12++;
      CoreML::Specification::FunctionDescription::Clear(v13);
      --v11;
    }
    while (v11);
    *((_DWORD *)this + 24) = 0;
  }
  v14 = *((unsigned int *)this + 30);
  if ((int)v14 >= 1)
  {
    v15 = (CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 16) + 8);
    do
    {
      v16 = *v15++;
      CoreML::Specification::FeatureDescription::Clear(v16);
      --v14;
    }
    while (v14);
    *((_DWORD *)this + 30) = 0;
  }
  v17 = *((_QWORD *)this + 17);
  if ((__int128 *)v17 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v17 + 23) < 0)
    {
      **(_BYTE **)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v17 = 0;
      *(_BYTE *)(v17 + 23) = 0;
    }
  }
  v18 = *((_QWORD *)this + 18);
  if ((__int128 *)v18 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v18 + 23) < 0)
    {
      **(_BYTE **)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v18 = 0;
      *(_BYTE *)(v18 + 23) = 0;
    }
  }
  v19 = *((_QWORD *)this + 19);
  if ((__int128 *)v19 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v19 + 23) < 0)
    {
      **(_BYTE **)v19 = 0;
      *(_QWORD *)(v19 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v19 = 0;
      *(_BYTE *)(v19 + 23) = 0;
    }
  }
  result = *((_QWORD *)this + 20);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 20) = 0;
  return result;
}

void sub_19C4AFB84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C4AFCD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);
  _Unwind_Resume(a1);
}

void sub_19C4B00A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C4B0538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_19C4B0624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C4B06CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C4B0784(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4B0A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_19C4B0F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_19C4B12F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{

  _Unwind_Resume(a1);
}

void sub_19C4B153C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, uint64_t a12, uint64_t a13, void *a14)
{
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v19;
  NSObject *v20;
  void *v21;
  id v22;
  void *v23;
  NSObject *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  if (!a2)
    _Unwind_Resume(a1);

  kdebug_trace();
  if (a2 == 3)
  {
    v19 = __cxa_begin_catch(a1);
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v28 = (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v28;
      _os_log_error_impl(&dword_19C486000, v20, OS_LOG_TYPE_ERROR, "Unable to compute the prediction using a user-provided custom layer in a neural network model. It can be an invalid input data or broken/unsupported model. (Underlying exception: %s)", (uint8_t *)&buf, 0xCu);
    }

    if (v14)
    {
      (*(void (**)(void *))(*(_QWORD *)v19 + 16))(v19);
      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("%s"));
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 4, v21, CFSTR("Unable to compute the prediction using a user-provided custom layer in a neural network model. It can be an invalid input data or broken/unsupported model."));
      v22 = (id)objc_claimAutoreleasedReturnValue();
LABEL_12:
      *v14 = v22;
LABEL_17:

    }
  }
  else
  {
    v23 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v29 = (*(uint64_t (**)(void *))(*(_QWORD *)v23 + 16))(v23);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v29;
        _os_log_error_impl(&dword_19C486000, v24, OS_LOG_TYPE_ERROR, "Unable to compute the prediction using a neural network model due to a runtime error. It can be an invalid input data or broken/unsupported model. (Underlying exception: %s)", (uint8_t *)&buf, 0xCu);
      }

      if (v14)
      {
        (*(void (**)(void *))(*(_QWORD *)v23 + 16))(v23);
        +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("%s"));
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 0, v21, CFSTR("Unable to compute the prediction using a neural network model due to a runtime error. It can be an invalid input data or broken/unsupported model."));
        v22 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_12;
      }
    }
    else
    {
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_error_impl(&dword_19C486000, v25, OS_LOG_TYPE_ERROR, "Unable to compute the prediction using a neural network model due to an unknown error. It can be an invalid input data or broken/unsupported model.", (uint8_t *)&buf, 2u);
      }

      if (v14)
      {
        v26 = (void *)MEMORY[0x1E0CB35C8];
        a13 = *MEMORY[0x1E0CB2D50];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unable to compute the prediction using a neural network model due to an unknown error. It can be an invalid input data or broken/unsupported model."));
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        a14 = v21;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a14, &a13, 1);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 0, v27);
        *v14 = (id)objc_claimAutoreleasedReturnValue();

        goto LABEL_17;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x19C4B14B0);
}

void sub_19C4B20EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;

  if (a37 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C4B2A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  if (a31 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v12;

  v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x40uLL);
    v8 = (std::string *)(v6 + 32);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      *((_QWORD *)v6 + 6) = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[56] = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_19C4B2BC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

id get_ANEDeviceInfoClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_ANEDeviceInfoClass(void)::softClass;
  v7 = get_ANEDeviceInfoClass(void)::softClass;
  if (!get_ANEDeviceInfoClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL22get_ANEDeviceInfoClassv_block_invoke;
    v3[3] = &unk_1E3D65388;
    v3[4] = &v4;
    ___ZL22get_ANEDeviceInfoClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19C4B2D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class ___ZL22get_ANEDeviceInfoClassv_block_invoke(uint64_t a1)
{
  Class result;

  if (!AppleNeuralEngineLibraryCore(char **)::frameworkLibrary)
    AppleNeuralEngineLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  result = objc_getClass("_ANEDeviceInfo");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  get_ANEDeviceInfoClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t CoreML::MIL::Operators::CoreML::Classify::Make(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  void **v22;
  void **v23;
  uint64_t v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  __int128 v30;
  int64x2_t v31;
  void *v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  __int128 v47;
  void **v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  void **v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  _QWORD *v64;
  char *v65;
  __int128 v66;
  void **v67;
  void *v68;
  unint64_t *v69;
  unint64_t v70;
  void **v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  void *__p[2];
  uint64_t v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  void *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  void **v93;
  int64x2_t v94;
  void *v95;
  void **v96;
  _BYTE v97[24];
  _BYTE *v98;
  _QWORD v99[3];
  _QWORD *v100;
  uint64_t Scalar;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  _QWORD *v105;
  void **v106[2];

  v106[1] = *(void ***)MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 1065353216;
  v92 = v4;
  v5 = MIL::IRUnknownDimension::Make();
  v6 = operator new(8uLL);
  v103 = v6;
  *v6 = v5;
  v104 = (uint64_t)(v6 + 1);
  v105 = v6 + 1;
  v106[0] = (void **)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v7 = (void **)operator new(0x38uLL);
  v93 = v7;
  v94.i64[0] = v4 + 16;
  v94.i8[8] = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, "probabilities");
  v8 = Scalar;
  v7[5] = (void *)Scalar;
  if (v8)
  {
    v9 = (_QWORD *)operator new();
    v10 = Scalar;
    *v9 = &off_1E3D5C480;
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = v10;
  }
  else
  {
    v9 = 0;
  }
  v7[6] = v9;
  Scalar = 0;
  v94.i8[8] = 1;
  v7[1] = (void *)std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v7 + 2));
  if ((std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(v4, (unsigned __int8 *)v7) & 1) != 0)v93 = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v93);
  v11 = Scalar;
  Scalar = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v91)
  {
    p_shared_owners = (unint64_t *)&v91->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)())v91->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v103)
  {
    v104 = (uint64_t)v103;
    operator delete(v103);
  }
  MIL::IRTensorValueType::MakeScalar();
  MIL::IRUnknownDimension::Make();
  v103 = (void *)MIL::IRListValueType::MakeWithDimension();
  MIL::IRTensorValueType::MakeScalar();
  MIL::IRUnknownDimension::Make();
  v104 = MIL::IRListValueType::MakeWithDimension();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v14 = (void **)operator new(0x38uLL);
  v93 = v14;
  v94.i64[0] = v4 + 16;
  v94.i8[8] = 0;
  *v14 = 0;
  v14[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v14 + 2, "classes");
  v15 = Scalar;
  v14[5] = (void *)Scalar;
  if (v15)
  {
    v16 = (_QWORD *)operator new();
    v17 = Scalar;
    *v16 = &off_1E3D5C480;
    v16[1] = 0;
    v16[2] = 0;
    v16[3] = v17;
  }
  else
  {
    v16 = 0;
  }
  v14[6] = v16;
  Scalar = 0;
  v94.i8[8] = 1;
  v14[1] = (void *)std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v14 + 2));
  if ((std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(v4, (unsigned __int8 *)v14) & 1) != 0)v93 = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v93);
  v18 = Scalar;
  Scalar = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (v90)
  {
    v19 = (unint64_t *)&v90->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)())v90->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v106[0] = 0;
  v21 = operator new();
  *(_QWORD *)v21 = 0;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  v93 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](v106, (void **)v21);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v93, 0);
  v22 = v106[0];
  v23 = v106[0] + 2;
  v24 = (uint64_t)*v106[0];
  if ((void *)((char *)v106[0][2] - (char *)*v106[0]) <= (void *)0x1F)
  {
    v25 = (char *)v106[0][1];
    v96 = v106[0] + 2;
    v26 = (char *)operator new(0x20uLL);
    v28 = *v22;
    v27 = v22[1];
    if (v27 == *v22)
    {
      v31 = vdupq_n_s64((unint64_t)v27);
      v29 = &v25[(_QWORD)v26 - v24];
    }
    else
    {
      v29 = &v25[(_QWORD)v26 - v24];
      do
      {
        v30 = *((_OWORD *)v27 - 1);
        v27 -= 2;
        *((_OWORD *)v29 - 1) = v30;
        v29 -= 16;
        *v27 = 0;
        v27[1] = 0;
      }
      while (v27 != v28);
      v31 = *(int64x2_t *)v22;
    }
    *v22 = v29;
    v22[1] = &v25[(_QWORD)v26 - v24];
    v94 = v31;
    v32 = v22[2];
    v22[2] = v26 + 32;
    v95 = v32;
    v93 = (void **)v31.i64[0];
    std::__split_buffer<std::shared_ptr<MIL::IRValue const>>::~__split_buffer((uint64_t)&v93);
  }
  Scalar = MIL::IRTensorValueType::MakeScalar();
  v102 = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v103 = v89;
  if (v89)
  {
    v33 = (_QWORD *)operator new();
    *v33 = &off_1E3D5C480;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v89;
  }
  else
  {
    v33 = 0;
  }
  v104 = (uint64_t)v33;
  v34 = (char *)v22[1];
  v35 = (char *)v22[2];
  if (v34 >= v35)
  {
    v37 = (v34 - (_BYTE *)*v22) >> 4;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v39 = v35 - (_BYTE *)*v22;
    if (v39 >> 3 > v38)
      v38 = v39 >> 3;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
      v40 = 0xFFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    v96 = v23;
    v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v40);
    v43 = &v41[16 * v37];
    *(_QWORD *)v43 = v89;
    *((_QWORD *)v43 + 1) = v33;
    v103 = 0;
    v104 = 0;
    v45 = *v22;
    v44 = v22[1];
    if (v44 == *v22)
    {
      v48 = (void **)v22[1];
      v46 = &v41[16 * v37];
    }
    else
    {
      v46 = &v41[16 * v37];
      do
      {
        v47 = *((_OWORD *)v44 - 1);
        v44 -= 2;
        *((_OWORD *)v46 - 1) = v47;
        v46 -= 16;
        *v44 = 0;
        v44[1] = 0;
      }
      while (v44 != v45);
      v48 = (void **)*v22;
      v44 = v22[1];
    }
    v36 = v43 + 16;
    *v22 = v46;
    v93 = v48;
    v94.i64[0] = (uint64_t)v48;
    v22[1] = v43 + 16;
    v94.i64[1] = (uint64_t)v44;
    v49 = v22[2];
    v22[2] = &v41[16 * v42];
    v95 = v49;
    std::__split_buffer<std::shared_ptr<MIL::IRValue const>>::~__split_buffer((uint64_t)&v93);
  }
  else
  {
    *(_QWORD *)v34 = v89;
    *((_QWORD *)v34 + 1) = v33;
    v36 = v34 + 16;
    v103 = 0;
    v104 = 0;
  }
  v22[1] = v36;
  if (v88)
  {
    v50 = (unint64_t *)&v88->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)())v88->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v52 = v106[0];
  MIL::IRTensorValueType::MakeScalar();
  MIL::IRTensorValueType::MakeScalar();
  Scalar = MIL::IRDictionaryValueType::Make();
  MIL::IRTensorValueType::MakeScalar();
  MIL::IRTensorValueType::MakeScalar();
  v102 = MIL::IRDictionaryValueType::Make();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v103 = 0;
  v104 = 0;
  v53 = (char *)v52[2];
  v54 = (char *)v52[1];
  if (v54 >= v53)
  {
    v56 = (v54 - (_BYTE *)*v52) >> 4;
    v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v58 = v53 - (_BYTE *)*v52;
    if (v58 >> 3 > v57)
      v57 = v58 >> 3;
    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0)
      v59 = 0xFFFFFFFFFFFFFFFLL;
    else
      v59 = v57;
    v96 = v52 + 2;
    v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v59);
    v62 = &v60[16 * v56];
    *(_QWORD *)v62 = 0;
    *((_QWORD *)v62 + 1) = 0;
    v103 = 0;
    v104 = 0;
    v64 = *v52;
    v63 = v52[1];
    if (v63 == *v52)
    {
      v67 = (void **)v52[1];
      v65 = &v60[16 * v56];
    }
    else
    {
      v65 = &v60[16 * v56];
      do
      {
        v66 = *((_OWORD *)v63 - 1);
        v63 -= 2;
        *((_OWORD *)v65 - 1) = v66;
        v65 -= 16;
        *v63 = 0;
        v63[1] = 0;
      }
      while (v63 != v64);
      v67 = (void **)*v52;
      v63 = v52[1];
    }
    v55 = v62 + 16;
    *v52 = v65;
    v93 = v67;
    v94.i64[0] = (uint64_t)v67;
    v52[1] = v62 + 16;
    v94.i64[1] = (uint64_t)v63;
    v68 = v52[2];
    v52[2] = &v60[16 * v61];
    v95 = v68;
    std::__split_buffer<std::shared_ptr<MIL::IRValue const>>::~__split_buffer((uint64_t)&v93);
  }
  else
  {
    *(_QWORD *)v54 = 0;
    *((_QWORD *)v54 + 1) = 0;
    v55 = v54 + 16;
    v103 = 0;
    v104 = 0;
  }
  v52[1] = v55;
  if (v87)
  {
    v69 = (unint64_t *)&v87->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)())v87->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v71 = v106[0];
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v106[0][1] - 2) + 48))(*((_QWORD *)v106[0][1] - 2), 1);
  *(_OWORD *)__p = *(_OWORD *)a3;
  v86 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  if (v92)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v72->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C6B0;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v72 = 0;
  }
  v84 = v72;
  v73 = (std::__shared_weak_count *)operator new();
  v73->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C758;
  v73->__shared_owners_ = 0;
  v73->__shared_weak_owners_ = 0;
  v73[1].__vftable = (std::__shared_weak_count_vtbl *)v71;
  v83 = v73;
  v106[0] = 0;
  v99[0] = &off_1E3D5B678;
  v99[1] = CoreML::MIL::Operators::CoreML::CustomValidators::ValidateClassify;
  v100 = v99;
  v98 = 0;
  MIL::IROperator::Make();
  v74 = v98;
  if (v98 == v97)
  {
    v75 = 4;
    v74 = v97;
  }
  else
  {
    if (!v98)
      goto LABEL_83;
    v75 = 5;
  }
  (*(void (**)(_QWORD *))(*v74 + 8 * v75))(v74);
LABEL_83:
  v76 = v100;
  if (v100 == v99)
  {
    v77 = 4;
    v76 = v99;
    goto LABEL_87;
  }
  if (v100)
  {
    v77 = 5;
LABEL_87:
    (*(void (**)(_QWORD *))(*v76 + 8 * v77))(v76);
  }
  if (v83)
  {
    v78 = (unint64_t *)&v83->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (v84)
  {
    v80 = (unint64_t *)&v84->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  if (SHIBYTE(v86) < 0)
    operator delete(__p[0]);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](v106, 0);
  return 0;
}

void sub_19C4B3AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;

  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v40 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a29);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  unsigned __int8 **v33;
  unint64_t v34;
  void *v36;

  v4 = a2 + 16;
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a2 + 16));
  *((_QWORD *)a2 + 1) = v5;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = v5;
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v8.i16[0] = vaddlv_u8(v8);
    v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      v10 = v5;
      if (v6 <= v5)
        v10 = v5 % v6;
    }
    else
    {
      v10 = (v6 - 1) & v5;
    }
    v11 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = *(unsigned __int8 **)i)
      {
        v13 = *((_QWORD *)i + 1);
        if (v13 == v7)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v4))
            return 0;
        }
        else
        {
          if (v9 > 1)
          {
            if (v13 >= v6)
              v13 %= v6;
          }
          else
          {
            v13 &= v6 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v6 || (float)(v15 * (float)v6) < v14)
  {
    v16 = 1;
    if (v6 >= 3)
      v16 = (v6 & (v6 - 1)) != 0;
    v17 = v16 | (2 * v6);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_84;
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_58;
    v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v26 = std::__next_prime(v26);
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
    }
    if (*(_QWORD *)&prime <= v26)
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_58;
    }
    if (prime)
    {
LABEL_84:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v20 = operator new(8 * *(_QWORD *)&prime);
      v21 = *(void **)a1;
      *(_QWORD *)a1 = v20;
      if (v21)
        operator delete(v21);
      v22 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
      while (*(_QWORD *)&prime != v22);
      v23 = *(_QWORD **)(a1 + 16);
      if (v23)
      {
        v24 = v23[1];
        v25 = (uint8x8_t)vcnt_s8(prime);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          if (v24 >= *(_QWORD *)&prime)
            v24 %= *(_QWORD *)&prime;
        }
        else
        {
          v24 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = a1 + 16;
        v29 = (_QWORD *)*v23;
        if (*v23)
        {
          do
          {
            v30 = v29[1];
            if (v25.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            if (v30 != v24)
            {
              if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                goto LABEL_54;
              }
              *v23 = *v29;
              *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
              v29 = v23;
            }
            v30 = v24;
LABEL_54:
            v23 = v29;
            v29 = (_QWORD *)*v29;
            v24 = v30;
          }
          while (v29);
        }
      }
      v6 = (unint64_t)prime;
    }
    else
    {
      v36 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v36)
        operator delete(v36);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_58:
  v31 = *((_QWORD *)a2 + 1);
  v32 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v32.i16[0] = vaddlv_u8(v32);
  if (v32.u32[0] > 1uLL)
  {
    if (v31 >= v6)
      v31 %= v6;
  }
  else
  {
    v31 &= v6 - 1;
  }
  v33 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v31);
  if (v33)
  {
    *(_QWORD *)a2 = *v33;
LABEL_70:
    *v33 = a2;
    goto LABEL_71;
  }
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = a1 + 16;
  if (*(_QWORD *)a2)
  {
    v34 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v32.u32[0] > 1uLL)
    {
      if (v34 >= v6)
        v34 %= v6;
    }
    else
    {
      v34 &= v6 - 1;
    }
    v33 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_70;
  }
LABEL_71:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

uint64_t std::__split_buffer<std::shared_ptr<MIL::IRValue const>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

CoreML::Specification::CustomModel *CoreML::Specification::CustomModel::CustomModel(CoreML::Specification::CustomModel *this)
{
  CoreML::Specification::protobuf_CustomModel_2eproto *v2;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D4CEA0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (CoreML::Specification::protobuf_CustomModel_2eproto *)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::CustomModel *)&CoreML::Specification::_CustomModel_default_instance_)
    CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(v2);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_19C4B4190(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::Init(uint64_t a1)
{
  google::protobuf::Arena *v2;
  _QWORD *Aligned;
  _QWORD *result;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::InnerMap(Aligned, v2);
    result = google::protobuf::Arena::AllocateAligned(v2, 0, 24);
    *result = Aligned;
    result[1] = google::protobuf::internal::arena_destruct_object<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap>;
    v5 = (unint64_t *)((char *)v2 + 32);
    do
      v6 = __ldxr(v5);
    while (__stxr((unint64_t)result, v5));
    result[2] = v6;
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::InnerMap(Aligned, 0);
  }
  *(_QWORD *)(a1 + 16) = Aligned;
  return result;
}

void sub_19C4B425C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::InnerMap(_QWORD *a1, google::protobuf::Arena *a2)
{
  uint32_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  google::protobuf::Arena **v8;
  __int128 v10;
  unsigned int v11[258];
  std::random_device v12;

  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  v4 = arc4random();
  v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1)
    v5 = 1;
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  v10 = xmmword_19CB39940;
  v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19C4B4348(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C4B4304);
}

CoreML::Specification::Int64ToStringMap *CoreML::Specification::Int64ToStringMap::Int64ToStringMap(CoreML::Specification::Int64ToStringMap *this)
{
  _QWORD *v2;
  CoreML::Specification::protobuf_DataStructures_2eproto *v3;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D50080;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (_QWORD *)operator new();
  v3 = (CoreML::Specification::protobuf_DataStructures_2eproto *)google::protobuf::Map<long long,std::string>::InnerMap::InnerMap(v2, 0);
  *((_QWORD *)this + 5) = v2;
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::Int64ToStringMap *)&CoreML::Specification::_Int64ToStringMap_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v3);
  *((_DWORD *)this + 12) = 0;
  return this;
}

void sub_19C4B4400(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::Map<long long,std::string>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<long long,std::string>::InnerMap::InnerMap(_QWORD *a1, google::protobuf::Arena *a2)
{
  uint32_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  google::protobuf::Arena **v8;
  __int128 v10;
  unsigned int v11[258];
  std::random_device v12;

  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  v4 = arc4random();
  v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1)
    v5 = 1;
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  v10 = xmmword_19CB39940;
  v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19C4B450C(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C4B44C8);
}

CoreML::Specification::Int64ToDoubleMap *CoreML::Specification::Int64ToDoubleMap::Int64ToDoubleMap(CoreML::Specification::Int64ToDoubleMap *this)
{
  _QWORD *v2;
  CoreML::Specification::protobuf_DataStructures_2eproto *v3;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D4FFE8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (_QWORD *)operator new();
  v3 = (CoreML::Specification::protobuf_DataStructures_2eproto *)google::protobuf::Map<long long,double>::InnerMap::InnerMap(v2, 0);
  *((_QWORD *)this + 5) = v2;
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::Int64ToDoubleMap *)&CoreML::Specification::_Int64ToDoubleMap_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v3);
  *((_DWORD *)this + 12) = 0;
  return this;
}

void sub_19C4B45C4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::Map<long long,double>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<long long,double>::InnerMap::InnerMap(_QWORD *a1, google::protobuf::Arena *a2)
{
  uint32_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  google::protobuf::Arena **v8;
  __int128 v10;
  unsigned int v11[258];
  std::random_device v12;

  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  v4 = arc4random();
  v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1)
    v5 = 1;
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  v10 = xmmword_19CB39940;
  v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19C4B46D0(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C4B468CLL);
}

CoreML::Specification::StringToInt64Map *CoreML::Specification::StringToInt64Map::StringToInt64Map(CoreML::Specification::StringToInt64Map *this)
{
  _QWORD *v2;
  CoreML::Specification::protobuf_DataStructures_2eproto *v3;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D505D8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (_QWORD *)operator new();
  v3 = (CoreML::Specification::protobuf_DataStructures_2eproto *)google::protobuf::Map<std::string,long long>::InnerMap::InnerMap(v2, 0);
  *((_QWORD *)this + 5) = v2;
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::StringToInt64Map *)&CoreML::Specification::_StringToInt64Map_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v3);
  *((_DWORD *)this + 12) = 0;
  return this;
}

void sub_19C4B4788(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::Map<std::string,long long>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,long long>::InnerMap::InnerMap(_QWORD *a1, google::protobuf::Arena *a2)
{
  uint32_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  google::protobuf::Arena **v8;
  __int128 v10;
  unsigned int v11[258];
  std::random_device v12;

  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  v4 = arc4random();
  v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1)
    v5 = 1;
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  v10 = xmmword_19CB39940;
  v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19C4B4894(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C4B4850);
}

CoreML::Specification::StringToDoubleMap *CoreML::Specification::StringToDoubleMap::StringToDoubleMap(CoreML::Specification::StringToDoubleMap *this)
{
  _QWORD *v2;
  CoreML::Specification::protobuf_DataStructures_2eproto *v3;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D50FF0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (_QWORD *)operator new();
  v3 = (CoreML::Specification::protobuf_DataStructures_2eproto *)google::protobuf::Map<std::string,double>::InnerMap::InnerMap(v2, 0);
  *((_QWORD *)this + 5) = v2;
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::StringToDoubleMap *)&CoreML::Specification::_StringToDoubleMap_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v3);
  *((_DWORD *)this + 12) = 0;
  return this;
}

void sub_19C4B494C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::Map<std::string,long long>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,double>::InnerMap::InnerMap(_QWORD *a1, google::protobuf::Arena *a2)
{
  uint32_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  google::protobuf::Arena **v8;
  __int128 v10;
  unsigned int v11[258];
  std::random_device v12;

  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  v4 = arc4random();
  v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1)
    v5 = 1;
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  v10 = xmmword_19CB39940;
  v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19C4B4A58(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C4B4A14);
}

double CoreML::Specification::MILSpec::protobuf_MIL_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::MILSpec::protobuf_MIL_2eproto::TableStruct *this)
{
  double result;

  google::protobuf::internal::InitProtobufDefaults(this);
  qword_1ED001E68 = 0;
  unk_1ED001E70 = 0;
  qword_1ED001E58 = 0;
  unk_1ED001E60 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1ED001E78 = 0;
  CoreML::Specification::MILSpec::_Program_FunctionsEntry_default_instance_ = (uint64_t)&off_1E3D5AB90;
  byte_1ED001E80 = 1;
  qword_1ED001EA0 = 0;
  unk_1ED001EA8 = 0;
  qword_1ED001E90 = 0;
  unk_1ED001E98 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1ED001EB0 = 0;
  CoreML::Specification::MILSpec::_Program_AttributesEntry_default_instance_ = (uint64_t)&off_1E3D5AA40;
  byte_1ED001EB8 = 1;
  *((_BYTE *)CoreML::Specification::MILSpec::Program::Program((CoreML::Specification::MILSpec::Program *)&CoreML::Specification::MILSpec::_Program_default_instance_)
  + 104) = 1;
  qword_1ED002118 = 0;
  unk_1ED002120 = 0;
  qword_1ED002108 = 0;
  unk_1ED002110 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1ED002128 = 0;
  CoreML::Specification::MILSpec::_Function_BlockSpecializationsEntry_default_instance_ = (uint64_t)&off_1E3D5A998;
  byte_1ED002130 = 1;
  qword_1ED001ED8 = 0;
  unk_1ED001EE0 = 0;
  qword_1ED001EC8 = 0;
  unk_1ED001ED0 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1ED001EE8 = 0;
  CoreML::Specification::MILSpec::_Function_AttributesEntry_default_instance_ = (uint64_t)&off_1E3D5AA40;
  byte_1ED001EF0 = 1;
  *((_BYTE *)CoreML::Specification::MILSpec::Function::Function((CoreML::Specification::MILSpec::Function *)&CoreML::Specification::MILSpec::_Function_default_instance_)
  + 120) = 1;
  qword_1ED001DF8 = 0;
  unk_1ED001E00 = 0;
  qword_1ED001DE8 = 0;
  unk_1ED001DF0 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1ED001E08 = 0;
  CoreML::Specification::MILSpec::_Block_AttributesEntry_default_instance_ = (uint64_t)&off_1E3D5AA40;
  byte_1ED001E10 = 1;
  *((_BYTE *)CoreML::Specification::MILSpec::Block::Block((CoreML::Specification::MILSpec::Block *)&CoreML::Specification::MILSpec::_Block_default_instance_)
  + 128) = 1;
  CoreML::Specification::MILSpec::_Argument_default_instance_ = (uint64_t)&off_1E3D58AD8;
  unk_1ED001AD8 = 0u;
  unk_1ED001AE8 = 0u;
  dword_1ED001AF8 = 0;
  byte_1ED001B00 = 1;
  qword_1ED001E30 = 0;
  unk_1ED001E38 = 0;
  qword_1ED001E20 = 0;
  unk_1ED001E28 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1ED001E40 = 0;
  CoreML::Specification::MILSpec::_Operation_InputsEntry_default_instance_ = (uint64_t)&off_1E3D5AAE8;
  byte_1ED001E48 = 1;
  qword_1ED001F40 = 0;
  unk_1ED001F48 = 0;
  qword_1ED001F30 = 0;
  unk_1ED001F38 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1ED001F50 = 0;
  CoreML::Specification::MILSpec::_Operation_AttributesEntry_default_instance_ = (uint64_t)&off_1E3D5AA40;
  byte_1ED001F58 = 1;
  *((_BYTE *)CoreML::Specification::MILSpec::Operation::Operation((CoreML::Specification::MILSpec::Operation *)&CoreML::Specification::MILSpec::_Operation_default_instance_)
  + 144) = 1;
  CoreML::Specification::MILSpec::_ValueType_default_instance_ = (uint64_t)&off_1E3D58F98;
  unk_1ED001BE8 = 0;
  qword_1ED001BF8 = 0;
  byte_1ED001C00 = 1;
  qword_1ED001FF0 = 0;
  unk_1ED001FF8 = 0;
  qword_1ED001FE0 = 0;
  unk_1ED001FE8 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1ED002000 = 0;
  CoreML::Specification::MILSpec::_TensorType_AttributesEntry_default_instance_ = (uint64_t)&off_1E3D5AA40;
  byte_1ED002008 = 1;
  *((_BYTE *)CoreML::Specification::MILSpec::TensorType::TensorType((CoreML::Specification::MILSpec::TensorType *)&CoreML::Specification::MILSpec::_TensorType_default_instance_)
  + 88) = 1;
  CoreML::Specification::MILSpec::_TupleType_default_instance_ = (uint64_t)&off_1E3D58F00;
  result = 0.0;
  unk_1ED001BB0 = 0u;
  unk_1ED001BC0 = 0u;
  dword_1ED001BD0 = 0;
  byte_1ED001BD8 = 1;
  CoreML::Specification::MILSpec::_ListType_default_instance_ = (uint64_t)&off_1E3D58C08;
  unk_1ED001B10 = 0;
  dword_1ED001B28 = 0;
  byte_1ED001B30 = 1;
  CoreML::Specification::MILSpec::_DictionaryType_default_instance_ = (uint64_t)&off_1E3D57F90;
  unk_1ED001CD0 = 0;
  dword_1ED001CE8 = 0;
  byte_1ED001CF0 = 1;
  qword_1ED0012B0 = 0;
  CoreML::Specification::MILSpec::_StateType_default_instance_ = (uint64_t)&off_1E3D58E68;
  dword_1ED0012C0 = 0;
  byte_1ED0012C8 = 1;
  dword_1ED002058 = 0;
  CoreML::Specification::MILSpec::_Dimension_ConstantDimension_default_instance_ = (uint64_t)&off_1E3D58618;
  qword_1ED002048 = 0;
  qword_1ED002050 = 0;
  byte_1ED002060 = 1;
  CoreML::Specification::MILSpec::_Dimension_UnknownDimension_default_instance_ = (uint64_t)&off_1E3D584E8;
  qword_1ED001FC0 = 0;
  byte_1ED001FC8 = 0;
  dword_1ED001FCC = 0;
  byte_1ED001FD0 = 1;
  CoreML::Specification::MILSpec::_Dimension_default_instance_ = (uint64_t)&off_1E3D58CA0;
  unk_1ED001B40 = 0;
  qword_1ED001B50 = 0;
  byte_1ED001B58 = 1;
  CoreML::Specification::MILSpec::_Value_ImmediateValue_default_instance_ = (uint64_t)&off_1E3D58288;
  unk_1ED001DA0 = 0;
  qword_1ED001DB0 = 0;
  byte_1ED001DB8 = 1;
  CoreML::Specification::MILSpec::_Value_BlobFileValue_default_instance_ = (uint64_t)&off_1E3D581F0;
  unk_1ED001D70 = 0;
  qword_1ED001D78 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED001D80 = 0;
  dword_1ED001D88 = 0;
  byte_1ED001D90 = 1;
  CoreML::Specification::MILSpec::_Value_default_instance_ = (uint64_t)&off_1E3D589A8;
  unk_1ED001A90 = 0;
  qword_1ED001AB0 = 0;
  byte_1ED001AB8 = 1;
  CoreML::Specification::MILSpec::_TensorValue_RepeatedFloats_default_instance_ = (uint64_t)&off_1E3D58580;
  *(_QWORD *)algn_1ED002018 = 0;
  qword_1ED002020 = 0;
  unk_1ED002028 = 0;
  dword_1ED002034 = 0;
  byte_1ED002038 = 1;
  CoreML::Specification::MILSpec::_TensorValue_RepeatedDoubles_default_instance_ = (uint64_t)&off_1E3D586B0;
  unk_1ED002070 = 0;
  qword_1ED002078 = 0;
  unk_1ED002080 = 0;
  dword_1ED00208C = 0;
  byte_1ED002090 = 1;
  CoreML::Specification::MILSpec::_TensorValue_RepeatedInts_default_instance_ = (uint64_t)&off_1E3D58320;
  unk_1ED001F00 = 0;
  qword_1ED001F08 = 0;
  unk_1ED001F10 = 0;
  dword_1ED001F1C = 0;
  byte_1ED001F20 = 1;
  CoreML::Specification::MILSpec::_TensorValue_RepeatedLongInts_default_instance_ = (uint64_t)&off_1E3D58878;
  *(_QWORD *)algn_1ED0020D8 = 0;
  qword_1ED0020E0 = 0;
  unk_1ED0020E8 = 0;
  dword_1ED0020F4 = 0;
  byte_1ED0020F8 = 1;
  CoreML::Specification::MILSpec::_TensorValue_RepeatedBools_default_instance_ = (uint64_t)&off_1E3D583B8;
  *(_QWORD *)algn_1ED001F68 = 0;
  qword_1ED001F70 = 0;
  unk_1ED001F78 = 0;
  dword_1ED001F84 = 0;
  byte_1ED001F88 = 1;
  CoreML::Specification::MILSpec::_TensorValue_RepeatedStrings_default_instance_ = (uint64_t)&off_1E3D58748;
  dword_1ED0020C0 = 0;
  *(_OWORD *)&algn_1ED0020A0[16] = 0u;
  *(_OWORD *)algn_1ED0020A0 = 0u;
  byte_1ED0020C8 = 1;
  CoreML::Specification::MILSpec::_TensorValue_RepeatedBytes_default_instance_ = (uint64_t)&off_1E3D58450;
  *(_QWORD *)algn_1ED001F98 = 0;
  qword_1ED001FA0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  dword_1ED001FA8 = 0;
  byte_1ED001FB0 = 1;
  CoreML::Specification::MILSpec::_TensorValue_default_instance_ = (uint64_t)&off_1E3D57EF8;
  *(_QWORD *)algn_1ED001C70 = 0;
  qword_1ED001C80 = 0;
  byte_1ED001C88 = 1;
  CoreML::Specification::MILSpec::_TupleValue_default_instance_ = (uint64_t)&off_1E3D57E60;
  dword_1ED001C58 = 0;
  unk_1ED001C48 = 0u;
  unk_1ED001C38 = 0u;
  byte_1ED001C60 = 1;
  CoreML::Specification::MILSpec::_ListValue_default_instance_ = (uint64_t)&off_1E3D58D38;
  dword_1ED001B98 = 0;
  unk_1ED001B88 = 0u;
  unk_1ED001B78 = 0u;
  byte_1ED001BA0 = 1;
  CoreML::Specification::MILSpec::_DictionaryValue_default_instance_ = (uint64_t)&off_1E3D580C0;
  dword_1ED001D20 = 0;
  unk_1ED001D10 = 0u;
  unk_1ED001D00 = 0u;
  byte_1ED001D28 = 1;
  qword_1ED001E58 = (uint64_t)&CoreML::Specification::MILSpec::_Program_FunctionsEntry_default_instance_;
  qword_1ED001E68 = (uint64_t)&CoreML::Specification::MILSpec::_Function_default_instance_;
  qword_1ED001E90 = (uint64_t)&CoreML::Specification::MILSpec::_Program_AttributesEntry_default_instance_;
  qword_1ED001EA0 = (uint64_t)&CoreML::Specification::MILSpec::_Value_default_instance_;
  qword_1ED002108 = (uint64_t)&CoreML::Specification::MILSpec::_Function_BlockSpecializationsEntry_default_instance_;
  qword_1ED002118 = (uint64_t)&CoreML::Specification::MILSpec::_Block_default_instance_;
  qword_1ED001EC8 = (uint64_t)&CoreML::Specification::MILSpec::_Function_AttributesEntry_default_instance_;
  qword_1ED001ED8 = (uint64_t)&CoreML::Specification::MILSpec::_Value_default_instance_;
  qword_1ED001DE8 = (uint64_t)&CoreML::Specification::MILSpec::_Block_AttributesEntry_default_instance_;
  qword_1ED001DF8 = (uint64_t)&CoreML::Specification::MILSpec::_Value_default_instance_;
  qword_1ED001E20 = (uint64_t)&CoreML::Specification::MILSpec::_Operation_InputsEntry_default_instance_;
  qword_1ED001E30 = (uint64_t)&CoreML::Specification::MILSpec::_Argument_default_instance_;
  qword_1ED001F30 = (uint64_t)&CoreML::Specification::MILSpec::_Operation_AttributesEntry_default_instance_;
  qword_1ED001F40 = (uint64_t)&CoreML::Specification::MILSpec::_Value_default_instance_;
  qword_1ED001FE0 = (uint64_t)&CoreML::Specification::MILSpec::_TensorType_AttributesEntry_default_instance_;
  qword_1ED001FF0 = (uint64_t)&CoreML::Specification::MILSpec::_Value_default_instance_;
  qword_1ED001B18 = (uint64_t)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
  unk_1ED001B20 = &CoreML::Specification::MILSpec::_Dimension_default_instance_;
  qword_1ED001CD8 = (uint64_t)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
  unk_1ED001CE0 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
  qword_1ED0012B8 = (uint64_t)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
  qword_1ED001A98 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED001AA0 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
  return result;
}

CoreML::Specification::MILSpec::Operation *CoreML::Specification::MILSpec::Operation::Operation(CoreML::Specification::MILSpec::Operation *this)
{
  _QWORD *v2;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v3;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D58DD0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (_QWORD *)operator new();
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::InnerMap(v2, 0);
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 5) = v2;
  *((_DWORD *)this + 8) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  v3 = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init((uint64_t)this + 104);
  *((_DWORD *)this + 28) = 0;
  if (this != (CoreML::Specification::MILSpec::Operation *)&CoreML::Specification::MILSpec::_Operation_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v3);
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 34) = 0;
  return this;
}

void sub_19C4B5050(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(v4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v3 + 3);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v3);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::InnerMap(_QWORD *a1, google::protobuf::Arena *a2)
{
  uint32_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  google::protobuf::Arena **v8;
  __int128 v10;
  unsigned int v11[258];
  std::random_device v12;

  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  v4 = arc4random();
  v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1)
    v5 = 1;
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  v10 = xmmword_19CB39940;
  v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19C4B5184(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C4B5140);
}

CoreML::Specification::MILSpec::Function *CoreML::Specification::MILSpec::Function::Function(CoreML::Specification::MILSpec::Function *this)
{
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v2;

  *(_QWORD *)this = &off_1E3D58B70;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::Init((uint64_t)this + 48);
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 22) = 0;
  v2 = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init((uint64_t)this + 80);
  *((_DWORD *)this + 22) = 0;
  if (this != (CoreML::Specification::MILSpec::Function *)&CoreML::Specification::MILSpec::_Function_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v2);
  *((_QWORD *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 28) = 0;
  return this;
}

void sub_19C4B5248(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = v4;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(v5);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::~Map(v3);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::Init(uint64_t a1)
{
  google::protobuf::Arena *v2;
  _QWORD *Aligned;
  _QWORD *result;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::InnerMap(Aligned, v2);
    result = google::protobuf::Arena::AllocateAligned(v2, 0, 24);
    *result = Aligned;
    result[1] = google::protobuf::internal::arena_destruct_object<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap>;
    v5 = (unint64_t *)((char *)v2 + 32);
    do
      v6 = __ldxr(v5);
    while (__stxr((unint64_t)result, v5));
    result[2] = v6;
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::InnerMap(Aligned, 0);
  }
  *(_QWORD *)(a1 + 16) = Aligned;
  return result;
}

void sub_19C4B5334(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::InnerMap(_QWORD *a1, google::protobuf::Arena *a2)
{
  uint32_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  google::protobuf::Arena **v8;
  __int128 v10;
  unsigned int v11[258];
  std::random_device v12;

  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  v4 = arc4random();
  v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1)
    v5 = 1;
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  v10 = xmmword_19CB39940;
  v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19C4B5420(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C4B53DCLL);
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::InnerMap(_QWORD *a1, google::protobuf::Arena *a2)
{
  uint32_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  google::protobuf::Arena **v8;
  __int128 v10;
  unsigned int v11[258];
  std::random_device v12;

  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  v4 = arc4random();
  v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1)
    v5 = 1;
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  v10 = xmmword_19CB39940;
  v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19C4B5510(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C4B54CCLL);
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init(uint64_t a1)
{
  google::protobuf::Arena *v2;
  _QWORD *Aligned;
  _QWORD *result;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InnerMap(Aligned, v2);
    result = google::protobuf::Arena::AllocateAligned(v2, 0, 24);
    *result = Aligned;
    result[1] = google::protobuf::internal::arena_destruct_object<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap>;
    v5 = (unint64_t *)((char *)v2 + 32);
    do
      v6 = __ldxr(v5);
    while (__stxr((unint64_t)result, v5));
    result[2] = v6;
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InnerMap(Aligned, 0);
  }
  *(_QWORD *)(a1 + 16) = Aligned;
  return result;
}

void sub_19C4B55E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InnerMap(_QWORD *a1, google::protobuf::Arena *a2)
{
  uint32_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  google::protobuf::Arena **v8;
  __int128 v10;
  unsigned int v11[258];
  std::random_device v12;

  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  v4 = arc4random();
  v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1)
    v5 = 1;
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  v10 = xmmword_19CB39940;
  v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19C4B56CC(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C4B5688);
}

_QWORD *google::protobuf::Map<std::string,std::string>::InnerMap::InnerMap(_QWORD *a1, google::protobuf::Arena *a2)
{
  uint32_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  google::protobuf::Arena **v8;
  __int128 v10;
  unsigned int v11[258];
  std::random_device v12;

  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  v4 = arc4random();
  v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1)
    v5 = 1;
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  v10 = xmmword_19CB39940;
  v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19C4B57BC(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C4B5778);
}

uint64_t std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[64];

  result = a2[1];
  v5 = result - *a2;
  if (result != *a2)
  {
    v6 = v5 + 1;
    if (v5 == -1)
    {
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a1, 0x40uLL);
      return std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      v7 = __clz(v6);
      v8 = 63;
      if (((v6 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = 64;
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a1, v8 - v7);
      do
        v9 = std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v6);
      return *a2 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__eval(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = 0;
    v3 = 0;
    v4 = *(unsigned int **)a1;
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 16);
    v7 = **(_DWORD **)a1;
    v8 = *(_DWORD *)(*(_QWORD *)a1 + 1028);
    do
    {
      do
      {
        v9 = (char *)v4
           + (((unint64_t)((((unint64_t)(v8 - 1) << 7) * (unsigned __int128)0x8000000201uLL) >> 64) >> 3) & 0xFFC);
        v4[257] = *((_DWORD *)v9 + 1);
        v10 = v7 / 0x1F31D;
        v11 = 16807 * (v7 % 0x1F31D);
        v10 *= 2836;
        v12 = v11 >= v10;
        v13 = v11 - v10;
        if (v12)
          v14 = 0;
        else
          v14 = 0x7FFFFFFF;
        v7 = v14 + v13;
        *((_DWORD *)v9 + 1) = v7;
        v8 = v4[257];
        v15 = v8 - 1;
      }
      while (v5 <= v15);
      v16 = v2 << v6;
      if (v6 >= 0x40)
        v16 = 0;
      v2 = v16 + (*(_DWORD *)(a1 + 56) & v15);
      ++v3;
    }
    while (v3 != v1);
    *v4 = v7;
  }
  else
  {
    v2 = 0;
  }
  v17 = *(_QWORD *)(a1 + 24);
  if (v1 < v17)
  {
    v18 = *(unsigned int **)a1;
    v19 = *(_QWORD *)(a1 + 48);
    v20 = *(_QWORD *)(a1 + 16);
    v21 = **(_DWORD **)a1;
    v22 = *(_DWORD *)(*(_QWORD *)a1 + 1028);
    do
    {
      do
      {
        v23 = (char *)v18
            + (((unint64_t)((((unint64_t)(v22 - 1) << 7) * (unsigned __int128)0x8000000201uLL) >> 64) >> 3) & 0xFFC);
        v18[257] = *((_DWORD *)v23 + 1);
        v24 = v21 / 0x1F31D;
        v25 = 16807 * (v21 % 0x1F31D);
        v24 *= 2836;
        v12 = v25 >= v24;
        v26 = v25 - v24;
        if (v12)
          v27 = 0;
        else
          v27 = 0x7FFFFFFF;
        v21 = v27 + v26;
        *((_DWORD *)v23 + 1) = v21;
        v22 = v18[257];
        v28 = v22 - 1;
      }
      while (v19 <= v28);
      v29 = v2 << (v20 + 1);
      if (v20 >= 0x3F)
        v29 = 0;
      v2 = v29 + (*(_DWORD *)(a1 + 60) & v28);
      ++v1;
    }
    while (v1 != v17);
    *v18 = v21;
  }
  return v2;
}

CoreML::Specification::MILSpec::Program *CoreML::Specification::MILSpec::Program::Program(CoreML::Specification::MILSpec::Program *this)
{
  _QWORD *v2;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v3;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E3D58A40;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (_QWORD *)operator new();
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::InnerMap(v2, 0);
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = v2;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 16) = 0;
  v3 = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init((uint64_t)this + 56);
  *((_DWORD *)this + 16) = 0;
  if (this != (CoreML::Specification::MILSpec::Program *)&CoreML::Specification::MILSpec::_Program_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v3);
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  return this;
}

void sub_19C4B5AAC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(v3);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::InnerMap(_QWORD *a1, google::protobuf::Arena *a2)
{
  uint32_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  google::protobuf::Arena **v8;
  __int128 v10;
  unsigned int v11[258];
  std::random_device v12;

  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  v4 = arc4random();
  v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1)
    v5 = 1;
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  v10 = xmmword_19CB39940;
  v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19C4B5BC8(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C4B5B84);
}

CoreML::Specification::MILSpec::Block *CoreML::Specification::MILSpec::Block::Block(CoreML::Specification::MILSpec::Block *this)
{
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v2;

  *(_QWORD *)this = &off_1E3D58910;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 0;
  v2 = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init((uint64_t)this + 96);
  *((_DWORD *)this + 26) = 0;
  if (this != (CoreML::Specification::MILSpec::Block *)&CoreML::Specification::MILSpec::_Block_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v2);
  *((_DWORD *)this + 30) = 0;
  return this;
}

void sub_19C4B5C74(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = v4;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(v5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)(v2 + 64));
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v3);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::TensorType *CoreML::Specification::MILSpec::TensorType::TensorType(CoreML::Specification::MILSpec::TensorType *this)
{
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *v2;

  *(_QWORD *)this = &off_1E3D57DC8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  v2 = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init((uint64_t)this + 48);
  *((_DWORD *)this + 14) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorType *)&CoreML::Specification::MILSpec::_TensorType_default_instance_)
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(v2);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  return this;
}

void sub_19C4B5D34(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(v3);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return 0;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x28uLL);
  *v15 = 0;
  v15[1] = v8;
  v16 = (std::string *)(v15 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v15[4] = *(_QWORD *)(a3 + 16);
  }
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v15 = *v24;
LABEL_41:
    *v24 = v15;
    goto LABEL_42;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    v25 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void sub_19C4B5FA0(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void CoreML::MIL::Opsets::CoreML6_trainOpset::~CoreML6_trainOpset(CoreML::MIL::Opsets::CoreML6_trainOpset *this)
{
  MIL::IROpset::~IROpset(this);
  JUMPOUT(0x1A1AD6260);
}

void CoreML::MIL::Opsets::CoreML7Opset::~CoreML7Opset(CoreML::MIL::Opsets::CoreML7Opset *this)
{
  MIL::IROpset::~IROpset(this);
  JUMPOUT(0x1A1AD6260);
}

void CoreML::MIL::Opsets::CoreML6Opset::~CoreML6Opset(CoreML::MIL::Opsets::CoreML6Opset *this)
{
  MIL::IROpset::~IROpset(this);
  JUMPOUT(0x1A1AD6260);
}

void CoreML::MIL::Opsets::CoreML5Opset::~CoreML5Opset(CoreML::MIL::Opsets::CoreML5Opset *this)
{
  MIL::IROpset::~IROpset(this);
  JUMPOUT(0x1A1AD6260);
}

void sub_19C4B66C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C4B6774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C4B68CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C4B6AF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C4B6D4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C4B7048(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v3 = v2;

  MEMORY[0x1A1AD6248](v1, 0x50C80EE9192B6);
  _Unwind_Resume(a1);
}

void sub_19C4B7104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C4B71F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C4B728C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4B7304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C4B7404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C4B74B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4B7738(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v3 = v2;

  MEMORY[0x1A1AD6248](v1, 0x50C80EE9192B6);
  _Unwind_Resume(a1);
}

void sub_19C4B7AEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C4B7D98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_19C4B7F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  uint64_t v22;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 80), 8);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::replaceTensorInputWithTensorBuffer(MIL::Builder::FunctionBuilder **a1, void *a2)
{
  id v3;
  id v4;
  MIL::Builder::Variable *Input;
  uint64_t Type;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  id v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void *exception;
  std::__shared_weak_count *v42;
  std::string v43;
  std::string v44;
  std::__shared_weak_count *v45;
  std::string v46;
  void *__p;
  char v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  std::string v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  MIL::Builder::BlockBuilder *v59;
  std::__shared_weak_count *v60;
  std::string v61;
  std::string v62;

  v3 = a2;
  objc_msgSend(v3, "name");
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(&v62, (char *)objc_msgSend(v4, "UTF8String"));
  Input = (MIL::Builder::Variable *)MIL::Builder::FunctionBuilder::TryGetInput();
  Type = MIL::Builder::Variable::TryGetType(Input);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 24))(Type);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);

  if (!v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Converting tensor input -> tensor buffer requires input to be a tensor");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  if (v8[1] != *v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7) + 8) - 8);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9)
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7) == 4
      || (v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9),
          v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10),
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7),
    {
      objc_msgSend(v3, "name");
      v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(&v62, (char *)objc_msgSend(v13, "UTF8String"));

      MIL::Builder::FunctionBuilder::RemoveInput();
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v61, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
      else
        v61 = v62;
      MIL::Builder::FunctionBuilder::AddInput();
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      MIL::Builder::FunctionBuilder::SelectedSpecialization(*a1);
      MIL::Builder::FunctionBuilder::GetBlock();
      MIL::Builder::BlockBuilder::GetOperation(v59);
      std::string::basic_string[abi:ne180100]<0>(&v54, "tensor_buffer_to_tensor");
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      v52 = v55;
      v53 = v56;
      if (v56)
      {
        p_shared_owners = (unint64_t *)&v56->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v50 = v57;
      v51 = v58;
      if (v58)
      {
        v16 = (unint64_t *)&v58->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      MIL::Builder::BlockBuilder::AddOperation();
      if (v51)
      {
        v18 = &v51->__shared_owners_;
        do
          v19 = __ldaxr((unint64_t *)v18);
        while (__stlxr(v19 - 1, (unint64_t *)v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      if (v53)
      {
        v20 = &v53->__shared_owners_;
        do
          v21 = __ldaxr((unint64_t *)v20);
        while (__stlxr(v21 - 1, (unint64_t *)v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "input");
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v46, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
      else
        v46 = v62;
      MIL::Builder::OperationBuilder::AddInput();
      v22 = v49;
      if (v49)
      {
        v23 = (unint64_t *)&v49->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if (v48 < 0)
        operator delete(__p);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v44, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
      else
        v44 = v54;
      MIL::Builder::OperationBuilder::AddOutput();
      v25 = v45;
      if (v45)
      {
        v26 = (unint64_t *)&v45->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v43, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
      else
        v43 = v54;
      v42 = v56;
      if (v56)
      {
        v28 = (unint64_t *)&v56->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
      if (v42)
      {
        v30 = (unint64_t *)&v42->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      v32 = v56;
      if (v56)
      {
        v33 = (unint64_t *)&v56->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = v58;
      if (v58)
      {
        v36 = (unint64_t *)&v58->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = v60;
      if (v60)
      {
        v39 = (unint64_t *)&v60->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
    }
  }

}

void sub_19C4B8570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44)
{
  void *v44;
  uint64_t v45;

  if (a39 < 0)
    operator delete(__p);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v45 - 160);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v45 - 144);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v45 - 128);
  if (*(char *)(v45 - 65) < 0)
    operator delete(*(void **)(v45 - 88));

  _Unwind_Resume(a1);
}

void `anonymous namespace'::replaceTensorOutputWithTensorBuffer(MIL::Builder::FunctionBuilder **a1, void *a2)
{
  id v3;
  id v4;
  MIL::Builder::Variable *Variable;
  uint64_t Type;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  size_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  const void *v33;
  int64_t v34;
  void *v35;
  MIL::IRProperty **v36;
  MIL::IRProperty *v37;
  MIL::IRConstantProperty *v38;
  uint64_t Int64ScalarValue;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::runtime_error *exception;
  id v66;
  std::string v67;
  std::__shared_weak_count *v68;
  void *v69;
  char *v70;
  unint64_t v71;
  void *v72;
  char v73;
  std::__shared_weak_count *v74;
  void *v75;
  char v76;
  std::__shared_weak_count *v77;
  std::string v78;
  void *__p;
  char v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  uint64_t v89;
  std::string v90;
  std::string v91;
  std::__shared_weak_count *v92;
  MIL::Builder::OperationBuilder *v93;
  std::__shared_weak_count *v94;
  MIL::Builder::OperationBuilder *v95;
  std::__shared_weak_count *v96;
  std::string v97;
  std::__shared_weak_count *v98;
  std::string v99;
  std::string v100;

  v3 = a2;
  objc_msgSend(v3, "name");
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(&v100, (char *)objc_msgSend(v4, "UTF8String"));

  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v99, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
  else
    v99 = v100;
  MIL::Builder::FunctionBuilder::SelectedSpecialization(*a1);
  MIL::Builder::FunctionBuilder::GetBlock();
  Variable = (MIL::Builder::Variable *)MIL::Builder::BlockBuilder::GetVariable();
  Type = MIL::Builder::Variable::TryGetType(Variable);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 24))(Type);
  v8 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v97);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  if (v9[1] != *v9)
  {
    v66 = v3;
    v10 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8) + 8) - 8);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10)
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8) == 4
      || (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10),
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11),
          v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8),
    {
      MIL::Builder::BlockBuilder::GetOperation();
      v93 = v95;
      v94 = v96;
      if (v96)
      {
        p_shared_owners = &v96->__shared_owners_;
        do
          v15 = __ldxr((unint64_t *)p_shared_owners);
        while (__stxr(v15 + 1, (unint64_t *)p_shared_owners));
      }
      if (v96)
      {
        v16 = &v96->__shared_owners_;
        do
          v17 = __ldaxr((unint64_t *)v16);
        while (__stlxr(v17 - 1, (unint64_t *)v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v100.__r_.__value_.__l.__data_);
      v100 = v97;
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v91, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
      else
        v91 = v100;
      MIL::Builder::OperationBuilder::RenameOutput();
      v18 = v92;
      if (v92)
      {
        v19 = (unint64_t *)&v92->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v90, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
      else
        v90 = v100;
      v88 = 0;
      v89 = 0;
      MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v97, "tensor_to_tensor_buffer");
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
      v84 = v86;
      v85 = v87;
      if (v87)
      {
        v21 = (unint64_t *)&v87->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v82 = 0;
      v83 = 0;
      MIL::Builder::BlockBuilder::AddOperation();
      if (v85)
      {
        v23 = &v85->__shared_owners_;
        do
          v24 = __ldaxr((unint64_t *)v23);
        while (__stlxr(v24 - 1, (unint64_t *)v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "input");
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v78, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
      else
        v78 = v100;
      MIL::Builder::OperationBuilder::AddInput();
      v25 = v81;
      if (v81)
      {
        v26 = (unint64_t *)&v81->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if (v80 < 0)
        operator delete(__p);
      std::string::basic_string[abi:ne180100]<0>(&v75, "interleave_factors");
      v28 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
      v29 = (uint64_t)(v28[1] - *v28) >> 3;
      LOBYTE(v69) = 1;
      std::vector<unsigned char>::vector(&v97, v29, &v69);
      MIL::Builder::OperationBuilder::AddInputUInt8();
      v30 = v77;
      if (v77)
      {
        v31 = (unint64_t *)&v77->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      if (v97.__r_.__value_.__r.__words[0])
      {
        v97.__r_.__value_.__l.__size_ = v97.__r_.__value_.__r.__words[0];
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      if (v76 < 0)
        operator delete(v75);
      std::string::basic_string[abi:ne180100]<0>(&v72, "strides");
      v33 = (const void *)v97.__r_.__value_.__r.__words[0];
      v34 = v97.__r_.__value_.__l.__size_ - v97.__r_.__value_.__r.__words[0];
      if (v97.__r_.__value_.__l.__size_ == v97.__r_.__value_.__r.__words[0])
      {
        v35 = 0;
      }
      else
      {
        if (v34 < 0)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v35 = std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v34 >> 3);
        memmove(v35, v33, v34);
        v34 = (int64_t)v35 + 8 * (v34 >> 3);
      }
      v69 = 0;
      v70 = 0;
      v71 = 0;
      std::vector<long long>::reserve(&v69, (v34 - (uint64_t)v35) >> 3);
      if (v35 != (void *)v34)
      {
        v36 = (MIL::IRProperty **)v35;
        do
        {
          v37 = *v36;
          if (MIL::IRProperty::TryAsConstant(*v36))
          {
            v38 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(v37);
            Int64ScalarValue = MIL::IRConstantProperty::GetInt64ScalarValue(v38);
          }
          else
          {
            Int64ScalarValue = -1;
          }
          v40 = v70;
          if ((unint64_t)v70 >= v71)
          {
            v42 = (char *)v69;
            v43 = (v70 - (_BYTE *)v69) >> 3;
            v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 61)
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            v45 = v71 - (_QWORD)v69;
            if ((uint64_t)(v71 - (_QWORD)v69) >> 2 > v44)
              v44 = v45 >> 2;
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
              v46 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v46 = v44;
            if (v46)
            {
              v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v46);
              v42 = (char *)v69;
              v40 = v70;
            }
            else
            {
              v47 = 0;
            }
            v48 = (uint64_t *)(v46 + 8 * v43);
            *v48 = Int64ScalarValue;
            v41 = (char *)(v48 + 1);
            while (v40 != v42)
            {
              v49 = *((_QWORD *)v40 - 1);
              v40 -= 8;
              *--v48 = v49;
            }
            v69 = v48;
            v70 = v41;
            v71 = v46 + 8 * v47;
            if (v42)
              operator delete(v42);
          }
          else
          {
            *(_QWORD *)v70 = Int64ScalarValue;
            v41 = v40 + 8;
          }
          v70 = v41;
          ++v36;
        }
        while (v36 != (MIL::IRProperty **)v34);
      }
      MIL::Builder::OperationBuilder::AddInputInt64();
      v50 = v74;
      if (v74)
      {
        v51 = (unint64_t *)&v74->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      if (v69)
      {
        v70 = (char *)v69;
        operator delete(v69);
      }
      if (v35)
        operator delete(v35);
      if (v73 < 0)
        operator delete(v72);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v67, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
      else
        v67 = v99;
      MIL::Builder::OperationBuilder::AddOutput();
      v53 = v68;
      v3 = v66;
      if (v68)
      {
        v54 = (unint64_t *)&v68->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (v97.__r_.__value_.__r.__words[0])
      {
        v97.__r_.__value_.__l.__size_ = v97.__r_.__value_.__r.__words[0];
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      v56 = v87;
      if (v87)
      {
        v57 = (unint64_t *)&v87->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v59 = v96;
      if (v96)
      {
        v60 = &v96->__shared_owners_;
        do
          v61 = __ldaxr((unint64_t *)v60);
        while (__stlxr(v61 - 1, (unint64_t *)v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
    }
  }
  v62 = v98;
  if (v98)
  {
    v63 = (unint64_t *)&v98->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);

}

void sub_19C4B8FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  uint64_t v44;

  if (a37 < 0)
    operator delete(__p);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v44 - 200);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v44 - 160);
  if (*(char *)(v44 - 121) < 0)
    operator delete(*(void **)(v44 - 144));
  if (*(char *)(v44 - 89) < 0)
    operator delete(*(void **)(v44 - 112));

  _Unwind_Resume(a1);
}

unint64_t `anonymous namespace'::overheadBytesFromRowAlignmentIsTolerable(unint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t result;
  void *exception;

  if (a2 > 10)
  {
    if (a2 == 11)
    {
LABEL_8:
      v2 = 4;
      goto LABEL_10;
    }
    if (a2 != 14)
      goto LABEL_13;
    v2 = 1;
  }
  else
  {
    if (a2 != 4)
    {
      if (a2 != 5)
      {
LABEL_13:
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](exception, "Unexpected data type for IO tensor");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      goto LABEL_8;
    }
    v2 = 2;
  }
LABEL_10:
  result = CoreML::SafeMultiplies<unsigned long>::operator()(a1, v2);
  if (result)
    return result >= (unint64_t)(float)(((result - 1) & 0xFFFFFFFFFFFFFFC0) - result + 64);
  return result;
}

void sub_19C4B92A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::makeTensorBufferFromTensor(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[3];
  void *v6;
  void *v7;
  uint64_t v8;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v7 = 0;
  v8 = 0;
  v6 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v6, *(const void **)v2, *(_QWORD *)(v2 + 8), (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 3);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v3 = MIL::IRTensorBufferValueType::MakeWithShape();
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  return v3;
}

void sub_19C4B9368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::alignedTensorStrides(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t UInt8Scalar;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  char *v30;
  char *v31;
  void *__p;
  void *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  v36 = 0;
  v37 = 0;
  v35 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v35, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 3);
  v6 = v35;
  v5 = v36;
  if (v35 != v36)
  {
    v7 = v35;
    while (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)v7 + 24))(*(_QWORD *)v7))
    {
      v7 += 8;
      if (v7 == v5)
        goto LABEL_7;
    }
    v13 = MIL::IRUnknownProperty::Make();
    v14 = (v5 - v6) >> 3;
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    std::vector<_KDInterval>::__vallocate[abi:ne180100](a1, v14);
    v15 = (uint64_t *)a1[1];
    v16 = &v15[v14];
    v17 = 8 * v14;
    do
    {
      *v15++ = v13;
      v17 -= 8;
    }
    while (v17);
    a1[1] = v16;
    if (!v6)
      return;
LABEL_39:
    v36 = v6;
    operator delete(v6);
    return;
  }
  v5 = v35;
LABEL_7:
  v29 = 1;
  std::vector<unsigned char>::vector(&v30, (v5 - v6) >> 3, &v29);
  __p = 0;
  v33 = 0;
  v34 = 0;
  v9 = v30;
  v8 = v31;
  v10 = v31 - v30;
  if (v31 == v30)
  {
    v11 = 0;
  }
  else
  {
    if (v10 >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v10);
    __p = v11;
    v33 = v11;
    v34 = &v11[8 * v12];
    v9 = v30;
    v8 = v31;
  }
  if (v9 != v8)
  {
    do
    {
      UInt8Scalar = MIL::IRConstantProperty::MakeUInt8Scalar();
      v19 = UInt8Scalar;
      if (v11 >= v34)
      {
        v21 = (char *)__p;
        v22 = (v11 - (_BYTE *)__p) >> 3;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v24 = v34 - (_BYTE *)__p;
        if ((v34 - (_BYTE *)__p) >> 2 > v23)
          v23 = v24 >> 2;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
          v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v25);
        else
          v26 = 0;
        v27 = (uint64_t *)(v25 + 8 * v22);
        *v27 = v19;
        v20 = v27 + 1;
        if (v11 != v21)
        {
          do
          {
            v28 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *--v27 = v28;
          }
          while (v11 != v21);
          v11 = (char *)__p;
        }
        __p = v27;
        v33 = v20;
        v34 = (char *)(v25 + 8 * v26);
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_QWORD *)v11 = UInt8Scalar;
        v20 = v11 + 8;
      }
      v33 = v20;
      ++v9;
      v11 = (char *)v20;
    }
    while (v9 != v8);
    v8 = v30;
  }
  if (v8)
  {
    v31 = v8;
    operator delete(v8);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
  MIL::Util::GetRowAlignedStrides();
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  v6 = v35;
  if (v35)
    goto LABEL_39;
}

void sub_19C4B963C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  uint64_t v20;
  void *v22;

  v22 = *(void **)v20;
  if (*(_QWORD *)v20)
  {
    *(_QWORD *)(v20 + 8) = v22;
    operator delete(v22);
  }
  if (v19)
    operator delete(v19);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_19C4B9730(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::string *`anonymous namespace'::tensorInputOutputRename(std::string *this, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    *this = *(std::string *)a2;
  return std::string::append(this, "_4D454D5F4F5054", 0xFuLL);
}

void sub_19C4B97A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::makeiOS17SpecializedOp()
{
  unint64_t *p_shared_owners;
  unint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  void *__p[2];
  char v9;
  std::__shared_weak_count *v10;

  std::string::basic_string[abi:ne180100]<0>(__p, "ios17");
  MIL::MILContext::GetOpset();
  MIL::IROpset::TryGetOperatorSharedPtr();
  if (v9 < 0)
    operator delete(__p[0]);
  v7 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v1 = __ldxr(p_shared_owners);
    while (__stxr(v1 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::Make();
  if (v7)
  {
    v2 = (unint64_t *)&v7->__shared_owners_;
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ios17");
  MIL::Builder::OperationBuilder::SetSpecificationOpsetName();
  if (v9 < 0)
    operator delete(__p[0]);
  v4 = v10;
  if (v10)
  {
    v5 = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19C4B98FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void std::vector<long long>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

uint64_t `anonymous namespace'::getIndexOfOutputForOutputName(unsigned __int8 *a1, MIL::Builder::OperationBuilder *this)
{
  MIL::Builder::Variable **v3;
  unsigned __int8 *Name;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  void *exception;
  MIL::Builder::Variable **__p;
  MIL::Builder::Variable **v13;

  MIL::Builder::OperationBuilder::GetOutputs(this);
  v3 = __p;
  if (__p != v13)
  {
    do
    {
      Name = (unsigned __int8 *)MIL::Builder::Variable::GetName(*v3);
      v5 = Name[23];
      if ((v5 & 0x80u) == 0)
        v6 = Name[23];
      else
        v6 = *((_QWORD *)Name + 1);
      v7 = a1[23];
      v8 = (char)v7;
      if ((v7 & 0x80u) != 0)
        v7 = *((_QWORD *)a1 + 1);
      if (v6 == v7)
      {
        if (v8 >= 0)
          v9 = a1;
        else
          v9 = *(unsigned __int8 **)a1;
        if ((v5 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)Name, v9, *((_QWORD *)Name + 1)))
            goto LABEL_19;
        }
        else
        {
          if (!Name[23])
            goto LABEL_19;
          while (*Name == *v9)
          {
            ++Name;
            ++v9;
            if (!--v5)
              goto LABEL_19;
          }
        }
      }
      ++v3;
    }
    while (v3 != v13);
    v3 = v13;
  }
LABEL_19:
  if (v3 == v13)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Op output could not be found.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (__p)
    operator delete(__p);
  return v3 - __p;
}

void sub_19C4B9B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C4B9BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C4B9C00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C4B9E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, std::mutex *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,id a28)
{

  std::mutex::unlock(a10);
  objc_destroyWeak(location);

  objc_destroyWeak(&a28);
  _Unwind_Resume(a1);
}

void sub_19C4B9F88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4BA074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C4BA0C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4BA148(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4BA2C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4BA3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  uint64_t v22;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19C4BA4AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *google::protobuf::GoogleOnceInitImpl(unint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = atomic_load(result);
  if (v2 != 2)
  {
    v3 = result;
    do
      v4 = __ldxr(result);
    while (!v4 && __stxr(1uLL, result));
    __dmb(0xBu);
    if (v4)
    {
      while (v4 == 1)
      {
        result = (unint64_t *)sched_yield();
        v4 = atomic_load(v3);
      }
    }
    else
    {
      result = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      atomic_store(2uLL, v3);
    }
  }
  return result;
}

uint64_t google::protobuf::internal::FunctionClosure0::Run(uint64_t (**this)(void))
{
  int v2;
  uint64_t result;

  v2 = *((unsigned __int8 *)this + 16);
  result = this[1]();
  if (this)
  {
    if (v2)
      return (*((uint64_t (**)(uint64_t (**)(void)))*this + 1))(this);
  }
  return result;
}

uint64_t google::protobuf::internal::InitShutdownFunctions(google::protobuf::internal *this)
{
  _QWORD *v1;
  _QWORD *v2;
  pthread_mutex_t *v3;
  uint64_t result;

  v1 = (_QWORD *)operator new();
  v1[1] = 0;
  v1[2] = 0;
  *v1 = 0;
  google::protobuf::internal::shutdown_functions = (uint64_t)v1;
  v2 = (_QWORD *)operator new();
  v3 = (pthread_mutex_t *)operator new();
  *v2 = v3;
  result = pthread_mutex_init(v3, 0);
  google::protobuf::internal::shutdown_functions_mutex = (uint64_t)v2;
  return result;
}

void sub_19C4BA658(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::InitEmptyString(google::protobuf::internal *this, void (*a2)(void))
{
  google::protobuf::internal::fixed_address_empty_string = 0uLL;
  qword_1ED006508 = 0;
  byte_1ED006510 = 1;
  google::protobuf::internal::OnShutdown((google::protobuf::internal *)google::protobuf::internal::DeleteEmptyString, a2);
}

void google::protobuf::internal::OnShutdown(google::protobuf::internal *this, void (*a2)(void))
{
  unint64_t v3;
  pthread_mutex_t **v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[2];
  char v18;

  v3 = atomic_load(&google::protobuf::internal::shutdown_functions_init);
  if (v3 != 2)
  {
    v17[0] = &off_1E3D5AF80;
    v17[1] = google::protobuf::internal::InitShutdownFunctions;
    v18 = 0;
    google::protobuf::GoogleOnceInitImpl(&google::protobuf::internal::shutdown_functions_init, (uint64_t)v17);
  }
  v4 = (pthread_mutex_t **)google::protobuf::internal::shutdown_functions_mutex;
  google::protobuf::internal::Mutex::Lock((pthread_mutex_t **)google::protobuf::internal::shutdown_functions_mutex);
  v5 = google::protobuf::internal::shutdown_functions;
  v7 = *(_QWORD **)(google::protobuf::internal::shutdown_functions + 8);
  v6 = *(_QWORD *)(google::protobuf::internal::shutdown_functions + 16);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(_QWORD **)google::protobuf::internal::shutdown_functions;
    v10 = ((uint64_t)v7 - *(_QWORD *)google::protobuf::internal::shutdown_functions) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *(_QWORD *)v15 = this;
    v8 = v15 + 8;
    if (v7 != v9)
    {
      do
      {
        v16 = *--v7;
        *((_QWORD *)v15 - 1) = v16;
        v15 -= 8;
      }
      while (v7 != v9);
      v7 = *(_QWORD **)v5;
    }
    *(_QWORD *)v5 = v15;
    *(_QWORD *)(v5 + 8) = v8;
    *(_QWORD *)(v5 + 16) = &v14[8 * v13];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v7 = this;
    v8 = v7 + 1;
  }
  *(_QWORD *)(v5 + 8) = v8;
  google::protobuf::internal::Mutex::Unlock(v4);
}

void sub_19C4BA7FC(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;

  google::protobuf::internal::Mutex::Unlock(v1);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::Mutex::Unlock(pthread_mutex_t **this)
{
  int v1;
  int v2;
  char *v3;
  int v4;
  const char *v5;
  int v6;
  std::string __p;

  v1 = pthread_mutex_unlock(*this);
  if (v1)
  {
    v2 = v1;
    v4 = 3;
    v5 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/stubs/common.cc";
    v6 = 384;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "pthread_mutex_unlock: ");
    v3 = strerror(v2);
    std::string::append(&__p, v3);
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19C4BA8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::internal::Mutex::Lock(pthread_mutex_t **this)
{
  int v1;
  int v2;
  char *v3;
  int v4;
  const char *v5;
  int v6;
  std::string __p;

  v1 = pthread_mutex_lock(*this);
  if (v1)
  {
    v2 = v1;
    v4 = 3;
    v5 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/stubs/common.cc";
    v6 = 377;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "pthread_mutex_lock: ");
    v3 = strerror(v2);
    std::string::append(&__p, v3);
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19C4BA964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::TableStruct *this)
{
  unint64_t *inited;
  double result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_ClassConfidenceThresholding_default_instance_ = (uint64_t)&off_1E3D55C88;
  result = 0.0;
  *(_OWORD *)algn_1ED001590 = 0u;
  *(_OWORD *)&dword_1ED0015A0 = 0u;
  dword_1ED0015B0 = 0;
  byte_1ED0015B8 = 1;
  return result;
}

double CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::TableStruct *this)
{
  unint64_t *inited;
  double result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_ItemSimilarityRecommender_default_instance_ = (uint64_t)&off_1E3D54F78;
  result = 0.0;
  unk_1ED0056F8 = 0u;
  unk_1ED005708 = 0u;
  qword_1ED005718 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED005720 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1ED005728 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED005730 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1ED005738 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED005740 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1ED005758 = 0;
  byte_1ED005760 = 1;
  qword_1ED005748 = (uint64_t)&CoreML::Specification::_StringVector_default_instance_;
  unk_1ED005750 = &CoreML::Specification::_Int64Vector_default_instance_;
  return result;
}

double CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::TableStruct *this)
{
  double result;

  google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_ = (uint64_t)&off_1E3D56C90;
  unk_1ED006120 = 0;
  qword_1ED006128 = 0;
  unk_1ED006130 = 0;
  dword_1ED006138 = 0;
  byte_1ED006140 = 1;
  CoreML::Specification::_BayesianProbitRegressor_default_instance_ = (uint64_t)&off_1E3D54138;
  result = 0.0;
  unk_1ED005078 = 0u;
  *(_OWORD *)&dword_1ED005088 = 0u;
  qword_1ED005098 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED0050A0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED0050A8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED0050B0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED0050B8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED0050C0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED0050C8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED0050D0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  byte_1ED0050E8 = 1;
  qword_1ED0050D8 = (uint64_t)&CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_;
  *(_QWORD *)&dword_1ED0050E0 = 0;
  return result;
}

unint64_t *CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_NonMaximumSuppression_PickTop_default_instance_ = (uint64_t)&off_1E3D56608;
  qword_1ED005F20 = 0;
  byte_1ED005F28 = 0;
  dword_1ED005F2C = 0;
  byte_1ED005F30 = 1;
  CoreML::Specification::_NonMaximumSuppression_default_instance_ = (uint64_t)&off_1E3D53428;
  qword_1ED004AC8 = 0;
  qword_1ED004AD0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED004AD8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED004AE0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED004AE8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED004AF0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED004AF8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  xmmword_1ED004B00 = 0uLL;
  dword_1ED004B28 = 0;
  qword_1ED004B20 = 0;
  byte_1ED004B30 = 1;
  return result;
}

unint64_t *CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::TableStruct *this)
{
  unint64_t *result;

  result = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::_ArrayFeatureExtractor_default_instance_ = (uint64_t)&off_1E3D52E38;
  qword_1ED0048B8 = 0;
  qword_1ED0048C0 = 0;
  qword_1ED0048C8 = 0;
  dword_1ED0048D4 = 0;
  byte_1ED0048D8 = 1;
  return result;
}

unint64_t *CoreML::Specification::protobuf_CategoricalMapping_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_CategoricalMapping_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_CategoricalMapping_default_instance_ = (uint64_t)&off_1E3D51380;
  unk_1ED003B00 = 0;
  dword_1ED003B20 = 0;
  qword_1ED003B18 = 0;
  byte_1ED003B28 = 1;
  return result;
}

unint64_t *google::protobuf::internal::InitProtobufDefaults(google::protobuf::internal *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&google::protobuf::internal::empty_string_once_init_);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = google::protobuf::internal::InitEmptyString;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&google::protobuf::internal::empty_string_once_init_, (uint64_t)v3);
  }
  return result;
}

double CoreML::Specification::protobuf_FeatureVectorizer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_FeatureVectorizer_2eproto::TableStruct *this)
{
  double result;

  google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::_FeatureVectorizer_default_instance_ = (uint64_t)&off_1E3D50BC8;
  result = 0.0;
  *(_OWORD *)algn_1ED0038F0 = 0u;
  *(_OWORD *)&dword_1ED003900 = 0u;
  dword_1ED003910 = 0;
  byte_1ED003918 = 1;
  return result;
}

double CoreML::Specification::protobuf_NearestNeighbors_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_NearestNeighbors_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *v2;
  double result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  v2 = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults((CoreML::Specification::protobuf_Parameters_2eproto *)v2);
  qword_1ED005C50 = 0;
  *(_QWORD *)&dword_1ED005C58 = 0;
  CoreML::Specification::_KNearestNeighborsClassifier_default_instance_ = (uint64_t)&off_1E3D55D20;
  qword_1ED005C20 = 0;
  byte_1ED005C60 = 1;
  CoreML::Specification::_NearestNeighborsIndex_default_instance_ = (uint64_t)&off_1E3D53390;
  dword_1ED004A98 = 0;
  qword_1ED004A90 = 0;
  result = 0.0;
  unk_1ED004A58 = 0u;
  unk_1ED004A68 = 0u;
  dword_1ED004A78 = 0;
  byte_1ED004AA0 = 1;
  CoreML::Specification::_UniformWeighting_default_instance_ = (uint64_t)&off_1E3D50670;
  qword_1ED0037C8 = 0;
  dword_1ED0037D0 = 0;
  byte_1ED0037D8 = 1;
  CoreML::Specification::_InverseDistanceWeighting_default_instance_ = (uint64_t)&off_1E3D54AB8;
  qword_1ED005550 = 0;
  dword_1ED005558 = 0;
  byte_1ED005560 = 1;
  CoreML::Specification::_LinearIndex_default_instance_ = (uint64_t)&off_1E3D4D230;
  qword_1ED002878 = 0;
  dword_1ED002880 = 0;
  byte_1ED002888 = 1;
  CoreML::Specification::_SingleKdTreeIndex_default_instance_ = (uint64_t)&off_1E3D50EC0;
  qword_1ED0039D8 = 0;
  qword_1ED0039E0 = 0;
  byte_1ED0039E8 = 1;
  CoreML::Specification::_SquaredEuclideanDistance_default_instance_ = (uint64_t)&off_1E3D54D18;
  qword_1ED005618 = 0;
  dword_1ED005620 = 0;
  byte_1ED005628 = 1;
  qword_1ED005C28 = (uint64_t)&CoreML::Specification::_NearestNeighborsIndex_default_instance_;
  qword_1ED005C30 = (uint64_t)&CoreML::Specification::_Int64Parameter_default_instance_;
  return result;
}

unint64_t *CoreML::Specification::protobuf_DictVectorizer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_DictVectorizer_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_DictVectorizer_default_instance_ = (uint64_t)&off_1E3D4E790;
  unk_1ED002D10 = 0;
  qword_1ED002D20 = 0;
  byte_1ED002D28 = 1;
  return result;
}

double CoreML::Specification::protobuf_DataStructures_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_DataStructures_2eproto::TableStruct *this)
{
  unint64_t *inited;
  double result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
  qword_1ED005940 = 0;
  unk_1ED005948 = 0;
  qword_1ED005930 = 0;
  unk_1ED005938 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1ED005950 = 0;
  CoreML::Specification::_StringToInt64Map_MapEntry_default_instance_ = (uint64_t)&off_1E3D5AD88;
  byte_1ED005958 = 1;
  *((_BYTE *)CoreML::Specification::StringToInt64Map::StringToInt64Map((CoreML::Specification::StringToInt64Map *)&CoreML::Specification::_StringToInt64Map_default_instance_)
  + 56) = 1;
  qword_1ED0056D0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED0056D8 = 0;
  qword_1ED0056C0 = 0;
  unk_1ED0056C8 = 0;
  dword_1ED0056E0 = 0;
  CoreML::Specification::_Int64ToStringMap_MapEntry_default_instance_ = (uint64_t)&off_1E3D5AE30;
  byte_1ED0056E8 = 1;
  *((_BYTE *)CoreML::Specification::Int64ToStringMap::Int64ToStringMap((CoreML::Specification::Int64ToStringMap *)&CoreML::Specification::_Int64ToStringMap_default_instance_)
  + 56) = 1;
  qword_1ED005B40 = 0;
  unk_1ED005B48 = 0;
  qword_1ED005B30 = 0;
  unk_1ED005B38 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1ED005B50 = 0;
  CoreML::Specification::_StringToDoubleMap_MapEntry_default_instance_ = (uint64_t)&off_1E3D5ACE0;
  byte_1ED005B58 = 1;
  *((_BYTE *)CoreML::Specification::StringToDoubleMap::StringToDoubleMap((CoreML::Specification::StringToDoubleMap *)&CoreML::Specification::_StringToDoubleMap_default_instance_)
  + 56) = 1;
  *(_OWORD *)&qword_1ED005688 = 0u;
  unk_1ED005698 = 0u;
  dword_1ED0056A8 = 0;
  CoreML::Specification::_Int64ToDoubleMap_MapEntry_default_instance_ = (uint64_t)&off_1E3D5AED8;
  byte_1ED0056B0 = 1;
  *((_BYTE *)CoreML::Specification::Int64ToDoubleMap::Int64ToDoubleMap((CoreML::Specification::Int64ToDoubleMap *)&CoreML::Specification::_Int64ToDoubleMap_default_instance_)
  + 56) = 1;
  CoreML::Specification::_StringVector_default_instance_ = (uint64_t)&off_1E3D4DEA8;
  result = 0.0;
  unk_1ED006718 = 0u;
  *(_OWORD *)&dword_1ED006728 = 0u;
  dword_1ED006738 = 0;
  byte_1ED006740 = 1;
  CoreML::Specification::_Int64Vector_default_instance_ = (uint64_t)&off_1E3D4D198;
  *(_QWORD *)algn_1ED002848 = 0;
  qword_1ED002850 = 0;
  qword_1ED002858 = 0;
  dword_1ED002864 = 0;
  byte_1ED002868 = 1;
  CoreML::Specification::_FloatVector_default_instance_ = (uint64_t)&off_1E3D4D100;
  *(_QWORD *)algn_1ED001398 = 0;
  qword_1ED0013A0 = 0;
  unk_1ED0013A8 = 0;
  dword_1ED0013B4 = 0;
  byte_1ED0013B8 = 1;
  CoreML::Specification::_DoubleVector_default_instance_ = (uint64_t)&off_1E3D4DB18;
  *(_QWORD *)algn_1ED002918 = 0;
  qword_1ED002920 = 0;
  qword_1ED002928 = 0;
  dword_1ED002934 = 0;
  byte_1ED002938 = 1;
  dword_1ED0026C8 = 0;
  CoreML::Specification::_Int64Range_default_instance_ = (uint64_t)&off_1E3D4CBA8;
  unk_1ED0026B0 = 0;
  qword_1ED0026B8 = 0;
  unk_1ED0026C0 = 0;
  byte_1ED0026D0 = 1;
  CoreML::Specification::_Int64Set_default_instance_ = (uint64_t)&off_1E3D590C8;
  unk_1ED0025B0 = 0;
  qword_1ED0025B8 = 0;
  qword_1ED0025C0 = 0;
  dword_1ED0025CC = 0;
  byte_1ED0025D0 = 1;
  CoreML::Specification::_DoubleRange_default_instance_ = (uint64_t)&off_1E3D4CFD0;
  *(_QWORD *)algn_1ED0027A8 = 0;
  dword_1ED0027C0 = 0;
  qword_1ED0027B0 = 0;
  unk_1ED0027B8 = 0;
  byte_1ED0027C8 = 1;
  qword_1ED005930 = (uint64_t)&CoreML::Specification::_StringToInt64Map_MapEntry_default_instance_;
  qword_1ED0056C0 = (uint64_t)&CoreML::Specification::_Int64ToStringMap_MapEntry_default_instance_;
  qword_1ED005B30 = (uint64_t)&CoreML::Specification::_StringToDoubleMap_MapEntry_default_instance_;
  qword_1ED005688 = (uint64_t)&CoreML::Specification::_Int64ToDoubleMap_MapEntry_default_instance_;
  return result;
}

unint64_t *CoreML::Specification::protobuf_OneHotEncoder_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_OneHotEncoder_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  qword_1ED002C38 = 0;
  qword_1ED002C20 = 0;
  *(_QWORD *)&byte_1ED002C28 = 0;
  CoreML::Specification::_OneHotEncoder_default_instance_ = (uint64_t)&off_1E3D4E400;
  byte_1ED002C40 = 1;
  return result;
}

uint64_t *CoreML::Specification::protobuf_NeuralNetwork_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_NeuralNetwork_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *v2;
  uint64_t *result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  v2 = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults((CoreML::Specification::protobuf_Parameters_2eproto *)v2);
  CoreML::Specification::_NeuralNetwork_default_instance_ = (uint64_t)&off_1E3D4E368;
  CoreML::Specification::_NeuralNetworkImageScaler_default_instance_ = (uint64_t)&off_1E3D54BE8;
  *(_OWORD *)algn_1ED0055B8 = 0u;
  *(_OWORD *)&dword_1ED0055C8 = 0u;
  byte_1ED0055D8 = 1;
  CoreML::Specification::_NeuralNetworkMeanImage_default_instance_ = (uint64_t)&off_1E3D53BE0;
  *(_QWORD *)algn_1ED004DD8 = 0;
  qword_1ED004DE0 = 0;
  qword_1ED004DE8 = 0;
  dword_1ED004DF4 = 0;
  byte_1ED004DF8 = 1;
  CoreML::Specification::_ActivationReLU_default_instance_ = (uint64_t)&off_1E3D4E530;
  qword_1ED002C90 = 0;
  dword_1ED002C98 = 0;
  byte_1ED002CA0 = 1;
  qword_1ED004388 = 0;
  *(_QWORD *)&dword_1ED004390 = 0;
  CoreML::Specification::_ActivationLeakyReLU_default_instance_ = (uint64_t)&off_1E3D51C68;
  byte_1ED004398 = 1;
  CoreML::Specification::_ActivationTanh_default_instance_ = (uint64_t)&off_1E3D4E5C8;
  qword_1ED002CB0 = 0;
  dword_1ED002CB8 = 0;
  byte_1ED002CC0 = 1;
  dword_1ED0045D8 = 0;
  CoreML::Specification::_ActivationScaledTanh_default_instance_ = (uint64_t)&off_1E3D524B8;
  *(_QWORD *)algn_1ED0045C8 = 0;
  qword_1ED0045D0 = 0;
  byte_1ED0045E0 = 1;
  CoreML::Specification::_ActivationSigmoid_default_instance_ = (uint64_t)&off_1E3D50708;
  qword_1ED0037E8 = 0;
  dword_1ED0037F0 = 0;
  byte_1ED0037F8 = 1;
  qword_1ED003298 = 0;
  unk_1ED0032A0 = 0;
  CoreML::Specification::_ActivationLinear_default_instance_ = (uint64_t)&off_1E3D4FA90;
  dword_1ED0032A8 = 0;
  byte_1ED0032B0 = 1;
  qword_1ED004890 = 0;
  unk_1ED004898 = 0;
  CoreML::Specification::_ActivationSigmoidHard_default_instance_ = (uint64_t)&off_1E3D52DA0;
  dword_1ED0048A0 = 0;
  byte_1ED0048A8 = 1;
  CoreML::Specification::_ActivationELU_default_instance_ = (uint64_t)&off_1E3D4E070;
  qword_1ED002A90 = 0;
  qword_1ED002A98 = 0;
  byte_1ED002AA0 = 1;
  qword_1ED005668 = 0;
  *(_QWORD *)&dword_1ED005670 = 0;
  CoreML::Specification::_ActivationThresholdedReLU_default_instance_ = (uint64_t)&off_1E3D54E48;
  byte_1ED005678 = 1;
  CoreML::Specification::_ActivationSoftsign_default_instance_ = (uint64_t)&off_1E3D51120;
  qword_1ED003A78 = 0;
  dword_1ED003A80 = 0;
  byte_1ED003A88 = 1;
  CoreML::Specification::_ActivationSoftplus_default_instance_ = (uint64_t)&off_1E3D51088;
  qword_1ED003A58 = 0;
  dword_1ED003A60 = 0;
  byte_1ED003A68 = 1;
  CoreML::Specification::_ActivationParametricSoftplus_default_instance_ = (uint64_t)&off_1E3D56148;
  CoreML::Specification::_ActivationParams_default_instance_ = (uint64_t)&off_1E3D4FB28;
  CoreML::Specification::_BranchLayerParams_default_instance_ = (uint64_t)&off_1E3D508D0;
  CoreML::Specification::_LoopLayerParams_default_instance_ = (uint64_t)&off_1E3D4F538;
  CoreML::Specification::_LoopBreakLayerParams_default_instance_ = (uint64_t)&off_1E3D527B0;
  qword_1ED0046C0 = 0;
  dword_1ED0046C8 = 0;
  byte_1ED0046D0 = 1;
  CoreML::Specification::_LoopContinueLayerParams_default_instance_ = (uint64_t)&off_1E3D54430;
  qword_1ED005198 = 0;
  dword_1ED0051A0 = 0;
  byte_1ED0051A8 = 1;
  CoreML::Specification::_CopyLayerParams_default_instance_ = (uint64_t)&off_1E3D4F110;
  qword_1ED002FF8 = 0;
  dword_1ED003000 = 0;
  byte_1ED003008 = 1;
  qword_1ED004D98 = 0;
  unk_1ED004DA0 = 0;
  CoreML::Specification::_GreaterThanLayerParams_default_instance_ = (uint64_t)&off_1E3D53AB0;
  byte_1ED004DA8 = 1;
  qword_1ED0050F8 = 0;
  unk_1ED005100 = 0;
  CoreML::Specification::_GreaterEqualLayerParams_default_instance_ = (uint64_t)&off_1E3D54268;
  byte_1ED005108 = 1;
  qword_1ED004468 = 0;
  unk_1ED004470 = 0;
  CoreML::Specification::_LessThanLayerParams_default_instance_ = (uint64_t)&off_1E3D52090;
  byte_1ED004478 = 1;
  qword_1ED004680 = 0;
  unk_1ED004688 = 0;
  CoreML::Specification::_LessEqualLayerParams_default_instance_ = (uint64_t)&off_1E3D52680;
  byte_1ED004690 = 1;
  qword_1ED003400 = 0;
  unk_1ED003408 = 0;
  CoreML::Specification::_EqualLayerParams_default_instance_ = (uint64_t)&off_1E3D4FD88;
  byte_1ED003410 = 1;
  qword_1ED0044A8 = 0;
  unk_1ED0044B0 = 0;
  CoreML::Specification::_NotEqualLayerParams_default_instance_ = (uint64_t)&off_1E3D521C0;
  byte_1ED0044B8 = 1;
  CoreML::Specification::_LogicalAndLayerParams_default_instance_ = (uint64_t)&off_1E3D531C8;
  qword_1ED0049F8 = 0;
  dword_1ED004A00 = 0;
  byte_1ED004A08 = 1;
  CoreML::Specification::_LogicalOrLayerParams_default_instance_ = (uint64_t)&off_1E3D52718;
  qword_1ED0046A0 = 0;
  dword_1ED0046A8 = 0;
  byte_1ED0046B0 = 1;
  CoreML::Specification::_LogicalXorLayerParams_default_instance_ = (uint64_t)&off_1E3D532F8;
  qword_1ED004A38 = 0;
  dword_1ED004A40 = 0;
  byte_1ED004A48 = 1;
  CoreML::Specification::_LogicalNotLayerParams_default_instance_ = (uint64_t)&off_1E3D53260;
  qword_1ED004A18 = 0;
  dword_1ED004A20 = 0;
  byte_1ED004A28 = 1;
  CoreML::Specification::_BorderAmounts_default_instance_ = (uint64_t)&off_1E3D4E238;
  dword_1ED002B38 = 0;
  unk_1ED002B28 = 0u;
  unk_1ED002B18 = 0u;
  byte_1ED002B40 = 1;
  qword_1ED002A10 = 0;
  qword_1ED002A18 = 0;
  CoreML::Specification::_ValidPadding_default_instance_ = (uint64_t)&off_1E3D4DF40;
  dword_1ED002A20 = 0;
  byte_1ED002A28 = 1;
  qword_1ED0028C8 = 0;
  *(_QWORD *)&dword_1ED0028D0 = 0;
  CoreML::Specification::_SamePadding_default_instance_ = (uint64_t)&off_1E3D4D360;
  byte_1ED0028D8 = 1;
  qword_1ED0029F0 = 0;
  unk_1ED0029F8 = 0;
  CoreML::Specification::_SamplingMode_default_instance_ = (uint64_t)&off_1E3D4DD78;
  byte_1ED002A00 = 1;
  qword_1ED003AE0 = 0;
  unk_1ED003AE8 = 0;
  CoreML::Specification::_BoxCoordinatesMode_default_instance_ = (uint64_t)&off_1E3D512E8;
  byte_1ED003AF0 = 1;
  CoreML::Specification::_WeightParams_default_instance_ = (uint64_t)&off_1E3D4DFD8;
  *(_QWORD *)algn_1ED002A38 = 0;
  qword_1ED002A40 = 0;
  unk_1ED002A48 = 0;
  qword_1ED002A58 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED002A60 = &google::protobuf::internal::fixed_address_empty_string;
  byte_1ED002A78 = 0;
  qword_1ED002A68 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED002A70 = 0;
  dword_1ED002A7C = 0;
  byte_1ED002A80 = 1;
  qword_1ED004230 = 0;
  qword_1ED004218 = 0;
  unk_1ED004220 = 0;
  CoreML::Specification::_QuantizationParams_default_instance_ = (uint64_t)&off_1E3D51840;
  byte_1ED004238 = 1;
  qword_1ED005590 = 0;
  unk_1ED005598 = 0;
  CoreML::Specification::_LinearQuantizationParams_default_instance_ = (uint64_t)&off_1E3D54B50;
  unk_1ED005570 = 0;
  qword_1ED005578 = 0;
  qword_1ED005580 = 0;
  dword_1ED0055A4 = 0;
  byte_1ED0055A8 = 1;
  CoreML::Specification::_LookUpTableQuantizationParams_default_instance_ = (uint64_t)&off_1E3D56570;
  unk_1ED005EF0 = 0;
  qword_1ED005EF8 = 0;
  unk_1ED005F00 = 0;
  dword_1ED005F0C = 0;
  byte_1ED005F10 = 1;
  qword_1ED004C68 = 0;
  qword_1ED004C70 = 0;
  qword_1ED004C80 = 0;
  qword_1ED004C88 = 0;
  qword_1ED004C98 = 0;
  qword_1ED004CA0 = 0;
  CoreML::Specification::_ConvolutionLayerParams_default_instance_ = (uint64_t)&off_1E3D53850;
  *(_QWORD *)algn_1ED004C48 = 0;
  qword_1ED004C50 = 0;
  qword_1ED004C58 = 0;
  *(_OWORD *)((char *)&qword_1ED004CC8 + 2) = 0u;
  xmmword_1ED004CB0 = 0u;
  *(_OWORD *)&qword_1ED004CC0 = 0u;
  qword_1ED004CE8 = 0;
  byte_1ED004CF0 = 1;
  CoreML::Specification::_Convolution3DLayerParams_default_instance_ = (uint64_t)&off_1E3D54988;
  qword_1ED0054B8 = 0;
  qword_1ED0054C0 = 0;
  qword_1ED0054C8 = 0;
  dword_1ED005538 = 0;
  *(_OWORD *)&dword_1ED005528 = 0u;
  *(_OWORD *)&byte_1ED005518 = 0u;
  *(_OWORD *)&dword_1ED005508 = 0u;
  unk_1ED0054F8 = 0u;
  *(_OWORD *)&dword_1ED0054E8 = 0u;
  *(_OWORD *)&qword_1ED0054D8 = 0u;
  byte_1ED005540 = 1;
  CoreML::Specification::_InnerProductLayerParams_default_instance_ = (uint64_t)&off_1E3D54300;
  dword_1ED005144 = 0;
  *(__int128 *)((char *)&xmmword_1ED005130 + 2) = 0u;
  *(_OWORD *)&qword_1ED005128 = 0u;
  *(_OWORD *)&qword_1ED005118 = 0u;
  byte_1ED005148 = 1;
  CoreML::Specification::_EmbeddingLayerParams_default_instance_ = (uint64_t)&off_1E3D525E8;
  dword_1ED00466C = 0;
  *(_OWORD *)((char *)&xmmword_1ED004650 + 9) = 0u;
  xmmword_1ED004650 = 0u;
  unk_1ED004640 = 0u;
  byte_1ED004670 = 1;
  CoreML::Specification::_EmbeddingNDLayerParams_default_instance_ = (uint64_t)&off_1E3D538E8;
  dword_1ED004D3C = 0;
  *(__int128 *)((char *)&xmmword_1ED004D28 + 1) = 0u;
  *(_OWORD *)&qword_1ED004D20 = 0u;
  *(_OWORD *)&qword_1ED004D10 = 0u;
  byte_1ED004D40 = 1;
  CoreML::Specification::_BatchnormLayerParams_default_instance_ = (uint64_t)&off_1E3D52550;
  CoreML::Specification::_PoolingLayerParams_ValidCompletePadding_default_instance_ = (uint64_t)&off_1E3D57908;
  *(_QWORD *)algn_1ED0064B8 = 0;
  qword_1ED0064C0 = 0;
  qword_1ED0064C8 = 0;
  dword_1ED0064D4 = 0;
  byte_1ED0064D8 = 1;
  qword_1ED0041C0 = 0;
  qword_1ED0041C8 = 0;
  CoreML::Specification::_PoolingLayerParams_default_instance_ = (uint64_t)&off_1E3D517A8;
  unk_1ED0041A0 = 0;
  qword_1ED0041A8 = 0;
  qword_1ED0041B0 = 0;
  word_1ED0041D8 = 0;
  dword_1ED0041D4 = 0;
  qword_1ED0041E8 = 0;
  byte_1ED0041F0 = 1;
  CoreML::Specification::_Pooling3DLayerParams_default_instance_ = (uint64_t)&off_1E3D52848;
  qword_1ED004720 = 0;
  unk_1ED004710 = 0u;
  unk_1ED004700 = 0u;
  unk_1ED0046F0 = 0u;
  unk_1ED0046E0 = 0u;
  byte_1ED004728 = 1;
  qword_1ED0059E8 = 0;
  *(_QWORD *)&dword_1ED0059F0 = 0;
  CoreML::Specification::_GlobalPooling3DLayerParams_default_instance_ = (uint64_t)&off_1E3D55698;
  byte_1ED0059F8 = 1;
  qword_1ED0063D0 = 0;
  *(_QWORD *)&dword_1ED0063D8 = 0;
  CoreML::Specification::_PaddingLayerParams_PaddingConstant_default_instance_ = (uint64_t)&off_1E3D57448;
  byte_1ED0063E0 = 1;
  CoreML::Specification::_PaddingLayerParams_PaddingReflection_default_instance_ = (uint64_t)&off_1E3D574E0;
  qword_1ED0063F0 = 0;
  dword_1ED0063F8 = 0;
  byte_1ED006400 = 1;
  CoreML::Specification::_PaddingLayerParams_PaddingReplication_default_instance_ = (uint64_t)&off_1E3D576A8;
  qword_1ED006448 = 0;
  dword_1ED006450 = 0;
  byte_1ED006458 = 1;
  CoreML::Specification::_PaddingLayerParams_default_instance_ = (uint64_t)&off_1E3D515E0;
  CoreML::Specification::_ConcatLayerParams_default_instance_ = (uint64_t)&off_1E3D50968;
  *(_QWORD *)algn_1ED003888 = 0;
  byte_1ED003890 = 0;
  dword_1ED003894 = 0;
  byte_1ED003898 = 1;
  CoreML::Specification::_LRNLayerParams_default_instance_ = (uint64_t)&off_1E3D4E9F0;
  *(__int128 *)((char *)&xmmword_1ED002E40 + 8) = 0u;
  *(_OWORD *)&qword_1ED002E38 = 0u;
  byte_1ED002E58 = 1;
  CoreML::Specification::_SoftmaxLayerParams_default_instance_ = (uint64_t)&off_1E3D51AA0;
  qword_1ED0042E8 = 0;
  dword_1ED0042F0 = 0;
  byte_1ED0042F8 = 1;
  qword_1ED003738 = 0;
  qword_1ED003740 = 0;
  CoreML::Specification::_SplitLayerParams_default_instance_ = (uint64_t)&off_1E3D50410;
  dword_1ED003748 = 0;
  byte_1ED003750 = 1;
  qword_1ED002CD0 = 0;
  *(_QWORD *)&dword_1ED002CD8 = 0;
  CoreML::Specification::_AddLayerParams_default_instance_ = (uint64_t)&off_1E3D4E660;
  byte_1ED002CE0 = 1;
  qword_1ED004488 = 0;
  *(_QWORD *)&dword_1ED004490 = 0;
  CoreML::Specification::_MultiplyLayerParams_default_instance_ = (uint64_t)&off_1E3D52128;
  byte_1ED004498 = 1;
  CoreML::Specification::_UnaryFunctionLayerParams_default_instance_ = (uint64_t)&off_1E3D54DB0;
  *(__int128 *)((char *)&xmmword_1ED005640 + 8) = 0u;
  *(_OWORD *)&qword_1ED005638 = 0u;
  byte_1ED005658 = 1;
  qword_1ED004598 = 0;
  unk_1ED0045A0 = 0;
  CoreML::Specification::_UpsampleLayerParams_default_instance_ = (uint64_t)&off_1E3D52420;
  *(_QWORD *)algn_1ED004578 = 0;
  qword_1ED004580 = 0;
  unk_1ED004588 = 0;
  *(_QWORD *)&dword_1ED0045AC = 0;
  dword_1ED0045B4 = 0;
  byte_1ED0045B8 = 1;
  CoreML::Specification::_ResizeBilinearLayerParams_default_instance_ = (uint64_t)&off_1E3D55308;
  CoreML::Specification::_CropResizeLayerParams_default_instance_ = (uint64_t)&off_1E3D52ED0;
  CoreML::Specification::_BiasLayerParams_default_instance_ = (uint64_t)&off_1E3D4EF48;
  CoreML::Specification::_ScaleLayerParams_default_instance_ = (uint64_t)&off_1E3D502E0;
  CoreML::Specification::_LoadConstantLayerParams_default_instance_ = (uint64_t)&off_1E3D54398;
  qword_1ED004DB8 = 0;
  *(_QWORD *)&dword_1ED004DC0 = 0;
  CoreML::Specification::_L2NormalizeLayerParams_default_instance_ = (uint64_t)&off_1E3D53B48;
  byte_1ED004DC8 = 1;
  qword_1ED003B58 = 0;
  unk_1ED003B60 = 0;
  CoreML::Specification::_FlattenLayerParams_default_instance_ = (uint64_t)&off_1E3D514B0;
  byte_1ED003B68 = 1;
  CoreML::Specification::_ReshapeLayerParams_default_instance_ = (uint64_t)&off_1E3D518D8;
  *(_QWORD *)algn_1ED004258 = 0;
  qword_1ED004260 = 0;
  unk_1ED004268 = 0;
  unk_1ED004274 = 0;
  byte_1ED004280 = 1;
  CoreML::Specification::_PermuteLayerParams_default_instance_ = (uint64_t)&off_1E3D51678;
  *(_QWORD *)algn_1ED004148 = 0;
  qword_1ED004150 = 0;
  unk_1ED004158 = 0;
  dword_1ED004164 = 0;
  byte_1ED004168 = 1;
  CoreML::Specification::_ReorganizeDataLayerParams_default_instance_ = (uint64_t)&off_1E3D551D8;
  *(_QWORD *)algn_1ED005848 = 0;
  qword_1ED005850 = 0;
  *(_QWORD *)&dword_1ED005858 = 0;
  byte_1ED005860 = 1;
  CoreML::Specification::_SliceLayerParams_default_instance_ = (uint64_t)&off_1E3D50378;
  qword_1ED003720 = 0;
  unk_1ED003710 = 0u;
  unk_1ED003700 = 0u;
  byte_1ED003728 = 1;
  qword_1ED0039B8 = 0;
  *(_QWORD *)&dword_1ED0039C0 = 0;
  CoreML::Specification::_ReduceLayerParams_default_instance_ = (uint64_t)&off_1E3D50E28;
  unk_1ED0039B0 = 0;
  byte_1ED0039C8 = 1;
  CoreML::Specification::_CropLayerParams_default_instance_ = (uint64_t)&off_1E3D4F240;
  CoreML::Specification::_AverageLayerParams_default_instance_ = (uint64_t)&off_1E3D51250;
  qword_1ED003AC0 = 0;
  dword_1ED003AC8 = 0;
  byte_1ED003AD0 = 1;
  CoreML::Specification::_MaxLayerParams_default_instance_ = (uint64_t)&off_1E3D4EA88;
  qword_1ED002E68 = 0;
  dword_1ED002E70 = 0;
  byte_1ED002E78 = 1;
  CoreML::Specification::_MinLayerParams_default_instance_ = (uint64_t)&off_1E3D4EB20;
  qword_1ED002E88 = 0;
  dword_1ED002E90 = 0;
  byte_1ED002E98 = 1;
  CoreML::Specification::_DotProductLayerParams_default_instance_ = (uint64_t)&off_1E3D53000;
  qword_1ED004970 = 0;
  byte_1ED004978 = 0;
  dword_1ED00497C = 0;
  byte_1ED004980 = 1;
  dword_1ED0061B0 = 0;
  qword_1ED0061A0 = 0;
  qword_1ED0061A8 = 0;
  CoreML::Specification::_MeanVarianceNormalizeLayerParams_default_instance_ = (uint64_t)&off_1E3D56E58;
  byte_1ED0061B8 = 1;
  dword_1ED0058E0 = 0;
  qword_1ED0058D0 = 0;
  qword_1ED0058D8 = 0;
  CoreML::Specification::_SequenceRepeatLayerParams_default_instance_ = (uint64_t)&off_1E3D553A0;
  byte_1ED0058E8 = 1;
  CoreML::Specification::_SimpleRecurrentLayerParams_default_instance_ = (uint64_t)&off_1E3D55A28;
  CoreML::Specification::_GRULayerParams_default_instance_ = (uint64_t)&off_1E3D4E8C0;
  CoreML::Specification::_LSTMParams_default_instance_ = (uint64_t)&off_1E3D4CC40;
  CoreML::Specification::_LSTMWeightParams_default_instance_ = (uint64_t)&off_1E3D50118;
  CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_ = (uint64_t)&off_1E3D56738;
  CoreML::Specification::_BiDirectionalLSTMLayerParams_default_instance_ = (uint64_t)&off_1E3D561E0;
  CoreML::Specification::_CustomLayerParams_CustomLayerParamValue_default_instance_ = (uint64_t)&off_1E3D577D8;
  CoreML::Specification::_CustomLayerParams_ParametersEntry_default_instance_ = (uint64_t)&off_1E3D5A8F0;
  qword_1ED0062E0 = 0;
  CoreML::Specification::_ActivationPReLU_default_instance_ = (uint64_t)&off_1E3D4ED80;
  *(_QWORD *)algn_1ED002F08 = 0;
  unk_1ED002BC0 = 0u;
  *(_OWORD *)&dword_1ED002BD0 = 0u;
  unk_1ED002BE0 = 0u;
  unk_1ED002BF0 = 0u;
  *(_OWORD *)((char *)&qword_1ED002BF8 + 4) = 0u;
  byte_1ED002C10 = 1;
  qword_1ED002F10 = 0;
  dword_1ED002F18 = 0;
  byte_1ED002F20 = 1;
  qword_1ED005D78 = 0;
  qword_1ED005D80 = 0;
  dword_1ED005D90 = 0;
  qword_1ED005D88 = 0;
  byte_1ED005D98 = 1;
  qword_1ED0032C0 = 0;
  qword_1ED0032D0 = 0;
  byte_1ED0032D8 = 1;
  qword_1ED003858 = 0;
  qword_1ED003860 = 0;
  dword_1ED003870 = 0;
  qword_1ED003868 = 0;
  byte_1ED003878 = 1;
  qword_1ED003120 = 0;
  qword_1ED003128 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED003130 = 0;
  qword_1ED003138 = 0;
  dword_1ED003148 = 0;
  qword_1ED003140 = 0;
  byte_1ED003150 = 1;
  *(__int128 *)((char *)&xmmword_1ED004618 + 4) = 0u;
  *(_OWORD *)&qword_1ED004610 = 0u;
  *(_OWORD *)&qword_1ED004600 = 0u;
  *(_OWORD *)&qword_1ED0045F0 = 0u;
  byte_1ED004630 = 1;
  qword_1ED004118 = 0;
  qword_1ED004100 = 0;
  qword_1ED004108 = 0;
  byte_1ED004120 = 1;
  qword_1ED005890 = 0;
  *(_QWORD *)&dword_1ED005898 = 0;
  qword_1ED0058A0 = 0;
  qword_1ED0058B0 = 0;
  dword_1ED0058B8 = 0;
  byte_1ED0058C0 = 1;
  qword_1ED0048E8 = 0;
  *(_QWORD *)&dword_1ED0048F0 = 0;
  qword_1ED0048F8 = 0;
  qword_1ED004908 = 0;
  qword_1ED004910 = 0;
  dword_1ED004920 = 0;
  qword_1ED004918 = 0;
  byte_1ED004928 = 1;
  qword_1ED002F70 = 0;
  *(_QWORD *)&dword_1ED002F78 = 0;
  qword_1ED002F80 = 0;
  qword_1ED002F90 = 0;
  dword_1ED002F98 = 0;
  byte_1ED002FA0 = 1;
  qword_1ED0036C0 = 0;
  qword_1ED0036C8 = 0;
  qword_1ED0036A0 = 0;
  *(_QWORD *)&dword_1ED0036A8 = 0;
  qword_1ED0036B0 = 0;
  qword_1ED0036D8 = 0;
  qword_1ED0036E0 = 0;
  byte_1ED0036E8 = 0;
  dword_1ED0036EC = 0;
  byte_1ED0036F0 = 1;
  qword_1ED005158 = 0;
  *(_QWORD *)&dword_1ED005160 = 0;
  qword_1ED005168 = 0;
  qword_1ED005178 = 0;
  dword_1ED005180 = 0;
  byte_1ED005188 = 1;
  qword_1ED003040 = 0;
  unk_1ED003048 = 0;
  qword_1ED003038 = 0;
  qword_1ED003058 = 0;
  dword_1ED003060 = 0;
  byte_1ED003068 = 1;
  dword_1ED005B1C = 0;
  *(_OWORD *)((char *)&qword_1ED005B08 + 3) = 0u;
  *(_OWORD *)&qword_1ED005B00 = 0u;
  *(_OWORD *)&qword_1ED005AF0 = 0u;
  unk_1ED005AE0 = 0u;
  byte_1ED005B20 = 1;
  dword_1ED002DE4 = 0;
  *(_OWORD *)((char *)&qword_1ED002DD0 + 3) = 0u;
  *(_OWORD *)&qword_1ED002DC8 = 0u;
  *(_OWORD *)&qword_1ED002DB8 = 0u;
  *(_OWORD *)&qword_1ED002DA8 = 0u;
  *(_OWORD *)&qword_1ED002D98 = 0u;
  *(_OWORD *)&qword_1ED002D88 = 0u;
  *(_OWORD *)&dword_1ED002D78 = 0u;
  unk_1ED002D68 = 0u;
  byte_1ED002DE8 = 1;
  dword_1ED0026F4 = 0;
  qword_1ED0026E0 = 0;
  unk_1ED0026E8 = 0;
  byte_1ED0026F0 = 0;
  byte_1ED0026F8 = 1;
  dword_1ED0035B0 = 0;
  unk_1ED0035A0 = 0u;
  unk_1ED003590 = 0u;
  unk_1ED003580 = 0u;
  unk_1ED003570 = 0u;
  unk_1ED003560 = 0u;
  unk_1ED003550 = 0u;
  unk_1ED003540 = 0u;
  unk_1ED003530 = 0u;
  byte_1ED0035B8 = 1;
  dword_1ED005FCC = 0;
  byte_1ED005FC8 = 0;
  *(_OWORD *)&qword_1ED005FB8 = 0u;
  *(_OWORD *)&qword_1ED005FA8 = 0u;
  *(_OWORD *)&dword_1ED005F98 = 0u;
  unk_1ED005F88 = 0u;
  byte_1ED005FD0 = 1;
  *(_OWORD *)((char *)&qword_1ED005E00 + 4) = 0u;
  *(_OWORD *)&qword_1ED005DF8 = 0u;
  unk_1ED005DE8 = 0u;
  *(_OWORD *)&qword_1ED005DD8 = 0u;
  *(_OWORD *)algn_1ED005DC8 = 0u;
  *(_OWORD *)&dword_1ED005DB8 = 0u;
  unk_1ED005DA8 = 0u;
  byte_1ED005E18 = 1;
  qword_1ED006468 = 0;
  qword_1ED006478 = 0;
  byte_1ED006480 = 1;
  qword_1ED0062F0 = 0;
  unk_1ED0062F8 = 0;
  qword_1ED0062E8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  dword_1ED006300 = 0;
  byte_1ED006308 = 1;
  *((_BYTE *)CoreML::Specification::CustomLayerParams::CustomLayerParams((CoreML::Specification::CustomLayerParams *)&CoreML::Specification::_CustomLayerParams_default_instance_)
  + 96) = 1;
  qword_1ED002F10 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED002A18 = (uint64_t)&CoreML::Specification::_BorderAmounts_default_instance_;
  qword_1ED002A70 = (uint64_t)&CoreML::Specification::_QuantizationParams_default_instance_;
  qword_1ED004108 = (uint64_t)&CoreML::Specification::_BorderAmounts_default_instance_;
  qword_1ED003860 = (uint64_t)&CoreML::Specification::_NeuralNetwork_default_instance_;
  CoreML::Specification::_TransposeLayerParams_default_instance_ = (uint64_t)&off_1E3D52D08;
  unk_1ED004860 = 0;
  qword_1ED004868 = 0;
  qword_1ED004870 = 0;
  dword_1ED00487C = 0;
  byte_1ED004880 = 1;
  CoreML::Specification::_BatchedMatMulLayerParams_default_instance_ = (uint64_t)&off_1E3D548F0;
  CoreML::Specification::_ConcatNDLayerParams_default_instance_ = (uint64_t)&off_1E3D51D00;
  *(_QWORD *)algn_1ED0043A8 = 0;
  dword_1ED0043BC = 0;
  qword_1ED0043B0 = 0;
  byte_1ED0043B8 = 0;
  byte_1ED0043C0 = 1;
  CoreML::Specification::_SoftmaxNDLayerParams_default_instance_ = (uint64_t)&off_1E3D52BD8;
  unk_1ED004800 = 0;
  qword_1ED004808 = 0;
  dword_1ED004810 = 0;
  byte_1ED004818 = 1;
  CoreML::Specification::_ReverseLayerParams_default_instance_ = (uint64_t)&off_1E3D51970;
  unk_1ED004290 = 0;
  qword_1ED004298 = 0;
  qword_1ED0042A0 = 0;
  dword_1ED0042AC = 0;
  byte_1ED0042B0 = 1;
  CoreML::Specification::_ReverseSeqLayerParams_default_instance_ = (uint64_t)&off_1E3D535F0;
  *(_QWORD *)algn_1ED004BC8 = 0;
  dword_1ED004BE0 = 0;
  qword_1ED004BD0 = 0;
  qword_1ED004BD8 = 0;
  byte_1ED004BE8 = 1;
  CoreML::Specification::_FillLikeLayerParams_default_instance_ = (uint64_t)&off_1E3D51E30;
  *(_QWORD *)algn_1ED004408 = 0;
  qword_1ED004410 = 0;
  byte_1ED004418 = 1;
  CoreML::Specification::_FillStaticLayerParams_default_instance_ = (uint64_t)&off_1E3D53130;
  qword_1ED0049C0 = 0;
  qword_1ED0049C8 = 0;
  qword_1ED0049D0 = 0;
  *(_QWORD *)&dword_1ED0049DC = 0;
  byte_1ED0049E8 = 1;
  CoreML::Specification::_FillDynamicLayerParams_default_instance_ = (uint64_t)&off_1E3D53980;
  unk_1ED004D50 = 0;
  qword_1ED004D58 = 0;
  byte_1ED004D60 = 1;
  CoreML::Specification::_WhereBroadcastableLayerParams_default_instance_ = (uint64_t)&off_1E3D567D0;
  qword_1ED005FE0 = 0;
  dword_1ED005FE8 = 0;
  byte_1ED005FF0 = 1;
  CoreML::Specification::_SinLayerParams_default_instance_ = (uint64_t)&off_1E3D4EBB8;
  qword_1ED002EA8 = 0;
  dword_1ED002EB0 = 0;
  byte_1ED002EB8 = 1;
  CoreML::Specification::_CosLayerParams_default_instance_ = (uint64_t)&off_1E3D4E6F8;
  qword_1ED002CF0 = 0;
  dword_1ED002CF8 = 0;
  byte_1ED002D00 = 1;
  CoreML::Specification::_TanLayerParams_default_instance_ = (uint64_t)&off_1E3D4EC50;
  qword_1ED002EC8 = 0;
  dword_1ED002ED0 = 0;
  byte_1ED002ED8 = 1;
  CoreML::Specification::_AsinLayerParams_default_instance_ = (uint64_t)&off_1E3D4EE18;
  qword_1ED002F30 = 0;
  dword_1ED002F38 = 0;
  byte_1ED002F40 = 1;
  CoreML::Specification::_AcosLayerParams_default_instance_ = (uint64_t)&off_1E3D4ECE8;
  qword_1ED002EE8 = 0;
  dword_1ED002EF0 = 0;
  byte_1ED002EF8 = 1;
  CoreML::Specification::_AtanLayerParams_default_instance_ = (uint64_t)&off_1E3D4EEB0;
  qword_1ED002F50 = 0;
  dword_1ED002F58 = 0;
  byte_1ED002F60 = 1;
  CoreML::Specification::_SinhLayerParams_default_instance_ = (uint64_t)&off_1E3D4F700;
  qword_1ED0031B0 = 0;
  dword_1ED0031B8 = 0;
  byte_1ED0031C0 = 1;
  CoreML::Specification::_CoshLayerParams_default_instance_ = (uint64_t)&off_1E3D4F1A8;
  qword_1ED003018 = 0;
  dword_1ED003020 = 0;
  byte_1ED003028 = 1;
  CoreML::Specification::_TanhLayerParams_default_instance_ = (uint64_t)&off_1E3D4F830;
  qword_1ED0031F8 = 0;
  dword_1ED003200 = 0;
  byte_1ED003208 = 1;
  CoreML::Specification::_AsinhLayerParams_default_instance_ = (uint64_t)&off_1E3D4FC58;
  qword_1ED0033C0 = 0;
  dword_1ED0033C8 = 0;
  byte_1ED0033D0 = 1;
  CoreML::Specification::_AcoshLayerParams_default_instance_ = (uint64_t)&off_1E3D4F9F8;
  qword_1ED003278 = 0;
  dword_1ED003280 = 0;
  byte_1ED003288 = 1;
  CoreML::Specification::_AtanhLayerParams_default_instance_ = (uint64_t)&off_1E3D4FCF0;
  qword_1ED0033E0 = 0;
  dword_1ED0033E8 = 0;
  byte_1ED0033F0 = 1;
  CoreML::Specification::_PowBroadcastableLayerParams_default_instance_ = (uint64_t)&off_1E3D55F80;
  qword_1ED005D00 = 0;
  dword_1ED005D08 = 0;
  byte_1ED005D10 = 1;
  CoreML::Specification::_Exp2LayerParams_default_instance_ = (uint64_t)&off_1E3D4F370;
  qword_1ED0030B0 = 0;
  dword_1ED0030B8 = 0;
  byte_1ED0030C0 = 1;
  CoreML::Specification::_WhereNonZeroLayerParams_default_instance_ = (uint64_t)&off_1E3D54858;
  qword_1ED005458 = 0;
  dword_1ED005460 = 0;
  byte_1ED005468 = 1;
  CoreML::Specification::_MatrixBandPartLayerParams_default_instance_ = (uint64_t)&off_1E3D550A8;
  unk_1ED0057B0 = 0;
  dword_1ED0057C8 = 0;
  qword_1ED0057B8 = 0;
  qword_1ED0057C0 = 0;
  byte_1ED0057D0 = 1;
  CoreML::Specification::_UpperTriangularLayerParams_default_instance_ = (uint64_t)&off_1E3D55AC0;
  *(_QWORD *)algn_1ED005B68 = 0;
  dword_1ED005B78 = 0;
  qword_1ED005B70 = 0;
  byte_1ED005B80 = 1;
  CoreML::Specification::_LowerTriangularLayerParams_default_instance_ = (uint64_t)&off_1E3D557C8;
  *(_QWORD *)algn_1ED005A08 = 0;
  dword_1ED005A18 = 0;
  qword_1ED005A10 = 0;
  byte_1ED005A20 = 1;
  CoreML::Specification::_BroadcastToLikeLayerParams_default_instance_ = (uint64_t)&off_1E3D554D0;
  qword_1ED005968 = 0;
  dword_1ED005970 = 0;
  byte_1ED005978 = 1;
  CoreML::Specification::_BroadcastToStaticLayerParams_default_instance_ = (uint64_t)&off_1E3D56278;
  qword_1ED005E28 = 0;
  qword_1ED005E30 = 0;
  qword_1ED005E38 = 0;
  dword_1ED005E44 = 0;
  byte_1ED005E48 = 1;
  CoreML::Specification::_BroadcastToDynamicLayerParams_default_instance_ = (uint64_t)&off_1E3D563A8;
  qword_1ED005E88 = 0;
  dword_1ED005E90 = 0;
  byte_1ED005E98 = 1;
  CoreML::Specification::_AddBroadcastableLayerParams_default_instance_ = (uint64_t)&off_1E3D55B58;
  qword_1ED005B90 = 0;
  dword_1ED005B98 = 0;
  byte_1ED005BA0 = 1;
  CoreML::Specification::_MaxBroadcastableLayerParams_default_instance_ = (uint64_t)&off_1E3D55DB8;
  qword_1ED005CA0 = 0;
  dword_1ED005CA8 = 0;
  byte_1ED005CB0 = 1;
  CoreML::Specification::_MinBroadcastableLayerParams_default_instance_ = (uint64_t)&off_1E3D55E50;
  qword_1ED005CC0 = 0;
  dword_1ED005CC8 = 0;
  byte_1ED005CD0 = 1;
  CoreML::Specification::_ModBroadcastableLayerParams_default_instance_ = (uint64_t)&off_1E3D55EE8;
  qword_1ED005CE0 = 0;
  dword_1ED005CE8 = 0;
  byte_1ED005CF0 = 1;
  CoreML::Specification::_FloorDivBroadcastableLayerParams_default_instance_ = (uint64_t)&off_1E3D56DC0;
  qword_1ED006180 = 0;
  dword_1ED006188 = 0;
  byte_1ED006190 = 1;
  CoreML::Specification::_SubtractBroadcastableLayerParams_default_instance_ = (uint64_t)&off_1E3D57150;
  qword_1ED006288 = 0;
  dword_1ED006290 = 0;
  byte_1ED006298 = 1;
  CoreML::Specification::_MultiplyBroadcastableLayerParams_default_instance_ = (uint64_t)&off_1E3D56EF0;
  qword_1ED0061C8 = 0;
  dword_1ED0061D0 = 0;
  byte_1ED0061D8 = 1;
  CoreML::Specification::_DivideBroadcastableLayerParams_default_instance_ = (uint64_t)&off_1E3D56868;
  qword_1ED006000 = 0;
  dword_1ED006008 = 0;
  byte_1ED006010 = 1;
  CoreML::Specification::_GatherLayerParams_default_instance_ = (uint64_t)&off_1E3D50C60;
  *(_QWORD *)algn_1ED003928 = 0;
  dword_1ED003938 = 0;
  qword_1ED003930 = 0;
  byte_1ED003940 = 1;
  CoreML::Specification::_ScatterLayerParams_default_instance_ = (uint64_t)&off_1E3D51A08;
  qword_1ED0042C0 = 0;
  qword_1ED0042C8 = 0;
  *(_QWORD *)&dword_1ED0042D0 = 0;
  byte_1ED0042D8 = 1;
  CoreML::Specification::_GatherNDLayerParams_default_instance_ = (uint64_t)&off_1E3D51F60;
  qword_1ED004428 = 0;
  dword_1ED004430 = 0;
  byte_1ED004438 = 1;
  CoreML::Specification::_ScatterNDLayerParams_default_instance_ = (uint64_t)&off_1E3D52B40;
  qword_1ED0047E0 = 0;
  qword_1ED0047E8 = 0;
  byte_1ED0047F0 = 1;
  CoreML::Specification::_GatherAlongAxisLayerParams_default_instance_ = (uint64_t)&off_1E3D55600;
  unk_1ED0059C0 = 0;
  dword_1ED0059D0 = 0;
  qword_1ED0059C8 = 0;
  byte_1ED0059D8 = 1;
  CoreML::Specification::_ScatterAlongAxisLayerParams_default_instance_ = (uint64_t)&off_1E3D560B0;
  qword_1ED005D50 = 0;
  qword_1ED005D58 = 0;
  *(_QWORD *)&dword_1ED005D60 = 0;
  byte_1ED005D68 = 1;
  CoreML::Specification::_StackLayerParams_default_instance_ = (uint64_t)&off_1E3D504A8;
  unk_1ED003760 = 0;
  dword_1ED003770 = 0;
  qword_1ED003768 = 0;
  byte_1ED003778 = 1;
  CoreML::Specification::_RankPreservingReshapeLayerParams_default_instance_ = (uint64_t)&off_1E3D570B8;
  *(_QWORD *)algn_1ED006258 = 0;
  qword_1ED006260 = 0;
  qword_1ED006268 = 0;
  dword_1ED006274 = 0;
  byte_1ED006278 = 1;
  CoreML::Specification::_ConstantPaddingLayerParams_default_instance_ = (uint64_t)&off_1E3D55568;
  *(_QWORD *)algn_1ED005988 = 0;
  qword_1ED005990 = 0;
  qword_1ED005998 = 0;
  byte_1ED0059A8 = 0;
  dword_1ED0059A4 = 0;
  dword_1ED0059AC = 0;
  byte_1ED0059B0 = 1;
  CoreML::Specification::_RandomNormalLikeLayerParams_default_instance_ = (uint64_t)&off_1E3D56018;
  qword_1ED005D20 = 0;
  dword_1ED005D38 = 0;
  xmmword_1ED005D28 = 0uLL;
  byte_1ED005D40 = 1;
  CoreML::Specification::_RandomNormalStaticLayerParams_default_instance_ = (uint64_t)&off_1E3D566A0;
  qword_1ED005F40 = 0;
  qword_1ED005F48 = 0;
  qword_1ED005F50 = 0;
  qword_1ED005F60 = 0;
  unk_1ED005F68 = 0;
  dword_1ED005F70 = 0;
  byte_1ED005F78 = 1;
  CoreML::Specification::_RandomNormalDynamicLayerParams_default_instance_ = (uint64_t)&off_1E3D56998;
  qword_1ED006048 = 0;
  dword_1ED006060 = 0;
  xmmword_1ED006050 = 0uLL;
  byte_1ED006068 = 1;
  CoreML::Specification::_RandomUniformLikeLayerParams_default_instance_ = (uint64_t)&off_1E3D56310;
  qword_1ED005E58 = 0;
  dword_1ED005E70 = 0;
  xmmword_1ED005E60 = 0uLL;
  byte_1ED005E78 = 1;
  CoreML::Specification::_RandomUniformStaticLayerParams_default_instance_ = (uint64_t)&off_1E3D56A30;
  CoreML::Specification::_RandomUniformDynamicLayerParams_default_instance_ = (uint64_t)&off_1E3D56B60;
  CoreML::Specification::_RandomBernoulliStaticLayerParams_default_instance_ = (uint64_t)&off_1E3D57020;
  CoreML::Specification::_RandomBernoulliDynamicLayerParams_default_instance_ = (uint64_t)&off_1E3D57318;
  CoreML::Specification::_ReduceL1LayerParams_default_instance_ = (uint64_t)&off_1E3D52258;
  CoreML::Specification::_ReduceL2LayerParams_default_instance_ = (uint64_t)&off_1E3D522F0;
  CoreML::Specification::_ArgMinLayerParams_default_instance_ = (uint64_t)&off_1E3D50838;
  unk_1ED003830 = 0;
  dword_1ED003844 = 0;
  qword_1ED003838 = 0;
  qword_1ED004318 = 0;
  byte_1ED003840 = 0;
  byte_1ED003848 = 1;
  CoreML::Specification::_SplitNDLayerParams_default_instance_ = (uint64_t)&off_1E3D51B38;
  CoreML::Specification::_ArgMaxLayerParams_default_instance_ = (uint64_t)&off_1E3D507A0;
  *(_QWORD *)algn_1ED003808 = 0;
  dword_1ED00381C = 0;
  qword_1ED003810 = 0;
  byte_1ED003818 = 0;
  byte_1ED003820 = 1;
  CoreML::Specification::_TopKLayerParams_default_instance_ = (uint64_t)&off_1E3D4F960;
  *(_QWORD *)algn_1ED003248 = 0;
  byte_1ED003260 = 0;
  byte_1ED003268 = 1;
  qword_1ED003250 = 0;
  *(_QWORD *)&dword_1ED003258 = 0;
  CoreML::Specification::_SqueezeLayerParams_default_instance_ = (uint64_t)&off_1E3D51BD0;
  unk_1ED004350 = 0;
  dword_1ED003264 = 0;
  qword_1ED004358 = 0;
  qword_1ED004360 = 0;
  dword_1ED004370 = 0;
  byte_1ED004378 = 1;
  byte_1ED00436C = 0;
  CoreML::Specification::_ReshapeDynamicLayerParams_default_instance_ = (uint64_t)&off_1E3D55270;
  qword_1ED005870 = 0;
  dword_1ED005878 = 0;
  byte_1ED005880 = 1;
  CoreML::Specification::_ReshapeStaticLayerParams_default_instance_ = (uint64_t)&off_1E3D54C80;
  qword_1ED0055E8 = 0;
  CoreML::Specification::_ReshapeLikeLayerParams_default_instance_ = (uint64_t)&off_1E3D53DA8;
  qword_1ED004E90 = 0;
  dword_1ED004E98 = 0;
  byte_1ED004EA0 = 1;
  qword_1ED0055F0 = 0;
  qword_1ED0055F8 = 0;
  dword_1ED005604 = 0;
  byte_1ED005608 = 1;
  CoreML::Specification::_ReduceLogSumExpLayerParams_default_instance_ = (uint64_t)&off_1E3D558F8;
  qword_1ED005A70 = 0;
  CoreML::Specification::_FlattenTo2DLayerParams_default_instance_ = (uint64_t)&off_1E3D53A18;
  unk_1ED004D70 = 0;
  dword_1ED004D80 = 0;
  qword_1ED004D78 = 0;
  byte_1ED004D88 = 1;
  dword_1ED0049AC = 0;
  byte_1ED0049B0 = 1;
  CoreML::Specification::_ExpandDimsLayerParams_default_instance_ = (uint64_t)&off_1E3D53098;
  unk_1ED004990 = 0;
  qword_1ED004998 = 0;
  qword_1ED0049A0 = 0;
  byte_1ED005A98 = 1;
  qword_1ED005A78 = 0;
  qword_1ED005A80 = 0;
  word_1ED005A8C = 0;
  dword_1ED005A90 = 0;
  CoreML::Specification::_ReduceSumLayerParams_default_instance_ = (uint64_t)&off_1E3D52AA8;
  CoreML::Specification::_ReduceSumSquareLayerParams_default_instance_ = (uint64_t)&off_1E3D55990;
  qword_1ED005AA8 = 0;
  word_1ED005AC4 = 0;
  dword_1ED005AC8 = 0;
  byte_1ED005AD0 = 1;
  qword_1ED005AB0 = 0;
  qword_1ED005AB8 = 0;
  CoreML::Specification::_ReduceLogSumLayerParams_default_instance_ = (uint64_t)&off_1E3D54690;
  qword_1ED0052B8 = 0;
  qword_1ED0052C0 = 0;
  qword_1ED0052C8 = 0;
  word_1ED0052D4 = 0;
  dword_1ED0052D8 = 0;
  byte_1ED0052E0 = 1;
  byte_1ED004B80 = 1;
  CoreML::Specification::_ReduceMeanLayerParams_default_instance_ = (uint64_t)&off_1E3D534C0;
  qword_1ED004B58 = 0;
  qword_1ED004B60 = 0;
  qword_1ED004B68 = 0;
  word_1ED004B74 = 0;
  dword_1ED004B78 = 0;
  dword_1ED004BB0 = 0;
  byte_1ED004BB8 = 1;
  CoreML::Specification::_ReduceProdLayerParams_default_instance_ = (uint64_t)&off_1E3D53558;
  qword_1ED004B90 = 0;
  qword_1ED004B98 = 0;
  qword_1ED004BA0 = 0;
  word_1ED004BAC = 0;
  qword_1ED0047B0 = 0;
  qword_1ED0047B8 = 0;
  word_1ED0047C4 = 0;
  dword_1ED0047C8 = 0;
  byte_1ED0047D0 = 1;
  qword_1ED0047A8 = 0;
  CoreML::Specification::_ReduceMinLayerParams_default_instance_ = (uint64_t)&off_1E3D52A10;
  qword_1ED004770 = 0;
  word_1ED00478C = 0;
  dword_1ED004790 = 0;
  byte_1ED004798 = 1;
  CoreML::Specification::_ReduceMaxLayerParams_default_instance_ = (uint64_t)&off_1E3D52978;
  qword_1ED004738 = 0;
  qword_1ED004778 = 0;
  qword_1ED004780 = 0;
  word_1ED004754 = 0;
  dword_1ED004758 = 0;
  byte_1ED004760 = 1;
  qword_1ED004740 = 0;
  qword_1ED004748 = 0;
  dword_1ED004520 = 0;
  byte_1ED004528 = 1;
  qword_1ED004508 = 0;
  qword_1ED004510 = 0;
  qword_1ED004500 = 0;
  word_1ED00451C = 0;
  qword_1ED0044D0 = 0;
  qword_1ED0044D8 = 0;
  byte_1ED0044F0 = 1;
  qword_1ED0044C8 = 0;
  word_1ED0044E4 = 0;
  dword_1ED0044E8 = 0;
  qword_1ED006378 = 0;
  *(_QWORD *)&dword_1ED006380 = 0;
  qword_1ED006370 = 0;
  *(_OWORD *)&qword_1ED006398 = 0u;
  byte_1ED0063C0 = 1;
  byte_1ED006388 = 1;
  CoreML::Specification::_CategoricalDistributionLayerParams_default_instance_ = (uint64_t)&off_1E3D573B0;
  qword_1ED0063B8 = 0;
  *(__int128 *)((char *)&xmmword_1ED0063A0 + 8) = 0u;
  qword_1ED006220 = 0;
  qword_1ED006228 = 0;
  qword_1ED006218 = 0;
  qword_1ED006238 = 0;
  *(_QWORD *)&dword_1ED006240 = 0;
  byte_1ED006248 = 1;
  dword_1ED006108 = 0;
  xmmword_1ED0060F8 = 0uLL;
  qword_1ED0060F0 = 0;
  byte_1ED006110 = 1;
  CoreML::Specification::_RandomBernoulliLikeLayerParams_default_instance_ = (uint64_t)&off_1E3D56900;
  qword_1ED006020 = 0;
  qword_1ED006028 = 0;
  *(_QWORD *)&dword_1ED006030 = 0;
  byte_1ED006038 = 1;
  qword_1ED006080 = 0;
  qword_1ED006088 = 0;
  qword_1ED006078 = 0;
  qword_1ED006098 = 0;
  *(_QWORD *)&dword_1ED0060A0 = 0;
  dword_1ED0060A8 = 0;
  byte_1ED0060B0 = 1;
  qword_1ED004308 = 0;
  *(_QWORD *)&dword_1ED004310 = 0;
  qword_1ED004328 = 0;
  qword_1ED004330 = 0;
  dword_1ED004338 = 0;
  byte_1ED004340 = 1;
  CoreML::Specification::_CeilLayerParams_default_instance_ = (uint64_t)&off_1E3D4EFE0;
  qword_1ED002FB0 = 0;
  dword_1ED002FB8 = 0;
  byte_1ED002FC0 = 1;
  CoreML::Specification::_RoundLayerParams_default_instance_ = (uint64_t)&off_1E3D50248;
  qword_1ED003680 = 0;
  dword_1ED003688 = 0;
  byte_1ED003690 = 1;
  CoreML::Specification::_FloorLayerParams_default_instance_ = (uint64_t)&off_1E3D4FE20;
  qword_1ED003420 = 0;
  dword_1ED003428 = 0;
  byte_1ED003430 = 1;
  CoreML::Specification::_SignLayerParams_default_instance_ = (uint64_t)&off_1E3D4F668;
  qword_1ED003190 = 0;
  dword_1ED003198 = 0;
  byte_1ED0031A0 = 1;
  CoreML::Specification::_ClipLayerParams_default_instance_ = (uint64_t)&off_1E3D4F078;
  unk_1ED002FD0 = 0;
  dword_1ED002FE0 = 0;
  qword_1ED002FD8 = 0;
  byte_1ED002FE8 = 1;
  CoreML::Specification::_SliceStaticLayerParams_default_instance_ = (uint64_t)&off_1E3D53ED8;
  unk_1ED004EE0 = 0;
  qword_1ED004F00 = 0;
  qword_1ED004F08 = 0;
  qword_1ED004F18 = 0;
  qword_1ED004F20 = 0;
  qword_1ED004F30 = 0;
  qword_1ED004F38 = 0;
  qword_1ED004F48 = 0;
  qword_1ED004F50 = 0;
  qword_1ED004F60 = 0;
  qword_1ED004F68 = 0;
  qword_1ED004EE8 = 0;
  qword_1ED004EF0 = 0;
  dword_1ED004F74 = 0;
  byte_1ED004F78 = 1;
  CoreML::Specification::_SliceDynamicLayerParams_default_instance_ = (uint64_t)&off_1E3D54728;
  unk_1ED0052F0 = 0;
  qword_1ED005310 = 0;
  qword_1ED005318 = 0;
  qword_1ED005328 = 0;
  qword_1ED005330 = 0;
  qword_1ED005340 = 0;
  qword_1ED005348 = 0;
  qword_1ED005358 = 0;
  qword_1ED005360 = 0;
  qword_1ED0052F8 = 0;
  qword_1ED005300 = 0;
  dword_1ED00536C = 0;
  byte_1ED005370 = 1;
  CoreML::Specification::_TileLayerParams_default_instance_ = (uint64_t)&off_1E3D4F8C8;
  *(_QWORD *)algn_1ED003218 = 0;
  qword_1ED003220 = 0;
  qword_1ED003228 = 0;
  dword_1ED003234 = 0;
  byte_1ED003238 = 1;
  CoreML::Specification::_GetShapeLayerParams_default_instance_ = (uint64_t)&off_1E3D51FF8;
  qword_1ED004448 = 0;
  dword_1ED004450 = 0;
  byte_1ED004458 = 1;
  CoreML::Specification::_ErfLayerParams_default_instance_ = (uint64_t)&off_1E3D4E828;
  qword_1ED002D48 = 0;
  dword_1ED002D50 = 0;
  byte_1ED002D58 = 1;
  CoreML::Specification::_GeluLayerParams_default_instance_ = (uint64_t)&off_1E3D4F408;
  unk_1ED0030D0 = 0;
  qword_1ED0030D8 = 0;
  byte_1ED0030E0 = 1;
  CoreML::Specification::_RangeStaticLayerParams_default_instance_ = (uint64_t)&off_1E3D53D10;
  *(_QWORD *)algn_1ED004E68 = 0;
  qword_1ED004E70 = 0;
  *(_QWORD *)&dword_1ED004E78 = 0;
  byte_1ED004E80 = 1;
  CoreML::Specification::_RangeDynamicLayerParams_default_instance_ = (uint64_t)&off_1E3D545F8;
  unk_1ED005290 = 0;
  dword_1ED0052A0 = 0;
  qword_1ED005298 = 0;
  byte_1ED0052A8 = 1;
  CoreML::Specification::_SlidingWindowsLayerParams_default_instance_ = (uint64_t)&off_1E3D55438;
  dword_1ED005918 = 0;
  *(_OWORD *)&qword_1ED005908 = 0u;
  *(_OWORD *)algn_1ED0058F8 = 0u;
  byte_1ED005920 = 1;
  CoreML::Specification::_LayerNormalizationLayerParams_default_instance_ = (uint64_t)&off_1E3D564D8;
  CoreML::Specification::_NonMaximumSuppressionLayerParams_default_instance_ = (uint64_t)&off_1E3D56F88;
  *(_QWORD *)algn_1ED0061E8 = 0;
  dword_1ED006204 = 0;
  byte_1ED006200 = 0;
  qword_1ED0061F0 = 0;
  qword_1ED0061F8 = 0;
  byte_1ED006208 = 1;
  CoreML::Specification::_ClampedReLULayerParams_default_instance_ = (uint64_t)&off_1E3D537B8;
  unk_1ED004C20 = 0;
  dword_1ED004C30 = 0;
  qword_1ED004C28 = 0;
  byte_1ED004C38 = 1;
  CoreML::Specification::_ArgSortLayerParams_default_instance_ = (uint64_t)&off_1E3D511B8;
  *(_QWORD *)algn_1ED003A98 = 0;
  dword_1ED003AAC = 0;
  qword_1ED003AA0 = 0;
  byte_1ED003AA8 = 0;
  byte_1ED003AB0 = 1;
  CoreML::Specification::_SliceBySizeLayerParams_default_instance_ = (uint64_t)&off_1E3D53E40;
  qword_1ED004EB0 = 0;
  dword_1ED004EC8 = 0;
  xmmword_1ED004EB8 = 0uLL;
  byte_1ED004ED0 = 1;
  CoreML::Specification::_NeuralNetworkClassifier_default_instance_ = (uint64_t)&off_1E3D54560;
  CoreML::Specification::_OneHotLayerParams_default_instance_ = (uint64_t)&off_1E3D50CF8;
  dword_1ED003970 = 0;
  *(_OWORD *)&qword_1ED003960 = 0u;
  unk_1ED003950 = 0u;
  byte_1ED003978 = 1;
  CoreML::Specification::_CumSumLayerParams_default_instance_ = (uint64_t)&off_1E3D50A00;
  *(_QWORD *)algn_1ED0038A8 = 0;
  dword_1ED0038BC = 0;
  qword_1ED0038B0 = 0;
  word_1ED0038B8 = 0;
  byte_1ED0038C0 = 1;
  CoreML::Specification::_NeuralNetworkRegressor_default_instance_ = (uint64_t)&off_1E3D53C78;
  CoreML::Specification::_NetworkUpdateParameters_default_instance_ = (uint64_t)&off_1E3D544C8;
  CoreML::Specification::_CategoricalCrossEntropyLossLayer_default_instance_ = (uint64_t)&off_1E3D56D28;
  unk_1ED006150 = 0;
  qword_1ED006158 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED006160 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  dword_1ED006168 = 0;
  byte_1ED006170 = 1;
  qword_1ED005248 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED0057E8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED0057F0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  CoreML::Specification::_MeanSquaredErrorLossLayer_default_instance_ = (uint64_t)&off_1E3D55140;
  unk_1ED0057E0 = 0;
  dword_1ED0057F8 = 0;
  byte_1ED005800 = 1;
  CoreML::Specification::_Optimizer_default_instance_ = (uint64_t)&off_1E3D59328;
  CoreML::Specification::_SGDOptimizer_default_instance_ = (uint64_t)&off_1E3D4DCE0;
  CoreML::Specification::_AdamOptimizer_default_instance_ = (uint64_t)&off_1E3D4E108;
  byte_1ED0054A8 = 1;
  byte_1ED0057A0 = 1;
  byte_1ED005EE0 = 1;
  byte_1ED005270 = 1;
  byte_1ED004E58 = 1;
  byte_1ED005200 = 1;
  byte_1ED002638 = 1;
  byte_1ED0029E0 = 1;
  byte_1ED002AE8 = 1;
  qword_1ED003868 = (uint64_t)&CoreML::Specification::_NeuralNetwork_default_instance_;
  qword_1ED003130 = (uint64_t)&CoreML::Specification::_NeuralNetwork_default_instance_;
  qword_1ED003138 = (uint64_t)&CoreML::Specification::_NeuralNetwork_default_instance_;
  qword_1ED002BF8 = (uint64_t)&CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  qword_1ED005D80 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED005D88 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  *(_QWORD *)&xmmword_1ED004CB0 = &CoreML::Specification::_WeightParams_default_instance_;
  *((_QWORD *)&xmmword_1ED004CB0 + 1) = &CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED0054D8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED0054E0 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED005120 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED005128 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  CoreML::Specification::_LoadConstantNDLayerParams_default_instance_ = (uint64_t)&off_1E3D55010;
  qword_1ED005770 = 0;
  qword_1ED005240 = 0;
  *(_OWORD *)&qword_1ED005478 = 0u;
  *(_OWORD *)&qword_1ED005488 = 0u;
  *(__int128 *)((char *)&xmmword_1ED005490 + 8) = 0u;
  qword_1ED005778 = 0;
  qword_1ED005780 = 0;
  dword_1ED005798 = 0;
  qword_1ED005EB0 = 0;
  qword_1ED005EB8 = 0;
  qword_1ED005EA8 = 0;
  qword_1ED005ED8 = 0;
  *(_OWORD *)algn_1ED005230 = 0u;
  *(_OWORD *)&dword_1ED005220 = 0u;
  *(_OWORD *)algn_1ED005210 = 0u;
  *(_QWORD *)&dword_1ED005258 = 0;
  qword_1ED005268 = 0;
  *(_OWORD *)((char *)&qword_1ED004E40 + 4) = 0u;
  *(_OWORD *)&algn_1ED004E28[16] = 0u;
  *(_OWORD *)algn_1ED004E28 = 0u;
  *(_OWORD *)&dword_1ED004E18 = 0u;
  unk_1ED004E08 = 0u;
  dword_1ED0051F8 = 0;
  unk_1ED0051C8 = 0u;
  unk_1ED0051B8 = 0u;
  qword_1ED002620 = 0;
  qword_1ED002630 = 0;
  dword_1ED0029D8 = 0;
  *(_OWORD *)algn_1ED0029B8 = 0u;
  dword_1ED002AE0 = 0;
  unk_1ED002AB0 = 0u;
  qword_1ED004648 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  *(_QWORD *)&xmmword_1ED004650 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED004D18 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED004D20 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED0045F8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED004600 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED004608 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED004610 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED0058B0 = (uint64_t)&CoreML::Specification::_SamplingMode_default_instance_;
  qword_1ED004908 = (uint64_t)&CoreML::Specification::_SamplingMode_default_instance_;
  qword_1ED004910 = (uint64_t)&CoreML::Specification::_BoxCoordinatesMode_default_instance_;
  qword_1ED002F90 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED0036D8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED0036E0 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED005178 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED003058 = (uint64_t)&CoreML::Specification::_BorderAmounts_default_instance_;
  qword_1ED005AE8 = (uint64_t)&CoreML::Specification::_ActivationParams_default_instance_;
  qword_1ED005AF0 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED005AF8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED005B00 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED002D88 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED002D90 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED002D98 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED002DA0 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED002DA8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED002DB0 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED002DB8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED002DC0 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED002DC8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED003538 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_1ED003540 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED003548 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_1ED003550 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED003558 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_1ED003560 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED003568 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_1ED003570 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED003578 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_1ED003580 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED003588 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_1ED003590 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED003598 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_1ED0035A0 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED0035A8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED005FA8 = (uint64_t)&CoreML::Specification::_LSTMParams_default_instance_;
  qword_1ED005FB0 = (uint64_t)&CoreML::Specification::_LSTMWeightParams_default_instance_;
  result = &CoreML::Specification::_BiDirectionalLSTMLayerParams_default_instance_;
  qword_1ED005DF8 = (uint64_t)&CoreML::Specification::_LSTMParams_default_instance_;
  qword_1ED0062E0 = (uint64_t)&CoreML::Specification::_CustomLayerParams_ParametersEntry_default_instance_;
  qword_1ED0062F0 = (uint64_t)&CoreML::Specification::_CustomLayerParams_CustomLayerParamValue_default_instance_;
  qword_1ED005480 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED005488 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED005790 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED005EC8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED005ED0 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_1ED005250 = (uint64_t)&CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  qword_1ED004E40 = (uint64_t)&CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  qword_1ED0051D8 = (uint64_t)&CoreML::Specification::_Optimizer_default_instance_;
  unk_1ED0051E0 = &CoreML::Specification::_Int64Parameter_default_instance_;
  qword_1ED0051E8 = (uint64_t)&CoreML::Specification::_BoolParameter_default_instance_;
  unk_1ED0051F0 = &CoreML::Specification::_Int64Parameter_default_instance_;
  qword_1ED0029C0 = (uint64_t)&CoreML::Specification::_DoubleParameter_default_instance_;
  qword_1ED0029C8 = (uint64_t)&CoreML::Specification::_Int64Parameter_default_instance_;
  qword_1ED0029D0 = (uint64_t)&CoreML::Specification::_DoubleParameter_default_instance_;
  qword_1ED002AB8 = (uint64_t)&CoreML::Specification::_DoubleParameter_default_instance_;
  qword_1ED002AC0 = (uint64_t)&CoreML::Specification::_Int64Parameter_default_instance_;
  qword_1ED002AC8 = (uint64_t)&CoreML::Specification::_DoubleParameter_default_instance_;
  qword_1ED002AD0 = (uint64_t)&CoreML::Specification::_DoubleParameter_default_instance_;
  qword_1ED002AD8 = (uint64_t)&CoreML::Specification::_DoubleParameter_default_instance_;
  return result;
}

double CoreML::Specification::protobuf_GLMClassifier_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_GLMClassifier_2eproto::TableStruct *this)
{
  unint64_t *inited;
  double result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_GLMClassifier_default_instance_ = (uint64_t)&off_1E3D4E2D0;
  result = 0.0;
  *(_OWORD *)&qword_1ED002B50 = 0u;
  *(_OWORD *)&dword_1ED002B60 = 0u;
  *(_OWORD *)&dword_1ED002B70 = 0u;
  unk_1ED002B84 = 0;
  qword_1ED002B98 = 0;
  byte_1ED002BA0 = 1;
  return result;
}

unint64_t *CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(CoreML::Specification::protobuf_DataStructures_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_DataStructures_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

double CoreML::Specification::protobuf_TreeEnsemble_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_TreeEnsemble_2eproto::TableStruct *this)
{
  unint64_t *inited;
  double result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_TreeEnsembleParameters_default_instance_ = (uint64_t)&off_1E3D540A0;
  result = 0.0;
  unk_1ED005020 = 0u;
  unk_1ED005030 = 0u;
  unk_1ED005040 = 0u;
  qword_1ED005058 = 0;
  dword_1ED005060 = 0;
  byte_1ED005068 = 1;
  qword_1ED004FF8 = 0;
  CoreML::Specification::_TreeEnsembleClassifier_default_instance_ = (uint64_t)&off_1E3D54008;
  *(_QWORD *)algn_1ED004FD8 = 0;
  dword_1ED004FE8 = 0;
  byte_1ED005000 = 1;
  CoreML::Specification::_TreeEnsembleRegressor_default_instance_ = (uint64_t)&off_1E3D53688;
  *(_QWORD *)algn_1ED004BF8 = 0;
  byte_1ED004C10 = 1;
  qword_1ED004FE0 = (uint64_t)&CoreML::Specification::_TreeEnsembleParameters_default_instance_;
  qword_1ED004C00 = (uint64_t)&CoreML::Specification::_TreeEnsembleParameters_default_instance_;
  unk_1ED004C08 = 0;
  return result;
}

double CoreML::Specification::protobuf_GLMRegressor_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_GLMRegressor_2eproto::TableStruct *this)
{
  double result;

  google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::_GLMRegressor_default_instance_ = (uint64_t)&off_1E3D4DBB0;
  result = 0.0;
  *(_OWORD *)&qword_1ED002948 = 0u;
  *(_OWORD *)&dword_1ED002958 = 0u;
  *(_OWORD *)&dword_1ED002968 = 0u;
  dword_1ED00297C = 0;
  unk_1ED002980 = 0;
  byte_1ED002988 = 1;
  return result;
}

double CoreML::Specification::protobuf_FeatureTypes_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_FeatureTypes_2eproto::TableStruct *this)
{
  double result;

  google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::_Int64FeatureType_default_instance_ = (uint64_t)&off_1E3D4FF50;
  qword_1ED003490 = 0;
  dword_1ED003498 = 0;
  byte_1ED0034A0 = 1;
  CoreML::Specification::_DoubleFeatureType_default_instance_ = (uint64_t)&off_1E3D50B30;
  qword_1ED0038D0 = 0;
  dword_1ED0038D8 = 0;
  byte_1ED0038E0 = 1;
  CoreML::Specification::_StringFeatureType_default_instance_ = (uint64_t)&off_1E3D50F58;
  qword_1ED0039F8 = 0;
  dword_1ED003A00 = 0;
  byte_1ED003A08 = 1;
  CoreML::Specification::_SizeRange_default_instance_ = (uint64_t)&off_1E3D59458;
  unk_1ED002680 = 0;
  qword_1ED002688 = 0;
  unk_1ED002690 = 0;
  dword_1ED002698 = 0;
  byte_1ED0026A0 = 1;
  CoreML::Specification::_ImageFeatureType_EnumeratedImageSizes_default_instance_ = (uint64_t)&off_1E3D57610;
  dword_1ED006430 = 0;
  result = 0.0;
  *(_OWORD *)&dword_1ED006420 = 0u;
  *(_OWORD *)algn_1ED006410 = 0u;
  byte_1ED006438 = 1;
  dword_1ED0060D8 = 0;
  CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_ = (uint64_t)&off_1E3D56AC8;
  unk_1ED0060C0 = 0;
  byte_1ED0060E0 = 1;
  qword_1ED003468 = 0;
  dword_1ED003458 = 0;
  CoreML::Specification::_ImageFeatureType_default_instance_ = (uint64_t)&off_1E3D4FEB8;
  unk_1ED003440 = 0;
  qword_1ED003448 = 0;
  qword_1ED003450 = 0;
  byte_1ED003470 = 1;
  CoreML::Specification::_ArrayFeatureType_EnumeratedShapes_default_instance_ = (uint64_t)&off_1E3D571E8;
  dword_1ED0062C8 = 0;
  *(_OWORD *)&dword_1ED0062B8 = 0u;
  unk_1ED0062A8 = 0u;
  byte_1ED0062D0 = 1;
  CoreML::Specification::_ArrayFeatureType_ShapeRange_default_instance_ = (uint64_t)&off_1E3D55BF0;
  dword_1ED005BD0 = 0;
  *(_OWORD *)&dword_1ED005BC0 = 0u;
  *(_OWORD *)algn_1ED005BB0 = 0u;
  byte_1ED005BD8 = 1;
  CoreML::Specification::_ArrayFeatureType_default_instance_ = (uint64_t)&off_1E3D4FBC0;
  unk_1ED003350 = 0;
  qword_1ED003358 = 0;
  qword_1ED003360 = 0;
  dword_1ED00336C = 0;
  dword_1ED003388 = 0;
  qword_1ED003380 = 0;
  byte_1ED003390 = 1;
  CoreML::Specification::_DictionaryFeatureType_default_instance_ = (uint64_t)&off_1E3D52F68;
  unk_1ED004938 = 0;
  qword_1ED004948 = 0;
  byte_1ED004950 = 1;
  qword_1ED004550 = 0;
  CoreML::Specification::_SequenceFeatureType_default_instance_ = (uint64_t)&off_1E3D52388;
  *(_QWORD *)algn_1ED004538 = 0;
  byte_1ED004558 = 1;
  CoreML::Specification::_StateFeatureType_default_instance_ = (uint64_t)&off_1E3D50540;
  *(_QWORD *)algn_1ED0012D8 = 0;
  qword_1ED0012E8 = 0;
  byte_1ED0012F0 = 1;
  CoreML::Specification::_FeatureType_default_instance_ = (uint64_t)&off_1E3D4D068;
  *(_QWORD *)algn_1ED0027D8 = 0;
  byte_1ED0027E0 = 0;
  qword_1ED0027F0 = 0;
  byte_1ED0027F8 = 1;
  qword_1ED0060C8 = (uint64_t)&CoreML::Specification::_SizeRange_default_instance_;
  qword_1ED0060D0 = (uint64_t)&CoreML::Specification::_SizeRange_default_instance_;
  qword_1ED004540 = (uint64_t)&CoreML::Specification::_SizeRange_default_instance_;
  return result;
}

unint64_t *CoreML::Specification::protobuf_LinkedModel_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_LinkedModel_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  result = CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults((CoreML::Specification::protobuf_Parameters_2eproto *)inited);
  CoreML::Specification::_LinkedModel_default_instance_ = (uint64_t)&off_1E3D4D2C8;
  *(_QWORD *)algn_1ED002898 = 0;
  qword_1ED0028A8 = 0;
  byte_1ED0028B0 = 1;
  CoreML::Specification::_LinkedModelFile_default_instance_ = (uint64_t)&off_1E3D4F4A0;
  unk_1ED0030F0 = 0;
  dword_1ED003108 = 0;
  byte_1ED003110 = 1;
  qword_1ED0030F8 = (uint64_t)&CoreML::Specification::_StringParameter_default_instance_;
  unk_1ED003100 = &CoreML::Specification::_StringParameter_default_instance_;
  return result;
}

unint64_t *CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(CoreML::Specification::protobuf_Parameters_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_Parameters_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

CoreML::Specification::CustomModel *CoreML::Specification::protobuf_CustomModel_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_CustomModel_2eproto::TableStruct *this)
{
  CoreML::Specification::CustomModel *result;

  google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::_CustomModel_CustomModelParamValue_default_instance_ = (uint64_t)&off_1E3D57280;
  unk_1ED006318 = 0;
  qword_1ED006328 = 0;
  byte_1ED006330 = 1;
  qword_1ED005BF8 = 0;
  unk_1ED005C00 = 0;
  qword_1ED005BE8 = 0;
  unk_1ED005BF0 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1ED005C08 = 0;
  CoreML::Specification::_CustomModel_ParametersEntry_default_instance_ = (uint64_t)&off_1E3D5A848;
  byte_1ED005C10 = 1;
  result = CoreML::Specification::CustomModel::CustomModel((CoreML::Specification::CustomModel *)&CoreML::Specification::_CustomModel_default_instance_);
  *((_BYTE *)result + 72) = 1;
  qword_1ED005BE8 = (uint64_t)&CoreML::Specification::_CustomModel_ParametersEntry_default_instance_;
  qword_1ED005BF8 = (uint64_t)&CoreML::Specification::_CustomModel_CustomModelParamValue_default_instance_;
  return result;
}

double CoreML::Specification::protobuf_Parameters_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Parameters_2eproto::TableStruct *this)
{
  unint64_t *inited;
  double result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  result = 0.0;
  qword_1ED002E10 = 0;
  qword_1ED002DF8 = 0;
  unk_1ED002E00 = 0;
  CoreML::Specification::_Int64Parameter_default_instance_ = (uint64_t)&off_1E3D4E958;
  byte_1ED002E18 = 1;
  qword_1ED003090 = 0;
  qword_1ED003078 = 0;
  unk_1ED003080 = 0;
  CoreML::Specification::_DoubleParameter_default_instance_ = (uint64_t)&off_1E3D4F2D8;
  byte_1ED003098 = 1;
  CoreML::Specification::_StringParameter_default_instance_ = (uint64_t)&off_1E3D4F798;
  unk_1ED0031D0 = 0;
  qword_1ED0031D8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  dword_1ED0031E0 = 0;
  byte_1ED0031E8 = 1;
  CoreML::Specification::_BoolParameter_default_instance_ = (uint64_t)&off_1E3D4E1A0;
  *(_QWORD *)algn_1ED002AF8 = 0;
  byte_1ED002B00 = 0;
  dword_1ED002B04 = 0;
  byte_1ED002B08 = 1;
  return result;
}

unint64_t *CoreML::Specification::protobuf_Normalizer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Normalizer_2eproto::TableStruct *this)
{
  unint64_t *result;

  result = google::protobuf::internal::InitProtobufDefaults(this);
  qword_1ED002708 = 0;
  *(_QWORD *)&dword_1ED002710 = 0;
  CoreML::Specification::_Normalizer_default_instance_ = (uint64_t)&off_1E3D4CCD8;
  byte_1ED002718 = 1;
  return result;
}

unint64_t *CoreML::Specification::protobuf_Identity_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Identity_2eproto::TableStruct *this)
{
  unint64_t *result;

  result = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::_Identity_default_instance_ = (uint64_t)&off_1E3D59030;
  qword_1ED002590 = 0;
  dword_1ED002598 = 0;
  byte_1ED0025A0 = 1;
  return result;
}

unint64_t *CoreML::Specification::protobuf_Imputer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Imputer_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_Imputer_default_instance_ = (uint64_t)&off_1E3D57D30;
  *(_QWORD *)algn_1ED002508 = 0;
  dword_1ED002528 = 0;
  qword_1ED002520 = 0;
  byte_1ED002530 = 1;
  return result;
}

unint64_t *CoreML::Specification::protobuf_Scaler_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Scaler_2eproto::TableStruct *this)
{
  unint64_t *result;

  result = google::protobuf::internal::InitProtobufDefaults(this);
  qword_1ED0024E0 = 0;
  qword_1ED0024E8 = 0;
  CoreML::Specification::_Scaler_default_instance_ = (uint64_t)&off_1E3D57C00;
  qword_1ED0024C0 = 0;
  qword_1ED0024C8 = 0;
  qword_1ED0024D0 = 0;
  dword_1ED0024F4 = 0;
  byte_1ED0024F8 = 1;
  return result;
}

double CoreML::Specification::protobuf_SVM_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_SVM_2eproto::TableStruct *this)
{
  unint64_t *inited;
  double result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_LinearKernel_default_instance_ = (uint64_t)&off_1E3D4DC48;
  qword_1ED002998 = 0;
  dword_1ED0029A0 = 0;
  byte_1ED0029A8 = 1;
  qword_1ED002658 = 0;
  qword_1ED002660 = 0;
  CoreML::Specification::_RBFKernel_default_instance_ = (uint64_t)&off_1E3D593C0;
  dword_1ED002668 = 0;
  byte_1ED002670 = 1;
  CoreML::Specification::_PolyKernel_default_instance_ = (uint64_t)&off_1E3D4CD70;
  result = 0.0;
  unk_1ED002728 = 0u;
  unk_1ED002738 = 0u;
  byte_1ED002748 = 1;
  CoreML::Specification::_SigmoidKernel_default_instance_ = (uint64_t)&off_1E3D4E498;
  unk_1ED002C60 = 0;
  qword_1ED002C68 = 0;
  unk_1ED002C70 = 0;
  dword_1ED002C78 = 0;
  byte_1ED002C80 = 1;
  CoreML::Specification::_Kernel_default_instance_ = (uint64_t)&off_1E3D57B68;
  unk_1ED002478 = 0;
  qword_1ED002488 = 0;
  byte_1ED002490 = 1;
  CoreML::Specification::_SparseSupportVectors_default_instance_ = (uint64_t)&off_1E3D52C70;
  unk_1ED004828 = 0u;
  *(_OWORD *)&dword_1ED004838 = 0u;
  dword_1ED004848 = 0;
  byte_1ED004850 = 1;
  CoreML::Specification::_DenseSupportVectors_default_instance_ = (uint64_t)&off_1E3D51D98;
  unk_1ED0043D0 = 0u;
  unk_1ED0043E0 = 0u;
  dword_1ED0043F0 = 0;
  byte_1ED0043F8 = 1;
  CoreML::Specification::_Coefficients_default_instance_ = (uint64_t)&off_1E3D4D3F8;
  *(_QWORD *)algn_1ED0028E8 = 0;
  qword_1ED0028F0 = 0;
  unk_1ED0028F8 = 0;
  dword_1ED002904 = 0;
  byte_1ED002908 = 1;
  CoreML::Specification::_SupportVectorRegressor_default_instance_ = (uint64_t)&off_1E3D53F70;
  qword_1ED004FB0 = 0;
  *(_OWORD *)algn_1ED004F88 = 0u;
  *(_OWORD *)&qword_1ED004F98 = 0u;
  byte_1ED004FB8 = 1;
  qword_1ED0053D0 = 0;
  qword_1ED0053D8 = 0;
  qword_1ED0053E8 = 0;
  qword_1ED0053F0 = 0;
  CoreML::Specification::_SupportVectorClassifier_default_instance_ = (uint64_t)&off_1E3D547C0;
  qword_1ED005380 = 0;
  qword_1ED005388 = 0;
  qword_1ED005390 = 0;
  unk_1ED0053A0 = 0u;
  *(_OWORD *)&qword_1ED0053B0 = 0u;
  qword_1ED0053C0 = 0;
  dword_1ED005420 = 0;
  qword_1ED005418 = 0;
  byte_1ED005428 = 1;
  qword_1ED004F90 = (uint64_t)&CoreML::Specification::_Kernel_default_instance_;
  qword_1ED004F98 = (uint64_t)&CoreML::Specification::_Coefficients_default_instance_;
  qword_1ED005400 = (uint64_t)&CoreML::Specification::_Kernel_default_instance_;
  return result;
}

CoreML::Specification::CustomLayerParams *CoreML::Specification::CustomLayerParams::CustomLayerParams(CoreML::Specification::CustomLayerParams *this)
{
  _QWORD *v2;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v3;

  *(_QWORD *)this = &off_1E3D50A98;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  v2 = (_QWORD *)operator new();
  v3 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::InnerMap(v2, 0);
  *((_QWORD *)this + 8) = v2;
  *((_DWORD *)this + 14) = 0;
  if (this != (CoreML::Specification::CustomLayerParams *)&CoreML::Specification::_CustomLayerParams_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v3);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 22) = 0;
  return this;
}

void sub_19C4BD3D8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = v3;
  google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::~Map(v4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_QWORD *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::TableStruct *this)
{
  unint64_t *result;

  result = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_Vggish_default_instance_ = (uint64_t)&off_1E3D4D9E8;
  qword_1ED0022F8 = 0;
  dword_1ED002300 = 0;
  byte_1ED002308 = 1;
  CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_default_instance_ = (uint64_t)&off_1E3D4D8B8;
  qword_1ED0022C8 = 0;
  qword_1ED0022D8 = 0;
  byte_1ED0022E0 = 1;
  return result;
}

double CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::TableStruct *this)
{
  double result;

  google::protobuf::internal::InitProtobufDefaults(this);
  qword_1ED006648 = 0;
  *(_QWORD *)&dword_1ED006650 = 0;
  CoreML::Specification::CoreMLModels::_VisionFeaturePrint_Scene_default_instance_ = (uint64_t)&off_1E3D4D820;
  byte_1ED006658 = 1;
  CoreML::Specification::CoreMLModels::_VisionFeaturePrint_Objects_default_instance_ = (uint64_t)&off_1E3D4D950;
  result = 0.0;
  unk_1ED006608 = 0u;
  *(_OWORD *)&dword_1ED006618 = 0u;
  qword_1ED006628 = 0;
  byte_1ED006630 = 1;
  CoreML::Specification::CoreMLModels::_VisionFeaturePrint_default_instance_ = (uint64_t)&off_1E3D4D6F0;
  qword_1ED002290 = 0;
  qword_1ED0022A0 = 0;
  byte_1ED0022A8 = 1;
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::TableStruct *this)
{
  unint64_t *result;

  result = google::protobuf::internal::InitProtobufDefaults(this);
  qword_1ED001A70 = 0;
  *(_QWORD *)&dword_1ED001A78 = 0;
  CoreML::Specification::CoreMLModels::_AudioFeaturePrint_Sound_default_instance_ = (uint64_t)&off_1E3D4D788;
  byte_1ED001A80 = 1;
  CoreML::Specification::CoreMLModels::_AudioFeaturePrint_default_instance_ = (uint64_t)&off_1E3D4D658;
  qword_1ED001A40 = 0;
  qword_1ED001A50 = 0;
  byte_1ED001A58 = 1;
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::CoreMLModels::_TextClassifier_default_instance_ = (uint64_t)&off_1E3D4D5C0;
  qword_1ED002248 = 0;
  qword_1ED002250 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED002258 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  dword_1ED002260 = 0;
  qword_1ED002270 = 0;
  byte_1ED002278 = 1;
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::CoreMLModels::_WordEmbedding_default_instance_ = (uint64_t)&off_1E3D4D528;
  qword_1ED002218 = 0;
  qword_1ED002220 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED002228 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED002230 = 0;
  byte_1ED002238 = 1;
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::CoreMLModels::_WordTagger_default_instance_ = (uint64_t)&off_1E3D4D490;
  qword_1ED0021B0 = 0;
  qword_1ED0021B8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED0021C0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED0021C8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED0021D0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED0021D8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED0021E0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  dword_1ED0021E8 = 0;
  qword_1ED0021F8 = 0;
  byte_1ED002200 = 1;
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::CoreMLModels::_Gazetteer_default_instance_ = (uint64_t)&off_1E3D4DA80;
  qword_1ED002168 = 0;
  qword_1ED002170 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1ED002178 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  dword_1ED002180 = 0;
  qword_1ED002190 = 0;
  byte_1ED002198 = 1;
  return result;
}

void sub_19C4BD970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4BDA58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C4BDC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a19, 8);
  kdebug_trace();

  _Unwind_Resume(a1);
}

void sub_19C4BDDDC(_Unwind_Exception *a1)
{
  void *v1;
  void (**v2)(_QWORD);
  void *v3;

  v2[2](v2);
  _Unwind_Resume(a1);
}

void sub_19C4BDF68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4BF530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  void *v62;
  void *v63;

  std::unique_ptr<std::map<std::string,_BlobShape>>::reset[abi:ne180100](&a62, 0);
  _Unwind_Resume(a1);
}

double CoreML::Specification::protobuf_Model_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Model_2eproto::TableStruct *this)
{
  unint64_t *inited;
  unint64_t *v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t *v31;
  CoreML::Specification::Metadata *v32;
  double result;

  inited = google::protobuf::internal::InitProtobufDefaults(this);
  v2 = CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto *)inited);
  v3 = CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto *)v2);
  v4 = CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto *)v3);
  v5 = CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto *)v4);
  v6 = CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto *)v5);
  v7 = CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto *)v6);
  v8 = CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults((CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto *)v7);
  v9 = CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults((CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto *)v8);
  v10 = CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults((CoreML::Specification::protobuf_CategoricalMapping_2eproto *)v9);
  v11 = CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults((CoreML::Specification::protobuf_CustomModel_2eproto *)v10);
  v12 = CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults((CoreML::Specification::protobuf_DictVectorizer_2eproto *)v11);
  v13 = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v12);
  v14 = CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureVectorizer_2eproto *)v13);
  v15 = CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults((CoreML::Specification::protobuf_GLMRegressor_2eproto *)v14);
  v16 = CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults((CoreML::Specification::protobuf_GLMClassifier_2eproto *)v15);
  v17 = CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults((CoreML::Specification::protobuf_NearestNeighbors_2eproto *)v16);
  v18 = CoreML::Specification::protobuf_Identity_2eproto::InitDefaults((CoreML::Specification::protobuf_Identity_2eproto *)v17);
  v19 = CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults((CoreML::Specification::protobuf_Imputer_2eproto *)v18);
  v20 = CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults((CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)v19);
  v21 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v20);
  v22 = CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults((CoreML::Specification::protobuf_Normalizer_2eproto *)v21);
  v23 = CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults((CoreML::Specification::protobuf_OneHotEncoder_2eproto *)v22);
  v24 = CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults((CoreML::Specification::protobuf_Scaler_2eproto *)v23);
  v25 = CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults((CoreML::Specification::protobuf_NonMaximumSuppression_2eproto *)v24);
  v26 = CoreML::Specification::protobuf_SVM_2eproto::InitDefaults((CoreML::Specification::protobuf_SVM_2eproto *)v25);
  v27 = CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults((CoreML::Specification::protobuf_TreeEnsemble_2eproto *)v26);
  v28 = CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults((CoreML::Specification::protobuf_Parameters_2eproto *)v27);
  v29 = CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults((CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto *)v28);
  v30 = CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto *)v29);
  v31 = CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults((CoreML::Specification::protobuf_LinkedModel_2eproto *)v30);
  CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults((CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto *)v31);
  CoreML::Specification::_Pipeline_default_instance_ = (uint64_t)&off_1E3D591F8;
  unk_1ED0066C8 = 0u;
  unk_1ED0066D8 = 0u;
  unk_1ED0066E8 = 0u;
  unk_1ED0066F4 = 0u;
  byte_1ED006708 = 1;
  qword_1ED004178 = 0;
  qword_1ED004180 = 0;
  CoreML::Specification::_PipelineClassifier_default_instance_ = (uint64_t)&off_1E3D51710;
  dword_1ED004188 = 0;
  byte_1ED004190 = 1;
  qword_1ED003988 = 0;
  qword_1ED003990 = 0;
  CoreML::Specification::_PipelineRegressor_default_instance_ = (uint64_t)&off_1E3D50D90;
  dword_1ED003998 = 0;
  byte_1ED0039A0 = 1;
  qword_1ED005810 = 0;
  unk_1ED005818 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1ED005820 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED005828 = 0;
  dword_1ED005830 = 0;
  CoreML::Specification::_Metadata_UserDefinedEntry_default_instance_ = (uint64_t)&off_1E3D5AC38;
  byte_1ED005838 = 1;
  v32 = CoreML::Specification::Metadata::Metadata((CoreML::Specification::Metadata *)&CoreML::Specification::_Metadata_default_instance_);
  *((_BYTE *)v32 + 88) = 1;
  CoreML::Specification::_ModelDescription_default_instance_ = (uint64_t)&off_1E3D501B0;
  result = 0.0;
  unk_1ED0035C8 = 0u;
  unk_1ED0035D8 = 0u;
  unk_1ED0035E8 = 0u;
  unk_1ED0035F8 = 0u;
  unk_1ED003608 = 0u;
  unk_1ED003618 = 0u;
  unk_1ED003628 = 0u;
  unk_1ED003638 = 0u;
  qword_1ED003648 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED003650 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1ED003668 = 0;
  byte_1ED003670 = 1;
  CoreML::Specification::_SerializedModel_default_instance_ = (uint64_t)&off_1E3D4F5D0;
  unk_1ED003160 = 0;
  qword_1ED003168 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED003170 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1ED003178 = 0;
  byte_1ED003180 = 1;
  qword_1ED004180 = (uint64_t)&CoreML::Specification::_Pipeline_default_instance_;
  qword_1ED003990 = (uint64_t)&CoreML::Specification::_Pipeline_default_instance_;
  qword_1ED005810 = (uint64_t)&CoreML::Specification::_Metadata_UserDefinedEntry_default_instance_;
  qword_1ED003658 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED003660 = v32;
  return result;
}

unint64_t *CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(CoreML::Specification::MILSpec::protobuf_MIL_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::MILSpec::protobuf_MIL_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults(CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(CoreML::Specification::protobuf_NonMaximumSuppression_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults(CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(CoreML::Specification::protobuf_CategoricalMapping_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_CategoricalMapping_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults(CoreML::Specification::protobuf_FeatureVectorizer_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_FeatureVectorizer_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(CoreML::Specification::protobuf_NearestNeighbors_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_NearestNeighbors_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(CoreML::Specification::protobuf_DictVectorizer_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_DictVectorizer_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults(CoreML::Specification::protobuf_OneHotEncoder_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_OneHotEncoder_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(CoreML::Specification::protobuf_NeuralNetwork_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_NeuralNetwork_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(CoreML::Specification::protobuf_GLMClassifier_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_GLMClassifier_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(CoreML::Specification::protobuf_TreeEnsemble_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_TreeEnsemble_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(CoreML::Specification::protobuf_GLMRegressor_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_GLMRegressor_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(CoreML::Specification::protobuf_LinkedModel_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_LinkedModel_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(CoreML::Specification::protobuf_CustomModel_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_CustomModel_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(CoreML::Specification::protobuf_Normalizer_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_Normalizer_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(CoreML::Specification::protobuf_Identity_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_Identity_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(CoreML::Specification::protobuf_Imputer_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_Imputer_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(CoreML::Specification::protobuf_Scaler_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_Scaler_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(CoreML::Specification::protobuf_SVM_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::protobuf_SVM_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &off_1E3D5AF80;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::TableStruct::InitDefaultsImpl;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

void sub_19C4C06CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C4C09D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t CoreML::MultiArrayBuffer::vectorizeInto(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  v3 = *(_DWORD *)(a1 + 72);
  if (v3 > 65599)
  {
    if (v3 == 131104)
    {
      v8 = *(_DWORD *)(a2 + 72);
      if (v8 > 65599)
      {
        if (v8 != 131104)
        {
          if (v8 == 65600)
            return CoreML::vectorizeMultiArray<int,double>(a1, a3, a2);
          return 0;
        }
        return CoreML::vectorizeMultiArray<int,int>(a1, a3, a2);
      }
      else
      {
        if (v8 != 65552)
        {
          if (v8 == 65568)
            return CoreML::vectorizeMultiArray<int,float>(a1, a3, a2);
          return 0;
        }
        return _ZN6CoreMLL19vectorizeMultiArrayIiDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(a1, a3, a2);
      }
    }
    if (v3 == 65600)
    {
      v6 = *(_DWORD *)(a2 + 72);
      if (v6 > 65599)
      {
        if (v6 != 131104)
        {
          if (v6 == 65600)
            return CoreML::vectorizeMultiArray<double,double>(a1, a3, a2);
          return 0;
        }
        return CoreML::vectorizeMultiArray<double,int>(a1, a3, a2);
      }
      else
      {
        if (v6 != 65552)
        {
          if (v6 == 65568)
            return CoreML::vectorizeMultiArray<double,float>(a1, a3, a2);
          return 0;
        }
        return _ZN6CoreMLL19vectorizeMultiArrayIdDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(a1, a3, a2);
      }
    }
    return 0;
  }
  if (v3 == 65552)
  {
    v7 = *(_DWORD *)(a2 + 72);
    if (v7 > 65599)
    {
      if (v7 != 131104)
      {
        if (v7 == 65600)
          return _ZN6CoreMLL19vectorizeMultiArrayIDF16_dEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(a1, a3, a2);
        return 0;
      }
      return _ZN6CoreMLL19vectorizeMultiArrayIDF16_iEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(a1, a3, a2);
    }
    else
    {
      if (v7 != 65552)
      {
        if (v7 == 65568)
          return _ZN6CoreMLL19vectorizeMultiArrayIDF16_fEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(a1, a3, a2);
        return 0;
      }
      return _ZN6CoreMLL19vectorizeMultiArrayIDF16_DF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(a1, a3, a2);
    }
  }
  if (v3 != 65568)
    return 0;
  v4 = *(_DWORD *)(a2 + 72);
  if (v4 > 65599)
  {
    if (v4 != 131104)
    {
      if (v4 == 65600)
        return CoreML::vectorizeMultiArray<float,double>(a1, a3, a2);
      return 0;
    }
    return CoreML::vectorizeMultiArray<float,int>(a1, a3, a2);
  }
  else
  {
    if (v4 != 65552)
    {
      if (v4 == 65568)
        return CoreML::vectorizeMultiArray<float,float>(a1, a3, a2);
      return 0;
    }
    return _ZN6CoreMLL19vectorizeMultiArrayIfDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(a1, a3, a2);
  }
}

uint64_t CoreML::vectorizeMultiArray<double,double>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4;
  __int16 v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[16];
  void *__p;
  void *v23;
  void *v24;
  std::__shared_weak_count *v25;
  _QWORD *v26;
  void *v27;
  void *v28;

  v4 = *(_QWORD *)(a1 + 80) == *(_QWORD *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65600 && *(_DWORD *)(a3 + 72) == 65600;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0)
    return 0;
  if (a2)
    v7 = 2;
  else
    v7 = 1;
  if (((unsigned __int16)v7 & *(_WORD *)(a1 + 88)) != 0)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a3);
    v8 = v24;
    v9 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a1);
    v12 = v24;
    v13 = v25;
    if (v25)
    {
      v14 = (unint64_t *)&v25->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    memcpy(v8, v12, 8 * *(_QWORD *)(a1 + 80));
  }
  else
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a3);
    v18 = v24;
    v17 = v25;
    if (v25)
    {
      v19 = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v24, a1, a2, 1);
    CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)v21, a1, 1, 0);
    while (v26 != (_QWORD *)v21[14])
    {
      *v18++ = *v26;
      CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v24);
    }
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v21);
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v24);
  }
  return 1;
}

void sub_19C4C0F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev((CoreML::MultiArrayBuffer *)&a32);
  _Unwind_Resume(a1);
}

uint64_t CoreML::MultiArrayBuffer::MultiArrayBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *(_QWORD *)a1 = &off_1E3D59518;
  *(_QWORD *)(a1 + 8) = a2;
  v10 = (_QWORD *)operator new();
  *v10 = &off_1E3D5C838;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 24), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 48), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  *(_DWORD *)(a1 + 72) = a5;
  v11 = *(unint64_t **)(a1 + 24);
  v12 = 1;
  while (v11 != *(unint64_t **)(a1 + 32))
  {
    v13 = *v11++;
    v14 = v12 * v13;
    if (is_mul_ok(v12, v13))
      v12 = v14;
    else
      v12 = -1;
  }
  *(_QWORD *)(a1 + 80) = v12;
  *(_WORD *)(a1 + 88) = CoreML::MultiArrayBuffer::computeAttributes((uint64_t **)a3, *(uint64_t **)a4, *(_QWORD *)(a4 + 8), 0);
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  return a1;
}

void sub_19C4C1040(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 56) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19C4C1084(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_19C4C1090()
{
  __cxa_end_catch();
  JUMPOUT(0x19C4C107CLL);
}

void sub_19C4C1504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_19C4C157C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4C1604(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4C1654(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C4C2C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint8_t buf,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{

  std::unique_ptr<e5rt_e5_compiler,MLE5ObjectDeleter<e5rt_e5_compiler>>::reset[abi:ne180100](&a32);
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_19C4C38E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,MIL::Attributes::IOAliasInfo *a25,uint64_t a26)
{
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v32;
  MIL::ValidationError *v33;
  MIL::ValidationError *v34;
  uint64_t Reason;
  MIL::ParseError *v36;
  MIL::ParseError *v37;
  uint64_t v38;
  void *v39;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a26);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>>>::~__hash_table((uint64_t)&a16);
  v32 = a24;
  a24 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  std::unique_ptr<MIL::Attributes::IOAliasInfo>::reset[abi:ne180100](&a25);
  if (a2 == 3)
  {
    v33 = (MIL::ValidationError *)__cxa_begin_catch(a1);
    if (v28)
    {
      v34 = v33;
      Reason = MIL::ValidationError::GetReason(v33);
      (*(void (**)(MIL::ValidationError *))(*(_QWORD *)v34 + 16))(v34);
      +[MLModelErrorUtils programValidationAtLoadErrorWithReason:format:](MLModelErrorUtils, "programValidationAtLoadErrorWithReason:format:", Reason, CFSTR("%s"));
      *v28 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else if (a2 == 2)
  {
    v36 = (MIL::ParseError *)__cxa_begin_catch(a1);
    if (v28)
    {
      v37 = v36;
      v38 = MIL::ParseError::GetReason(v36);
      (*(void (**)(MIL::ParseError *))(*(_QWORD *)v37 + 16))(v37);
      +[MLModelErrorUtils programParsingAtLoadErrorWithReason:format:](MLModelErrorUtils, "programParsingAtLoadErrorWithReason:format:", v38, CFSTR("%s"));
      *v28 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    if (a2 != 1)
    {
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);

      _Unwind_Resume(a1);
    }
    v39 = __cxa_begin_catch(a1);
    if (v28)
    {
      (*(void (**)(void *))(*(_QWORD *)v39 + 16))(v39);
      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("%s"));
      *v28 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  *v27 = 0;
  __cxa_end_catch();
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  JUMPOUT(0x19C4C38BCLL);
}

void CoreML::NNCompiler::Backend::MIL::LoadProgram(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::string::size_type v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::string v14;
  uint64_t v15;
  std::string::size_type v16;
  std::__shared_weak_count *v17;
  std::string v18;

  CoreML::MIL::CoreMLUtil::MakeContext((CoreML::MIL::CoreMLUtil *)&v18);
  v16 = v18.__r_.__value_.__r.__words[0];
  if (v18.__r_.__value_.__r.__words[0])
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v3;
    v5 = v18.__r_.__value_.__r.__words[0];
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C410;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v17 = v4;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v14 = *(std::string *)a2;
  MIL::ParserOptions::Make((MIL::ParserOptions *)v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 64))(v15, 1);
  v18 = v14;
  memset(&v14, 0, sizeof(v14));
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v15 + 32))(v15, &v18, 1);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 80))(v15, 1);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  MIL::Text::ParseProgramFromFile();
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v10 = v15;
  v15 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_19C4C3DD4(_Unwind_Exception *a1, std::string *a2, uint64_t a3, uint64_t a4, std::string *a5, uint64_t a6, uint64_t a7, std::string *a8, char a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v16 - 96);
  _Unwind_Resume(a1);
}

void CoreML::TreeEnsembles::Internal::predict(CoreML::TreeEnsembles::Internal *this, double *a2, const unsigned __int8 *a3, const double *a4)
{
  double *i3;
  uint64_t v6;
  double *v7;
  double *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double *v19;
  double v20;
  double v21;
  _QWORD *v22;
  int v23;
  double *v24;
  _QWORD *v25;
  int v26;
  double *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const double *v35;
  CoreML::Archiver::MMappedContentManager *v36;
  void *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  void *v53;
  char *v54;
  char *v55;
  double *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  std::string::size_type size;
  double *v65;
  uint64_t v66;
  double *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  double *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  double *v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double *v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  double *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  double *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  double *v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  double *v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  CoreML::Archiver::MMappedContentManager *v182;
  __int128 v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  double *v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  double *v202;
  double *v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  _QWORD *v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  double *v216;
  uint64_t v217;
  double *v218;
  double v219;
  double v220;
  _QWORD *v221;
  int v222;
  uint64_t *v223;
  _QWORD *v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  double *v228;
  uint64_t v229;
  double v230;
  uint64_t v231;
  uint64_t v232;
  double *v233;
  uint64_t v234;
  double v235;
  double *v236;
  uint64_t v237;
  __int128 v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  double *v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  double *v262;
  uint64_t v263;
  __int128 v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  double *v275;
  uint64_t v276;
  __int128 v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  double *v288;
  uint64_t v289;
  __int128 v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  double *v302;
  uint64_t v303;
  __int128 v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  __int128 v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  CoreML::Archiver::MMappedContentManager *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  char v330;
  uint64_t v331;
  char v332;
  unint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  double *v348;
  unint64_t v349;
  unint64_t v350;
  double v351;
  uint64_t v352;
  double *v353;
  unint64_t v354;
  unint64_t v355;
  double v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  char v369;
  uint64_t v370;
  char v371;
  unint64_t v372;
  unint64_t v373;
  double v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  int v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  size_t v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  unint64_t v401;
  int v402;
  char v403;
  char v404;
  int v405;
  unint64_t v406;
  unint64_t v407;
  int v408;
  _DWORD *v409;
  int v410;
  int v411;
  int v412;
  uint64_t v413;
  unsigned int v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  unsigned int v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  CoreML::Archiver::MMappedContentManager *v431;
  unint64_t v432;
  int v433;
  char v434;
  char v435;
  int v436;
  unint64_t v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  int v442;
  _DWORD *v443;
  int v444;
  int v445;
  int v446;
  uint64_t v447;
  unsigned int v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t v454;
  unsigned int v455;
  unint64_t v456;
  unint64_t v457;
  uint64_t v458;
  unsigned int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  CoreML::Archiver::MMappedContentManager *v472;
  unint64_t v473;
  int v474;
  char v475;
  char v476;
  int v477;
  unint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  int v482;
  int v483;
  _DWORD *v484;
  int v485;
  int v486;
  int v487;
  uint64_t v488;
  unsigned int v489;
  unint64_t v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  unint64_t v494;
  uint64_t v495;
  unsigned int v496;
  unint64_t v497;
  unint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  uint64_t v508;
  uint64_t v509;
  char v510;
  uint64_t v511;
  char v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  _QWORD *n;
  int v520;
  uint64_t v521;
  uint64_t v522;
  float *v523;
  double *v524;
  uint64_t v525;
  float v526;
  float *v527;
  double *v528;
  uint64_t v529;
  float v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  unint64_t v540;
  int v541;
  char v542;
  char v543;
  int v544;
  unint64_t v545;
  unint64_t v546;
  double v547;
  int v548;
  _DWORD *v549;
  int v550;
  int v551;
  int v552;
  uint64_t v553;
  unsigned int v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  size_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  int v572;
  uint64_t v573;
  uint64_t v574;
  char v575;
  uint64_t v576;
  char v577;
  unint64_t v578;
  unint64_t v579;
  uint64_t v580;
  _QWORD *v581;
  uint64_t v582;
  int v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  unsigned int v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  size_t v599;
  uint64_t v600;
  uint64_t v601;
  unint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  int v606;
  unint64_t v607;
  int v608;
  char v609;
  char v610;
  int v611;
  unint64_t v612;
  unint64_t v613;
  int v614;
  _DWORD *v615;
  int v616;
  int v617;
  int v618;
  uint64_t v619;
  unsigned int v620;
  unint64_t v621;
  unint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  size_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  int v641;
  uint64_t v642;
  uint64_t v643;
  char v644;
  uint64_t v645;
  char v646;
  unint64_t v647;
  unint64_t v648;
  uint64_t v649;
  _QWORD *v650;
  uint64_t v651;
  int v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  char v666;
  uint64_t v667;
  char v668;
  unint64_t v669;
  unint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  _QWORD *i4;
  int v676;
  uint64_t v677;
  uint64_t v678;
  double *v679;
  double *v680;
  uint64_t v681;
  double v682;
  double *v683;
  double *v684;
  uint64_t v685;
  double v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  unint64_t v696;
  int v697;
  char v698;
  char v699;
  int v700;
  unint64_t v701;
  unint64_t v702;
  int v703;
  uint64_t v704;
  int v705;
  _DWORD *i;
  int v707;
  int v708;
  uint64_t v709;
  unsigned int v710;
  double *v711;
  uint64_t v712;
  unsigned int v713;
  double *v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  unint64_t v725;
  int v726;
  char v727;
  char v728;
  int v729;
  unint64_t v730;
  unint64_t v731;
  int v732;
  uint64_t v733;
  int v734;
  _DWORD *mm;
  int v736;
  int v737;
  uint64_t v738;
  unsigned int v739;
  double *v740;
  uint64_t v741;
  unsigned int v742;
  double *v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  char v756;
  uint64_t v757;
  char v758;
  unint64_t v759;
  unint64_t v760;
  double v761;
  uint64_t v762;
  _QWORD *v763;
  uint64_t v764;
  int v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  unint64_t v778;
  int v779;
  char v780;
  char v781;
  int v782;
  unint64_t v783;
  unint64_t v784;
  double v785;
  int v786;
  _DWORD *v787;
  int v788;
  int v789;
  int v790;
  uint64_t v791;
  unsigned int v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  CoreML::Archiver::MMappedContentManager *v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  char v809;
  uint64_t v810;
  char v811;
  unint64_t v812;
  unint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  _QWORD *v819;
  uint64_t v820;
  int v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  unint64_t v825;
  unint64_t v826;
  float *v827;
  unint64_t v828;
  unint64_t v829;
  float v830;
  uint64_t v831;
  float *v832;
  unint64_t v833;
  unint64_t v834;
  float v835;
  uint64_t v836;
  uint64_t v837;
  char v838;
  uint64_t v839;
  char v840;
  unint64_t v841;
  unint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  _QWORD *v848;
  uint64_t v849;
  unsigned int v850;
  double v851;
  double v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  double *v856;
  unint64_t v857;
  unint64_t v858;
  double v859;
  uint64_t v860;
  unint64_t v861;
  unint64_t v862;
  double *v863;
  unint64_t v864;
  unint64_t v865;
  double v866;
  uint64_t v867;
  uint64_t v868;
  char v869;
  uint64_t v870;
  char v871;
  unint64_t v872;
  unint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  _QWORD *v879;
  uint64_t v880;
  int v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  unint64_t v885;
  unint64_t v886;
  double *v887;
  unint64_t v888;
  unint64_t v889;
  double v890;
  uint64_t v891;
  double *v892;
  unint64_t v893;
  unint64_t v894;
  double v895;
  uint64_t v896;
  uint64_t v897;
  char v898;
  uint64_t v899;
  char v900;
  unint64_t v901;
  unint64_t v902;
  double v903;
  uint64_t v904;
  _QWORD *v905;
  uint64_t v906;
  unsigned int v907;
  double v908;
  double v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  char v915;
  uint64_t v916;
  char v917;
  unint64_t v918;
  unint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  _QWORD *v925;
  uint64_t v926;
  int v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  double *v931;
  unint64_t v932;
  unint64_t v933;
  double v934;
  uint64_t v935;
  unint64_t v936;
  unint64_t v937;
  double *v938;
  unint64_t v939;
  unint64_t v940;
  double v941;
  uint64_t v942;
  uint64_t v943;
  char v944;
  uint64_t v945;
  char v946;
  unint64_t v947;
  unint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  _QWORD *v954;
  uint64_t v955;
  int v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  double *v960;
  unint64_t v961;
  unint64_t v962;
  double v963;
  uint64_t v964;
  unint64_t v965;
  unint64_t v966;
  double *v967;
  unint64_t v968;
  unint64_t v969;
  double v970;
  uint64_t v971;
  uint64_t v972;
  char v973;
  uint64_t v974;
  char v975;
  unint64_t v976;
  unint64_t v977;
  double v978;
  uint64_t v979;
  _QWORD *v980;
  uint64_t v981;
  int v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  char v988;
  uint64_t v989;
  char v990;
  unint64_t v991;
  unint64_t v992;
  double v993;
  uint64_t v994;
  _QWORD *v995;
  uint64_t v996;
  int v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  char v1003;
  uint64_t v1004;
  char v1005;
  unint64_t v1006;
  unint64_t v1007;
  double v1008;
  uint64_t v1009;
  _QWORD *v1010;
  uint64_t v1011;
  int v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  unint64_t v1016;
  int v1017;
  char v1018;
  char v1019;
  int v1020;
  unint64_t v1021;
  unint64_t v1022;
  int v1023;
  _DWORD *v1024;
  int v1025;
  unsigned int v1026;
  double v1027;
  double v1028;
  int v1029;
  uint64_t v1030;
  unsigned int v1031;
  unint64_t v1032;
  unint64_t v1033;
  uint64_t v1034;
  unint64_t v1035;
  int v1036;
  char v1037;
  char v1038;
  int v1039;
  unint64_t v1040;
  unint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  int v1044;
  int v1045;
  _DWORD *v1046;
  int v1047;
  unsigned int v1048;
  double v1049;
  double v1050;
  int v1051;
  uint64_t v1052;
  unsigned int v1053;
  unint64_t v1054;
  unint64_t v1055;
  uint64_t v1056;
  unsigned int v1057;
  unint64_t v1058;
  unint64_t v1059;
  unint64_t v1060;
  unint64_t v1061;
  unint64_t v1062;
  uint64_t v1063;
  unint64_t v1064;
  int v1065;
  char v1066;
  char v1067;
  int v1068;
  unint64_t v1069;
  unint64_t v1070;
  int v1071;
  _DWORD *v1072;
  int v1073;
  int v1074;
  int v1075;
  uint64_t v1076;
  unsigned int v1077;
  unint64_t v1078;
  unint64_t v1079;
  uint64_t v1080;
  unint64_t v1081;
  int v1082;
  char v1083;
  char v1084;
  int v1085;
  unint64_t v1086;
  unint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  int v1090;
  int v1091;
  _DWORD *v1092;
  int v1093;
  unsigned int v1094;
  double v1095;
  double v1096;
  int v1097;
  uint64_t v1098;
  unsigned int v1099;
  unint64_t v1100;
  unint64_t v1101;
  uint64_t v1102;
  unsigned int v1103;
  unint64_t v1104;
  unint64_t v1105;
  unint64_t v1106;
  unint64_t v1107;
  unint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  char v1112;
  uint64_t v1113;
  char v1114;
  unint64_t v1115;
  unint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  _QWORD *v1121;
  unsigned int v1122;
  double v1123;
  double v1124;
  uint64_t v1125;
  uint64_t v1126;
  float *v1127;
  double *v1128;
  uint64_t v1129;
  float v1130;
  float *v1131;
  double *v1132;
  uint64_t v1133;
  float v1134;
  unint64_t v1135;
  int v1136;
  char v1137;
  char v1138;
  int v1139;
  unint64_t v1140;
  unint64_t v1141;
  int v1142;
  _DWORD *v1143;
  int v1144;
  int v1145;
  uint64_t v1146;
  int v1147;
  unsigned int v1148;
  unint64_t v1149;
  unint64_t v1150;
  uint64_t v1151;
  unint64_t v1152;
  int v1153;
  char v1154;
  char v1155;
  int v1156;
  unint64_t v1157;
  unint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  int v1161;
  int v1162;
  _DWORD *v1163;
  int v1164;
  int v1165;
  int v1166;
  uint64_t v1167;
  unsigned int v1168;
  unint64_t v1169;
  unint64_t v1170;
  unint64_t v1171;
  unint64_t v1172;
  unint64_t v1173;
  uint64_t v1174;
  unsigned int v1175;
  unint64_t v1176;
  unint64_t v1177;
  uint64_t v1178;
  unint64_t v1179;
  int v1180;
  char v1181;
  char v1182;
  int v1183;
  unint64_t v1184;
  unint64_t v1185;
  double v1186;
  int v1187;
  _DWORD *v1188;
  int v1189;
  unsigned int v1190;
  double v1191;
  double v1192;
  int v1193;
  uint64_t v1194;
  unsigned int v1195;
  unint64_t v1196;
  int v1197;
  char v1198;
  char v1199;
  int v1200;
  unint64_t v1201;
  unint64_t v1202;
  int v1203;
  _DWORD *v1204;
  int v1205;
  int v1206;
  uint64_t v1207;
  int v1208;
  unsigned int v1209;
  unint64_t v1210;
  unint64_t v1211;
  uint64_t v1212;
  unint64_t v1213;
  int v1214;
  char v1215;
  char v1216;
  int v1217;
  unint64_t v1218;
  unint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  int v1222;
  int v1223;
  _DWORD *v1224;
  int v1225;
  int v1226;
  int v1227;
  uint64_t v1228;
  unsigned int v1229;
  unint64_t v1230;
  unint64_t v1231;
  unint64_t v1232;
  unint64_t v1233;
  unint64_t v1234;
  uint64_t v1235;
  unsigned int v1236;
  unint64_t v1237;
  unint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  char v1242;
  uint64_t v1243;
  char v1244;
  unint64_t v1245;
  unint64_t v1246;
  uint64_t v1247;
  _QWORD *v1248;
  uint64_t v1249;
  unsigned int v1250;
  double v1251;
  double v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  char v1259;
  uint64_t v1260;
  char v1261;
  unint64_t v1262;
  unint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  _QWORD *jj;
  int v1269;
  uint64_t v1270;
  uint64_t v1271;
  float *v1272;
  double *v1273;
  uint64_t v1274;
  float v1275;
  float *v1276;
  double *v1277;
  uint64_t v1278;
  float v1279;
  unint64_t v1280;
  int v1281;
  char v1282;
  char v1283;
  int v1284;
  unint64_t v1285;
  unint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  int v1289;
  int v1290;
  _DWORD *v1291;
  int v1292;
  int v1293;
  uint64_t v1294;
  int v1295;
  unsigned int v1296;
  unint64_t v1297;
  unint64_t v1298;
  uint64_t v1299;
  unsigned int v1300;
  unint64_t v1301;
  unint64_t v1302;
  unint64_t v1303;
  unint64_t v1304;
  unint64_t v1305;
  uint64_t v1306;
  unint64_t v1307;
  int v1308;
  char v1309;
  char v1310;
  int v1311;
  unint64_t v1312;
  unint64_t v1313;
  int v1314;
  _DWORD *v1315;
  int v1316;
  unsigned int v1317;
  double v1318;
  double v1319;
  int v1320;
  uint64_t v1321;
  unsigned int v1322;
  unint64_t v1323;
  unint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  char v1328;
  uint64_t v1329;
  char v1330;
  unint64_t v1331;
  unint64_t v1332;
  uint64_t v1333;
  _QWORD *v1334;
  uint64_t v1335;
  unsigned int v1336;
  double v1337;
  double v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  unint64_t v1343;
  int v1344;
  char v1345;
  char v1346;
  int v1347;
  unint64_t v1348;
  unint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  int v1352;
  int v1353;
  _DWORD *v1354;
  int v1355;
  int v1356;
  uint64_t v1357;
  int v1358;
  unsigned int v1359;
  unint64_t v1360;
  unint64_t v1361;
  uint64_t v1362;
  unsigned int v1363;
  unint64_t v1364;
  unint64_t v1365;
  unint64_t v1366;
  unint64_t v1367;
  unint64_t v1368;
  uint64_t v1369;
  unint64_t v1370;
  int v1371;
  char v1372;
  char v1373;
  int v1374;
  unint64_t v1375;
  unint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  int v1379;
  int v1380;
  _DWORD *v1381;
  int v1382;
  int v1383;
  uint64_t v1384;
  int v1385;
  unsigned int v1386;
  unint64_t v1387;
  unint64_t v1388;
  uint64_t v1389;
  unsigned int v1390;
  unint64_t v1391;
  unint64_t v1392;
  unint64_t v1393;
  unint64_t v1394;
  unint64_t v1395;
  uint64_t v1396;
  unint64_t v1397;
  int v1398;
  char v1399;
  char v1400;
  int v1401;
  unint64_t v1402;
  unint64_t v1403;
  double v1404;
  int v1405;
  _DWORD *v1406;
  int v1407;
  int v1408;
  int v1409;
  uint64_t v1410;
  unsigned int v1411;
  uint64_t v1412;
  uint64_t v1413;
  char v1414;
  uint64_t v1415;
  char v1416;
  unint64_t v1417;
  unint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  _QWORD *kk;
  int v1424;
  uint64_t v1425;
  uint64_t v1426;
  float *v1427;
  double *v1428;
  uint64_t v1429;
  float v1430;
  float *v1431;
  double *v1432;
  uint64_t v1433;
  float v1434;
  unint64_t v1435;
  int v1436;
  char v1437;
  char v1438;
  int v1439;
  unint64_t v1440;
  unint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  int v1444;
  int v1445;
  _DWORD *v1446;
  int v1447;
  int v1448;
  uint64_t v1449;
  int v1450;
  unsigned int v1451;
  unint64_t v1452;
  unint64_t v1453;
  uint64_t v1454;
  unsigned int v1455;
  unint64_t v1456;
  unint64_t v1457;
  unint64_t v1458;
  unint64_t v1459;
  unint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  char v1464;
  uint64_t v1465;
  char v1466;
  unint64_t v1467;
  unint64_t v1468;
  uint64_t v1469;
  _QWORD *v1470;
  uint64_t v1471;
  int v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  char v1479;
  uint64_t v1480;
  char v1481;
  unint64_t v1482;
  unint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  _QWORD *v1488;
  unsigned int v1489;
  double v1490;
  double v1491;
  uint64_t v1492;
  uint64_t v1493;
  double *v1494;
  double *v1495;
  uint64_t v1496;
  double v1497;
  double *v1498;
  double *v1499;
  uint64_t v1500;
  double v1501;
  uint64_t v1502;
  uint64_t v1503;
  char v1504;
  uint64_t v1505;
  char v1506;
  unint64_t v1507;
  unint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  _QWORD *ii;
  int v1514;
  uint64_t v1515;
  uint64_t v1516;
  float *v1517;
  double *v1518;
  uint64_t v1519;
  float v1520;
  float *v1521;
  double *v1522;
  uint64_t v1523;
  float v1524;
  unint64_t v1525;
  int v1526;
  char v1527;
  char v1528;
  int v1529;
  unint64_t v1530;
  unint64_t v1531;
  double v1532;
  int v1533;
  _DWORD *v1534;
  int v1535;
  int v1536;
  uint64_t v1537;
  int v1538;
  unsigned int v1539;
  unint64_t v1540;
  int v1541;
  char v1542;
  char v1543;
  int v1544;
  unint64_t v1545;
  unint64_t v1546;
  int v1547;
  _DWORD *v1548;
  int v1549;
  int v1550;
  int v1551;
  uint64_t v1552;
  unsigned int v1553;
  unint64_t v1554;
  unint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  char v1559;
  uint64_t v1560;
  char v1561;
  unint64_t v1562;
  unint64_t v1563;
  uint64_t v1564;
  _QWORD *v1565;
  uint64_t v1566;
  int v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  unint64_t v1572;
  int v1573;
  char v1574;
  char v1575;
  int v1576;
  unint64_t v1577;
  unint64_t v1578;
  int v1579;
  uint64_t v1580;
  int v1581;
  _DWORD *v1582;
  unsigned int v1583;
  double v1584;
  double v1585;
  int v1586;
  uint64_t v1587;
  unsigned int v1588;
  double *v1589;
  uint64_t v1590;
  unsigned int v1591;
  double *v1592;
  uint64_t v1593;
  unint64_t v1594;
  int v1595;
  char v1596;
  char v1597;
  int v1598;
  unint64_t v1599;
  unint64_t v1600;
  double v1601;
  int v1602;
  _DWORD *v1603;
  int v1604;
  int v1605;
  uint64_t v1606;
  int v1607;
  unsigned int v1608;
  uint64_t v1609;
  uint64_t v1610;
  char v1611;
  uint64_t v1612;
  char v1613;
  unint64_t v1614;
  unint64_t v1615;
  uint64_t v1616;
  _QWORD *v1617;
  uint64_t v1618;
  int v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  unint64_t v1624;
  int v1625;
  char v1626;
  char v1627;
  int v1628;
  unint64_t v1629;
  unint64_t v1630;
  int v1631;
  uint64_t v1632;
  int v1633;
  _DWORD *v1634;
  unsigned int v1635;
  double v1636;
  double v1637;
  int v1638;
  uint64_t v1639;
  unsigned int v1640;
  double *v1641;
  uint64_t v1642;
  unsigned int v1643;
  double *v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  char v1648;
  uint64_t v1649;
  char v1650;
  unint64_t v1651;
  unint64_t v1652;
  double v1653;
  uint64_t v1654;
  _QWORD *v1655;
  uint64_t v1656;
  unsigned int v1657;
  double v1658;
  double v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  unint64_t v1663;
  int v1664;
  char v1665;
  char v1666;
  int v1667;
  unint64_t v1668;
  unint64_t v1669;
  double v1670;
  int v1671;
  _DWORD *v1672;
  int v1673;
  unsigned int v1674;
  double v1675;
  double v1676;
  int v1677;
  uint64_t v1678;
  unsigned int v1679;
  uint64_t v1680;
  uint64_t v1681;
  char v1682;
  uint64_t v1683;
  char v1684;
  unint64_t v1685;
  unint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  _QWORD *v1692;
  uint64_t v1693;
  unsigned int v1694;
  double v1695;
  double v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  float *v1700;
  unint64_t v1701;
  unint64_t v1702;
  float v1703;
  uint64_t v1704;
  unint64_t v1705;
  unint64_t v1706;
  float *v1707;
  unint64_t v1708;
  unint64_t v1709;
  float v1710;
  unint64_t v1711;
  int v1712;
  char v1713;
  char v1714;
  int v1715;
  unint64_t v1716;
  unint64_t v1717;
  int v1718;
  _DWORD *v1719;
  int v1720;
  int v1721;
  uint64_t v1722;
  int v1723;
  unsigned int v1724;
  unint64_t v1725;
  unint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  char v1730;
  uint64_t v1731;
  char v1732;
  unint64_t v1733;
  unint64_t v1734;
  uint64_t v1735;
  _QWORD *v1736;
  uint64_t v1737;
  int v1738;
  uint64_t v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  char v1745;
  uint64_t v1746;
  char v1747;
  unint64_t v1748;
  unint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  _QWORD *i6;
  int v1755;
  uint64_t v1756;
  uint64_t v1757;
  double *v1758;
  double *v1759;
  uint64_t v1760;
  double v1761;
  double *v1762;
  double *v1763;
  uint64_t v1764;
  double v1765;
  uint64_t v1766;
  uint64_t v1767;
  char v1768;
  uint64_t v1769;
  char v1770;
  unint64_t v1771;
  unint64_t v1772;
  uint64_t v1773;
  _QWORD *v1774;
  uint64_t v1775;
  int v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  unint64_t v1781;
  int v1782;
  char v1783;
  char v1784;
  int v1785;
  unint64_t v1786;
  unint64_t v1787;
  int v1788;
  _DWORD *v1789;
  int v1790;
  int v1791;
  uint64_t v1792;
  int v1793;
  unsigned int v1794;
  unint64_t v1795;
  unint64_t v1796;
  uint64_t v1797;
  uint64_t v1798;
  uint64_t v1799;
  char v1800;
  uint64_t v1801;
  char v1802;
  unint64_t v1803;
  unint64_t v1804;
  uint64_t v1805;
  _QWORD *v1806;
  uint64_t v1807;
  int v1808;
  uint64_t v1809;
  uint64_t v1810;
  uint64_t v1811;
  uint64_t v1812;
  double *v1813;
  int v1814;
  uint64_t v1815;
  unint64_t v1816;
  int v1817;
  char v1818;
  char v1819;
  int v1820;
  unint64_t v1821;
  unint64_t v1822;
  int v1823;
  uint64_t v1824;
  int v1825;
  _DWORD *k;
  int v1827;
  int v1828;
  uint64_t v1829;
  unsigned int v1830;
  double *v1831;
  uint64_t v1832;
  unsigned int v1833;
  double *v1834;
  uint64_t v1835;
  unint64_t v1836;
  int v1837;
  char v1838;
  char v1839;
  int v1840;
  unint64_t v1841;
  unint64_t v1842;
  int v1843;
  uint64_t v1844;
  int v1845;
  _DWORD *i1;
  int v1847;
  int v1848;
  uint64_t v1849;
  unsigned int v1850;
  double *v1851;
  uint64_t v1852;
  unsigned int v1853;
  double *v1854;
  uint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  char v1858;
  uint64_t v1859;
  char v1860;
  unint64_t v1861;
  unint64_t v1862;
  uint64_t v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  _QWORD *i7;
  int v1868;
  uint64_t v1869;
  uint64_t v1870;
  double *v1871;
  double *v1872;
  uint64_t v1873;
  double v1874;
  double *v1875;
  double *v1876;
  uint64_t v1877;
  double v1878;
  uint64_t v1879;
  uint64_t v1880;
  char v1881;
  uint64_t v1882;
  char v1883;
  unint64_t v1884;
  unint64_t v1885;
  double v1886;
  uint64_t v1887;
  _QWORD *v1888;
  uint64_t v1889;
  int v1890;
  uint64_t v1891;
  uint64_t v1892;
  uint64_t v1893;
  unint64_t v1894;
  int v1895;
  char v1896;
  char v1897;
  int v1898;
  unint64_t v1899;
  unint64_t v1900;
  double v1901;
  int v1902;
  _DWORD *v1903;
  int v1904;
  int v1905;
  int v1906;
  uint64_t v1907;
  unsigned int v1908;
  uint64_t v1909;
  uint64_t v1910;
  char v1911;
  uint64_t v1912;
  char v1913;
  unint64_t v1914;
  unint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  uint64_t v1920;
  _QWORD *v1921;
  uint64_t v1922;
  int v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  unint64_t v1927;
  unint64_t v1928;
  float *v1929;
  unint64_t v1930;
  unint64_t v1931;
  float v1932;
  uint64_t v1933;
  float *v1934;
  unint64_t v1935;
  unint64_t v1936;
  float v1937;
  uint64_t v1938;
  uint64_t v1939;
  char v1940;
  uint64_t v1941;
  char v1942;
  unint64_t v1943;
  unint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  uint64_t v1947;
  uint64_t v1948;
  _QWORD *i5;
  int v1950;
  uint64_t v1951;
  uint64_t v1952;
  double *v1953;
  double *v1954;
  uint64_t v1955;
  double v1956;
  double *v1957;
  double *v1958;
  uint64_t v1959;
  double v1960;
  unint64_t v1961;
  int v1962;
  char v1963;
  char v1964;
  int v1965;
  unint64_t v1966;
  unint64_t v1967;
  int v1968;
  uint64_t v1969;
  int v1970;
  _DWORD *m;
  int v1972;
  uint64_t v1973;
  int v1974;
  unsigned int v1975;
  double *v1976;
  uint64_t v1977;
  unsigned int v1978;
  double *v1979;
  uint64_t v1980;
  unint64_t v1981;
  int v1982;
  char v1983;
  char v1984;
  int v1985;
  unint64_t v1986;
  unint64_t v1987;
  int v1988;
  uint64_t v1989;
  int v1990;
  _DWORD *i2;
  int v1992;
  uint64_t v1993;
  int v1994;
  unsigned int v1995;
  double *v1996;
  uint64_t v1997;
  unsigned int v1998;
  double *v1999;
  uint64_t v2000;
  uint64_t v2001;
  uint64_t v2002;
  char v2003;
  uint64_t v2004;
  char v2005;
  unint64_t v2006;
  unint64_t v2007;
  double v2008;
  uint64_t v2009;
  _QWORD *v2010;
  uint64_t v2011;
  int v2012;
  uint64_t v2013;
  uint64_t v2014;
  uint64_t v2015;
  unint64_t v2016;
  int v2017;
  char v2018;
  char v2019;
  int v2020;
  unint64_t v2021;
  unint64_t v2022;
  int v2023;
  uint64_t v2024;
  int v2025;
  _DWORD *j;
  int v2027;
  uint64_t v2028;
  int v2029;
  unsigned int v2030;
  double *v2031;
  uint64_t v2032;
  unsigned int v2033;
  double *v2034;
  uint64_t v2035;
  unint64_t v2036;
  int v2037;
  char v2038;
  char v2039;
  int v2040;
  unint64_t v2041;
  unint64_t v2042;
  double v2043;
  int v2044;
  _DWORD *v2045;
  int v2046;
  int v2047;
  uint64_t v2048;
  int v2049;
  unsigned int v2050;
  uint64_t v2051;
  uint64_t v2052;
  char v2053;
  uint64_t v2054;
  char v2055;
  unint64_t v2056;
  unint64_t v2057;
  uint64_t v2058;
  uint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  uint64_t v2062;
  _QWORD *v2063;
  uint64_t v2064;
  int v2065;
  uint64_t v2066;
  uint64_t v2067;
  uint64_t v2068;
  float *v2069;
  unint64_t v2070;
  unint64_t v2071;
  float v2072;
  uint64_t v2073;
  unint64_t v2074;
  unint64_t v2075;
  float *v2076;
  unint64_t v2077;
  unint64_t v2078;
  float v2079;
  unint64_t v2080;
  int v2081;
  char v2082;
  char v2083;
  int v2084;
  unint64_t v2085;
  unint64_t v2086;
  int v2087;
  uint64_t v2088;
  int v2089;
  _DWORD *nn;
  int v2091;
  uint64_t v2092;
  int v2093;
  unsigned int v2094;
  double *v2095;
  uint64_t v2096;
  unsigned int v2097;
  double *v2098;
  uint64_t v2099;
  uint64_t v2100;
  uint64_t v2101;
  char v2102;
  uint64_t v2103;
  char v2104;
  unint64_t v2105;
  unint64_t v2106;
  double v2107;
  uint64_t v2108;
  _QWORD *v2109;
  uint64_t v2110;
  int v2111;
  uint64_t v2112;
  uint64_t v2113;
  uint64_t v2114;
  unint64_t v2115;
  int v2116;
  char v2117;
  char v2118;
  int v2119;
  unint64_t v2120;
  unint64_t v2121;
  double v2122;
  int v2123;
  _DWORD *v2124;
  int v2125;
  int v2126;
  uint64_t v2127;
  int v2128;
  unsigned int v2129;
  uint64_t v2130;
  uint64_t v2131;
  char v2132;
  uint64_t v2133;
  char v2134;
  unint64_t v2135;
  unint64_t v2136;
  uint64_t v2137;
  uint64_t v2138;
  uint64_t v2139;
  uint64_t v2140;
  uint64_t v2141;
  _QWORD *v2142;
  uint64_t v2143;
  int v2144;
  uint64_t v2145;
  uint64_t v2146;
  uint64_t v2147;
  float *v2148;
  unint64_t v2149;
  unint64_t v2150;
  float v2151;
  uint64_t v2152;
  unint64_t v2153;
  unint64_t v2154;
  float *v2155;
  unint64_t v2156;
  unint64_t v2157;
  float v2158;
  void *v2159;
  void *v2160;
  void *v2161;
  void *v2162;
  void *v2163;
  void *v2164;
  void *v2165;
  void *exception;
  void *v2167;
  void *v2168;
  void *v2169;
  void *v2170;
  void *v2171;
  void *v2172;
  void *v2173;
  void *v2174;
  void *v2175;
  std::runtime_error *v2176;
  uint64_t v2177;
  uint64_t v2178;
  uint64_t v2179;
  uint64_t v2180;
  int v2181;
  CoreML::Archiver::MMappedContentManager *v2182;
  CoreML::Archiver::MMappedContentManager *v2183;
  CoreML::Archiver::MMappedContentManager *v2184;
  CoreML::Archiver::MMappedContentManager *v2185;
  CoreML::Archiver::MMappedContentManager *v2186;
  CoreML::Archiver::MMappedContentManager *v2187;
  CoreML::Archiver::MMappedContentManager *v2189;
  CoreML::Archiver::MMappedContentManager *v2190;
  CoreML::Archiver::MMappedContentManager *v2191;
  CoreML::Archiver::MMappedContentManager *v2192;
  CoreML::Archiver::MMappedContentManager *v2193;
  CoreML::Archiver::MMappedContentManager *v2194;
  CoreML::Archiver::MMappedContentManager *v2195;
  std::string v2197;
  double *v2198;
  double *v2199;
  uint64_t v2200;
  char *v2201;
  char *v2202;
  char *v2203;
  void *__p[2];
  uint64_t v2205;
  double *v2206;
  __int128 v2207;
  __int128 v2208;
  unint64_t v2209;
  void *v2210;
  _QWORD v2211[4];
  CoreML::Archiver::MMappedContentManager *v2212;
  uint64_t v2213;
  uint64_t v2214;
  __int128 v2215;
  __int128 v2216;
  CoreML::Archiver::MMappedContentManager *v2217;
  uint64_t v2218;
  uint64_t v2219;
  __int128 v2220;
  __int128 v2221;
  CoreML::Archiver::MMappedContentManager *v2222;
  uint64_t v2223;
  uint64_t v2224;
  uint64_t v2225;
  uint64_t v2226;
  int v2227;

  i3 = a2;
  switch(*((_DWORD *)a2 + 2))
  {
    case 1:
      v6 = *((_QWORD *)a2 + 2);
      v7 = a2 + 3;
      v8 = &i3[v6 + 3];
      v10 = *(_QWORD *)v8;
      v9 = v8 + 1;
      v11 = &v9[5 * v10];
      v14 = *v11;
      v12 = v11 + 1;
      v13 = v14;
      v15 = v12[v14 + 1 + v12[v14]];
      if (v6)
        memmove(this, v7, 8 * v6);
      if (!v13)
        goto LABEL_24;
      v16 = 0;
      v17 = *(double *)this;
      while (1)
      {
        v18 = v12[v16];
        while (2)
        {
          v19 = (double *)&v9[5 * v18];
          v20 = *(double *)&a3[8 * *((_QWORD *)v19 + 1)];
          v21 = v19[2];
          switch(*(_DWORD *)v19)
          {
            case 0:
              if (v20 <= v21)
                goto LABEL_19;
              goto LABEL_21;
            case 1:
              if (v20 >= v21)
                goto LABEL_21;
              goto LABEL_19;
            case 2:
              if (v20 < v21)
                goto LABEL_21;
              goto LABEL_19;
            case 3:
              if (v20 <= v21)
                goto LABEL_21;
              goto LABEL_19;
            case 4:
              if (v20 == v21)
                goto LABEL_19;
              goto LABEL_21;
            case 5:
              if (v20 == v21)
                goto LABEL_21;
LABEL_19:
              v22 = &v9[5 * v18];
              v23 = *((unsigned __int8 *)v22 + 4);
              v24 = (double *)(v22 + 3);
              if (v23)
                goto LABEL_23;
              goto LABEL_22;
            default:
LABEL_21:
              v25 = &v9[5 * v18];
              v26 = *((unsigned __int8 *)v25 + 5);
              v24 = (double *)(v25 + 4);
              if (!v26)
              {
LABEL_22:
                v18 += *(_QWORD *)v24;
                continue;
              }
LABEL_23:
              v17 = v17 + *v24;
              *(double *)this = v17;
              if (++v16 == v13)
              {
LABEL_24:
                v27 = (double *)this;
                v28 = v15;
                goto LABEL_154;
              }
              break;
          }
          break;
        }
      }
    case 2:
      v6 = *((_QWORD *)a2 + 2);
      v202 = a2 + 3;
      v203 = &i3[v6 + 3];
      v205 = *(_QWORD *)v203;
      v204 = v203 + 1;
      v206 = 5 * v205;
      v207 = &v204[5 * v205];
      v210 = *v207;
      v208 = v207 + 1;
      v209 = v210;
      v211 = &v208[v210];
      v213 = *v211;
      v212 = v211 + 1;
      v214 = v212[v213];
      if (v6)
        memmove(this, v202, 8 * v6);
      if (!v209)
        goto LABEL_153;
      v215 = 0;
      v216 = &a2[v6 + 8 + v206 + v209];
LABEL_128:
      v217 = v208[v215];
      while (2)
      {
        v218 = (double *)&v204[5 * v217];
        v219 = *(double *)&a3[8 * *((_QWORD *)v218 + 1)];
        v220 = v218[2];
        switch(*(_DWORD *)v218)
        {
          case 0:
            if (v219 <= v220)
              goto LABEL_141;
            goto LABEL_143;
          case 1:
            if (v219 >= v220)
              goto LABEL_143;
            goto LABEL_141;
          case 2:
            if (v219 < v220)
              goto LABEL_143;
            goto LABEL_141;
          case 3:
            if (v219 <= v220)
              goto LABEL_143;
            goto LABEL_141;
          case 4:
            if (v219 == v220)
              goto LABEL_141;
            goto LABEL_143;
          case 5:
            if (v219 == v220)
              goto LABEL_143;
LABEL_141:
            v221 = &v204[5 * v217];
            v222 = *((unsigned __int8 *)v221 + 4);
            v223 = v221 + 3;
            if (!v222)
              goto LABEL_144;
            v231 = *v223;
            v232 = v212[v231];
            if (v232)
            {
              v233 = &v216[v231];
              do
              {
                v234 = *((_QWORD *)v233 - 1);
                v235 = *v233;
                v233 += 2;
                *((double *)this + v234) = v235 + *((double *)this + v234);
                --v232;
              }
              while (v232);
            }
            goto LABEL_152;
          default:
LABEL_143:
            v224 = &v204[5 * v217];
            v225 = *((unsigned __int8 *)v224 + 5);
            v223 = v224 + 4;
            if (!v225)
            {
LABEL_144:
              v217 += *v223;
              continue;
            }
            v226 = *v223;
            v227 = v212[v226];
            if (v227)
            {
              v228 = &v216[v226];
              do
              {
                v229 = *((_QWORD *)v228 - 1);
                v230 = *v228;
                v228 += 2;
                *((double *)this + v229) = v230 + *((double *)this + v229);
                --v227;
              }
              while (v227);
            }
LABEL_152:
            if (++v215 != v209)
              goto LABEL_128;
LABEL_153:
            v27 = (double *)this;
            v28 = v214;
LABEL_154:
            CoreML::TreeEnsembles::Internal::apply_postevaluation_transform(v27, v28, v6);
            return;
        }
      }
    case 3:
      v2213 = 0;
      v2214 = 0;
      memset(v2211, 0, sizeof(v2211));
      v2212 = (CoreML::Archiver::MMappedContentManager *)&v2213;
      HIDWORD(v2211[0]) = 64;
      v2218 = 0;
      v2219 = 0;
      v2215 = 0u;
      v2216 = 0u;
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      DWORD1(v2215) = 64;
      v2220 = 0u;
      v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      v2223 = 0;
      DWORD1(v2220) = 64;
      v2225 = 0;
      v2226 = 0;
      v2224 = 0;
      *(_OWORD *)__p = *(_OWORD *)a2;
      v79 = *((_QWORD *)a2 + 2);
      v146 = a2 + 3;
      v2205 = v79;
      v2206 = i3 + 3;
      v147 = (uint64_t)&i3[v79 + 3];
      v148 = *(_OWORD *)(v147 + 16);
      v2207 = *(_OWORD *)v147;
      v2208 = v148;
      v149 = WORD2(v2207);
      v150 = *(_QWORD *)(v147 + 32);
      v151 = v147 + 40;
      v2209 = v150 / WORD2(v2207);
      v2210 = (void *)(v147 + 40);
      if (v150 != v2209 * WORD2(v2207))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](exception, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v152 = v151 + v150;
      v153 = 8 - (v152 & 7);
      if ((v152 & 7) == 0)
        v153 = 0;
      v154 = v152 + v153;
      v155 = *(unsigned int *)(v154 + 4);
      LODWORD(v2211[0]) = *(_DWORD *)v154;
      HIDWORD(v2211[0]) = v155;
      *(_OWORD *)&v2211[1] = *(_OWORD *)(v154 + 8);
      v156 = v2211[1];
      if (v2211[1])
      {
        v157 = v154 + 32;
        v2211[2] = *(_QWORD *)(v154 + 24);
        v2211[3] = v154 + 32;
        v158 = v154 + 32 + 8 * v2211[2];
      }
      else
      {
        v157 = 0;
        v158 = v154 + 24;
      }
      if ((v158 & 7) != 0)
        v158 = (v158 & 0xFFFFFFFFFFFFFFF8) + 8;
      v2215 = *(_OWORD *)v158;
      *(_QWORD *)&v2216 = *(_QWORD *)(v158 + 16);
      if (*((_QWORD *)&v2215 + 1))
      {
        *(_QWORD *)&v2216 = *(_QWORD *)(v158 + 24);
        *((_QWORD *)&v2216 + 1) = v158 + 32;
        v531 = v158 + 32 + 8 * v2216;
      }
      else
      {
        v531 = v158 + 24;
      }
      v532 = 8 - (v531 & 7);
      if ((v531 & 7) == 0)
        v532 = 0;
      v534 = v531 + v532 + 8;
      v533 = *(_QWORD *)(v531 + v532);
      v535 = v534 + 4 * v533;
      v2225 = v533;
      v2226 = v534;
      if ((v535 & 7) != 0)
        v536 = 8 - (v535 & 7);
      else
        v536 = 0;
      v537 = v535 + v536;
      v2220 = *(_OWORD *)v537;
      *(_QWORD *)&v2221 = *(_QWORD *)(v537 + 16);
      if (*((_QWORD *)&v2220 + 1))
      {
        *(_QWORD *)&v2221 = *(_QWORD *)(v537 + 24);
        *((_QWORD *)&v2221 + 1) = v537 + 32;
        v538 = v537 + 32 + 8 * v2221;
      }
      else
      {
        v538 = v537 + 24;
      }
      v539 = 8 - (v538 & 7);
      if ((v538 & 7) == 0)
        v539 = 0;
      v366 = *(_DWORD *)(v538 + v539);
      v2227 = v366;
      if (v79)
        memmove(this, v146, 8 * v79);
      switch(BYTE13(v2207))
      {
        case 0:
          if (!v2211[1])
            goto LABEL_2134;
          v540 = 0;
          v541 = ~(-1 << SBYTE6(v2207));
          v542 = BYTE6(v2207) & 7;
          v543 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v544 = ~(-1 << SBYTE8(v2207));
          v545 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v546 = (unint64_t)BYTE6(v2207) >> 3;
          v547 = *(double *)this;
          while (1)
          {
            v548 = (*(_QWORD *)(v157 + ((v540 * v155) >> 3)) >> ((v540 * v155) & 7)) & ~(-1 << v155);
            if ((_DWORD)v155 == 64)
              v548 = *(_QWORD *)(v157 + ((v540 * v155) >> 3));
            v549 = (_DWORD *)(v151 + (v548 * v149));
            v550 = v540 + v548;
            while (1)
            {
              v551 = *(_DWORD *)((char *)v549 + v546) >> v542;
              if ((((*(double *)&a3[8 * (*v549 & v541)] > *(float *)((char *)v549 + v149 - 4)) ^ ((v551 & 8) >> 3)) & 1) == 0)
                break;
              v552 = (*(_DWORD *)((char *)v549 + v545) >> v543) & v544;
              if ((v551 & 2) != 0)
              {
                v554 = (v551 & 1) + v550 + v552;
                goto LABEL_458;
              }
              v553 = (v552 * v149);
LABEL_455:
              v549 = (_DWORD *)((char *)v549 + v553);
            }
            v553 = v149;
            if ((v551 & 1) == 0)
              goto LABEL_455;
            v554 = ((*(_DWORD *)((char *)v549 + v545) >> v543) & v544) + v550;
LABEL_458:
            v547 = v547 + *(float *)(v534 + 4 * v554);
            *(double *)this = v547;
            v540 = (v540 + 1);
            if (v156 <= v540)
            {
LABEL_2134:
              CoreML::TreeEnsembles::Internal::apply_postevaluation_transform((double *)this, v366, v79);
              CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v2222);
              CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v2217);
              goto LABEL_2162;
            }
          }
        case 1:
          if (!v2211[1])
            goto LABEL_2134;
          v1594 = 0;
          v1595 = ~(-1 << SBYTE6(v2207));
          v1596 = BYTE6(v2207) & 7;
          v1597 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1598 = ~(-1 << SBYTE8(v2207));
          v1599 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1600 = (unint64_t)BYTE6(v2207) >> 3;
          v1601 = *(double *)this;
          while (1)
          {
            v1602 = (*(_QWORD *)(v157 + ((v1594 * v155) >> 3)) >> ((v1594 * v155) & 7)) & ~(-1 << v155);
            if ((_DWORD)v155 == 64)
              v1602 = *(_QWORD *)(v157 + ((v1594 * v155) >> 3));
            v1603 = (_DWORD *)(v151 + (v1602 * v149));
            v1604 = v1594 + v1602;
            while (1)
            {
              v1605 = *(_DWORD *)((char *)v1603 + v1600) >> v1596;
              if ((((*(double *)&a3[8 * (*v1603 & v1595)] <= *(float *)((char *)v1603 + v149 - 4)) ^ ((v1605 & 8) >> 3)) & 1) != 0)
                break;
              v1607 = (*(_DWORD *)((char *)v1603 + v1599) >> v1597) & v1598;
              if ((v1605 & 2) != 0)
              {
                v1608 = (v1605 & 1) + v1604 + v1607;
                goto LABEL_1607;
              }
              v1606 = (v1607 * v149);
LABEL_1605:
              v1603 = (_DWORD *)((char *)v1603 + v1606);
            }
            v1606 = v149;
            if ((v1605 & 1) == 0)
              goto LABEL_1605;
            v1608 = ((*(_DWORD *)((char *)v1603 + v1599) >> v1597) & v1598) + v1604;
LABEL_1607:
            v1601 = v1601 + *(float *)(v534 + 4 * v1608);
            *(double *)this = v1601;
            v1594 = (v1594 + 1);
            if (v156 <= v1594)
              goto LABEL_2134;
          }
        case 2:
          if (!v2211[1])
            goto LABEL_2134;
          v1397 = 0;
          v1398 = ~(-1 << SBYTE6(v2207));
          v1399 = BYTE6(v2207) & 7;
          v1400 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1401 = ~(-1 << SBYTE8(v2207));
          v1402 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1403 = (unint64_t)BYTE6(v2207) >> 3;
          v1404 = *(double *)this;
          while (1)
          {
            v1405 = (*(_QWORD *)(v157 + ((v1397 * v155) >> 3)) >> ((v1397 * v155) & 7)) & ~(-1 << v155);
            if ((_DWORD)v155 == 64)
              v1405 = *(_QWORD *)(v157 + ((v1397 * v155) >> 3));
            v1406 = (_DWORD *)(v151 + (v1405 * v149));
            v1407 = v1397 + v1405;
            while (1)
            {
              v1408 = *(_DWORD *)((char *)v1406 + v1403) >> v1399;
              if ((((*(double *)&a3[8 * (*v1406 & v1398)] >= *(float *)((char *)v1406 + v149 - 4)) ^ ((v1408 & 8) >> 3)) & 1) != 0)
                break;
              v1410 = v149;
              if ((v1408 & 1) != 0)
              {
                v1411 = ((*(_DWORD *)((char *)v1406 + v1402) >> v1400) & v1401) + v1407;
                goto LABEL_1408;
              }
LABEL_1405:
              v1406 = (_DWORD *)((char *)v1406 + v1410);
            }
            v1409 = (*(_DWORD *)((char *)v1406 + v1402) >> v1400) & v1401;
            if ((v1408 & 2) == 0)
              break;
            v1411 = (v1408 & 1) + v1407 + v1409;
LABEL_1408:
            v1404 = v1404 + *(float *)(v534 + 4 * v1411);
            *(double *)this = v1404;
            v1397 = (v1397 + 1);
            if (v156 <= v1397)
              goto LABEL_2134;
          }
          v1410 = (v1409 * v149);
          goto LABEL_1405;
        case 3:
          if (!v2211[1])
            goto LABEL_2134;
          v1525 = 0;
          v1526 = ~(-1 << SBYTE6(v2207));
          v1527 = BYTE6(v2207) & 7;
          v1528 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1529 = ~(-1 << SBYTE8(v2207));
          v1530 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1531 = (unint64_t)BYTE6(v2207) >> 3;
          v1532 = *(double *)this;
          while (1)
          {
            v1533 = (*(_QWORD *)(v157 + ((v1525 * v155) >> 3)) >> ((v1525 * v155) & 7)) & ~(-1 << v155);
            if ((_DWORD)v155 == 64)
              v1533 = *(_QWORD *)(v157 + ((v1525 * v155) >> 3));
            v1534 = (_DWORD *)(v151 + (v1533 * v149));
            v1535 = v1525 + v1533;
            while (1)
            {
              v1536 = *(_DWORD *)((char *)v1534 + v1531) >> v1527;
              if ((((*(double *)&a3[8 * (*v1534 & v1526)] < *(float *)((char *)v1534 + v149 - 4)) ^ ((v1536 & 8) >> 3)) & 1) != 0)
                break;
              v1538 = (*(_DWORD *)((char *)v1534 + v1530) >> v1528) & v1529;
              if ((v1536 & 2) != 0)
              {
                v1539 = (v1536 & 1) + v1535 + v1538;
                goto LABEL_1532;
              }
              v1537 = (v1538 * v149);
LABEL_1530:
              v1534 = (_DWORD *)((char *)v1534 + v1537);
            }
            v1537 = v149;
            if ((v1536 & 1) == 0)
              goto LABEL_1530;
            v1539 = ((*(_DWORD *)((char *)v1534 + v1530) >> v1528) & v1529) + v1535;
LABEL_1532:
            v1532 = v1532 + *(float *)(v534 + 4 * v1539);
            *(double *)this = v1532;
            v1525 = (v1525 + 1);
            if (v156 <= v1525)
              goto LABEL_2134;
          }
        case 4:
          if (!v2211[1])
            goto LABEL_2134;
          v1179 = 0;
          v1180 = ~(-1 << SBYTE6(v2207));
          v1181 = BYTE6(v2207) & 7;
          v1182 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1183 = ~(-1 << SBYTE8(v2207));
          v1184 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1185 = (unint64_t)BYTE6(v2207) >> 3;
          v1186 = *(double *)this;
          break;
        default:
          goto LABEL_2134;
      }
LABEL_1161:
      v1187 = (*(_QWORD *)(v157 + ((v1179 * v155) >> 3)) >> ((v1179 * v155) & 7)) & ~(-1 << v155);
      if ((_DWORD)v155 == 64)
        v1187 = *(_QWORD *)(v157 + ((v1179 * v155) >> 3));
      v1188 = (_DWORD *)(v151 + (v1187 * v149));
      v1189 = v1179 + v1187;
      while (1)
      {
        v1190 = *(_DWORD *)((char *)v1188 + v1185) >> v1181;
        v1191 = *(double *)&a3[8 * (*v1188 & v1180)];
        v1192 = *(float *)((char *)v1188 + v149 - 4);
        switch((v1190 >> 3) & 7)
        {
          case 0u:
            if (v1191 > v1192)
              goto LABEL_1168;
            goto LABEL_1177;
          case 1u:
            if (v1191 < v1192)
              goto LABEL_1177;
            goto LABEL_1168;
          case 2u:
            if (v1191 >= v1192)
              goto LABEL_1177;
            goto LABEL_1168;
          case 3u:
            if (v1191 > v1192)
              goto LABEL_1177;
            goto LABEL_1168;
          case 4u:
            if (v1191 != v1192)
              goto LABEL_1168;
            goto LABEL_1177;
          case 5u:
            if (v1191 != v1192)
              goto LABEL_1177;
LABEL_1168:
            v1193 = (*(_DWORD *)((char *)v1188 + v1184) >> v1182) & v1183;
            if ((v1190 & 2) != 0)
            {
              v1195 = ((*(_DWORD *)((char *)v1188 + v1185) >> v1181) & 1) + v1189 + v1193;
LABEL_1181:
              v1186 = v1186 + *(float *)(v534 + 4 * v1195);
              *(double *)this = v1186;
              v1179 = (v1179 + 1);
              if (v156 <= v1179)
                goto LABEL_2134;
              goto LABEL_1161;
            }
            v1194 = (v1193 * v149);
LABEL_1178:
            v1188 = (_DWORD *)((char *)v1188 + v1194);
            break;
          default:
LABEL_1177:
            v1194 = v149;
            if ((v1190 & 1) == 0)
              goto LABEL_1178;
            v1195 = ((*(_DWORD *)((char *)v1188 + v1184) >> v1182) & v1183) + v1189;
            goto LABEL_1181;
        }
      }
    case 4:
      v2213 = 0;
      v2214 = 0;
      memset(v2211, 0, sizeof(v2211));
      v2212 = (CoreML::Archiver::MMappedContentManager *)&v2213;
      HIDWORD(v2211[0]) = 64;
      v2218 = 0;
      v2219 = 0;
      v2215 = 0u;
      v2216 = 0u;
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      DWORD1(v2215) = 64;
      v2220 = 0u;
      v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      v2223 = 0;
      DWORD1(v2220) = 64;
      v2225 = 0;
      v2226 = 0;
      v2224 = 0;
      *(_OWORD *)__p = *(_OWORD *)a2;
      v93 = *((_QWORD *)a2 + 2);
      v173 = a2 + 3;
      v2205 = v93;
      v2206 = i3 + 3;
      v174 = (uint64_t)&i3[v93 + 3];
      v175 = *(_OWORD *)(v174 + 16);
      v2207 = *(_OWORD *)v174;
      v2208 = v175;
      v176 = WORD2(v2207);
      v177 = *(_QWORD *)(v174 + 32);
      v178 = v174 + 40;
      v2209 = v177 / WORD2(v2207);
      v2210 = (void *)(v174 + 40);
      if (v177 != v2209 * WORD2(v2207))
      {
        v2168 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v2168, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2168, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v179 = v178 + v177;
      v180 = 8 - (v179 & 7);
      if ((v179 & 7) == 0)
        v180 = 0;
      v181 = v179 + v180;
      v182 = (CoreML::Archiver::MMappedContentManager *)*(unsigned int *)(v181 + 4);
      LODWORD(v2211[0]) = *(_DWORD *)v181;
      HIDWORD(v2211[0]) = (_DWORD)v182;
      v183 = *(_OWORD *)(v181 + 8);
      *(_OWORD *)&v2211[1] = v183;
      v184 = v183;
      if ((_QWORD)v183)
      {
        v185 = v181 + 32;
        v2211[2] = *(_QWORD *)(v181 + 24);
        v2211[3] = v181 + 32;
        v186 = v181 + 32 + 8 * v2211[2];
      }
      else
      {
        v185 = 0;
        v186 = v181 + 24;
      }
      if ((v186 & 7) != 0)
        v186 = (v186 & 0xFFFFFFFFFFFFFFF8) + 8;
      LODWORD(v2215) = *(_DWORD *)v186;
      v588 = *(_DWORD *)(v186 + 4);
      DWORD1(v2215) = v588;
      *((_QWORD *)&v2215 + 1) = *(_QWORD *)(v186 + 8);
      *(_QWORD *)&v2216 = *(_QWORD *)(v186 + 16);
      if (*((_QWORD *)&v2215 + 1))
      {
        v589 = v186 + 32;
        *(_QWORD *)&v2216 = *(_QWORD *)(v186 + 24);
        *((_QWORD *)&v2216 + 1) = v186 + 32;
        v590 = v186 + 32 + 8 * v2216;
      }
      else
      {
        v589 = 0;
        v590 = v186 + 24;
      }
      v591 = 8 - (v590 & 7);
      if ((v590 & 7) == 0)
        v591 = 0;
      v593 = v590 + v591 + 8;
      v592 = *(_QWORD *)(v590 + v591);
      v594 = v593 + 4 * v592;
      v2225 = v592;
      v2226 = v593;
      if ((v594 & 7) != 0)
        v595 = 8 - (v594 & 7);
      else
        v595 = 0;
      v596 = v594 + v595;
      v2220 = *(_OWORD *)v596;
      *(_QWORD *)&v2221 = *(_QWORD *)(v596 + 16);
      if (*((_QWORD *)&v2220 + 1))
      {
        *(_QWORD *)&v2221 = *(_QWORD *)(v596 + 24);
        *((_QWORD *)&v2221 + 1) = v596 + 32;
        v597 = v596 + 32 + 8 * v2221;
      }
      else
      {
        v597 = v596 + 24;
      }
      v598 = 8 - (v597 & 7);
      if ((v597 & 7) == 0)
        v598 = 0;
      v393 = *(_DWORD *)(v597 + v598);
      v2227 = v393;
      if (v93)
      {
        v599 = 8 * v93;
        v2184 = v182;
        v600 = v593;
        v601 = v589;
        v602 = v183;
        v603 = v178;
        v604 = v185;
        v605 = v93;
        v606 = v393;
        memmove(this, v173, v599);
        v393 = v606;
        v93 = v605;
        v185 = v604;
        v178 = v603;
        v184 = v602;
        v589 = v601;
        v593 = v600;
        v182 = v2184;
      }
      switch(BYTE13(v2207))
      {
        case 0:
          if (!v184)
            goto LABEL_1837;
          v607 = 0;
          v608 = ~(-1 << SBYTE6(v2207));
          v609 = BYTE6(v2207) & 7;
          v610 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v611 = ~(-1 << SBYTE8(v2207));
          v612 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v613 = (unint64_t)BYTE6(v2207) >> 3;
          while (1)
          {
            v614 = (*(_QWORD *)(v185 + ((v607 * (unint64_t)v182) >> 3)) >> ((v607 * (_BYTE)v182) & 7)) & ~(-1 << (char)v182);
            if ((_DWORD)v182 == 64)
              v614 = *(_QWORD *)(v185 + ((v607 * (unint64_t)v182) >> 3));
            v615 = (_DWORD *)(v178 + (v614 * v176));
            v616 = v607 + v614;
            while (1)
            {
              v617 = *(_DWORD *)((char *)v615 + v613) >> v609;
              if ((((*(double *)&a3[8 * (*v615 & v608)] > *(float *)((char *)v615 + v176 - 4)) ^ ((v617 & 8) >> 3)) & 1) == 0)
                break;
              v618 = (*(_DWORD *)((char *)v615 + v612) >> v610) & v611;
              if ((v617 & 2) != 0)
              {
                v620 = (v617 & 1) + v616 + v618;
                goto LABEL_526;
              }
              v619 = (v618 * v176);
LABEL_523:
              v615 = (_DWORD *)((char *)v615 + v619);
            }
            v619 = v176;
            if ((v617 & 1) == 0)
              goto LABEL_523;
            v620 = ((*(_DWORD *)((char *)v615 + v612) >> v610) & v611) + v616;
LABEL_526:
            v621 = v588 * (unint64_t)v620;
            v622 = *(_QWORD *)(v589 + (v621 >> 3));
            v623 = (v622 >> (v621 & 7)) & ~(-1 << v588);
            if (v588 == 64)
              v623 = v622;
            *((double *)this + v623) = *((double *)this + v623) + *(float *)(v593 + 4 * v620);
            v607 = (v607 + 1);
            if (v184 <= v607)
            {
LABEL_1837:
              v1813 = (double *)this;
              v1814 = v393;
              v1815 = v93;
LABEL_1971:
              CoreML::TreeEnsembles::Internal::apply_postevaluation_transform(v1813, v1814, v1815);
              CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v2222);
              CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v2217);
LABEL_2162:
              CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v2212);
              return;
            }
          }
        case 1:
          if (!v184)
            goto LABEL_1837;
          v1781 = 0;
          v1782 = ~(-1 << SBYTE6(v2207));
          v1783 = BYTE6(v2207) & 7;
          v1784 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1785 = ~(-1 << SBYTE8(v2207));
          v1786 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1787 = (unint64_t)BYTE6(v2207) >> 3;
          while (1)
          {
            v1788 = (*(_QWORD *)(v185 + ((v1781 * (unint64_t)v182) >> 3)) >> ((v1781 * (_BYTE)v182) & 7)) & ~(-1 << (char)v182);
            if ((_DWORD)v182 == 64)
              v1788 = *(_QWORD *)(v185 + ((v1781 * (unint64_t)v182) >> 3));
            v1789 = (_DWORD *)(v178 + (v1788 * v176));
            v1790 = v1781 + v1788;
            while (1)
            {
              v1791 = *(_DWORD *)((char *)v1789 + v1787) >> v1783;
              if ((((*(double *)&a3[8 * (*v1789 & v1782)] <= *(float *)((char *)v1789 + v176 - 4)) ^ ((v1791 & 8) >> 3)) & 1) != 0)
                break;
              v1793 = (*(_DWORD *)((char *)v1789 + v1786) >> v1784) & v1785;
              if ((v1791 & 2) != 0)
              {
                v1794 = (v1791 & 1) + v1790 + v1793;
                goto LABEL_1818;
              }
              v1792 = (v1793 * v176);
LABEL_1816:
              v1789 = (_DWORD *)((char *)v1789 + v1792);
            }
            v1792 = v176;
            if ((v1791 & 1) == 0)
              goto LABEL_1816;
            v1794 = ((*(_DWORD *)((char *)v1789 + v1786) >> v1784) & v1785) + v1790;
LABEL_1818:
            v1795 = v588 * (unint64_t)v1794;
            v1796 = *(_QWORD *)(v589 + (v1795 >> 3));
            v1797 = (v1796 >> (v1795 & 7)) & ~(-1 << v588);
            if (v588 == 64)
              v1797 = v1796;
            *((double *)this + v1797) = *((double *)this + v1797) + *(float *)(v593 + 4 * v1794);
            v1781 = (v1781 + 1);
            if (v184 <= v1781)
              goto LABEL_1837;
          }
        case 2:
          if (!v184)
            goto LABEL_1837;
          v1540 = 0;
          v1541 = ~(-1 << SBYTE6(v2207));
          v1542 = BYTE6(v2207) & 7;
          v1543 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1544 = ~(-1 << SBYTE8(v2207));
          v1545 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1546 = (unint64_t)BYTE6(v2207) >> 3;
          while (1)
          {
            v1547 = (*(_QWORD *)(v185 + ((v1540 * (unint64_t)v182) >> 3)) >> ((v1540 * (_BYTE)v182) & 7)) & ~(-1 << (char)v182);
            if ((_DWORD)v182 == 64)
              v1547 = *(_QWORD *)(v185 + ((v1540 * (unint64_t)v182) >> 3));
            v1548 = (_DWORD *)(v178 + (v1547 * v176));
            v1549 = v1540 + v1547;
            while (1)
            {
              v1550 = *(_DWORD *)((char *)v1548 + v1546) >> v1542;
              if ((((*(double *)&a3[8 * (*v1548 & v1541)] >= *(float *)((char *)v1548 + v176 - 4)) ^ ((v1550 & 8) >> 3)) & 1) != 0)
                break;
              v1552 = v176;
              if ((v1550 & 1) != 0)
              {
                v1553 = ((*(_DWORD *)((char *)v1548 + v1545) >> v1543) & v1544) + v1549;
                goto LABEL_1546;
              }
LABEL_1543:
              v1548 = (_DWORD *)((char *)v1548 + v1552);
            }
            v1551 = (*(_DWORD *)((char *)v1548 + v1545) >> v1543) & v1544;
            if ((v1550 & 2) == 0)
              break;
            v1553 = (v1550 & 1) + v1549 + v1551;
LABEL_1546:
            v1554 = v588 * (unint64_t)v1553;
            v1555 = *(_QWORD *)(v589 + (v1554 >> 3));
            v1556 = (v1555 >> (v1554 & 7)) & ~(-1 << v588);
            if (v588 == 64)
              v1556 = v1555;
            *((double *)this + v1556) = *((double *)this + v1556) + *(float *)(v593 + 4 * v1553);
            v1540 = (v1540 + 1);
            if (v184 <= v1540)
              goto LABEL_1837;
          }
          v1552 = (v1551 * v176);
          goto LABEL_1543;
        case 3:
          if (!v184)
            goto LABEL_1837;
          v1711 = 0;
          v1712 = ~(-1 << SBYTE6(v2207));
          v1713 = BYTE6(v2207) & 7;
          v1714 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1715 = ~(-1 << SBYTE8(v2207));
          v1716 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1717 = (unint64_t)BYTE6(v2207) >> 3;
          while (1)
          {
            v1718 = (*(_QWORD *)(v185 + ((v1711 * (unint64_t)v182) >> 3)) >> ((v1711 * (_BYTE)v182) & 7)) & ~(-1 << (char)v182);
            if ((_DWORD)v182 == 64)
              v1718 = *(_QWORD *)(v185 + ((v1711 * (unint64_t)v182) >> 3));
            v1719 = (_DWORD *)(v178 + (v1718 * v176));
            v1720 = v1711 + v1718;
            while (1)
            {
              v1721 = *(_DWORD *)((char *)v1719 + v1717) >> v1713;
              if ((((*(double *)&a3[8 * (*v1719 & v1712)] < *(float *)((char *)v1719 + v176 - 4)) ^ ((v1721 & 8) >> 3)) & 1) != 0)
                break;
              v1723 = (*(_DWORD *)((char *)v1719 + v1716) >> v1714) & v1715;
              if ((v1721 & 2) != 0)
              {
                v1724 = (v1721 & 1) + v1720 + v1723;
                goto LABEL_1751;
              }
              v1722 = (v1723 * v176);
LABEL_1749:
              v1719 = (_DWORD *)((char *)v1719 + v1722);
            }
            v1722 = v176;
            if ((v1721 & 1) == 0)
              goto LABEL_1749;
            v1724 = ((*(_DWORD *)((char *)v1719 + v1716) >> v1714) & v1715) + v1720;
LABEL_1751:
            v1725 = v588 * (unint64_t)v1724;
            v1726 = *(_QWORD *)(v589 + (v1725 >> 3));
            v1727 = (v1726 >> (v1725 & 7)) & ~(-1 << v588);
            if (v588 == 64)
              v1727 = v1726;
            *((double *)this + v1727) = *((double *)this + v1727) + *(float *)(v593 + 4 * v1724);
            v1711 = (v1711 + 1);
            if (v184 <= v1711)
              goto LABEL_1837;
          }
        case 4:
          if (!v184)
            goto LABEL_1837;
          v1307 = 0;
          v1308 = ~(-1 << SBYTE6(v2207));
          v1309 = BYTE6(v2207) & 7;
          v1310 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1311 = ~(-1 << SBYTE8(v2207));
          v1312 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1313 = (unint64_t)BYTE6(v2207) >> 3;
          break;
        default:
          goto LABEL_1837;
      }
LABEL_1296:
      v1314 = (*(_QWORD *)(v185 + ((v1307 * (unint64_t)v182) >> 3)) >> ((v1307 * (_BYTE)v182) & 7)) & ~(-1 << (char)v182);
      if ((_DWORD)v182 == 64)
        v1314 = *(_QWORD *)(v185 + ((v1307 * (unint64_t)v182) >> 3));
      v1315 = (_DWORD *)(v178 + (v1314 * v176));
      v1316 = v1307 + v1314;
      while (1)
      {
        v1317 = *(_DWORD *)((char *)v1315 + v1313) >> v1309;
        v1318 = *(double *)&a3[8 * (*v1315 & v1308)];
        v1319 = *(float *)((char *)v1315 + v176 - 4);
        switch((v1317 >> 3) & 7)
        {
          case 0u:
            if (v1318 > v1319)
              goto LABEL_1303;
            goto LABEL_1312;
          case 1u:
            if (v1318 < v1319)
              goto LABEL_1312;
            goto LABEL_1303;
          case 2u:
            if (v1318 >= v1319)
              goto LABEL_1312;
            goto LABEL_1303;
          case 3u:
            if (v1318 > v1319)
              goto LABEL_1312;
            goto LABEL_1303;
          case 4u:
            if (v1318 != v1319)
              goto LABEL_1303;
            goto LABEL_1312;
          case 5u:
            if (v1318 != v1319)
              goto LABEL_1312;
LABEL_1303:
            v1320 = (*(_DWORD *)((char *)v1315 + v1312) >> v1310) & v1311;
            if ((v1317 & 2) != 0)
            {
              v1322 = ((*(_DWORD *)((char *)v1315 + v1313) >> v1309) & 1) + v1316 + v1320;
LABEL_1316:
              v1323 = v588 * (unint64_t)v1322;
              v1324 = *(_QWORD *)(v589 + (v1323 >> 3));
              v1325 = (v1324 >> (v1323 & 7)) & ~(-1 << v588);
              if (v588 == 64)
                v1325 = v1324;
              *((double *)this + v1325) = *((double *)this + v1325) + *(float *)(v593 + 4 * v1322);
              v1307 = (v1307 + 1);
              if (v184 <= v1307)
                goto LABEL_1837;
              goto LABEL_1296;
            }
            v1321 = (v1320 * v176);
LABEL_1313:
            v1315 = (_DWORD *)((char *)v1315 + v1321);
            break;
          default:
LABEL_1312:
            v1321 = v176;
            if ((v1317 & 1) == 0)
              goto LABEL_1313;
            v1322 = ((*(_DWORD *)((char *)v1315 + v1312) >> v1310) & v1311) + v1316;
            goto LABEL_1316;
        }
      }
    case 5:
      v2213 = 0;
      v2214 = 0;
      memset(v2211, 0, sizeof(v2211));
      v2212 = (CoreML::Archiver::MMappedContentManager *)&v2213;
      HIDWORD(v2211[0]) = 64;
      v2218 = 0;
      v2219 = 0;
      v2215 = 0u;
      v2216 = 0u;
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      DWORD1(v2215) = 64;
      v2220 = 0u;
      v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      v2223 = 0;
      DWORD1(v2220) = 64;
      v2225 = 0;
      v2226 = 0;
      v2224 = 0;
      *(_OWORD *)__p = *(_OWORD *)a2;
      v108 = *((_QWORD *)a2 + 2);
      v109 = a2 + 3;
      v2205 = v108;
      v2206 = i3 + 3;
      v110 = (uint64_t)&i3[v108 + 3];
      v111 = *(_OWORD *)(v110 + 16);
      v2207 = *(_OWORD *)v110;
      v2208 = v111;
      v112 = WORD2(v2207);
      v113 = *(_QWORD *)(v110 + 32);
      v2209 = v113 / WORD2(v2207);
      v2210 = (void *)(v110 + 40);
      if (v113 != v2209 * WORD2(v2207))
      {
        v2163 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v2163, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2163, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v2193 = (CoreML::Archiver::MMappedContentManager *)(v110 + 40);
      v114 = v110 + 40 + v113;
      v115 = 8 - (v114 & 7);
      if ((v114 & 7) == 0)
        v115 = 0;
      v116 = v114 + v115;
      v117 = *(unsigned int *)(v116 + 4);
      LODWORD(v2211[0]) = *(_DWORD *)v116;
      HIDWORD(v2211[0]) = v117;
      *(_OWORD *)&v2211[1] = *(_OWORD *)(v116 + 8);
      v118 = v2211[1];
      if (v2211[1])
      {
        v2211[2] = *(_QWORD *)(v116 + 24);
        v2211[3] = v116 + 32;
        v2189 = (CoreML::Archiver::MMappedContentManager *)(v116 + 32);
        v119 = v116 + 32 + 8 * v2211[2];
      }
      else
      {
        v2189 = 0;
        v119 = v116 + 24;
      }
      if ((v119 & 7) != 0)
        v119 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
      LODWORD(v2215) = *(_DWORD *)v119;
      v418 = *(_DWORD *)(v119 + 4);
      DWORD1(v2215) = v418;
      *((_QWORD *)&v2215 + 1) = *(_QWORD *)(v119 + 8);
      *(_QWORD *)&v2216 = *(_QWORD *)(v119 + 16);
      if (*((_QWORD *)&v2215 + 1))
      {
        v419 = v119 + 32;
        *(_QWORD *)&v2216 = *(_QWORD *)(v119 + 24);
        *((_QWORD *)&v2216 + 1) = v119 + 32;
        v420 = v119 + 32 + 8 * v2216;
      }
      else
      {
        v419 = 0;
        v420 = v119 + 24;
      }
      v421 = 8 - (v420 & 7);
      if ((v420 & 7) == 0)
        v421 = 0;
      v423 = v420 + v421 + 8;
      v422 = *(_QWORD *)(v420 + v421);
      v424 = v423 + 4 * v422;
      v2225 = v422;
      v2226 = v423;
      if ((v424 & 7) != 0)
        v425 = 8 - (v424 & 7);
      else
        v425 = 0;
      v426 = v424 + v425;
      LODWORD(v2220) = *(_DWORD *)v426;
      v427 = *(unsigned int *)(v426 + 4);
      DWORD1(v2220) = *(_DWORD *)(v426 + 4);
      *((_QWORD *)&v2220 + 1) = *(_QWORD *)(v426 + 8);
      *(_QWORD *)&v2221 = *(_QWORD *)(v426 + 16);
      if (*((_QWORD *)&v2220 + 1))
      {
        v428 = v426 + 32;
        *(_QWORD *)&v2221 = *(_QWORD *)(v426 + 24);
        *((_QWORD *)&v2221 + 1) = v426 + 32;
        v429 = v426 + 32 + 8 * v2221;
      }
      else
      {
        v428 = 0;
        v429 = v426 + 24;
      }
      v430 = 8 - (v429 & 7);
      if ((v429 & 7) == 0)
        v430 = 0;
      v2181 = *(_DWORD *)(v429 + v430);
      v2227 = v2181;
      v431 = (CoreML::Archiver::MMappedContentManager *)v108;
      if (v108)
        memmove(this, v109, 8 * v108);
      v2187 = v431;
      switch(BYTE13(v2207))
      {
        case 0:
          if (!v2211[1])
            goto LABEL_2161;
          v432 = 0;
          v433 = ~(-1 << SBYTE6(v2207));
          v434 = BYTE6(v2207) & 7;
          v435 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v436 = ~(-1 << SBYTE8(v2207));
          v437 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v438 = (unint64_t)BYTE6(v2207) >> 3;
          v439 = (1 << (BYTE11(v2207) - 1));
          v440 = ~(-1 << v418);
          v441 = ~(_DWORD)v439;
          while (1)
          {
            v442 = (*(_QWORD *)((char *)v2189 + ((v432 * v117) >> 3)) >> ((v432 * v117) & 7)) & ~(-1 << v117);
            if ((_DWORD)v117 == 64)
              v442 = *(_QWORD *)((char *)v2189 + ((v432 * v117) >> 3));
            v443 = (_DWORD *)((char *)v2193 + (v442 * v112));
            v444 = (*(_QWORD *)(v428 + ((v432 * v427) >> 3)) >> ((v432 * v427) & 7)) & ~(-1 << v427);
            if ((_DWORD)v427 == 64)
              v444 = *(_QWORD *)(v428 + ((v432 * v427) >> 3));
            while (1)
            {
              v445 = *(_DWORD *)((char *)v443 + v438) >> v434;
              if ((((*(double *)&a3[8 * (*v443 & v433)] > *(float *)((char *)v443 + v112 - 4)) ^ ((v445 & 8) >> 3)) & 1) == 0)
                break;
              v446 = (*(_DWORD *)((char *)v443 + v437) >> v435) & v436;
              if ((v445 & 2) != 0)
              {
                v448 = v446 + v444;
                if ((v445 & 1) != 0)
                {
                  do
                  {
                    v449 = v418 * (unint64_t)v448;
                    v450 = *(_QWORD *)(v419 + (v449 >> 3));
                    v451 = (v450 >> (v449 & 7)) & v440;
                    if (v418 == 64)
                      v451 = v450;
                    ++v448;
                  }
                  while ((v451 & v439) == 0);
                }
                do
                {
                  v452 = v418 * (unint64_t)v448;
                  v453 = *(_QWORD *)(v419 + (v452 >> 3));
                  v454 = (v453 >> (v452 & 7)) & v440;
                  if (v418 == 64)
                    v454 = v453;
                  *((double *)this + (v454 & v441)) = *((double *)this + (v454 & v441))
                                                                  + *(float *)(v423 + 4 * v448++);
                }
                while ((v454 & v439) == 0);
                goto LABEL_342;
              }
              v447 = (v446 * v112);
LABEL_329:
              v443 = (_DWORD *)((char *)v443 + v447);
            }
            v447 = v112;
            if ((v445 & 1) == 0)
              goto LABEL_329;
            v455 = ((*(_DWORD *)((char *)v443 + v437) >> v435) & v436) + v444;
            do
            {
              v456 = v418 * (unint64_t)v455;
              v457 = *(_QWORD *)(v419 + (v456 >> 3));
              v458 = (v457 >> (v456 & 7)) & v440;
              if (v418 == 64)
                v458 = v457;
              *((double *)this + (v458 & v441)) = *((double *)this + (v458 & v441))
                                                              + *(float *)(v423 + 4 * v455++);
            }
            while ((v458 & v439) == 0);
LABEL_342:
            v432 = (v432 + 1);
            if (v118 <= v432)
            {
LABEL_2161:
              CoreML::TreeEnsembles::Internal::apply_postevaluation_transform((double *)this, v2181, (uint64_t)v2187);
              CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v2222);
              CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v2217);
              goto LABEL_2162;
            }
          }
        case 1:
          if (!v2211[1])
            goto LABEL_2161;
          v1370 = 0;
          v1371 = ~(-1 << SBYTE6(v2207));
          v1372 = BYTE6(v2207) & 7;
          v1373 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1374 = ~(-1 << SBYTE8(v2207));
          v1375 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1376 = (unint64_t)BYTE6(v2207) >> 3;
          v1377 = (1 << (BYTE11(v2207) - 1));
          v1378 = ~(-1 << v418);
          v1379 = ~(_DWORD)v1377;
          while (1)
          {
            v1380 = (*(_QWORD *)((char *)v2189 + ((v1370 * v117) >> 3)) >> ((v1370 * v117) & 7)) & ~(-1 << v117);
            if ((_DWORD)v117 == 64)
              v1380 = *(_QWORD *)((char *)v2189 + ((v1370 * v117) >> 3));
            v1381 = (_DWORD *)((char *)v2193 + (v1380 * v112));
            v1382 = (*(_QWORD *)(v428 + ((v1370 * v427) >> 3)) >> ((v1370 * v427) & 7)) & ~(-1 << v427);
            if ((_DWORD)v427 == 64)
              v1382 = *(_QWORD *)(v428 + ((v1370 * v427) >> 3));
            while (1)
            {
              v1383 = *(_DWORD *)((char *)v1381 + v1376) >> v1372;
              if ((((*(double *)&a3[8 * (*v1381 & v1371)] <= *(float *)((char *)v1381 + v112 - 4)) ^ ((v1383 & 8) >> 3)) & 1) != 0)
                break;
              v1385 = (*(_DWORD *)((char *)v1381 + v1375) >> v1373) & v1374;
              if ((v1383 & 2) != 0)
              {
                v1390 = v1385 + v1382;
                if ((v1383 & 1) != 0)
                {
                  do
                  {
                    v1391 = v418 * (unint64_t)v1390;
                    v1392 = *(_QWORD *)(v419 + (v1391 >> 3));
                    v1393 = (v1392 >> (v1391 & 7)) & v1378;
                    if (v418 == 64)
                      v1393 = v1392;
                    ++v1390;
                  }
                  while ((v1393 & v1377) == 0);
                }
                do
                {
                  v1394 = v418 * (unint64_t)v1390;
                  v1395 = *(_QWORD *)(v419 + (v1394 >> 3));
                  v1396 = (v1395 >> (v1394 & 7)) & v1378;
                  if (v418 == 64)
                    v1396 = v1395;
                  *((double *)this + (v1396 & v1379)) = *((double *)this + (v1396 & v1379))
                                                                    + *(float *)(v423 + 4 * v1390++);
                }
                while ((v1396 & v1377) == 0);
                goto LABEL_1394;
              }
              v1384 = (v1385 * v112);
LABEL_1382:
              v1381 = (_DWORD *)((char *)v1381 + v1384);
            }
            v1384 = v112;
            if ((v1383 & 1) == 0)
              goto LABEL_1382;
            v1386 = ((*(_DWORD *)((char *)v1381 + v1375) >> v1373) & v1374) + v1382;
            do
            {
              v1387 = v418 * (unint64_t)v1386;
              v1388 = *(_QWORD *)(v419 + (v1387 >> 3));
              v1389 = (v1388 >> (v1387 & 7)) & v1378;
              if (v418 == 64)
                v1389 = v1388;
              *((double *)this + (v1389 & v1379)) = *((double *)this + (v1389 & v1379))
                                                                + *(float *)(v423 + 4 * v1386++);
            }
            while ((v1389 & v1377) == 0);
LABEL_1394:
            v1370 = (v1370 + 1);
            if (v118 <= v1370)
              goto LABEL_2161;
          }
        case 2:
          if (!v2211[1])
            goto LABEL_2161;
          v1152 = 0;
          v1153 = ~(-1 << SBYTE6(v2207));
          v1154 = BYTE6(v2207) & 7;
          v1155 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1156 = ~(-1 << SBYTE8(v2207));
          v1157 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1158 = (unint64_t)BYTE6(v2207) >> 3;
          v1159 = (1 << (BYTE11(v2207) - 1));
          v1160 = ~(-1 << v418);
          v1161 = ~(_DWORD)v1159;
          while (1)
          {
            v1162 = (*(_QWORD *)((char *)v2189 + ((v1152 * v117) >> 3)) >> ((v1152 * v117) & 7)) & ~(-1 << v117);
            if ((_DWORD)v117 == 64)
              v1162 = *(_QWORD *)((char *)v2189 + ((v1152 * v117) >> 3));
            v1163 = (_DWORD *)((char *)v2193 + (v1162 * v112));
            v1164 = (*(_QWORD *)(v428 + ((v1152 * v427) >> 3)) >> ((v1152 * v427) & 7)) & ~(-1 << v427);
            if ((_DWORD)v427 == 64)
              v1164 = *(_QWORD *)(v428 + ((v1152 * v427) >> 3));
            while (1)
            {
              v1165 = *(_DWORD *)((char *)v1163 + v1158) >> v1154;
              if ((((*(double *)&a3[8 * (*v1163 & v1153)] >= *(float *)((char *)v1163 + v112 - 4)) ^ ((v1165 & 8) >> 3)) & 1) != 0)
                break;
              v1167 = v112;
              if ((v1165 & 1) != 0)
              {
                v1175 = ((*(_DWORD *)((char *)v1163 + v1157) >> v1155) & v1156) + v1164;
                do
                {
                  v1176 = v418 * (unint64_t)v1175;
                  v1177 = *(_QWORD *)(v419 + (v1176 >> 3));
                  v1178 = (v1177 >> (v1176 & 7)) & v1160;
                  if (v418 == 64)
                    v1178 = v1177;
                  *((double *)this + (v1178 & v1161)) = *((double *)this + (v1178 & v1161))
                                                                    + *(float *)(v423 + 4 * v1175++);
                }
                while ((v1178 & v1159) == 0);
                goto LABEL_1157;
              }
LABEL_1144:
              v1163 = (_DWORD *)((char *)v1163 + v1167);
            }
            v1166 = (*(_DWORD *)((char *)v1163 + v1157) >> v1155) & v1156;
            if ((v1165 & 2) == 0)
              break;
            v1168 = v1166 + v1164;
            if ((v1165 & 1) != 0)
            {
              do
              {
                v1169 = v418 * (unint64_t)v1168;
                v1170 = *(_QWORD *)(v419 + (v1169 >> 3));
                v1171 = (v1170 >> (v1169 & 7)) & v1160;
                if (v418 == 64)
                  v1171 = v1170;
                ++v1168;
              }
              while ((v1171 & v1159) == 0);
            }
            do
            {
              v1172 = v418 * (unint64_t)v1168;
              v1173 = *(_QWORD *)(v419 + (v1172 >> 3));
              v1174 = (v1173 >> (v1172 & 7)) & v1160;
              if (v418 == 64)
                v1174 = v1173;
              *((double *)this + (v1174 & v1161)) = *((double *)this + (v1174 & v1161))
                                                                + *(float *)(v423 + 4 * v1168++);
            }
            while ((v1174 & v1159) == 0);
LABEL_1157:
            v1152 = (v1152 + 1);
            if (v118 <= v1152)
              goto LABEL_2161;
          }
          v1167 = (v1166 * v112);
          goto LABEL_1144;
        case 3:
          if (!v2211[1])
            goto LABEL_2161;
          v1280 = 0;
          v1281 = ~(-1 << SBYTE6(v2207));
          v1282 = BYTE6(v2207) & 7;
          v1283 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1284 = ~(-1 << SBYTE8(v2207));
          v1285 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1286 = (unint64_t)BYTE6(v2207) >> 3;
          v1287 = (1 << (BYTE11(v2207) - 1));
          v1288 = ~(-1 << v418);
          v1289 = ~(_DWORD)v1287;
          while (1)
          {
            v1290 = (*(_QWORD *)((char *)v2189 + ((v1280 * v117) >> 3)) >> ((v1280 * v117) & 7)) & ~(-1 << v117);
            if ((_DWORD)v117 == 64)
              v1290 = *(_QWORD *)((char *)v2189 + ((v1280 * v117) >> 3));
            v1291 = (_DWORD *)((char *)v2193 + (v1290 * v112));
            v1292 = (*(_QWORD *)(v428 + ((v1280 * v427) >> 3)) >> ((v1280 * v427) & 7)) & ~(-1 << v427);
            if ((_DWORD)v427 == 64)
              v1292 = *(_QWORD *)(v428 + ((v1280 * v427) >> 3));
            while (1)
            {
              v1293 = *(_DWORD *)((char *)v1291 + v1286) >> v1282;
              if ((((*(double *)&a3[8 * (*v1291 & v1281)] < *(float *)((char *)v1291 + v112 - 4)) ^ ((v1293 & 8) >> 3)) & 1) != 0)
                break;
              v1295 = (*(_DWORD *)((char *)v1291 + v1285) >> v1283) & v1284;
              if ((v1293 & 2) != 0)
              {
                v1300 = v1295 + v1292;
                if ((v1293 & 1) != 0)
                {
                  do
                  {
                    v1301 = v418 * (unint64_t)v1300;
                    v1302 = *(_QWORD *)(v419 + (v1301 >> 3));
                    v1303 = (v1302 >> (v1301 & 7)) & v1288;
                    if (v418 == 64)
                      v1303 = v1302;
                    ++v1300;
                  }
                  while ((v1303 & v1287) == 0);
                }
                do
                {
                  v1304 = v418 * (unint64_t)v1300;
                  v1305 = *(_QWORD *)(v419 + (v1304 >> 3));
                  v1306 = (v1305 >> (v1304 & 7)) & v1288;
                  if (v418 == 64)
                    v1306 = v1305;
                  *((double *)this + (v1306 & v1289)) = *((double *)this + (v1306 & v1289))
                                                                    + *(float *)(v423 + 4 * v1300++);
                }
                while ((v1306 & v1287) == 0);
                goto LABEL_1292;
              }
              v1294 = (v1295 * v112);
LABEL_1280:
              v1291 = (_DWORD *)((char *)v1291 + v1294);
            }
            v1294 = v112;
            if ((v1293 & 1) == 0)
              goto LABEL_1280;
            v1296 = ((*(_DWORD *)((char *)v1291 + v1285) >> v1283) & v1284) + v1292;
            do
            {
              v1297 = v418 * (unint64_t)v1296;
              v1298 = *(_QWORD *)(v419 + (v1297 >> 3));
              v1299 = (v1298 >> (v1297 & 7)) & v1288;
              if (v418 == 64)
                v1299 = v1298;
              *((double *)this + (v1299 & v1289)) = *((double *)this + (v1299 & v1289))
                                                                + *(float *)(v423 + 4 * v1296++);
            }
            while ((v1299 & v1287) == 0);
LABEL_1292:
            v1280 = (v1280 + 1);
            if (v118 <= v1280)
              goto LABEL_2161;
          }
        case 4:
          if (!v2211[1])
            goto LABEL_2161;
          v1035 = 0;
          v1036 = ~(-1 << SBYTE6(v2207));
          v1037 = BYTE6(v2207) & 7;
          v1038 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1039 = ~(-1 << SBYTE8(v2207));
          v1040 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1041 = (unint64_t)BYTE6(v2207) >> 3;
          v1042 = (1 << (BYTE11(v2207) - 1));
          v1043 = ~(-1 << v418);
          v1044 = ~(_DWORD)v1042;
          break;
        default:
          goto LABEL_2161;
      }
LABEL_1005:
      v1045 = (*(_QWORD *)((char *)v2189 + ((v1035 * v117) >> 3)) >> ((v1035 * v117) & 7)) & ~(-1 << v117);
      if ((_DWORD)v117 == 64)
        v1045 = *(_QWORD *)((char *)v2189 + ((v1035 * v117) >> 3));
      v1046 = (_DWORD *)((char *)v2193 + (v1045 * v112));
      v1047 = (*(_QWORD *)(v428 + ((v1035 * v427) >> 3)) >> ((v1035 * v427) & 7)) & ~(-1 << v427);
      if ((_DWORD)v427 == 64)
        v1047 = *(_QWORD *)(v428 + ((v1035 * v427) >> 3));
      while (1)
      {
        v1048 = *(_DWORD *)((char *)v1046 + v1041) >> v1037;
        v1049 = *(double *)&a3[8 * (*v1046 & v1036)];
        v1050 = *(float *)((char *)v1046 + v112 - 4);
        switch((v1048 >> 3) & 7)
        {
          case 0u:
            if (v1049 > v1050)
              goto LABEL_1013;
            goto LABEL_1022;
          case 1u:
            if (v1049 < v1050)
              goto LABEL_1022;
            goto LABEL_1013;
          case 2u:
            if (v1049 >= v1050)
              goto LABEL_1022;
            goto LABEL_1013;
          case 3u:
            if (v1049 > v1050)
              goto LABEL_1022;
            goto LABEL_1013;
          case 4u:
            if (v1049 != v1050)
              goto LABEL_1013;
            goto LABEL_1022;
          case 5u:
            if (v1049 != v1050)
              goto LABEL_1022;
LABEL_1013:
            v1051 = (*(_DWORD *)((char *)v1046 + v1040) >> v1038) & v1039;
            if ((v1048 & 2) != 0)
            {
              v1057 = v1051 + v1047;
              if ((v1048 & 1) != 0)
              {
                do
                {
                  v1058 = v418 * (unint64_t)v1057;
                  v1059 = *(_QWORD *)(v419 + (v1058 >> 3));
                  v1060 = (v1059 >> (v1058 & 7)) & v1043;
                  if (v418 == 64)
                    v1060 = v1059;
                  ++v1057;
                }
                while ((v1060 & v1042) == 0);
              }
              do
              {
                v1061 = v418 * (unint64_t)v1057;
                v1062 = *(_QWORD *)(v419 + (v1061 >> 3));
                v1063 = (v1062 >> (v1061 & 7)) & v1043;
                if (v418 == 64)
                  v1063 = v1062;
                *((double *)this + (v1063 & v1044)) = *((double *)this + (v1063 & v1044))
                                                                  + *(float *)(v423 + 4 * v1057++);
              }
              while ((v1063 & v1042) == 0);
LABEL_1036:
              v1035 = (v1035 + 1);
              if (v118 <= v1035)
                goto LABEL_2161;
              goto LABEL_1005;
            }
            v1052 = (v1051 * v112);
LABEL_1023:
            v1046 = (_DWORD *)((char *)v1046 + v1052);
            break;
          default:
LABEL_1022:
            v1052 = v112;
            if ((v1048 & 1) == 0)
              goto LABEL_1023;
            v1053 = ((*(_DWORD *)((char *)v1046 + v1040) >> v1038) & v1039) + v1047;
            do
            {
              v1054 = v418 * (unint64_t)v1053;
              v1055 = *(_QWORD *)(v419 + (v1054 >> 3));
              v1056 = (v1055 >> (v1054 & 7)) & v1043;
              if (v418 == 64)
                v1056 = v1055;
              *((double *)this + (v1056 & v1044)) = *((double *)this + (v1056 & v1044))
                                                                + *(float *)(v423 + 4 * v1053++);
            }
            while ((v1056 & v1042) == 0);
            goto LABEL_1036;
        }
      }
    case 6:
      v2213 = 0;
      v2214 = 0;
      memset(v2211, 0, sizeof(v2211));
      v2212 = (CoreML::Archiver::MMappedContentManager *)&v2213;
      HIDWORD(v2211[0]) = 64;
      v2218 = 0;
      v2219 = 0;
      v2215 = 0u;
      v2216 = 0u;
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      DWORD1(v2215) = 64;
      v2220 = 0u;
      v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      v2223 = 0;
      DWORD1(v2220) = 64;
      v2225 = 0;
      v2226 = 0;
      v2224 = 0;
      *(_OWORD *)__p = *(_OWORD *)a2;
      v79 = *((_QWORD *)a2 + 2);
      v249 = a2 + 3;
      v2205 = v79;
      v2206 = i3 + 3;
      v250 = (uint64_t)&i3[v79 + 3];
      v251 = *(_OWORD *)(v250 + 16);
      v2207 = *(_OWORD *)v250;
      v2208 = v251;
      v252 = WORD2(v2207);
      v253 = *(_QWORD *)(v250 + 32);
      v254 = v250 + 40;
      v2209 = v253 / WORD2(v2207);
      v2210 = (void *)(v250 + 40);
      if (v253 != v2209 * WORD2(v2207))
      {
        v2171 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v2171, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2171, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v255 = v254 + v253;
      v256 = 8 - (v255 & 7);
      if ((v255 & 7) == 0)
        v256 = 0;
      v257 = v255 + v256;
      v258 = *(unsigned int *)(v257 + 4);
      LODWORD(v2211[0]) = *(_DWORD *)v257;
      HIDWORD(v2211[0]) = v258;
      *(_OWORD *)&v2211[1] = *(_OWORD *)(v257 + 8);
      v259 = v2211[1];
      if (v2211[1])
      {
        v260 = v257 + 32;
        v2211[2] = *(_QWORD *)(v257 + 24);
        v2211[3] = v257 + 32;
        v261 = v257 + 32 + 8 * v2211[2];
      }
      else
      {
        v260 = 0;
        v261 = v257 + 24;
      }
      if ((v261 & 7) != 0)
        v261 = (v261 & 0xFFFFFFFFFFFFFFF8) + 8;
      v2215 = *(_OWORD *)v261;
      *(_QWORD *)&v2216 = *(_QWORD *)(v261 + 16);
      if (*((_QWORD *)&v2215 + 1))
      {
        *(_QWORD *)&v2216 = *(_QWORD *)(v261 + 24);
        *((_QWORD *)&v2216 + 1) = v261 + 32;
        v687 = v261 + 32 + 8 * v2216;
      }
      else
      {
        v687 = v261 + 24;
      }
      v688 = 8 - (v687 & 7);
      if ((v687 & 7) == 0)
        v688 = 0;
      v690 = v687 + v688 + 8;
      v689 = *(_QWORD *)(v687 + v688);
      v691 = v690 + 4 * v689;
      v2225 = v689;
      v2226 = v690;
      if ((v691 & 7) != 0)
        v692 = 8 - (v691 & 7);
      else
        v692 = 0;
      v693 = v691 + v692;
      v2220 = *(_OWORD *)v693;
      *(_QWORD *)&v2221 = *(_QWORD *)(v693 + 16);
      if (*((_QWORD *)&v2220 + 1))
      {
        *(_QWORD *)&v2221 = *(_QWORD *)(v693 + 24);
        *((_QWORD *)&v2221 + 1) = v693 + 32;
        v694 = v693 + 32 + 8 * v2221;
      }
      else
      {
        v694 = v693 + 24;
      }
      v695 = 8 - (v694 & 7);
      if ((v694 & 7) == 0)
        v695 = 0;
      v366 = *(_DWORD *)(v694 + v695);
      v2227 = v366;
      if (v79)
        memmove(this, v249, 8 * v79);
      switch(BYTE13(v2207))
      {
        case 0:
          if (!v2211[1])
            goto LABEL_2134;
          v696 = 0;
          v697 = ~(-1 << SBYTE6(v2207));
          v698 = BYTE6(v2207) & 7;
          v699 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v700 = ~(-1 << SBYTE8(v2207));
          v701 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v702 = (unint64_t)BYTE6(v2207) >> 3;
          v703 = DWORD2(v2208);
          v704 = DWORD2(v2208);
          while (1)
          {
            v705 = (*(_QWORD *)(v260 + ((v696 * v258) >> 3)) >> ((v696 * v258) & 7)) & ~(-1 << v258);
            if ((_DWORD)v258 == 64)
              v705 = *(_QWORD *)(v260 + ((v696 * v258) >> 3));
            for (i = (_DWORD *)(v254 + (v705 * v252)); ; i = (_DWORD *)((char *)i + v709))
            {
              v707 = *(_DWORD *)((char *)i + v702) >> v698;
              if ((((*(double *)&a3[8 * (*i & v697)] > *(float *)((char *)i + v252 - 4)) ^ ((v707 & 8) >> 3)) & 1) != 0)
                break;
              v709 = v252;
              if ((v707 & 1) != 0)
              {
                if (v703)
                {
                  v713 = v703 * (((*(_DWORD *)((char *)i + v701) >> v699) & v700) + v696 + v705);
                  v714 = (double *)this;
                  v715 = v704;
                  do
                  {
                    *v714 = *v714 + *(float *)(v690 + 4 * v713);
                    ++v714;
                    ++v713;
                    --v715;
                  }
                  while (v715);
                }
                goto LABEL_640;
              }
LABEL_632:
              ;
            }
            v708 = (*(_DWORD *)((char *)i + v701) >> v699) & v700;
            if ((v707 & 2) == 0)
              break;
            if (v703)
            {
              v710 = v703 * (v696 + v705 + v708 + (v707 & 1));
              v711 = (double *)this;
              v712 = v704;
              do
              {
                *v711 = *v711 + *(float *)(v690 + 4 * v710);
                ++v711;
                ++v710;
                --v712;
              }
              while (v712);
            }
LABEL_640:
            v696 = (v696 + 1);
            if (v259 <= v696)
              goto LABEL_2134;
          }
          v709 = (v708 * v252);
          goto LABEL_632;
        case 1:
          if (!v2211[1])
            goto LABEL_2134;
          v2016 = 0;
          v2017 = ~(-1 << SBYTE6(v2207));
          v2018 = BYTE6(v2207) & 7;
          v2019 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v2020 = ~(-1 << SBYTE8(v2207));
          v2021 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v2022 = (unint64_t)BYTE6(v2207) >> 3;
          v2023 = DWORD2(v2208);
          v2024 = DWORD2(v2208);
          while (1)
          {
            v2025 = (*(_QWORD *)(v260 + ((v2016 * v258) >> 3)) >> ((v2016 * v258) & 7)) & ~(-1 << v258);
            if ((_DWORD)v258 == 64)
              v2025 = *(_QWORD *)(v260 + ((v2016 * v258) >> 3));
            for (j = (_DWORD *)(v254 + (v2025 * v252)); ; j = (_DWORD *)((char *)j + v2028))
            {
              v2027 = *(_DWORD *)((char *)j + v2022) >> v2018;
              if ((((*(double *)&a3[8 * (*j & v2017)] <= *(float *)((char *)j + v252 - 4)) ^ ((v2027 & 8) >> 3)) & 1) != 0)
                break;
              v2029 = (*(_DWORD *)((char *)j + v2021) >> v2019) & v2020;
              if ((v2027 & 2) != 0)
              {
                if (v2023)
                {
                  v2033 = v2023 * (v2016 + v2025 + v2029 + (v2027 & 1));
                  v2034 = (double *)this;
                  v2035 = v2024;
                  do
                  {
                    *v2034 = *v2034 + *(float *)(v690 + 4 * v2033);
                    ++v2034;
                    ++v2033;
                    --v2035;
                  }
                  while (v2035);
                }
                goto LABEL_2044;
              }
              v2028 = (v2029 * v252);
LABEL_2036:
              ;
            }
            v2028 = v252;
            if ((v2027 & 1) == 0)
              goto LABEL_2036;
            if (v2023)
            {
              v2030 = v2023 * (((*(_DWORD *)((char *)j + v2021) >> v2019) & v2020) + v2016 + v2025);
              v2031 = (double *)this;
              v2032 = v2024;
              do
              {
                *v2031 = *v2031 + *(float *)(v690 + 4 * v2030);
                ++v2031;
                ++v2030;
                --v2032;
              }
              while (v2032);
            }
LABEL_2044:
            v2016 = (v2016 + 1);
            if (v259 <= v2016)
              goto LABEL_2134;
          }
        case 2:
          if (!v2211[1])
            goto LABEL_2134;
          v1816 = 0;
          v1817 = ~(-1 << SBYTE6(v2207));
          v1818 = BYTE6(v2207) & 7;
          v1819 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1820 = ~(-1 << SBYTE8(v2207));
          v1821 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1822 = (unint64_t)BYTE6(v2207) >> 3;
          v1823 = DWORD2(v2208);
          v1824 = DWORD2(v2208);
          while (1)
          {
            v1825 = (*(_QWORD *)(v260 + ((v1816 * v258) >> 3)) >> ((v1816 * v258) & 7)) & ~(-1 << v258);
            if ((_DWORD)v258 == 64)
              v1825 = *(_QWORD *)(v260 + ((v1816 * v258) >> 3));
            for (k = (_DWORD *)(v254 + (v1825 * v252)); ; k = (_DWORD *)((char *)k + v1829))
            {
              v1827 = *(_DWORD *)((char *)k + v1822) >> v1818;
              if ((((*(double *)&a3[8 * (*k & v1817)] >= *(float *)((char *)k + v252 - 4)) ^ ((v1827 & 8) >> 3)) & 1) != 0)
                break;
              v1829 = v252;
              if ((v1827 & 1) != 0)
              {
                if (v1823)
                {
                  v1833 = v1823 * (((*(_DWORD *)((char *)k + v1821) >> v1819) & v1820) + v1816 + v1825);
                  v1834 = (double *)this;
                  v1835 = v1824;
                  do
                  {
                    *v1834 = *v1834 + *(float *)(v690 + 4 * v1833);
                    ++v1834;
                    ++v1833;
                    --v1835;
                  }
                  while (v1835);
                }
                goto LABEL_1855;
              }
LABEL_1847:
              ;
            }
            v1828 = (*(_DWORD *)((char *)k + v1821) >> v1819) & v1820;
            if ((v1827 & 2) == 0)
              break;
            if (v1823)
            {
              v1830 = v1823 * (v1816 + v1825 + v1828 + (v1827 & 1));
              v1831 = (double *)this;
              v1832 = v1824;
              do
              {
                *v1831 = *v1831 + *(float *)(v690 + 4 * v1830);
                ++v1831;
                ++v1830;
                --v1832;
              }
              while (v1832);
            }
LABEL_1855:
            v1816 = (v1816 + 1);
            if (v259 <= v1816)
              goto LABEL_2134;
          }
          v1829 = (v1828 * v252);
          goto LABEL_1847;
        case 3:
          if (!v2211[1])
            goto LABEL_2134;
          v1961 = 0;
          v1962 = ~(-1 << SBYTE6(v2207));
          v1963 = BYTE6(v2207) & 7;
          v1964 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1965 = ~(-1 << SBYTE8(v2207));
          v1966 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1967 = (unint64_t)BYTE6(v2207) >> 3;
          v1968 = DWORD2(v2208);
          v1969 = DWORD2(v2208);
          while (1)
          {
            v1970 = (*(_QWORD *)(v260 + ((v1961 * v258) >> 3)) >> ((v1961 * v258) & 7)) & ~(-1 << v258);
            if ((_DWORD)v258 == 64)
              v1970 = *(_QWORD *)(v260 + ((v1961 * v258) >> 3));
            for (m = (_DWORD *)(v254 + (v1970 * v252)); ; m = (_DWORD *)((char *)m + v1973))
            {
              v1972 = *(_DWORD *)((char *)m + v1967) >> v1963;
              if ((((*(double *)&a3[8 * (*m & v1962)] < *(float *)((char *)m + v252 - 4)) ^ ((v1972 & 8) >> 3)) & 1) != 0)
                break;
              v1974 = (*(_DWORD *)((char *)m + v1966) >> v1964) & v1965;
              if ((v1972 & 2) != 0)
              {
                if (v1968)
                {
                  v1978 = v1968 * (v1961 + v1970 + v1974 + (v1972 & 1));
                  v1979 = (double *)this;
                  v1980 = v1969;
                  do
                  {
                    *v1979 = *v1979 + *(float *)(v690 + 4 * v1978);
                    ++v1979;
                    ++v1978;
                    --v1980;
                  }
                  while (v1980);
                }
                goto LABEL_1990;
              }
              v1973 = (v1974 * v252);
LABEL_1982:
              ;
            }
            v1973 = v252;
            if ((v1972 & 1) == 0)
              goto LABEL_1982;
            if (v1968)
            {
              v1975 = v1968 * (((*(_DWORD *)((char *)m + v1966) >> v1964) & v1965) + v1961 + v1970);
              v1976 = (double *)this;
              v1977 = v1969;
              do
              {
                *v1976 = *v1976 + *(float *)(v690 + 4 * v1975);
                ++v1976;
                ++v1975;
                --v1977;
              }
              while (v1977);
            }
LABEL_1990:
            v1961 = (v1961 + 1);
            if (v259 <= v1961)
              goto LABEL_2134;
          }
        case 4:
          if (!v2211[1])
            goto LABEL_2134;
          v1572 = 0;
          v1573 = ~(-1 << SBYTE6(v2207));
          v1574 = BYTE6(v2207) & 7;
          v1575 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1576 = ~(-1 << SBYTE8(v2207));
          v1577 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1578 = (unint64_t)BYTE6(v2207) >> 3;
          v1579 = DWORD2(v2208);
          v1580 = DWORD2(v2208);
          break;
        default:
          goto LABEL_2134;
      }
LABEL_1568:
      v1581 = (*(_QWORD *)(v260 + ((v1572 * v258) >> 3)) >> ((v1572 * v258) & 7)) & ~(-1 << v258);
      if ((_DWORD)v258 == 64)
        v1581 = *(_QWORD *)(v260 + ((v1572 * v258) >> 3));
      v1582 = (_DWORD *)(v254 + (v1581 * v252));
      while (1)
      {
        v1583 = *(_DWORD *)((char *)v1582 + v1578) >> v1574;
        v1584 = *(double *)&a3[8 * (*v1582 & v1573)];
        v1585 = *(float *)((char *)v1582 + v252 - 4);
        switch((v1583 >> 3) & 7)
        {
          case 0u:
            if (v1584 > v1585)
              goto LABEL_1575;
            goto LABEL_1584;
          case 1u:
            if (v1584 < v1585)
              goto LABEL_1584;
            goto LABEL_1575;
          case 2u:
            if (v1584 >= v1585)
              goto LABEL_1584;
            goto LABEL_1575;
          case 3u:
            if (v1584 > v1585)
              goto LABEL_1584;
            goto LABEL_1575;
          case 4u:
            if (v1584 != v1585)
              goto LABEL_1575;
            goto LABEL_1584;
          case 5u:
            if (v1584 != v1585)
              goto LABEL_1584;
LABEL_1575:
            v1586 = (*(_DWORD *)((char *)v1582 + v1577) >> v1575) & v1576;
            if ((v1583 & 2) != 0)
            {
              if (v1579)
              {
                v1591 = v1579 * (v1572 + v1581 + v1586 + ((*(_DWORD *)((char *)v1582 + v1578) >> v1574) & 1));
                v1592 = (double *)this;
                v1593 = v1580;
                do
                {
                  *v1592 = *v1592 + *(float *)(v690 + 4 * v1591);
                  ++v1592;
                  ++v1591;
                  --v1593;
                }
                while (v1593);
              }
LABEL_1593:
              v1572 = (v1572 + 1);
              if (v259 <= v1572)
                goto LABEL_2134;
              goto LABEL_1568;
            }
            v1587 = (v1586 * v252);
LABEL_1585:
            v1582 = (_DWORD *)((char *)v1582 + v1587);
            break;
          default:
LABEL_1584:
            v1587 = v252;
            if ((v1583 & 1) == 0)
              goto LABEL_1585;
            if (v1579)
            {
              v1588 = v1579 * (((*(_DWORD *)((char *)v1582 + v1577) >> v1575) & v1576) + v1572 + v1581);
              v1589 = (double *)this;
              v1590 = v1580;
              do
              {
                *v1589 = *v1589 + *(float *)(v690 + 4 * v1588);
                ++v1589;
                ++v1588;
                --v1590;
              }
              while (v1590);
            }
            goto LABEL_1593;
        }
      }
    case 7:
      v2213 = 0;
      v2214 = 0;
      memset(v2211, 0, sizeof(v2211));
      v2212 = (CoreML::Archiver::MMappedContentManager *)&v2213;
      HIDWORD(v2211[0]) = 64;
      v2218 = 0;
      v2219 = 0;
      v2215 = 0u;
      v2216 = 0u;
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      DWORD1(v2215) = 64;
      v2220 = 0u;
      v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      v2223 = 0;
      DWORD1(v2220) = 64;
      v2225 = 0;
      v2226 = 0;
      v2224 = 0;
      *(_OWORD *)__p = *(_OWORD *)a2;
      v79 = *((_QWORD *)a2 + 2);
      v275 = a2 + 3;
      v2205 = v79;
      v2206 = i3 + 3;
      v276 = (uint64_t)&i3[v79 + 3];
      v277 = *(_OWORD *)(v276 + 16);
      v2207 = *(_OWORD *)v276;
      v2208 = v277;
      v278 = WORD2(v2207);
      v279 = *(_QWORD *)(v276 + 32);
      v280 = v276 + 40;
      v2209 = v279 / WORD2(v2207);
      v2210 = (void *)(v276 + 40);
      if (v279 != v2209 * WORD2(v2207))
      {
        v2173 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v2173, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2173, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v281 = v280 + v279;
      v282 = 8 - (v281 & 7);
      if ((v281 & 7) == 0)
        v282 = 0;
      v283 = v281 + v282;
      v284 = *(unsigned int *)(v283 + 4);
      LODWORD(v2211[0]) = *(_DWORD *)v283;
      HIDWORD(v2211[0]) = v284;
      *(_OWORD *)&v2211[1] = *(_OWORD *)(v283 + 8);
      v285 = v2211[1];
      if (v2211[1])
      {
        v286 = v283 + 32;
        v2211[2] = *(_QWORD *)(v283 + 24);
        v2211[3] = v283 + 32;
        v287 = v283 + 32 + 8 * v2211[2];
      }
      else
      {
        v286 = 0;
        v287 = v283 + 24;
      }
      if ((v287 & 7) != 0)
        v287 = (v287 & 0xFFFFFFFFFFFFFFF8) + 8;
      v2215 = *(_OWORD *)v287;
      *(_QWORD *)&v2216 = *(_QWORD *)(v287 + 16);
      if (*((_QWORD *)&v2215 + 1))
      {
        *(_QWORD *)&v2216 = *(_QWORD *)(v287 + 24);
        *((_QWORD *)&v2216 + 1) = v287 + 32;
        v745 = v287 + 32 + 8 * v2216;
      }
      else
      {
        v745 = v287 + 24;
      }
      v746 = 8 - (v745 & 7);
      if ((v745 & 7) == 0)
        v746 = 0;
      v748 = v745 + v746 + 8;
      v747 = *(_QWORD *)(v745 + v746);
      v749 = v748 + 4 * v747;
      v2225 = v747;
      v2226 = v748;
      if ((v749 & 7) != 0)
        v750 = 8 - (v749 & 7);
      else
        v750 = 0;
      v751 = v749 + v750;
      v2220 = *(_OWORD *)v751;
      *(_QWORD *)&v2221 = *(_QWORD *)(v751 + 16);
      if (*((_QWORD *)&v2220 + 1))
      {
        *(_QWORD *)&v2221 = *(_QWORD *)(v751 + 24);
        *((_QWORD *)&v2221 + 1) = v751 + 32;
        v752 = v751 + 32 + 8 * v2221;
      }
      else
      {
        v752 = v751 + 24;
      }
      v753 = 8 - (v752 & 7);
      if ((v752 & 7) == 0)
        v753 = 0;
      v366 = *(_DWORD *)(v752 + v753);
      v2227 = v366;
      if (v79)
        memmove(this, v275, 8 * v79);
      switch(BYTE13(v2207))
      {
        case 0:
          if (!v2211[1])
            goto LABEL_2134;
          v754 = 0;
          v755 = ~(-1 << SBYTE6(v2207));
          v756 = BYTE6(v2207) & 7;
          v757 = ~(-1 << SBYTE8(v2207));
          v758 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v759 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v760 = (unint64_t)BYTE6(v2207) >> 3;
          v761 = *(double *)this;
          while (1)
          {
            v762 = (*(_QWORD *)(v286 + ((unint64_t)(v754 * v284) >> 3)) >> ((v754 * v284) & 7)) & ~(-1 << v284);
            if ((_DWORD)v284 == 64)
              v762 = *(_QWORD *)(v286 + ((unint64_t)(v754 * v284) >> 3));
            v763 = (_QWORD *)(v280 + v762 * v278);
            v764 = v762 + v754;
            while (1)
            {
              v765 = *(_DWORD *)((char *)v763 + v760) >> v756;
              if ((((*(double *)&a3[8 * (*v763 & v755)] > *(float *)((char *)v763 + v278 - 4)) ^ ((v765 & 8) >> 3)) & 1) != 0)
                break;
              v767 = v278;
              if ((v765 & 1) != 0)
              {
                v768 = ((*(_QWORD *)((char *)v763 + v759) >> v758) & v757) + v764;
                goto LABEL_711;
              }
LABEL_708:
              v763 = (_QWORD *)((char *)v763 + v767);
            }
            v766 = (*(_QWORD *)((char *)v763 + v759) >> v758) & v757;
            if ((v765 & 2) == 0)
              break;
            v768 = v764 + v766 + (v765 & 1);
LABEL_711:
            v761 = v761 + *(float *)(v748 + 4 * v768);
            *(double *)this = v761;
            if (++v754 == v285)
              goto LABEL_2134;
          }
          v767 = v766 * v278;
          goto LABEL_708;
        case 1:
          if (!v2211[1])
            goto LABEL_2134;
          v2100 = 0;
          v2101 = ~(-1 << SBYTE6(v2207));
          v2102 = BYTE6(v2207) & 7;
          v2103 = ~(-1 << SBYTE8(v2207));
          v2104 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v2105 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v2106 = (unint64_t)BYTE6(v2207) >> 3;
          v2107 = *(double *)this;
          while (1)
          {
            v2108 = (*(_QWORD *)(v286 + ((unint64_t)(v2100 * v284) >> 3)) >> ((v2100 * v284) & 7)) & ~(-1 << v284);
            if ((_DWORD)v284 == 64)
              v2108 = *(_QWORD *)(v286 + ((unint64_t)(v2100 * v284) >> 3));
            v2109 = (_QWORD *)(v280 + v2108 * v278);
            v2110 = v2108 + v2100;
            while (1)
            {
              v2111 = *(_DWORD *)((char *)v2109 + v2106) >> v2102;
              if ((((*(double *)&a3[8 * (*v2109 & v2101)] <= *(float *)((char *)v2109 + v278 - 4)) ^ ((v2111 & 8) >> 3)) & 1) != 0)
                break;
              v2113 = (*(_QWORD *)((char *)v2109 + v2105) >> v2104) & v2103;
              if ((v2111 & 2) != 0)
              {
                v2114 = v2110 + v2113 + (v2111 & 1);
                goto LABEL_2119;
              }
              v2112 = v2113 * v278;
LABEL_2117:
              v2109 = (_QWORD *)((char *)v2109 + v2112);
            }
            v2112 = v278;
            if ((v2111 & 1) == 0)
              goto LABEL_2117;
            v2114 = ((*(_QWORD *)((char *)v2109 + v2105) >> v2104) & v2103) + v2110;
LABEL_2119:
            v2107 = v2107 + *(float *)(v748 + 4 * v2114);
            *(double *)this = v2107;
            if (++v2100 == v285)
              goto LABEL_2134;
          }
        case 2:
          if (!v2211[1])
            goto LABEL_2134;
          v1879 = 0;
          v1880 = ~(-1 << SBYTE6(v2207));
          v1881 = BYTE6(v2207) & 7;
          v1882 = ~(-1 << SBYTE8(v2207));
          v1883 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1884 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1885 = (unint64_t)BYTE6(v2207) >> 3;
          v1886 = *(double *)this;
          while (1)
          {
            v1887 = (*(_QWORD *)(v286 + ((unint64_t)(v1879 * v284) >> 3)) >> ((v1879 * v284) & 7)) & ~(-1 << v284);
            if ((_DWORD)v284 == 64)
              v1887 = *(_QWORD *)(v286 + ((unint64_t)(v1879 * v284) >> 3));
            v1888 = (_QWORD *)(v280 + v1887 * v278);
            v1889 = v1887 + v1879;
            while (1)
            {
              v1890 = *(_DWORD *)((char *)v1888 + v1885) >> v1881;
              if ((((*(double *)&a3[8 * (*v1888 & v1880)] >= *(float *)((char *)v1888 + v278 - 4)) ^ ((v1890 & 8) >> 3)) & 1) != 0)
                break;
              v1892 = v278;
              if ((v1890 & 1) != 0)
              {
                v1893 = ((*(_QWORD *)((char *)v1888 + v1884) >> v1883) & v1882) + v1889;
                goto LABEL_1908;
              }
LABEL_1905:
              v1888 = (_QWORD *)((char *)v1888 + v1892);
            }
            v1891 = (*(_QWORD *)((char *)v1888 + v1884) >> v1883) & v1882;
            if ((v1890 & 2) == 0)
              break;
            v1893 = v1889 + v1891 + (v1890 & 1);
LABEL_1908:
            v1886 = v1886 + *(float *)(v748 + 4 * v1893);
            *(double *)this = v1886;
            if (++v1879 == v285)
              goto LABEL_2134;
          }
          v1892 = v1891 * v278;
          goto LABEL_1905;
        case 3:
          if (!v2211[1])
            goto LABEL_2134;
          v2001 = 0;
          v2002 = ~(-1 << SBYTE6(v2207));
          v2003 = BYTE6(v2207) & 7;
          v2004 = ~(-1 << SBYTE8(v2207));
          v2005 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v2006 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v2007 = (unint64_t)BYTE6(v2207) >> 3;
          v2008 = *(double *)this;
          while (1)
          {
            v2009 = (*(_QWORD *)(v286 + ((unint64_t)(v2001 * v284) >> 3)) >> ((v2001 * v284) & 7)) & ~(-1 << v284);
            if ((_DWORD)v284 == 64)
              v2009 = *(_QWORD *)(v286 + ((unint64_t)(v2001 * v284) >> 3));
            v2010 = (_QWORD *)(v280 + v2009 * v278);
            v2011 = v2009 + v2001;
            while (1)
            {
              v2012 = *(_DWORD *)((char *)v2010 + v2007) >> v2003;
              if ((((*(double *)&a3[8 * (*v2010 & v2002)] < *(float *)((char *)v2010 + v278 - 4)) ^ ((v2012 & 8) >> 3)) & 1) != 0)
                break;
              v2014 = (*(_QWORD *)((char *)v2010 + v2006) >> v2005) & v2004;
              if ((v2012 & 2) != 0)
              {
                v2015 = v2011 + v2014 + (v2012 & 1);
                goto LABEL_2024;
              }
              v2013 = v2014 * v278;
LABEL_2022:
              v2010 = (_QWORD *)((char *)v2010 + v2013);
            }
            v2013 = v278;
            if ((v2012 & 1) == 0)
              goto LABEL_2022;
            v2015 = ((*(_QWORD *)((char *)v2010 + v2006) >> v2005) & v2004) + v2011;
LABEL_2024:
            v2008 = v2008 + *(float *)(v748 + 4 * v2015);
            *(double *)this = v2008;
            if (++v2001 == v285)
              goto LABEL_2134;
          }
        case 4:
          if (!v2211[1])
            goto LABEL_2134;
          v1646 = 0;
          v1647 = ~(-1 << SBYTE6(v2207));
          v1648 = BYTE6(v2207) & 7;
          v1649 = ~(-1 << SBYTE8(v2207));
          v1650 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1651 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1652 = (unint64_t)BYTE6(v2207) >> 3;
          v1653 = *(double *)this;
          break;
        default:
          goto LABEL_2134;
      }
LABEL_1656:
      v1654 = (*(_QWORD *)(v286 + ((unint64_t)(v1646 * v284) >> 3)) >> ((v1646 * v284) & 7)) & ~(-1 << v284);
      if ((_DWORD)v284 == 64)
        v1654 = *(_QWORD *)(v286 + ((unint64_t)(v1646 * v284) >> 3));
      v1655 = (_QWORD *)(v280 + v1654 * v278);
      v1656 = v1654 + v1646;
      while (1)
      {
        v1657 = *(_DWORD *)((char *)v1655 + v1652) >> v1648;
        v1658 = *(double *)&a3[8 * (*v1655 & v1647)];
        v1659 = *(float *)((char *)v1655 + v278 - 4);
        switch((v1657 >> 3) & 7)
        {
          case 0u:
            if (v1658 > v1659)
              goto LABEL_1663;
            goto LABEL_1672;
          case 1u:
            if (v1658 < v1659)
              goto LABEL_1672;
            goto LABEL_1663;
          case 2u:
            if (v1658 >= v1659)
              goto LABEL_1672;
            goto LABEL_1663;
          case 3u:
            if (v1658 > v1659)
              goto LABEL_1672;
            goto LABEL_1663;
          case 4u:
            if (v1658 != v1659)
              goto LABEL_1663;
            goto LABEL_1672;
          case 5u:
            if (v1658 != v1659)
              goto LABEL_1672;
LABEL_1663:
            v1660 = (*(_QWORD *)((char *)v1655 + v1651) >> v1650) & v1649;
            if ((v1657 & 2) != 0)
            {
              v1662 = v1656 + v1660 + (v1657 & 1);
LABEL_1676:
              v1653 = v1653 + *(float *)(v748 + 4 * v1662);
              *(double *)this = v1653;
              if (++v1646 == v285)
                goto LABEL_2134;
              goto LABEL_1656;
            }
            v1661 = v1660 * v278;
LABEL_1673:
            v1655 = (_QWORD *)((char *)v1655 + v1661);
            break;
          default:
LABEL_1672:
            v1661 = v278;
            if ((v1657 & 1) == 0)
              goto LABEL_1673;
            v1662 = ((*(_QWORD *)((char *)v1655 + v1651) >> v1650) & v1649) + v1656;
            goto LABEL_1676;
        }
      }
    case 8:
      v2213 = 0;
      v2214 = 0;
      memset(v2211, 0, sizeof(v2211));
      v2212 = (CoreML::Archiver::MMappedContentManager *)&v2213;
      HIDWORD(v2211[0]) = 64;
      v2218 = 0;
      v2219 = 0;
      v2215 = 0u;
      v2216 = 0u;
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      DWORD1(v2215) = 64;
      v2220 = 0u;
      v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      v2223 = 0;
      DWORD1(v2220) = 64;
      v2225 = 0;
      v2226 = 0;
      v2224 = 0;
      *(_OWORD *)__p = *(_OWORD *)a2;
      v93 = *((_QWORD *)a2 + 2);
      v187 = a2 + 3;
      v2205 = v93;
      v2206 = i3 + 3;
      v188 = (uint64_t)&i3[v93 + 3];
      v189 = *(_OWORD *)(v188 + 16);
      v2207 = *(_OWORD *)v188;
      v2208 = v189;
      v190 = WORD2(v2207);
      v191 = *(_QWORD *)(v188 + 32);
      v192 = v188 + 40;
      v2209 = v191 / WORD2(v2207);
      v2210 = (void *)(v188 + 40);
      if (v191 != v2209 * WORD2(v2207))
      {
        v2169 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v2169, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2169, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v193 = v192 + v191;
      v194 = 8 - (v193 & 7);
      if ((v193 & 7) == 0)
        v194 = 0;
      v195 = v193 + v194;
      v196 = *(unsigned int *)(v195 + 4);
      LODWORD(v2211[0]) = *(_DWORD *)v195;
      HIDWORD(v2211[0]) = v196;
      v197 = *(_OWORD *)(v195 + 8);
      *(_OWORD *)&v2211[1] = v197;
      v198 = v197;
      if ((_QWORD)v197)
      {
        v199 = v195 + 32;
        v2211[2] = *(_QWORD *)(v195 + 24);
        v2211[3] = v195 + 32;
        v200 = v195 + 32 + 8 * v2211[2];
      }
      else
      {
        v199 = 0;
        v200 = v195 + 24;
      }
      if ((v200 & 7) != 0)
        v200 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
      LODWORD(v2215) = *(_DWORD *)v200;
      v624 = *(unsigned int *)(v200 + 4);
      DWORD1(v2215) = *(_DWORD *)(v200 + 4);
      *((_QWORD *)&v2215 + 1) = *(_QWORD *)(v200 + 8);
      *(_QWORD *)&v2216 = *(_QWORD *)(v200 + 16);
      if (*((_QWORD *)&v2215 + 1))
      {
        v625 = v200 + 32;
        *(_QWORD *)&v2216 = *(_QWORD *)(v200 + 24);
        *((_QWORD *)&v2216 + 1) = v200 + 32;
        v626 = v200 + 32 + 8 * v2216;
      }
      else
      {
        v625 = 0;
        v626 = v200 + 24;
      }
      v627 = 8 - (v626 & 7);
      if ((v626 & 7) == 0)
        v627 = 0;
      v629 = v626 + v627 + 8;
      v628 = *(_QWORD *)(v626 + v627);
      v630 = v629 + 4 * v628;
      v2225 = v628;
      v2226 = v629;
      if ((v630 & 7) != 0)
        v631 = 8 - (v630 & 7);
      else
        v631 = 0;
      v632 = v630 + v631;
      v2220 = *(_OWORD *)v632;
      *(_QWORD *)&v2221 = *(_QWORD *)(v632 + 16);
      if (*((_QWORD *)&v2220 + 1))
      {
        *(_QWORD *)&v2221 = *(_QWORD *)(v632 + 24);
        *((_QWORD *)&v2221 + 1) = v632 + 32;
        v633 = v632 + 32 + 8 * v2221;
      }
      else
      {
        v633 = v632 + 24;
      }
      v634 = 8 - (v633 & 7);
      if ((v633 & 7) == 0)
        v634 = 0;
      v393 = *(_DWORD *)(v633 + v634);
      v2227 = v393;
      if (v93)
      {
        v635 = 8 * v93;
        v2185 = (CoreML::Archiver::MMappedContentManager *)v629;
        v636 = v625;
        v637 = v197;
        v638 = v192;
        v639 = v199;
        v640 = v93;
        v641 = v393;
        memmove(this, v187, v635);
        v393 = v641;
        v93 = v640;
        v199 = v639;
        v192 = v638;
        v198 = v637;
        v625 = v636;
        v629 = (uint64_t)v2185;
      }
      switch(BYTE13(v2207))
      {
        case 0:
          if (!v198)
            goto LABEL_1837;
          v642 = 0;
          v643 = ~(-1 << SBYTE6(v2207));
          v644 = BYTE6(v2207) & 7;
          v645 = ~(-1 << SBYTE8(v2207));
          v646 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v647 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v648 = (unint64_t)BYTE6(v2207) >> 3;
          while (1)
          {
            v649 = (*(_QWORD *)(v199 + ((unint64_t)(v642 * v196) >> 3)) >> ((v642 * v196) & 7)) & ~(-1 << v196);
            if ((_DWORD)v196 == 64)
              v649 = *(_QWORD *)(v199 + ((unint64_t)(v642 * v196) >> 3));
            v650 = (_QWORD *)(v192 + v649 * v190);
            v651 = v649 + v642;
            while (1)
            {
              v652 = *(_DWORD *)((char *)v650 + v648) >> v644;
              if ((((*(double *)&a3[8 * (*v650 & v643)] > *(float *)((char *)v650 + v190 - 4)) ^ ((v652 & 8) >> 3)) & 1) != 0)
                break;
              v654 = v190;
              if ((v652 & 1) != 0)
              {
                v655 = ((*(_QWORD *)((char *)v650 + v647) >> v646) & v645) + v651;
                goto LABEL_561;
              }
LABEL_558:
              v650 = (_QWORD *)((char *)v650 + v654);
            }
            v653 = (*(_QWORD *)((char *)v650 + v647) >> v646) & v645;
            if ((v652 & 2) == 0)
              break;
            v655 = v651 + v653 + (v652 & 1);
LABEL_561:
            v656 = (*(_QWORD *)(v625 + ((unint64_t)(v655 * v624) >> 3)) >> ((v655 * v624) & 7)) & ~(-1 << v624);
            if ((_DWORD)v624 == 64)
              v656 = *(_QWORD *)(v625 + ((unint64_t)(v655 * v624) >> 3));
            *((double *)this + v656) = *((double *)this + v656) + *(float *)(v629 + 4 * v655);
            if (++v642 == v198)
              goto LABEL_1837;
          }
          v654 = v653 * v190;
          goto LABEL_558;
        case 1:
          if (!v198)
            goto LABEL_1837;
          v1798 = 0;
          v1799 = ~(-1 << SBYTE6(v2207));
          v1800 = BYTE6(v2207) & 7;
          v1801 = ~(-1 << SBYTE8(v2207));
          v1802 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1803 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1804 = (unint64_t)BYTE6(v2207) >> 3;
          while (1)
          {
            v1805 = (*(_QWORD *)(v199 + ((unint64_t)(v1798 * v196) >> 3)) >> ((v1798 * v196) & 7)) & ~(-1 << v196);
            if ((_DWORD)v196 == 64)
              v1805 = *(_QWORD *)(v199 + ((unint64_t)(v1798 * v196) >> 3));
            v1806 = (_QWORD *)(v192 + v1805 * v190);
            v1807 = v1805 + v1798;
            while (1)
            {
              v1808 = *(_DWORD *)((char *)v1806 + v1804) >> v1800;
              if ((((*(double *)&a3[8 * (*v1806 & v1799)] <= *(float *)((char *)v1806 + v190 - 4)) ^ ((v1808 & 8) >> 3)) & 1) != 0)
                break;
              v1810 = (*(_QWORD *)((char *)v1806 + v1803) >> v1802) & v1801;
              if ((v1808 & 2) != 0)
              {
                v1811 = v1807 + v1810 + (v1808 & 1);
                goto LABEL_1834;
              }
              v1809 = v1810 * v190;
LABEL_1832:
              v1806 = (_QWORD *)((char *)v1806 + v1809);
            }
            v1809 = v190;
            if ((v1808 & 1) == 0)
              goto LABEL_1832;
            v1811 = ((*(_QWORD *)((char *)v1806 + v1803) >> v1802) & v1801) + v1807;
LABEL_1834:
            v1812 = (*(_QWORD *)(v625 + ((unint64_t)(v1811 * v624) >> 3)) >> ((v1811 * v624) & 7)) & ~(-1 << v624);
            if ((_DWORD)v624 == 64)
              v1812 = *(_QWORD *)(v625 + ((unint64_t)(v1811 * v624) >> 3));
            *((double *)this + v1812) = *((double *)this + v1812) + *(float *)(v629 + 4 * v1811);
            if (++v1798 == v198)
              goto LABEL_1837;
          }
        case 2:
          if (!v198)
            goto LABEL_1837;
          v1557 = 0;
          v1558 = ~(-1 << SBYTE6(v2207));
          v1559 = BYTE6(v2207) & 7;
          v1560 = ~(-1 << SBYTE8(v2207));
          v1561 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1562 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1563 = (unint64_t)BYTE6(v2207) >> 3;
          while (1)
          {
            v1564 = (*(_QWORD *)(v199 + ((unint64_t)(v1557 * v196) >> 3)) >> ((v1557 * v196) & 7)) & ~(-1 << v196);
            if ((_DWORD)v196 == 64)
              v1564 = *(_QWORD *)(v199 + ((unint64_t)(v1557 * v196) >> 3));
            v1565 = (_QWORD *)(v192 + v1564 * v190);
            v1566 = v1564 + v1557;
            while (1)
            {
              v1567 = *(_DWORD *)((char *)v1565 + v1563) >> v1559;
              if ((((*(double *)&a3[8 * (*v1565 & v1558)] >= *(float *)((char *)v1565 + v190 - 4)) ^ ((v1567 & 8) >> 3)) & 1) != 0)
                break;
              v1569 = v190;
              if ((v1567 & 1) != 0)
              {
                v1570 = ((*(_QWORD *)((char *)v1565 + v1562) >> v1561) & v1560) + v1566;
                goto LABEL_1562;
              }
LABEL_1559:
              v1565 = (_QWORD *)((char *)v1565 + v1569);
            }
            v1568 = (*(_QWORD *)((char *)v1565 + v1562) >> v1561) & v1560;
            if ((v1567 & 2) == 0)
              break;
            v1570 = v1566 + v1568 + (v1567 & 1);
LABEL_1562:
            v1571 = (*(_QWORD *)(v625 + ((unint64_t)(v1570 * v624) >> 3)) >> ((v1570 * v624) & 7)) & ~(-1 << v624);
            if ((_DWORD)v624 == 64)
              v1571 = *(_QWORD *)(v625 + ((unint64_t)(v1570 * v624) >> 3));
            *((double *)this + v1571) = *((double *)this + v1571) + *(float *)(v629 + 4 * v1570);
            if (++v1557 == v198)
              goto LABEL_1837;
          }
          v1569 = v1568 * v190;
          goto LABEL_1559;
        case 3:
          if (!v198)
            goto LABEL_1837;
          v1766 = 0;
          v1767 = ~(-1 << SBYTE6(v2207));
          v1768 = BYTE6(v2207) & 7;
          v1769 = ~(-1 << SBYTE8(v2207));
          v1770 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1771 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1772 = (unint64_t)BYTE6(v2207) >> 3;
          while (1)
          {
            v1773 = (*(_QWORD *)(v199 + ((unint64_t)(v1766 * v196) >> 3)) >> ((v1766 * v196) & 7)) & ~(-1 << v196);
            if ((_DWORD)v196 == 64)
              v1773 = *(_QWORD *)(v199 + ((unint64_t)(v1766 * v196) >> 3));
            v1774 = (_QWORD *)(v192 + v1773 * v190);
            v1775 = v1773 + v1766;
            while (1)
            {
              v1776 = *(_DWORD *)((char *)v1774 + v1772) >> v1768;
              if ((((*(double *)&a3[8 * (*v1774 & v1767)] < *(float *)((char *)v1774 + v190 - 4)) ^ ((v1776 & 8) >> 3)) & 1) != 0)
                break;
              v1778 = (*(_QWORD *)((char *)v1774 + v1771) >> v1770) & v1769;
              if ((v1776 & 2) != 0)
              {
                v1779 = v1775 + v1778 + (v1776 & 1);
                goto LABEL_1802;
              }
              v1777 = v1778 * v190;
LABEL_1800:
              v1774 = (_QWORD *)((char *)v1774 + v1777);
            }
            v1777 = v190;
            if ((v1776 & 1) == 0)
              goto LABEL_1800;
            v1779 = ((*(_QWORD *)((char *)v1774 + v1771) >> v1770) & v1769) + v1775;
LABEL_1802:
            v1780 = (*(_QWORD *)(v625 + ((unint64_t)(v1779 * v624) >> 3)) >> ((v1779 * v624) & 7)) & ~(-1 << v624);
            if ((_DWORD)v624 == 64)
              v1780 = *(_QWORD *)(v625 + ((unint64_t)(v1779 * v624) >> 3));
            *((double *)this + v1780) = *((double *)this + v1780) + *(float *)(v629 + 4 * v1779);
            if (++v1766 == v198)
              goto LABEL_1837;
          }
        case 4:
          if (!v198)
            goto LABEL_1837;
          v1326 = 0;
          v1327 = ~(-1 << SBYTE6(v2207));
          v1328 = BYTE6(v2207) & 7;
          v1329 = ~(-1 << SBYTE8(v2207));
          v1330 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1331 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1332 = (unint64_t)BYTE6(v2207) >> 3;
          break;
        default:
          goto LABEL_1837;
      }
LABEL_1322:
      v1333 = (*(_QWORD *)(v199 + ((unint64_t)(v1326 * v196) >> 3)) >> ((v1326 * v196) & 7)) & ~(-1 << v196);
      if ((_DWORD)v196 == 64)
        v1333 = *(_QWORD *)(v199 + ((unint64_t)(v1326 * v196) >> 3));
      v1334 = (_QWORD *)(v192 + v1333 * v190);
      v1335 = v1333 + v1326;
      while (1)
      {
        v1336 = *(_DWORD *)((char *)v1334 + v1332) >> v1328;
        v1337 = *(double *)&a3[8 * (*v1334 & v1327)];
        v1338 = *(float *)((char *)v1334 + v190 - 4);
        switch((v1336 >> 3) & 7)
        {
          case 0u:
            if (v1337 > v1338)
              goto LABEL_1329;
            goto LABEL_1338;
          case 1u:
            if (v1337 < v1338)
              goto LABEL_1338;
            goto LABEL_1329;
          case 2u:
            if (v1337 >= v1338)
              goto LABEL_1338;
            goto LABEL_1329;
          case 3u:
            if (v1337 > v1338)
              goto LABEL_1338;
            goto LABEL_1329;
          case 4u:
            if (v1337 != v1338)
              goto LABEL_1329;
            goto LABEL_1338;
          case 5u:
            if (v1337 != v1338)
              goto LABEL_1338;
LABEL_1329:
            v1339 = (*(_QWORD *)((char *)v1334 + v1331) >> v1330) & v1329;
            if ((v1336 & 2) != 0)
            {
              v1341 = v1335 + v1339 + (v1336 & 1);
LABEL_1342:
              v1342 = (*(_QWORD *)(v625 + ((unint64_t)(v1341 * v624) >> 3)) >> ((v1341 * v624) & 7)) & ~(-1 << v624);
              if ((_DWORD)v624 == 64)
                v1342 = *(_QWORD *)(v625 + ((unint64_t)(v1341 * v624) >> 3));
              *((double *)this + v1342) = *((double *)this + v1342) + *(float *)(v629 + 4 * v1341);
              if (++v1326 == v198)
                goto LABEL_1837;
              goto LABEL_1322;
            }
            v1340 = v1339 * v190;
LABEL_1339:
            v1334 = (_QWORD *)((char *)v1334 + v1340);
            break;
          default:
LABEL_1338:
            v1340 = v190;
            if ((v1336 & 1) == 0)
              goto LABEL_1339;
            v1341 = ((*(_QWORD *)((char *)v1334 + v1331) >> v1330) & v1329) + v1335;
            goto LABEL_1342;
        }
      }
    case 9:
      v2213 = 0;
      v2214 = 0;
      memset(v2211, 0, sizeof(v2211));
      v2212 = (CoreML::Archiver::MMappedContentManager *)&v2213;
      HIDWORD(v2211[0]) = 64;
      v2218 = 0;
      v2219 = 0;
      v2215 = 0u;
      v2216 = 0u;
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      DWORD1(v2215) = 64;
      v2220 = 0u;
      v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      v2223 = 0;
      DWORD1(v2220) = 64;
      v2225 = 0;
      v2226 = 0;
      v2224 = 0;
      *(_OWORD *)__p = *(_OWORD *)a2;
      v301 = *((_QWORD *)a2 + 2);
      v302 = a2 + 3;
      v2205 = v301;
      v2206 = i3 + 3;
      v303 = (uint64_t)&i3[v301 + 3];
      v304 = *(_OWORD *)(v303 + 16);
      v2207 = *(_OWORD *)v303;
      v2208 = v304;
      v305 = WORD2(v2207);
      v306 = *(_QWORD *)(v303 + 32);
      v307 = v303 + 40;
      v2209 = v306 / WORD2(v2207);
      v2210 = (void *)(v303 + 40);
      if (v306 != v2209 * WORD2(v2207))
      {
        v2175 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v2175, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2175, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v308 = v307 + v306;
      v309 = 8 - (v308 & 7);
      if ((v308 & 7) == 0)
        v309 = 0;
      v310 = v308 + v309;
      v311 = *(unsigned int *)(v310 + 4);
      LODWORD(v2211[0]) = *(_DWORD *)v310;
      HIDWORD(v2211[0]) = v311;
      v312 = *(_OWORD *)(v310 + 8);
      *(_OWORD *)&v2211[1] = v312;
      if ((_QWORD)v312)
      {
        v2211[2] = *(_QWORD *)(v310 + 24);
        v2211[3] = v310 + 32;
        v2195 = (CoreML::Archiver::MMappedContentManager *)(v310 + 32);
        v313 = v310 + 32 + 8 * v2211[2];
      }
      else
      {
        v2195 = 0;
        v313 = v310 + 24;
      }
      if ((v313 & 7) != 0)
        v313 = (v313 & 0xFFFFFFFFFFFFFFF8) + 8;
      LODWORD(v2215) = *(_DWORD *)v313;
      v793 = *(unsigned int *)(v313 + 4);
      DWORD1(v2215) = *(_DWORD *)(v313 + 4);
      *((_QWORD *)&v2215 + 1) = *(_QWORD *)(v313 + 8);
      *(_QWORD *)&v2216 = *(_QWORD *)(v313 + 16);
      if (*((_QWORD *)&v2215 + 1))
      {
        v794 = v313 + 32;
        *(_QWORD *)&v2216 = *(_QWORD *)(v313 + 24);
        *((_QWORD *)&v2216 + 1) = v313 + 32;
        v795 = v313 + 32 + 8 * v2216;
      }
      else
      {
        v794 = 0;
        v795 = v313 + 24;
      }
      v2180 = v312;
      if ((v795 & 7) != 0)
        v796 = 8 - (v795 & 7);
      else
        v796 = 0;
      v797 = v795 + v796 + 8 + 4 * *(_QWORD *)(v795 + v796);
      v2225 = *(_QWORD *)(v795 + v796);
      v2226 = v795 + v796 + 8;
      if ((v797 & 7) != 0)
        v798 = 8 - (v797 & 7);
      else
        v798 = 0;
      v799 = v797 + v798;
      LODWORD(v2220) = *(_DWORD *)v799;
      v800 = *(unsigned int *)(v799 + 4);
      DWORD1(v2220) = *(_DWORD *)(v799 + 4);
      *((_QWORD *)&v2220 + 1) = *(_QWORD *)(v799 + 8);
      *(_QWORD *)&v2221 = *(_QWORD *)(v799 + 16);
      v2178 = v307;
      if (*((_QWORD *)&v2220 + 1))
      {
        *(_QWORD *)&v2221 = *(_QWORD *)(v799 + 24);
        *((_QWORD *)&v2221 + 1) = v799 + 32;
        v801 = v799 + 32;
        v802 = v799 + 32 + 8 * v2221;
      }
      else
      {
        v801 = 0;
        v802 = v799 + 24;
      }
      v803 = 8 - (v802 & 7);
      if ((v802 & 7) == 0)
        v803 = 0;
      v2181 = *(_DWORD *)(v802 + v803);
      v2227 = v2181;
      v804 = (CoreML::Archiver::MMappedContentManager *)v301;
      if (v301)
      {
        v805 = v795;
        v806 = v796;
        memmove(this, v302, 8 * v301);
        v796 = v806;
        v795 = v805;
      }
      v2187 = v804;
      switch(BYTE13(v2207))
      {
        case 0:
          if (!v2180)
            goto LABEL_2161;
          v807 = 0;
          v808 = ~(-1 << SBYTE6(v2207));
          v809 = BYTE6(v2207) & 7;
          v810 = ~(-1 << SBYTE8(v2207));
          v811 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v812 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v813 = (unint64_t)BYTE6(v2207) >> 3;
          v814 = 1 << (BYTE11(v2207) - 1);
          v815 = ~(-1 << v793);
          v816 = ~v814;
          v817 = v796 + v795 + 8;
          while (1)
          {
            v818 = (*(_QWORD *)((char *)v2195 + ((unint64_t)(v807 * v311) >> 3)) >> ((v807 * v311) & 7)) & ~(-1 << v311);
            if ((_DWORD)v311 == 64)
              v818 = *(_QWORD *)((char *)v2195 + ((unint64_t)(v807 * v311) >> 3));
            v819 = (_QWORD *)(v2178 + v818 * v305);
            v820 = (*(_QWORD *)(v801 + ((unint64_t)(v807 * v800) >> 3)) >> ((v807 * v800) & 7)) & ~(-1 << v800);
            if ((_DWORD)v800 == 64)
              v820 = *(_QWORD *)(v801 + ((unint64_t)(v807 * v800) >> 3));
            while (1)
            {
              v821 = *(_DWORD *)((char *)v819 + v813) >> v809;
              if ((((*(double *)&a3[8 * (*v819 & v808)] > *(float *)((char *)v819 + v305 - 4)) ^ ((v821 & 8) >> 3)) & 1) != 0)
                break;
              v823 = v305;
              if ((v821 & 1) != 0)
              {
                v831 = ((*(_QWORD *)((char *)v819 + v812) >> v811) & v810) + v820;
                v832 = (float *)(v817 + 4 * v831);
                v833 = v793 * v831;
                do
                {
                  v834 = *(_QWORD *)(v794 + (v833 >> 3));
                  if ((_DWORD)v793 != 64)
                    v834 = (v834 >> (v833 & 7)) & v815;
                  v835 = *v832++;
                  *((double *)this + (v834 & v816)) = *((double *)this + (v834 & v816)) + v835;
                  v833 += v793;
                }
                while ((v834 & v814) == 0);
                goto LABEL_791;
              }
LABEL_776:
              v819 = (_QWORD *)((char *)v819 + v823);
            }
            v822 = (*(_QWORD *)((char *)v819 + v812) >> v811) & v810;
            if ((v821 & 2) == 0)
              break;
            v824 = v822 + v820;
            if ((v821 & 1) != 0)
            {
              v825 = v793 * v824;
              do
              {
                v826 = *(_QWORD *)(v794 + (v825 >> 3));
                if ((_DWORD)v793 != 64)
                  v826 = (v826 >> (v825 & 7)) & v815;
                ++v824;
                v825 += v793;
              }
              while ((v826 & v814) == 0);
            }
            v827 = (float *)(v817 + 4 * v824);
            v828 = v793 * v824;
            do
            {
              v829 = *(_QWORD *)(v794 + (v828 >> 3));
              if ((_DWORD)v793 != 64)
                v829 = (v829 >> (v828 & 7)) & v815;
              v830 = *v827++;
              *((double *)this + (v829 & v816)) = *((double *)this + (v829 & v816)) + v830;
              v828 += v793;
            }
            while ((v829 & v814) == 0);
LABEL_791:
            if (++v807 == v2180)
              goto LABEL_2161;
          }
          v823 = v822 * v305;
          goto LABEL_776;
        case 1:
          if (!v2180)
            goto LABEL_2161;
          v2130 = 0;
          v2131 = ~(-1 << SBYTE6(v2207));
          v2132 = BYTE6(v2207) & 7;
          v2133 = ~(-1 << SBYTE8(v2207));
          v2134 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v2135 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v2136 = (unint64_t)BYTE6(v2207) >> 3;
          v2137 = 1 << (BYTE11(v2207) - 1);
          v2138 = ~(-1 << v793);
          v2139 = ~v2137;
          v2140 = v796 + v795 + 8;
          while (1)
          {
            v2141 = (*(_QWORD *)((char *)v2195 + ((unint64_t)(v2130 * v311) >> 3)) >> ((v2130 * v311) & 7)) & ~(-1 << v311);
            if ((_DWORD)v311 == 64)
              v2141 = *(_QWORD *)((char *)v2195 + ((unint64_t)(v2130 * v311) >> 3));
            v2142 = (_QWORD *)(v2178 + v2141 * v305);
            v2143 = (*(_QWORD *)(v801 + ((unint64_t)(v2130 * v800) >> 3)) >> ((v2130 * v800) & 7)) & ~(-1 << v800);
            if ((_DWORD)v800 == 64)
              v2143 = *(_QWORD *)(v801 + ((unint64_t)(v2130 * v800) >> 3));
            while (1)
            {
              v2144 = *(_DWORD *)((char *)v2142 + v2136) >> v2132;
              if ((((*(double *)&a3[8 * (*v2142 & v2131)] <= *(float *)((char *)v2142 + v305 - 4)) ^ ((v2144 & 8) >> 3)) & 1) != 0)
                break;
              v2146 = (*(_QWORD *)((char *)v2142 + v2135) >> v2134) & v2133;
              if ((v2144 & 2) != 0)
              {
                v2152 = v2146 + v2143;
                if ((v2144 & 1) != 0)
                {
                  v2153 = v793 * v2152;
                  do
                  {
                    v2154 = *(_QWORD *)(v794 + (v2153 >> 3));
                    if ((_DWORD)v793 != 64)
                      v2154 = (v2154 >> (v2153 & 7)) & v2138;
                    ++v2152;
                    v2153 += v793;
                  }
                  while ((v2154 & v2137) == 0);
                }
                v2155 = (float *)(v2140 + 4 * v2152);
                v2156 = v793 * v2152;
                do
                {
                  v2157 = *(_QWORD *)(v794 + (v2156 >> 3));
                  if ((_DWORD)v793 != 64)
                    v2157 = (v2157 >> (v2156 & 7)) & v2138;
                  v2158 = *v2155++;
                  *((double *)this + (v2157 & v2139)) = *((double *)this + (v2157 & v2139)) + v2158;
                  v2156 += v793;
                }
                while ((v2157 & v2137) == 0);
                goto LABEL_2160;
              }
              v2145 = v2146 * v305;
LABEL_2146:
              v2142 = (_QWORD *)((char *)v2142 + v2145);
            }
            v2145 = v305;
            if ((v2144 & 1) == 0)
              goto LABEL_2146;
            v2147 = ((*(_QWORD *)((char *)v2142 + v2135) >> v2134) & v2133) + v2143;
            v2148 = (float *)(v2140 + 4 * v2147);
            v2149 = v793 * v2147;
            do
            {
              v2150 = *(_QWORD *)(v794 + (v2149 >> 3));
              if ((_DWORD)v793 != 64)
                v2150 = (v2150 >> (v2149 & 7)) & v2138;
              v2151 = *v2148++;
              *((double *)this + (v2150 & v2139)) = *((double *)this + (v2150 & v2139)) + v2151;
              v2149 += v793;
            }
            while ((v2150 & v2137) == 0);
LABEL_2160:
            if (++v2130 == v2180)
              goto LABEL_2161;
          }
        case 2:
          if (!v2180)
            goto LABEL_2161;
          v1909 = 0;
          v1910 = ~(-1 << SBYTE6(v2207));
          v1911 = BYTE6(v2207) & 7;
          v1912 = ~(-1 << SBYTE8(v2207));
          v1913 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1914 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1915 = (unint64_t)BYTE6(v2207) >> 3;
          v1916 = 1 << (BYTE11(v2207) - 1);
          v1917 = ~(-1 << v793);
          v1918 = ~v1916;
          v1919 = v796 + v795 + 8;
          while (1)
          {
            v1920 = (*(_QWORD *)((char *)v2195 + ((unint64_t)(v1909 * v311) >> 3)) >> ((v1909 * v311) & 7)) & ~(-1 << v311);
            if ((_DWORD)v311 == 64)
              v1920 = *(_QWORD *)((char *)v2195 + ((unint64_t)(v1909 * v311) >> 3));
            v1921 = (_QWORD *)(v2178 + v1920 * v305);
            v1922 = (*(_QWORD *)(v801 + ((unint64_t)(v1909 * v800) >> 3)) >> ((v1909 * v800) & 7)) & ~(-1 << v800);
            if ((_DWORD)v800 == 64)
              v1922 = *(_QWORD *)(v801 + ((unint64_t)(v1909 * v800) >> 3));
            while (1)
            {
              v1923 = *(_DWORD *)((char *)v1921 + v1915) >> v1911;
              if ((((*(double *)&a3[8 * (*v1921 & v1910)] >= *(float *)((char *)v1921 + v305 - 4)) ^ ((v1923 & 8) >> 3)) & 1) != 0)
                break;
              v1925 = v305;
              if ((v1923 & 1) != 0)
              {
                v1933 = ((*(_QWORD *)((char *)v1921 + v1914) >> v1913) & v1912) + v1922;
                v1934 = (float *)(v1919 + 4 * v1933);
                v1935 = v793 * v1933;
                do
                {
                  v1936 = *(_QWORD *)(v794 + (v1935 >> 3));
                  if ((_DWORD)v793 != 64)
                    v1936 = (v1936 >> (v1935 & 7)) & v1917;
                  v1937 = *v1934++;
                  *((double *)this + (v1936 & v1918)) = *((double *)this + (v1936 & v1918)) + v1937;
                  v1935 += v793;
                }
                while ((v1936 & v1916) == 0);
                goto LABEL_1949;
              }
LABEL_1934:
              v1921 = (_QWORD *)((char *)v1921 + v1925);
            }
            v1924 = (*(_QWORD *)((char *)v1921 + v1914) >> v1913) & v1912;
            if ((v1923 & 2) == 0)
              break;
            v1926 = v1924 + v1922;
            if ((v1923 & 1) != 0)
            {
              v1927 = v793 * v1926;
              do
              {
                v1928 = *(_QWORD *)(v794 + (v1927 >> 3));
                if ((_DWORD)v793 != 64)
                  v1928 = (v1928 >> (v1927 & 7)) & v1917;
                ++v1926;
                v1927 += v793;
              }
              while ((v1928 & v1916) == 0);
            }
            v1929 = (float *)(v1919 + 4 * v1926);
            v1930 = v793 * v1926;
            do
            {
              v1931 = *(_QWORD *)(v794 + (v1930 >> 3));
              if ((_DWORD)v793 != 64)
                v1931 = (v1931 >> (v1930 & 7)) & v1917;
              v1932 = *v1929++;
              *((double *)this + (v1931 & v1918)) = *((double *)this + (v1931 & v1918)) + v1932;
              v1930 += v793;
            }
            while ((v1931 & v1916) == 0);
LABEL_1949:
            if (++v1909 == v2180)
              goto LABEL_2161;
          }
          v1925 = v1924 * v305;
          goto LABEL_1934;
        case 3:
          if (!v2180)
            goto LABEL_2161;
          v2051 = 0;
          v2052 = ~(-1 << SBYTE6(v2207));
          v2053 = BYTE6(v2207) & 7;
          v2054 = ~(-1 << SBYTE8(v2207));
          v2055 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v2056 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v2057 = (unint64_t)BYTE6(v2207) >> 3;
          v2058 = 1 << (BYTE11(v2207) - 1);
          v2059 = ~(-1 << v793);
          v2060 = ~v2058;
          v2061 = v796 + v795 + 8;
          while (1)
          {
            v2062 = (*(_QWORD *)((char *)v2195 + ((unint64_t)(v2051 * v311) >> 3)) >> ((v2051 * v311) & 7)) & ~(-1 << v311);
            if ((_DWORD)v311 == 64)
              v2062 = *(_QWORD *)((char *)v2195 + ((unint64_t)(v2051 * v311) >> 3));
            v2063 = (_QWORD *)(v2178 + v2062 * v305);
            v2064 = (*(_QWORD *)(v801 + ((unint64_t)(v2051 * v800) >> 3)) >> ((v2051 * v800) & 7)) & ~(-1 << v800);
            if ((_DWORD)v800 == 64)
              v2064 = *(_QWORD *)(v801 + ((unint64_t)(v2051 * v800) >> 3));
            while (1)
            {
              v2065 = *(_DWORD *)((char *)v2063 + v2057) >> v2053;
              if ((((*(double *)&a3[8 * (*v2063 & v2052)] < *(float *)((char *)v2063 + v305 - 4)) ^ ((v2065 & 8) >> 3)) & 1) != 0)
                break;
              v2067 = (*(_QWORD *)((char *)v2063 + v2056) >> v2055) & v2054;
              if ((v2065 & 2) != 0)
              {
                v2073 = v2067 + v2064;
                if ((v2065 & 1) != 0)
                {
                  v2074 = v793 * v2073;
                  do
                  {
                    v2075 = *(_QWORD *)(v794 + (v2074 >> 3));
                    if ((_DWORD)v793 != 64)
                      v2075 = (v2075 >> (v2074 & 7)) & v2059;
                    ++v2073;
                    v2074 += v793;
                  }
                  while ((v2075 & v2058) == 0);
                }
                v2076 = (float *)(v2061 + 4 * v2073);
                v2077 = v793 * v2073;
                do
                {
                  v2078 = *(_QWORD *)(v794 + (v2077 >> 3));
                  if ((_DWORD)v793 != 64)
                    v2078 = (v2078 >> (v2077 & 7)) & v2059;
                  v2079 = *v2076++;
                  *((double *)this + (v2078 & v2060)) = *((double *)this + (v2078 & v2060)) + v2079;
                  v2077 += v793;
                }
                while ((v2078 & v2058) == 0);
                goto LABEL_2085;
              }
              v2066 = v2067 * v305;
LABEL_2071:
              v2063 = (_QWORD *)((char *)v2063 + v2066);
            }
            v2066 = v305;
            if ((v2065 & 1) == 0)
              goto LABEL_2071;
            v2068 = ((*(_QWORD *)((char *)v2063 + v2056) >> v2055) & v2054) + v2064;
            v2069 = (float *)(v2061 + 4 * v2068);
            v2070 = v793 * v2068;
            do
            {
              v2071 = *(_QWORD *)(v794 + (v2070 >> 3));
              if ((_DWORD)v793 != 64)
                v2071 = (v2071 >> (v2070 & 7)) & v2059;
              v2072 = *v2069++;
              *((double *)this + (v2071 & v2060)) = *((double *)this + (v2071 & v2060)) + v2072;
              v2070 += v793;
            }
            while ((v2071 & v2058) == 0);
LABEL_2085:
            if (++v2051 == v2180)
              goto LABEL_2161;
          }
        case 4:
          if (!v2180)
            goto LABEL_2161;
          v1680 = 0;
          v1681 = ~(-1 << SBYTE6(v2207));
          v1682 = BYTE6(v2207) & 7;
          v1683 = ~(-1 << SBYTE8(v2207));
          v1684 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1685 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1686 = (unint64_t)BYTE6(v2207) >> 3;
          v1687 = 1 << (BYTE11(v2207) - 1);
          v1688 = ~(-1 << v793);
          v1689 = ~v1687;
          v1690 = v796 + v795 + 8;
          break;
        default:
          goto LABEL_2161;
      }
LABEL_1704:
      v1691 = (*(_QWORD *)((char *)v2195 + ((unint64_t)(v1680 * v311) >> 3)) >> ((v1680 * v311) & 7)) & ~(-1 << v311);
      if ((_DWORD)v311 == 64)
        v1691 = *(_QWORD *)((char *)v2195 + ((unint64_t)(v1680 * v311) >> 3));
      v1692 = (_QWORD *)(v2178 + v1691 * v305);
      v1693 = (*(_QWORD *)(v801 + ((unint64_t)(v1680 * v800) >> 3)) >> ((v1680 * v800) & 7)) & ~(-1 << v800);
      if ((_DWORD)v800 == 64)
        v1693 = *(_QWORD *)(v801 + ((unint64_t)(v1680 * v800) >> 3));
      while (1)
      {
        v1694 = *(_DWORD *)((char *)v1692 + v1686) >> v1682;
        v1695 = *(double *)&a3[8 * (*v1692 & v1681)];
        v1696 = *(float *)((char *)v1692 + v305 - 4);
        switch((v1694 >> 3) & 7)
        {
          case 0u:
            if (v1695 > v1696)
              goto LABEL_1712;
            goto LABEL_1721;
          case 1u:
            if (v1695 < v1696)
              goto LABEL_1721;
            goto LABEL_1712;
          case 2u:
            if (v1695 >= v1696)
              goto LABEL_1721;
            goto LABEL_1712;
          case 3u:
            if (v1695 > v1696)
              goto LABEL_1721;
            goto LABEL_1712;
          case 4u:
            if (v1695 != v1696)
              goto LABEL_1712;
            goto LABEL_1721;
          case 5u:
            if (v1695 != v1696)
              goto LABEL_1721;
LABEL_1712:
            v1697 = (*(_QWORD *)((char *)v1692 + v1685) >> v1684) & v1683;
            if ((v1694 & 2) != 0)
            {
              v1704 = v1697 + v1693;
              if ((v1694 & 1) != 0)
              {
                v1705 = v793 * v1704;
                do
                {
                  v1706 = *(_QWORD *)(v794 + (v1705 >> 3));
                  if ((_DWORD)v793 != 64)
                    v1706 = (v1706 >> (v1705 & 7)) & v1688;
                  ++v1704;
                  v1705 += v793;
                }
                while ((v1706 & v1687) == 0);
              }
              v1707 = (float *)(v1690 + 4 * v1704);
              v1708 = v793 * v1704;
              do
              {
                v1709 = *(_QWORD *)(v794 + (v1708 >> 3));
                if ((_DWORD)v793 != 64)
                  v1709 = (v1709 >> (v1708 & 7)) & v1688;
                v1710 = *v1707++;
                *((double *)this + (v1709 & v1689)) = *((double *)this + (v1709 & v1689)) + v1710;
                v1708 += v793;
              }
              while ((v1709 & v1687) == 0);
LABEL_1737:
              if (++v1680 == v2180)
                goto LABEL_2161;
              goto LABEL_1704;
            }
            v1698 = v1697 * v305;
LABEL_1722:
            v1692 = (_QWORD *)((char *)v1692 + v1698);
            break;
          default:
LABEL_1721:
            v1698 = v305;
            if ((v1694 & 1) == 0)
              goto LABEL_1722;
            v1699 = ((*(_QWORD *)((char *)v1692 + v1685) >> v1684) & v1683) + v1693;
            v1700 = (float *)(v1690 + 4 * v1699);
            v1701 = v793 * v1699;
            do
            {
              v1702 = *(_QWORD *)(v794 + (v1701 >> 3));
              if ((_DWORD)v793 != 64)
                v1702 = (v1702 >> (v1701 & 7)) & v1688;
              v1703 = *v1700++;
              *((double *)this + (v1702 & v1689)) = *((double *)this + (v1702 & v1689)) + v1703;
              v1701 += v793;
            }
            while ((v1702 & v1687) == 0);
            goto LABEL_1737;
        }
      }
    case 0xA:
      v2213 = 0;
      v2214 = 0;
      memset(v2211, 0, sizeof(v2211));
      v2212 = (CoreML::Archiver::MMappedContentManager *)&v2213;
      HIDWORD(v2211[0]) = 64;
      v2218 = 0;
      v2219 = 0;
      v2215 = 0u;
      v2216 = 0u;
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      DWORD1(v2215) = 64;
      v2220 = 0u;
      v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      v2223 = 0;
      DWORD1(v2220) = 64;
      v2225 = 0;
      v2226 = 0;
      v2224 = 0;
      *(_OWORD *)__p = *(_OWORD *)a2;
      v132 = *((_QWORD *)a2 + 2);
      v133 = a2 + 3;
      v2205 = v132;
      v2206 = i3 + 3;
      v134 = (uint64_t)&i3[v132 + 3];
      v135 = *(_OWORD *)(v134 + 16);
      v2207 = *(_OWORD *)v134;
      v2208 = v135;
      v136 = WORD2(v2207);
      v137 = *(_QWORD *)(v134 + 32);
      v138 = v134 + 40;
      v2209 = v137 / WORD2(v2207);
      v2210 = (void *)(v134 + 40);
      if (v137 != v2209 * WORD2(v2207))
      {
        v2165 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v2165, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2165, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v139 = v138 + v137;
      v140 = 8 - (v139 & 7);
      if ((v139 & 7) == 0)
        v140 = 0;
      v141 = v139 + v140;
      v142 = *(unsigned int *)(v141 + 4);
      LODWORD(v2211[0]) = *(_DWORD *)v141;
      HIDWORD(v2211[0]) = v142;
      *(_OWORD *)&v2211[1] = *(_OWORD *)(v141 + 8);
      v143 = v2211[1];
      if (v2211[1])
      {
        v144 = v141 + 32;
        v2211[2] = *(_QWORD *)(v141 + 24);
        v2211[3] = v141 + 32;
        v145 = v141 + 32 + 8 * v2211[2];
      }
      else
      {
        v144 = 0;
        v145 = v141 + 24;
      }
      if ((v145 & 7) != 0)
        v145 = (v145 & 0xFFFFFFFFFFFFFFF8) + 8;
      v2215 = *(_OWORD *)v145;
      *(_QWORD *)&v2216 = *(_QWORD *)(v145 + 16);
      if (*((_QWORD *)&v2215 + 1))
      {
        *(_QWORD *)&v2216 = *(_QWORD *)(v145 + 24);
        *((_QWORD *)&v2216 + 1) = v145 + 32;
        v500 = v145 + 32 + 8 * v2216;
      }
      else
      {
        v500 = v145 + 24;
      }
      if ((v500 & 7) != 0)
        v501 = 8 - (v500 & 7);
      else
        v501 = 0;
      v502 = v500 + v501 + 8 + 4 * *(_QWORD *)(v500 + v501);
      v2225 = *(_QWORD *)(v500 + v501);
      v2226 = v500 + v501 + 8;
      if ((v502 & 7) != 0)
        v503 = 8 - (v502 & 7);
      else
        v503 = 0;
      v504 = v502 + v503;
      v2220 = *(_OWORD *)v504;
      *(_QWORD *)&v2221 = *(_QWORD *)(v504 + 16);
      if (*((_QWORD *)&v2220 + 1))
      {
        *(_QWORD *)&v2221 = *(_QWORD *)(v504 + 24);
        *((_QWORD *)&v2221 + 1) = v504 + 32;
        v505 = v504 + 32 + 8 * v2221;
      }
      else
      {
        v505 = v504 + 24;
      }
      v506 = 8 - (v505 & 7);
      if ((v505 & 7) == 0)
        v506 = 0;
      v507 = *(_DWORD *)(v505 + v506);
      v2227 = v507;
      if (v132)
        memmove(this, v133, 8 * v132);
      switch(BYTE13(v2207))
      {
        case 0:
          if (!v2211[1])
            goto LABEL_1970;
          v508 = 0;
          v509 = ~(-1 << SBYTE6(v2207));
          v510 = BYTE6(v2207) & 7;
          v511 = ~(-1 << SBYTE8(v2207));
          v512 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v513 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v514 = (unint64_t)BYTE6(v2207) >> 3;
          v515 = *((_QWORD *)&v2208 + 1);
          v516 = v501 + v500 + 8;
          v517 = 4 * *((_QWORD *)&v2208 + 1);
          while (1)
          {
            v518 = (*(_QWORD *)(v144 + ((unint64_t)(v508 * v142) >> 3)) >> ((v508 * v142) & 7)) & ~(-1 << v142);
            if ((_DWORD)v142 == 64)
              v518 = *(_QWORD *)(v144 + ((unint64_t)(v508 * v142) >> 3));
            for (n = (_QWORD *)(v138 + v518 * v136); ; n = (_QWORD *)((char *)n + v522))
            {
              v520 = *(_DWORD *)((char *)n + v514) >> v510;
              if ((((*(double *)&a3[8 * (*n & v509)] > *(float *)((char *)n + v136 - 4)) ^ ((v520 & 8) >> 3)) & 1) == 0)
                break;
              v521 = (*(_QWORD *)((char *)n + v513) >> v512) & v511;
              if ((v520 & 2) != 0)
              {
                if (v515)
                {
                  v523 = (float *)(v516 + v517 * (v518 + v508 + v521 + (v520 & 1)));
                  v524 = (double *)this;
                  v525 = v515;
                  do
                  {
                    v526 = *v523++;
                    *v524 = *v524 + v526;
                    ++v524;
                    --v525;
                  }
                  while (v525);
                }
                goto LABEL_425;
              }
              v522 = v521 * v136;
LABEL_417:
              ;
            }
            v522 = v136;
            if ((v520 & 1) == 0)
              goto LABEL_417;
            if (v515)
            {
              v527 = (float *)(v516 + v517 * (v518 + ((*(_QWORD *)((char *)n + v513) >> v512) & v511) + v508));
              v528 = (double *)this;
              v529 = v515;
              do
              {
                v530 = *v527++;
                *v528 = *v528 + v530;
                ++v528;
                --v529;
              }
              while (v529);
            }
LABEL_425:
            if (++v508 == v143)
            {
LABEL_1970:
              v1813 = (double *)this;
              v1814 = v507;
              v1815 = v132;
              goto LABEL_1971;
            }
          }
        case 1:
          if (!v2211[1])
            goto LABEL_1970;
          v1502 = 0;
          v1503 = ~(-1 << SBYTE6(v2207));
          v1504 = BYTE6(v2207) & 7;
          v1505 = ~(-1 << SBYTE8(v2207));
          v1506 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1507 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1508 = (unint64_t)BYTE6(v2207) >> 3;
          v1509 = *((_QWORD *)&v2208 + 1);
          v1510 = v501 + v500 + 8;
          v1511 = 4 * *((_QWORD *)&v2208 + 1);
          while (1)
          {
            v1512 = (*(_QWORD *)(v144 + ((unint64_t)(v1502 * v142) >> 3)) >> ((v1502 * v142) & 7)) & ~(-1 << v142);
            if ((_DWORD)v142 == 64)
              v1512 = *(_QWORD *)(v144 + ((unint64_t)(v1502 * v142) >> 3));
            for (ii = (_QWORD *)(v138 + v1512 * v136); ; ii = (_QWORD *)((char *)ii + v1515))
            {
              v1514 = *(_DWORD *)((char *)ii + v1508) >> v1504;
              if ((((*(double *)&a3[8 * (*ii & v1503)] <= *(float *)((char *)ii + v136 - 4)) ^ ((v1514 & 8) >> 3)) & 1) != 0)
                break;
              v1516 = (*(_QWORD *)((char *)ii + v1507) >> v1506) & v1505;
              if ((v1514 & 2) != 0)
              {
                if (v1509)
                {
                  v1521 = (float *)(v1510 + v1511 * (v1512 + v1502 + v1516 + (v1514 & 1)));
                  v1522 = (double *)this;
                  v1523 = v1509;
                  do
                  {
                    v1524 = *v1521++;
                    *v1522 = *v1522 + v1524;
                    ++v1522;
                    --v1523;
                  }
                  while (v1523);
                }
                goto LABEL_1518;
              }
              v1515 = v1516 * v136;
LABEL_1510:
              ;
            }
            v1515 = v136;
            if ((v1514 & 1) == 0)
              goto LABEL_1510;
            if (v1509)
            {
              v1517 = (float *)(v1510 + v1511 * (v1512 + ((*(_QWORD *)((char *)ii + v1507) >> v1506) & v1505) + v1502));
              v1518 = (double *)this;
              v1519 = v1509;
              do
              {
                v1520 = *v1517++;
                *v1518 = *v1518 + v1520;
                ++v1518;
                --v1519;
              }
              while (v1519);
            }
LABEL_1518:
            if (++v1502 == v143)
              goto LABEL_1970;
          }
        case 2:
          if (!v2211[1])
            goto LABEL_1970;
          v1257 = 0;
          v1258 = ~(-1 << SBYTE6(v2207));
          v1259 = BYTE6(v2207) & 7;
          v1260 = ~(-1 << SBYTE8(v2207));
          v1261 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1262 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1263 = (unint64_t)BYTE6(v2207) >> 3;
          v1264 = *((_QWORD *)&v2208 + 1);
          v1265 = v501 + v500 + 8;
          v1266 = 4 * *((_QWORD *)&v2208 + 1);
          while (1)
          {
            v1267 = (*(_QWORD *)(v144 + ((unint64_t)(v1257 * v142) >> 3)) >> ((v1257 * v142) & 7)) & ~(-1 << v142);
            if ((_DWORD)v142 == 64)
              v1267 = *(_QWORD *)(v144 + ((unint64_t)(v1257 * v142) >> 3));
            for (jj = (_QWORD *)(v138 + v1267 * v136); ; jj = (_QWORD *)((char *)jj + v1271))
            {
              v1269 = *(_DWORD *)((char *)jj + v1263) >> v1259;
              if ((((*(double *)&a3[8 * (*jj & v1258)] >= *(float *)((char *)jj + v136 - 4)) ^ ((v1269 & 8) >> 3)) & 1) != 0)
                break;
              v1271 = v136;
              if ((v1269 & 1) != 0)
              {
                if (v1264)
                {
                  v1276 = (float *)(v1265
                                  + v1266 * (v1267 + ((*(_QWORD *)((char *)jj + v1262) >> v1261) & v1260) + v1257));
                  v1277 = (double *)this;
                  v1278 = v1264;
                  do
                  {
                    v1279 = *v1276++;
                    *v1277 = *v1277 + v1279;
                    ++v1277;
                    --v1278;
                  }
                  while (v1278);
                }
                goto LABEL_1267;
              }
LABEL_1259:
              ;
            }
            v1270 = (*(_QWORD *)((char *)jj + v1262) >> v1261) & v1260;
            if ((v1269 & 2) == 0)
              break;
            if (v1264)
            {
              v1272 = (float *)(v1265 + v1266 * (v1267 + v1257 + v1270 + (v1269 & 1)));
              v1273 = (double *)this;
              v1274 = v1264;
              do
              {
                v1275 = *v1272++;
                *v1273 = *v1273 + v1275;
                ++v1273;
                --v1274;
              }
              while (v1274);
            }
LABEL_1267:
            if (++v1257 == v143)
              goto LABEL_1970;
          }
          v1271 = v1270 * v136;
          goto LABEL_1259;
        case 3:
          if (!v2211[1])
            goto LABEL_1970;
          v1412 = 0;
          v1413 = ~(-1 << SBYTE6(v2207));
          v1414 = BYTE6(v2207) & 7;
          v1415 = ~(-1 << SBYTE8(v2207));
          v1416 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1417 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1418 = (unint64_t)BYTE6(v2207) >> 3;
          v1419 = *((_QWORD *)&v2208 + 1);
          v1420 = v501 + v500 + 8;
          v1421 = 4 * *((_QWORD *)&v2208 + 1);
          while (1)
          {
            v1422 = (*(_QWORD *)(v144 + ((unint64_t)(v1412 * v142) >> 3)) >> ((v1412 * v142) & 7)) & ~(-1 << v142);
            if ((_DWORD)v142 == 64)
              v1422 = *(_QWORD *)(v144 + ((unint64_t)(v1412 * v142) >> 3));
            for (kk = (_QWORD *)(v138 + v1422 * v136); ; kk = (_QWORD *)((char *)kk + v1425))
            {
              v1424 = *(_DWORD *)((char *)kk + v1418) >> v1414;
              if ((((*(double *)&a3[8 * (*kk & v1413)] < *(float *)((char *)kk + v136 - 4)) ^ ((v1424 & 8) >> 3)) & 1) != 0)
                break;
              v1426 = (*(_QWORD *)((char *)kk + v1417) >> v1416) & v1415;
              if ((v1424 & 2) != 0)
              {
                if (v1419)
                {
                  v1431 = (float *)(v1420 + v1421 * (v1422 + v1412 + v1426 + (v1424 & 1)));
                  v1432 = (double *)this;
                  v1433 = v1419;
                  do
                  {
                    v1434 = *v1431++;
                    *v1432 = *v1432 + v1434;
                    ++v1432;
                    --v1433;
                  }
                  while (v1433);
                }
                goto LABEL_1428;
              }
              v1425 = v1426 * v136;
LABEL_1420:
              ;
            }
            v1425 = v136;
            if ((v1424 & 1) == 0)
              goto LABEL_1420;
            if (v1419)
            {
              v1427 = (float *)(v1420 + v1421 * (v1422 + ((*(_QWORD *)((char *)kk + v1417) >> v1416) & v1415) + v1412));
              v1428 = (double *)this;
              v1429 = v1419;
              do
              {
                v1430 = *v1427++;
                *v1428 = *v1428 + v1430;
                ++v1428;
                --v1429;
              }
              while (v1429);
            }
LABEL_1428:
            if (++v1412 == v143)
              goto LABEL_1970;
          }
        case 4:
          if (!v2211[1])
            goto LABEL_1970;
          v1110 = 0;
          v1111 = ~(-1 << SBYTE6(v2207));
          v1112 = BYTE6(v2207) & 7;
          v1113 = ~(-1 << SBYTE8(v2207));
          v1114 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1115 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1116 = (unint64_t)BYTE6(v2207) >> 3;
          v1117 = *((_QWORD *)&v2208 + 1);
          v1118 = v501 + v500 + 8;
          v1119 = 4 * *((_QWORD *)&v2208 + 1);
          break;
        default:
          goto LABEL_1970;
      }
LABEL_1091:
      v1120 = (*(_QWORD *)(v144 + ((unint64_t)(v1110 * v142) >> 3)) >> ((v1110 * v142) & 7)) & ~(-1 << v142);
      if ((_DWORD)v142 == 64)
        v1120 = *(_QWORD *)(v144 + ((unint64_t)(v1110 * v142) >> 3));
      v1121 = (_QWORD *)(v138 + v1120 * v136);
      while (1)
      {
        v1122 = *(_DWORD *)((char *)v1121 + v1116) >> v1112;
        v1123 = *(double *)&a3[8 * (*v1121 & v1111)];
        v1124 = *(float *)((char *)v1121 + v136 - 4);
        switch((v1122 >> 3) & 7)
        {
          case 0u:
            if (v1123 > v1124)
              goto LABEL_1098;
            goto LABEL_1107;
          case 1u:
            if (v1123 < v1124)
              goto LABEL_1107;
            goto LABEL_1098;
          case 2u:
            if (v1123 >= v1124)
              goto LABEL_1107;
            goto LABEL_1098;
          case 3u:
            if (v1123 > v1124)
              goto LABEL_1107;
            goto LABEL_1098;
          case 4u:
            if (v1123 != v1124)
              goto LABEL_1098;
            goto LABEL_1107;
          case 5u:
            if (v1123 != v1124)
              goto LABEL_1107;
LABEL_1098:
            v1125 = (*(_QWORD *)((char *)v1121 + v1115) >> v1114) & v1113;
            if ((v1122 & 2) != 0)
            {
              if (v1117)
              {
                v1131 = (float *)(v1118 + v1119 * (v1120 + v1110 + v1125 + (v1122 & 1)));
                v1132 = (double *)this;
                v1133 = v1117;
                do
                {
                  v1134 = *v1131++;
                  *v1132 = *v1132 + v1134;
                  ++v1132;
                  --v1133;
                }
                while (v1133);
              }
LABEL_1116:
              if (++v1110 == v143)
                goto LABEL_1970;
              goto LABEL_1091;
            }
            v1126 = v1125 * v136;
LABEL_1108:
            v1121 = (_QWORD *)((char *)v1121 + v1126);
            break;
          default:
LABEL_1107:
            v1126 = v136;
            if ((v1122 & 1) == 0)
              goto LABEL_1108;
            if (v1117)
            {
              v1127 = (float *)(v1118 + v1119
                                      * (v1120 + ((*(_QWORD *)((char *)v1121 + v1115) >> v1114) & v1113) + v1110));
              v1128 = (double *)this;
              v1129 = v1117;
              do
              {
                v1130 = *v1127++;
                *v1128 = *v1128 + v1130;
                ++v1128;
                --v1129;
              }
              while (v1129);
            }
            goto LABEL_1116;
        }
      }
    case 0xB:
      v2213 = 0;
      v2214 = 0;
      memset(v2211, 0, sizeof(v2211));
      v2212 = (CoreML::Archiver::MMappedContentManager *)&v2213;
      HIDWORD(v2211[0]) = 64;
      v2218 = 0;
      v2219 = 0;
      v2215 = 0u;
      v2216 = 0u;
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      DWORD1(v2215) = 64;
      v2220 = 0u;
      v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      v2223 = 0;
      DWORD1(v2220) = 64;
      v2225 = 0;
      v2226 = 0;
      v2224 = 0;
      *(_OWORD *)__p = *(_OWORD *)a2;
      v79 = *((_QWORD *)a2 + 2);
      v288 = a2 + 3;
      v2205 = v79;
      v2206 = i3 + 3;
      v289 = (uint64_t)&i3[v79 + 3];
      v290 = *(_OWORD *)(v289 + 16);
      v2207 = *(_OWORD *)v289;
      v2208 = v290;
      v291 = WORD2(v2207);
      v292 = *(_QWORD *)(v289 + 32);
      v293 = v289 + 40;
      v2209 = v292 / WORD2(v2207);
      v2210 = (void *)(v289 + 40);
      if (v292 != v2209 * WORD2(v2207))
      {
        v2174 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v2174, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2174, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v294 = v293 + v292;
      v295 = 8 - (v294 & 7);
      if ((v294 & 7) == 0)
        v295 = 0;
      v296 = v294 + v295;
      v297 = *(unsigned int *)(v296 + 4);
      LODWORD(v2211[0]) = *(_DWORD *)v296;
      HIDWORD(v2211[0]) = v297;
      *(_OWORD *)&v2211[1] = *(_OWORD *)(v296 + 8);
      v298 = v2211[1];
      if (v2211[1])
      {
        v299 = v296 + 32;
        v2211[2] = *(_QWORD *)(v296 + 24);
        v2211[3] = v296 + 32;
        v300 = v296 + 32 + 8 * v2211[2];
      }
      else
      {
        v299 = 0;
        v300 = v296 + 24;
      }
      if ((v300 & 7) != 0)
        v300 = (v300 & 0xFFFFFFFFFFFFFFF8) + 8;
      v2215 = *(_OWORD *)v300;
      *(_QWORD *)&v2216 = *(_QWORD *)(v300 + 16);
      if (*((_QWORD *)&v2215 + 1))
      {
        *(_QWORD *)&v2216 = *(_QWORD *)(v300 + 24);
        *((_QWORD *)&v2216 + 1) = v300 + 32;
        v769 = v300 + 32 + 8 * v2216;
      }
      else
      {
        v769 = v300 + 24;
      }
      v770 = 8 - (v769 & 7);
      if ((v769 & 7) == 0)
        v770 = 0;
      v772 = v769 + v770 + 8;
      v771 = *(_QWORD *)(v769 + v770);
      v773 = v772 + 8 * v771;
      v2225 = v771;
      v2226 = v772;
      if ((v773 & 7) != 0)
        v774 = 8 - (v773 & 7);
      else
        v774 = 0;
      v775 = v773 + v774;
      v2220 = *(_OWORD *)v775;
      *(_QWORD *)&v2221 = *(_QWORD *)(v775 + 16);
      if (*((_QWORD *)&v2220 + 1))
      {
        *(_QWORD *)&v2221 = *(_QWORD *)(v775 + 24);
        *((_QWORD *)&v2221 + 1) = v775 + 32;
        v776 = v775 + 32 + 8 * v2221;
      }
      else
      {
        v776 = v775 + 24;
      }
      v777 = 8 - (v776 & 7);
      if ((v776 & 7) == 0)
        v777 = 0;
      v366 = *(_DWORD *)(v776 + v777);
      v2227 = v366;
      if (v79)
        memmove(this, v288, 8 * v79);
      switch(BYTE13(v2207))
      {
        case 0:
          if (!v2211[1])
            goto LABEL_2134;
          v778 = 0;
          v779 = ~(-1 << SBYTE6(v2207));
          v780 = BYTE6(v2207) & 7;
          v781 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v782 = ~(-1 << SBYTE8(v2207));
          v783 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v784 = (unint64_t)BYTE6(v2207) >> 3;
          v785 = *(double *)this;
          while (1)
          {
            v786 = (*(_QWORD *)(v299 + ((v778 * v297) >> 3)) >> ((v778 * v297) & 7)) & ~(-1 << v297);
            if ((_DWORD)v297 == 64)
              v786 = *(_QWORD *)(v299 + ((v778 * v297) >> 3));
            v787 = (_DWORD *)(v293 + (v786 * v291));
            v788 = v778 + v786;
            while (1)
            {
              v789 = *(_DWORD *)((char *)v787 + v784) >> v780;
              if ((((*(double *)&a3[8 * (*v787 & v779)] > *(double *)((char *)v787 + v291 - 8)) ^ ((v789 & 8) >> 3)) & 1) != 0)
                break;
              v791 = v291;
              if ((v789 & 1) != 0)
              {
                v792 = ((*(_DWORD *)((char *)v787 + v783) >> v781) & v782) + v788;
                goto LABEL_744;
              }
LABEL_741:
              v787 = (_DWORD *)((char *)v787 + v791);
            }
            v790 = (*(_DWORD *)((char *)v787 + v783) >> v781) & v782;
            if ((v789 & 2) == 0)
              break;
            v792 = (v789 & 1) + v788 + v790;
LABEL_744:
            v785 = v785 + *(double *)(v772 + 8 * v792);
            *(double *)this = v785;
            v778 = (v778 + 1);
            if (v298 <= v778)
              goto LABEL_2134;
          }
          v791 = (v790 * v291);
          goto LABEL_741;
        case 1:
          if (!v2211[1])
            goto LABEL_2134;
          v2115 = 0;
          v2116 = ~(-1 << SBYTE6(v2207));
          v2117 = BYTE6(v2207) & 7;
          v2118 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v2119 = ~(-1 << SBYTE8(v2207));
          v2120 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v2121 = (unint64_t)BYTE6(v2207) >> 3;
          v2122 = *(double *)this;
          while (1)
          {
            v2123 = (*(_QWORD *)(v299 + ((v2115 * v297) >> 3)) >> ((v2115 * v297) & 7)) & ~(-1 << v297);
            if ((_DWORD)v297 == 64)
              v2123 = *(_QWORD *)(v299 + ((v2115 * v297) >> 3));
            v2124 = (_DWORD *)(v293 + (v2123 * v291));
            v2125 = v2115 + v2123;
            while (1)
            {
              v2126 = *(_DWORD *)((char *)v2124 + v2121) >> v2117;
              if ((((*(double *)&a3[8 * (*v2124 & v2116)] <= *(double *)((char *)v2124 + v291 - 8)) ^ ((v2126 & 8) >> 3)) & 1) != 0)
                break;
              v2128 = (*(_DWORD *)((char *)v2124 + v2120) >> v2118) & v2119;
              if ((v2126 & 2) != 0)
              {
                v2129 = (v2126 & 1) + v2125 + v2128;
                goto LABEL_2133;
              }
              v2127 = (v2128 * v291);
LABEL_2131:
              v2124 = (_DWORD *)((char *)v2124 + v2127);
            }
            v2127 = v291;
            if ((v2126 & 1) == 0)
              goto LABEL_2131;
            v2129 = ((*(_DWORD *)((char *)v2124 + v2120) >> v2118) & v2119) + v2125;
LABEL_2133:
            v2122 = v2122 + *(double *)(v772 + 8 * v2129);
            *(double *)this = v2122;
            v2115 = (v2115 + 1);
            if (v298 <= v2115)
              goto LABEL_2134;
          }
        case 2:
          if (!v2211[1])
            goto LABEL_2134;
          v1894 = 0;
          v1895 = ~(-1 << SBYTE6(v2207));
          v1896 = BYTE6(v2207) & 7;
          v1897 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1898 = ~(-1 << SBYTE8(v2207));
          v1899 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1900 = (unint64_t)BYTE6(v2207) >> 3;
          v1901 = *(double *)this;
          while (1)
          {
            v1902 = (*(_QWORD *)(v299 + ((v1894 * v297) >> 3)) >> ((v1894 * v297) & 7)) & ~(-1 << v297);
            if ((_DWORD)v297 == 64)
              v1902 = *(_QWORD *)(v299 + ((v1894 * v297) >> 3));
            v1903 = (_DWORD *)(v293 + (v1902 * v291));
            v1904 = v1894 + v1902;
            while (1)
            {
              v1905 = *(_DWORD *)((char *)v1903 + v1900) >> v1896;
              if ((((*(double *)&a3[8 * (*v1903 & v1895)] >= *(double *)((char *)v1903 + v291 - 8)) ^ ((v1905 & 8) >> 3)) & 1) != 0)
                break;
              v1907 = v291;
              if ((v1905 & 1) != 0)
              {
                v1908 = ((*(_DWORD *)((char *)v1903 + v1899) >> v1897) & v1898) + v1904;
                goto LABEL_1922;
              }
LABEL_1919:
              v1903 = (_DWORD *)((char *)v1903 + v1907);
            }
            v1906 = (*(_DWORD *)((char *)v1903 + v1899) >> v1897) & v1898;
            if ((v1905 & 2) == 0)
              break;
            v1908 = (v1905 & 1) + v1904 + v1906;
LABEL_1922:
            v1901 = v1901 + *(double *)(v772 + 8 * v1908);
            *(double *)this = v1901;
            v1894 = (v1894 + 1);
            if (v298 <= v1894)
              goto LABEL_2134;
          }
          v1907 = (v1906 * v291);
          goto LABEL_1919;
        case 3:
          if (!v2211[1])
            goto LABEL_2134;
          v2036 = 0;
          v2037 = ~(-1 << SBYTE6(v2207));
          v2038 = BYTE6(v2207) & 7;
          v2039 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v2040 = ~(-1 << SBYTE8(v2207));
          v2041 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v2042 = (unint64_t)BYTE6(v2207) >> 3;
          v2043 = *(double *)this;
          while (1)
          {
            v2044 = (*(_QWORD *)(v299 + ((v2036 * v297) >> 3)) >> ((v2036 * v297) & 7)) & ~(-1 << v297);
            if ((_DWORD)v297 == 64)
              v2044 = *(_QWORD *)(v299 + ((v2036 * v297) >> 3));
            v2045 = (_DWORD *)(v293 + (v2044 * v291));
            v2046 = v2036 + v2044;
            while (1)
            {
              v2047 = *(_DWORD *)((char *)v2045 + v2042) >> v2038;
              if ((((*(double *)&a3[8 * (*v2045 & v2037)] < *(double *)((char *)v2045 + v291 - 8)) ^ ((v2047 & 8) >> 3)) & 1) != 0)
                break;
              v2049 = (*(_DWORD *)((char *)v2045 + v2041) >> v2039) & v2040;
              if ((v2047 & 2) != 0)
              {
                v2050 = (v2047 & 1) + v2046 + v2049;
                goto LABEL_2058;
              }
              v2048 = (v2049 * v291);
LABEL_2056:
              v2045 = (_DWORD *)((char *)v2045 + v2048);
            }
            v2048 = v291;
            if ((v2047 & 1) == 0)
              goto LABEL_2056;
            v2050 = ((*(_DWORD *)((char *)v2045 + v2041) >> v2039) & v2040) + v2046;
LABEL_2058:
            v2043 = v2043 + *(double *)(v772 + 8 * v2050);
            *(double *)this = v2043;
            v2036 = (v2036 + 1);
            if (v298 <= v2036)
              goto LABEL_2134;
          }
        case 4:
          if (!v2211[1])
            goto LABEL_2134;
          v1663 = 0;
          v1664 = ~(-1 << SBYTE6(v2207));
          v1665 = BYTE6(v2207) & 7;
          v1666 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1667 = ~(-1 << SBYTE8(v2207));
          v1668 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1669 = (unint64_t)BYTE6(v2207) >> 3;
          v1670 = *(double *)this;
          break;
        default:
          goto LABEL_2134;
      }
LABEL_1680:
      v1671 = (*(_QWORD *)(v299 + ((v1663 * v297) >> 3)) >> ((v1663 * v297) & 7)) & ~(-1 << v297);
      if ((_DWORD)v297 == 64)
        v1671 = *(_QWORD *)(v299 + ((v1663 * v297) >> 3));
      v1672 = (_DWORD *)(v293 + (v1671 * v291));
      v1673 = v1663 + v1671;
      while (1)
      {
        v1674 = *(_DWORD *)((char *)v1672 + v1669) >> v1665;
        v1675 = *(double *)&a3[8 * (*v1672 & v1664)];
        v1676 = *(double *)((char *)v1672 + v291 - 8);
        switch((v1674 >> 3) & 7)
        {
          case 0u:
            if (v1675 > v1676)
              goto LABEL_1687;
            goto LABEL_1696;
          case 1u:
            if (v1675 < v1676)
              goto LABEL_1696;
            goto LABEL_1687;
          case 2u:
            if (v1675 >= v1676)
              goto LABEL_1696;
            goto LABEL_1687;
          case 3u:
            if (v1675 > v1676)
              goto LABEL_1696;
            goto LABEL_1687;
          case 4u:
            if (v1675 != v1676)
              goto LABEL_1687;
            goto LABEL_1696;
          case 5u:
            if (v1675 != v1676)
              goto LABEL_1696;
LABEL_1687:
            v1677 = (*(_DWORD *)((char *)v1672 + v1668) >> v1666) & v1667;
            if ((v1674 & 2) != 0)
            {
              v1679 = ((*(_DWORD *)((char *)v1672 + v1669) >> v1665) & 1) + v1673 + v1677;
LABEL_1700:
              v1670 = v1670 + *(double *)(v772 + 8 * v1679);
              *(double *)this = v1670;
              v1663 = (v1663 + 1);
              if (v298 <= v1663)
                goto LABEL_2134;
              goto LABEL_1680;
            }
            v1678 = (v1677 * v291);
LABEL_1697:
            v1672 = (_DWORD *)((char *)v1672 + v1678);
            break;
          default:
LABEL_1696:
            v1678 = v291;
            if ((v1674 & 1) == 0)
              goto LABEL_1697;
            v1679 = ((*(_DWORD *)((char *)v1672 + v1668) >> v1666) & v1667) + v1673;
            goto LABEL_1700;
        }
      }
    case 0xC:
      v2213 = 0;
      v2214 = 0;
      memset(v2211, 0, sizeof(v2211));
      v2212 = (CoreML::Archiver::MMappedContentManager *)&v2213;
      HIDWORD(v2211[0]) = 64;
      v2218 = 0;
      v2219 = 0;
      v2215 = 0u;
      v2216 = 0u;
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      DWORD1(v2215) = 64;
      v2220 = 0u;
      v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      v2223 = 0;
      DWORD1(v2220) = 64;
      v2225 = 0;
      v2226 = 0;
      v2224 = 0;
      *(_OWORD *)__p = *(_OWORD *)a2;
      v93 = *((_QWORD *)a2 + 2);
      v94 = a2 + 3;
      v2205 = v93;
      v2206 = i3 + 3;
      v95 = (uint64_t)&i3[v93 + 3];
      v96 = *(_OWORD *)(v95 + 16);
      v2207 = *(_OWORD *)v95;
      v2208 = v96;
      v97 = WORD2(v2207);
      v98 = *(_QWORD *)(v95 + 32);
      v99 = v95 + 40;
      v2209 = v98 / WORD2(v2207);
      v2210 = (void *)(v95 + 40);
      if (v98 != v2209 * WORD2(v2207))
      {
        v2162 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v2162, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2162, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v100 = v99 + v98;
      v101 = 8 - (v100 & 7);
      if ((v100 & 7) == 0)
        v101 = 0;
      v102 = v100 + v101;
      v103 = *(unsigned int *)(v102 + 4);
      LODWORD(v2211[0]) = *(_DWORD *)v102;
      HIDWORD(v2211[0]) = v103;
      v104 = *(_OWORD *)(v102 + 8);
      *(_OWORD *)&v2211[1] = v104;
      v105 = v104;
      if ((_QWORD)v104)
      {
        v106 = v102 + 32;
        v2211[2] = *(_QWORD *)(v102 + 24);
        v2211[3] = v102 + 32;
        v107 = v102 + 32 + 8 * v2211[2];
      }
      else
      {
        v106 = 0;
        v107 = v102 + 24;
      }
      if ((v107 & 7) != 0)
        v107 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
      LODWORD(v2215) = *(_DWORD *)v107;
      v382 = *(_DWORD *)(v107 + 4);
      DWORD1(v2215) = v382;
      *((_QWORD *)&v2215 + 1) = *(_QWORD *)(v107 + 8);
      *(_QWORD *)&v2216 = *(_QWORD *)(v107 + 16);
      if (*((_QWORD *)&v2215 + 1))
      {
        v383 = v107 + 32;
        *(_QWORD *)&v2216 = *(_QWORD *)(v107 + 24);
        *((_QWORD *)&v2216 + 1) = v107 + 32;
        v384 = v107 + 32 + 8 * v2216;
      }
      else
      {
        v383 = 0;
        v384 = v107 + 24;
      }
      v385 = 8 - (v384 & 7);
      if ((v384 & 7) == 0)
        v385 = 0;
      v387 = v384 + v385 + 8;
      v386 = *(_QWORD *)(v384 + v385);
      v388 = v387 + 8 * v386;
      v2225 = v386;
      v2226 = v387;
      if ((v388 & 7) != 0)
        v389 = 8 - (v388 & 7);
      else
        v389 = 0;
      v390 = v388 + v389;
      v2220 = *(_OWORD *)v390;
      *(_QWORD *)&v2221 = *(_QWORD *)(v390 + 16);
      if (*((_QWORD *)&v2220 + 1))
      {
        *(_QWORD *)&v2221 = *(_QWORD *)(v390 + 24);
        *((_QWORD *)&v2221 + 1) = v390 + 32;
        v391 = v390 + 32 + 8 * v2221;
      }
      else
      {
        v391 = v390 + 24;
      }
      v392 = 8 - (v391 & 7);
      if ((v391 & 7) == 0)
        v392 = 0;
      v393 = *(_DWORD *)(v391 + v392);
      v2227 = v393;
      if (v93)
      {
        v394 = 8 * v93;
        v2182 = (CoreML::Archiver::MMappedContentManager *)v387;
        v395 = v383;
        v396 = v104;
        v397 = v99;
        v398 = v106;
        v399 = v93;
        v400 = v393;
        memmove(this, v94, v394);
        v393 = v400;
        v93 = v399;
        v106 = v398;
        v99 = v397;
        v105 = v396;
        v383 = v395;
        v387 = (uint64_t)v2182;
      }
      switch(BYTE13(v2207))
      {
        case 0:
          if (!v105)
            goto LABEL_1837;
          v401 = 0;
          v402 = ~(-1 << SBYTE6(v2207));
          v403 = BYTE6(v2207) & 7;
          v404 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v405 = ~(-1 << SBYTE8(v2207));
          v406 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v407 = (unint64_t)BYTE6(v2207) >> 3;
          while (1)
          {
            v408 = (*(_QWORD *)(v106 + ((v401 * v103) >> 3)) >> ((v401 * v103) & 7)) & ~(-1 << v103);
            if ((_DWORD)v103 == 64)
              v408 = *(_QWORD *)(v106 + ((v401 * v103) >> 3));
            v409 = (_DWORD *)(v99 + (v408 * v97));
            v410 = v401 + v408;
            while (1)
            {
              v411 = *(_DWORD *)((char *)v409 + v407) >> v403;
              if ((((*(double *)&a3[8 * (*v409 & v402)] > *(double *)((char *)v409 + v97 - 8)) ^ ((v411 & 8) >> 3)) & 1) != 0)
                break;
              v413 = v97;
              if ((v411 & 1) != 0)
              {
                v414 = ((*(_DWORD *)((char *)v409 + v406) >> v404) & v405) + v410;
                goto LABEL_296;
              }
LABEL_293:
              v409 = (_DWORD *)((char *)v409 + v413);
            }
            v412 = (*(_DWORD *)((char *)v409 + v406) >> v404) & v405;
            if ((v411 & 2) == 0)
              break;
            v414 = (v411 & 1) + v410 + v412;
LABEL_296:
            v415 = v382 * (unint64_t)v414;
            v416 = *(_QWORD *)(v383 + (v415 >> 3));
            v417 = (v416 >> (v415 & 7)) & ~(-1 << v382);
            if (v382 == 64)
              v417 = v416;
            *((double *)this + v417) = *(double *)(v387 + 8 * v414) + *((double *)this + v417);
            v401 = (v401 + 1);
            if (v105 <= v401)
              goto LABEL_1837;
          }
          v413 = (v412 * v97);
          goto LABEL_293;
        case 1:
          if (!v105)
            goto LABEL_1837;
          v1196 = 0;
          v1197 = ~(-1 << SBYTE6(v2207));
          v1198 = BYTE6(v2207) & 7;
          v1199 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1200 = ~(-1 << SBYTE8(v2207));
          v1201 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1202 = (unint64_t)BYTE6(v2207) >> 3;
          while (1)
          {
            v1203 = (*(_QWORD *)(v106 + ((v1196 * v103) >> 3)) >> ((v1196 * v103) & 7)) & ~(-1 << v103);
            if ((_DWORD)v103 == 64)
              v1203 = *(_QWORD *)(v106 + ((v1196 * v103) >> 3));
            v1204 = (_DWORD *)(v99 + (v1203 * v97));
            v1205 = v1196 + v1203;
            while (1)
            {
              v1206 = *(_DWORD *)((char *)v1204 + v1202) >> v1198;
              if ((((*(double *)&a3[8 * (*v1204 & v1197)] <= *(double *)((char *)v1204 + v97 - 8)) ^ ((v1206 & 8) >> 3)) & 1) != 0)
                break;
              v1208 = (*(_DWORD *)((char *)v1204 + v1201) >> v1199) & v1200;
              if ((v1206 & 2) != 0)
              {
                v1209 = (v1206 & 1) + v1205 + v1208;
                goto LABEL_1195;
              }
              v1207 = (v1208 * v97);
LABEL_1193:
              v1204 = (_DWORD *)((char *)v1204 + v1207);
            }
            v1207 = v97;
            if ((v1206 & 1) == 0)
              goto LABEL_1193;
            v1209 = ((*(_DWORD *)((char *)v1204 + v1201) >> v1199) & v1200) + v1205;
LABEL_1195:
            v1210 = v382 * (unint64_t)v1209;
            v1211 = *(_QWORD *)(v383 + (v1210 >> 3));
            v1212 = (v1211 >> (v1210 & 7)) & ~(-1 << v382);
            if (v382 == 64)
              v1212 = v1211;
            *((double *)this + v1212) = *(double *)(v387 + 8 * v1209) + *((double *)this + v1212);
            v1196 = (v1196 + 1);
            if (v105 <= v1196)
              goto LABEL_1837;
          }
        case 2:
          if (!v105)
            goto LABEL_1837;
          v1064 = 0;
          v1065 = ~(-1 << SBYTE6(v2207));
          v1066 = BYTE6(v2207) & 7;
          v1067 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1068 = ~(-1 << SBYTE8(v2207));
          v1069 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1070 = (unint64_t)BYTE6(v2207) >> 3;
          while (1)
          {
            v1071 = (*(_QWORD *)(v106 + ((v1064 * v103) >> 3)) >> ((v1064 * v103) & 7)) & ~(-1 << v103);
            if ((_DWORD)v103 == 64)
              v1071 = *(_QWORD *)(v106 + ((v1064 * v103) >> 3));
            v1072 = (_DWORD *)(v99 + (v1071 * v97));
            v1073 = v1064 + v1071;
            while (1)
            {
              v1074 = *(_DWORD *)((char *)v1072 + v1070) >> v1066;
              if ((((*(double *)&a3[8 * (*v1072 & v1065)] >= *(double *)((char *)v1072 + v97 - 8)) ^ ((v1074 & 8) >> 3)) & 1) != 0)
                break;
              v1076 = v97;
              if ((v1074 & 1) != 0)
              {
                v1077 = ((*(_DWORD *)((char *)v1072 + v1069) >> v1067) & v1068) + v1073;
                goto LABEL_1050;
              }
LABEL_1047:
              v1072 = (_DWORD *)((char *)v1072 + v1076);
            }
            v1075 = (*(_DWORD *)((char *)v1072 + v1069) >> v1067) & v1068;
            if ((v1074 & 2) == 0)
              break;
            v1077 = (v1074 & 1) + v1073 + v1075;
LABEL_1050:
            v1078 = v382 * (unint64_t)v1077;
            v1079 = *(_QWORD *)(v383 + (v1078 >> 3));
            v1080 = (v1079 >> (v1078 & 7)) & ~(-1 << v382);
            if (v382 == 64)
              v1080 = v1079;
            *((double *)this + v1080) = *(double *)(v387 + 8 * v1077) + *((double *)this + v1080);
            v1064 = (v1064 + 1);
            if (v105 <= v1064)
              goto LABEL_1837;
          }
          v1076 = (v1075 * v97);
          goto LABEL_1047;
        case 3:
          if (!v105)
            goto LABEL_1837;
          v1135 = 0;
          v1136 = ~(-1 << SBYTE6(v2207));
          v1137 = BYTE6(v2207) & 7;
          v1138 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1139 = ~(-1 << SBYTE8(v2207));
          v1140 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1141 = (unint64_t)BYTE6(v2207) >> 3;
          while (1)
          {
            v1142 = (*(_QWORD *)(v106 + ((v1135 * v103) >> 3)) >> ((v1135 * v103) & 7)) & ~(-1 << v103);
            if ((_DWORD)v103 == 64)
              v1142 = *(_QWORD *)(v106 + ((v1135 * v103) >> 3));
            v1143 = (_DWORD *)(v99 + (v1142 * v97));
            v1144 = v1135 + v1142;
            while (1)
            {
              v1145 = *(_DWORD *)((char *)v1143 + v1141) >> v1137;
              if ((((*(double *)&a3[8 * (*v1143 & v1136)] < *(double *)((char *)v1143 + v97 - 8)) ^ ((v1145 & 8) >> 3)) & 1) != 0)
                break;
              v1147 = (*(_DWORD *)((char *)v1143 + v1140) >> v1138) & v1139;
              if ((v1145 & 2) != 0)
              {
                v1148 = (v1145 & 1) + v1144 + v1147;
                goto LABEL_1130;
              }
              v1146 = (v1147 * v97);
LABEL_1128:
              v1143 = (_DWORD *)((char *)v1143 + v1146);
            }
            v1146 = v97;
            if ((v1145 & 1) == 0)
              goto LABEL_1128;
            v1148 = ((*(_DWORD *)((char *)v1143 + v1140) >> v1138) & v1139) + v1144;
LABEL_1130:
            v1149 = v382 * (unint64_t)v1148;
            v1150 = *(_QWORD *)(v383 + (v1149 >> 3));
            v1151 = (v1150 >> (v1149 & 7)) & ~(-1 << v382);
            if (v382 == 64)
              v1151 = v1150;
            *((double *)this + v1151) = *(double *)(v387 + 8 * v1148) + *((double *)this + v1151);
            v1135 = (v1135 + 1);
            if (v105 <= v1135)
              goto LABEL_1837;
          }
        case 4:
          if (!v105)
            goto LABEL_1837;
          v1016 = 0;
          v1017 = ~(-1 << SBYTE6(v2207));
          v1018 = BYTE6(v2207) & 7;
          v1019 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1020 = ~(-1 << SBYTE8(v2207));
          v1021 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1022 = (unint64_t)BYTE6(v2207) >> 3;
          break;
        default:
          goto LABEL_1837;
      }
LABEL_979:
      v1023 = (*(_QWORD *)(v106 + ((v1016 * v103) >> 3)) >> ((v1016 * v103) & 7)) & ~(-1 << v103);
      if ((_DWORD)v103 == 64)
        v1023 = *(_QWORD *)(v106 + ((v1016 * v103) >> 3));
      v1024 = (_DWORD *)(v99 + (v1023 * v97));
      v1025 = v1016 + v1023;
      while (1)
      {
        v1026 = *(_DWORD *)((char *)v1024 + v1022) >> v1018;
        v1027 = *(double *)&a3[8 * (*v1024 & v1017)];
        v1028 = *(double *)((char *)v1024 + v97 - 8);
        switch((v1026 >> 3) & 7)
        {
          case 0u:
            if (v1027 > v1028)
              goto LABEL_986;
            goto LABEL_995;
          case 1u:
            if (v1027 < v1028)
              goto LABEL_995;
            goto LABEL_986;
          case 2u:
            if (v1027 >= v1028)
              goto LABEL_995;
            goto LABEL_986;
          case 3u:
            if (v1027 > v1028)
              goto LABEL_995;
            goto LABEL_986;
          case 4u:
            if (v1027 != v1028)
              goto LABEL_986;
            goto LABEL_995;
          case 5u:
            if (v1027 != v1028)
              goto LABEL_995;
LABEL_986:
            v1029 = (*(_DWORD *)((char *)v1024 + v1021) >> v1019) & v1020;
            if ((v1026 & 2) != 0)
            {
              v1031 = ((*(_DWORD *)((char *)v1024 + v1022) >> v1018) & 1) + v1025 + v1029;
LABEL_999:
              v1032 = v382 * (unint64_t)v1031;
              v1033 = *(_QWORD *)(v383 + (v1032 >> 3));
              v1034 = (v1033 >> (v1032 & 7)) & ~(-1 << v382);
              if (v382 == 64)
                v1034 = v1033;
              *((double *)this + v1034) = *(double *)(v387 + 8 * v1031) + *((double *)this + v1034);
              v1016 = (v1016 + 1);
              if (v105 <= v1016)
                goto LABEL_1837;
              goto LABEL_979;
            }
            v1030 = (v1029 * v97);
LABEL_996:
            v1024 = (_DWORD *)((char *)v1024 + v1030);
            break;
          default:
LABEL_995:
            v1030 = v97;
            if ((v1026 & 1) == 0)
              goto LABEL_996;
            v1031 = ((*(_DWORD *)((char *)v1024 + v1021) >> v1019) & v1020) + v1025;
            goto LABEL_999;
        }
      }
    case 0xD:
      v2213 = 0;
      v2214 = 0;
      memset(v2211, 0, sizeof(v2211));
      v2212 = (CoreML::Archiver::MMappedContentManager *)&v2213;
      HIDWORD(v2211[0]) = 64;
      v2218 = 0;
      v2219 = 0;
      v2215 = 0u;
      v2216 = 0u;
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      DWORD1(v2215) = 64;
      v2220 = 0u;
      v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      v2223 = 0;
      DWORD1(v2220) = 64;
      v2225 = 0;
      v2226 = 0;
      v2224 = 0;
      *(_OWORD *)__p = *(_OWORD *)a2;
      v120 = *((_QWORD *)a2 + 2);
      v121 = a2 + 3;
      v2205 = v120;
      v2206 = i3 + 3;
      v122 = (uint64_t)&i3[v120 + 3];
      v123 = *(_OWORD *)(v122 + 16);
      v2207 = *(_OWORD *)v122;
      v2208 = v123;
      v124 = WORD2(v2207);
      v125 = *(_QWORD *)(v122 + 32);
      v2209 = v125 / WORD2(v2207);
      v2210 = (void *)(v122 + 40);
      if (v125 != v2209 * WORD2(v2207))
      {
        v2164 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v2164, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2164, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v2194 = (CoreML::Archiver::MMappedContentManager *)(v122 + 40);
      v126 = v122 + 40 + v125;
      v127 = 8 - (v126 & 7);
      if ((v126 & 7) == 0)
        v127 = 0;
      v128 = v126 + v127;
      v129 = *(unsigned int *)(v128 + 4);
      LODWORD(v2211[0]) = *(_DWORD *)v128;
      HIDWORD(v2211[0]) = v129;
      *(_OWORD *)&v2211[1] = *(_OWORD *)(v128 + 8);
      v130 = v2211[1];
      if (v2211[1])
      {
        v2211[2] = *(_QWORD *)(v128 + 24);
        v2211[3] = v128 + 32;
        v2190 = (CoreML::Archiver::MMappedContentManager *)(v128 + 32);
        v131 = v128 + 32 + 8 * v2211[2];
      }
      else
      {
        v2190 = 0;
        v131 = v128 + 24;
      }
      if ((v131 & 7) != 0)
        v131 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
      LODWORD(v2215) = *(_DWORD *)v131;
      v459 = *(_DWORD *)(v131 + 4);
      DWORD1(v2215) = v459;
      *((_QWORD *)&v2215 + 1) = *(_QWORD *)(v131 + 8);
      *(_QWORD *)&v2216 = *(_QWORD *)(v131 + 16);
      if (*((_QWORD *)&v2215 + 1))
      {
        v460 = v131 + 32;
        *(_QWORD *)&v2216 = *(_QWORD *)(v131 + 24);
        *((_QWORD *)&v2216 + 1) = v131 + 32;
        v461 = v131 + 32 + 8 * v2216;
      }
      else
      {
        v460 = 0;
        v461 = v131 + 24;
      }
      v462 = 8 - (v461 & 7);
      if ((v461 & 7) == 0)
        v462 = 0;
      v464 = v461 + v462 + 8;
      v463 = *(_QWORD *)(v461 + v462);
      v465 = v464 + 8 * v463;
      v2225 = v463;
      v2226 = v464;
      if ((v465 & 7) != 0)
        v466 = 8 - (v465 & 7);
      else
        v466 = 0;
      v467 = v465 + v466;
      LODWORD(v2220) = *(_DWORD *)v467;
      v468 = *(unsigned int *)(v467 + 4);
      DWORD1(v2220) = *(_DWORD *)(v467 + 4);
      *((_QWORD *)&v2220 + 1) = *(_QWORD *)(v467 + 8);
      *(_QWORD *)&v2221 = *(_QWORD *)(v467 + 16);
      if (*((_QWORD *)&v2220 + 1))
      {
        v469 = v467 + 32;
        *(_QWORD *)&v2221 = *(_QWORD *)(v467 + 24);
        *((_QWORD *)&v2221 + 1) = v467 + 32;
        v470 = v467 + 32 + 8 * v2221;
      }
      else
      {
        v469 = 0;
        v470 = v467 + 24;
      }
      v471 = 8 - (v470 & 7);
      if ((v470 & 7) == 0)
        v471 = 0;
      v2181 = *(_DWORD *)(v470 + v471);
      v2227 = v2181;
      v472 = (CoreML::Archiver::MMappedContentManager *)v120;
      if (v120)
        memmove(this, v121, 8 * v120);
      v2187 = v472;
      switch(BYTE13(v2207))
      {
        case 0:
          if (!v2211[1])
            goto LABEL_2161;
          v473 = 0;
          v474 = ~(-1 << SBYTE6(v2207));
          v475 = BYTE6(v2207) & 7;
          v476 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v477 = ~(-1 << SBYTE8(v2207));
          v478 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v479 = (unint64_t)BYTE6(v2207) >> 3;
          v480 = (1 << (BYTE11(v2207) - 1));
          v481 = ~(-1 << v459);
          v482 = ~(_DWORD)v480;
          while (1)
          {
            v483 = (*(_QWORD *)((char *)v2190 + ((v473 * v129) >> 3)) >> ((v473 * v129) & 7)) & ~(-1 << v129);
            if ((_DWORD)v129 == 64)
              v483 = *(_QWORD *)((char *)v2190 + ((v473 * v129) >> 3));
            v484 = (_DWORD *)((char *)v2194 + (v483 * v124));
            v485 = (*(_QWORD *)(v469 + ((v473 * v468) >> 3)) >> ((v473 * v468) & 7)) & ~(-1 << v468);
            if ((_DWORD)v468 == 64)
              v485 = *(_QWORD *)(v469 + ((v473 * v468) >> 3));
            while (1)
            {
              v486 = *(_DWORD *)((char *)v484 + v479) >> v475;
              if ((((*(double *)&a3[8 * (*v484 & v474)] > *(double *)((char *)v484 + v124 - 8)) ^ ((v486 & 8) >> 3)) & 1) != 0)
                break;
              v488 = v124;
              if ((v486 & 1) != 0)
              {
                v496 = ((*(_DWORD *)((char *)v484 + v478) >> v476) & v477) + v485;
                do
                {
                  v497 = v459 * (unint64_t)v496;
                  v498 = *(_QWORD *)(v460 + (v497 >> 3));
                  v499 = (v498 >> (v497 & 7)) & v481;
                  if (v459 == 64)
                    v499 = v498;
                  *((double *)this + (v499 & v482)) = *(double *)(v464 + 8 * v496++)
                                                                  + *((double *)this + (v499 & v482));
                }
                while ((v499 & v480) == 0);
                goto LABEL_386;
              }
LABEL_373:
              v484 = (_DWORD *)((char *)v484 + v488);
            }
            v487 = (*(_DWORD *)((char *)v484 + v478) >> v476) & v477;
            if ((v486 & 2) == 0)
              break;
            v489 = v487 + v485;
            if ((v486 & 1) != 0)
            {
              do
              {
                v490 = v459 * (unint64_t)v489;
                v491 = *(_QWORD *)(v460 + (v490 >> 3));
                v492 = (v491 >> (v490 & 7)) & v481;
                if (v459 == 64)
                  v492 = v491;
                ++v489;
              }
              while ((v492 & v480) == 0);
            }
            do
            {
              v493 = v459 * (unint64_t)v489;
              v494 = *(_QWORD *)(v460 + (v493 >> 3));
              v495 = (v494 >> (v493 & 7)) & v481;
              if (v459 == 64)
                v495 = v494;
              *((double *)this + (v495 & v482)) = *(double *)(v464 + 8 * v489++)
                                                              + *((double *)this + (v495 & v482));
            }
            while ((v495 & v480) == 0);
LABEL_386:
            v473 = (v473 + 1);
            if (v130 <= v473)
              goto LABEL_2161;
          }
          v488 = (v487 * v124);
          goto LABEL_373;
        case 1:
          if (!v2211[1])
            goto LABEL_2161;
          v1435 = 0;
          v1436 = ~(-1 << SBYTE6(v2207));
          v1437 = BYTE6(v2207) & 7;
          v1438 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1439 = ~(-1 << SBYTE8(v2207));
          v1440 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1441 = (unint64_t)BYTE6(v2207) >> 3;
          v1442 = (1 << (BYTE11(v2207) - 1));
          v1443 = ~(-1 << v459);
          v1444 = ~(_DWORD)v1442;
          while (1)
          {
            v1445 = (*(_QWORD *)((char *)v2190 + ((v1435 * v129) >> 3)) >> ((v1435 * v129) & 7)) & ~(-1 << v129);
            if ((_DWORD)v129 == 64)
              v1445 = *(_QWORD *)((char *)v2190 + ((v1435 * v129) >> 3));
            v1446 = (_DWORD *)((char *)v2194 + (v1445 * v124));
            v1447 = (*(_QWORD *)(v469 + ((v1435 * v468) >> 3)) >> ((v1435 * v468) & 7)) & ~(-1 << v468);
            if ((_DWORD)v468 == 64)
              v1447 = *(_QWORD *)(v469 + ((v1435 * v468) >> 3));
            while (1)
            {
              v1448 = *(_DWORD *)((char *)v1446 + v1441) >> v1437;
              if ((((*(double *)&a3[8 * (*v1446 & v1436)] <= *(double *)((char *)v1446 + v124 - 8)) ^ ((v1448 & 8) >> 3)) & 1) != 0)
                break;
              v1450 = (*(_DWORD *)((char *)v1446 + v1440) >> v1438) & v1439;
              if ((v1448 & 2) != 0)
              {
                v1455 = v1450 + v1447;
                if ((v1448 & 1) != 0)
                {
                  do
                  {
                    v1456 = v459 * (unint64_t)v1455;
                    v1457 = *(_QWORD *)(v460 + (v1456 >> 3));
                    v1458 = (v1457 >> (v1456 & 7)) & v1443;
                    if (v459 == 64)
                      v1458 = v1457;
                    ++v1455;
                  }
                  while ((v1458 & v1442) == 0);
                }
                do
                {
                  v1459 = v459 * (unint64_t)v1455;
                  v1460 = *(_QWORD *)(v460 + (v1459 >> 3));
                  v1461 = (v1460 >> (v1459 & 7)) & v1443;
                  if (v459 == 64)
                    v1461 = v1460;
                  *((double *)this + (v1461 & v1444)) = *(double *)(v464 + 8 * v1455++)
                                                                    + *((double *)this + (v1461 & v1444));
                }
                while ((v1461 & v1442) == 0);
                goto LABEL_1453;
              }
              v1449 = (v1450 * v124);
LABEL_1441:
              v1446 = (_DWORD *)((char *)v1446 + v1449);
            }
            v1449 = v124;
            if ((v1448 & 1) == 0)
              goto LABEL_1441;
            v1451 = ((*(_DWORD *)((char *)v1446 + v1440) >> v1438) & v1439) + v1447;
            do
            {
              v1452 = v459 * (unint64_t)v1451;
              v1453 = *(_QWORD *)(v460 + (v1452 >> 3));
              v1454 = (v1453 >> (v1452 & 7)) & v1443;
              if (v459 == 64)
                v1454 = v1453;
              *((double *)this + (v1454 & v1444)) = *(double *)(v464 + 8 * v1451++)
                                                                + *((double *)this + (v1454 & v1444));
            }
            while ((v1454 & v1442) == 0);
LABEL_1453:
            v1435 = (v1435 + 1);
            if (v130 <= v1435)
              goto LABEL_2161;
          }
        case 2:
          if (!v2211[1])
            goto LABEL_2161;
          v1213 = 0;
          v1214 = ~(-1 << SBYTE6(v2207));
          v1215 = BYTE6(v2207) & 7;
          v1216 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1217 = ~(-1 << SBYTE8(v2207));
          v1218 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1219 = (unint64_t)BYTE6(v2207) >> 3;
          v1220 = (1 << (BYTE11(v2207) - 1));
          v1221 = ~(-1 << v459);
          v1222 = ~(_DWORD)v1220;
          while (1)
          {
            v1223 = (*(_QWORD *)((char *)v2190 + ((v1213 * v129) >> 3)) >> ((v1213 * v129) & 7)) & ~(-1 << v129);
            if ((_DWORD)v129 == 64)
              v1223 = *(_QWORD *)((char *)v2190 + ((v1213 * v129) >> 3));
            v1224 = (_DWORD *)((char *)v2194 + (v1223 * v124));
            v1225 = (*(_QWORD *)(v469 + ((v1213 * v468) >> 3)) >> ((v1213 * v468) & 7)) & ~(-1 << v468);
            if ((_DWORD)v468 == 64)
              v1225 = *(_QWORD *)(v469 + ((v1213 * v468) >> 3));
            while (1)
            {
              v1226 = *(_DWORD *)((char *)v1224 + v1219) >> v1215;
              if ((((*(double *)&a3[8 * (*v1224 & v1214)] >= *(double *)((char *)v1224 + v124 - 8)) ^ ((v1226 & 8) >> 3)) & 1) != 0)
                break;
              v1228 = v124;
              if ((v1226 & 1) != 0)
              {
                v1236 = ((*(_DWORD *)((char *)v1224 + v1218) >> v1216) & v1217) + v1225;
                do
                {
                  v1237 = v459 * (unint64_t)v1236;
                  v1238 = *(_QWORD *)(v460 + (v1237 >> 3));
                  v1239 = (v1238 >> (v1237 & 7)) & v1221;
                  if (v459 == 64)
                    v1239 = v1238;
                  *((double *)this + (v1239 & v1222)) = *(double *)(v464 + 8 * v1236++)
                                                                    + *((double *)this + (v1239 & v1222));
                }
                while ((v1239 & v1220) == 0);
                goto LABEL_1222;
              }
LABEL_1209:
              v1224 = (_DWORD *)((char *)v1224 + v1228);
            }
            v1227 = (*(_DWORD *)((char *)v1224 + v1218) >> v1216) & v1217;
            if ((v1226 & 2) == 0)
              break;
            v1229 = v1227 + v1225;
            if ((v1226 & 1) != 0)
            {
              do
              {
                v1230 = v459 * (unint64_t)v1229;
                v1231 = *(_QWORD *)(v460 + (v1230 >> 3));
                v1232 = (v1231 >> (v1230 & 7)) & v1221;
                if (v459 == 64)
                  v1232 = v1231;
                ++v1229;
              }
              while ((v1232 & v1220) == 0);
            }
            do
            {
              v1233 = v459 * (unint64_t)v1229;
              v1234 = *(_QWORD *)(v460 + (v1233 >> 3));
              v1235 = (v1234 >> (v1233 & 7)) & v1221;
              if (v459 == 64)
                v1235 = v1234;
              *((double *)this + (v1235 & v1222)) = *(double *)(v464 + 8 * v1229++)
                                                                + *((double *)this + (v1235 & v1222));
            }
            while ((v1235 & v1220) == 0);
LABEL_1222:
            v1213 = (v1213 + 1);
            if (v130 <= v1213)
              goto LABEL_2161;
          }
          v1228 = (v1227 * v124);
          goto LABEL_1209;
        case 3:
          if (!v2211[1])
            goto LABEL_2161;
          v1343 = 0;
          v1344 = ~(-1 << SBYTE6(v2207));
          v1345 = BYTE6(v2207) & 7;
          v1346 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1347 = ~(-1 << SBYTE8(v2207));
          v1348 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1349 = (unint64_t)BYTE6(v2207) >> 3;
          v1350 = (1 << (BYTE11(v2207) - 1));
          v1351 = ~(-1 << v459);
          v1352 = ~(_DWORD)v1350;
          while (1)
          {
            v1353 = (*(_QWORD *)((char *)v2190 + ((v1343 * v129) >> 3)) >> ((v1343 * v129) & 7)) & ~(-1 << v129);
            if ((_DWORD)v129 == 64)
              v1353 = *(_QWORD *)((char *)v2190 + ((v1343 * v129) >> 3));
            v1354 = (_DWORD *)((char *)v2194 + (v1353 * v124));
            v1355 = (*(_QWORD *)(v469 + ((v1343 * v468) >> 3)) >> ((v1343 * v468) & 7)) & ~(-1 << v468);
            if ((_DWORD)v468 == 64)
              v1355 = *(_QWORD *)(v469 + ((v1343 * v468) >> 3));
            while (1)
            {
              v1356 = *(_DWORD *)((char *)v1354 + v1349) >> v1345;
              if ((((*(double *)&a3[8 * (*v1354 & v1344)] < *(double *)((char *)v1354 + v124 - 8)) ^ ((v1356 & 8) >> 3)) & 1) != 0)
                break;
              v1358 = (*(_DWORD *)((char *)v1354 + v1348) >> v1346) & v1347;
              if ((v1356 & 2) != 0)
              {
                v1363 = v1358 + v1355;
                if ((v1356 & 1) != 0)
                {
                  do
                  {
                    v1364 = v459 * (unint64_t)v1363;
                    v1365 = *(_QWORD *)(v460 + (v1364 >> 3));
                    v1366 = (v1365 >> (v1364 & 7)) & v1351;
                    if (v459 == 64)
                      v1366 = v1365;
                    ++v1363;
                  }
                  while ((v1366 & v1350) == 0);
                }
                do
                {
                  v1367 = v459 * (unint64_t)v1363;
                  v1368 = *(_QWORD *)(v460 + (v1367 >> 3));
                  v1369 = (v1368 >> (v1367 & 7)) & v1351;
                  if (v459 == 64)
                    v1369 = v1368;
                  *((double *)this + (v1369 & v1352)) = *(double *)(v464 + 8 * v1363++)
                                                                    + *((double *)this + (v1369 & v1352));
                }
                while ((v1369 & v1350) == 0);
                goto LABEL_1369;
              }
              v1357 = (v1358 * v124);
LABEL_1357:
              v1354 = (_DWORD *)((char *)v1354 + v1357);
            }
            v1357 = v124;
            if ((v1356 & 1) == 0)
              goto LABEL_1357;
            v1359 = ((*(_DWORD *)((char *)v1354 + v1348) >> v1346) & v1347) + v1355;
            do
            {
              v1360 = v459 * (unint64_t)v1359;
              v1361 = *(_QWORD *)(v460 + (v1360 >> 3));
              v1362 = (v1361 >> (v1360 & 7)) & v1351;
              if (v459 == 64)
                v1362 = v1361;
              *((double *)this + (v1362 & v1352)) = *(double *)(v464 + 8 * v1359++)
                                                                + *((double *)this + (v1362 & v1352));
            }
            while ((v1362 & v1350) == 0);
LABEL_1369:
            v1343 = (v1343 + 1);
            if (v130 <= v1343)
              goto LABEL_2161;
          }
        case 4:
          if (!v2211[1])
            goto LABEL_2161;
          v1081 = 0;
          v1082 = ~(-1 << SBYTE6(v2207));
          v1083 = BYTE6(v2207) & 7;
          v1084 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1085 = ~(-1 << SBYTE8(v2207));
          v1086 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1087 = (unint64_t)BYTE6(v2207) >> 3;
          v1088 = (1 << (BYTE11(v2207) - 1));
          v1089 = ~(-1 << v459);
          v1090 = ~(_DWORD)v1088;
          break;
        default:
          goto LABEL_2161;
      }
LABEL_1056:
      v1091 = (*(_QWORD *)((char *)v2190 + ((v1081 * v129) >> 3)) >> ((v1081 * v129) & 7)) & ~(-1 << v129);
      if ((_DWORD)v129 == 64)
        v1091 = *(_QWORD *)((char *)v2190 + ((v1081 * v129) >> 3));
      v1092 = (_DWORD *)((char *)v2194 + (v1091 * v124));
      v1093 = (*(_QWORD *)(v469 + ((v1081 * v468) >> 3)) >> ((v1081 * v468) & 7)) & ~(-1 << v468);
      if ((_DWORD)v468 == 64)
        v1093 = *(_QWORD *)(v469 + ((v1081 * v468) >> 3));
      while (1)
      {
        v1094 = *(_DWORD *)((char *)v1092 + v1087) >> v1083;
        v1095 = *(double *)&a3[8 * (*v1092 & v1082)];
        v1096 = *(double *)((char *)v1092 + v124 - 8);
        switch((v1094 >> 3) & 7)
        {
          case 0u:
            if (v1095 > v1096)
              goto LABEL_1064;
            goto LABEL_1073;
          case 1u:
            if (v1095 < v1096)
              goto LABEL_1073;
            goto LABEL_1064;
          case 2u:
            if (v1095 >= v1096)
              goto LABEL_1073;
            goto LABEL_1064;
          case 3u:
            if (v1095 > v1096)
              goto LABEL_1073;
            goto LABEL_1064;
          case 4u:
            if (v1095 != v1096)
              goto LABEL_1064;
            goto LABEL_1073;
          case 5u:
            if (v1095 != v1096)
              goto LABEL_1073;
LABEL_1064:
            v1097 = (*(_DWORD *)((char *)v1092 + v1086) >> v1084) & v1085;
            if ((v1094 & 2) != 0)
            {
              v1103 = v1097 + v1093;
              if ((v1094 & 1) != 0)
              {
                do
                {
                  v1104 = v459 * (unint64_t)v1103;
                  v1105 = *(_QWORD *)(v460 + (v1104 >> 3));
                  v1106 = (v1105 >> (v1104 & 7)) & v1089;
                  if (v459 == 64)
                    v1106 = v1105;
                  ++v1103;
                }
                while ((v1106 & v1088) == 0);
              }
              do
              {
                v1107 = v459 * (unint64_t)v1103;
                v1108 = *(_QWORD *)(v460 + (v1107 >> 3));
                v1109 = (v1108 >> (v1107 & 7)) & v1089;
                if (v459 == 64)
                  v1109 = v1108;
                *((double *)this + (v1109 & v1090)) = *(double *)(v464 + 8 * v1103++)
                                                                  + *((double *)this + (v1109 & v1090));
              }
              while ((v1109 & v1088) == 0);
LABEL_1087:
              v1081 = (v1081 + 1);
              if (v130 <= v1081)
                goto LABEL_2161;
              goto LABEL_1056;
            }
            v1098 = (v1097 * v124);
LABEL_1074:
            v1092 = (_DWORD *)((char *)v1092 + v1098);
            break;
          default:
LABEL_1073:
            v1098 = v124;
            if ((v1094 & 1) == 0)
              goto LABEL_1074;
            v1099 = ((*(_DWORD *)((char *)v1092 + v1086) >> v1084) & v1085) + v1093;
            do
            {
              v1100 = v459 * (unint64_t)v1099;
              v1101 = *(_QWORD *)(v460 + (v1100 >> 3));
              v1102 = (v1101 >> (v1100 & 7)) & v1089;
              if (v459 == 64)
                v1102 = v1101;
              *((double *)this + (v1102 & v1090)) = *(double *)(v464 + 8 * v1099++)
                                                                + *((double *)this + (v1102 & v1090));
            }
            while ((v1102 & v1088) == 0);
            goto LABEL_1087;
        }
      }
    case 0xE:
      v2213 = 0;
      v2214 = 0;
      memset(v2211, 0, sizeof(v2211));
      v2212 = (CoreML::Archiver::MMappedContentManager *)&v2213;
      HIDWORD(v2211[0]) = 64;
      v2218 = 0;
      v2219 = 0;
      v2215 = 0u;
      v2216 = 0u;
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      DWORD1(v2215) = 64;
      v2220 = 0u;
      v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      v2223 = 0;
      DWORD1(v2220) = 64;
      v2225 = 0;
      v2226 = 0;
      v2224 = 0;
      *(_OWORD *)__p = *(_OWORD *)a2;
      v79 = *((_QWORD *)a2 + 2);
      v262 = a2 + 3;
      v2205 = v79;
      v2206 = i3 + 3;
      v263 = (uint64_t)&i3[v79 + 3];
      v264 = *(_OWORD *)(v263 + 16);
      v2207 = *(_OWORD *)v263;
      v2208 = v264;
      v265 = WORD2(v2207);
      v266 = *(_QWORD *)(v263 + 32);
      v267 = v263 + 40;
      v2209 = v266 / WORD2(v2207);
      v2210 = (void *)(v263 + 40);
      if (v266 != v2209 * WORD2(v2207))
      {
        v2172 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v2172, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2172, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v268 = v267 + v266;
      v269 = 8 - (v268 & 7);
      if ((v268 & 7) == 0)
        v269 = 0;
      v270 = v268 + v269;
      v271 = *(unsigned int *)(v270 + 4);
      LODWORD(v2211[0]) = *(_DWORD *)v270;
      HIDWORD(v2211[0]) = v271;
      *(_OWORD *)&v2211[1] = *(_OWORD *)(v270 + 8);
      v272 = v2211[1];
      if (v2211[1])
      {
        v273 = v270 + 32;
        v2211[2] = *(_QWORD *)(v270 + 24);
        v2211[3] = v270 + 32;
        v274 = v270 + 32 + 8 * v2211[2];
      }
      else
      {
        v273 = 0;
        v274 = v270 + 24;
      }
      if ((v274 & 7) != 0)
        v274 = (v274 & 0xFFFFFFFFFFFFFFF8) + 8;
      v2215 = *(_OWORD *)v274;
      *(_QWORD *)&v2216 = *(_QWORD *)(v274 + 16);
      if (*((_QWORD *)&v2215 + 1))
      {
        *(_QWORD *)&v2216 = *(_QWORD *)(v274 + 24);
        *((_QWORD *)&v2216 + 1) = v274 + 32;
        v716 = v274 + 32 + 8 * v2216;
      }
      else
      {
        v716 = v274 + 24;
      }
      v717 = 8 - (v716 & 7);
      if ((v716 & 7) == 0)
        v717 = 0;
      v719 = v716 + v717 + 8;
      v718 = *(_QWORD *)(v716 + v717);
      v720 = v719 + 8 * v718;
      v2225 = v718;
      v2226 = v719;
      if ((v720 & 7) != 0)
        v721 = 8 - (v720 & 7);
      else
        v721 = 0;
      v722 = v720 + v721;
      v2220 = *(_OWORD *)v722;
      *(_QWORD *)&v2221 = *(_QWORD *)(v722 + 16);
      if (*((_QWORD *)&v2220 + 1))
      {
        *(_QWORD *)&v2221 = *(_QWORD *)(v722 + 24);
        *((_QWORD *)&v2221 + 1) = v722 + 32;
        v723 = v722 + 32 + 8 * v2221;
      }
      else
      {
        v723 = v722 + 24;
      }
      v724 = 8 - (v723 & 7);
      if ((v723 & 7) == 0)
        v724 = 0;
      v366 = *(_DWORD *)(v723 + v724);
      v2227 = v366;
      if (v79)
        memmove(this, v262, 8 * v79);
      switch(BYTE13(v2207))
      {
        case 0:
          if (!v2211[1])
            goto LABEL_2134;
          v725 = 0;
          v726 = ~(-1 << SBYTE6(v2207));
          v727 = BYTE6(v2207) & 7;
          v728 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v729 = ~(-1 << SBYTE8(v2207));
          v730 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v731 = (unint64_t)BYTE6(v2207) >> 3;
          v732 = DWORD2(v2208);
          v733 = DWORD2(v2208);
          while (1)
          {
            v734 = (*(_QWORD *)(v273 + ((v725 * v271) >> 3)) >> ((v725 * v271) & 7)) & ~(-1 << v271);
            if ((_DWORD)v271 == 64)
              v734 = *(_QWORD *)(v273 + ((v725 * v271) >> 3));
            for (mm = (_DWORD *)(v267 + (v734 * v265)); ; mm = (_DWORD *)((char *)mm + v738))
            {
              v736 = *(_DWORD *)((char *)mm + v731) >> v727;
              if ((((*(double *)&a3[8 * (*mm & v726)] > *(double *)((char *)mm + v265 - 8)) ^ ((v736 & 8) >> 3)) & 1) != 0)
                break;
              v738 = v265;
              if ((v736 & 1) != 0)
              {
                if (v732)
                {
                  v742 = v732 * (((*(_DWORD *)((char *)mm + v730) >> v728) & v729) + v725 + v734);
                  v743 = (double *)this;
                  v744 = v733;
                  do
                  {
                    *v743 = *(double *)(v719 + 8 * v742) + *v743;
                    ++v743;
                    ++v742;
                    --v744;
                  }
                  while (v744);
                }
                goto LABEL_678;
              }
LABEL_670:
              ;
            }
            v737 = (*(_DWORD *)((char *)mm + v730) >> v728) & v729;
            if ((v736 & 2) == 0)
              break;
            if (v732)
            {
              v739 = v732 * (v725 + v734 + v737 + (v736 & 1));
              v740 = (double *)this;
              v741 = v733;
              do
              {
                *v740 = *(double *)(v719 + 8 * v739) + *v740;
                ++v740;
                ++v739;
                --v741;
              }
              while (v741);
            }
LABEL_678:
            v725 = (v725 + 1);
            if (v272 <= v725)
              goto LABEL_2134;
          }
          v738 = (v737 * v265);
          goto LABEL_670;
        case 1:
          if (!v2211[1])
            goto LABEL_2134;
          v2080 = 0;
          v2081 = ~(-1 << SBYTE6(v2207));
          v2082 = BYTE6(v2207) & 7;
          v2083 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v2084 = ~(-1 << SBYTE8(v2207));
          v2085 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v2086 = (unint64_t)BYTE6(v2207) >> 3;
          v2087 = DWORD2(v2208);
          v2088 = DWORD2(v2208);
          while (1)
          {
            v2089 = (*(_QWORD *)(v273 + ((v2080 * v271) >> 3)) >> ((v2080 * v271) & 7)) & ~(-1 << v271);
            if ((_DWORD)v271 == 64)
              v2089 = *(_QWORD *)(v273 + ((v2080 * v271) >> 3));
            for (nn = (_DWORD *)(v267 + (v2089 * v265)); ; nn = (_DWORD *)((char *)nn + v2092))
            {
              v2091 = *(_DWORD *)((char *)nn + v2086) >> v2082;
              if ((((*(double *)&a3[8 * (*nn & v2081)] <= *(double *)((char *)nn + v265 - 8)) ^ ((v2091 & 8) >> 3)) & 1) != 0)
                break;
              v2093 = (*(_DWORD *)((char *)nn + v2085) >> v2083) & v2084;
              if ((v2091 & 2) != 0)
              {
                if (v2087)
                {
                  v2097 = v2087 * (v2080 + v2089 + v2093 + (v2091 & 1));
                  v2098 = (double *)this;
                  v2099 = v2088;
                  do
                  {
                    *v2098 = *(double *)(v719 + 8 * v2097) + *v2098;
                    ++v2098;
                    ++v2097;
                    --v2099;
                  }
                  while (v2099);
                }
                goto LABEL_2105;
              }
              v2092 = (v2093 * v265);
LABEL_2097:
              ;
            }
            v2092 = v265;
            if ((v2091 & 1) == 0)
              goto LABEL_2097;
            if (v2087)
            {
              v2094 = v2087 * (((*(_DWORD *)((char *)nn + v2085) >> v2083) & v2084) + v2080 + v2089);
              v2095 = (double *)this;
              v2096 = v2088;
              do
              {
                *v2095 = *(double *)(v719 + 8 * v2094) + *v2095;
                ++v2095;
                ++v2094;
                --v2096;
              }
              while (v2096);
            }
LABEL_2105:
            v2080 = (v2080 + 1);
            if (v272 <= v2080)
              goto LABEL_2134;
          }
        case 2:
          if (!v2211[1])
            goto LABEL_2134;
          v1836 = 0;
          v1837 = ~(-1 << SBYTE6(v2207));
          v1838 = BYTE6(v2207) & 7;
          v1839 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1840 = ~(-1 << SBYTE8(v2207));
          v1841 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1842 = (unint64_t)BYTE6(v2207) >> 3;
          v1843 = DWORD2(v2208);
          v1844 = DWORD2(v2208);
          while (1)
          {
            v1845 = (*(_QWORD *)(v273 + ((v1836 * v271) >> 3)) >> ((v1836 * v271) & 7)) & ~(-1 << v271);
            if ((_DWORD)v271 == 64)
              v1845 = *(_QWORD *)(v273 + ((v1836 * v271) >> 3));
            for (i1 = (_DWORD *)(v267 + (v1845 * v265)); ; i1 = (_DWORD *)((char *)i1 + v1849))
            {
              v1847 = *(_DWORD *)((char *)i1 + v1842) >> v1838;
              if ((((*(double *)&a3[8 * (*i1 & v1837)] >= *(double *)((char *)i1 + v265 - 8)) ^ ((v1847 & 8) >> 3)) & 1) != 0)
                break;
              v1849 = v265;
              if ((v1847 & 1) != 0)
              {
                if (v1843)
                {
                  v1853 = v1843 * (((*(_DWORD *)((char *)i1 + v1841) >> v1839) & v1840) + v1836 + v1845);
                  v1854 = (double *)this;
                  v1855 = v1844;
                  do
                  {
                    *v1854 = *(double *)(v719 + 8 * v1853) + *v1854;
                    ++v1854;
                    ++v1853;
                    --v1855;
                  }
                  while (v1855);
                }
                goto LABEL_1874;
              }
LABEL_1866:
              ;
            }
            v1848 = (*(_DWORD *)((char *)i1 + v1841) >> v1839) & v1840;
            if ((v1847 & 2) == 0)
              break;
            if (v1843)
            {
              v1850 = v1843 * (v1836 + v1845 + v1848 + (v1847 & 1));
              v1851 = (double *)this;
              v1852 = v1844;
              do
              {
                *v1851 = *(double *)(v719 + 8 * v1850) + *v1851;
                ++v1851;
                ++v1850;
                --v1852;
              }
              while (v1852);
            }
LABEL_1874:
            v1836 = (v1836 + 1);
            if (v272 <= v1836)
              goto LABEL_2134;
          }
          v1849 = (v1848 * v265);
          goto LABEL_1866;
        case 3:
          if (!v2211[1])
            goto LABEL_2134;
          v1981 = 0;
          v1982 = ~(-1 << SBYTE6(v2207));
          v1983 = BYTE6(v2207) & 7;
          v1984 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1985 = ~(-1 << SBYTE8(v2207));
          v1986 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1987 = (unint64_t)BYTE6(v2207) >> 3;
          v1988 = DWORD2(v2208);
          v1989 = DWORD2(v2208);
          while (1)
          {
            v1990 = (*(_QWORD *)(v273 + ((v1981 * v271) >> 3)) >> ((v1981 * v271) & 7)) & ~(-1 << v271);
            if ((_DWORD)v271 == 64)
              v1990 = *(_QWORD *)(v273 + ((v1981 * v271) >> 3));
            for (i2 = (_DWORD *)(v267 + (v1990 * v265)); ; i2 = (_DWORD *)((char *)i2 + v1993))
            {
              v1992 = *(_DWORD *)((char *)i2 + v1987) >> v1983;
              if ((((*(double *)&a3[8 * (*i2 & v1982)] < *(double *)((char *)i2 + v265 - 8)) ^ ((v1992 & 8) >> 3)) & 1) != 0)
                break;
              v1994 = (*(_DWORD *)((char *)i2 + v1986) >> v1984) & v1985;
              if ((v1992 & 2) != 0)
              {
                if (v1988)
                {
                  v1998 = v1988 * (v1981 + v1990 + v1994 + (v1992 & 1));
                  v1999 = (double *)this;
                  v2000 = v1989;
                  do
                  {
                    *v1999 = *(double *)(v719 + 8 * v1998) + *v1999;
                    ++v1999;
                    ++v1998;
                    --v2000;
                  }
                  while (v2000);
                }
                goto LABEL_2010;
              }
              v1993 = (v1994 * v265);
LABEL_2002:
              ;
            }
            v1993 = v265;
            if ((v1992 & 1) == 0)
              goto LABEL_2002;
            if (v1988)
            {
              v1995 = v1988 * (((*(_DWORD *)((char *)i2 + v1986) >> v1984) & v1985) + v1981 + v1990);
              v1996 = (double *)this;
              v1997 = v1989;
              do
              {
                *v1996 = *(double *)(v719 + 8 * v1995) + *v1996;
                ++v1996;
                ++v1995;
                --v1997;
              }
              while (v1997);
            }
LABEL_2010:
            v1981 = (v1981 + 1);
            if (v272 <= v1981)
              goto LABEL_2134;
          }
        case 4:
          if (!v2211[1])
            goto LABEL_2134;
          v1624 = 0;
          v1625 = ~(-1 << SBYTE6(v2207));
          v1626 = BYTE6(v2207) & 7;
          v1627 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1628 = ~(-1 << SBYTE8(v2207));
          v1629 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1630 = (unint64_t)BYTE6(v2207) >> 3;
          v1631 = DWORD2(v2208);
          v1632 = DWORD2(v2208);
          break;
        default:
          goto LABEL_2134;
      }
LABEL_1627:
      v1633 = (*(_QWORD *)(v273 + ((v1624 * v271) >> 3)) >> ((v1624 * v271) & 7)) & ~(-1 << v271);
      if ((_DWORD)v271 == 64)
        v1633 = *(_QWORD *)(v273 + ((v1624 * v271) >> 3));
      v1634 = (_DWORD *)(v267 + (v1633 * v265));
      while (1)
      {
        v1635 = *(_DWORD *)((char *)v1634 + v1630) >> v1626;
        v1636 = *(double *)&a3[8 * (*v1634 & v1625)];
        v1637 = *(double *)((char *)v1634 + v265 - 8);
        switch((v1635 >> 3) & 7)
        {
          case 0u:
            if (v1636 > v1637)
              goto LABEL_1634;
            goto LABEL_1643;
          case 1u:
            if (v1636 < v1637)
              goto LABEL_1643;
            goto LABEL_1634;
          case 2u:
            if (v1636 >= v1637)
              goto LABEL_1643;
            goto LABEL_1634;
          case 3u:
            if (v1636 > v1637)
              goto LABEL_1643;
            goto LABEL_1634;
          case 4u:
            if (v1636 != v1637)
              goto LABEL_1634;
            goto LABEL_1643;
          case 5u:
            if (v1636 != v1637)
              goto LABEL_1643;
LABEL_1634:
            v1638 = (*(_DWORD *)((char *)v1634 + v1629) >> v1627) & v1628;
            if ((v1635 & 2) != 0)
            {
              if (v1631)
              {
                v1643 = v1631 * (v1624 + v1633 + v1638 + ((*(_DWORD *)((char *)v1634 + v1630) >> v1626) & 1));
                v1644 = (double *)this;
                v1645 = v1632;
                do
                {
                  *v1644 = *(double *)(v719 + 8 * v1643) + *v1644;
                  ++v1644;
                  ++v1643;
                  --v1645;
                }
                while (v1645);
              }
LABEL_1652:
              v1624 = (v1624 + 1);
              if (v272 <= v1624)
                goto LABEL_2134;
              goto LABEL_1627;
            }
            v1639 = (v1638 * v265);
LABEL_1644:
            v1634 = (_DWORD *)((char *)v1634 + v1639);
            break;
          default:
LABEL_1643:
            v1639 = v265;
            if ((v1635 & 1) == 0)
              goto LABEL_1644;
            if (v1631)
            {
              v1640 = v1631 * (((*(_DWORD *)((char *)v1634 + v1629) >> v1627) & v1628) + v1624 + v1633);
              v1641 = (double *)this;
              v1642 = v1632;
              do
              {
                *v1641 = *(double *)(v719 + 8 * v1640) + *v1641;
                ++v1641;
                ++v1640;
                --v1642;
              }
              while (v1642);
            }
            goto LABEL_1652;
        }
      }
    case 0xF:
      v2213 = 0;
      v2214 = 0;
      memset(v2211, 0, sizeof(v2211));
      v2212 = (CoreML::Archiver::MMappedContentManager *)&v2213;
      HIDWORD(v2211[0]) = 64;
      v2218 = 0;
      v2219 = 0;
      v2215 = 0u;
      v2216 = 0u;
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      DWORD1(v2215) = 64;
      v2220 = 0u;
      v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      v2223 = 0;
      DWORD1(v2220) = 64;
      v2225 = 0;
      v2226 = 0;
      v2224 = 0;
      *(_OWORD *)__p = *(_OWORD *)a2;
      v79 = *((_QWORD *)a2 + 2);
      v80 = a2 + 3;
      v2205 = v79;
      v2206 = i3 + 3;
      v81 = (uint64_t)&i3[v79 + 3];
      v82 = *(_OWORD *)(v81 + 16);
      v2207 = *(_OWORD *)v81;
      v2208 = v82;
      v83 = WORD2(v2207);
      v84 = *(_QWORD *)(v81 + 32);
      v85 = v81 + 40;
      v2209 = v84 / WORD2(v2207);
      v2210 = (void *)(v81 + 40);
      if (v84 != v2209 * WORD2(v2207))
      {
        v2161 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v2161, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2161, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v86 = v85 + v84;
      v87 = 8 - (v86 & 7);
      if ((v86 & 7) == 0)
        v87 = 0;
      v88 = v86 + v87;
      v89 = *(unsigned int *)(v88 + 4);
      LODWORD(v2211[0]) = *(_DWORD *)v88;
      HIDWORD(v2211[0]) = v89;
      *(_OWORD *)&v2211[1] = *(_OWORD *)(v88 + 8);
      v90 = v2211[1];
      if (v2211[1])
      {
        v91 = v88 + 32;
        v2211[2] = *(_QWORD *)(v88 + 24);
        v2211[3] = v88 + 32;
        v92 = v88 + 32 + 8 * v2211[2];
      }
      else
      {
        v91 = 0;
        v92 = v88 + 24;
      }
      if ((v92 & 7) != 0)
        v92 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
      v2215 = *(_OWORD *)v92;
      *(_QWORD *)&v2216 = *(_QWORD *)(v92 + 16);
      if (*((_QWORD *)&v2215 + 1))
      {
        *(_QWORD *)&v2216 = *(_QWORD *)(v92 + 24);
        *((_QWORD *)&v2216 + 1) = v92 + 32;
        v357 = v92 + 32 + 8 * v2216;
      }
      else
      {
        v357 = v92 + 24;
      }
      v358 = 8 - (v357 & 7);
      if ((v357 & 7) == 0)
        v358 = 0;
      v360 = v357 + v358 + 8;
      v359 = *(_QWORD *)(v357 + v358);
      v361 = v360 + 8 * v359;
      v2225 = v359;
      v2226 = v360;
      if ((v361 & 7) != 0)
        v362 = 8 - (v361 & 7);
      else
        v362 = 0;
      v363 = v361 + v362;
      v2220 = *(_OWORD *)v363;
      *(_QWORD *)&v2221 = *(_QWORD *)(v363 + 16);
      if (*((_QWORD *)&v2220 + 1))
      {
        *(_QWORD *)&v2221 = *(_QWORD *)(v363 + 24);
        *((_QWORD *)&v2221 + 1) = v363 + 32;
        v364 = v363 + 32 + 8 * v2221;
      }
      else
      {
        v364 = v363 + 24;
      }
      v365 = 8 - (v364 & 7);
      if ((v364 & 7) == 0)
        v365 = 0;
      v366 = *(_DWORD *)(v364 + v365);
      v2227 = v366;
      if (v79)
        memmove(this, v80, 8 * v79);
      switch(BYTE13(v2207))
      {
        case 0:
          if (!v2211[1])
            goto LABEL_2134;
          v367 = 0;
          v368 = ~(-1 << SBYTE6(v2207));
          v369 = BYTE6(v2207) & 7;
          v370 = ~(-1 << SBYTE8(v2207));
          v371 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v372 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v373 = (unint64_t)BYTE6(v2207) >> 3;
          v374 = *(double *)this;
          while (1)
          {
            v375 = (*(_QWORD *)(v91 + ((unint64_t)(v367 * v89) >> 3)) >> ((v367 * v89) & 7)) & ~(-1 << v89);
            if ((_DWORD)v89 == 64)
              v375 = *(_QWORD *)(v91 + ((unint64_t)(v367 * v89) >> 3));
            v376 = (_QWORD *)(v85 + v375 * v83);
            v377 = v375 + v367;
            while (1)
            {
              v378 = *(_DWORD *)((char *)v376 + v373) >> v369;
              if ((((*(double *)&a3[8 * (*v376 & v368)] > *(double *)((char *)v376 + v83 - 8)) ^ ((v378 & 8) >> 3)) & 1) != 0)
                break;
              v380 = v83;
              if ((v378 & 1) != 0)
              {
                v381 = ((*(_QWORD *)((char *)v376 + v372) >> v371) & v370) + v377;
                goto LABEL_263;
              }
LABEL_260:
              v376 = (_QWORD *)((char *)v376 + v380);
            }
            v379 = (*(_QWORD *)((char *)v376 + v372) >> v371) & v370;
            if ((v378 & 2) == 0)
              break;
            v381 = v377 + v379 + (v378 & 1);
LABEL_263:
            v374 = v374 + *(double *)(v360 + 8 * v381);
            *(double *)this = v374;
            if (++v367 == v90)
              goto LABEL_2134;
          }
          v380 = v379 * v83;
          goto LABEL_260;
        case 1:
          if (!v2211[1])
            goto LABEL_2134;
          v1001 = 0;
          v1002 = ~(-1 << SBYTE6(v2207));
          v1003 = BYTE6(v2207) & 7;
          v1004 = ~(-1 << SBYTE8(v2207));
          v1005 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1006 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1007 = (unint64_t)BYTE6(v2207) >> 3;
          v1008 = *(double *)this;
          while (1)
          {
            v1009 = (*(_QWORD *)(v91 + ((unint64_t)(v1001 * v89) >> 3)) >> ((v1001 * v89) & 7)) & ~(-1 << v89);
            if ((_DWORD)v89 == 64)
              v1009 = *(_QWORD *)(v91 + ((unint64_t)(v1001 * v89) >> 3));
            v1010 = (_QWORD *)(v85 + v1009 * v83);
            v1011 = v1009 + v1001;
            while (1)
            {
              v1012 = *(_DWORD *)((char *)v1010 + v1007) >> v1003;
              if ((((*(double *)&a3[8 * (*v1010 & v1002)] <= *(double *)((char *)v1010 + v83 - 8)) ^ ((v1012 & 8) >> 3)) & 1) != 0)
                break;
              v1014 = (*(_QWORD *)((char *)v1010 + v1006) >> v1005) & v1004;
              if ((v1012 & 2) != 0)
              {
                v1015 = v1011 + v1014 + (v1012 & 1);
                goto LABEL_975;
              }
              v1013 = v1014 * v83;
LABEL_973:
              v1010 = (_QWORD *)((char *)v1010 + v1013);
            }
            v1013 = v83;
            if ((v1012 & 1) == 0)
              goto LABEL_973;
            v1015 = ((*(_QWORD *)((char *)v1010 + v1006) >> v1005) & v1004) + v1011;
LABEL_975:
            v1008 = v1008 + *(double *)(v360 + 8 * v1015);
            *(double *)this = v1008;
            if (++v1001 == v90)
              goto LABEL_2134;
          }
        case 2:
          if (!v2211[1])
            goto LABEL_2134;
          v971 = 0;
          v972 = ~(-1 << SBYTE6(v2207));
          v973 = BYTE6(v2207) & 7;
          v974 = ~(-1 << SBYTE8(v2207));
          v975 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v976 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v977 = (unint64_t)BYTE6(v2207) >> 3;
          v978 = *(double *)this;
          while (1)
          {
            v979 = (*(_QWORD *)(v91 + ((unint64_t)(v971 * v89) >> 3)) >> ((v971 * v89) & 7)) & ~(-1 << v89);
            if ((_DWORD)v89 == 64)
              v979 = *(_QWORD *)(v91 + ((unint64_t)(v971 * v89) >> 3));
            v980 = (_QWORD *)(v85 + v979 * v83);
            v981 = v979 + v971;
            while (1)
            {
              v982 = *(_DWORD *)((char *)v980 + v977) >> v973;
              if ((((*(double *)&a3[8 * (*v980 & v972)] >= *(double *)((char *)v980 + v83 - 8)) ^ ((v982 & 8) >> 3)) & 1) != 0)
                break;
              v984 = v83;
              if ((v982 & 1) != 0)
              {
                v985 = ((*(_QWORD *)((char *)v980 + v976) >> v975) & v974) + v981;
                goto LABEL_947;
              }
LABEL_944:
              v980 = (_QWORD *)((char *)v980 + v984);
            }
            v983 = (*(_QWORD *)((char *)v980 + v976) >> v975) & v974;
            if ((v982 & 2) == 0)
              break;
            v985 = v981 + v983 + (v982 & 1);
LABEL_947:
            v978 = v978 + *(double *)(v360 + 8 * v985);
            *(double *)this = v978;
            if (++v971 == v90)
              goto LABEL_2134;
          }
          v984 = v983 * v83;
          goto LABEL_944;
        case 3:
          if (!v2211[1])
            goto LABEL_2134;
          v986 = 0;
          v987 = ~(-1 << SBYTE6(v2207));
          v988 = BYTE6(v2207) & 7;
          v989 = ~(-1 << SBYTE8(v2207));
          v990 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v991 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v992 = (unint64_t)BYTE6(v2207) >> 3;
          v993 = *(double *)this;
          while (1)
          {
            v994 = (*(_QWORD *)(v91 + ((unint64_t)(v986 * v89) >> 3)) >> ((v986 * v89) & 7)) & ~(-1 << v89);
            if ((_DWORD)v89 == 64)
              v994 = *(_QWORD *)(v91 + ((unint64_t)(v986 * v89) >> 3));
            v995 = (_QWORD *)(v85 + v994 * v83);
            v996 = v994 + v986;
            while (1)
            {
              v997 = *(_DWORD *)((char *)v995 + v992) >> v988;
              if ((((*(double *)&a3[8 * (*v995 & v987)] < *(double *)((char *)v995 + v83 - 8)) ^ ((v997 & 8) >> 3)) & 1) != 0)
                break;
              v999 = (*(_QWORD *)((char *)v995 + v991) >> v990) & v989;
              if ((v997 & 2) != 0)
              {
                v1000 = v996 + v999 + (v997 & 1);
                goto LABEL_961;
              }
              v998 = v999 * v83;
LABEL_959:
              v995 = (_QWORD *)((char *)v995 + v998);
            }
            v998 = v83;
            if ((v997 & 1) == 0)
              goto LABEL_959;
            v1000 = ((*(_QWORD *)((char *)v995 + v991) >> v990) & v989) + v996;
LABEL_961:
            v993 = v993 + *(double *)(v360 + 8 * v1000);
            *(double *)this = v993;
            if (++v986 == v90)
              goto LABEL_2134;
          }
        case 4:
          if (!v2211[1])
            goto LABEL_2134;
          v896 = 0;
          v897 = ~(-1 << SBYTE6(v2207));
          v898 = BYTE6(v2207) & 7;
          v899 = ~(-1 << SBYTE8(v2207));
          v900 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v901 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v902 = (unint64_t)BYTE6(v2207) >> 3;
          v903 = *(double *)this;
          break;
        default:
          goto LABEL_2134;
      }
LABEL_859:
      v904 = (*(_QWORD *)(v91 + ((unint64_t)(v896 * v89) >> 3)) >> ((v896 * v89) & 7)) & ~(-1 << v89);
      if ((_DWORD)v89 == 64)
        v904 = *(_QWORD *)(v91 + ((unint64_t)(v896 * v89) >> 3));
      v905 = (_QWORD *)(v85 + v904 * v83);
      v906 = v904 + v896;
      while (1)
      {
        v907 = *(_DWORD *)((char *)v905 + v902) >> v898;
        v908 = *(double *)&a3[8 * (*v905 & v897)];
        v909 = *(double *)((char *)v905 + v83 - 8);
        switch((v907 >> 3) & 7)
        {
          case 0u:
            if (v908 > v909)
              goto LABEL_866;
            goto LABEL_875;
          case 1u:
            if (v908 < v909)
              goto LABEL_875;
            goto LABEL_866;
          case 2u:
            if (v908 >= v909)
              goto LABEL_875;
            goto LABEL_866;
          case 3u:
            if (v908 > v909)
              goto LABEL_875;
            goto LABEL_866;
          case 4u:
            if (v908 != v909)
              goto LABEL_866;
            goto LABEL_875;
          case 5u:
            if (v908 != v909)
              goto LABEL_875;
LABEL_866:
            v910 = (*(_QWORD *)((char *)v905 + v901) >> v900) & v899;
            if ((v907 & 2) != 0)
            {
              v912 = v906 + v910 + (v907 & 1);
LABEL_879:
              v903 = v903 + *(double *)(v360 + 8 * v912);
              *(double *)this = v903;
              if (++v896 == v90)
                goto LABEL_2134;
              goto LABEL_859;
            }
            v911 = v910 * v83;
LABEL_876:
            v905 = (_QWORD *)((char *)v905 + v911);
            break;
          default:
LABEL_875:
            v911 = v83;
            if ((v907 & 1) == 0)
              goto LABEL_876;
            v912 = ((*(_QWORD *)((char *)v905 + v901) >> v900) & v899) + v906;
            goto LABEL_879;
        }
      }
    case 0x10:
      v2213 = 0;
      v2214 = 0;
      memset(v2211, 0, sizeof(v2211));
      v2212 = (CoreML::Archiver::MMappedContentManager *)&v2213;
      HIDWORD(v2211[0]) = 64;
      v2218 = 0;
      v2219 = 0;
      v2215 = 0u;
      v2216 = 0u;
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      DWORD1(v2215) = 64;
      v2220 = 0u;
      v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      v2223 = 0;
      DWORD1(v2220) = 64;
      v2225 = 0;
      v2226 = 0;
      v2224 = 0;
      *(_OWORD *)__p = *(_OWORD *)a2;
      v93 = *((_QWORD *)a2 + 2);
      v159 = a2 + 3;
      v2205 = v93;
      v2206 = i3 + 3;
      v160 = (uint64_t)&i3[v93 + 3];
      v161 = *(_OWORD *)(v160 + 16);
      v2207 = *(_OWORD *)v160;
      v2208 = v161;
      v162 = WORD2(v2207);
      v163 = *(_QWORD *)(v160 + 32);
      v164 = v160 + 40;
      v2209 = v163 / WORD2(v2207);
      v2210 = (void *)(v160 + 40);
      if (v163 != v2209 * WORD2(v2207))
      {
        v2167 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v2167, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2167, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v165 = v164 + v163;
      v166 = 8 - (v165 & 7);
      if ((v165 & 7) == 0)
        v166 = 0;
      v167 = v165 + v166;
      v168 = *(unsigned int *)(v167 + 4);
      LODWORD(v2211[0]) = *(_DWORD *)v167;
      HIDWORD(v2211[0]) = v168;
      v169 = *(_OWORD *)(v167 + 8);
      *(_OWORD *)&v2211[1] = v169;
      v170 = v169;
      if ((_QWORD)v169)
      {
        v171 = v167 + 32;
        v2211[2] = *(_QWORD *)(v167 + 24);
        v2211[3] = v167 + 32;
        v172 = v167 + 32 + 8 * v2211[2];
      }
      else
      {
        v171 = 0;
        v172 = v167 + 24;
      }
      if ((v172 & 7) != 0)
        v172 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
      LODWORD(v2215) = *(_DWORD *)v172;
      v555 = *(unsigned int *)(v172 + 4);
      DWORD1(v2215) = *(_DWORD *)(v172 + 4);
      *((_QWORD *)&v2215 + 1) = *(_QWORD *)(v172 + 8);
      *(_QWORD *)&v2216 = *(_QWORD *)(v172 + 16);
      if (*((_QWORD *)&v2215 + 1))
      {
        v556 = v172 + 32;
        *(_QWORD *)&v2216 = *(_QWORD *)(v172 + 24);
        *((_QWORD *)&v2216 + 1) = v172 + 32;
        v557 = v172 + 32 + 8 * v2216;
      }
      else
      {
        v556 = 0;
        v557 = v172 + 24;
      }
      v558 = 8 - (v557 & 7);
      if ((v557 & 7) == 0)
        v558 = 0;
      v560 = v557 + v558 + 8;
      v559 = *(_QWORD *)(v557 + v558);
      v561 = v560 + 8 * v559;
      v2225 = v559;
      v2226 = v560;
      if ((v561 & 7) != 0)
        v562 = 8 - (v561 & 7);
      else
        v562 = 0;
      v563 = v561 + v562;
      v2220 = *(_OWORD *)v563;
      *(_QWORD *)&v2221 = *(_QWORD *)(v563 + 16);
      if (*((_QWORD *)&v2220 + 1))
      {
        *(_QWORD *)&v2221 = *(_QWORD *)(v563 + 24);
        *((_QWORD *)&v2221 + 1) = v563 + 32;
        v564 = v563 + 32 + 8 * v2221;
      }
      else
      {
        v564 = v563 + 24;
      }
      v565 = 8 - (v564 & 7);
      if ((v564 & 7) == 0)
        v565 = 0;
      v393 = *(_DWORD *)(v564 + v565);
      v2227 = v393;
      if (v93)
      {
        v566 = 8 * v93;
        v2183 = (CoreML::Archiver::MMappedContentManager *)v560;
        v567 = v556;
        v568 = v169;
        v569 = v164;
        v570 = v171;
        v571 = v93;
        v572 = v393;
        memmove(this, v159, v566);
        v393 = v572;
        v93 = v571;
        v171 = v570;
        v164 = v569;
        v170 = v568;
        v556 = v567;
        v560 = (uint64_t)v2183;
      }
      switch(BYTE13(v2207))
      {
        case 0:
          if (!v170)
            goto LABEL_1837;
          v573 = 0;
          v574 = ~(-1 << SBYTE6(v2207));
          v575 = BYTE6(v2207) & 7;
          v576 = ~(-1 << SBYTE8(v2207));
          v577 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v578 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v579 = (unint64_t)BYTE6(v2207) >> 3;
          while (1)
          {
            v580 = (*(_QWORD *)(v171 + ((unint64_t)(v573 * v168) >> 3)) >> ((v573 * v168) & 7)) & ~(-1 << v168);
            if ((_DWORD)v168 == 64)
              v580 = *(_QWORD *)(v171 + ((unint64_t)(v573 * v168) >> 3));
            v581 = (_QWORD *)(v164 + v580 * v162);
            v582 = v580 + v573;
            while (1)
            {
              v583 = *(_DWORD *)((char *)v581 + v579) >> v575;
              if ((((*(double *)&a3[8 * (*v581 & v574)] > *(double *)((char *)v581 + v162 - 8)) ^ ((v583 & 8) >> 3)) & 1) != 0)
                break;
              v585 = v162;
              if ((v583 & 1) != 0)
              {
                v586 = ((*(_QWORD *)((char *)v581 + v578) >> v577) & v576) + v582;
                goto LABEL_491;
              }
LABEL_488:
              v581 = (_QWORD *)((char *)v581 + v585);
            }
            v584 = (*(_QWORD *)((char *)v581 + v578) >> v577) & v576;
            if ((v583 & 2) == 0)
              break;
            v586 = v582 + v584 + (v583 & 1);
LABEL_491:
            v587 = (*(_QWORD *)(v556 + ((unint64_t)(v586 * v555) >> 3)) >> ((v586 * v555) & 7)) & ~(-1 << v555);
            if ((_DWORD)v555 == 64)
              v587 = *(_QWORD *)(v556 + ((unint64_t)(v586 * v555) >> 3));
            *((double *)this + v587) = *(double *)(v560 + 8 * v586) + *((double *)this + v587);
            if (++v573 == v170)
              goto LABEL_1837;
          }
          v585 = v584 * v162;
          goto LABEL_488;
        case 1:
          if (!v170)
            goto LABEL_1837;
          v1728 = 0;
          v1729 = ~(-1 << SBYTE6(v2207));
          v1730 = BYTE6(v2207) & 7;
          v1731 = ~(-1 << SBYTE8(v2207));
          v1732 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1733 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1734 = (unint64_t)BYTE6(v2207) >> 3;
          while (1)
          {
            v1735 = (*(_QWORD *)(v171 + ((unint64_t)(v1728 * v168) >> 3)) >> ((v1728 * v168) & 7)) & ~(-1 << v168);
            if ((_DWORD)v168 == 64)
              v1735 = *(_QWORD *)(v171 + ((unint64_t)(v1728 * v168) >> 3));
            v1736 = (_QWORD *)(v164 + v1735 * v162);
            v1737 = v1735 + v1728;
            while (1)
            {
              v1738 = *(_DWORD *)((char *)v1736 + v1734) >> v1730;
              if ((((*(double *)&a3[8 * (*v1736 & v1729)] <= *(double *)((char *)v1736 + v162 - 8)) ^ ((v1738 & 8) >> 3)) & 1) != 0)
                break;
              v1740 = (*(_QWORD *)((char *)v1736 + v1733) >> v1732) & v1731;
              if ((v1738 & 2) != 0)
              {
                v1741 = v1737 + v1740 + (v1738 & 1);
                goto LABEL_1767;
              }
              v1739 = v1740 * v162;
LABEL_1765:
              v1736 = (_QWORD *)((char *)v1736 + v1739);
            }
            v1739 = v162;
            if ((v1738 & 1) == 0)
              goto LABEL_1765;
            v1741 = ((*(_QWORD *)((char *)v1736 + v1733) >> v1732) & v1731) + v1737;
LABEL_1767:
            v1742 = (*(_QWORD *)(v556 + ((unint64_t)(v1741 * v555) >> 3)) >> ((v1741 * v555) & 7)) & ~(-1 << v555);
            if ((_DWORD)v555 == 64)
              v1742 = *(_QWORD *)(v556 + ((unint64_t)(v1741 * v555) >> 3));
            *((double *)this + v1742) = *(double *)(v560 + 8 * v1741) + *((double *)this + v1742);
            if (++v1728 == v170)
              goto LABEL_1837;
          }
        case 2:
          if (!v170)
            goto LABEL_1837;
          v1462 = 0;
          v1463 = ~(-1 << SBYTE6(v2207));
          v1464 = BYTE6(v2207) & 7;
          v1465 = ~(-1 << SBYTE8(v2207));
          v1466 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1467 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1468 = (unint64_t)BYTE6(v2207) >> 3;
          while (1)
          {
            v1469 = (*(_QWORD *)(v171 + ((unint64_t)(v1462 * v168) >> 3)) >> ((v1462 * v168) & 7)) & ~(-1 << v168);
            if ((_DWORD)v168 == 64)
              v1469 = *(_QWORD *)(v171 + ((unint64_t)(v1462 * v168) >> 3));
            v1470 = (_QWORD *)(v164 + v1469 * v162);
            v1471 = v1469 + v1462;
            while (1)
            {
              v1472 = *(_DWORD *)((char *)v1470 + v1468) >> v1464;
              if ((((*(double *)&a3[8 * (*v1470 & v1463)] >= *(double *)((char *)v1470 + v162 - 8)) ^ ((v1472 & 8) >> 3)) & 1) != 0)
                break;
              v1474 = v162;
              if ((v1472 & 1) != 0)
              {
                v1475 = ((*(_QWORD *)((char *)v1470 + v1467) >> v1466) & v1465) + v1471;
                goto LABEL_1467;
              }
LABEL_1464:
              v1470 = (_QWORD *)((char *)v1470 + v1474);
            }
            v1473 = (*(_QWORD *)((char *)v1470 + v1467) >> v1466) & v1465;
            if ((v1472 & 2) == 0)
              break;
            v1475 = v1471 + v1473 + (v1472 & 1);
LABEL_1467:
            v1476 = (*(_QWORD *)(v556 + ((unint64_t)(v1475 * v555) >> 3)) >> ((v1475 * v555) & 7)) & ~(-1 << v555);
            if ((_DWORD)v555 == 64)
              v1476 = *(_QWORD *)(v556 + ((unint64_t)(v1475 * v555) >> 3));
            *((double *)this + v1476) = *(double *)(v560 + 8 * v1475) + *((double *)this + v1476);
            if (++v1462 == v170)
              goto LABEL_1837;
          }
          v1474 = v1473 * v162;
          goto LABEL_1464;
        case 3:
          if (!v170)
            goto LABEL_1837;
          v1609 = 0;
          v1610 = ~(-1 << SBYTE6(v2207));
          v1611 = BYTE6(v2207) & 7;
          v1612 = ~(-1 << SBYTE8(v2207));
          v1613 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1614 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1615 = (unint64_t)BYTE6(v2207) >> 3;
          while (1)
          {
            v1616 = (*(_QWORD *)(v171 + ((unint64_t)(v1609 * v168) >> 3)) >> ((v1609 * v168) & 7)) & ~(-1 << v168);
            if ((_DWORD)v168 == 64)
              v1616 = *(_QWORD *)(v171 + ((unint64_t)(v1609 * v168) >> 3));
            v1617 = (_QWORD *)(v164 + v1616 * v162);
            v1618 = v1616 + v1609;
            while (1)
            {
              v1619 = *(_DWORD *)((char *)v1617 + v1615) >> v1611;
              if ((((*(double *)&a3[8 * (*v1617 & v1610)] < *(double *)((char *)v1617 + v162 - 8)) ^ ((v1619 & 8) >> 3)) & 1) != 0)
                break;
              v1621 = (*(_QWORD *)((char *)v1617 + v1614) >> v1613) & v1612;
              if ((v1619 & 2) != 0)
              {
                v1622 = v1618 + v1621 + (v1619 & 1);
                goto LABEL_1621;
              }
              v1620 = v1621 * v162;
LABEL_1619:
              v1617 = (_QWORD *)((char *)v1617 + v1620);
            }
            v1620 = v162;
            if ((v1619 & 1) == 0)
              goto LABEL_1619;
            v1622 = ((*(_QWORD *)((char *)v1617 + v1614) >> v1613) & v1612) + v1618;
LABEL_1621:
            v1623 = (*(_QWORD *)(v556 + ((unint64_t)(v1622 * v555) >> 3)) >> ((v1622 * v555) & 7)) & ~(-1 << v555);
            if ((_DWORD)v555 == 64)
              v1623 = *(_QWORD *)(v556 + ((unint64_t)(v1622 * v555) >> 3));
            *((double *)this + v1623) = *(double *)(v560 + 8 * v1622) + *((double *)this + v1623);
            if (++v1609 == v170)
              goto LABEL_1837;
          }
        case 4:
          if (!v170)
            goto LABEL_1837;
          v1240 = 0;
          v1241 = ~(-1 << SBYTE6(v2207));
          v1242 = BYTE6(v2207) & 7;
          v1243 = ~(-1 << SBYTE8(v2207));
          v1244 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v1245 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                   + BYTE7(v2207)
                                   + BYTE6(v2207)) >> 3;
          v1246 = (unint64_t)BYTE6(v2207) >> 3;
          break;
        default:
          goto LABEL_1837;
      }
LABEL_1226:
      v1247 = (*(_QWORD *)(v171 + ((unint64_t)(v1240 * v168) >> 3)) >> ((v1240 * v168) & 7)) & ~(-1 << v168);
      if ((_DWORD)v168 == 64)
        v1247 = *(_QWORD *)(v171 + ((unint64_t)(v1240 * v168) >> 3));
      v1248 = (_QWORD *)(v164 + v1247 * v162);
      v1249 = v1247 + v1240;
      while (1)
      {
        v1250 = *(_DWORD *)((char *)v1248 + v1246) >> v1242;
        v1251 = *(double *)&a3[8 * (*v1248 & v1241)];
        v1252 = *(double *)((char *)v1248 + v162 - 8);
        switch((v1250 >> 3) & 7)
        {
          case 0u:
            if (v1251 > v1252)
              goto LABEL_1233;
            goto LABEL_1242;
          case 1u:
            if (v1251 < v1252)
              goto LABEL_1242;
            goto LABEL_1233;
          case 2u:
            if (v1251 >= v1252)
              goto LABEL_1242;
            goto LABEL_1233;
          case 3u:
            if (v1251 > v1252)
              goto LABEL_1242;
            goto LABEL_1233;
          case 4u:
            if (v1251 != v1252)
              goto LABEL_1233;
            goto LABEL_1242;
          case 5u:
            if (v1251 != v1252)
              goto LABEL_1242;
LABEL_1233:
            v1253 = (*(_QWORD *)((char *)v1248 + v1245) >> v1244) & v1243;
            if ((v1250 & 2) != 0)
            {
              v1255 = v1249 + v1253 + (v1250 & 1);
LABEL_1246:
              v1256 = (*(_QWORD *)(v556 + ((unint64_t)(v1255 * v555) >> 3)) >> ((v1255 * v555) & 7)) & ~(-1 << v555);
              if ((_DWORD)v555 == 64)
                v1256 = *(_QWORD *)(v556 + ((unint64_t)(v1255 * v555) >> 3));
              *((double *)this + v1256) = *(double *)(v560 + 8 * v1255) + *((double *)this + v1256);
              if (++v1240 == v170)
                goto LABEL_1837;
              goto LABEL_1226;
            }
            v1254 = v1253 * v162;
LABEL_1243:
            v1248 = (_QWORD *)((char *)v1248 + v1254);
            break;
          default:
LABEL_1242:
            v1254 = v162;
            if ((v1250 & 1) == 0)
              goto LABEL_1243;
            v1255 = ((*(_QWORD *)((char *)v1248 + v1245) >> v1244) & v1243) + v1249;
            goto LABEL_1246;
        }
      }
    case 0x11:
      v2213 = 0;
      v2214 = 0;
      memset(v2211, 0, sizeof(v2211));
      v2212 = (CoreML::Archiver::MMappedContentManager *)&v2213;
      HIDWORD(v2211[0]) = 64;
      v2218 = 0;
      v2219 = 0;
      v2215 = 0u;
      v2216 = 0u;
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      DWORD1(v2215) = 64;
      v2220 = 0u;
      v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      v2223 = 0;
      DWORD1(v2220) = 64;
      v2225 = 0;
      v2226 = 0;
      v2224 = 0;
      *(_OWORD *)__p = *(_OWORD *)a2;
      v66 = *((_QWORD *)a2 + 2);
      v67 = a2 + 3;
      v2205 = v66;
      v2206 = i3 + 3;
      v68 = (uint64_t)&i3[v66 + 3];
      v69 = *(_OWORD *)(v68 + 16);
      v2207 = *(_OWORD *)v68;
      v2208 = v69;
      v70 = WORD2(v2207);
      v71 = *(_QWORD *)(v68 + 32);
      v72 = v68 + 40;
      v2209 = v71 / WORD2(v2207);
      v2210 = (void *)(v68 + 40);
      if (v71 != v2209 * WORD2(v2207))
      {
        v2160 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v2160, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2160, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v73 = v72 + v71;
      v74 = 8 - (v73 & 7);
      if ((v73 & 7) == 0)
        v74 = 0;
      v75 = v73 + v74;
      v76 = *(unsigned int *)(v75 + 4);
      LODWORD(v2211[0]) = *(_DWORD *)v75;
      HIDWORD(v2211[0]) = v76;
      v77 = *(_OWORD *)(v75 + 8);
      *(_OWORD *)&v2211[1] = v77;
      if ((_QWORD)v77)
      {
        v2211[2] = *(_QWORD *)(v75 + 24);
        v2211[3] = v75 + 32;
        v2192 = (CoreML::Archiver::MMappedContentManager *)(v75 + 32);
        v78 = v75 + 32 + 8 * v2211[2];
      }
      else
      {
        v2192 = 0;
        v78 = v75 + 24;
      }
      if ((v78 & 7) != 0)
        v78 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
      LODWORD(v2215) = *(_DWORD *)v78;
      v314 = *(unsigned int *)(v78 + 4);
      DWORD1(v2215) = *(_DWORD *)(v78 + 4);
      *((_QWORD *)&v2215 + 1) = *(_QWORD *)(v78 + 8);
      *(_QWORD *)&v2216 = *(_QWORD *)(v78 + 16);
      if (*((_QWORD *)&v2215 + 1))
      {
        v315 = v78 + 32;
        *(_QWORD *)&v2216 = *(_QWORD *)(v78 + 24);
        *((_QWORD *)&v2216 + 1) = v78 + 32;
        v316 = v78 + 32 + 8 * v2216;
      }
      else
      {
        v315 = 0;
        v316 = v78 + 24;
      }
      v2179 = v77;
      if ((v316 & 7) != 0)
        v317 = 8 - (v316 & 7);
      else
        v317 = 0;
      v318 = v316 + v317 + 8 + 8 * *(_QWORD *)(v316 + v317);
      v2225 = *(_QWORD *)(v316 + v317);
      v2226 = v316 + v317 + 8;
      if ((v318 & 7) != 0)
        v319 = 8 - (v318 & 7);
      else
        v319 = 0;
      v320 = v318 + v319;
      LODWORD(v2220) = *(_DWORD *)v320;
      v321 = *(unsigned int *)(v320 + 4);
      DWORD1(v2220) = *(_DWORD *)(v320 + 4);
      *((_QWORD *)&v2220 + 1) = *(_QWORD *)(v320 + 8);
      *(_QWORD *)&v2221 = *(_QWORD *)(v320 + 16);
      v2177 = v72;
      if (*((_QWORD *)&v2220 + 1))
      {
        *(_QWORD *)&v2221 = *(_QWORD *)(v320 + 24);
        *((_QWORD *)&v2221 + 1) = v320 + 32;
        v322 = v320 + 32;
        v323 = v320 + 32 + 8 * v2221;
      }
      else
      {
        v322 = 0;
        v323 = v320 + 24;
      }
      v324 = 8 - (v323 & 7);
      if ((v323 & 7) == 0)
        v324 = 0;
      v2181 = *(_DWORD *)(v323 + v324);
      v2227 = v2181;
      v325 = (CoreML::Archiver::MMappedContentManager *)v66;
      if (v66)
      {
        v326 = v316;
        v327 = v317;
        memmove(this, v67, 8 * v66);
        v317 = v327;
        v316 = v326;
      }
      v2187 = v325;
      switch(BYTE13(v2207))
      {
        case 0:
          if (!v2179)
            goto LABEL_2161;
          v328 = 0;
          v329 = ~(-1 << SBYTE6(v2207));
          v330 = BYTE6(v2207) & 7;
          v331 = ~(-1 << SBYTE8(v2207));
          v332 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v333 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v334 = (unint64_t)BYTE6(v2207) >> 3;
          v335 = 1 << (BYTE11(v2207) - 1);
          v336 = ~(-1 << v314);
          v337 = ~v335;
          v338 = v317 + v316 + 8;
          while (1)
          {
            v339 = (*(_QWORD *)((char *)v2192 + ((unint64_t)(v328 * v76) >> 3)) >> ((v328 * v76) & 7)) & ~(-1 << v76);
            if ((_DWORD)v76 == 64)
              v339 = *(_QWORD *)((char *)v2192 + ((unint64_t)(v328 * v76) >> 3));
            v340 = (_QWORD *)(v2177 + v339 * v70);
            v341 = (*(_QWORD *)(v322 + ((unint64_t)(v328 * v321) >> 3)) >> ((v328 * v321) & 7)) & ~(-1 << v321);
            if ((_DWORD)v321 == 64)
              v341 = *(_QWORD *)(v322 + ((unint64_t)(v328 * v321) >> 3));
            while (1)
            {
              v342 = *(_DWORD *)((char *)v340 + v334) >> v330;
              if ((((*(double *)&a3[8 * (*v340 & v329)] > *(double *)((char *)v340 + v70 - 8)) ^ ((v342 & 8) >> 3)) & 1) != 0)
                break;
              v344 = v70;
              if ((v342 & 1) != 0)
              {
                v352 = ((*(_QWORD *)((char *)v340 + v333) >> v332) & v331) + v341;
                v353 = (double *)(v338 + 8 * v352);
                v354 = v314 * v352;
                do
                {
                  v355 = *(_QWORD *)(v315 + (v354 >> 3));
                  if ((_DWORD)v314 != 64)
                    v355 = (v355 >> (v354 & 7)) & v336;
                  v356 = *v353++;
                  *((double *)this + (v355 & v337)) = v356 + *((double *)this + (v355 & v337));
                  v354 += v314;
                }
                while ((v355 & v335) == 0);
                goto LABEL_230;
              }
LABEL_215:
              v340 = (_QWORD *)((char *)v340 + v344);
            }
            v343 = (*(_QWORD *)((char *)v340 + v333) >> v332) & v331;
            if ((v342 & 2) == 0)
              break;
            v345 = v343 + v341;
            if ((v342 & 1) != 0)
            {
              v346 = v314 * v345;
              do
              {
                v347 = *(_QWORD *)(v315 + (v346 >> 3));
                if ((_DWORD)v314 != 64)
                  v347 = (v347 >> (v346 & 7)) & v336;
                ++v345;
                v346 += v314;
              }
              while ((v347 & v335) == 0);
            }
            v348 = (double *)(v338 + 8 * v345);
            v349 = v314 * v345;
            do
            {
              v350 = *(_QWORD *)(v315 + (v349 >> 3));
              if ((_DWORD)v314 != 64)
                v350 = (v350 >> (v349 & 7)) & v336;
              v351 = *v348++;
              *((double *)this + (v350 & v337)) = v351 + *((double *)this + (v350 & v337));
              v349 += v314;
            }
            while ((v350 & v335) == 0);
LABEL_230:
            if (++v328 == v2179)
              goto LABEL_2161;
          }
          v344 = v343 * v70;
          goto LABEL_215;
        case 1:
          if (!v2179)
            goto LABEL_2161;
          v942 = 0;
          v943 = ~(-1 << SBYTE6(v2207));
          v944 = BYTE6(v2207) & 7;
          v945 = ~(-1 << SBYTE8(v2207));
          v946 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v947 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v948 = (unint64_t)BYTE6(v2207) >> 3;
          v949 = 1 << (BYTE11(v2207) - 1);
          v950 = ~(-1 << v314);
          v951 = ~v949;
          v952 = v317 + v316 + 8;
          while (1)
          {
            v953 = (*(_QWORD *)((char *)v2192 + ((unint64_t)(v942 * v76) >> 3)) >> ((v942 * v76) & 7)) & ~(-1 << v76);
            if ((_DWORD)v76 == 64)
              v953 = *(_QWORD *)((char *)v2192 + ((unint64_t)(v942 * v76) >> 3));
            v954 = (_QWORD *)(v2177 + v953 * v70);
            v955 = (*(_QWORD *)(v322 + ((unint64_t)(v942 * v321) >> 3)) >> ((v942 * v321) & 7)) & ~(-1 << v321);
            if ((_DWORD)v321 == 64)
              v955 = *(_QWORD *)(v322 + ((unint64_t)(v942 * v321) >> 3));
            while (1)
            {
              v956 = *(_DWORD *)((char *)v954 + v948) >> v944;
              if ((((*(double *)&a3[8 * (*v954 & v943)] <= *(double *)((char *)v954 + v70 - 8)) ^ ((v956 & 8) >> 3)) & 1) != 0)
                break;
              v958 = (*(_QWORD *)((char *)v954 + v947) >> v946) & v945;
              if ((v956 & 2) != 0)
              {
                v964 = v958 + v955;
                if ((v956 & 1) != 0)
                {
                  v965 = v314 * v964;
                  do
                  {
                    v966 = *(_QWORD *)(v315 + (v965 >> 3));
                    if ((_DWORD)v314 != 64)
                      v966 = (v966 >> (v965 & 7)) & v950;
                    ++v964;
                    v965 += v314;
                  }
                  while ((v966 & v949) == 0);
                }
                v967 = (double *)(v952 + 8 * v964);
                v968 = v314 * v964;
                do
                {
                  v969 = *(_QWORD *)(v315 + (v968 >> 3));
                  if ((_DWORD)v314 != 64)
                    v969 = (v969 >> (v968 & 7)) & v950;
                  v970 = *v967++;
                  *((double *)this + (v969 & v951)) = v970 + *((double *)this + (v969 & v951));
                  v968 += v314;
                }
                while ((v969 & v949) == 0);
                goto LABEL_933;
              }
              v957 = v958 * v70;
LABEL_919:
              v954 = (_QWORD *)((char *)v954 + v957);
            }
            v957 = v70;
            if ((v956 & 1) == 0)
              goto LABEL_919;
            v959 = ((*(_QWORD *)((char *)v954 + v947) >> v946) & v945) + v955;
            v960 = (double *)(v952 + 8 * v959);
            v961 = v314 * v959;
            do
            {
              v962 = *(_QWORD *)(v315 + (v961 >> 3));
              if ((_DWORD)v314 != 64)
                v962 = (v962 >> (v961 & 7)) & v950;
              v963 = *v960++;
              *((double *)this + (v962 & v951)) = v963 + *((double *)this + (v962 & v951));
              v961 += v314;
            }
            while ((v962 & v949) == 0);
LABEL_933:
            if (++v942 == v2179)
              goto LABEL_2161;
          }
        case 2:
          if (!v2179)
            goto LABEL_2161;
          v867 = 0;
          v868 = ~(-1 << SBYTE6(v2207));
          v869 = BYTE6(v2207) & 7;
          v870 = ~(-1 << SBYTE8(v2207));
          v871 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v872 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v873 = (unint64_t)BYTE6(v2207) >> 3;
          v874 = 1 << (BYTE11(v2207) - 1);
          v875 = ~(-1 << v314);
          v876 = ~v874;
          v877 = v317 + v316 + 8;
          while (1)
          {
            v878 = (*(_QWORD *)((char *)v2192 + ((unint64_t)(v867 * v76) >> 3)) >> ((v867 * v76) & 7)) & ~(-1 << v76);
            if ((_DWORD)v76 == 64)
              v878 = *(_QWORD *)((char *)v2192 + ((unint64_t)(v867 * v76) >> 3));
            v879 = (_QWORD *)(v2177 + v878 * v70);
            v880 = (*(_QWORD *)(v322 + ((unint64_t)(v867 * v321) >> 3)) >> ((v867 * v321) & 7)) & ~(-1 << v321);
            if ((_DWORD)v321 == 64)
              v880 = *(_QWORD *)(v322 + ((unint64_t)(v867 * v321) >> 3));
            while (1)
            {
              v881 = *(_DWORD *)((char *)v879 + v873) >> v869;
              if ((((*(double *)&a3[8 * (*v879 & v868)] >= *(double *)((char *)v879 + v70 - 8)) ^ ((v881 & 8) >> 3)) & 1) != 0)
                break;
              v883 = v70;
              if ((v881 & 1) != 0)
              {
                v891 = ((*(_QWORD *)((char *)v879 + v872) >> v871) & v870) + v880;
                v892 = (double *)(v877 + 8 * v891);
                v893 = v314 * v891;
                do
                {
                  v894 = *(_QWORD *)(v315 + (v893 >> 3));
                  if ((_DWORD)v314 != 64)
                    v894 = (v894 >> (v893 & 7)) & v875;
                  v895 = *v892++;
                  *((double *)this + (v894 & v876)) = v895 + *((double *)this + (v894 & v876));
                  v893 += v314;
                }
                while ((v894 & v874) == 0);
                goto LABEL_855;
              }
LABEL_840:
              v879 = (_QWORD *)((char *)v879 + v883);
            }
            v882 = (*(_QWORD *)((char *)v879 + v872) >> v871) & v870;
            if ((v881 & 2) == 0)
              break;
            v884 = v882 + v880;
            if ((v881 & 1) != 0)
            {
              v885 = v314 * v884;
              do
              {
                v886 = *(_QWORD *)(v315 + (v885 >> 3));
                if ((_DWORD)v314 != 64)
                  v886 = (v886 >> (v885 & 7)) & v875;
                ++v884;
                v885 += v314;
              }
              while ((v886 & v874) == 0);
            }
            v887 = (double *)(v877 + 8 * v884);
            v888 = v314 * v884;
            do
            {
              v889 = *(_QWORD *)(v315 + (v888 >> 3));
              if ((_DWORD)v314 != 64)
                v889 = (v889 >> (v888 & 7)) & v875;
              v890 = *v887++;
              *((double *)this + (v889 & v876)) = v890 + *((double *)this + (v889 & v876));
              v888 += v314;
            }
            while ((v889 & v874) == 0);
LABEL_855:
            if (++v867 == v2179)
              goto LABEL_2161;
          }
          v883 = v882 * v70;
          goto LABEL_840;
        case 3:
          if (!v2179)
            goto LABEL_2161;
          v913 = 0;
          v914 = ~(-1 << SBYTE6(v2207));
          v915 = BYTE6(v2207) & 7;
          v916 = ~(-1 << SBYTE8(v2207));
          v917 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v918 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v919 = (unint64_t)BYTE6(v2207) >> 3;
          v920 = 1 << (BYTE11(v2207) - 1);
          v921 = ~(-1 << v314);
          v922 = ~v920;
          v923 = v317 + v316 + 8;
          while (1)
          {
            v924 = (*(_QWORD *)((char *)v2192 + ((unint64_t)(v913 * v76) >> 3)) >> ((v913 * v76) & 7)) & ~(-1 << v76);
            if ((_DWORD)v76 == 64)
              v924 = *(_QWORD *)((char *)v2192 + ((unint64_t)(v913 * v76) >> 3));
            v925 = (_QWORD *)(v2177 + v924 * v70);
            v926 = (*(_QWORD *)(v322 + ((unint64_t)(v913 * v321) >> 3)) >> ((v913 * v321) & 7)) & ~(-1 << v321);
            if ((_DWORD)v321 == 64)
              v926 = *(_QWORD *)(v322 + ((unint64_t)(v913 * v321) >> 3));
            while (1)
            {
              v927 = *(_DWORD *)((char *)v925 + v919) >> v915;
              if ((((*(double *)&a3[8 * (*v925 & v914)] < *(double *)((char *)v925 + v70 - 8)) ^ ((v927 & 8) >> 3)) & 1) != 0)
                break;
              v929 = (*(_QWORD *)((char *)v925 + v918) >> v917) & v916;
              if ((v927 & 2) != 0)
              {
                v935 = v929 + v926;
                if ((v927 & 1) != 0)
                {
                  v936 = v314 * v935;
                  do
                  {
                    v937 = *(_QWORD *)(v315 + (v936 >> 3));
                    if ((_DWORD)v314 != 64)
                      v937 = (v937 >> (v936 & 7)) & v921;
                    ++v935;
                    v936 += v314;
                  }
                  while ((v937 & v920) == 0);
                }
                v938 = (double *)(v923 + 8 * v935);
                v939 = v314 * v935;
                do
                {
                  v940 = *(_QWORD *)(v315 + (v939 >> 3));
                  if ((_DWORD)v314 != 64)
                    v940 = (v940 >> (v939 & 7)) & v921;
                  v941 = *v938++;
                  *((double *)this + (v940 & v922)) = v941 + *((double *)this + (v940 & v922));
                  v939 += v314;
                }
                while ((v940 & v920) == 0);
                goto LABEL_906;
              }
              v928 = v929 * v70;
LABEL_892:
              v925 = (_QWORD *)((char *)v925 + v928);
            }
            v928 = v70;
            if ((v927 & 1) == 0)
              goto LABEL_892;
            v930 = ((*(_QWORD *)((char *)v925 + v918) >> v917) & v916) + v926;
            v931 = (double *)(v923 + 8 * v930);
            v932 = v314 * v930;
            do
            {
              v933 = *(_QWORD *)(v315 + (v932 >> 3));
              if ((_DWORD)v314 != 64)
                v933 = (v933 >> (v932 & 7)) & v921;
              v934 = *v931++;
              *((double *)this + (v933 & v922)) = v934 + *((double *)this + (v933 & v922));
              v932 += v314;
            }
            while ((v933 & v920) == 0);
LABEL_906:
            if (++v913 == v2179)
              goto LABEL_2161;
          }
        case 4:
          if (!v2179)
            goto LABEL_2161;
          v836 = 0;
          v837 = ~(-1 << SBYTE6(v2207));
          v838 = BYTE6(v2207) & 7;
          v839 = ~(-1 << SBYTE8(v2207));
          v840 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
          v841 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                                  + BYTE7(v2207)
                                  + BYTE6(v2207)) >> 3;
          v842 = (unint64_t)BYTE6(v2207) >> 3;
          v843 = 1 << (BYTE11(v2207) - 1);
          v844 = ~(-1 << v314);
          v845 = ~v843;
          v846 = v317 + v316 + 8;
          break;
        default:
          goto LABEL_2161;
      }
LABEL_795:
      v847 = (*(_QWORD *)((char *)v2192 + ((unint64_t)(v836 * v76) >> 3)) >> ((v836 * v76) & 7)) & ~(-1 << v76);
      if ((_DWORD)v76 == 64)
        v847 = *(_QWORD *)((char *)v2192 + ((unint64_t)(v836 * v76) >> 3));
      v848 = (_QWORD *)(v2177 + v847 * v70);
      v849 = (*(_QWORD *)(v322 + ((unint64_t)(v836 * v321) >> 3)) >> ((v836 * v321) & 7)) & ~(-1 << v321);
      if ((_DWORD)v321 == 64)
        v849 = *(_QWORD *)(v322 + ((unint64_t)(v836 * v321) >> 3));
      while (1)
      {
        v850 = *(_DWORD *)((char *)v848 + v842) >> v838;
        v851 = *(double *)&a3[8 * (*v848 & v837)];
        v852 = *(double *)((char *)v848 + v70 - 8);
        switch((v850 >> 3) & 7)
        {
          case 0u:
            if (v851 > v852)
              goto LABEL_803;
            goto LABEL_812;
          case 1u:
            if (v851 < v852)
              goto LABEL_812;
            goto LABEL_803;
          case 2u:
            if (v851 >= v852)
              goto LABEL_812;
            goto LABEL_803;
          case 3u:
            if (v851 > v852)
              goto LABEL_812;
            goto LABEL_803;
          case 4u:
            if (v851 != v852)
              goto LABEL_803;
            goto LABEL_812;
          case 5u:
            if (v851 != v852)
              goto LABEL_812;
LABEL_803:
            v853 = (*(_QWORD *)((char *)v848 + v841) >> v840) & v839;
            if ((v850 & 2) != 0)
            {
              v860 = v853 + v849;
              if ((v850 & 1) != 0)
              {
                v861 = v314 * v860;
                do
                {
                  v862 = *(_QWORD *)(v315 + (v861 >> 3));
                  if ((_DWORD)v314 != 64)
                    v862 = (v862 >> (v861 & 7)) & v844;
                  ++v860;
                  v861 += v314;
                }
                while ((v862 & v843) == 0);
              }
              v863 = (double *)(v846 + 8 * v860);
              v864 = v314 * v860;
              do
              {
                v865 = *(_QWORD *)(v315 + (v864 >> 3));
                if ((_DWORD)v314 != 64)
                  v865 = (v865 >> (v864 & 7)) & v844;
                v866 = *v863++;
                *((double *)this + (v865 & v845)) = v866 + *((double *)this + (v865 & v845));
                v864 += v314;
              }
              while ((v865 & v843) == 0);
LABEL_828:
              if (++v836 == v2179)
                goto LABEL_2161;
              goto LABEL_795;
            }
            v854 = v853 * v70;
LABEL_813:
            v848 = (_QWORD *)((char *)v848 + v854);
            break;
          default:
LABEL_812:
            v854 = v70;
            if ((v850 & 1) == 0)
              goto LABEL_813;
            v855 = ((*(_QWORD *)((char *)v848 + v841) >> v840) & v839) + v849;
            v856 = (double *)(v846 + 8 * v855);
            v857 = v314 * v855;
            do
            {
              v858 = *(_QWORD *)(v315 + (v857 >> 3));
              if ((_DWORD)v314 != 64)
                v858 = (v858 >> (v857 & 7)) & v844;
              v859 = *v856++;
              *((double *)this + (v858 & v845)) = v859 + *((double *)this + (v858 & v845));
              v857 += v314;
            }
            while ((v858 & v843) == 0);
            goto LABEL_828;
        }
      }
    case 0x12:
      v2213 = 0;
      v2214 = 0;
      memset(v2211, 0, sizeof(v2211));
      v2212 = (CoreML::Archiver::MMappedContentManager *)&v2213;
      HIDWORD(v2211[0]) = 64;
      v2218 = 0;
      v2219 = 0;
      v2215 = 0u;
      v2216 = 0u;
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      DWORD1(v2215) = 64;
      v2220 = 0u;
      v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      v2223 = 0;
      DWORD1(v2220) = 64;
      v2225 = 0;
      v2226 = 0;
      v2224 = 0;
      *(_OWORD *)__p = *(_OWORD *)a2;
      v132 = *((_QWORD *)a2 + 2);
      v236 = a2 + 3;
      v2205 = v132;
      v2206 = i3 + 3;
      v237 = (uint64_t)&i3[v132 + 3];
      v238 = *(_OWORD *)(v237 + 16);
      v2207 = *(_OWORD *)v237;
      v2208 = v238;
      v239 = WORD2(v2207);
      v240 = *(_QWORD *)(v237 + 32);
      v241 = v237 + 40;
      v2209 = v240 / WORD2(v2207);
      v2210 = (void *)(v237 + 40);
      if (v240 != v2209 * WORD2(v2207))
      {
        v2170 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v2170, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2170, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v242 = v241 + v240;
      v243 = 8 - (v242 & 7);
      if ((v242 & 7) == 0)
        v243 = 0;
      v244 = v242 + v243;
      v245 = *(unsigned int *)(v244 + 4);
      LODWORD(v2211[0]) = *(_DWORD *)v244;
      HIDWORD(v2211[0]) = v245;
      *(_OWORD *)&v2211[1] = *(_OWORD *)(v244 + 8);
      v246 = v2211[1];
      if (v2211[1])
      {
        v247 = v244 + 32;
        v2211[2] = *(_QWORD *)(v244 + 24);
        v2211[3] = v244 + 32;
        v248 = v244 + 32 + 8 * v2211[2];
      }
      else
      {
        v247 = 0;
        v248 = v244 + 24;
      }
      if ((v248 & 7) != 0)
        v248 = (v248 & 0xFFFFFFFFFFFFFFF8) + 8;
      v2215 = *(_OWORD *)v248;
      *(_QWORD *)&v2216 = *(_QWORD *)(v248 + 16);
      if (*((_QWORD *)&v2215 + 1))
      {
        *(_QWORD *)&v2216 = *(_QWORD *)(v248 + 24);
        *((_QWORD *)&v2216 + 1) = v248 + 32;
        v657 = v248 + 32 + 8 * v2216;
      }
      else
      {
        v657 = v248 + 24;
      }
      if ((v657 & 7) != 0)
        v658 = 8 - (v657 & 7);
      else
        v658 = 0;
      v659 = v657 + v658 + 8 + 8 * *(_QWORD *)(v657 + v658);
      v2225 = *(_QWORD *)(v657 + v658);
      v2226 = v657 + v658 + 8;
      if ((v659 & 7) != 0)
        v660 = 8 - (v659 & 7);
      else
        v660 = 0;
      v661 = v659 + v660;
      v2220 = *(_OWORD *)v661;
      *(_QWORD *)&v2221 = *(_QWORD *)(v661 + 16);
      if (*((_QWORD *)&v2220 + 1))
      {
        *(_QWORD *)&v2221 = *(_QWORD *)(v661 + 24);
        *((_QWORD *)&v2221 + 1) = v661 + 32;
        v662 = v661 + 32 + 8 * v2221;
      }
      else
      {
        v662 = v661 + 24;
      }
      v663 = 8 - (v662 & 7);
      if ((v662 & 7) == 0)
        v663 = 0;
      v507 = *(_DWORD *)(v662 + v663);
      v2227 = v507;
      if (v132)
        memmove(this, v236, 8 * v132);
      break;
    default:
      if (__p != 99999)
      {
        v2159 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v2159, "Execution Profile not recognized.");
        __cxa_throw(v2159, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v29 = *((_QWORD *)a2 + 2);
      v30 = *((_QWORD *)a2 + 3);
      v2201 = 0;
      v2202 = 0;
      v2203 = 0;
      if (v30 >= 0x21)
      {
        v31 = 32;
        v2186 = (CoreML::Archiver::MMappedContentManager *)v30;
        do
        {
          v32 = *(_QWORD *)((char *)i3 + v31 + 8);
          v33 = v31 + 16;
          if (v32)
          {
            v34 = *(_QWORD *)((char *)i3 + v31);
            std::vector<double>::vector(__p, v29);
            CoreML::TreeEnsembles::Internal::predict((CoreML::TreeEnsembles::Internal *)__p[0], (double *)((char *)i3 + v33), a3, v35);
            v36 = (CoreML::Archiver::MMappedContentManager *)__p[0];
            v37 = __p[1];
            v38 = v2205;
            __p[1] = 0;
            v2205 = 0;
            __p[0] = 0;
            v39 = v2202;
            if (v2202 >= v2203)
            {
              v2191 = v36;
              v40 = v2201;
              v41 = (v2202 - v2201) >> 5;
              v42 = v41 + 1;
              if ((unint64_t)(v41 + 1) >> 59)
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              v43 = v2203 - v2201;
              if ((v2203 - v2201) >> 4 > v42)
                v42 = v43 >> 4;
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFE0)
                v44 = 0x7FFFFFFFFFFFFFFLL;
              else
                v44 = v42;
              if (v44 >> 59)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v45 = (char *)operator new(32 * v44);
              v46 = &v45[32 * v41];
              *(_QWORD *)v46 = v34;
              *((_QWORD *)v46 + 1) = v2191;
              v47 = &v45[32 * v44];
              *((_QWORD *)v46 + 2) = v37;
              *((_QWORD *)v46 + 3) = v38;
              v48 = v46 + 32;
              if (v39 == v40)
              {
                v2201 = &v45[32 * v41];
                v2202 = v46 + 32;
                v2203 = &v45[32 * v44];
                i3 = a2;
              }
              else
              {
                v49 = 0;
                do
                {
                  v50 = &v46[v49];
                  v51 = &v39[v49];
                  *((_QWORD *)v50 - 4) = *(_QWORD *)&v39[v49 - 32];
                  *((_QWORD *)v50 - 3) = 0;
                  *((_QWORD *)v50 - 2) = 0;
                  *((_QWORD *)v50 - 1) = 0;
                  *(_OWORD *)(v50 - 24) = *(_OWORD *)&v39[v49 - 24];
                  *((_QWORD *)v50 - 1) = *(_QWORD *)&v39[v49 - 8];
                  *((_QWORD *)v51 - 3) = 0;
                  *((_QWORD *)v51 - 2) = 0;
                  *((_QWORD *)v51 - 1) = 0;
                  v49 -= 32;
                }
                while (&v39[v49] != v40);
                v39 = v2201;
                v52 = v2202;
                v2201 = &v46[v49];
                v2202 = v46 + 32;
                v2203 = v47;
                for (i3 = a2; v52 != v39; v52 -= 32)
                {
                  v53 = (void *)*((_QWORD *)v52 - 3);
                  if (v53)
                  {
                    *((_QWORD *)v52 - 2) = v53;
                    operator delete(v53);
                  }
                }
              }
              v30 = (unint64_t)v2186;
              if (v39)
                operator delete(v39);
              v2202 = v48;
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              *(_QWORD *)v2202 = v34;
              *((_QWORD *)v39 + 1) = v36;
              *((_QWORD *)v39 + 2) = v37;
              *((_QWORD *)v39 + 3) = v38;
              v2202 = v39 + 32;
            }
          }
          else
          {
            v32 = v31 + 16;
          }
          v31 = v32;
        }
        while (v32 < v30);
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      v2199 = 0;
      v2200 = 0;
      v2198 = 0;
      std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v2198, *((const void **)v2201 + 1), *((_QWORD *)v2201 + 2), (uint64_t)(*((_QWORD *)v2201 + 2) - *((_QWORD *)v2201 + 1)) >> 3);
      v55 = v2201;
      v54 = v2202;
      if ((unint64_t)(v2202 - v2201) >= 0x21)
      {
        v56 = v2198;
        v57 = 1;
        do
        {
          if (v29)
          {
            v58 = 0;
            v59 = &v55[32 * v57 + 8];
            do
            {
              if (vabdd_f64(*(double *)(*(_QWORD *)v59 + 8 * v58), v56[v58]) > 0.0001)
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ERROR: profile=", 15);
                v60 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"; idx=", 6);
                v61 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"; ref_value=",
                  12);
                v62 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"; pred=", 7);
                v63 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"\n", 1);
              }
              ++v58;
            }
            while (v29 != v58);
            v55 = v2201;
            v54 = v2202;
          }
          ++v57;
        }
        while (v57 < (v54 - v55) >> 5);
      }
      std::stringbuf::str();
      size = HIBYTE(v2197.__r_.__value_.__r.__words[2]);
      if ((v2197.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v2197.__r_.__value_.__l.__size_;
      if (size)
      {
        v2176 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v2176, &v2197);
        __cxa_throw(v2176, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v65 = v2198;
      if (v2199 != v2198)
        memmove(this, v2198, (char *)v2199 - (char *)v2198);
      if (SHIBYTE(v2197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v2197.__r_.__value_.__l.__data_);
      if (v65)
        operator delete(v65);
      __p[0] = *(void **)MEMORY[0x1E0DE4F60];
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
      __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
      if (SHIBYTE(v2211[1]) < 0)
        operator delete(v2210);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1A1AD61C4](&v2212);
      __p[0] = &v2201;
      std::vector<std::pair<unsigned long,std::vector<double>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      return;
  }
  switch(BYTE13(v2207))
  {
    case 0:
      if (!v2211[1])
        goto LABEL_1970;
      v664 = 0;
      v665 = ~(-1 << SBYTE6(v2207));
      v666 = BYTE6(v2207) & 7;
      v667 = ~(-1 << SBYTE8(v2207));
      v668 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
      v669 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                              + BYTE7(v2207)
                              + BYTE6(v2207)) >> 3;
      v670 = (unint64_t)BYTE6(v2207) >> 3;
      v671 = *((_QWORD *)&v2208 + 1);
      v672 = v658 + v657 + 8;
      v673 = 8 * *((_QWORD *)&v2208 + 1);
      while (1)
      {
        v674 = (*(_QWORD *)(v247 + ((unint64_t)(v664 * v245) >> 3)) >> ((v664 * v245) & 7)) & ~(-1 << v245);
        if ((_DWORD)v245 == 64)
          v674 = *(_QWORD *)(v247 + ((unint64_t)(v664 * v245) >> 3));
        for (i4 = (_QWORD *)(v241 + v674 * v239); ; i4 = (_QWORD *)((char *)i4 + v678))
        {
          v676 = *(_DWORD *)((char *)i4 + v670) >> v666;
          if ((((*(double *)&a3[8 * (*i4 & v665)] > *(double *)((char *)i4 + v239 - 8)) ^ ((v676 & 8) >> 3)) & 1) != 0)
            break;
          v678 = v239;
          if ((v676 & 1) != 0)
          {
            if (v671)
            {
              v683 = (double *)(v672 + v673 * (v674 + ((*(_QWORD *)((char *)i4 + v669) >> v668) & v667) + v664));
              v684 = (double *)this;
              v685 = v671;
              do
              {
                v686 = *v683++;
                *v684 = v686 + *v684;
                ++v684;
                --v685;
              }
              while (v685);
            }
            goto LABEL_602;
          }
LABEL_594:
          ;
        }
        v677 = (*(_QWORD *)((char *)i4 + v669) >> v668) & v667;
        if ((v676 & 2) == 0)
          break;
        if (v671)
        {
          v679 = (double *)(v672 + v673 * (v674 + v664 + v677 + (v676 & 1)));
          v680 = (double *)this;
          v681 = v671;
          do
          {
            v682 = *v679++;
            *v680 = v682 + *v680;
            ++v680;
            --v681;
          }
          while (v681);
        }
LABEL_602:
        if (++v664 == v246)
          goto LABEL_1970;
      }
      v678 = v677 * v239;
      goto LABEL_594;
    case 1:
      if (!v2211[1])
        goto LABEL_1970;
      v1938 = 0;
      v1939 = ~(-1 << SBYTE6(v2207));
      v1940 = BYTE6(v2207) & 7;
      v1941 = ~(-1 << SBYTE8(v2207));
      v1942 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
      v1943 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                               + BYTE7(v2207)
                               + BYTE6(v2207)) >> 3;
      v1944 = (unint64_t)BYTE6(v2207) >> 3;
      v1945 = *((_QWORD *)&v2208 + 1);
      v1946 = v658 + v657 + 8;
      v1947 = 8 * *((_QWORD *)&v2208 + 1);
      while (1)
      {
        v1948 = (*(_QWORD *)(v247 + ((unint64_t)(v1938 * v245) >> 3)) >> ((v1938 * v245) & 7)) & ~(-1 << v245);
        if ((_DWORD)v245 == 64)
          v1948 = *(_QWORD *)(v247 + ((unint64_t)(v1938 * v245) >> 3));
        for (i5 = (_QWORD *)(v241 + v1948 * v239); ; i5 = (_QWORD *)((char *)i5 + v1951))
        {
          v1950 = *(_DWORD *)((char *)i5 + v1944) >> v1940;
          if ((((*(double *)&a3[8 * (*i5 & v1939)] <= *(double *)((char *)i5 + v239 - 8)) ^ ((v1950 & 8) >> 3)) & 1) != 0)
            break;
          v1952 = (*(_QWORD *)((char *)i5 + v1943) >> v1942) & v1941;
          if ((v1950 & 2) != 0)
          {
            if (v1945)
            {
              v1957 = (double *)(v1946 + v1947 * (v1948 + v1938 + v1952 + (v1950 & 1)));
              v1958 = (double *)this;
              v1959 = v1945;
              do
              {
                v1960 = *v1957++;
                *v1958 = v1960 + *v1958;
                ++v1958;
                --v1959;
              }
              while (v1959);
            }
            goto LABEL_1969;
          }
          v1951 = v1952 * v239;
LABEL_1961:
          ;
        }
        v1951 = v239;
        if ((v1950 & 1) == 0)
          goto LABEL_1961;
        if (v1945)
        {
          v1953 = (double *)(v1946 + v1947 * (v1948 + ((*(_QWORD *)((char *)i5 + v1943) >> v1942) & v1941) + v1938));
          v1954 = (double *)this;
          v1955 = v1945;
          do
          {
            v1956 = *v1953++;
            *v1954 = v1956 + *v1954;
            ++v1954;
            --v1955;
          }
          while (v1955);
        }
LABEL_1969:
        if (++v1938 == v246)
          goto LABEL_1970;
      }
    case 2:
      if (!v2211[1])
        goto LABEL_1970;
      v1743 = 0;
      v1744 = ~(-1 << SBYTE6(v2207));
      v1745 = BYTE6(v2207) & 7;
      v1746 = ~(-1 << SBYTE8(v2207));
      v1747 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
      v1748 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                               + BYTE7(v2207)
                               + BYTE6(v2207)) >> 3;
      v1749 = (unint64_t)BYTE6(v2207) >> 3;
      v1750 = *((_QWORD *)&v2208 + 1);
      v1751 = v658 + v657 + 8;
      v1752 = 8 * *((_QWORD *)&v2208 + 1);
      while (1)
      {
        v1753 = (*(_QWORD *)(v247 + ((unint64_t)(v1743 * v245) >> 3)) >> ((v1743 * v245) & 7)) & ~(-1 << v245);
        if ((_DWORD)v245 == 64)
          v1753 = *(_QWORD *)(v247 + ((unint64_t)(v1743 * v245) >> 3));
        for (i6 = (_QWORD *)(v241 + v1753 * v239); ; i6 = (_QWORD *)((char *)i6 + v1757))
        {
          v1755 = *(_DWORD *)((char *)i6 + v1749) >> v1745;
          if ((((*(double *)&a3[8 * (*i6 & v1744)] >= *(double *)((char *)i6 + v239 - 8)) ^ ((v1755 & 8) >> 3)) & 1) != 0)
            break;
          v1757 = v239;
          if ((v1755 & 1) != 0)
          {
            if (v1750)
            {
              v1762 = (double *)(v1751 + v1752 * (v1753 + ((*(_QWORD *)((char *)i6 + v1748) >> v1747) & v1746) + v1743));
              v1763 = (double *)this;
              v1764 = v1750;
              do
              {
                v1765 = *v1762++;
                *v1763 = v1765 + *v1763;
                ++v1763;
                --v1764;
              }
              while (v1764);
            }
            goto LABEL_1788;
          }
LABEL_1780:
          ;
        }
        v1756 = (*(_QWORD *)((char *)i6 + v1748) >> v1747) & v1746;
        if ((v1755 & 2) == 0)
          break;
        if (v1750)
        {
          v1758 = (double *)(v1751 + v1752 * (v1753 + v1743 + v1756 + (v1755 & 1)));
          v1759 = (double *)this;
          v1760 = v1750;
          do
          {
            v1761 = *v1758++;
            *v1759 = v1761 + *v1759;
            ++v1759;
            --v1760;
          }
          while (v1760);
        }
LABEL_1788:
        if (++v1743 == v246)
          goto LABEL_1970;
      }
      v1757 = v1756 * v239;
      goto LABEL_1780;
    case 3:
      if (!v2211[1])
        goto LABEL_1970;
      v1856 = 0;
      v1857 = ~(-1 << SBYTE6(v2207));
      v1858 = BYTE6(v2207) & 7;
      v1859 = ~(-1 << SBYTE8(v2207));
      v1860 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
      v1861 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                               + BYTE7(v2207)
                               + BYTE6(v2207)) >> 3;
      v1862 = (unint64_t)BYTE6(v2207) >> 3;
      v1863 = *((_QWORD *)&v2208 + 1);
      v1864 = v658 + v657 + 8;
      v1865 = 8 * *((_QWORD *)&v2208 + 1);
      while (1)
      {
        v1866 = (*(_QWORD *)(v247 + ((unint64_t)(v1856 * v245) >> 3)) >> ((v1856 * v245) & 7)) & ~(-1 << v245);
        if ((_DWORD)v245 == 64)
          v1866 = *(_QWORD *)(v247 + ((unint64_t)(v1856 * v245) >> 3));
        for (i7 = (_QWORD *)(v241 + v1866 * v239); ; i7 = (_QWORD *)((char *)i7 + v1869))
        {
          v1868 = *(_DWORD *)((char *)i7 + v1862) >> v1858;
          if ((((*(double *)&a3[8 * (*i7 & v1857)] < *(double *)((char *)i7 + v239 - 8)) ^ ((v1868 & 8) >> 3)) & 1) != 0)
            break;
          v1870 = (*(_QWORD *)((char *)i7 + v1861) >> v1860) & v1859;
          if ((v1868 & 2) != 0)
          {
            if (v1863)
            {
              v1875 = (double *)(v1864 + v1865 * (v1866 + v1856 + v1870 + (v1868 & 1)));
              v1876 = (double *)this;
              v1877 = v1863;
              do
              {
                v1878 = *v1875++;
                *v1876 = v1878 + *v1876;
                ++v1876;
                --v1877;
              }
              while (v1877);
            }
            goto LABEL_1894;
          }
          v1869 = v1870 * v239;
LABEL_1886:
          ;
        }
        v1869 = v239;
        if ((v1868 & 1) == 0)
          goto LABEL_1886;
        if (v1863)
        {
          v1871 = (double *)(v1864 + v1865 * (v1866 + ((*(_QWORD *)((char *)i7 + v1861) >> v1860) & v1859) + v1856));
          v1872 = (double *)this;
          v1873 = v1863;
          do
          {
            v1874 = *v1871++;
            *v1872 = v1874 + *v1872;
            ++v1872;
            --v1873;
          }
          while (v1873);
        }
LABEL_1894:
        if (++v1856 == v246)
          goto LABEL_1970;
      }
    case 4:
      if (!v2211[1])
        goto LABEL_1970;
      v1477 = 0;
      v1478 = ~(-1 << SBYTE6(v2207));
      v1479 = BYTE6(v2207) & 7;
      v1480 = ~(-1 << SBYTE8(v2207));
      v1481 = (((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7) + BYTE7(v2207) + BYTE6(v2207)) & 7;
      v1482 = (unint64_t)(((-BYTE8(v2207) - (BYTE7(v2207) + BYTE6(v2207))) & 7)
                               + BYTE7(v2207)
                               + BYTE6(v2207)) >> 3;
      v1483 = (unint64_t)BYTE6(v2207) >> 3;
      v1484 = *((_QWORD *)&v2208 + 1);
      v1485 = v658 + v657 + 8;
      v1486 = 8 * *((_QWORD *)&v2208 + 1);
      break;
    default:
      goto LABEL_1970;
  }
LABEL_1473:
  v1487 = (*(_QWORD *)(v247 + ((unint64_t)(v1477 * v245) >> 3)) >> ((v1477 * v245) & 7)) & ~(-1 << v245);
  if ((_DWORD)v245 == 64)
    v1487 = *(_QWORD *)(v247 + ((unint64_t)(v1477 * v245) >> 3));
  v1488 = (_QWORD *)(v241 + v1487 * v239);
  while (1)
  {
    v1489 = *(_DWORD *)((char *)v1488 + v1483) >> v1479;
    v1490 = *(double *)&a3[8 * (*v1488 & v1478)];
    v1491 = *(double *)((char *)v1488 + v239 - 8);
    switch((v1489 >> 3) & 7)
    {
      case 0u:
        if (v1490 > v1491)
          goto LABEL_1480;
        goto LABEL_1489;
      case 1u:
        if (v1490 < v1491)
          goto LABEL_1489;
        goto LABEL_1480;
      case 2u:
        if (v1490 >= v1491)
          goto LABEL_1489;
        goto LABEL_1480;
      case 3u:
        if (v1490 > v1491)
          goto LABEL_1489;
        goto LABEL_1480;
      case 4u:
        if (v1490 != v1491)
          goto LABEL_1480;
        goto LABEL_1489;
      case 5u:
        if (v1490 != v1491)
          goto LABEL_1489;
LABEL_1480:
        v1492 = (*(_QWORD *)((char *)v1488 + v1482) >> v1481) & v1480;
        if ((v1489 & 2) != 0)
        {
          if (v1484)
          {
            v1498 = (double *)(v1485 + v1486 * (v1487 + v1477 + v1492 + (v1489 & 1)));
            v1499 = (double *)this;
            v1500 = v1484;
            do
            {
              v1501 = *v1498++;
              *v1499 = v1501 + *v1499;
              ++v1499;
              --v1500;
            }
            while (v1500);
          }
LABEL_1498:
          if (++v1477 == v246)
            goto LABEL_1970;
          goto LABEL_1473;
        }
        v1493 = v1492 * v239;
LABEL_1490:
        v1488 = (_QWORD *)((char *)v1488 + v1493);
        break;
      default:
LABEL_1489:
        v1493 = v239;
        if ((v1489 & 1) == 0)
          goto LABEL_1490;
        if (v1484)
        {
          v1494 = (double *)(v1485 + v1486 * (v1487 + ((*(_QWORD *)((char *)v1488 + v1482) >> v1481) & v1480) + v1477));
          v1495 = (double *)this;
          v1496 = v1484;
          do
          {
            v1497 = *v1494++;
            *v1495 = v1497 + *v1495;
            ++v1495;
            --v1496;
          }
          while (v1496);
        }
        goto LABEL_1498;
    }
  }
}

void sub_19C4CEE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32,uint64_t a33)
{
  if (a25 < 0)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  std::ostringstream::~ostringstream((uint64_t)&a32);
  a32 = &a29;
  std::vector<std::pair<unsigned long,std::vector<double>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  _Unwind_Resume(a1);
}

void CoreML::TreeEnsembles::Internal::apply_postevaluation_transform(double *a1, int a2, uint64_t a3)
{
  double *v3;
  double v4;
  double v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double *v18;
  long double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double *v23;
  double *v24;
  double v25;
  uint64_t v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  double *v33;
  long double v34;

  v3 = a1;
  switch(a2)
  {
    case 1:
      if (a3)
      {
        v7 = a1;
        if (a3 != 1)
        {
          v8 = a1 + 1;
          v9 = *a1;
          v10 = 8 * a3 - 8;
          v7 = a1;
          v11 = a1 + 1;
          do
          {
            v12 = *v11++;
            v13 = v12;
            if (v9 < v12)
            {
              v9 = v13;
              v7 = v8;
            }
            v8 = v11;
            v10 -= 8;
          }
          while (v10);
        }
        v14 = *v7;
        v15 = 8 * a3;
        v16 = 0.0;
        v17 = 8 * a3;
        v18 = a1;
        do
        {
          v19 = exp(*v18 - v14);
          *v18++ = v19;
          v16 = v16 + v19;
          v17 -= 8;
        }
        while (v17);
        do
        {
          *v3 = *v3 / v16;
          ++v3;
          v15 -= 8;
        }
        while (v15);
      }
      break;
    case 3:
      if (a3)
      {
        v20 = 0;
        v21 = *a1;
        do
        {
          a1[v20] = a1[v20] - v21;
          ++v20;
        }
        while (a3 != v20);
        v22 = 8 * a3;
        v23 = a1;
        if (a3 != 1)
        {
          v24 = a1 + 1;
          v25 = *a1;
          v26 = v22 - 8;
          v23 = a1;
          v27 = a1 + 1;
          do
          {
            v28 = *v27++;
            v29 = v28;
            if (v25 < v28)
            {
              v25 = v29;
              v23 = v24;
            }
            v24 = v27;
            v26 -= 8;
          }
          while (v26);
        }
        v30 = *v23;
        v31 = 0.0;
        v32 = 8 * a3;
        v33 = a1;
        do
        {
          v34 = exp(*v33 - v30);
          *v33++ = v34;
          v31 = v31 + v34;
          v32 -= 8;
        }
        while (v32);
        do
        {
          *v3 = *v3 / v31;
          ++v3;
          v22 -= 8;
        }
        while (v22);
      }
      break;
    case 2:
      v4 = *a1;
      v5 = exp(-fabs(*a1));
      if (v4 >= 0.0)
        v6 = 1.0;
      else
        v6 = v5;
      *v3 = v6 / (v5 + 1.0);
      break;
  }
}

void type metadata accessor for IOSurfaceRef(uint64_t a1)
{
  sub_19C4CFDCC(a1, &qword_1EE422F70);
}

__n128 __swift_memcpy176_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t sub_19C4CF2FC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 176))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_19C4CF31C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 176) = v3;
  return result;
}

void type metadata accessor for BNNSNDArrayDescriptor(uint64_t a1)
{
  sub_19C4CFDCC(a1, (unint64_t *)&unk_1EE422F78);
}

void type metadata accessor for CVBuffer(uint64_t a1)
{
  sub_19C4CFDCC(a1, (unint64_t *)&unk_1EE422D80);
}

void type metadata accessor for MLComputeUnits(uint64_t a1)
{
  sub_19C4CFDCC(a1, &qword_1EE422F88);
}

uint64_t sub_19C4CF3B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 1;
  v3 = (uint64_t *)(v1 + 32);
  v4 = 1;
  while (1)
  {
    v5 = *v3++;
    result = v4 * v5;
    if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
      break;
    v4 = result;
    if (!--v2)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_19C4CF3F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  int64_t v10;
  uint64_t result;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;

  v5 = a4;
  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    result = sub_19C556FAC(0, v10, 0);
    v12 = v21;
    v13 = (uint64_t *)(a3 + 32);
    while (1)
    {
      v15 = *v13++;
      v14 = v15;
      if (v15 < 0)
        break;
      v17 = v21[2];
      v16 = v21[3];
      if (v17 >= v16 >> 1)
        result = sub_19C556FAC(v16 > 1, v17 + 1, 1);
      v21[2] = v17 + 1;
      v18 = &v21[2 * v17];
      v18[4] = 0;
      v18[5] = v14;
      if (!--v10)
      {
        if (v21[4] == v21[5])
          goto LABEL_8;
        if (v17)
        {
          v19 = v21 + 7;
          while (*(v19 - 1) != *v19)
          {
            v19 += 2;
            if (!--v17)
              goto LABEL_14;
          }
LABEL_8:
          result = 0;
        }
        else
        {
LABEL_14:
          result = sub_19C4D0078((uint64_t)v21);
        }
        v5 = a4;
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
    v12 = &unk_1E3D44D58;
    result = sub_19C4D0078((uint64_t)&unk_1E3D44D58);
LABEL_16:
    *a5 = a1;
    a5[1] = a2;
    a5[2] = a3;
    a5[3] = v5;
    a5[4] = v12;
    a5[5] = result;
  }
  return result;
}

uint64_t sub_19C4CF540@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v5 = sub_19C5ADB48();
  if (v5)
  {
    if (*(_QWORD *)(v2[2] + 16))
    {
      v6 = *v2;
      v7 = sub_19C552864(v5, (_QWORD *)v2[3]);
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(v8 - 8);
      v10 = v6 + *(_QWORD *)(v9 + 72) * v7;
    }
    else
    {
      swift_bridgeObjectRelease();
      v10 = *v2;
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(v8 - 8);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a2, v10, v8);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v13 = a2;
    v14 = 0;
    v11 = v8;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
    v13 = a2;
    v14 = 1;
  }
  return v12(v13, v14, 1, v11);
}

uint64_t sub_19C4CF61C()
{
  return 2;
}

uint64_t sub_19C4CF624()
{
  uint64_t v0;

  v0 = sub_19C4CFEA8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_19C4CF678()
{
  return sub_19CAA99A4();
}

uint64_t sub_19C4CF69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[8];

  v6[2] = a3;
  v6[3] = a4;
  v6[4] = a5;
  v6[5] = a1;
  v6[6] = a2;
  return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(a5 + 152))(sub_19C4CF994, v6, a4, a3);
}

uint64_t sub_19C4CF6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *))
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v12;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _BYTE v24[8];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C4CF3F4(a1, a2, a3, a4, v14);
  a5(v14);
  if (v6)
  {
    v27 = v15;
    sub_19C4CF9C0((uint64_t)&v27);
    v26 = v16;
    sub_19C4CF9C0((uint64_t)&v26);
    v23 = v17;
    v25 = v17;
    sub_19C4CF9C0((uint64_t)&v25);
    sub_19C4CF9E8((uint64_t)&v23 + 8, (uint64_t)v24);
    v12 = v24;
  }
  else
  {
    v22 = v15;
    sub_19C4CF9C0((uint64_t)&v22);
    v21 = v16;
    sub_19C4CF9C0((uint64_t)&v21);
    v18 = v17;
    v20 = v17;
    sub_19C4CF9C0((uint64_t)&v20);
    sub_19C4CF9E8((uint64_t)&v18 + 8, (uint64_t)v19);
    v12 = v19;
  }
  return sub_19C4CF9C0((uint64_t)v12);
}

_QWORD *sub_19C4CF820@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_19C4CF830(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_19C4CF83C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_19C4CF850@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_19C4CF860(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t sub_19C4CF86C(uint64_t a1)
{
  MEMORY[0x1A1AD76AC](&unk_19CAE78FC, a1);
  return sub_19CAA965C();
}

uint64_t sub_19C4CF8A8()
{
  MEMORY[0x1A1AD76AC](&unk_19CAE78FC);
  return sub_19CAA9650();
}

uint64_t sub_19C4CF8F0(uint64_t a1, uint64_t a2)
{
  sub_19CAAA298();
  MEMORY[0x1A1AD76AC](&unk_19CAE78FC, a2);
  sub_19CAA9650();
  return sub_19CAAA2C8();
}

uint64_t sub_19C4CF948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1A1AD76AC](&unk_19CAE78FC, a3);
  return sub_19CAA9644();
}

uint64_t sub_19C4CF994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_19C4CF6E0(a1, a2, a3, a4, *(void (**)(_QWORD *))(v4 + 40));
}

uint64_t sub_19C4CF9C0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_19C4CF9E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE421940);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1A1AD7694]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_19C4CFA70()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for InternalError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_19C4CFAA8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19C4CFAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_19C4CFB3C(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_OWORD *sub_19C4CFBEC(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_19C4CFC48(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_19C4CFC90(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for ScalarSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScalarSequence);
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_19C4CFCF4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_19C4CFD14(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for vImage_Buffer(uint64_t a1)
{
  sub_19C4CFDCC(a1, &qword_1EE422FF8);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_19C4CFDCC(a1, &qword_1EE423000);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_19C4CFDCC(a1, &qword_1EE423008);
}

void type metadata accessor for BNNSDataType(uint64_t a1)
{
  sub_19C4CFDCC(a1, &qword_1EE423010);
}

void type metadata accessor for BNNSDataLayout(uint64_t a1)
{
  sub_19C4CFDCC(a1, &qword_1EE423018);
}

void type metadata accessor for BNNSNDArrayFlags(uint64_t a1)
{
  sub_19C4CFDCC(a1, &qword_1EE423020);
}

void type metadata accessor for MLFeatureType(uint64_t a1)
{
  sub_19C4CFDCC(a1, &qword_1EE423028);
}

void sub_19C4CFDCC(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void sub_19C4CFE10()
{
  JUMPOUT(0x1A1AD76ACLL);
}

uint64_t sub_19C4CFE20()
{
  return sub_19C4CFE68((unint64_t *)&qword_1EE423030, (uint64_t)&unk_19CAE7928);
}

uint64_t sub_19C4CFE44()
{
  return sub_19C4CFE68(&qword_1EE423038, (uint64_t)&unk_19CAE7838);
}

uint64_t sub_19C4CFE68(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CFString(255);
    result = MEMORY[0x1A1AD76AC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1A1AD7634](a1, v6, a5);
}

BOOL sub_19C4CFEEC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  id v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  swift_unownedRetainStrong();
  v3 = objc_msgSend(*(id *)(v1 + 32), sel_signaledValue);
  swift_release();
  return (unint64_t)v3 >= v2;
}

BOOL sub_19C4CFF3C()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  return (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + 40), sel_signaledValue) >= v1;
}

uint64_t sub_19C4CFF70(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_19C556FD0(0, v1, 0);
    v2 = v9;
    v4 = a1 + 32;
    do
    {
      swift_getKeyPath();
      swift_getAtKeyPath();
      swift_release();
      v6 = *(_QWORD *)(v9 + 16);
      v5 = *(_QWORD *)(v9 + 24);
      if (v6 >= v5 >> 1)
        sub_19C556FD0(v5 > 1, v6 + 1, 1);
      *(_QWORD *)(v9 + 16) = v6 + 1;
      *(_QWORD *)(v9 + 8 * v6 + 32) = v8;
      v4 += 16;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_19C4D0078(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_19C556FD0(0, v2, 0);
    result = v9;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4;
      v4 += 2;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_19C556FD0(v7 > 1, v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_QWORD *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t MLShapedArraySlice.shape.getter()
{
  sub_19C4D4F98();
  return swift_bridgeObjectRetain();
}

double MLShapedArraySlice.init(bytesNoCopy:shape:strides:deallocator:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  double result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[3];

  v14 = sub_19CAA9608();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a4, v14);
  MLShapedArray.init(bytesNoCopy:shape:strides:deallocator:)(a1, a2, a3, (uint64_t)v17, a5, a6, (uint64_t *)v24);
  v23 = v24[0];
  sub_19C4D0CAC((uint64_t *)&v23, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], a5, a6, (uint64_t *)v24);
  v21 = v24[1];
  v22 = v24[0];
  v20 = v24[2];
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a4, v14);
  v18 = v21;
  *a7 = v22;
  a7[1] = v18;
  result = *(double *)&v20;
  a7[2] = v20;
  return result;
}

double sub_19C4D0270@<D0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[3];

  v9 = *a1;
  sub_19C4D0CAC((uint64_t *)&v9, a2, MEMORY[0x1E0DEE9D8], a3, a4, (uint64_t *)v10);
  result = *(double *)v10;
  v7 = v10[1];
  v8 = v10[2];
  *a5 = v10[0];
  a5[1] = v7;
  a5[2] = v8;
  return result;
}

double MLShapedArraySlice.init(unsafeUninitializedShape:initializingWith:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[3];

  MLShapedArray.init(unsafeUninitializedShape:initializingWith:)(a1, a2, a3, (uint64_t *)v12);
  if (!v4)
  {
    v11 = v12[0];
    sub_19C4D0CAC((uint64_t *)&v11, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], a2, a3, (uint64_t *)v12);
    result = *(double *)v12;
    v9 = v12[1];
    v10 = v12[2];
    *a4 = v12[0];
    a4[1] = v9;
    a4[2] = v10;
  }
  return result;
}

double MLShapedArraySlice.init(scalar:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  double result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[3];

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  MLShapedArray.init(scalar:)((uint64_t)v10, a2, a3, v11, (uint64_t *)v18);
  v17 = v18[0];
  sub_19C4D0CAC((uint64_t *)&v17, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], a2, a3, (uint64_t *)v18);
  v15 = v18[1];
  v16 = v18[0];
  v14 = v18[2];
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, a2);
  v12 = v15;
  *a4 = v16;
  a4[1] = v12;
  result = *(double *)&v14;
  a4[2] = v14;
  return result;
}

__n128 MLShapedArraySlice.init(data:shape:strides:)@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  __n128 result;
  __n128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[3];

  sub_19C4D4FA0(a1, a2);
  MLShapedArray.init(data:shape:strides:)(a1, a2, a3, a4, a5, a6, (uint64_t *)v20);
  v17 = v20[0];
  swift_unknownObjectRetain();
  v19 = v17;
  sub_19C4D0CAC((uint64_t *)&v19, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], a5, a6, (uint64_t *)v20);
  v16 = v20[1];
  v18 = v20[0];
  v15 = (__n128)v20[2];
  sub_19C4D4FE4(a1, a2);
  swift_unknownObjectRelease();
  *a7 = v18;
  a7[1] = v16;
  result = v15;
  a7[2] = v15;
  return result;
}

double MLShapedArraySlice.init<A>(scalars:shape:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[3];

  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v15);
  MLShapedArray.init<A>(scalars:shape:)((uint64_t)v14, a2, a3, a4, a5, (uint64_t *)v22);
  v21 = v22[0];
  sub_19C4D0CAC((uint64_t *)&v21, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], a3, a5, (uint64_t *)v22);
  v19 = v22[1];
  v20 = v22[0];
  v18 = v22[2];
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a4);
  v16 = v19;
  *a6 = v20;
  a6[1] = v16;
  result = *(double *)&v18;
  a6[2] = v18;
  return result;
}

double MLShapedArraySlice.init<A>(concatenating:alongAxis:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  void *v11;
  uint64_t AssociatedConformanceWitness;
  __n128 v13;
  double result;
  __int128 v15;
  __int128 v16;
  _OWORD v17[3];

  v11 = (void *)sub_19C552F20(a1, a2, a4, a5, a6);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = MLShapedArraySlice.init(_:)(v11, a3, AssociatedConformanceWitness, v17);
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(a4 - 8) + 8))(a1, a4, v13);
  result = *(double *)v17;
  v15 = v17[1];
  v16 = v17[2];
  *a7 = v17[0];
  a7[1] = v15;
  a7[2] = v16;
  return result;
}

__n128 MLShapedArraySlice.init(_:)@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  id v7;
  __n128 result;
  __n128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[3];

  v7 = a1;
  MLShapedArray.init(_:)(v7, a2, a3, (size_t *)v14);
  v11 = v14[0];
  swift_unknownObjectRetain();
  v13 = v11;
  sub_19C4D0CAC((uint64_t *)&v13, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], a2, a3, (uint64_t *)v14);
  v10 = v14[1];
  v12 = v14[0];
  v9 = (__n128)v14[2];
  swift_unknownObjectRelease();

  *a4 = v12;
  a4[1] = v10;
  result = v9;
  a4[2] = v9;
  return result;
}

double MLShapedArraySlice.init<A>(squeezing:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double result;
  __int128 v15;
  __int128 v16;
  _OWORD v17[3];

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v12, a1);
  v13 = sub_19C4D0984((uint64_t)v12, a2, a3, a4, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t))sub_19C553138, v17);
  (*(void (**)(uint64_t, uint64_t, double))(v10 + 8))(a1, a3, v13);
  result = *(double *)v17;
  v15 = v17[1];
  v16 = v17[2];
  *a5 = v17[0];
  a5[1] = v15;
  a5[2] = v16;
  return result;
}

double MLShapedArraySlice.init<A>(expandingDimensionsOf:alongAxis:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  double result;
  __int128 v18;
  __int128 v19;
  _OWORD v20[3];

  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v15);
  v16 = sub_19C4D0AA8((uint64_t)v14, a2, a3, a4, a5, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C5532E4, v20);
  (*(void (**)(uint64_t, uint64_t, double))(v12 + 8))(a1, a4, v16);
  result = *(double *)v20;
  v18 = v20[1];
  v19 = v20[2];
  *a6 = v20[0];
  a6[1] = v18;
  a6[2] = v19;
  return result;
}

double sub_19C4D0984@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t)@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedConformanceWitness;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[3];

  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v12 + 16))(v14, a1);
  a5(v22, v14, a2, a3, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v21 = v22[0];
  sub_19C4D0CAC((uint64_t *)&v21, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], a2, AssociatedConformanceWitness, (uint64_t *)v22);
  v19 = v22[1];
  v20 = v22[0];
  v18 = v22[2];
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a3);
  v16 = v19;
  *a6 = v20;
  a6[1] = v16;
  result = *(double *)&v18;
  a6[2] = v18;
  return result;
}

double sub_19C4D0AA8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, _OWORD *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  __int128 v19;
  double result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[3];

  v14 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v17);
  a6(v25, v16, a2, a3, a4, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v24 = v25[0];
  sub_19C4D0CAC((uint64_t *)&v24, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], a3, AssociatedConformanceWitness, (uint64_t *)v25);
  v22 = v25[1];
  v23 = v25[0];
  v21 = v25[2];
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, a4);
  v19 = v22;
  *a7 = v23;
  a7[1] = v19;
  result = *(double *)&v21;
  a7[2] = v21;
  return result;
}

__n128 MLShapedArraySlice.init(mutating:shape:)@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  __CVBuffer *v9;
  __n128 result;
  __n128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[3];

  v9 = a1;
  MLShapedArray.init(mutating:shape:)(v9, a2, (size_t *)v16);
  v13 = v16[0];
  swift_unknownObjectRetain();
  v15 = v13;
  sub_19C4D0CAC((uint64_t *)&v15, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], a3, a4, (uint64_t *)v16);
  v12 = v16[1];
  v14 = v16[0];
  v11 = (__n128)v16[2];
  swift_unknownObjectRelease();

  *a5 = v14;
  a5[1] = v12;
  result = v11;
  a5[2] = v11;
  return result;
}

uint64_t sub_19C4D0CAC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v9 = *a1;
  v10 = a1[1];
  type metadata accessor for MLShapedArray(0, a4, a5, a4);
  v11 = *(_QWORD *)(MLShapedArray.shape.getter() + 16);
  result = swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 16);
  if (v11 < v13)
    goto LABEL_27;
  v14 = MLShapedArray.shape.getter();
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v16 = *(_QWORD *)(a2 + 16);
    if (v16)
    {
      v17 = 0;
      v18 = v16 - 1;
      v19 = v15 - 1;
      if (v18 < v19)
        v19 = v18;
      v20 = v19 + 1;
      while (*(_QWORD *)(a2 + 32 + 8 * v17) < *(_QWORD *)(v14 + 8 * v17 + 32))
      {
        if (v20 == ++v17)
          goto LABEL_9;
      }
LABEL_26:
      result = swift_bridgeObjectRelease();
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
  }
LABEL_9:
  v42 = a3;
  swift_bridgeObjectRelease();
  v43 = v9;
  swift_bridgeObjectRetain();
  v21 = MLShapedArray.shape.getter();
  result = sub_19C4D0F38(v13, v21);
  v25 = v24 >> 1;
  v26 = (v24 >> 1) - v23;
  if (__OFSUB__(v24 >> 1, v23))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v26)
  {
    v27 = v22;
    v28 = v23;
    v44 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    result = sub_19C556FAC(0, v26 & ~(v26 >> 63), 0);
    if (v26 < 0)
    {
LABEL_29:
      __break(1u);
      return result;
    }
    v29 = v44;
    if (v28 <= v25)
      v30 = v25;
    else
      v30 = v28;
    v31 = v30 - v28;
    v32 = (uint64_t *)(v27 + 8 * v28);
    while (v31)
    {
      v33 = *v32;
      if (*v32 < 0)
        goto LABEL_25;
      v35 = v44[2];
      v34 = v44[3];
      if (v35 >= v34 >> 1)
        sub_19C556FAC(v34 > 1, v35 + 1, 1);
      v44[2] = v35 + 1;
      v36 = &v44[2 * v35];
      v36[4] = 0;
      v36[5] = v33;
      --v31;
      ++v32;
      if (!--v26)
      {
        swift_unknownObjectRelease();
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  swift_unknownObjectRelease();
  v29 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_23:
  v37 = sub_19C52494C(v42);
  swift_bridgeObjectRelease();
  v38 = sub_19C553B6C(v37, v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v39 = swift_bridgeObjectRetain();
  v40 = sub_19C4CFF70(v39);
  v41 = sub_19C4D0078(v38);
  swift_bridgeObjectRelease();
  result = sub_19C503880(v41);
  *a6 = v40;
  a6[1] = v43;
  a6[2] = v10;
  a6[3] = a2;
  a6[4] = v38;
  a6[5] = a2;
  return result;
}

uint64_t sub_19C4D0F38(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (result)
      v4 = v3;
    else
      v4 = 0;
    if (v2 >= v4)
      return a2;
  }
  __break(1u);
  return result;
}

double sub_19C4D0F78@<D0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[3];

  v9 = *a1;
  sub_19C4D0CAC((uint64_t *)&v9, MEMORY[0x1E0DEE9D8], a2, a3, a4, (uint64_t *)v10);
  result = *(double *)v10;
  v7 = v10[1];
  v8 = v10[2];
  *a5 = v10[0];
  a5[1] = v7;
  a5[2] = v8;
  return result;
}

uint64_t MLShapedArraySlice.strides.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(v4 + 24);
  type metadata accessor for MLShapedArray(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v6 = MLShapedArray.strides.getter();
  v7 = sub_19C4D0F38(*(_QWORD *)(v5 + 16), v6);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  if ((v12 & 1) == 0)
    goto LABEL_2;
  sub_19CAAA1FC();
  swift_unknownObjectRetain_n();
  v15 = swift_dynamicCastClass();
  if (!v15)
  {
    swift_unknownObjectRelease();
    v15 = MEMORY[0x1E0DEE9D8];
  }
  v16 = *(_QWORD *)(v15 + 16);
  swift_release();
  if (__OFSUB__(v13 >> 1, v11))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v16 != (v13 >> 1) - v11)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    v14 = sub_19C4D45C4(v7, v9, v11, v13);
    goto LABEL_9;
  }
  v14 = swift_dynamicCastClass();
  if (!v14)
  {
    swift_unknownObjectRelease();
    v14 = MEMORY[0x1E0DEE9D8];
  }
LABEL_9:
  swift_unknownObjectRelease();
  return v14;
}

uint64_t MLShapedArraySlice.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;

  MEMORY[0x1E0C80A78](a1);
  v7 = *(_QWORD *)(v3 + 24);
  v11 = *(_OWORD *)(v3 + 8);
  v12 = v11;
  (*(void (**)(char *))(v8 + 16))((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424180);
  v9 = sub_19CAA9AAC();
  return sub_19C4D0CAC((uint64_t *)&v12, v7, v9, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t MLShapedArraySlice.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19C4D24D0(a1, a2, a3, a4, a5, (void (*)(void))sub_19C4D5028);
}

{
  return sub_19C4D24D0(a1, a2, a3, a4, a5, (void (*)(void))sub_19C4D553C);
}

{
  sub_19C4D5810(a1, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 8))(a1);
}

BOOL sub_19C4D11D4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  return *a1 >= v2 && *a1 <= v3 && v3 >= v1 && v1 >= v2;
}

_QWORD *sub_19C4D11F4(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  if (!__OFSUB__(v1, *result))
    return (_QWORD *)(v1 - *result == result[2]);
  __break(1u);
  return result;
}

BOOL sub_19C4D1214(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[2];
  return v1 >= *a1 && v1 < a1[1];
}

_QWORD *sub_19C4D122C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[2];
  if (__OFSUB__(*result, v2))
    __break(1u);
  else
    *a2 = *result - v2;
  return result;
}

uint64_t sub_19C4D1248(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t result;
  char *v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v40 = a8;
  v41 = a5;
  v9 = v8;
  v53 = a4;
  v54 = a1;
  v55 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v52 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v51 = (char *)v37 - v12;
  v45 = v13;
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v38 = (char *)v37 - v18;
  v19 = sub_19CAA9E18();
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  v20 = MEMORY[0x1E0C80A78](v19);
  v49 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)v37 - v23;
  v25 = MEMORY[0x1E0C80A78](v22);
  v37[1] = (char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v48 = *((_QWORD *)v15 - 1);
  MEMORY[0x1E0C80A78](v27);
  v47 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v46 = (char *)v37 - v29;
  v30 = v15;
  v31 = sub_19CAA995C();
  v57 = sub_19CAAA034();
  v53 = sub_19CAAA040();
  sub_19CAA9FD4();
  (*(void (**)(char *, _QWORD, _QWORD *))(v48 + 16))(v47, v50, v15);
  v32 = v46;
  v50 = v30;
  result = sub_19CAA9944();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_19CAA9E54();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v24, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v54(v24, v52);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v52, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      sub_19CAAA028();
      if (!--v31)
      {
        v34 = v49;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v34 = v49;
LABEL_9:
  sub_19CAA9E54();
  v52 = *(char **)(v17 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v34, 1, AssociatedTypeWitness) == 1)
  {
    v35 = v49;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return v57;
  }
  else
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v36 = v38;
    v35 = v49;
    while (1)
    {
      v50(v36, v35, AssociatedTypeWitness);
      v54(v36, v51);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
      sub_19CAAA028();
      sub_19CAA9E54();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v35, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v51, v41);
  }
}

uint64_t sub_19C4D1754(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v14 = a6;
  v15 = a7;
  v16 = a8;
  v17 = a9;
  v18 = a1;
  v19 = sub_19C552864(a4, a3);
  v20 = a3;
  v11 = type metadata accessor for MLShapedArraySlice(0, v14, v16, v10);
  return MLShapedArraySlice.withUnsafeShapedBufferPointer<A>(_:)((uint64_t)sub_19C4D61C8, (uint64_t)&v13, v11, MEMORY[0x1E0DEE9C0] + 8);
}

uint64_t sub_19C4D1800(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = sub_19CAA98CC();
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v14 = result;
  result = sub_19CAA98CC();
  if (result)
  {
    v15 = a3[2];
    if (v15 == a4[2])
    {
      v16 = result;
      v21 = v14;
      v17 = a6;
      v18 = *(_QWORD *)(*(_QWORD *)(a8 - 8) + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      result = sub_19C500C0C(0, v15);
      if (v15 == a7[2])
      {
        v19 = result;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v20 = sub_19C500C0C(0, v15);
        sub_19C5919D4(v19, a3, a4, v20, a3, a7, v21, v16 + v18 * v17, a8, a8);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t MLShapedArraySlice.withUnsafeShapedBufferPointer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v4;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _BYTE v21[32];
  __int128 v22;
  __int128 v23;

  v6 = v4[2];
  *(_OWORD *)&v21[16] = v4[1];
  v22 = v6;
  *(_OWORD *)v21 = *v4;
  v23 = *(_OWORD *)&v21[8];
  v20 = *(_OWORD *)&v21[8];
  v7 = *(_QWORD *)(a3 + 24);
  v12 = *(_QWORD *)(a3 + 16);
  v13 = a4;
  v14 = v7;
  v15 = *((_QWORD *)&v6 + 1);
  v16 = v21;
  v17 = a1;
  v18 = a2;
  v19 = *(_QWORD *)v21;
  sub_19C4D54BC((uint64_t)&v23);
  v9 = type metadata accessor for MLShapedArray(0, v12, v7, v8);
  MLShapedArray.withUnsafeShapedBufferPointer<A>(_:)((uint64_t)sub_19C4D5488, (uint64_t)&v11, v9, a4);
  return swift_unknownObjectRelease();
}

uint64_t MLShapedArraySlice.withUnsafeMutableShapedBufferPointer<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[11];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v16 = a1;
  v17 = a2;
  v18 = a5;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  v10 = type metadata accessor for MLShapedArray(0, v8, v9, a4);
  v11 = sub_19C553E44();
  if ((v11 & 1) != 0)
    v11 = sub_19C4D1DC8(a3);
  v12 = v5[5];
  v13 = *v5;
  MEMORY[0x1E0C80A78](v11);
  v15[2] = v8;
  v15[3] = a4;
  v15[4] = v9;
  v15[5] = v12;
  v15[6] = v5;
  v15[7] = v16;
  v15[8] = v17;
  v15[9] = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MLShapedArray.withUnsafeMutableShapedBufferPointer<A>(_:)((uint64_t)sub_19C4D54E4, (uint64_t)v15, v10, a4, v18);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*MLShapedArraySlice.subscript.modify(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(_QWORD **a1, char a2)
{
  uint64_t v5;
  uint64_t *v11;
  uint64_t v12;

  v11 = (uint64_t *)malloc(0x60uLL);
  *a1 = v11;
  v11[8] = a5;
  v11[9] = v5;
  v11[6] = a3;
  v11[7] = a4;
  v12 = *(_QWORD *)(a4 - 8);
  v11[10] = v12;
  v11[11] = (uint64_t)malloc(*(_QWORD *)(v12 + 64));
  (*(void (**)(void))(v12 + 16))();
  MLShapedArraySlice.subscript.getter(a2, a3, v11);
  return sub_19C4D1BF0;
}

{
  uint64_t v5;
  uint64_t *v10;
  uint64_t v11;

  v10 = (uint64_t *)malloc(0x60uLL);
  *a1 = v10;
  v10[8] = a5;
  v10[9] = v5;
  v10[6] = a3;
  v10[7] = a4;
  v11 = *(_QWORD *)(a4 - 8);
  v10[10] = v11;
  v10[11] = (uint64_t)malloc(*(_QWORD *)(v11 + 64));
  (*(void (**)(void))(v11 + 16))();
  MLShapedArraySlice.subscript.getter(a3, v10);
  return sub_19C4D2640;
}

void sub_19C4D1BF0(_QWORD **a1, char a2)
{
  sub_19C4D264C(a1, a2, (void (*)(_QWORD *, void *, uint64_t, uint64_t, uint64_t))sub_19C4D5028);
}

uint64_t sub_19C4D1BFC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = sub_19C552864(a5, a4);
  result = sub_19CAA98CC();
  if (result)
  {
    if (__OFSUB__(a2, v15))
    {
      __break(1u);
    }
    else
    {
      v24 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))a7;
      a2 = sub_19CAA98D8();
      v15 = v17;
      a1 = sub_19C4D0F38(*(_QWORD *)(*(_QWORD *)(a6 + 24) + 16), (uint64_t)a4);
      a7 = v18;
      a8 = v19;
      a6 = v20;
      if ((v20 & 1) == 0)
      {
        swift_bridgeObjectRetain();
LABEL_5:
        v21 = sub_19C4D45C4(a1, a7, a8, a6);
LABEL_12:
        swift_unknownObjectRelease();
        v24(a2, v15, a9, v21);
        return swift_release();
      }
      sub_19CAAA1FC();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      v22 = swift_dynamicCastClass();
      if (!v22)
      {
        swift_unknownObjectRelease();
        v22 = MEMORY[0x1E0DEE9D8];
      }
      v23 = *(_QWORD *)(v22 + 16);
      swift_release();
      if (!__OFSUB__(a6 >> 1, a8))
      {
        if (v23 == (a6 >> 1) - a8)
        {
          v21 = swift_dynamicCastClass();
          if (!v21)
          {
            swift_unknownObjectRelease();
            v21 = MEMORY[0x1E0DEE9D8];
          }
          goto LABEL_12;
        }
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_15:
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_19C4D1DC8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v2 = (_QWORD *)v1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = swift_bridgeObjectRetain();
  MLShapedArray.init(unsafeUninitializedShape:initializingWith:)(v5, v3, v4, (uint64_t *)&v17);
  v16 = v17;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)(v1 + 8) = v16;
  swift_bridgeObjectRelease();
  v6 = MEMORY[0x1E0DEE9D8];
  v2[3] = MEMORY[0x1E0DEE9D8];
  v7 = *v2;
  v8 = *(_QWORD *)(*v2 + 16);
  if (v8)
  {
    *(_QWORD *)&v17 = v6;
    swift_bridgeObjectRetain();
    result = sub_19C556FAC(0, v8, 0);
    v10 = 0;
    v6 = v17;
    while (1)
    {
      v11 = *(_QWORD *)(v7 + 8 * v10 + 32);
      if (v11 < 0)
        break;
      *(_QWORD *)&v17 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        result = sub_19C556FAC(v12 > 1, v13 + 1, 1);
        v6 = v17;
      }
      ++v10;
      *(_QWORD *)(v6 + 16) = v13 + 1;
      v14 = v6 + 16 * v13;
      *(_QWORD *)(v14 + 32) = 0;
      *(_QWORD *)(v14 + 40) = v11;
      if (v8 == v10)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    v2[4] = v6;
    v15 = sub_19C500C0C(0, *(_QWORD *)(v7 + 16));
    swift_unknownObjectRelease();
    result = swift_bridgeObjectRelease();
    v2[5] = v15;
  }
  return result;
}

uint64_t sub_19C4D1F4C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a3[3];
  v6 = a3[4];
  v15 = *a3;
  v16 = *(_OWORD *)(a3 + 1);
  v17 = v5;
  v18 = v6;
  v10 = a4;
  v11 = a5;
  v12 = a3;
  v13 = a2;
  v14 = a1;
  v7 = type metadata accessor for MLShapedArraySlice(0, a4, a5, a4);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MLShapedArraySlice.withUnsafeShapedBufferPointer<A>(_:)((uint64_t)sub_19C4D60D0, (uint64_t)v9, v7, MEMORY[0x1E0DEE9C0] + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_19C4D2050(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = *(_QWORD **)a5;
  v9 = *(_QWORD *)(*(_QWORD *)a5 + 16);
  if (v9 != a4[2])
  {
    __break(1u);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = sub_19C500C0C(0, v9);
  v15 = *(_QWORD **)a5;
  v16 = v15[2];
  if (v16 != a6[2])
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v17 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = sub_19C500C0C(0, v16);
  v19 = sub_19CAA98CC();
  if (!v19)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v20 = v19;
  v21 = sub_19CAA98CC();
  if (v21)
  {
    sub_19C5919D4(v17, v8, a4, v18, v15, a6, v20, v21, a8, a8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_9:
  __break(1u);
}

double sub_19C4D21AC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  return MLShapedArraySlice.init(bytesNoCopy:shape:strides:deallocator:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

double sub_19C4D21B8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _OWORD *a3@<X8>)
{
  return MLShapedArraySlice.init(unsafeUninitializedShape:initializingWith:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_19C4D21D4()
{
  sub_19C4D4F98();
  return swift_bridgeObjectRetain();
}

uint64_t sub_19C4D21EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  return MLShapedArraySlice.subscript.getter(a1, a2, a3);
}

uint64_t sub_19C4D2200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_19C4D2478(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C4D5028);
}

uint64_t (*sub_19C4D220C(uint64_t ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t **v10;

  v10 = (uint64_t **)malloc(0x28uLL);
  *a1 = v10;
  v10[4] = (uint64_t *)MLShapedArraySlice.subscript.modify(v10, a2, a5, a3, a4);
  return sub_19C4D2280;
}

uint64_t sub_19C4D2284@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  return MLShapedArraySlice.subscript.getter(a1, a2);
}

uint64_t MLShapedArraySlice.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  __int128 v20;

  v18 = *(_OWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 32);
  swift_bridgeObjectRetain();
  v6 = sub_19CAA9C08();
  v7 = sub_19C4D0F38(v6, v5);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  if ((v12 & 1) == 0)
    goto LABEL_2;
  sub_19CAAA1FC();
  swift_unknownObjectRetain_n();
  v15 = swift_dynamicCastClass();
  if (!v15)
  {
    swift_unknownObjectRelease();
    v15 = MEMORY[0x1E0DEE9D8];
  }
  v16 = *(_QWORD *)(v15 + 16);
  swift_release();
  if (__OFSUB__(v13 >> 1, v11))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v16 != (v13 >> 1) - v11)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    v14 = sub_19C4D472C(v7, v9, v11, v13);
    goto LABEL_9;
  }
  v14 = swift_dynamicCastClass();
  if (!v14)
  {
    swift_unknownObjectRelease();
    v14 = MEMORY[0x1E0DEE9D8];
  }
LABEL_9:
  swift_unknownObjectRelease();
  v20 = v18;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424190);
  sub_19C4D60FC(&qword_1EE423220, (uint64_t *)&unk_1EE424190, MEMORY[0x1E0DEAF58]);
  swift_unknownObjectRetain();
  sub_19CAA9C98();
  return sub_19C4D0CAC((uint64_t *)&v20, v19, v14, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_19C4D246C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_19C4D2478(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C4D553C);
}

uint64_t sub_19C4D2478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  a7(a1, a2, a5, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

uint64_t sub_19C4D24D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  a6();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
}

uint64_t (*sub_19C4D250C(uint64_t ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t **v10;

  v10 = (uint64_t **)malloc(0x28uLL);
  *a1 = v10;
  v10[4] = (uint64_t *)MLShapedArraySlice.subscript.modify(v10, a2, a5, a3, a4);
  return sub_19C4D2280;
}

void sub_19C4D2640(_QWORD **a1, char a2)
{
  sub_19C4D264C(a1, a2, (void (*)(_QWORD *, void *, uint64_t, uint64_t, uint64_t))sub_19C4D553C);
}

void sub_19C4D264C(_QWORD **a1, char a2, void (*a3)(_QWORD *, void *, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[6];

  v3 = *a1;
  v4 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v8 = (*a1)[4];
  v7 = (*a1)[5];
  v9 = (void *)(*a1)[11];
  v14 = (*a1)[10];
  v10 = (*a1)[8];
  v12 = (*a1)[6];
  v11 = (*a1)[7];
  v15[0] = **a1;
  v15[1] = v4;
  v15[2] = v5;
  v15[3] = v6;
  v15[4] = v8;
  v15[5] = v7;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a3(v15, v9, v12, v11, v10);
    (*(void (**)(void *, uint64_t))(v14 + 8))(v9, v11);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    a3(v15, v9, v12, v11, v10);
    (*(void (**)(void *, uint64_t))(v14 + 8))(v9, v11);
  }
  free(v9);
  free(v3);
}

uint64_t sub_19C4D2790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MLShapedArraySlice.subscript.getter(a1, a4, a2, a3);
}

uint64_t MLShapedArraySlice.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  MEMORY[0x1E0C80A78](a1);
  v9 = *v4;
  v22 = v4[1];
  v23 = v9;
  v21 = v4[2];
  (*(void (**)(char *))(v10 + 16))((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_19CAA9AAC();
  v12 = *(_QWORD *)(result + 16);
  if (v12 == *(_QWORD *)(v23 + 16))
  {
    v13 = result;
    if (!v12)
    {
LABEL_7:
      v24 = v23;
      v25 = v22;
      v26 = v21;
      MEMORY[0x1E0C80A78](result);
      v19 = *(_QWORD *)(a2 + 16);
      v20 = *(_QWORD *)(a2 + 24);
      *((_QWORD *)&v21 - 6) = v19;
      *((_QWORD *)&v21 - 5) = a3;
      *((_QWORD *)&v21 - 4) = v20;
      *((_QWORD *)&v21 - 3) = a4;
      *((_QWORD *)&v21 - 2) = v13;
      MLShapedArraySlice.withUnsafeShapedBufferPointer<A>(_:)((uint64_t)sub_19C4D57B4, (uint64_t)(&v21 - 4), a2, v19);
      return swift_bridgeObjectRelease();
    }
    v14 = (uint64_t *)(result + 32);
    v15 = (uint64_t *)(v23 + 32);
    while (1)
    {
      v17 = *v14++;
      v16 = v17;
      if (v17 < 0)
        break;
      v18 = *v15++;
      if (v16 >= v18)
        break;
      if (!--v12)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_19C4D2908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_19C4D5810(a1, a2, a5, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 16) - 8) + 8))(a1);
}

uint64_t (*sub_19C4D29D4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  _QWORD *v10;

  v10 = malloc(0x28uLL);
  *a1 = v10;
  v10[4] = MLShapedArraySlice.subscript.modify(v10, a2, a5, a3, a4);
  return sub_19C4D2280;
}

void (*MLShapedArraySlice.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;

  v11 = malloc(0x50uLL);
  *a1 = v11;
  v11[2] = a5;
  v11[3] = v5;
  *v11 = a3;
  v11[1] = a4;
  v12 = *(_QWORD *)(a3 + 16);
  v11[4] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v11[5] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v11[6] = malloc(v14);
  v15 = malloc(v14);
  v16 = *(_QWORD *)(a4 - 8);
  v11[7] = v15;
  v11[8] = v16;
  v11[9] = malloc(*(_QWORD *)(v16 + 64));
  (*(void (**)(void))(v16 + 16))();
  MLShapedArraySlice.subscript.getter(a2, a3, a4, a5);
  return sub_19C4D2B34;
}

void sub_19C4D2B34(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, uint64_t);
  uint64_t v12;

  v2 = *a1;
  v3 = (void *)(*a1)[9];
  v12 = (*a1)[8];
  v4 = (void *)(*a1)[6];
  v5 = (void *)(*a1)[7];
  v6 = (*a1)[4];
  v7 = (*a1)[5];
  v8 = (*a1)[2];
  v10 = **a1;
  v9 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v2[6], v2[7], v2[4]);
    sub_19C4D5810((uint64_t)v4, (uint64_t)v3, v10, v9, v8);
    (*(void (**)(void *, uint64_t))(v12 + 8))(v3, v9);
    v11 = *(void (**)(void *, uint64_t))(v7 + 8);
    v11(v4, v6);
  }
  else
  {
    sub_19C4D5810(v2[7], (uint64_t)v3, *v2, v2[1], v2[2]);
    (*(void (**)(void *, uint64_t))(v12 + 8))(v3, v9);
    v11 = *(void (**)(void *, uint64_t))(v7 + 8);
  }
  v11(v5, v6);
  free(v3);
  free(v5);
  free(v4);
  free(v2);
}

uint64_t sub_19C4D2C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MLShapedArraySlice.withUnsafeShapedBufferPointer<A>(_:)(a1, a2, a4, a3);
}

uint64_t sub_19C4D2C60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return MLShapedArraySlice.withUnsafeMutableShapedBufferPointer<A>(_:)(a1, a2, a4, a3, a5);
}

uint64_t sub_19C4D2C88()
{
  return sub_19CAA9BF0();
}

uint64_t sub_19C4D2C94(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a2;
  v6 = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, a3);
  return MLShapedArrayProtocol.subscript.setter(a1, v5, a3, v6);
}

uint64_t (*sub_19C4D2CE0(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v7 = *a2;
  v8 = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, a3);
  v6[4] = MLShapedArrayProtocol.subscript.modify(v6, v7, a3, v8);
  return sub_19C4D2280;
}

uint64_t sub_19C4D2D58(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a2;
  v6 = a2[1];
  v7 = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, a3);
  return MLShapedArrayProtocol.subscript.setter(a1, v5, v6, a3, v7);
}

uint64_t (*sub_19C4D2DB0(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v8 = *a2;
  v7 = a2[1];
  v9 = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, a3);
  v6[4] = MLShapedArrayProtocol.subscript.modify(v6, v8, v7, a3, v9);
  return sub_19C4D2280;
}

uint64_t sub_19C4D2E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, a3);
  return sub_19CAA989C();
}

uint64_t sub_19C4D2EA0()
{
  return sub_19CAA9884();
}

uint64_t sub_19C4D2EC0()
{
  return sub_19CAA9878();
}

uint64_t sub_19C4D2EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>);
  return MLShapedArrayProtocol.init(arrayLiteral:)(a1, a2, v4);
}

uint64_t sub_19C4D2F28()
{
  MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>);
  return sub_19CAA9BD8();
}

uint64_t sub_19C4D2F78(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>);
  result = sub_19CAA9BD8();
  *a1 = v3;
  return result;
}

uint64_t sub_19C4D2FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, a4);
  return sub_19CAA9BCC();
}

uint64_t sub_19C4D303C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, a3);
  return sub_19CAA9BF0();
}

uint64_t sub_19C4D3090@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = MLShapedArraySlice.startIndex.getter();
  *a1 = result;
  return result;
}

uint64_t MLShapedArraySlice.startIndex.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  if (*(_QWORD *)(v1 + 16))
    return *(_QWORD *)(v1 + 32);
  else
    return 0;
}

uint64_t sub_19C4D30D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = MLShapedArraySlice.endIndex.getter();
  *a1 = result;
  return result;
}

uint64_t MLShapedArraySlice.endIndex.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  if (*(_QWORD *)(v1 + 16))
    return *(_QWORD *)(v1 + 40);
  else
    return 0;
}

uint64_t (*sub_19C4D3110(void ***a1, uint64_t *a2, uint64_t a3))()
{
  void **v6;
  uint64_t v7;
  uint64_t v8;

  v6 = (void **)malloc(0x28uLL);
  *a1 = v6;
  v7 = *a2;
  v8 = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, a3);
  v6[4] = sub_19C4EC0C0(v6, v7, a3, v8);
  return sub_19C4D2280;
}

void sub_19C4D3188(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_19C4D31B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = a1[1];
  v5 = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>);
  return MLShapedArrayProtocol.subscript.getter(v3, v4, a2, v5);
}

uint64_t sub_19C4D3208(uint64_t a1)
{
  MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, a1);
  return sub_19CAA9BE4();
}

uint64_t sub_19C4D3258(uint64_t a1)
{
  uint64_t v2;

  v2 = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, a1);
  return MLShapedArrayProtocol.count.getter(a1, v2);
}

void sub_19C4D328C(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

_QWORD *sub_19C4D329C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (__OFADD__(*result, a2))
    __break(1u);
  else
    *a3 = *result + a2;
  return result;
}

_QWORD *sub_19C4D32C0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *sub_19C4D32D8(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

__n128 sub_19C4D32F0@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v3 = MLShapedArraySlice.startIndex.getter();
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 48) = v3;
  return result;
}

uint64_t sub_19C4D3324(uint64_t a1)
{
  MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, a1);
  return sub_19CAA9C44();
}

uint64_t sub_19C4D3358(uint64_t a1)
{
  MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, a1);
  return sub_19CAA9C50();
}

double sub_19C4D338C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void (*a3)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t)@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  double result;
  _OWORD v12[2];
  __int128 v13;

  v7 = *(_QWORD *)(a2 + a1 - 24);
  v8 = *(_QWORD *)(a2 + a1 - 8);
  v9 = type metadata accessor for MLShapedArraySlice(0, *(_QWORD *)(a2 + a1 - 32), *(_QWORD *)(a2 + a1 - 16), (uint64_t)a3);
  a3(v12, a1, v9, v7, v8);
  v10 = v12[1];
  *a4 = v12[0];
  a4[1] = v10;
  result = *(double *)&v13;
  a4[2] = v13;
  return result;
}

uint64_t sub_19C4D3418(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = a4 + a3;
  v8 = *(_QWORD *)(a4 + a3 - 32);
  v9 = *(_QWORD *)(a4 + a3 - 24);
  v10 = *(_QWORD *)(a4 + a3 - 16);
  v11 = *(_QWORD *)(v7 - 8);
  v12 = a1[3];
  v13 = a1[4];
  v14 = a1[5];
  v17 = *a1;
  v18 = *(_OWORD *)(a1 + 1);
  v19 = v12;
  v20 = v13;
  v21 = v14;
  v15 = type metadata accessor for MLShapedArraySlice(0, v8, v10, a4);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a5(&v17, a3, v15, v9, v11);
}

uint64_t sub_19C4D34E8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a7;
  v14 = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](a1);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_19CAA98CC();
  v37 = result;
  if (result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a5, a9);
    v18 = sub_19CAA9AAC();
    v36 = sub_19C552864(v18, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v19 = sub_19CAA9C08();
    v20 = sub_19C4D0F38(v19, (uint64_t)a6);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    if ((v25 & 1) != 0)
    {
      sub_19CAAA1FC();
      swift_unknownObjectRetain_n();
      v27 = swift_dynamicCastClass();
      if (!v27)
      {
        swift_unknownObjectRelease();
        v27 = MEMORY[0x1E0DEE9D8];
      }
      v28 = *(_QWORD *)(v27 + 16);
      swift_release();
      if (__OFSUB__(v26 >> 1, v24))
        goto LABEL_16;
      if (v28 != (v26 >> 1) - v24)
        goto LABEL_17;
      v22 = (_QWORD *)swift_dynamicCastClass();
      if (!v22)
      {
        swift_unknownObjectRelease();
        v22 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      goto LABEL_10;
    }
    while (1)
    {
      v22 = (_QWORD *)sub_19C4D45C4(v20, (uint64_t)v22, v24, v26);
LABEL_10:
      swift_unknownObjectRelease();
      result = sub_19CAA98CC();
      if (!result)
        break;
      v24 = a3[2];
      if (v24 == a4[2])
      {
        v29 = result;
        v30 = *(_QWORD *)(*(_QWORD *)(a8 - 8) + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v31 = sub_19C500C0C(0, v24);
        if (v24 == v22[2])
        {
          v32 = v31;
          v33 = v29 + v30 * v36;
          swift_bridgeObjectRetain();
          v34 = sub_19C500C0C(0, v24);
          sub_19C591D40(v32, (uint64_t)a3, a4, v34, a3, v22, v37, v33, a8);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_19C4D3788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a3 + a2 - 24);
  v6 = *(_QWORD *)(a3 + a2 - 8);
  v7 = type metadata accessor for MLShapedArraySlice(0, *(_QWORD *)(a3 + a2 - 32), *(_QWORD *)(a3 + a2 - 16), a4);
  return MLShapedArraySlice.subscript.getter(a2, v7, v5, v6);
}

uint64_t sub_19C4D3800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(a4 + a3 - 24);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  v8 = type metadata accessor for MLShapedArraySlice(0, *(_QWORD *)(a4 + a3 - 32), *(_QWORD *)(a4 + a3 - 16), a4);
  return sub_19C4D5810(a1, a3, v8, v6, v7);
}

void MLShapedArraySlice.init(data:shape:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[3];

  v12 = *(_QWORD *)(a3 + 16);
  swift_bridgeObjectRetain();
  if (v12)
  {
    v13 = sub_19CAA9A58();
    *(_QWORD *)(v13 + 16) = v12;
  }
  else
  {
    v13 = MEMORY[0x1E0DEE9D8];
  }
  v18 = 0;
  *(_QWORD *)&v19[0] = v13 + 32;
  *((_QWORD *)&v19[0] + 1) = v12;
  sub_19C59373C(v19, &v18, a3);
  v14 = v18;
  v15 = v12 < v18;
  if (v12 < v18)
  {
    __break(1u);
    if (v15)
      __break(1u);
    *(_QWORD *)(v13 + 16) = v14;
    swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v13 + 16) = v18;
    swift_bridgeObjectRelease();
    MLShapedArraySlice.init(data:shape:strides:)(a1, a2, a3, v13, a4, a5, v19);
    v16 = v19[1];
    v17 = v19[2];
    *a6 = v19[0];
    a6[1] = v16;
    a6[2] = v17;
  }
}

double MLShapedArraySlice.reshaped(to:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_19C4D3B2C(a1, a2, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))MLShapedArray.init<A>(reshaping:to:), a3);
}

double MLShapedArraySlice.squeezingShape()@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_19C4D3A60(a1, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t))sub_19C553138, a2);
}

double MLShapedArraySlice.expandingShape(at:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v13 = *v3;
  v14 = *(_OWORD *)(v3 + 1);
  v15 = v7;
  v16 = v8;
  v17 = v9;
  v10 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, a2);
  return sub_19C4D0AA8((uint64_t)&v13, a1, v10, a2, v11, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C5532E4, a3);
}

double MLShapedArraySlice.transposed()@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_19C4D3A60(a1, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t))sub_19C553414, a2);
}

double sub_19C4D3A60@<D0>(uint64_t a1@<X0>, void (*a2)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v13 = *v3;
  v14 = *(_OWORD *)(v3 + 1);
  v15 = v7;
  v16 = v8;
  v17 = v9;
  v10 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, a1);
  return sub_19C4D0984((uint64_t)&v13, v10, a1, v11, a2, a3);
}

double MLShapedArraySlice.transposed(permutation:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_19C4D3B2C(a1, a2, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C55356C, a3);
}

double sub_19C4D3B2C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = v4[3];
  v10 = v4[4];
  v11 = v4[5];
  v15 = *v4;
  v16 = *(_OWORD *)(v4 + 1);
  v17 = v9;
  v18 = v10;
  v19 = v11;
  v12 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, a2);
  return sub_19C4D0AA8((uint64_t)&v15, a1, v12, a2, v13, a3, a4);
}

void MLShapedArraySlice.changingLayout(to:)(unint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 *v3;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31[2];
  _OWORD v32[3];
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v6 = *a1;
  v7 = v3[1];
  v33 = *v3;
  v34 = v7;
  v35 = v3[2];
  v8 = v33;
  if (!v6)
    goto LABEL_10;
  if (v6 != 1)
  {
    v11 = (_QWORD *)v6;
    goto LABEL_17;
  }
  v9 = *(_QWORD *)(v33 + 16);
  swift_bridgeObjectRetain();
  if (!v9)
  {
    v12 = 0;
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_16;
  }
  v10 = sub_19CAA9A58();
  v11 = (_QWORD *)v10;
  *(_QWORD *)(v10 + 16) = v9;
  v12 = *(_QWORD *)(v8 + 16);
  if (!v12)
  {
LABEL_16:
    v11[2] = v12;
    swift_bridgeObjectRelease();
LABEL_17:
    v32[0] = v33;
    v32[1] = v34;
    v32[2] = v35;
    sub_19C4D5950(v6);
    v23 = (_QWORD *)MLShapedArraySlice.strides.getter(a2, v20, v21, v22);
    v24 = sub_19C4D4494(v11, v23);
    swift_bridgeObjectRelease();
    if (v24)
    {
      swift_bridgeObjectRelease();
      v26 = v34;
      *a3 = v33;
      a3[1] = v26;
      a3[2] = v35;
      sub_19C4D59CC((uint64_t)&v33);
    }
    else
    {
      v28 = *(_QWORD *)(a2 + 16);
      v27 = *(_QWORD *)(a2 + 24);
      v29 = type metadata accessor for StandardStorage(0, v28, v27, v25);
      MEMORY[0x1E0C80A78](v29);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v30 = sub_19C528138(v8, (uint64_t)v11);
      swift_bridgeObjectRelease();
      sub_19C4E92FC(v30, (uint64_t)&off_1E3D456D0, v32);
      v31[0] = v32[0];
      sub_19C4D0270(v31, MEMORY[0x1E0DEE9D8], v28, v27, a3);
    }
    return;
  }
  v13 = 0;
  v14 = 1;
  do
  {
    *(_QWORD *)(v10 + 8 * v13 + 32) = v14;
    v15 = *(_QWORD *)(v8 + 32 + 8 * v13);
    v16 = v14 * v15;
    v17 = (unsigned __int128)(v14 * (__int128)v15) >> 64;
    v18 = v17 < v16 >> 63;
    if (v17 != v16 >> 63)
    {
      __break(1u);
      goto LABEL_22;
    }
    ++v13;
    v14 = v16;
  }
  while (v12 != v13);
  if (v9 >= v12)
    goto LABEL_16;
  __break(1u);
LABEL_10:
  v19 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRetain();
  if (v19)
  {
    v11 = (_QWORD *)sub_19CAA9A58();
    v11[2] = v19;
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)&v31[0] = 0;
  *(_QWORD *)&v32[0] = v11 + 4;
  *((_QWORD *)&v32[0] + 1) = v19;
  sub_19C59373C(v32, v31, v8);
  v12 = *(_QWORD *)&v31[0];
  v18 = v19 < *(_QWORD *)&v31[0];
  if (v19 >= *(uint64_t *)&v31[0])
    goto LABEL_16;
LABEL_22:
  __break(1u);
  if (v18)
    __break(1u);
  v11[2] = v12;
  swift_bridgeObjectRelease();
  __break(1u);
}

uint64_t sub_19C4D3EAC(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = sub_19CAA98CC();
  if (result)
  {
    v12 = result;
    result = sub_19CAA98CC();
    if (result)
    {
      v13 = a3[2];
      if (v13 == a4[2])
      {
        v14 = result;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        result = sub_19C500C0C(0, v13);
        if (v13 == a6[2])
        {
          v15 = result;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v16 = sub_19C500C0C(0, v13);
          sub_19C5919D4(v15, a3, a4, v16, a3, a6, v12, v14, a7, a7);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t MLShapedArraySlice.withUnsafeMutableShapedBufferPointer<A>(using:_:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  _QWORD v37[12];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _OWORD v44[3];
  uint64_t v45;

  v8 = v7;
  v9 = v6;
  v12 = *a1;
  v13 = *v6;
  v40 = a3;
  v41 = a6;
  v42 = a5;
  v43 = v12;
  if (!v12)
    goto LABEL_10;
  v39 = v8;
  if (v12 != 1)
  {
    swift_bridgeObjectRetain();
    v16 = (_QWORD *)v12;
    goto LABEL_20;
  }
  v14 = *(_QWORD *)(v13 + 16);
  swift_bridgeObjectRetain();
  if (!v14)
  {
    v17 = 0;
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_19:
    v16[2] = v17;
LABEL_20:
    v38 = a2;
    sub_19C4D5950(v12);
    swift_bridgeObjectRelease();
    v21 = *(_QWORD *)(a4 + 16);
    v22 = *(_QWORD *)(a4 + 24);
    v24 = type metadata accessor for MLShapedArray(0, v21, v22, v23);
    v37[11] = v9 + 1;
    if ((sub_19C553E44() & 1) != 0)
    {
      v28 = v42;
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = v42;
      v29 = *((_OWORD *)v9 + 1);
      v44[0] = *(_OWORD *)v9;
      v44[1] = v29;
      v44[2] = *((_OWORD *)v9 + 2);
      v30 = (_QWORD *)MLShapedArraySlice.strides.getter(a4, v25, v26, v27);
      v31 = sub_19C4D4494(v30, v16);
      swift_bridgeObjectRelease();
      v32 = swift_bridgeObjectRelease();
      if (v31)
      {
LABEL_24:
        v33 = v9[5];
        v34 = *v9;
        *(_QWORD *)&v44[0] = v43;
        MEMORY[0x1E0C80A78](v32);
        v37[2] = v21;
        v37[3] = v28;
        v37[4] = v22;
        v37[5] = v33;
        v37[6] = v9;
        v37[7] = v38;
        v37[8] = v40;
        v37[9] = v34;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        MLShapedArray.withUnsafeMutableShapedBufferPointer<A>(using:_:)((unint64_t *)v44, (uint64_t)sub_19C4D54E4, (uint64_t)v37, v24, v28);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    v32 = sub_19C4D1DC8(a4);
    goto LABEL_24;
  }
  v15 = sub_19CAA9A58();
  v16 = (_QWORD *)v15;
  *(_QWORD *)(v15 + 16) = v14;
  v17 = *(_QWORD *)(v13 + 16);
  if (!v17)
  {
    v12 = v43;
    goto LABEL_19;
  }
  v18 = 0;
  v19 = 1;
  v12 = v43;
  do
  {
    *(_QWORD *)(v15 + 8 * v18 + 32) = v19;
    v20 = *(_QWORD *)(v13 + 32 + 8 * v18);
    if ((unsigned __int128)(v19 * (__int128)v20) >> 64 != (v19 * v20) >> 63)
    {
      __break(1u);
      goto LABEL_26;
    }
    ++v18;
    v19 *= v20;
  }
  while (v17 != v18);
  if (v14 >= v17)
    goto LABEL_19;
  __break(1u);
LABEL_10:
  v14 = *(_QWORD *)(v13 + 16);
  swift_bridgeObjectRetain();
  if (v14)
  {
    v16 = (_QWORD *)sub_19CAA9A58();
    v16[2] = v14;
  }
  else
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v45 = 0;
  *(_QWORD *)&v44[0] = v16 + 4;
  *((_QWORD *)&v44[0] + 1) = v14;
  sub_19C59373C(v44, &v45, v13);
  if (!v8)
  {
    if (v14 >= v45)
    {
      v39 = 0;
      v16[2] = v45;
      v12 = v43;
      goto LABEL_20;
    }
LABEL_26:
    __break(1u);
  }
  v36 = v45;
  if (v14 < v45)
    __break(1u);
  v16[2] = v36;
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_19C4D42D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *, uint64_t, uint64_t);
  _QWORD v25[4];

  v25[3] = a7;
  v14 = sub_19C552864(a3, a2);
  v15 = *(_QWORD *)(a1 + 8);
  result = sub_19CAA98CC();
  if (result)
  {
    if (__OFSUB__(v15, v14))
    {
      __break(1u);
    }
    else
    {
      v24 = (void (*)(_QWORD *, uint64_t, uint64_t))a5;
      v25[0] = sub_19CAA9E3C();
      v25[1] = v17;
      a8 = sub_19C4D0F38(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 16), (uint64_t)a2);
      v14 = v18;
      v15 = v19;
      a5 = v20;
      if ((v20 & 1) == 0)
      {
        swift_bridgeObjectRetain();
LABEL_5:
        v21 = sub_19C4D45C4(a8, v14, v15, a5);
LABEL_12:
        swift_unknownObjectRelease();
        v24(v25, a6, v21);
        return swift_release();
      }
      sub_19CAAA1FC();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      v22 = swift_dynamicCastClass();
      if (!v22)
      {
        swift_unknownObjectRelease();
        v22 = MEMORY[0x1E0DEE9D8];
      }
      v23 = *(_QWORD *)(v22 + 16);
      swift_release();
      if (!__OFSUB__(a5 >> 1, v15))
      {
        if (v23 == (a5 >> 1) - v15)
        {
          v21 = swift_dynamicCastClass();
          if (!v21)
          {
            swift_unknownObjectRelease();
            v21 = MEMORY[0x1E0DEE9D8];
          }
          goto LABEL_12;
        }
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_15:
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

BOOL sub_19C4D4494(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_19C4D4500(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_19CAAA1E4(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_19CAAA1E4() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_19C4D45C4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    v8 = 8 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 8 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_1EE422D98);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_19CAAA118();
  __break(1u);
  return result;
}

uint64_t sub_19C4D472C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    v8 = 16 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 16 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 16 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_1EE421948);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 17;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 4);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_19CAAA118();
  __break(1u);
  return result;
}

uint64_t sub_19C4D4894(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4232B8);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * (v5 >> 4);
  v6 = sub_19C4D4C68((uint64_t)&v8, (_OWORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_19C4D5F7C();
  if (v6 != v1)
  {
    __break(1u);
    return MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

int64_t *sub_19C4D4978(int64_t *result, int64_t a2)
{
  int64_t v2;
  int64_t v4;
  int64_t *v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8[3];

  v2 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2)
      return (int64_t *)MEMORY[0x1E0DEE9D8];
    v4 = (int64_t)result;
    if (v2 <= 0)
    {
      v5 = (int64_t *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_1EE422D98);
      v5 = (int64_t *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v2;
      v5[3] = 2 * (v7 >> 3);
    }
    result = sub_19C4D4E68(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_19C4D4A3C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = a5;
  if (!a2)
    goto LABEL_33;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
    goto LABEL_46;
  if (!a5)
  {
LABEL_33:
    v11 = 0;
LABEL_37:
    *(_QWORD *)result = a4;
    *(_QWORD *)(result + 8) = v5;
    return v11;
  }
  v8 = a2;
  v9 = a4 + 32;
  v25 = result;
  v26 = a4 + 8;
  v10 = 1;
  v27 = a4 + 32;
  while (1)
  {
    v11 = v10;
    v13 = v5 + 2;
    v12 = v5[2];
    if (!v12)
    {
      result = swift_bridgeObjectRetain();
      v18 = v5;
      goto LABEL_30;
    }
    v14 = v12 - 1;
    v15 = v5[v12 + 3];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      break;
    if (v12 > *(_QWORD *)(a4 + 16))
      goto LABEL_43;
    if (v17 >= *(_QWORD *)(v9 + 16 * v14 + 8))
    {
      result = swift_bridgeObjectRetain();
      if (v12 != 1)
      {
        v19 = (_QWORD *)(v26 + 16 * v12);
        v18 = v5;
        while (v18)
        {
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_19C503550(v18);
            v18 = (_QWORD *)result;
          }
          v20 = v12 - 1;
          if ((int64_t)(v12 - 1) >= v18[2])
          {
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
            goto LABEL_42;
          }
          v18[v12 + 3] = 0;
          v14 = v12 - 2;
          if ((int64_t)(v12 - 2) >= *v13)
            goto LABEL_39;
          v21 = v13[v12];
          v16 = __OFADD__(v21, 1);
          v22 = v21 + 1;
          if (v16)
            goto LABEL_40;
          if (v14 >= *(_QWORD *)(a4 + 16))
            goto LABEL_41;
          if (v22 < *v19)
          {
            v9 = v27;
            goto LABEL_25;
          }
          v19 -= 2;
          --v12;
          if (v20 == 1)
            goto LABEL_23;
        }
        goto LABEL_47;
      }
LABEL_23:
      result = swift_bridgeObjectRelease();
      v18 = 0;
      v9 = v27;
    }
    else
    {
      swift_bridgeObjectRetain();
      v18 = v5;
LABEL_25:
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_19C503550(v18);
        v18 = (_QWORD *)result;
      }
      if (v14 >= v18[2])
        goto LABEL_44;
      v23 = v18[v14 + 4];
      v16 = __OFADD__(v23, 1);
      v24 = v23 + 1;
      if (v16)
        goto LABEL_45;
      v18[v14 + 4] = v24;
    }
LABEL_30:
    *v8 = v5;
    if (v11 == a3)
    {
      v5 = v18;
      v11 = a3;
LABEL_36:
      result = v25;
      goto LABEL_37;
    }
    ++v8;
    v10 = v11 + 1;
    v5 = v18;
    if (!v18)
      goto LABEL_36;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_19C4D4C68(uint64_t result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *v11 = *(_OWORD *)(*(_QWORD *)(a4 + 56) + 16 * v16);
    if (v13 == v10)
    {
      swift_unknownObjectRetain();
      goto LABEL_38;
    }
    ++v11;
    result = swift_unknownObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

int64_t *sub_19C4D4E68(int64_t *result, int64_t *a2, int64_t a3, int64_t a4, int64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  int64x2_t v16;
  _QWORD *v17;
  int64_t v18;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0)
    goto LABEL_31;
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4)
    goto LABEL_32;
  if (a5 > a4)
  {
    v5 = a4 + 1;
    *a2 = a4;
    v6 = a3 - 1;
    if (a3 == 1)
      goto LABEL_7;
    v7 = a3 - 2;
    if (a3 - 2 >= (unint64_t)(~a4 + a5))
      v7 = ~a4 + a5;
    if (v7 < v6)
      v6 = v7;
    v8 = v6 + 1;
    if (v8 > 4)
    {
      v11 = v8 & 3;
      if ((v8 & 3) == 0)
        v11 = 4;
      v12 = v8 - v11;
      v9 = v8 - v11 + 1;
      v13 = v5 + v12;
      v10 = &a2[v12];
      v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_19CAE7980);
      v15 = (int64x2_t *)(a2 + 3);
      v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *v15 = vaddq_s64(v14, v16);
        v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      v5 = v13;
    }
    else
    {
      v9 = 1;
      v10 = a2;
    }
    v17 = v10 + 1;
    v18 = v5;
    while (a3 != v9)
    {
      if (a5 == v18)
      {
        v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v18 >= a5)
        goto LABEL_30;
      ++v9;
      v5 = v18 + 1;
      *v17++ = v18++;
      if (a3 == v9)
        goto LABEL_7;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_19C4D4F98()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_19C4D4FA0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_19C4D4FE4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_19C4D5028(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t);
  uint64_t result;
  char v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v63 = a5;
  v51 = a3;
  v10 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EE424190);
  v11 = *(_QWORD *)(a5 + 8);
  v12 = MEMORY[0x1E0DEAF38];
  *(_QWORD *)&v65 = a4;
  *((_QWORD *)&v65 + 1) = v10;
  v55 = v10;
  *(_QWORD *)&v66 = v11;
  *((_QWORD *)&v66 + 1) = sub_19C4D60FC(&qword_1EE4232D0, (uint64_t *)&unk_1EE424190, MEMORY[0x1E0DEAF38]);
  v53 = *((_QWORD *)&v66 + 1);
  v13 = sub_19CAA9F50();
  v56 = *(_QWORD *)(v13 - 8);
  v57 = v13;
  MEMORY[0x1E0C80A78](v13);
  v54 = (char *)&v48 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE4232C0);
  v16 = sub_19C4D60FC(&qword_1EE4232C8, &qword_1EE4232C0, v12);
  *(_QWORD *)&v65 = a4;
  *((_QWORD *)&v65 + 1) = v15;
  v60 = v16;
  v61 = v15;
  v59 = v11;
  *(_QWORD *)&v66 = v11;
  *((_QWORD *)&v66 + 1) = v16;
  v17 = sub_19CAA9F50();
  v58 = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v48 - v19;
  v21 = *(_QWORD *)(a4 - 8);
  v22 = MEMORY[0x1E0C80A78](v18);
  v52 = (char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v48 - v25;
  MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v48 - v27;
  v29 = a1[1];
  v65 = *a1;
  v66 = v29;
  v67 = a1[2];
  v30 = a2;
  v62 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v62((char *)&v48 - v27, a2, a4);
  v31 = v5;
  v32 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 16);
  v33 = sub_19CAA9C08();
  v34 = *(uint64_t (**)(char *, uint64_t))(v21 + 8);
  result = v34(v28, a4);
  if (v32 != v33)
  {
    __break(1u);
    goto LABEL_6;
  }
  v62(v26, v30, a4);
  v64 = *(_QWORD *)(v31 + 32);
  sub_19CAAA22C();
  v50 = MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEC3A0], v17);
  v36 = sub_19CAA9980();
  v58 = *(_QWORD *)(v58 + 8);
  ((void (*)(char *, uint64_t))v58)(v20, v17);
  result = v34(v26, a4);
  if ((v36 & 1) == 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v48 = v17;
  v49 = v31;
  v37 = v52;
  v62(v52, v30, a4);
  v64 = v65;
  v38 = v54;
  sub_19CAAA22C();
  v39 = v57;
  MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEC3A0], v57);
  v40 = sub_19CAA9980();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v38, v39);
  result = v34(v37, a4);
  if ((v40 & 1) != 0)
  {
    v64 = *(_QWORD *)(v49 + 32);
    sub_19CAAA22C();
    v41 = v48;
    v43 = sub_19C4D1248((void (*)(char *, char *))sub_19C4D122C, 0, v48, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDCE8], v50, MEMORY[0x1E0DEDD18], v42);
    v44 = ((uint64_t (*)(char *, uint64_t))v58)(v20, v41);
    MEMORY[0x1E0C80A78](v44);
    v45 = v51;
    v46 = *(_QWORD *)(v51 + 24);
    *(&v48 - 6) = *(_QWORD *)(v51 + 16);
    *(&v48 - 5) = a4;
    v47 = v63;
    *(&v48 - 4) = v46;
    *(&v48 - 3) = v47;
    *(&v48 - 2) = v43;
    *(&v48 - 1) = (uint64_t)&v65;
    MLShapedArraySlice.withUnsafeMutableShapedBufferPointer<A>(_:)((uint64_t)sub_19C4D613C, (uint64_t)(&v48 - 8), v45, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEE9C0]);
    swift_bridgeObjectRelease();
    return sub_19C4D6168((uint64_t)&v65);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_19C4D5488(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  return sub_19C4D1BFC(a1, a2, a3, a4, *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), *(_QWORD *)(v4 + 72));
}

uint64_t sub_19C4D54BC(uint64_t a1)
{
  swift_unknownObjectRetain();
  return a1;
}

uint64_t sub_19C4D54E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  return sub_19C4D5A30(a1, a2, a3);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1A1AD76A0](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_19C4D553C(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t);
  uint64_t result;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v39 = a2;
  v33 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE4232C0);
  v9 = sub_19C4D60FC(&qword_1EE4232C8, &qword_1EE4232C0, MEMORY[0x1E0DEAF38]);
  v10 = *(_QWORD *)(a5 + 8);
  v35 = v9;
  v36 = v8;
  *(_QWORD *)&v41 = v8;
  *((_QWORD *)&v41 + 1) = a4;
  *(_QWORD *)&v42 = v9;
  *((_QWORD *)&v42 + 1) = v10;
  v34 = v10;
  v11 = sub_19CAA9F50();
  v37 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v32 - v13;
  v15 = *(_QWORD *)(a4 - 8);
  v16 = MEMORY[0x1E0C80A78](v12);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v32 - v19;
  v21 = a1[1];
  v41 = *a1;
  v42 = v21;
  v43 = a1[2];
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v22((char *)&v32 - v19, v39, a4);
  v32 = a5;
  v23 = sub_19CAA9C08();
  v24 = v38;
  v25 = *(_QWORD *)(*(_QWORD *)(v38 + 32) + 16);
  v26 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  result = v26(v20, a4);
  if (v25 < v23)
  {
    __break(1u);
  }
  else
  {
    v22(v18, v39, a4);
    v40 = *(_QWORD *)(v24 + 32);
    sub_19CAAA22C();
    MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEC3A0], v11);
    v28 = sub_19CAA9980();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v11);
    result = v26(v18, a4);
    if ((v28 & 1) != 0)
    {
      MEMORY[0x1E0C80A78](result);
      v29 = v33;
      v30 = *(_QWORD *)(v33 + 24);
      *(&v32 - 6) = *(_QWORD *)(v33 + 16);
      *(&v32 - 5) = a4;
      v31 = v32;
      *(&v32 - 4) = v30;
      *(&v32 - 3) = v31;
      *(&v32 - 2) = (uint64_t)&v41;
      *(&v32 - 1) = v39;
      MLShapedArraySlice.withUnsafeMutableShapedBufferPointer<A>(_:)((uint64_t)sub_19C4D6000, (uint64_t)(&v32 - 8), v29, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEE9C0]);
      return sub_19C4D6168((uint64_t)&v41);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_19C4D57B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = sub_19C552864(*(_QWORD *)(v3 + 48), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, a1 + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * v7, v6);
}

uint64_t sub_19C4D5810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[16];

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(_BYTE *))(v11 + 16))(&v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  result = sub_19CAA9AAC();
  v13 = *(_QWORD *)(result + 16);
  if (v13 == *(_QWORD *)(*(_QWORD *)v5 + 16))
  {
    v14 = result;
    if (!v13)
    {
LABEL_7:
      MEMORY[0x1E0C80A78](result);
      v20 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)&v21[-48] = *(_QWORD *)(a3 + 16);
      *(_QWORD *)&v21[-40] = a4;
      *(_QWORD *)&v21[-32] = v20;
      *(_QWORD *)&v21[-24] = a5;
      *(_QWORD *)&v21[-16] = v14;
      *(_QWORD *)&v21[-8] = a1;
      MLShapedArraySlice.withUnsafeMutableShapedBufferPointer<A>(_:)((uint64_t)sub_19C4D5FA4, (uint64_t)&v21[-64], a3, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEE9C0]);
      return swift_bridgeObjectRelease();
    }
    v15 = (uint64_t *)(result + 32);
    v16 = (uint64_t *)(*(_QWORD *)v5 + 32);
    while (1)
    {
      v18 = *v15++;
      v17 = v18;
      if (v18 < 0)
        break;
      v19 = *v16++;
      if (v17 >= v19)
        break;
      if (!--v13)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_19C4D5950(unint64_t result)
{
  if (result >= 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_19C4D5960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = v4[3];
  v6 = v4[5];
  v10 = v4[2];
  v11 = v5;
  v12 = a1;
  v13 = v6;
  v7 = type metadata accessor for MLShapedArraySlice(0, v10, v5, a4);
  return MLShapedArraySlice.withUnsafeShapedBufferPointer<A>(_:)((uint64_t)sub_19C4D5F88, (uint64_t)&v9, v7, MEMORY[0x1E0DEE9C0] + 8);
}

uint64_t sub_19C4D59CC(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_19C4D5A30@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_19C4D42D4(a1, a2, *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 72), a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_19C4D5A64(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t sub_19C4D5A6C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>);
  a1[2] = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, a2);
  result = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, a2);
  a1[3] = result;
  return result;
}

void sub_19C4D5AC4()
{
  JUMPOUT(0x1A1AD76ACLL);
}

uint64_t sub_19C4D5AD4()
{
  return sub_19C4D5BD0(&qword_1EE423228, MEMORY[0x1E0DEB8B8]);
}

unint64_t sub_19C4D5AF8()
{
  unint64_t result;

  result = qword_1EE4241A0;
  if (!qword_1EE4241A0)
  {
    result = MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EE4241A0);
  }
  return result;
}

void sub_19C4D5B3C()
{
  JUMPOUT(0x1A1AD76ACLL);
}

void sub_19C4D5B4C()
{
  JUMPOUT(0x1A1AD76ACLL);
}

void sub_19C4D5B5C()
{
  JUMPOUT(0x1A1AD76ACLL);
}

uint64_t sub_19C4D5B6C()
{
  return sub_19C4D5BD0(qword_1EE423230, MEMORY[0x1E0DEB890]);
}

void sub_19C4D5B90()
{
  JUMPOUT(0x1A1AD76ACLL);
}

uint64_t sub_19C4D5BA0()
{
  return MEMORY[0x1E0DEB430];
}

uint64_t sub_19C4D5BAC()
{
  return sub_19C4D5BD0((unint64_t *)&qword_1EE4241B0, MEMORY[0x1E0DEB8C0]);
}

uint64_t sub_19C4D5BD0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EE424180);
    v6 = sub_19C4D5AF8();
    v7[0] = MEMORY[0x1E0DEB458];
    v7[1] = v6;
    result = MEMORY[0x1A1AD76AC](a2, v5, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_19C4D5C3C()
{
  JUMPOUT(0x1A1AD76ACLL);
}

double sub_19C4D5C4C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  return sub_19C4D338C(a1, a2, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))MLShapedArraySlice.subscript.getter, a3);
}

uint64_t sub_19C4D5C68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19C4D3418(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C4D5028);
}

uint64_t sub_19C4D5C84()
{
  return 32;
}

__n128 sub_19C4D5C90(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

double sub_19C4D5C9C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  return sub_19C4D338C(a1, a2, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))MLShapedArraySlice.subscript.getter, a3);
}

uint64_t sub_19C4D5CB8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19C4D3418(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C4D553C);
}

uint64_t sub_19C4D5CD4()
{
  return 32;
}

__n128 sub_19C4D5CE0(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_19C4D5CF4()
{
  return 32;
}

__n128 sub_19C4D5D00(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_19C4D5D0C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_19C4D5D14()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19C4D5D54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_19C4D5DD0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = v4;
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_19C4D5E78(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLModelStructure.Program.Function(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLModelStructure.Program.Function(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for MLShapedArraySlice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MLShapedArraySlice);
}

uint64_t sub_19C4D5F7C()
{
  return swift_release();
}

uint64_t sub_19C4D5F88(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;

  return sub_19C4D3EAC(a1, a2, a3, a4, *(_QWORD *)(v4 + 32), *(_QWORD **)(v4 + 40), *(_QWORD *)(v4 + 16));
}

uint64_t sub_19C4D5FA4(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = v3[2];
  v5 = v3[6];
  v6 = v3[7];
  v7 = *a1;
  v8 = sub_19C552864(v5, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(v7 + *(_QWORD *)(*(_QWORD *)(v4 - 8) + 72) * v8, v6, v4);
}

uint64_t sub_19C4D6000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(v4 + 56);
  v6 = *(_OWORD *)(v4 + 32);
  v10 = *(_OWORD *)(v4 + 16);
  v11 = v6;
  v12 = v5;
  v13 = a3;
  v14 = a1;
  v7 = type metadata accessor for MLShapedArraySlice(0, v10, v6, a4);
  return MLShapedArraySlice.withUnsafeShapedBufferPointer<A>(_:)((uint64_t)sub_19C4D6080, (uint64_t)&v9, v7, MEMORY[0x1E0DEE9C0] + 8);
}

uint64_t sub_19C4D6080(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;

  return sub_19C4D34E8(a1, a2, a3, a4, *(_QWORD *)(v4 + 48), *(_QWORD **)(v4 + 56), *(_QWORD *)(v4 + 64), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_19C4D60B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C4D1F4C(a1, a2, *(uint64_t **)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_19C4D60D0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  sub_19C4D2050(a1, a2, a3, a4, *(_QWORD *)(v4 + 32), *(_QWORD **)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 16));
}

uint64_t sub_19C4D60FC(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1A1AD76AC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_19C4D613C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;

  return sub_19C4D1754(a1, a2, a3, v3[6], v3[7], v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_19C4D6168(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_19C4D61C8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;

  return sub_19C4D1800(a1, a2, a3, a4, *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), *(_QWORD **)(v4 + 64), *(_QWORD *)(v4 + 16));
}

uint64_t sub_19C4D61FC()
{
  return sub_19C4D5BD0((unint64_t *)&qword_1EE4241B0, MEMORY[0x1E0DEB8C0]);
}

_QWORD *sub_19C4D6220@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  if (__OFSUB__(v2, *result))
    __break(1u);
  else
    *a2 = v2 - *result;
  return result;
}

BOOL sub_19C4D6244(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_19C4D625C()
{
  sub_19CAAA298();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C4D62A0()
{
  return sub_19CAAA2A4();
}

uint64_t sub_19C4D62C8()
{
  sub_19CAAA298();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

void sub_19C4D6308()
{
  __int128 *v0;
  _BYTE v1[56];

  sub_19C4D689C(v0, (uint64_t)v1);
  sub_19C4D633C();
}

void sub_19C4D633C()
{
  __int128 *v0;
  _BYTE v1[56];

  sub_19C4D689C(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_19C4D6380()
{
  unsigned __int8 v1;

  sub_19CAA9F2C();
  sub_19CAA992C();
  sub_19C59EBA4(v1);
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  return 0;
}

uint64_t sub_19C4D689C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  *(_BYTE *)(a2 + 48) = *((_BYTE *)a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t sub_19C4D68BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t result;

  result = a2;
  if (a7 != 5)
  {
    if (a7 != 4)
    {
      if (a7 != 3)
        return result;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for InternalError(uint64_t a1)
{
  return sub_19C4D6938(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t sub_19C4D6938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t result;

  result = a2;
  if (a7 != 5)
  {
    if (a7 != 4)
    {
      if (a7 != 3)
        return result;
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InternalError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_19C4D68BC(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for InternalError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_19C4D68BC(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  sub_19C4D6938(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for InternalError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  sub_19C4D6938(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InternalError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 250;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t sub_19C4D6BAC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t sub_19C4D6BB8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for InternalError()
{
  return &type metadata for InternalError;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_19C4D6CB8 + 4 * byte_19CAE7CC0[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_19C4D6CEC + 4 * byte_19CAE7CBB[v4]))();
}

uint64_t sub_19C4D6CEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C4D6CF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19C4D6CFCLL);
  return result;
}

uint64_t sub_19C4D6D08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19C4D6D10);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_19C4D6D14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C4D6D1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C4D6D28(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_19C4D6D30(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceKind()
{
  return &type metadata for DeviceKind;
}

unint64_t sub_19C4D6D50()
{
  unint64_t result;

  result = qword_1EE4232D8;
  if (!qword_1EE4232D8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE7D24, &type metadata for DeviceKind);
    atomic_store(result, (unint64_t *)&qword_1EE4232D8);
  }
  return result;
}

uint64_t sub_19C4D6D94()
{
  uint64_t result;
  BOOL v1;
  char v2;
  size_t v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  v3 = 4;
  result = sysctlbyname("kern.hv_vmm_present", &v4, &v3, 0, 0);
  if ((_DWORD)result)
    v1 = 1;
  else
    v1 = v4 == 0;
  v2 = !v1;
  byte_1EE4317C8 = v2;
  return result;
}

void sub_19C4D6E18()
{
  void *v0;
  char v1;

  v0 = (void *)sub_19CAA98F0();
  v1 = MGGetBoolAnswer();

  byte_1EE4317C9 = v1;
}

uint64_t sub_19C4D6E6C()
{
  uint64_t result;

  if (qword_1EE422E30 != -1)
    result = swift_once();
  byte_1EE4317CA = (byte_1EE4317C8 & 1) == 0;
  return result;
}

uint64_t sub_19C4D6EBC()
{
  uint64_t result;

  result = sub_19C4D6EDC();
  byte_1EE4317CB = result & 1;
  return result;
}

uint64_t sub_19C4D6EDC()
{
  id v0;
  id v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v0 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v1 = objc_msgSend(v0, sel_environment);

  v2 = sub_19CAA9800();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_8;
  sub_19C54B7A4(0xD000000000000019, 0x800000019CABA3D0);
  if ((v3 & 1) == 0)
    goto LABEL_8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (sub_19CAA9914() == 1702195828 && v4 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    swift_bridgeObjectRelease();
    return 1;
  }
  v6 = sub_19CAAA1E4();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
    goto LABEL_8;
  v8 = sub_19CAA9914();
  v10 = v9;
  swift_bridgeObjectRelease();
  if (v8 == 7562617 && v10 == 0xE300000000000000)
    goto LABEL_8;
  v12 = sub_19CAAA1E4();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_19C4D7084()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PlatformInfo()
{
  return objc_opt_self();
}

uint64_t sub_19C4D70B4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 4)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_19C4D70C8(uint64_t a1, char a2)
{
  uint64_t result;

  if (a2 == 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for InputError(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 64);
  while (2)
  {
    switch(v2)
    {
      case 0:
      case 3:
      case 6:
      case 8:
        return result;
      case 1:
      case 2:
      case 5:
        swift_bridgeObjectRelease();
        goto LABEL_8;
      case 4:
        return sub_19C4D7188(*(_QWORD *)(result + 8), *(_QWORD *)(result + 16), *(_BYTE *)(result + 24));
      case 7:
LABEL_8:
        result = swift_bridgeObjectRelease();
        break;
      case 9:
        result = sub_19C4D719C(*(_QWORD *)(result + 8), *(_BYTE *)(result + 16));
        break;
      case 10:
        __swift_destroy_boxed_opaque_existential_0(result);
        result = __swift_destroy_boxed_opaque_existential_0(v1 + 32);
        break;
      default:
        v2 = *(_DWORD *)result + 11;
        continue;
    }
    return result;
  }
}

uint64_t sub_19C4D7188(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 4)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_19C4D719C(uint64_t a1, char a2)
{
  uint64_t result;

  if (a2 == 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t initializeWithCopy for InputError(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(unsigned __int8 *)(a2 + 64);
  while (2)
  {
    switch(v4)
    {
      case 0:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_BYTE *)(a1 + 64) = 0;
        return a1;
      case 1:
        v5 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v5;
        v6 = 1;
        goto LABEL_10;
      case 2:
        v7 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v7;
        v6 = 2;
        goto LABEL_10;
      case 3:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v8 = 3;
        goto LABEL_16;
      case 4:
        v9 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v10 = *(_QWORD *)(a2 + 16);
        v11 = *(_BYTE *)(a2 + 24);
        sub_19C4D70B4(v9, v10, v11);
        *(_QWORD *)(a1 + 8) = v9;
        *(_QWORD *)(a1 + 16) = v10;
        *(_BYTE *)(a1 + 24) = v11;
        v8 = 4;
        goto LABEL_16;
      case 5:
        v12 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v12;
        v6 = 5;
LABEL_10:
        *(_BYTE *)(a1 + 64) = v6;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return a1;
      case 6:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v8 = 6;
        goto LABEL_16;
      case 7:
        v13 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v13;
        *(_BYTE *)(a1 + 64) = 7;
        swift_bridgeObjectRetain();
        return a1;
      case 8:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        v8 = 8;
        goto LABEL_16;
      case 9:
        *(_WORD *)a1 = *(_WORD *)a2;
        v14 = *(_QWORD *)(a2 + 8);
        v15 = *(_BYTE *)(a2 + 16);
        sub_19C4D70C8(v14, v15);
        *(_QWORD *)(a1 + 8) = v14;
        *(_BYTE *)(a1 + 16) = v15;
        v8 = 9;
        goto LABEL_16;
      case 10:
        v16 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 24) = v16;
        (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1, a2);
        v17 = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 56) = v17;
        (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 32, a2 + 32);
        v8 = 10;
LABEL_16:
        *(_BYTE *)(a1 + 64) = v8;
        return a1;
      default:
        v4 = *(_DWORD *)a2 + 11;
        continue;
    }
  }
}

uint64_t assignWithCopy for InputError(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 64);
    while (2)
    {
      switch(v4)
      {
        case 0:
        case 3:
        case 6:
        case 8:
          break;
        case 1:
        case 2:
        case 5:
          swift_bridgeObjectRelease();
          goto LABEL_9;
        case 4:
          sub_19C4D7188(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
          break;
        case 7:
LABEL_9:
          swift_bridgeObjectRelease();
          break;
        case 9:
          sub_19C4D719C(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
          break;
        case 10:
          __swift_destroy_boxed_opaque_existential_0(a1);
          __swift_destroy_boxed_opaque_existential_0(a1 + 32);
          break;
        default:
          v4 = *(_DWORD *)a1 + 11;
          continue;
      }
      break;
    }
    v5 = *(unsigned __int8 *)(a2 + 64);
    while (2)
    {
      switch(v5)
      {
        case 0:
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_BYTE *)(a1 + 64) = 0;
          return a1;
        case 1:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v6 = 1;
          goto LABEL_19;
        case 2:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v6 = 2;
          goto LABEL_19;
        case 3:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v7 = 3;
          goto LABEL_25;
        case 4:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v8 = *(_QWORD *)(a2 + 8);
          v9 = *(_QWORD *)(a2 + 16);
          v10 = *(_BYTE *)(a2 + 24);
          sub_19C4D70B4(v8, v9, v10);
          *(_QWORD *)(a1 + 8) = v8;
          *(_QWORD *)(a1 + 16) = v9;
          *(_BYTE *)(a1 + 24) = v10;
          v7 = 4;
          goto LABEL_25;
        case 5:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v6 = 5;
LABEL_19:
          *(_BYTE *)(a1 + 64) = v6;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          return a1;
        case 6:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v7 = 6;
          goto LABEL_25;
        case 7:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_BYTE *)(a1 + 64) = 7;
          swift_bridgeObjectRetain();
          return a1;
        case 8:
          *(_DWORD *)a1 = *(_DWORD *)a2;
          v7 = 8;
          goto LABEL_25;
        case 9:
          *(_WORD *)a1 = *(_WORD *)a2;
          v11 = *(_QWORD *)(a2 + 8);
          v12 = *(_BYTE *)(a2 + 16);
          sub_19C4D70C8(v11, v12);
          *(_QWORD *)(a1 + 8) = v11;
          *(_BYTE *)(a1 + 16) = v12;
          v7 = 9;
          goto LABEL_25;
        case 10:
          v13 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v13;
          (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1, a2);
          v14 = *(_QWORD *)(a2 + 56);
          *(_QWORD *)(a1 + 56) = v14;
          (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 32, a2 + 32);
          v7 = 10;
LABEL_25:
          *(_BYTE *)(a1 + 64) = v7;
          break;
        default:
          v5 = *(_DWORD *)a2 + 11;
          continue;
      }
      break;
    }
  }
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for InputError(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 64);
    while (2)
    {
      switch(v4)
      {
        case 0:
        case 3:
        case 6:
        case 8:
          break;
        case 1:
        case 2:
        case 5:
          swift_bridgeObjectRelease();
          goto LABEL_9;
        case 4:
          sub_19C4D7188(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
          break;
        case 7:
LABEL_9:
          swift_bridgeObjectRelease();
          break;
        case 9:
          sub_19C4D719C(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
          break;
        case 10:
          __swift_destroy_boxed_opaque_existential_0(a1);
          __swift_destroy_boxed_opaque_existential_0(a1 + 32);
          break;
        default:
          v4 = *(_DWORD *)a1 + 11;
          continue;
      }
      break;
    }
    v5 = *(unsigned __int8 *)(a2 + 64);
    while (2)
    {
      switch(v5)
      {
        case 0:
          v6 = 0;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          break;
        case 1:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 1;
          break;
        case 2:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 2;
          break;
        case 3:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 3;
          break;
        case 4:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
          v6 = 4;
          break;
        case 5:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 5;
          break;
        case 6:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 6;
          break;
        case 7:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 7;
          break;
        case 8:
          *(_DWORD *)a1 = *(_DWORD *)a2;
          v6 = 8;
          break;
        case 9:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
          v6 = 9;
          break;
        case 10:
          v7 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v7;
          v8 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 48) = v8;
          v6 = 10;
          break;
        default:
          v5 = *(_DWORD *)a2 + 11;
          continue;
      }
      break;
    }
    *(_BYTE *)(a1 + 64) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for InputError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xF6 && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 246);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 >= 0xB)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for InputError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_BYTE *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 246;
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

uint64_t sub_19C4D77E4(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 64);
  if (result >= 0xB)
    return (*(_DWORD *)a1 + 11);
  return result;
}

uint64_t sub_19C4D7800(uint64_t result, unsigned int a2)
{
  if (a2 > 0xA)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 11;
    LOBYTE(a2) = 11;
  }
  *(_BYTE *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for InputError()
{
  return &type metadata for InputError;
}

void sub_19C4D783C()
{
  uint64_t v0;
  _BYTE v1[80];

  sub_19C4D893C(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_19C4D7884()
{
  sub_19CAA9F2C();
  sub_19CAA992C();
  sub_19CAA9908();
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  sub_19CAA9908();
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  return 0;
}

uint64_t sub_19C4D893C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for InputError(a2, a1);
  return a2;
}

_OWORD *sub_19C4D8970(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_19C4D8980(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_19C4D89BC(uint64_t a1, char a2)
{
  int64_t v3;
  uint64_t v5;

  if (!a2)
  {
    v5 = 96;
    sub_19C59EBA4(a1);
    sub_19CAA992C();
    swift_bridgeObjectRelease();
LABEL_7:
    sub_19CAA992C();
    return v5;
  }
  if (a2 != 1)
  {
    sub_19CAA9F2C();
    swift_bridgeObjectRelease();
    v5 = 6299745;
    sub_19CAAA3A0();
    sub_19CAA992C();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    sub_19C557048(0, v3, 0);
    __asm { BR              X9 }
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4232E0);
  sub_19C4D91BC();
  sub_19CAA9854();
  swift_bridgeObjectRelease();
  v5 = 0x20666F20656E6FLL;
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_19C4D8CDC()
{
  uint64_t v0;

  return sub_19C4D89BC(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

void sub_19C4D8CE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v11[10];

  v2 = sub_19CAAA124();
  v11[4] = *(_QWORD *)(v2 - 8);
  v11[5] = v2;
  MEMORY[0x1E0C80A78](v2);
  v11[3] = (char *)v11 - v3;
  v4 = sub_19CAAA070();
  v11[1] = *(_QWORD *)(v4 - 8);
  v11[2] = v4;
  MEMORY[0x1E0C80A78](v4);
  v5 = sub_19CAA98A8();
  v6 = MEMORY[0x1E0C80A78](v5);
  v7 = MEMORY[0x1E0C80A78](v6);
  MEMORY[0x1E0C80A78](v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 16))((char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v11[6], a1);
  v10 = (char *)sub_19C4D8E60 + 4 * byte_19CAE7DDE[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_19C4D8E60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v1, v3, v0);
  *(_QWORD *)(v4 - 104) = 0;
  *(_QWORD *)(v4 - 96) = 0xE000000000000000;
  sub_19CAA992C();
  sub_19CAAA1C0();
  sub_19CAA992C();
  v5 = *(_QWORD *)(v4 - 104);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  return v5;
}

uint64_t sub_19C4D9134@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  sub_19CAA992C();
  sub_19CAAA1C0();
  result = sub_19CAA992C();
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return result;
}

unint64_t sub_19C4D91BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE4232E8;
  if (!qword_1EE4232E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE4232E0);
    result = MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EE4232E8);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ScalarKindExpectation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_19C4D70C8(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for ScalarKindExpectation(uint64_t a1)
{
  return sub_19C4D719C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for ScalarKindExpectation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_19C4D70C8(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_19C4D719C(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for ScalarKindExpectation(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_19C4D719C(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScalarKindExpectation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScalarKindExpectation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_19C4D9388(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_19C4D9390(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ScalarKindExpectation()
{
  return &type metadata for ScalarKindExpectation;
}

uint64_t sub_19C4D93A8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_19C4D93B0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v0 = sub_19CAA98A8();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v0;
}

_QWORD *sub_19C4D9458(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD *, _QWORD *, uint64_t);

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v8;
  v10 = v7 + v8;
  if (((v7 + v9) & ~v9) + v7 > v7)
    v7 += (v7 + v8) & ~(unint64_t)v8;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = v8 & 0x100000;
  if (v9 > 7 || v12 != 0 || (unint64_t)(v11 + 1) > 0x18)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v9 & 0xF8 ^ 0x1F8) & (v9 + 16)));
    swift_retain();
  }
  else
  {
    v18 = ~v9;
    switch(*((_BYTE *)a2 + v11))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
        *((_BYTE *)v4 + v11) = 0;
        break;
      case 1:
        v19 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16);
        v19(a1, a2, *(_QWORD *)(a3 + 16));
        v19((_QWORD *)(((unint64_t)v4 + v10) & v18), (_QWORD *)(((unint64_t)a2 + v10) & v18), v5);
        *((_BYTE *)v4 + v11) = 1;
        break;
      case 2:
        (*(void (**)(_QWORD *, _QWORD *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
        *((_BYTE *)v4 + v11) = 2;
        break;
      case 3:
        (*(void (**)(_QWORD *, _QWORD *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
        *((_BYTE *)v4 + v11) = 3;
        break;
      case 4:
        *a1 = *a2;
        *((_BYTE *)a1 + v11) = 4;
        swift_bridgeObjectRetain();
        break;
      default:
        if (v11 <= 3)
          v17 = v11;
        else
          v17 = 4;
        __asm { BR              X14 }
        return result;
    }
  }
  return v4;
}

uint64_t sub_19C4D963C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t result;
  void (*v13)(uint64_t, uint64_t);

  v2 = a1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  if (((v5 + v6) & ~v6) + v5 > v5)
    v5 += (v5 + v6) & ~v6;
  if (v5 <= 8)
    v5 = 8;
  v9 = ~v6;
  switch(*(_BYTE *)(a1 + v5))
  {
    case 0:
    case 2:
    case 3:
      v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
      v11 = *(_QWORD *)(a2 + 16);
      goto LABEL_13;
    case 1:
      v13 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v13(a1, v3);
      a1 = (v7 + v2) & v9;
      v11 = v3;
      v10 = (uint64_t (*)(uint64_t, uint64_t))v13;
LABEL_13:
      result = v10(a1, v11);
      break;
    case 4:
      result = swift_bridgeObjectRelease();
      break;
    default:
      if (v5 <= 3)
        v8 = v5;
      else
        v8 = 4;
      __asm { BR              X15 }
      return result;
  }
  return result;
}

_QWORD *sub_19C4D9778(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *result;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 > v7)
    v7 += (v7 + v8) & ~v8;
  if (v7 <= 8)
    v10 = 8;
  else
    v10 = v7;
  v12 = ~v8;
  switch(*((_BYTE *)a2 + v10))
  {
    case 0:
      (*(void (**)(_QWORD *, _QWORD *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
      *((_BYTE *)a1 + v10) = 0;
      break;
    case 1:
      v13 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16);
      v13(a1, a2, *(_QWORD *)(a3 + 16));
      v13((_QWORD *)(((unint64_t)a1 + v9) & v12), (_QWORD *)(((unint64_t)a2 + v9) & v12), v5);
      *((_BYTE *)a1 + v10) = 1;
      break;
    case 2:
      (*(void (**)(_QWORD *, _QWORD *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
      *((_BYTE *)a1 + v10) = 2;
      break;
    case 3:
      (*(void (**)(_QWORD *, _QWORD *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
      *((_BYTE *)a1 + v10) = 3;
      break;
    case 4:
      *a1 = *a2;
      *((_BYTE *)a1 + v10) = 4;
      swift_bridgeObjectRetain();
      break;
    default:
      if (v10 <= 3)
        v11 = v10;
      else
        v11 = 4;
      __asm { BR              X14 }
      return result;
  }
  return a1;
}

_QWORD *sub_19C4D991C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  char v15;
  void (*v16)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *result;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 > v7)
      v7 += (v7 + v8) & ~v8;
    if (v7 <= 8)
      v10 = 8;
    else
      v10 = v7;
    v12 = ~v8;
    switch(*((_BYTE *)a1 + v10))
    {
      case 0:
      case 2:
      case 3:
        (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
        break;
      case 1:
        v13 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
        v13(a1, *(_QWORD *)(a3 + 16));
        v13((_QWORD *)(((unint64_t)a1 + v9) & v12), v5);
        break;
      case 4:
        swift_bridgeObjectRelease();
        break;
      default:
        if (v10 <= 3)
          v11 = v10;
        else
          v11 = 4;
        __asm { BR              X13 }
        return result;
    }
    switch(*((_BYTE *)a2 + v10))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
        *((_BYTE *)a1 + v10) = 0;
        return a1;
      case 1:
        v16 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16);
        v16(a1, a2, v5);
        v16((_QWORD *)(((unint64_t)a1 + v9) & v12), (_QWORD *)(((unint64_t)a2 + v9) & v12), v5);
        v15 = 1;
        goto LABEL_26;
      case 2:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
        v15 = 2;
        goto LABEL_26;
      case 3:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
        v15 = 3;
LABEL_26:
        *((_BYTE *)a1 + v10) = v15;
        break;
      case 4:
        *a1 = *a2;
        *((_BYTE *)a1 + v10) = 4;
        swift_bridgeObjectRetain();
        break;
      default:
        if (v10 <= 3)
          v14 = v10;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_QWORD *sub_19C4D9B8C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void (*v14)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *result;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 > v7)
    v7 += (v7 + v8) & ~v8;
  if (v7 <= 8)
    v10 = 8;
  else
    v10 = v7;
  v12 = ~v8;
  switch(*((_BYTE *)a2 + v10))
  {
    case 0:
      (*(void (**)(_QWORD *, _QWORD *, _QWORD))(v6 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
      v13 = 0;
      break;
    case 1:
      v14 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32);
      v14(a1, a2, *(_QWORD *)(a3 + 16));
      v14((_QWORD *)(((unint64_t)a1 + v9) & v12), (_QWORD *)(((unint64_t)a2 + v9) & v12), v5);
      v13 = 1;
      break;
    case 2:
      (*(void (**)(_QWORD *, _QWORD *, _QWORD))(v6 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
      v13 = 2;
      break;
    case 3:
      (*(void (**)(_QWORD *, _QWORD *, _QWORD))(v6 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
      v13 = 3;
      break;
    case 4:
      *a1 = *a2;
      v13 = 4;
      break;
    default:
      if (v10 <= 3)
        v11 = v10;
      else
        v11 = 4;
      __asm { BR              X14 }
      return result;
  }
  *((_BYTE *)a1 + v10) = v13;
  return a1;
}

_QWORD *sub_19C4D9D20(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  char v15;
  void (*v16)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *result;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 > v7)
      v7 += (v7 + v8) & ~v8;
    if (v7 <= 8)
      v10 = 8;
    else
      v10 = v7;
    v12 = ~v8;
    switch(*((_BYTE *)a1 + v10))
    {
      case 0:
      case 2:
      case 3:
        (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
        break;
      case 1:
        v13 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
        v13(a1, *(_QWORD *)(a3 + 16));
        v13((_QWORD *)(((unint64_t)a1 + v9) & v12), v5);
        break;
      case 4:
        swift_bridgeObjectRelease();
        break;
      default:
        if (v10 <= 3)
          v11 = v10;
        else
          v11 = 4;
        __asm { BR              X13 }
        return result;
    }
    switch(*((_BYTE *)a2 + v10))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
        v15 = 0;
        break;
      case 1:
        v16 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32);
        v16(a1, a2, v5);
        v16((_QWORD *)(((unint64_t)a1 + v9) & v12), (_QWORD *)(((unint64_t)a2 + v9) & v12), v5);
        v15 = 1;
        break;
      case 2:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
        v15 = 2;
        break;
      case 3:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
        v15 = 3;
        break;
      case 4:
        *a1 = *a2;
        v15 = 4;
        break;
      default:
        if (v10 <= 3)
          v14 = v10;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)a1 + v10) = v15;
  }
  return a1;
}

uint64_t sub_19C4D9F88(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = ((v4 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v5 <= v4)
    v5 = v4;
  v6 = 8;
  if (v5 > 8)
    v6 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_23;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 251) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v11 < 2)
    {
LABEL_23:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 5)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_23;
LABEL_16:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if (!(_DWORD)v7)
    return (v12 + 252);
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_19C4DA064 + 4 * byte_19CAE7E33[(v7 - 1)]))();
}

void sub_19C4DA0B0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = ((v6 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  if (v7 <= v6)
    v7 = v6;
  if (v7 <= 8)
    v7 = 8;
  v8 = v7 + 1;
  if (a3 < 0xFC)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 251) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFB)
    __asm { BR              X11 }
  v10 = a2 - 252;
  if (v8 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }
      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t sub_19C4DA270(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = ((v3 + *(unsigned __int8 *)(v2 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  if (v4 <= v3)
    v4 = v3;
  v5 = 8;
  if (v4 > 8)
    v5 = v4;
  if (*(unsigned __int8 *)(a1 + v5) < 5u)
    return *(unsigned __int8 *)(a1 + v5);
  if (v5 <= 3)
    v6 = v5;
  else
    v6 = 4;
  return ((uint64_t (*)(void))((char *)&loc_19C4DA2D0 + 4 * byte_19CAE7E41[v6]))();
}

void sub_19C4DA318(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = ((v5 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
  if (a2 > 4)
  {
    if (v6 > v5)
      v5 = v6;
    if (v5 <= 8)
      v7 = 8;
    else
      v7 = v5;
    v8 = a2 - 5;
    if (v7 < 4)
    {
      v9 = v8 >> (8 * v7);
      v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 5;
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 5;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    if (v6 > v5)
      v5 = v6;
    if (v5 <= 8)
      v5 = 8;
    a1[v5] = a2;
  }
}

uint64_t type metadata accessor for ComparableExpectation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ComparableExpectation);
}

uint64_t sub_19C4DA418@<X0>(_QWORD *a1@<X8>)
{
  return sub_19C4D9134(a1);
}

uint64_t sub_19C4DA438()
{
  uint64_t result;

  sub_19C4DA508();
  result = sub_19CAA9DE8();
  qword_1EE4317D0 = result;
  return result;
}

uint64_t sub_19C4DA494(uint64_t a1)
{
  return sub_19C4DA560(a1, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], qword_1EE4317D8, MEMORY[0x1E0DF2268]);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_19C4DA508()
{
  unint64_t result;

  result = qword_1EE423378;
  if (!qword_1EE423378)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE423378);
  }
  return result;
}

uint64_t sub_19C4DA544(uint64_t a1)
{
  return sub_19C4DA560(a1, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2170], qword_1EE4317F0, MEMORY[0x1E0DF2148]);
}

uint64_t sub_19C4DA560(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(id))
{
  uint64_t v6;

  v6 = a2(0);
  __swift_allocate_value_buffer(v6, a3);
  __swift_project_value_buffer(v6, (uint64_t)a3);
  if (qword_1EE422E50 != -1)
    swift_once();
  return a4((id)qword_1EE4317D0);
}

id MLFeatureValue.init<A>(shapedArray:)(__int128 *a1, uint64_t a2, uint64_t a3)
{
  void *ObjCClassFromMetadata;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  __int128 v13;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  sub_19C4DA6B0();
  v13 = *a1;
  v8 = type metadata accessor for MLShapedArray(0, a2, a3, v7);
  v9 = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArray<A>, v8);
  v10 = (void *)sub_19C526AE0(&v13, v8, v9);
  swift_unknownObjectRelease();
  v11 = objc_msgSend(ObjCClassFromMetadata, sel_featureValueWithMultiArray_, v10);

  return v11;
}

unint64_t sub_19C4DA6B0()
{
  unint64_t result;

  result = qword_1EE424440;
  if (!qword_1EE424440)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE424440);
  }
  return result;
}

void MLFeatureValue.shapedArrayValue<A>(of:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void *v3;
  void *v4;
  id v8;
  void *v9;
  id v10;
  __int128 v11;

  v4 = v3;
  v8 = objc_msgSend(v4, sel_multiArrayValue);
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, sel_dataType);
    if (v10 == (id)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2))
    {
      MLShapedArray.init(_:)(v9, a1, a2, (size_t *)&v11);
      *(_OWORD *)a3 = v11;
      return;
    }

  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
}

void sub_19C4DA798(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_19C4DA7E0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_19C4DA844 + 4 * byte_19CAE7F24[a2]))(0x73656469727473);
}

uint64_t sub_19C4DA844(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x73656469727473 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_19CAAA1E4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t MLShapedArray<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v6[16];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = a2;
  v8 = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArray<A>);
  v9 = a3;
  v10 = a1;
  return (*(uint64_t (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), _BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 152))(sub_19C4DBFF8, v6, MEMORY[0x1E0DEE9C0] + 8, v7, v8);
}

uint64_t sub_19C4DA978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MLShapedArray<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8));
}

double MLShapedArray<>.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  char *v10;
  double result;
  __int128 v12;

  v9 = type metadata accessor for MLShapedArray(0, a2, a3, a4);
  v10 = (char *)MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArray<A>, v9);
  sub_19C4DAA28(a1, v9, v10, a4, (uint64_t)&v12);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  if (!v5)
  {
    result = *(double *)&v12;
    *a5 = v12;
  }
  return result;
}

uint64_t sub_19C4DAA28@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  unint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  id v32;
  id v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;

  v43 = a4;
  v46 = a3;
  v47 = a2;
  v44 = a5;
  v54 = *MEMORY[0x1E0C80C00];
  v48 = sub_19CAA9608();
  v45 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423380);
  v8 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v11 = sub_19C4DB68C();
  v12 = v50;
  result = sub_19CAAA31C();
  if (!v12)
  {
    v50 = v11;
    v41 = v7;
    v42 = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424190);
    LOBYTE(v51) = 0;
    sub_19C4DC014(&qword_1EE423390, MEMORY[0x1E0DEB448], MEMORY[0x1E0DEAF40]);
    sub_19CAAA154();
    v14 = v52;
    LOBYTE(v51) = 1;
    v15 = v10;
    sub_19CAAA154();
    v16 = v52;
    LOBYTE(v51) = 3;
    sub_19C4DB6D0();
    sub_19CAAA154();
    v39 = v52;
    v40 = v53;
    LOBYTE(v52) = 2;
    v17 = sub_19CAAA148();
    v38 = 0;
    v18 = v17;
    v37 = v16;
    v34 = v15;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v21 = *(uint64_t (**)(void))(AssociatedConformanceWitness + 8);
    v36 = AssociatedTypeWitness;
    v22 = ((uint64_t (*)(uint64_t, uint64_t))v21)(AssociatedTypeWitness, AssociatedConformanceWitness);
    v35 = v18;
    if (v22 == v18)
    {
      type metadata accessor for DataStorage(0, v36, AssociatedConformanceWitness, v23);
      sub_19C5937DC(v14, v37);
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v48 = AssociatedConformanceWitness;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v24 = sub_19CAAA310();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4233A0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    v26 = v50;
    *(_QWORD *)(inited + 56) = &type metadata for MLShapedArrayCodingKeys;
    *(_QWORD *)(inited + 64) = v26;
    *(_BYTE *)(inited + 32) = 2;
    v52 = v24;
    sub_19C5039C4(inited);
    v50 = v52;
    v27 = v21;
    v28 = sub_19CAA9F98();
    v38 = swift_allocError();
    v30 = v29;
    v46 = (char *)v29 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE4233A8) + 48);
    *v30 = v47;
    v52 = 0;
    v53 = 0xE000000000000000;
    sub_19CAA9F2C();
    sub_19CAA992C();
    v31 = (void *)objc_opt_self();
    v32 = objc_msgSend(v31, sel_stringForDataType_, v35);
    sub_19CAA98FC();

    sub_19CAA992C();
    swift_bridgeObjectRelease();
    sub_19CAA992C();
    v33 = objc_msgSend(v31, sel_stringForDataType_, v27());
    sub_19CAA98FC();

    sub_19CAA992C();
    swift_bridgeObjectRelease();
    sub_19CAA9F8C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, *MEMORY[0x1E0DEC450], v28);
    swift_willThrow();
    sub_19C4D4FE4(v39, v40);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v34, v49);
  }
  return result;
}

double sub_19C4DB4D4@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  return MLShapedArray<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), a4);
}

uint64_t MLShapedArraySlice<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v6[16];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = a2;
  v8 = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>);
  v9 = a3;
  v10 = a1;
  return (*(uint64_t (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), _BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 152))(sub_19C4DBFF8, v6, MEMORY[0x1E0DEE9C0] + 8, v7, v8);
}

uint64_t sub_19C4DB590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MLShapedArraySlice<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8));
}

double MLShapedArraySlice<>.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  char *v10;
  double result;
  __int128 v12;
  __int128 v13;
  _OWORD v14[3];

  v9 = type metadata accessor for MLShapedArraySlice(0, a2, a3, a4);
  v10 = (char *)MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, v9);
  sub_19C4DAA28(a1, v9, v10, a4, (uint64_t)v14);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  if (!v5)
  {
    result = *(double *)v14;
    v12 = v14[1];
    v13 = v14[2];
    *a5 = v14[0];
    a5[1] = v12;
    a5[2] = v13;
  }
  return result;
}

double sub_19C4DB648@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  return MLShapedArraySlice<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), a4);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_19C4DB68C()
{
  unint64_t result;

  result = qword_1EE423388;
  if (!qword_1EE423388)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8128, &type metadata for MLShapedArrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE423388);
  }
  return result;
}

unint64_t sub_19C4DB6D0()
{
  unint64_t result;

  result = qword_1EE423398;
  if (!qword_1EE423398)
  {
    result = MEMORY[0x1A1AD76AC](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EE423398);
  }
  return result;
}

uint64_t sub_19C4DB714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t, _QWORD);
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;

  v35 = a7;
  v36 = a6;
  v37 = a4;
  v33[1] = a1;
  v34 = a2;
  v38 = sub_19CAA9608();
  v9 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4233B8);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a5, a5[3]);
  sub_19C4DB68C();
  sub_19CAAA328();
  v40 = a3;
  v42 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424190);
  sub_19C4DC014(&qword_1EE4233C0, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEAF10]);
  v16 = v39;
  sub_19CAAA178();
  if (v16)
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v33[0] = v11;
  v39 = v9;
  v18 = v13;
  v19 = v38;
  v40 = v37;
  v42 = 1;
  sub_19CAAA178();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness);
  LOBYTE(v40) = 2;
  sub_19CAAA16C();
  v22 = v34;
  result = sub_19CAA98CC();
  if (!result)
    goto LABEL_10;
  v23 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 72);
  v24 = v22 * v23;
  if ((unsigned __int128)(v22 * (__int128)v23) >> 64 != (v22 * v23) >> 63)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v25 = result;
  v26 = v19;
  v27 = v33[0];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v39 + 104))(v33[0], *MEMORY[0x1E0CB00C8], v26);
  sub_19CAA95FC();
  if (v24)
  {
    sub_19CAA95B4();
    swift_allocObject();
    swift_retain();
    v28 = sub_19CAA9584();
    v29 = sub_19C559C6C(v28, v24);
    v31 = v30;
    swift_release();
  }
  else
  {
    v32 = (void (*)(uint64_t, _QWORD))sub_19CAA95FC();
    v32(v25, 0);
    swift_release();
    swift_release();
    v29 = 0;
    v31 = 0xC000000000000000;
  }
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v27, v38);
  v40 = v29;
  v41 = v31;
  v42 = 3;
  sub_19C4DC074();
  sub_19CAAA178();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v12);
  return sub_19C4D4FE4(v29, v31);
}

uint64_t sub_19C4DBAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t);
  uint64_t v19;

  v13 = sub_19CAA9608();
  result = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 16))(v17, a5);
    v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(a7 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return v18(a1, a3, a4, v17, a6, a7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_19C4DBBA8(char *a1)
{
  sub_19C4DA798(*a1);
}

void sub_19C4DBBB4()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_19CAAA298();
  __asm { BR              X9 }
}

uint64_t sub_19C4DBBFC()
{
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  return sub_19CAAA2C8();
}

void sub_19C4DBC6C()
{
  __asm { BR              X10 }
}

uint64_t sub_19C4DBCA4()
{
  sub_19CAA9920();
  return swift_bridgeObjectRelease();
}

void sub_19C4DBD00()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_19CAAA298();
  __asm { BR              X9 }
}

uint64_t sub_19C4DBD44()
{
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  return sub_19CAAA2C8();
}

uint64_t sub_19C4DBDB4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_19C4DC2F4();
  *a1 = result;
  return result;
}

uint64_t sub_19C4DBDE0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_19C4DBE0C + 4 * byte_19CAE7F34[*v0]))();
}

void sub_19C4DBE0C(_QWORD *a1@<X8>)
{
  *a1 = 0x73656469727473;
  a1[1] = 0xE700000000000000;
}

void sub_19C4DBE28(_QWORD *a1@<X8>)
{
  *a1 = 0x795472616C616373;
  a1[1] = 0xEA00000000006570;
}

void sub_19C4DBE48(_QWORD *a1@<X8>)
{
  *a1 = 0x7372616C616373;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_19C4DBE64()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19C4DBE90 + 4 * byte_19CAE7F38[*v0]))(0x6570616873, 0xE500000000000000);
}

uint64_t sub_19C4DBE90()
{
  return 0x73656469727473;
}

uint64_t sub_19C4DBEA8()
{
  return 0x795472616C616373;
}

uint64_t sub_19C4DBEC4()
{
  return 0x7372616C616373;
}

uint64_t sub_19C4DBEDC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_19C4DC2F4();
  *a1 = result;
  return result;
}

uint64_t sub_19C4DBF00()
{
  return 0;
}

void sub_19C4DBF0C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_19C4DBF18()
{
  sub_19C4DB68C();
  return sub_19CAAA358();
}

uint64_t sub_19C4DBF40()
{
  sub_19C4DB68C();
  return sub_19CAAA364();
}

unint64_t sub_19C4DBF68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE4233B0;
  if (!qword_1EE4233B0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE423380);
    result = MEMORY[0x1A1AD76AC](MEMORY[0x1E0DED060], v1);
    atomic_store(result, (unint64_t *)&qword_1EE4233B0);
  }
  return result;
}

uint64_t sub_19C4DBFB4()
{
  uint64_t v0;

  sub_19C4D4FE4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_19C4DBFD8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_19C4DBAC4(a1, a2, v2[5], v2[6], v2[7], v2[2], v2[3]);
}

uint64_t sub_19C4DBFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_19C4DB714(a1, a2, a3, a4, *(_QWORD **)(v4 + 40), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_19C4DC014(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EE424190);
    v8 = a2;
    result = MEMORY[0x1A1AD76AC](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_19C4DC074()
{
  unint64_t result;

  result = qword_1EE4233C8;
  if (!qword_1EE4233C8)
  {
    result = MEMORY[0x1A1AD76AC](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EE4233C8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MLShapedArrayCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MLShapedArrayCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_19C4DC194 + 4 * byte_19CAE7F41[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_19C4DC1C8 + 4 * byte_19CAE7F3C[v4]))();
}

uint64_t sub_19C4DC1C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C4DC1D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19C4DC1D8);
  return result;
}

uint64_t sub_19C4DC1E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19C4DC1ECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_19C4DC1F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C4DC1F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_19C4DC204(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MLShapedArrayCodingKeys()
{
  return &type metadata for MLShapedArrayCodingKeys;
}

unint64_t sub_19C4DC220()
{
  unint64_t result;

  result = qword_1EE4233D0;
  if (!qword_1EE4233D0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8100, &type metadata for MLShapedArrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE4233D0);
  }
  return result;
}

unint64_t sub_19C4DC268()
{
  unint64_t result;

  result = qword_1EE4233D8;
  if (!qword_1EE4233D8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8038, &type metadata for MLShapedArrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE4233D8);
  }
  return result;
}

unint64_t sub_19C4DC2B0()
{
  unint64_t result;

  result = qword_1EE4233E0;
  if (!qword_1EE4233E0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8060, &type metadata for MLShapedArrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE4233E0);
  }
  return result;
}

uint64_t sub_19C4DC2F4()
{
  unint64_t v0;

  v0 = sub_19CAAA130();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_19C4DC33C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (!v1)
    return 1;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)(result + 32) >> 1;
  if (v2 == v3)
    return 1;
  v4 = (_QWORD *)(*(_QWORD *)result + 32);
  if (v2 <= v3)
    v5 = *(_QWORD *)(result + 32) >> 1;
  else
    v5 = *(_QWORD *)(result + 24);
  v6 = ~v2 + v3;
  v7 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v2);
  v8 = v5 - v2;
  v9 = v1 - 1;
  while (v8)
  {
    v10 = v6;
    result = *v7 >= *v4;
    if (*v7 >= *v4)
    {
      if (v9)
      {
        --v6;
        ++v7;
        ++v4;
        --v8;
        --v9;
        if (v10)
          continue;
      }
    }
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_19C4DC3C0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (!v1)
    return 1;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)(result + 32) >> 1;
  if (v2 == v3)
    return 1;
  v4 = (_QWORD *)(*(_QWORD *)result + 32);
  if (v2 <= v3)
    v5 = *(_QWORD *)(result + 32) >> 1;
  else
    v5 = *(_QWORD *)(result + 24);
  v6 = ~v2 + v3;
  v7 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v2);
  v8 = v5 - v2;
  v9 = v1 - 1;
  while (v8)
  {
    v10 = v6;
    result = *v4 >= *v7;
    if (*v4 >= *v7)
    {
      if (v9)
      {
        --v6;
        ++v7;
        ++v4;
        --v8;
        --v9;
        if (v10)
          continue;
      }
    }
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_19C4DC444(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

void sub_19C4DC4A8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v2)
    v3 = v2 == 1;
  else
    v3 = 1;
  if (!v3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_16:
      v1 = sub_19C503550(v1);
    v4 = 0;
    v5 = v2 + 3;
    do
    {
      if (v4 != v5 - 4)
      {
        v7 = v1[2];
        if (v4 >= v7)
        {
          __break(1u);
LABEL_15:
          __break(1u);
          goto LABEL_16;
        }
        if (v5 - 4 >= v7)
          goto LABEL_15;
        v8 = &v1[v4];
        v9 = v8[4];
        v8[4] = v1[v5];
        v1[v5] = v9;
      }
      ++v4;
      v6 = v5 - 5;
      --v5;
    }
    while ((uint64_t)v4 < v6);
    *(_QWORD *)v0 = v1;
  }
}

unint64_t sub_19C4DC560()
{
  int v0;
  unsigned int v1;
  unsigned __int8 v2;

  sub_19CAA98B4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4233F8);
  v0 = swift_dynamicCast();
  if (v0)
    v1 = sub_19CAA9CD4();
  else
    v1 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423400);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v1 = sub_19CAA9CBC();
    v2 = 0;
  }
  else
  {
    v2 = v0 ^ 1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423408);
  if (swift_dynamicCast())
  {
    v1 = sub_19CAA9D04();
    v2 = 0;
  }
  return v1 | ((unint64_t)v2 << 32);
}

uint64_t sub_19C4DC660(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  void *v23;
  void *v24;
  uint64_t v25;
  BNNSNDArrayDescriptor dest;
  BNNSNDArrayDescriptor src;
  _BYTE v28[113];
  _BYTE v29[9];
  _OWORD v30[9];
  __int128 v31;
  __int128 v32;
  _BYTE v33[144];
  __int128 v34;
  __int128 v35;
  _OWORD v36[9];
  __int128 v37;
  __int128 v38;
  _OWORD v39[9];
  __int128 v40;
  __int128 v41;
  _BYTE v42[8];
  _BYTE v43[8];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v18 = sub_19C4DC560();
  if ((v18 & 0x100000000) != 0)
    return 0;
  v19 = v18;
  v25 = a4;
  v20 = sub_19C4DC560();
  if ((v20 & 0x100000000) != 0)
    return 0;
  v21 = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C4DCB94(a2, (uint64_t)a3, v19, (uint64_t)v28);
  sub_19C4DCE08((uint64_t)v28, (uint64_t)v36, &qword_1EE4233E8);
  if (sub_19C4DCDEC((uint64_t)v36) == 1)
    return 0;
  v39[8] = v36[8];
  v40 = v37;
  v41 = v38;
  v39[4] = v36[4];
  v39[5] = v36[5];
  v39[6] = v36[6];
  v39[7] = v36[7];
  v39[0] = v36[0];
  v39[1] = v36[1];
  v39[2] = v36[2];
  v39[3] = v36[3];
  *(_QWORD *)&src.flags = *(_QWORD *)&v36[0];
  *(_OWORD *)src.size = *(_OWORD *)((char *)v39 + 8);
  *(_OWORD *)&src.size[2] = *(_OWORD *)((char *)&v39[1] + 8);
  *(_OWORD *)&src.size[4] = *(_OWORD *)((char *)&v39[2] + 8);
  *(_OWORD *)&src.size[6] = *(_OWORD *)((char *)&v39[3] + 8);
  *(_OWORD *)src.stride = *(_OWORD *)((char *)&v39[4] + 8);
  *(_OWORD *)&src.stride[2] = *(_OWORD *)((char *)&v39[5] + 8);
  *(_OWORD *)&src.stride[4] = *(_OWORD *)((char *)&v39[6] + 8);
  src.data_type = v37;
  *(_OWORD *)&src.stride[6] = *(_OWORD *)((char *)&v39[7] + 8);
  sub_19C4DCE08((uint64_t)&v40 + 8, (uint64_t)v42, &qword_1EE4233F0);
  sub_19C4DCE08((uint64_t)v42, (uint64_t)&src.table_data, &qword_1EE4233F0);
  src.table_data_type = v41;
  *(_QWORD *)&src.data_scale = *(_QWORD *)((char *)&v41 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C4DCB94(a5, (uint64_t)a6, v21, (uint64_t)v29);
  sub_19C4DCE08((uint64_t)v29, (uint64_t)v30, &qword_1EE4233E8);
  if (sub_19C4DCDEC((uint64_t)v30) == 1)
    return 0;
  *(_OWORD *)&v33[128] = v30[8];
  v34 = v31;
  v35 = v32;
  *(_OWORD *)&v33[64] = v30[4];
  *(_OWORD *)&v33[80] = v30[5];
  *(_OWORD *)&v33[96] = v30[6];
  *(_OWORD *)&v33[112] = v30[7];
  *(_OWORD *)v33 = v30[0];
  *(_OWORD *)&v33[16] = v30[1];
  *(_OWORD *)&v33[32] = v30[2];
  *(_OWORD *)&v33[48] = v30[3];
  *(_QWORD *)&dest.flags = *(_QWORD *)&v30[0];
  *(_OWORD *)dest.size = *(_OWORD *)&v33[8];
  *(_OWORD *)&dest.size[2] = *(_OWORD *)&v33[24];
  *(_OWORD *)&dest.size[4] = *(_OWORD *)&v33[40];
  *(_OWORD *)&dest.size[6] = *(_OWORD *)&v33[56];
  *(_OWORD *)dest.stride = *(_OWORD *)&v33[72];
  *(_OWORD *)&dest.stride[2] = *(_OWORD *)&v33[88];
  dest.data_type = v31;
  *(_OWORD *)&dest.stride[4] = *(_OWORD *)&v33[104];
  *(_OWORD *)&dest.stride[6] = *(_OWORD *)&v33[120];
  sub_19C4DCE08((uint64_t)&v34 + 8, (uint64_t)v43, &qword_1EE4233F0);
  sub_19C4DCE08((uint64_t)v43, (uint64_t)&dest.table_data, &qword_1EE4233F0);
  dest.table_data_type = v35;
  *(_QWORD *)&dest.data_scale = *(_QWORD *)((char *)&v35 + 4);
  v23 = (void *)(a7 + *(_QWORD *)(*(_QWORD *)(a9 - 8) + 72) * sub_19C552864(a1, a3));
  v24 = (void *)(a8 + *(_QWORD *)(*(_QWORD *)(a10 - 8) + 72) * sub_19C552864(v25, a6));
  src.data = v23;
  dest.data = v24;
  BNNSCopy(&dest, &src, 0);
  return 1;
}

unint64_t sub_19C4DCA3C(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t result;
  _QWORD v10[5];
  _QWORD v11[5];

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 16);
  if (!HIDWORD(v2))
  {
    if (v2 <= 8)
    {
      v11[0] = *a1;
      v11[1] = v1;
      v11[2] = v1 + 32;
      v11[3] = v2 != 0;
      v11[4] = (2 * v2) | 1;
      swift_bridgeObjectRetain();
      v5 = sub_19C4DC33C((uint64_t)v11);
      swift_bridgeObjectRelease();
      if ((v5 & 1) != 0)
      {
        v6 = 0;
      }
      else
      {
        v7 = *(_QWORD *)(v1 + 16);
        v4 = 1;
        v10[0] = v1;
        v10[1] = v1;
        v10[2] = v1 + 32;
        v10[3] = v7 != 0;
        v10[4] = (2 * v7) | 1;
        swift_bridgeObjectRetain();
        v8 = sub_19C4DC3C0((uint64_t)v10);
        swift_bridgeObjectRelease();
        if ((v8 & 1) == 0)
        {
          v3 = 0;
          goto LABEL_10;
        }
        sub_19C4DC4A8();
        v6 = 1;
      }
      v4 = 0;
      v3 = ((_DWORD)v2 << 16) | (unint64_t)v6 | 0x8000;
    }
    else
    {
      v3 = 0;
      v4 = 1;
    }
LABEL_10:
    LOBYTE(v11[0]) = v4;
    return v3 | ((unint64_t)v4 << 32);
  }
  result = sub_19CAAA0AC();
  __break(1u);
  return result;
}

uint64_t sub_19C4DCB94@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t result;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v13;
  char *v14;
  size_t v15;
  uint64_t v16;
  _DWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _OWORD v31[9];
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _BYTE v36[184];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  v33 = 0;
  v34 = 0;
  v35 = 0;
  if (!*(_QWORD *)(a1 + 16) || (sub_19C4DC444(0, a1) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_4:
    swift_bridgeObjectRelease();
    sub_19C4DCE4C((uint64_t)v17);
LABEL_5:
    sub_19C4DCE08((uint64_t)v17, (uint64_t)v36, &qword_1EE4233E8);
    return sub_19C4DCE08((uint64_t)v36, a4, &qword_1EE4233E8);
  }
  v16 = a2;
  swift_bridgeObjectRelease();
  v9 = sub_19C4DCA3C(&v16);
  if ((v9 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  v10 = v9;
  v11 = *(_QWORD *)(v16 + 16);
  if (v11)
  {
    if (v11 > 8)
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v16 + 32 < (unint64_t)&v31[4] + 8 * v11 + 8 && (unint64_t)&v31[4] + 8 < v16 + 32 + 8 * v11)
      goto LABEL_24;
    memcpy((char *)&v31[4] + 8, (const void *)(v16 + 32), 8 * v11);
  }
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18 = *(_OWORD *)((char *)v31 + 8);
    v19 = *(_OWORD *)((char *)&v31[1] + 8);
    v20 = *(_OWORD *)((char *)&v31[2] + 8);
    v21 = *(_OWORD *)((char *)&v31[3] + 8);
    v17[0] = 0;
    v17[1] = v10;
    v22 = *(_OWORD *)((char *)&v31[4] + 8);
    v23 = *(_OWORD *)((char *)&v31[5] + 8);
    v24 = *(_OWORD *)((char *)&v31[6] + 8);
    v25 = *(_OWORD *)((char *)&v31[7] + 8);
    v26 = 0;
    v27 = a3;
    v28 = 0;
    v29 = 0;
    v30 = 1065353216;
    sub_19C4DCE74((uint64_t)v17);
    goto LABEL_5;
  }
  if (v13 > 8)
LABEL_23:
    __break(1u);
  v14 = (char *)(a1 + 32);
  v15 = 8 * v13;
  if (a1 + 32 >= (unint64_t)v31 + 8 * v13 + 8 || (char *)v31 + 8 >= &v14[v15])
  {
    memcpy((char *)v31 + 8, v14, v15);
    goto LABEL_20;
  }
LABEL_24:
  result = sub_19CAAA118();
  __break(1u);
  return result;
}

uint64_t sub_19C4DCDEC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 176))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_19C4DCE08(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

double sub_19C4DCE4C(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 176) = 1;
  return result;
}

uint64_t sub_19C4DCE74(uint64_t result)
{
  *(_BYTE *)(result + 176) = 0;
  return result;
}

uint64_t sub_19C4DCE7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  int64_t v10;
  uint64_t result;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;

  v5 = a4;
  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    result = sub_19C556FAC(0, v10, 0);
    v12 = v21;
    v13 = (uint64_t *)(a3 + 32);
    do
    {
      v15 = *v13++;
      v14 = v15;
      if (v15 < 0)
      {
        __break(1u);
        return result;
      }
      v17 = v21[2];
      v16 = v21[3];
      if (v17 >= v16 >> 1)
        result = sub_19C556FAC(v16 > 1, v17 + 1, 1);
      v21[2] = v17 + 1;
      v18 = &v21[2 * v17];
      v18[4] = 0;
      v18[5] = v14;
      --v10;
    }
    while (v10);
    if (v21[4] == v21[5])
    {
LABEL_8:
      result = 0;
      v5 = a4;
      goto LABEL_15;
    }
    if (v17)
    {
      v19 = v21 + 7;
      while (*(v19 - 1) != *v19)
      {
        v19 += 2;
        if (!--v17)
          goto LABEL_14;
      }
      goto LABEL_8;
    }
LABEL_14:
    result = sub_19C4D0078((uint64_t)v21);
    v5 = a4;
  }
  else
  {
    v12 = &unk_1E3D44CF8;
    result = sub_19C4D0078((uint64_t)&unk_1E3D44CF8);
  }
LABEL_15:
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = v5;
  a5[4] = v12;
  a5[5] = result;
  return result;
}

uint64_t sub_19C4DCFE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  int64_t v10;
  uint64_t result;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;

  v5 = a4;
  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    result = sub_19C556FAC(0, v10, 0);
    v12 = v21;
    v13 = (uint64_t *)(a3 + 32);
    do
    {
      v15 = *v13++;
      v14 = v15;
      if (v15 < 0)
      {
        __break(1u);
        return result;
      }
      v17 = v21[2];
      v16 = v21[3];
      if (v17 >= v16 >> 1)
        result = sub_19C556FAC(v16 > 1, v17 + 1, 1);
      v21[2] = v17 + 1;
      v18 = &v21[2 * v17];
      v18[4] = 0;
      v18[5] = v14;
      --v10;
    }
    while (v10);
    if (v21[4] == v21[5])
    {
LABEL_8:
      result = 0;
      v5 = a4;
      goto LABEL_15;
    }
    if (v17)
    {
      v19 = v21 + 7;
      while (*(v19 - 1) != *v19)
      {
        v19 += 2;
        if (!--v17)
          goto LABEL_14;
      }
      goto LABEL_8;
    }
LABEL_14:
    result = sub_19C4D0078((uint64_t)v21);
    v5 = a4;
  }
  else
  {
    v12 = &unk_1E3D44D28;
    result = sub_19C4D0078((uint64_t)&unk_1E3D44D28);
  }
LABEL_15:
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = v5;
  a5[4] = v12;
  a5[5] = result;
  return result;
}

uint64_t sub_19C4DD14C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  int64_t v10;
  uint64_t result;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;

  v5 = a4;
  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    result = sub_19C556FAC(0, v10, 0);
    v12 = v21;
    v13 = (uint64_t *)(a3 + 32);
    do
    {
      v15 = *v13++;
      v14 = v15;
      if (v15 < 0)
      {
        __break(1u);
        return result;
      }
      v17 = v21[2];
      v16 = v21[3];
      if (v17 >= v16 >> 1)
        result = sub_19C556FAC(v16 > 1, v17 + 1, 1);
      v21[2] = v17 + 1;
      v18 = &v21[2 * v17];
      v18[4] = 0;
      v18[5] = v14;
      --v10;
    }
    while (v10);
    if (v21[4] == v21[5])
    {
LABEL_8:
      result = 0;
      v5 = a4;
      goto LABEL_15;
    }
    if (v17)
    {
      v19 = v21 + 7;
      while (*(v19 - 1) != *v19)
      {
        v19 += 2;
        if (!--v17)
          goto LABEL_14;
      }
      goto LABEL_8;
    }
LABEL_14:
    result = sub_19C4D0078((uint64_t)v21);
    v5 = a4;
  }
  else
  {
    v12 = &unk_1E3D44DB8;
    result = sub_19C4D0078((uint64_t)&unk_1E3D44DB8);
  }
LABEL_15:
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = v5;
  a5[4] = v12;
  a5[5] = result;
  return result;
}

uint64_t sub_19C4DD2B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  int64_t v10;
  uint64_t result;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;

  v5 = a4;
  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    result = sub_19C556FAC(0, v10, 0);
    v12 = v21;
    v13 = (uint64_t *)(a3 + 32);
    do
    {
      v15 = *v13++;
      v14 = v15;
      if (v15 < 0)
      {
        __break(1u);
        return result;
      }
      v17 = v21[2];
      v16 = v21[3];
      if (v17 >= v16 >> 1)
        result = sub_19C556FAC(v16 > 1, v17 + 1, 1);
      v21[2] = v17 + 1;
      v18 = &v21[2 * v17];
      v18[4] = 0;
      v18[5] = v14;
      --v10;
    }
    while (v10);
    if (v21[4] == v21[5])
    {
LABEL_8:
      result = 0;
      v5 = a4;
      goto LABEL_15;
    }
    if (v17)
    {
      v19 = v21 + 7;
      while (*(v19 - 1) != *v19)
      {
        v19 += 2;
        if (!--v17)
          goto LABEL_14;
      }
      goto LABEL_8;
    }
LABEL_14:
    result = sub_19C4D0078((uint64_t)v21);
    v5 = a4;
  }
  else
  {
    v12 = &unk_1E3D44D88;
    result = sub_19C4D0078((uint64_t)&unk_1E3D44D88);
  }
LABEL_15:
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = v5;
  a5[4] = v12;
  a5[5] = result;
  return result;
}

id sub_19C4DD41C(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  id result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  double v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  int v25;
  uint64_t v26;
  id v27;
  uint64_t v28;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return (id)v2;
  v3 = a1;
  v28 = MEMORY[0x1E0DEE9D8];
  sub_19C55709C(0, v1, 0);
  v2 = v28;
  result = (id)sub_19C4E8E70(v3);
  v6 = (uint64_t)result;
  v7 = 0;
  v8 = v3 + 64;
  v23 = v3 + 80;
  v24 = v1;
  v25 = v5;
  v26 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v12 = *(double *)(*(_QWORD *)(v3 + 56) + 8 * v6);
    v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6));
    result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, v12);
    v13 = result;
    v14 = v3;
    v16 = *(_QWORD *)(v28 + 16);
    v15 = *(_QWORD *)(v28 + 24);
    if (v16 >= v15 >> 1)
      result = (id)sub_19C55709C(v15 > 1, v16 + 1, 1);
    *(_QWORD *)(v28 + 16) = v16 + 1;
    v17 = v28 + 16 * v16;
    *(_QWORD *)(v17 + 32) = v27;
    *(_QWORD *)(v17 + 40) = v13;
    v9 = 1 << *(_BYTE *)(v14 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v26;
    v18 = *(_QWORD *)(v26 + 8 * v11);
    if ((v18 & (1 << v6)) == 0)
      goto LABEL_26;
    v3 = v14;
    v5 = v25;
    if (*(_DWORD *)(v14 + 36) != v25)
      goto LABEL_27;
    v19 = v18 & (-2 << (v6 & 0x3F));
    if (v19)
    {
      v9 = __clz(__rbit64(v19)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v24;
    }
    else
    {
      v20 = v11 + 1;
      v21 = (unint64_t)(v9 + 63) >> 6;
      v10 = v24;
      if (v11 + 1 < v21)
      {
        v22 = *(_QWORD *)(v26 + 8 * v20);
        if (v22)
        {
LABEL_20:
          v9 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v11)
          {
            v22 = *(_QWORD *)(v23 + 8 * v11++);
            if (v22)
            {
              v20 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v7;
    v6 = v9;
    if (v7 == v10)
      return (id)v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_19C4DD668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v11[6];
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a1;
  v14 = a2;
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  v11[2] = sub_19C4EAA94;
  v11[3] = &v12;
  v11[4] = v7;
  v11[5] = v8;
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, _BYTE *@<X8>), _QWORD *, _QWORD, uint64_t, uint64_t))(a4 + 32))(&v15, sub_19C4EAAB4, v11, MEMORY[0x1E0DEAFA0], ObjectType, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v4)
    v9 = v15;
  return v9 & 1;
}

uint64_t sub_19C4DD740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v11[6];
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a1;
  v14 = a2;
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  v11[2] = sub_19C4EAA20;
  v11[3] = &v12;
  v11[4] = v7;
  v11[5] = v8;
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, _BYTE *@<X8>), _QWORD *, _QWORD, uint64_t, uint64_t))(a4 + 32))(&v15, sub_19C4EA958, v11, MEMORY[0x1E0DEAFA0], ObjectType, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v4)
    v9 = v15;
  return v9 & 1;
}

uint64_t sub_19C4DD818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v11[6];
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a1;
  v14 = a2;
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  v11[2] = sub_19C4EA98C;
  v11[3] = &v12;
  v11[4] = v7;
  v11[5] = v8;
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, _BYTE *@<X8>), _QWORD *, _QWORD, uint64_t, uint64_t))(a4 + 32))(&v15, sub_19C4EA9AC, v11, MEMORY[0x1E0DEAFA0], ObjectType, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v4)
    v9 = v15;
  return v9 & 1;
}

uint64_t sub_19C4DD8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v11[6];
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a1;
  v14 = a2;
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  v11[2] = sub_19C4EA938;
  v11[3] = &v12;
  v11[4] = v7;
  v11[5] = v8;
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, _BYTE *@<X8>), _QWORD *, _QWORD, uint64_t, uint64_t))(a4 + 32))(&v15, sub_19C4EA958, v11, MEMORY[0x1E0DEAFA0], ObjectType, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v4)
    v9 = v15;
  return v9 & 1;
}

uint64_t sub_19C4DD9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t result;
  _QWORD v12[6];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a2;
  v14 = a1;
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  v12[2] = sub_19C4EA824;
  v12[3] = &v13;
  v12[4] = v7;
  v12[5] = v8;
  v9 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t))(a4 + 32);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4234D0);
  v9(&v16, sub_19C4EA844, v12, v10, ObjectType, a4);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v4)
    return v16;
  return result;
}

uint64_t sub_19C4DDAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, _QWORD *(*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, _QWORD *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t result;
  _QWORD v12[6];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a2;
  v14 = a1;
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  v12[2] = sub_19C4EA7D4;
  v12[3] = &v13;
  v12[4] = v7;
  v12[5] = v8;
  v9 = *(void (**)(uint64_t *__return_ptr, _QWORD *(*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, _QWORD *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t))(a4 + 32);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4234C8);
  v9(&v16, sub_19C4EA728, v12, v10, ObjectType, a4);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v4)
    return v16;
  return result;
}

uint64_t sub_19C4DDB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t result;
  _QWORD v12[6];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a2;
  v14 = a1;
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  v12[2] = sub_19C4EA764;
  v12[3] = &v13;
  v12[4] = v7;
  v12[5] = v8;
  v9 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t))(a4 + 32);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4234C0);
  v9(&v16, sub_19C4EA784, v12, v10, ObjectType, a4);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v4)
    return v16;
  return result;
}

uint64_t sub_19C4DDC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, _QWORD *(*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, _QWORD *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t result;
  _QWORD v12[6];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a2;
  v14 = a1;
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  v12[2] = sub_19C4EA708;
  v12[3] = &v13;
  v12[4] = v7;
  v12[5] = v8;
  v9 = *(void (**)(uint64_t *__return_ptr, _QWORD *(*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, _QWORD *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t))(a4 + 32);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4234B8);
  v9(&v16, sub_19C4EA728, v12, v10, ObjectType, a4);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v4)
    return v16;
  return result;
}

uint64_t sub_19C4DDD58@<X0>(void *a1@<X0>, size_t *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  __CVBuffer *v33;
  __CVBuffer *v34;
  size_t v35;
  _UNKNOWN **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (**v39)(uint64_t, uint64_t);
  uint64_t v40;
  id v41;
  id v42;
  void (*v43)(char *, uint64_t (**)(uint64_t, uint64_t), uint64_t);
  uint64_t (**v44)(uint64_t, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(id, _QWORD);
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  size_t v54;
  size_t *v55;
  _QWORD v56[2];
  char *v57;
  uint64_t v58;
  uint64_t (**v59)(uint64_t, uint64_t);
  uint64_t (**v60)(uint64_t, uint64_t);
  uint64_t v61;
  size_t *v62;
  void *v63;
  uint64_t v64;

  v61 = sub_19CAA9608();
  v58 = *(_QWORD *)(v61 - 8);
  v6 = MEMORY[0x1E0C80A78](v61);
  v8 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v59 = (uint64_t (**)(uint64_t, uint64_t))((char *)v56 - v10);
  MEMORY[0x1E0C80A78](v9);
  v60 = (uint64_t (**)(uint64_t, uint64_t))((char *)v56 - v11);
  if (objc_msgSend(a1, sel_dataType) == (id)65600)
  {
    v57 = v8;
    v12 = objc_msgSend(a1, sel_shape);
    v2 = sub_19C4E8EF8();
    v3 = sub_19CAA99F8();

    if (!(v3 >> 62))
    {
      v13 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v13 = sub_19CAAA0DC();
  swift_bridgeObjectRelease();
LABEL_4:
  v14 = MEMORY[0x1E0DEE9D8];
  v62 = a2;
  v63 = a1;
  if (v13)
  {
    v64 = MEMORY[0x1E0DEE9D8];
    result = sub_19C556FD0(0, v13 & ~(v13 >> 63), 0);
    if (v13 < 0)
    {
      __break(1u);
      goto LABEL_38;
    }
    v56[1] = v2;
    v16 = 0;
    v17 = v64;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v18 = (id)MEMORY[0x1A1AD4A9C](v16, v3);
      else
        v18 = *(id *)(v3 + 8 * v16 + 32);
      v19 = v18;
      v20 = objc_msgSend(v18, sel_integerValue);

      v64 = v17;
      v22 = *(_QWORD *)(v17 + 16);
      v21 = *(_QWORD *)(v17 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_19C556FD0(v21 > 1, v22 + 1, 1);
        v17 = v64;
      }
      ++v16;
      *(_QWORD *)(v17 + 16) = v22 + 1;
      *(_QWORD *)(v17 + 8 * v22 + 32) = v20;
    }
    while (v13 != v16);
    swift_bridgeObjectRelease();
    a1 = v63;
    v14 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x1E0DEE9D8];
  }
  v23 = objc_msgSend(a1, sel_strides);
  v24 = sub_19CAA99F8();

  if (v24 >> 62)
  {
    swift_bridgeObjectRetain();
    v25 = sub_19CAAA0DC();
    swift_bridgeObjectRelease();
    if (v25)
    {
LABEL_17:
      v64 = v14;
      result = sub_19C556FD0(0, v25 & ~(v25 >> 63), 0);
      if ((v25 & 0x8000000000000000) == 0)
      {
        v26 = 0;
        v27 = v64;
        do
        {
          if ((v24 & 0xC000000000000001) != 0)
            v28 = (id)MEMORY[0x1A1AD4A9C](v26, v24);
          else
            v28 = *(id *)(v24 + 8 * v26 + 32);
          v29 = v28;
          v30 = objc_msgSend(v28, sel_integerValue);

          v64 = v27;
          v32 = *(_QWORD *)(v27 + 16);
          v31 = *(_QWORD *)(v27 + 24);
          if (v32 >= v31 >> 1)
          {
            sub_19C556FD0(v31 > 1, v32 + 1, 1);
            v27 = v64;
          }
          ++v26;
          *(_QWORD *)(v27 + 16) = v32 + 1;
          *(_QWORD *)(v27 + 8 * v32 + 32) = v30;
        }
        while (v25 != v26);
        swift_bridgeObjectRelease();
        a1 = v63;
        goto LABEL_30;
      }
LABEL_38:
      __break(1u);
      return result;
    }
  }
  else
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v25)
      goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  v27 = MEMORY[0x1E0DEE9D8];
LABEL_30:
  v33 = (__CVBuffer *)objc_msgSend(a1, sel_pixelBuffer);
  if (v33)
  {
    v34 = v33;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424170);
    swift_allocObject();
    v35 = sub_19C559EFC(v34, v17, 0);

    result = swift_bridgeObjectRelease();
    v36 = &off_1E3D468D0;
  }
  else
  {
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 16) = a1;
    v39 = v60;
    v38 = v61;
    *v60 = sub_19C4EAB98;
    v39[1] = (uint64_t (*)(uint64_t, uint64_t))v37;
    v40 = v58;
    (*(void (**)(uint64_t (**)(uint64_t, uint64_t), _QWORD, uint64_t))(v58 + 104))(v39, *MEMORY[0x1E0CB00D8], v38);
    v41 = objc_retainAutorelease(a1);
    v42 = objc_msgSend(v41, sel_bytes);
    v43 = *(void (**)(char *, uint64_t (**)(uint64_t, uint64_t), uint64_t))(v40 + 16);
    v44 = v59;
    v43((char *)v59, v39, v38);
    v45 = sub_19C4E398C(v17, v27);
    v46 = v57;
    v43(v57, v44, v38);
    sub_19CAA95FC();
    if (v45)
    {
      sub_19CAA95B4();
      swift_allocObject();
      swift_retain();
      v47 = sub_19CAA9584();
      v48 = sub_19C559C6C(v47, v45);
      v50 = v49;
      swift_release();
    }
    else
    {
      v51 = (void (*)(id, _QWORD))sub_19CAA95FC();
      v51(v42, 0);
      swift_release();
      swift_release();
      v48 = 0;
      v50 = 0xC000000000000000;
    }
    v52 = *(void (**)(char *, uint64_t))(v58 + 8);
    v53 = v61;
    v52(v46, v61);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4234D8);
    swift_allocObject();
    sub_19C4E7A20(v48, v50, v17, v27, (void (*)(uint64_t, uint64_t))sub_19C4E398C);
    v35 = v54;
    v52((char *)v59, v53);

    result = ((uint64_t (*)(_QWORD, uint64_t))v52)(v60, v53);
    v36 = &off_1E3D43E30;
  }
  v55 = v62;
  *v62 = v35;
  v55[1] = (size_t)v36;
  return result;
}

uint64_t sub_19C4DE328@<X0>(void *a1@<X0>, size_t *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  __CVBuffer *v33;
  __CVBuffer *v34;
  size_t v35;
  _UNKNOWN **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (**v39)(uint64_t, uint64_t);
  uint64_t v40;
  id v41;
  id v42;
  void (*v43)(char *, uint64_t (**)(uint64_t, uint64_t), uint64_t);
  uint64_t (**v44)(uint64_t, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(id, _QWORD);
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  size_t v54;
  size_t *v55;
  _QWORD v56[2];
  char *v57;
  uint64_t v58;
  uint64_t (**v59)(uint64_t, uint64_t);
  uint64_t (**v60)(uint64_t, uint64_t);
  uint64_t v61;
  size_t *v62;
  void *v63;
  uint64_t v64;

  v61 = sub_19CAA9608();
  v58 = *(_QWORD *)(v61 - 8);
  v6 = MEMORY[0x1E0C80A78](v61);
  v8 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v59 = (uint64_t (**)(uint64_t, uint64_t))((char *)v56 - v10);
  MEMORY[0x1E0C80A78](v9);
  v60 = (uint64_t (**)(uint64_t, uint64_t))((char *)v56 - v11);
  if (objc_msgSend(a1, sel_dataType) == (id)65568)
  {
    v57 = v8;
    v12 = objc_msgSend(a1, sel_shape);
    v2 = sub_19C4E8EF8();
    v3 = sub_19CAA99F8();

    if (!(v3 >> 62))
    {
      v13 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v13 = sub_19CAAA0DC();
  swift_bridgeObjectRelease();
LABEL_4:
  v14 = MEMORY[0x1E0DEE9D8];
  v62 = a2;
  v63 = a1;
  if (v13)
  {
    v64 = MEMORY[0x1E0DEE9D8];
    result = sub_19C556FD0(0, v13 & ~(v13 >> 63), 0);
    if (v13 < 0)
    {
      __break(1u);
      goto LABEL_38;
    }
    v56[1] = v2;
    v16 = 0;
    v17 = v64;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v18 = (id)MEMORY[0x1A1AD4A9C](v16, v3);
      else
        v18 = *(id *)(v3 + 8 * v16 + 32);
      v19 = v18;
      v20 = objc_msgSend(v18, sel_integerValue);

      v64 = v17;
      v22 = *(_QWORD *)(v17 + 16);
      v21 = *(_QWORD *)(v17 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_19C556FD0(v21 > 1, v22 + 1, 1);
        v17 = v64;
      }
      ++v16;
      *(_QWORD *)(v17 + 16) = v22 + 1;
      *(_QWORD *)(v17 + 8 * v22 + 32) = v20;
    }
    while (v13 != v16);
    swift_bridgeObjectRelease();
    a1 = v63;
    v14 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x1E0DEE9D8];
  }
  v23 = objc_msgSend(a1, sel_strides);
  v24 = sub_19CAA99F8();

  if (v24 >> 62)
  {
    swift_bridgeObjectRetain();
    v25 = sub_19CAAA0DC();
    swift_bridgeObjectRelease();
    if (v25)
    {
LABEL_17:
      v64 = v14;
      result = sub_19C556FD0(0, v25 & ~(v25 >> 63), 0);
      if ((v25 & 0x8000000000000000) == 0)
      {
        v26 = 0;
        v27 = v64;
        do
        {
          if ((v24 & 0xC000000000000001) != 0)
            v28 = (id)MEMORY[0x1A1AD4A9C](v26, v24);
          else
            v28 = *(id *)(v24 + 8 * v26 + 32);
          v29 = v28;
          v30 = objc_msgSend(v28, sel_integerValue);

          v64 = v27;
          v32 = *(_QWORD *)(v27 + 16);
          v31 = *(_QWORD *)(v27 + 24);
          if (v32 >= v31 >> 1)
          {
            sub_19C556FD0(v31 > 1, v32 + 1, 1);
            v27 = v64;
          }
          ++v26;
          *(_QWORD *)(v27 + 16) = v32 + 1;
          *(_QWORD *)(v27 + 8 * v32 + 32) = v30;
        }
        while (v25 != v26);
        swift_bridgeObjectRelease();
        a1 = v63;
        goto LABEL_30;
      }
LABEL_38:
      __break(1u);
      return result;
    }
  }
  else
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v25)
      goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  v27 = MEMORY[0x1E0DEE9D8];
LABEL_30:
  v33 = (__CVBuffer *)objc_msgSend(a1, sel_pixelBuffer);
  if (v33)
  {
    v34 = v33;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424170);
    swift_allocObject();
    v35 = sub_19C559EFC(v34, v17, 0);

    result = swift_bridgeObjectRelease();
    v36 = &off_1E3D468D0;
  }
  else
  {
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 16) = a1;
    v39 = v60;
    v38 = v61;
    *v60 = sub_19C4EABB8;
    v39[1] = (uint64_t (*)(uint64_t, uint64_t))v37;
    v40 = v58;
    (*(void (**)(uint64_t (**)(uint64_t, uint64_t), _QWORD, uint64_t))(v58 + 104))(v39, *MEMORY[0x1E0CB00D8], v38);
    v41 = objc_retainAutorelease(a1);
    v42 = objc_msgSend(v41, sel_bytes);
    v43 = *(void (**)(char *, uint64_t (**)(uint64_t, uint64_t), uint64_t))(v40 + 16);
    v44 = v59;
    v43((char *)v59, v39, v38);
    v45 = sub_19C4E37E8(v17, v27);
    v46 = v57;
    v43(v57, v44, v38);
    sub_19CAA95FC();
    if (v45)
    {
      sub_19CAA95B4();
      swift_allocObject();
      swift_retain();
      v47 = sub_19CAA9584();
      v48 = sub_19C559C6C(v47, v45);
      v50 = v49;
      swift_release();
    }
    else
    {
      v51 = (void (*)(id, _QWORD))sub_19CAA95FC();
      v51(v42, 0);
      swift_release();
      swift_release();
      v48 = 0;
      v50 = 0xC000000000000000;
    }
    v52 = *(void (**)(char *, uint64_t))(v58 + 8);
    v53 = v61;
    v52(v46, v61);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4234E0);
    swift_allocObject();
    sub_19C4E7AF0(v48, v50, v17, v27);
    v35 = v54;
    v52((char *)v59, v53);

    result = ((uint64_t (*)(_QWORD, uint64_t))v52)(v60, v53);
    v36 = &off_1E3D43E30;
  }
  v55 = v62;
  *v62 = v35;
  v55[1] = (size_t)v36;
  return result;
}

uint64_t sub_19C4DE8F0@<X0>(void *a1@<X0>, size_t *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  __CVBuffer *v33;
  __CVBuffer *v34;
  size_t v35;
  _UNKNOWN **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (**v39)(uint64_t, uint64_t);
  uint64_t v40;
  id v41;
  id v42;
  void (*v43)(char *, uint64_t (**)(uint64_t, uint64_t), uint64_t);
  uint64_t (**v44)(uint64_t, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(id, _QWORD);
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  size_t v54;
  size_t *v55;
  _QWORD v56[2];
  char *v57;
  uint64_t v58;
  uint64_t (**v59)(uint64_t, uint64_t);
  uint64_t (**v60)(uint64_t, uint64_t);
  uint64_t v61;
  size_t *v62;
  void *v63;
  uint64_t v64;

  v61 = sub_19CAA9608();
  v58 = *(_QWORD *)(v61 - 8);
  v6 = MEMORY[0x1E0C80A78](v61);
  v8 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v59 = (uint64_t (**)(uint64_t, uint64_t))((char *)v56 - v10);
  MEMORY[0x1E0C80A78](v9);
  v60 = (uint64_t (**)(uint64_t, uint64_t))((char *)v56 - v11);
  if (objc_msgSend(a1, sel_dataType) == (id)65552)
  {
    v57 = v8;
    v12 = objc_msgSend(a1, sel_shape);
    v2 = sub_19C4E8EF8();
    v3 = sub_19CAA99F8();

    if (!(v3 >> 62))
    {
      v13 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v13 = sub_19CAAA0DC();
  swift_bridgeObjectRelease();
LABEL_4:
  v14 = MEMORY[0x1E0DEE9D8];
  v62 = a2;
  v63 = a1;
  if (v13)
  {
    v64 = MEMORY[0x1E0DEE9D8];
    result = sub_19C556FD0(0, v13 & ~(v13 >> 63), 0);
    if (v13 < 0)
    {
      __break(1u);
      goto LABEL_38;
    }
    v56[1] = v2;
    v16 = 0;
    v17 = v64;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v18 = (id)MEMORY[0x1A1AD4A9C](v16, v3);
      else
        v18 = *(id *)(v3 + 8 * v16 + 32);
      v19 = v18;
      v20 = objc_msgSend(v18, sel_integerValue);

      v64 = v17;
      v22 = *(_QWORD *)(v17 + 16);
      v21 = *(_QWORD *)(v17 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_19C556FD0(v21 > 1, v22 + 1, 1);
        v17 = v64;
      }
      ++v16;
      *(_QWORD *)(v17 + 16) = v22 + 1;
      *(_QWORD *)(v17 + 8 * v22 + 32) = v20;
    }
    while (v13 != v16);
    swift_bridgeObjectRelease();
    a1 = v63;
    v14 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x1E0DEE9D8];
  }
  v23 = objc_msgSend(a1, sel_strides);
  v24 = sub_19CAA99F8();

  if (v24 >> 62)
  {
    swift_bridgeObjectRetain();
    v25 = sub_19CAAA0DC();
    swift_bridgeObjectRelease();
    if (v25)
    {
LABEL_17:
      v64 = v14;
      result = sub_19C556FD0(0, v25 & ~(v25 >> 63), 0);
      if ((v25 & 0x8000000000000000) == 0)
      {
        v26 = 0;
        v27 = v64;
        do
        {
          if ((v24 & 0xC000000000000001) != 0)
            v28 = (id)MEMORY[0x1A1AD4A9C](v26, v24);
          else
            v28 = *(id *)(v24 + 8 * v26 + 32);
          v29 = v28;
          v30 = objc_msgSend(v28, sel_integerValue);

          v64 = v27;
          v32 = *(_QWORD *)(v27 + 16);
          v31 = *(_QWORD *)(v27 + 24);
          if (v32 >= v31 >> 1)
          {
            sub_19C556FD0(v31 > 1, v32 + 1, 1);
            v27 = v64;
          }
          ++v26;
          *(_QWORD *)(v27 + 16) = v32 + 1;
          *(_QWORD *)(v27 + 8 * v32 + 32) = v30;
        }
        while (v25 != v26);
        swift_bridgeObjectRelease();
        a1 = v63;
        goto LABEL_30;
      }
LABEL_38:
      __break(1u);
      return result;
    }
  }
  else
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v25)
      goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  v27 = MEMORY[0x1E0DEE9D8];
LABEL_30:
  v33 = (__CVBuffer *)objc_msgSend(a1, sel_pixelBuffer);
  if (v33)
  {
    v34 = v33;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424170);
    swift_allocObject();
    v35 = sub_19C559EFC(v34, v17, 0);

    result = swift_bridgeObjectRelease();
    v36 = &off_1E3D468D0;
  }
  else
  {
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 16) = a1;
    v39 = v60;
    v38 = v61;
    *v60 = sub_19C4EABB8;
    v39[1] = (uint64_t (*)(uint64_t, uint64_t))v37;
    v40 = v58;
    (*(void (**)(uint64_t (**)(uint64_t, uint64_t), _QWORD, uint64_t))(v58 + 104))(v39, *MEMORY[0x1E0CB00D8], v38);
    v41 = objc_retainAutorelease(a1);
    v42 = objc_msgSend(v41, sel_bytes);
    v43 = *(void (**)(char *, uint64_t (**)(uint64_t, uint64_t), uint64_t))(v40 + 16);
    v44 = v59;
    v43((char *)v59, v39, v38);
    v45 = sub_19C4E364C(v17, v27);
    v46 = v57;
    v43(v57, v44, v38);
    sub_19CAA95FC();
    if (v45)
    {
      sub_19CAA95B4();
      swift_allocObject();
      swift_retain();
      v47 = sub_19CAA9584();
      v48 = sub_19C559C6C(v47, v45);
      v50 = v49;
      swift_release();
    }
    else
    {
      v51 = (void (*)(id, _QWORD))sub_19CAA95FC();
      v51(v42, 0);
      swift_release();
      swift_release();
      v48 = 0;
      v50 = 0xC000000000000000;
    }
    v52 = *(void (**)(char *, uint64_t))(v58 + 8);
    v53 = v61;
    v52(v46, v61);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4234E8);
    swift_allocObject();
    sub_19C4E7A20(v48, v50, v17, v27, (void (*)(uint64_t, uint64_t))sub_19C4E364C);
    v35 = v54;
    v52((char *)v59, v53);

    result = ((uint64_t (*)(_QWORD, uint64_t))v52)(v60, v53);
    v36 = &off_1E3D43E30;
  }
  v55 = v62;
  *v62 = v35;
  v55[1] = (size_t)v36;
  return result;
}

uint64_t sub_19C4DEEC0@<X0>(void *a1@<X0>, size_t *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  __CVBuffer *v33;
  __CVBuffer *v34;
  size_t v35;
  _UNKNOWN **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (**v39)(uint64_t, uint64_t);
  uint64_t v40;
  id v41;
  id v42;
  void (*v43)(char *, uint64_t (**)(uint64_t, uint64_t), uint64_t);
  uint64_t (**v44)(uint64_t, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(id, _QWORD);
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  size_t v54;
  size_t *v55;
  _QWORD v56[2];
  char *v57;
  uint64_t v58;
  uint64_t (**v59)(uint64_t, uint64_t);
  uint64_t (**v60)(uint64_t, uint64_t);
  uint64_t v61;
  size_t *v62;
  void *v63;
  uint64_t v64;

  v61 = sub_19CAA9608();
  v58 = *(_QWORD *)(v61 - 8);
  v6 = MEMORY[0x1E0C80A78](v61);
  v8 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v59 = (uint64_t (**)(uint64_t, uint64_t))((char *)v56 - v10);
  MEMORY[0x1E0C80A78](v9);
  v60 = (uint64_t (**)(uint64_t, uint64_t))((char *)v56 - v11);
  if (objc_msgSend(a1, sel_dataType) == (id)131104)
  {
    v57 = v8;
    v12 = objc_msgSend(a1, sel_shape);
    v2 = sub_19C4E8EF8();
    v3 = sub_19CAA99F8();

    if (!(v3 >> 62))
    {
      v13 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v13 = sub_19CAAA0DC();
  swift_bridgeObjectRelease();
LABEL_4:
  v14 = MEMORY[0x1E0DEE9D8];
  v62 = a2;
  v63 = a1;
  if (v13)
  {
    v64 = MEMORY[0x1E0DEE9D8];
    result = sub_19C556FD0(0, v13 & ~(v13 >> 63), 0);
    if (v13 < 0)
    {
      __break(1u);
      goto LABEL_38;
    }
    v56[1] = v2;
    v16 = 0;
    v17 = v64;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v18 = (id)MEMORY[0x1A1AD4A9C](v16, v3);
      else
        v18 = *(id *)(v3 + 8 * v16 + 32);
      v19 = v18;
      v20 = objc_msgSend(v18, sel_integerValue);

      v64 = v17;
      v22 = *(_QWORD *)(v17 + 16);
      v21 = *(_QWORD *)(v17 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_19C556FD0(v21 > 1, v22 + 1, 1);
        v17 = v64;
      }
      ++v16;
      *(_QWORD *)(v17 + 16) = v22 + 1;
      *(_QWORD *)(v17 + 8 * v22 + 32) = v20;
    }
    while (v13 != v16);
    swift_bridgeObjectRelease();
    a1 = v63;
    v14 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x1E0DEE9D8];
  }
  v23 = objc_msgSend(a1, sel_strides);
  v24 = sub_19CAA99F8();

  if (v24 >> 62)
  {
    swift_bridgeObjectRetain();
    v25 = sub_19CAAA0DC();
    swift_bridgeObjectRelease();
    if (v25)
    {
LABEL_17:
      v64 = v14;
      result = sub_19C556FD0(0, v25 & ~(v25 >> 63), 0);
      if ((v25 & 0x8000000000000000) == 0)
      {
        v26 = 0;
        v27 = v64;
        do
        {
          if ((v24 & 0xC000000000000001) != 0)
            v28 = (id)MEMORY[0x1A1AD4A9C](v26, v24);
          else
            v28 = *(id *)(v24 + 8 * v26 + 32);
          v29 = v28;
          v30 = objc_msgSend(v28, sel_integerValue);

          v64 = v27;
          v32 = *(_QWORD *)(v27 + 16);
          v31 = *(_QWORD *)(v27 + 24);
          if (v32 >= v31 >> 1)
          {
            sub_19C556FD0(v31 > 1, v32 + 1, 1);
            v27 = v64;
          }
          ++v26;
          *(_QWORD *)(v27 + 16) = v32 + 1;
          *(_QWORD *)(v27 + 8 * v32 + 32) = v30;
        }
        while (v25 != v26);
        swift_bridgeObjectRelease();
        a1 = v63;
        goto LABEL_30;
      }
LABEL_38:
      __break(1u);
      return result;
    }
  }
  else
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v25)
      goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  v27 = MEMORY[0x1E0DEE9D8];
LABEL_30:
  v33 = (__CVBuffer *)objc_msgSend(a1, sel_pixelBuffer);
  if (v33)
  {
    v34 = v33;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424170);
    swift_allocObject();
    v35 = sub_19C559EFC(v34, v17, 0);

    result = swift_bridgeObjectRelease();
    v36 = &off_1E3D468D0;
  }
  else
  {
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 16) = a1;
    v39 = v60;
    v38 = v61;
    *v60 = sub_19C4EABB8;
    v39[1] = (uint64_t (*)(uint64_t, uint64_t))v37;
    v40 = v58;
    (*(void (**)(uint64_t (**)(uint64_t, uint64_t), _QWORD, uint64_t))(v58 + 104))(v39, *MEMORY[0x1E0CB00D8], v38);
    v41 = objc_retainAutorelease(a1);
    v42 = objc_msgSend(v41, sel_bytes);
    v43 = *(void (**)(char *, uint64_t (**)(uint64_t, uint64_t), uint64_t))(v40 + 16);
    v44 = v59;
    v43((char *)v59, v39, v38);
    v45 = sub_19C4E37E8(v17, v27);
    v46 = v57;
    v43(v57, v44, v38);
    sub_19CAA95FC();
    if (v45)
    {
      sub_19CAA95B4();
      swift_allocObject();
      swift_retain();
      v47 = sub_19CAA9584();
      v48 = sub_19C559C6C(v47, v45);
      v50 = v49;
      swift_release();
    }
    else
    {
      v51 = (void (*)(id, _QWORD))sub_19CAA95FC();
      v51(v42, 0);
      swift_release();
      swift_release();
      v48 = 0;
      v50 = 0xC000000000000000;
    }
    v52 = *(void (**)(char *, uint64_t))(v58 + 8);
    v53 = v61;
    v52(v46, v61);
    __swift_instantiateConcreteTypeFromMangledName(qword_1EE4234F0);
    swift_allocObject();
    sub_19C4E7AF0(v48, v50, v17, v27);
    v35 = v54;
    v52((char *)v59, v53);

    result = ((uint64_t (*)(_QWORD, uint64_t))v52)(v60, v53);
    v36 = &off_1E3D43E30;
  }
  v55 = v62;
  *v62 = v35;
  v55[1] = (size_t)v36;
  return result;
}

uint64_t sub_19C4DF488(double **a1)
{
  double *v1;
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  uint64_t result;
  uint64_t v7;
  double *v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  double v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  double *v16;
  int64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  double v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t v36;
  double *v37;
  double v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  unint64_t v44;
  double *v45;
  int64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int64_t v50;
  double *v51;
  double v52;
  double v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  double *v68;
  double *v69;
  double *v70;
  double *v71;
  double *v72;
  double *v73;
  double *v74;
  double *v75;
  double *v76;
  double *v77;
  double *v78;

  v75 = *a1;
  v1 = a1[3];
  v78 = a1[2];
  v3 = a1[4];
  v2 = a1[5];
  v74 = a1[6];
  v4 = a1[10];
  v76 = a1[8];
  v77 = a1[9];
  v5 = a1[11];
  result = sub_19C4EAAF0((uint64_t)a1);
  v71 = v3 + 4;
  v72 = v4;
  v73 = v3;
  v68 = v3 + 1;
  v69 = v4 + 4;
  v67 = v4 + 1;
  v70 = v1;
  while (1)
  {
    if (!v2)
    {
LABEL_98:
      v66 = 1;
LABEL_100:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v66;
    }
    v10 = (unint64_t *)(v2 + 2);
    v9 = *((_QWORD *)v2 + 2);
    if (v9)
    {
      v11 = v9 - 1;
      v12 = v2[v9 + 3];
      v13 = __OFADD__(*(_QWORD *)&v12, 1);
      v14 = *(_QWORD *)&v12 + 1;
      if (v13)
        goto LABEL_117;
      v15 = *((_QWORD *)v73 + 2);
      if (v9 > v15)
        goto LABEL_118;
      if (v14 >= *(_QWORD *)&v71[2 * v11 + 1])
      {
        result = swift_bridgeObjectRetain();
        if (v9 != 1)
        {
          v17 = (int64_t *)&v68[2 * v9];
          v18 = v9;
          v16 = v2;
          while (v16)
          {
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_19C503550(v16);
              v16 = (double *)result;
            }
            v19 = v18 - 1;
            if ((int64_t)(v18 - 1) >= *((_QWORD *)v16 + 2))
            {
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
              goto LABEL_109;
            }
            v16[v18 + 3] = 0.0;
            v11 = v18 - 2;
            if ((uint64_t)(v18 - 2) >= (uint64_t)*v10)
              goto LABEL_102;
            v20 = v10[v18];
            v13 = __OFADD__(v20, 1);
            v21 = v20 + 1;
            if (v13)
              goto LABEL_103;
            if (v11 >= (uint64_t)v15)
              goto LABEL_104;
            if (v21 < *v17)
            {
              v1 = v70;
              goto LABEL_25;
            }
            v17 -= 2;
            --v18;
            if (v19 == 1)
              goto LABEL_23;
          }
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
LABEL_23:
        result = swift_bridgeObjectRelease();
        v16 = 0;
        v1 = v70;
      }
      else
      {
        swift_bridgeObjectRetain();
        v16 = v2;
LABEL_25:
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_19C503550(v16);
          v16 = (double *)result;
        }
        if (v11 >= *((_QWORD *)v16 + 2))
          goto LABEL_123;
        v22 = v16[v11 + 4];
        v13 = __OFADD__(*(_QWORD *)&v22, 1);
        *(_QWORD *)&v23 = *(_QWORD *)&v22 + 1;
        if (v13)
          goto LABEL_124;
        v16[v11 + 4] = v23;
      }
    }
    else
    {
      result = swift_bridgeObjectRetain();
      v16 = v2;
    }
    if (*((_QWORD *)v78 + 2))
    {
      v24 = *v10;
      v25 = *((_QWORD *)v1 + 2);
      if (v25 < *v10)
        goto LABEL_119;
      if (v9)
      {
        if (!v24)
          goto LABEL_127;
        v26 = *((_QWORD *)v2 + 4);
        v27 = *((_QWORD *)v1 + 4);
        v28 = v26 * v27;
        if ((unsigned __int128)(v26 * (__int128)v27) >> 64 != (v26 * v27) >> 63)
          goto LABEL_128;
        if (v9 != 1)
        {
          if (v24 < 2)
            goto LABEL_131;
          if (v25 != 1)
          {
            if (v25 <= 1)
              v29 = 1;
            else
              v29 = *((_QWORD *)v1 + 2);
            v30 = 2 - v24;
            v31 = 1 - v29;
            v32 = 1 - v25;
            v33 = 5;
            while (v31 + v33 != 5)
            {
              v34 = v2[v33];
              v35 = v1[v33];
              v36 = *(_QWORD *)&v34 * *(_QWORD *)&v35;
              if ((unsigned __int128)(*(uint64_t *)&v34 * (__int128)*(uint64_t *)&v35) >> 64 != (uint64_t)(*(_QWORD *)&v34 * *(_QWORD *)&v35) >> 63)
                goto LABEL_110;
              v13 = __OFADD__(v28, v36);
              v28 += v36;
              if (v13)
                goto LABEL_111;
              if (2 - v9 + v33 == 5)
                goto LABEL_52;
              if (v30 + v33 == 5)
                goto LABEL_112;
              ++v33;
              if (v32 + v33 == 5)
                goto LABEL_52;
            }
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
            goto LABEL_133;
          }
        }
      }
      else
      {
        v28 = 0;
      }
LABEL_52:
      result = swift_bridgeObjectRelease();
      v37 = &v75[v28];
      if (!v5)
        goto LABEL_98;
    }
    else
    {
      result = swift_bridgeObjectRelease();
      v37 = v75;
      if (!v5)
        goto LABEL_98;
    }
    v38 = *v37;
    v39 = (unint64_t *)(v5 + 2);
    v40 = *((_QWORD *)v5 + 2);
    if (v40)
      break;
    result = swift_bridgeObjectRetain();
    v45 = v5;
LABEL_71:
    v51 = v77;
LABEL_78:
    if (*((_QWORD *)v76 + 2))
    {
      v54 = *v39;
      v55 = *((_QWORD *)v51 + 2);
      if (v55 < *v39)
        goto LABEL_122;
      if (v40)
      {
        if (!v54)
          goto LABEL_129;
        v56 = *((_QWORD *)v5 + 4);
        v57 = *((_QWORD *)v51 + 4);
        v7 = v56 * v57;
        if ((unsigned __int128)(v56 * (__int128)v57) >> 64 != (v56 * v57) >> 63)
          goto LABEL_130;
        if (v40 != 1)
        {
          if (v54 < 2)
            goto LABEL_132;
          if (v55 != 1)
          {
            if (v55 <= 1)
              v58 = 1;
            else
              v58 = *((_QWORD *)v51 + 2);
            v59 = 2 - v54;
            v60 = 1 - v58;
            v61 = 1 - v55;
            v62 = 5;
            while (v60 + v62 != 5)
            {
              v63 = v5[v62];
              v64 = v51[v62];
              v65 = *(_QWORD *)&v63 * *(_QWORD *)&v64;
              if ((unsigned __int128)(*(uint64_t *)&v63 * (__int128)*(uint64_t *)&v64) >> 64 != (uint64_t)(*(_QWORD *)&v63 * *(_QWORD *)&v64) >> 63)
                goto LABEL_114;
              v13 = __OFADD__(v7, v65);
              v7 += v65;
              if (v13)
                goto LABEL_115;
              if (2 - v40 + v62 == 5)
                goto LABEL_3;
              if (v59 + v62 == 5)
                goto LABEL_116;
              ++v62;
              if (v61 + v62 == 5)
                goto LABEL_3;
            }
            goto LABEL_113;
          }
        }
      }
      else
      {
        v7 = 0;
      }
LABEL_3:
      result = swift_bridgeObjectRelease();
      v8 = &v74[v7];
    }
    else
    {
      result = swift_bridgeObjectRelease();
      v8 = v74;
    }
    v2 = v16;
    v5 = v45;
    if (v38 != *v8)
    {
      v66 = 0;
      goto LABEL_100;
    }
  }
  v41 = v40 - 1;
  v42 = v5[v40 + 3];
  v13 = __OFADD__(*(_QWORD *)&v42, 1);
  v43 = *(_QWORD *)&v42 + 1;
  if (v13)
    goto LABEL_120;
  v44 = *((_QWORD *)v72 + 2);
  if (v40 > v44)
    goto LABEL_121;
  if (v43 < *(_QWORD *)&v69[2 * v41 + 1])
  {
    swift_bridgeObjectRetain();
    v45 = v5;
LABEL_73:
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_19C503550(v45);
      v45 = (double *)result;
    }
    v51 = v77;
    if (v41 >= *((_QWORD *)v45 + 2))
      goto LABEL_125;
    v52 = v45[v41 + 4];
    v13 = __OFADD__(*(_QWORD *)&v52, 1);
    *(_QWORD *)&v53 = *(_QWORD *)&v52 + 1;
    if (v13)
      goto LABEL_126;
    v45[v41 + 4] = v53;
    goto LABEL_78;
  }
  result = swift_bridgeObjectRetain();
  if (v40 == 1)
  {
LABEL_70:
    result = swift_bridgeObjectRelease();
    v45 = 0;
    v1 = v70;
    goto LABEL_71;
  }
  v46 = (int64_t *)&v67[2 * v40];
  v47 = v40;
  v45 = v5;
  while (v45)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_19C503550(v45);
      v45 = (double *)result;
    }
    v48 = v47 - 1;
    if ((int64_t)(v47 - 1) >= *((_QWORD *)v45 + 2))
      goto LABEL_105;
    v45[v47 + 3] = 0.0;
    v41 = v47 - 2;
    if ((uint64_t)(v47 - 2) >= (uint64_t)*v39)
      goto LABEL_106;
    v49 = v39[v47];
    v13 = __OFADD__(v49, 1);
    v50 = v49 + 1;
    if (v13)
      goto LABEL_107;
    if (v41 >= (uint64_t)v44)
      goto LABEL_108;
    if (v50 < *v46)
    {
      v1 = v70;
      goto LABEL_73;
    }
    v46 -= 2;
    --v47;
    if (v48 == 1)
      goto LABEL_70;
  }
LABEL_134:
  __break(1u);
  return result;
}

uint64_t sub_19C4DFAC4(float **a1)
{
  float *v1;
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  uint64_t result;
  uint64_t v7;
  float *v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  float *v16;
  int64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  float v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  float *v45;
  int64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int64_t v50;
  float *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float *v67;
  float *v68;
  float *v69;
  float *v70;
  float *v71;
  float *v72;
  float *v73;
  float *v74;
  float *v75;
  float *v76;
  float *v77;
  float *v78;

  v75 = *a1;
  v1 = a1[3];
  v78 = a1[2];
  v3 = a1[4];
  v2 = a1[5];
  v74 = a1[6];
  v4 = a1[10];
  v76 = a1[8];
  v77 = a1[9];
  v5 = a1[11];
  result = sub_19C4EAAF0((uint64_t)a1);
  v71 = v3 + 8;
  v72 = v4;
  v73 = v3;
  v68 = v3 + 2;
  v69 = v4 + 8;
  v67 = v4 + 2;
  v70 = v1;
  while (1)
  {
    if (!v2)
    {
LABEL_98:
      v66 = 1;
LABEL_100:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v66;
    }
    v10 = (unint64_t *)(v2 + 4);
    v9 = *((_QWORD *)v2 + 2);
    if (v9)
    {
      v11 = v9 - 1;
      v12 = *(_QWORD *)&v2[2 * v9 + 6];
      v13 = __OFADD__(v12, 1);
      v14 = v12 + 1;
      if (v13)
        goto LABEL_117;
      v15 = *((_QWORD *)v73 + 2);
      if (v9 > v15)
        goto LABEL_118;
      if (v14 >= *(_QWORD *)&v71[4 * v11 + 2])
      {
        result = swift_bridgeObjectRetain();
        if (v9 != 1)
        {
          v17 = (int64_t *)&v68[4 * v9];
          v18 = v9;
          v16 = v2;
          while (v16)
          {
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_19C503550(v16);
              v16 = (float *)result;
            }
            v19 = v18 - 1;
            if ((int64_t)(v18 - 1) >= *((_QWORD *)v16 + 2))
            {
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
              goto LABEL_109;
            }
            *(_QWORD *)&v16[2 * v18 + 6] = 0;
            v11 = v18 - 2;
            if ((uint64_t)(v18 - 2) >= (uint64_t)*v10)
              goto LABEL_102;
            v20 = v10[v18];
            v13 = __OFADD__(v20, 1);
            v21 = v20 + 1;
            if (v13)
              goto LABEL_103;
            if (v11 >= (uint64_t)v15)
              goto LABEL_104;
            if (v21 < *v17)
            {
              v1 = v70;
              goto LABEL_25;
            }
            v17 -= 2;
            --v18;
            if (v19 == 1)
              goto LABEL_23;
          }
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
LABEL_23:
        result = swift_bridgeObjectRelease();
        v16 = 0;
        v1 = v70;
      }
      else
      {
        swift_bridgeObjectRetain();
        v16 = v2;
LABEL_25:
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_19C503550(v16);
          v16 = (float *)result;
        }
        if (v11 >= *((_QWORD *)v16 + 2))
          goto LABEL_123;
        v22 = *(_QWORD *)&v16[2 * v11 + 8];
        v13 = __OFADD__(v22, 1);
        v23 = v22 + 1;
        if (v13)
          goto LABEL_124;
        *(_QWORD *)&v16[2 * v11 + 8] = v23;
      }
    }
    else
    {
      result = swift_bridgeObjectRetain();
      v16 = v2;
    }
    if (*((_QWORD *)v78 + 2))
    {
      v24 = *v10;
      v25 = *((_QWORD *)v1 + 2);
      if (v25 < *v10)
        goto LABEL_119;
      if (v9)
      {
        if (!v24)
          goto LABEL_127;
        v26 = *((_QWORD *)v2 + 4);
        v27 = *((_QWORD *)v1 + 4);
        v28 = v26 * v27;
        if ((unsigned __int128)(v26 * (__int128)v27) >> 64 != (v26 * v27) >> 63)
          goto LABEL_128;
        if (v9 != 1)
        {
          if (v24 < 2)
            goto LABEL_131;
          if (v25 != 1)
          {
            if (v25 <= 1)
              v29 = 1;
            else
              v29 = *((_QWORD *)v1 + 2);
            v30 = 2 - v24;
            v31 = 1 - v29;
            v32 = 1 - v25;
            v33 = 5;
            while (v31 + v33 != 5)
            {
              v34 = *(_QWORD *)&v2[2 * v33];
              v35 = *(_QWORD *)&v1[2 * v33];
              v36 = v34 * v35;
              if ((unsigned __int128)(v34 * (__int128)v35) >> 64 != (v34 * v35) >> 63)
                goto LABEL_110;
              v13 = __OFADD__(v28, v36);
              v28 += v36;
              if (v13)
                goto LABEL_111;
              if (2 - v9 + v33 == 5)
                goto LABEL_52;
              if (v30 + v33 == 5)
                goto LABEL_112;
              ++v33;
              if (v32 + v33 == 5)
                goto LABEL_52;
            }
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
            goto LABEL_133;
          }
        }
      }
      else
      {
        v28 = 0;
      }
LABEL_52:
      result = swift_bridgeObjectRelease();
      v37 = &v75[v28];
      if (!v5)
        goto LABEL_98;
    }
    else
    {
      result = swift_bridgeObjectRelease();
      v37 = v75;
      if (!v5)
        goto LABEL_98;
    }
    v38 = *v37;
    v39 = (unint64_t *)(v5 + 4);
    v40 = *((_QWORD *)v5 + 2);
    if (v40)
      break;
    result = swift_bridgeObjectRetain();
    v45 = v5;
LABEL_71:
    v51 = v77;
LABEL_78:
    if (*((_QWORD *)v76 + 2))
    {
      v54 = *v39;
      v55 = *((_QWORD *)v51 + 2);
      if (v55 < *v39)
        goto LABEL_122;
      if (v40)
      {
        if (!v54)
          goto LABEL_129;
        v56 = *((_QWORD *)v5 + 4);
        v57 = *((_QWORD *)v51 + 4);
        v7 = v56 * v57;
        if ((unsigned __int128)(v56 * (__int128)v57) >> 64 != (v56 * v57) >> 63)
          goto LABEL_130;
        if (v40 != 1)
        {
          if (v54 < 2)
            goto LABEL_132;
          if (v55 != 1)
          {
            if (v55 <= 1)
              v58 = 1;
            else
              v58 = *((_QWORD *)v51 + 2);
            v59 = 2 - v54;
            v60 = 1 - v58;
            v61 = 1 - v55;
            v62 = 5;
            while (v60 + v62 != 5)
            {
              v63 = *(_QWORD *)&v5[2 * v62];
              v64 = *(_QWORD *)&v51[2 * v62];
              v65 = v63 * v64;
              if ((unsigned __int128)(v63 * (__int128)v64) >> 64 != (v63 * v64) >> 63)
                goto LABEL_114;
              v13 = __OFADD__(v7, v65);
              v7 += v65;
              if (v13)
                goto LABEL_115;
              if (2 - v40 + v62 == 5)
                goto LABEL_3;
              if (v59 + v62 == 5)
                goto LABEL_116;
              ++v62;
              if (v61 + v62 == 5)
                goto LABEL_3;
            }
            goto LABEL_113;
          }
        }
      }
      else
      {
        v7 = 0;
      }
LABEL_3:
      result = swift_bridgeObjectRelease();
      v8 = &v74[v7];
    }
    else
    {
      result = swift_bridgeObjectRelease();
      v8 = v74;
    }
    v2 = v16;
    v5 = v45;
    if (v38 != *v8)
    {
      v66 = 0;
      goto LABEL_100;
    }
  }
  v41 = v40 - 1;
  v42 = *(_QWORD *)&v5[2 * v40 + 6];
  v13 = __OFADD__(v42, 1);
  v43 = v42 + 1;
  if (v13)
    goto LABEL_120;
  v44 = *((_QWORD *)v72 + 2);
  if (v40 > v44)
    goto LABEL_121;
  if (v43 < *(_QWORD *)&v69[4 * v41 + 2])
  {
    swift_bridgeObjectRetain();
    v45 = v5;
LABEL_73:
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_19C503550(v45);
      v45 = (float *)result;
    }
    v51 = v77;
    if (v41 >= *((_QWORD *)v45 + 2))
      goto LABEL_125;
    v52 = *(_QWORD *)&v45[2 * v41 + 8];
    v13 = __OFADD__(v52, 1);
    v53 = v52 + 1;
    if (v13)
      goto LABEL_126;
    *(_QWORD *)&v45[2 * v41 + 8] = v53;
    goto LABEL_78;
  }
  result = swift_bridgeObjectRetain();
  if (v40 == 1)
  {
LABEL_70:
    result = swift_bridgeObjectRelease();
    v45 = 0;
    v1 = v70;
    goto LABEL_71;
  }
  v46 = (int64_t *)&v67[4 * v40];
  v47 = v40;
  v45 = v5;
  while (v45)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_19C503550(v45);
      v45 = (float *)result;
    }
    v48 = v47 - 1;
    if ((int64_t)(v47 - 1) >= *((_QWORD *)v45 + 2))
      goto LABEL_105;
    *(_QWORD *)&v45[2 * v47 + 6] = 0;
    v41 = v47 - 2;
    if ((uint64_t)(v47 - 2) >= (uint64_t)*v39)
      goto LABEL_106;
    v49 = v39[v47];
    v13 = __OFADD__(v49, 1);
    v50 = v49 + 1;
    if (v13)
      goto LABEL_107;
    if (v41 >= (uint64_t)v44)
      goto LABEL_108;
    if (v50 < *v46)
    {
      v1 = v70;
      goto LABEL_73;
    }
    v46 -= 2;
    --v47;
    if (v48 == 1)
      goto LABEL_70;
  }
LABEL_134:
  __break(1u);
  return result;
}

uint64_t sub_19C4E0100(__int16 **a1)
{
  __int16 *v1;
  __int16 *v2;
  __int16 *v3;
  __int16 *v4;
  __int16 *v5;
  uint64_t result;
  uint64_t v7;
  __int16 *v8;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int16 *v22;
  int64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 *v43;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int16 *v51;
  int64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  __int16 *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int16 *v73;
  __int16 *v74;
  __int16 *v75;
  __int16 *v76;
  __int16 *v77;
  __int16 *v78;
  __int16 *v79;
  __int16 *v80;
  __int16 *v81;
  __int16 *v82;
  __int16 *v83;
  __int16 *v84;

  v81 = *a1;
  v1 = a1[3];
  v84 = a1[2];
  v3 = a1[4];
  v2 = a1[5];
  v80 = a1[6];
  v4 = a1[10];
  v82 = a1[8];
  v83 = a1[9];
  v5 = a1[11];
  result = sub_19C4EAAF0((uint64_t)a1);
  v77 = v3 + 16;
  v78 = v4;
  v79 = v3;
  v74 = v3 + 4;
  v75 = v4 + 16;
  v73 = v4 + 4;
  v76 = v1;
  while (1)
  {
    if (!v2)
    {
LABEL_98:
      v72 = 1;
LABEL_100:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v72;
    }
    v17 = (unint64_t *)(v2 + 8);
    v16 = *((_QWORD *)v2 + 2);
    if (v16)
    {
      v18 = v16 - 1;
      v19 = *(_QWORD *)&v2[4 * v16 + 12];
      _VF = __OFADD__(v19, 1);
      v20 = v19 + 1;
      if (_VF)
        goto LABEL_117;
      v21 = *((_QWORD *)v79 + 2);
      if (v16 > v21)
        goto LABEL_118;
      if (v20 >= *(_QWORD *)&v77[8 * v18 + 4])
      {
        result = swift_bridgeObjectRetain();
        if (v16 != 1)
        {
          v23 = (int64_t *)&v74[8 * v16];
          v24 = v16;
          v22 = v2;
          while (v22)
          {
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_19C503550(v22);
              v22 = (__int16 *)result;
            }
            v25 = v24 - 1;
            if ((int64_t)(v24 - 1) >= *((_QWORD *)v22 + 2))
            {
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
              goto LABEL_109;
            }
            *(_QWORD *)&v22[4 * v24 + 12] = 0;
            v18 = v24 - 2;
            if ((uint64_t)(v24 - 2) >= (uint64_t)*v17)
              goto LABEL_102;
            v26 = v17[v24];
            _VF = __OFADD__(v26, 1);
            v27 = v26 + 1;
            if (_VF)
              goto LABEL_103;
            if (v18 >= (uint64_t)v21)
              goto LABEL_104;
            if (v27 < *v23)
            {
              v1 = v76;
              goto LABEL_25;
            }
            v23 -= 2;
            --v24;
            if (v25 == 1)
              goto LABEL_23;
          }
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
LABEL_23:
        result = swift_bridgeObjectRelease();
        v22 = 0;
        v1 = v76;
      }
      else
      {
        swift_bridgeObjectRetain();
        v22 = v2;
LABEL_25:
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_19C503550(v22);
          v22 = (__int16 *)result;
        }
        if (v18 >= *((_QWORD *)v22 + 2))
          goto LABEL_123;
        v28 = *(_QWORD *)&v22[4 * v18 + 16];
        _VF = __OFADD__(v28, 1);
        v29 = v28 + 1;
        if (_VF)
          goto LABEL_124;
        *(_QWORD *)&v22[4 * v18 + 16] = v29;
      }
    }
    else
    {
      result = swift_bridgeObjectRetain();
      v22 = v2;
    }
    if (*((_QWORD *)v84 + 2))
    {
      v30 = *v17;
      v31 = *((_QWORD *)v1 + 2);
      if (v31 < *v17)
        goto LABEL_119;
      if (v16)
      {
        if (!v30)
          goto LABEL_127;
        v32 = *((_QWORD *)v2 + 4);
        v33 = *((_QWORD *)v1 + 4);
        v34 = v32 * v33;
        if ((unsigned __int128)(v32 * (__int128)v33) >> 64 != (v32 * v33) >> 63)
          goto LABEL_128;
        if (v16 != 1)
        {
          if (v30 < 2)
            goto LABEL_131;
          if (v31 != 1)
          {
            if (v31 <= 1)
              v35 = 1;
            else
              v35 = *((_QWORD *)v1 + 2);
            v36 = 2 - v30;
            v37 = 1 - v35;
            v38 = 1 - v31;
            v39 = 5;
            while (v37 + v39 != 5)
            {
              v40 = *(_QWORD *)&v2[4 * v39];
              v41 = *(_QWORD *)&v1[4 * v39];
              v42 = v40 * v41;
              if ((unsigned __int128)(v40 * (__int128)v41) >> 64 != (v40 * v41) >> 63)
                goto LABEL_110;
              _VF = __OFADD__(v34, v42);
              v34 += v42;
              if (_VF)
                goto LABEL_111;
              if (2 - v16 + v39 == 5)
                goto LABEL_52;
              if (v36 + v39 == 5)
                goto LABEL_112;
              ++v39;
              if (v38 + v39 == 5)
                goto LABEL_52;
            }
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
            goto LABEL_133;
          }
        }
      }
      else
      {
        v34 = 0;
      }
LABEL_52:
      result = swift_bridgeObjectRelease();
      v43 = &v81[v34];
      if (!v5)
        goto LABEL_98;
    }
    else
    {
      result = swift_bridgeObjectRelease();
      v43 = v81;
      if (!v5)
        goto LABEL_98;
    }
    _H8 = *v43;
    v45 = (unint64_t *)(v5 + 8);
    v46 = *((_QWORD *)v5 + 2);
    if (v46)
      break;
    result = swift_bridgeObjectRetain();
    v51 = v5;
LABEL_71:
    v57 = v83;
LABEL_78:
    if (*((_QWORD *)v82 + 2))
    {
      v60 = *v45;
      v61 = *((_QWORD *)v57 + 2);
      if (v61 < *v45)
        goto LABEL_122;
      if (v46)
      {
        if (!v60)
          goto LABEL_129;
        v62 = *((_QWORD *)v5 + 4);
        v63 = *((_QWORD *)v57 + 4);
        v7 = v62 * v63;
        if ((unsigned __int128)(v62 * (__int128)v63) >> 64 != (v62 * v63) >> 63)
          goto LABEL_130;
        if (v46 != 1)
        {
          if (v60 < 2)
            goto LABEL_132;
          if (v61 != 1)
          {
            if (v61 <= 1)
              v64 = 1;
            else
              v64 = *((_QWORD *)v57 + 2);
            v65 = 2 - v60;
            v66 = 1 - v64;
            v67 = 1 - v61;
            v68 = 5;
            while (v66 + v68 != 5)
            {
              v69 = *(_QWORD *)&v5[4 * v68];
              v70 = *(_QWORD *)&v57[4 * v68];
              v71 = v69 * v70;
              if ((unsigned __int128)(v69 * (__int128)v70) >> 64 != (v69 * v70) >> 63)
                goto LABEL_114;
              _VF = __OFADD__(v7, v71);
              v7 += v71;
              if (_VF)
                goto LABEL_115;
              if (2 - v46 + v68 == 5)
                goto LABEL_3;
              if (v65 + v68 == 5)
                goto LABEL_116;
              ++v68;
              if (v67 + v68 == 5)
                goto LABEL_3;
            }
            goto LABEL_113;
          }
        }
      }
      else
      {
        v7 = 0;
      }
LABEL_3:
      result = swift_bridgeObjectRelease();
      v8 = &v80[v7];
    }
    else
    {
      result = swift_bridgeObjectRelease();
      v8 = v80;
    }
    _H0 = *v8;
    __asm
    {
      FCVT            S1, H8
      FCVT            S0, H0
    }
    v2 = v22;
    v5 = v51;
    if (_S1 != _S0)
    {
      v72 = 0;
      goto LABEL_100;
    }
  }
  v47 = v46 - 1;
  v48 = *(_QWORD *)&v5[4 * v46 + 12];
  _VF = __OFADD__(v48, 1);
  v49 = v48 + 1;
  if (_VF)
    goto LABEL_120;
  v50 = *((_QWORD *)v78 + 2);
  if (v46 > v50)
    goto LABEL_121;
  if (v49 < *(_QWORD *)&v75[8 * v47 + 4])
  {
    swift_bridgeObjectRetain();
    v51 = v5;
LABEL_73:
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_19C503550(v51);
      v51 = (__int16 *)result;
    }
    v57 = v83;
    if (v47 >= *((_QWORD *)v51 + 2))
      goto LABEL_125;
    v58 = *(_QWORD *)&v51[4 * v47 + 16];
    _VF = __OFADD__(v58, 1);
    v59 = v58 + 1;
    if (_VF)
      goto LABEL_126;
    *(_QWORD *)&v51[4 * v47 + 16] = v59;
    goto LABEL_78;
  }
  result = swift_bridgeObjectRetain();
  if (v46 == 1)
  {
LABEL_70:
    result = swift_bridgeObjectRelease();
    v51 = 0;
    v1 = v76;
    goto LABEL_71;
  }
  v52 = (int64_t *)&v73[8 * v46];
  v53 = v46;
  v51 = v5;
  while (v51)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_19C503550(v51);
      v51 = (__int16 *)result;
    }
    v54 = v53 - 1;
    if ((int64_t)(v53 - 1) >= *((_QWORD *)v51 + 2))
      goto LABEL_105;
    *(_QWORD *)&v51[4 * v53 + 12] = 0;
    v47 = v53 - 2;
    if ((uint64_t)(v53 - 2) >= (uint64_t)*v45)
      goto LABEL_106;
    v55 = v45[v53];
    _VF = __OFADD__(v55, 1);
    v56 = v55 + 1;
    if (_VF)
      goto LABEL_107;
    if (v47 >= (uint64_t)v50)
      goto LABEL_108;
    if (v56 < *v52)
    {
      v1 = v76;
      goto LABEL_73;
    }
    v52 -= 2;
    --v53;
    if (v54 == 1)
      goto LABEL_70;
  }
LABEL_134:
  __break(1u);
  return result;
}

uint64_t sub_19C4E0744(int **a1)
{
  int *v1;
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  uint64_t result;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  int64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int *v44;
  int64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  int *v67;
  int *v68;
  int *v69;
  int *v70;
  int *v71;
  int *v72;
  int *v73;
  int *v74;
  int *v75;
  int *v76;
  int *v77;
  int v78;

  v74 = *a1;
  v1 = a1[3];
  v77 = a1[2];
  v2 = a1[4];
  v3 = a1[5];
  v73 = a1[6];
  v4 = a1[10];
  v75 = a1[8];
  v76 = a1[9];
  v5 = a1[11];
  result = sub_19C4EAAF0((uint64_t)a1);
  v70 = v2 + 8;
  v71 = v4;
  v72 = v2;
  v67 = v2 + 2;
  v68 = v4 + 8;
  v66 = v4 + 2;
  v69 = v1;
  while (1)
  {
    if (!v3)
    {
LABEL_98:
      v65 = 1;
LABEL_100:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v65;
    }
    v10 = (unint64_t *)(v3 + 4);
    v9 = *((_QWORD *)v3 + 2);
    if (v9)
    {
      v11 = v9 - 1;
      v12 = *(_QWORD *)&v3[2 * v9 + 6];
      v13 = __OFADD__(v12, 1);
      v14 = v12 + 1;
      if (v13)
        goto LABEL_117;
      v15 = *((_QWORD *)v72 + 2);
      if (v9 > v15)
        goto LABEL_118;
      if (v14 >= *(_QWORD *)&v70[4 * v11 + 2])
      {
        result = swift_bridgeObjectRetain();
        if (v9 != 1)
        {
          v17 = (int64_t *)&v67[4 * v9];
          v18 = v9;
          v16 = v3;
          while (v16)
          {
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_19C503550(v16);
              v16 = (int *)result;
            }
            v19 = v18 - 1;
            if ((int64_t)(v18 - 1) >= *((_QWORD *)v16 + 2))
            {
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
              goto LABEL_109;
            }
            *(_QWORD *)&v16[2 * v18 + 6] = 0;
            v11 = v18 - 2;
            if ((uint64_t)(v18 - 2) >= (uint64_t)*v10)
              goto LABEL_102;
            v20 = v10[v18];
            v13 = __OFADD__(v20, 1);
            v21 = v20 + 1;
            if (v13)
              goto LABEL_103;
            if (v11 >= (uint64_t)v15)
              goto LABEL_104;
            if (v21 < *v17)
            {
              v1 = v69;
              goto LABEL_25;
            }
            v17 -= 2;
            --v18;
            if (v19 == 1)
              goto LABEL_23;
          }
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
LABEL_23:
        result = swift_bridgeObjectRelease();
        v16 = 0;
        v1 = v69;
      }
      else
      {
        swift_bridgeObjectRetain();
        v16 = v3;
LABEL_25:
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_19C503550(v16);
          v16 = (int *)result;
        }
        if (v11 >= *((_QWORD *)v16 + 2))
          goto LABEL_123;
        v22 = *(_QWORD *)&v16[2 * v11 + 8];
        v13 = __OFADD__(v22, 1);
        v23 = v22 + 1;
        if (v13)
          goto LABEL_124;
        *(_QWORD *)&v16[2 * v11 + 8] = v23;
      }
    }
    else
    {
      result = swift_bridgeObjectRetain();
      v16 = v3;
    }
    if (*((_QWORD *)v77 + 2))
    {
      v24 = *v10;
      v25 = *((_QWORD *)v1 + 2);
      if (v25 < *v10)
        goto LABEL_119;
      if (v9)
      {
        if (!v24)
          goto LABEL_127;
        v26 = *((_QWORD *)v3 + 4);
        v27 = *((_QWORD *)v1 + 4);
        v28 = v26 * v27;
        if ((unsigned __int128)(v26 * (__int128)v27) >> 64 != (v26 * v27) >> 63)
          goto LABEL_128;
        if (v9 != 1)
        {
          if (v24 < 2)
            goto LABEL_131;
          if (v25 != 1)
          {
            if (v25 <= 1)
              v29 = 1;
            else
              v29 = *((_QWORD *)v1 + 2);
            v30 = 2 - v24;
            v31 = 1 - v29;
            v32 = 1 - v25;
            v33 = 5;
            while (v31 + v33 != 5)
            {
              v34 = *(_QWORD *)&v3[2 * v33];
              v35 = *(_QWORD *)&v1[2 * v33];
              v36 = v34 * v35;
              if ((unsigned __int128)(v34 * (__int128)v35) >> 64 != (v34 * v35) >> 63)
                goto LABEL_110;
              v13 = __OFADD__(v28, v36);
              v28 += v36;
              if (v13)
                goto LABEL_111;
              if (2 - v9 + v33 == 5)
                goto LABEL_52;
              if (v30 + v33 == 5)
                goto LABEL_112;
              ++v33;
              if (v32 + v33 == 5)
                goto LABEL_52;
            }
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
            goto LABEL_133;
          }
        }
      }
      else
      {
        v28 = 0;
      }
LABEL_52:
      result = swift_bridgeObjectRelease();
      v37 = &v74[v28];
      if (!v5)
        goto LABEL_98;
    }
    else
    {
      result = swift_bridgeObjectRelease();
      v37 = v74;
      if (!v5)
        goto LABEL_98;
    }
    v38 = (unint64_t *)(v5 + 4);
    v39 = *((_QWORD *)v5 + 2);
    v78 = *v37;
    if (v39)
      break;
    result = swift_bridgeObjectRetain();
    v44 = v5;
LABEL_71:
    v50 = v76;
LABEL_78:
    if (*((_QWORD *)v75 + 2))
    {
      v53 = *v38;
      v54 = *((_QWORD *)v50 + 2);
      if (v54 < *v38)
        goto LABEL_122;
      if (v39)
      {
        if (!v53)
          goto LABEL_129;
        v55 = *((_QWORD *)v5 + 4);
        v56 = *((_QWORD *)v50 + 4);
        v7 = v55 * v56;
        if ((unsigned __int128)(v55 * (__int128)v56) >> 64 != (v55 * v56) >> 63)
          goto LABEL_130;
        if (v39 != 1)
        {
          if (v53 < 2)
            goto LABEL_132;
          if (v54 != 1)
          {
            if (v54 <= 1)
              v57 = 1;
            else
              v57 = *((_QWORD *)v50 + 2);
            v58 = 2 - v53;
            v59 = 1 - v57;
            v60 = 1 - v54;
            v61 = 5;
            while (v59 + v61 != 5)
            {
              v62 = *(_QWORD *)&v5[2 * v61];
              v63 = *(_QWORD *)&v50[2 * v61];
              v64 = v62 * v63;
              if ((unsigned __int128)(v62 * (__int128)v63) >> 64 != (v62 * v63) >> 63)
                goto LABEL_114;
              v13 = __OFADD__(v7, v64);
              v7 += v64;
              if (v13)
                goto LABEL_115;
              if (2 - v39 + v61 == 5)
                goto LABEL_3;
              if (v58 + v61 == 5)
                goto LABEL_116;
              ++v61;
              if (v60 + v61 == 5)
                goto LABEL_3;
            }
            goto LABEL_113;
          }
        }
      }
      else
      {
        v7 = 0;
      }
LABEL_3:
      result = swift_bridgeObjectRelease();
      v8 = &v73[v7];
    }
    else
    {
      result = swift_bridgeObjectRelease();
      v8 = v73;
    }
    v3 = v16;
    v5 = v44;
    if (v78 != *v8)
    {
      v65 = 0;
      goto LABEL_100;
    }
  }
  v40 = v39 - 1;
  v41 = *(_QWORD *)&v5[2 * v39 + 6];
  v13 = __OFADD__(v41, 1);
  v42 = v41 + 1;
  if (v13)
    goto LABEL_120;
  v43 = *((_QWORD *)v71 + 2);
  if (v39 > v43)
    goto LABEL_121;
  if (v42 < *(_QWORD *)&v68[4 * v40 + 2])
  {
    swift_bridgeObjectRetain();
    v44 = v5;
LABEL_73:
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_19C503550(v44);
      v44 = (int *)result;
    }
    v50 = v76;
    if (v40 >= *((_QWORD *)v44 + 2))
      goto LABEL_125;
    v51 = *(_QWORD *)&v44[2 * v40 + 8];
    v13 = __OFADD__(v51, 1);
    v52 = v51 + 1;
    if (v13)
      goto LABEL_126;
    *(_QWORD *)&v44[2 * v40 + 8] = v52;
    goto LABEL_78;
  }
  result = swift_bridgeObjectRetain();
  if (v39 == 1)
  {
LABEL_70:
    result = swift_bridgeObjectRelease();
    v44 = 0;
    v1 = v69;
    goto LABEL_71;
  }
  v45 = (int64_t *)&v66[4 * v39];
  v46 = v39;
  v44 = v5;
  while (v44)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_19C503550(v44);
      v44 = (int *)result;
    }
    v47 = v46 - 1;
    if ((int64_t)(v46 - 1) >= *((_QWORD *)v44 + 2))
      goto LABEL_105;
    *(_QWORD *)&v44[2 * v46 + 6] = 0;
    v40 = v46 - 2;
    if ((uint64_t)(v46 - 2) >= (uint64_t)*v38)
      goto LABEL_106;
    v48 = v38[v46];
    v13 = __OFADD__(v48, 1);
    v49 = v48 + 1;
    if (v13)
      goto LABEL_107;
    if (v40 >= (uint64_t)v43)
      goto LABEL_108;
    if (v49 < *v45)
    {
      v1 = v69;
      goto LABEL_73;
    }
    v45 -= 2;
    --v46;
    if (v47 == 1)
      goto LABEL_70;
  }
LABEL_134:
  __break(1u);
  return result;
}

uint64_t sub_19C4E0D80(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v34 = MEMORY[0x1E0DEE9D8];
  sub_19C556FD0(0, v6, 0);
  v7 = v6;
  v31 = v4;
  v33 = a1;
  v30 = v5;
  if (v6)
  {
    v8 = (uint64_t *)(a1 + 32);
    v9 = (uint64_t *)(a2 + 32);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = v7;
    v12 = a2;
    while (v4)
    {
      if (!v5)
        goto LABEL_28;
      v13 = *v8 * *v9;
      if ((unsigned __int128)(*v8 * (__int128)*v9) >> 64 != v13 >> 63)
        goto LABEL_29;
      v15 = *(_QWORD *)(v34 + 16);
      v14 = *(_QWORD *)(v34 + 24);
      if (v15 >= v14 >> 1)
      {
        v28 = v12;
        result = sub_19C556FD0(v14 > 1, v15 + 1, 1);
        v12 = v28;
      }
      --v5;
      *(_QWORD *)(v34 + 16) = v15 + 1;
      *(_QWORD *)(v34 + 8 * v15 + 32) = v13;
      --v4;
      ++v9;
      ++v8;
      if (!--v11)
        goto LABEL_14;
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v12 = a2;
LABEL_14:
    if (v31 <= v30)
    {
LABEL_26:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v34;
    }
    v16 = 0;
    if (v7 <= v30)
      v17 = v30;
    else
      v17 = v7;
    v18 = v17 - v7;
    v19 = v31 - v7;
    v20 = 8 * v7 + 32;
    v21 = v33 + v20;
    v22 = v12 + v20;
    while (v19 != v16)
    {
      if (v30 - v7 == v16)
        goto LABEL_26;
      if (v18 == v16)
        goto LABEL_31;
      v23 = *(_QWORD *)(v21 + 8 * v16);
      v24 = *(_QWORD *)(v22 + 8 * v16);
      v25 = v23 * v24;
      if ((unsigned __int128)(v23 * (__int128)v24) >> 64 != (v23 * v24) >> 63)
        goto LABEL_32;
      v27 = *(_QWORD *)(v34 + 16);
      v26 = *(_QWORD *)(v34 + 24);
      if (v27 >= v26 >> 1)
      {
        v29 = v12;
        v32 = v18;
        result = sub_19C556FD0(v26 > 1, v27 + 1, 1);
        v18 = v32;
        v12 = v29;
      }
      *(_QWORD *)(v34 + 16) = v27 + 1;
      *(_QWORD *)(v34 + 8 * v27 + 32) = v25;
      if (v19 == ++v16)
        goto LABEL_26;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

unint64_t sub_19C4E0FC0(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  result = sub_19C4D4494(a2, a5);
  if ((result & 1) == 0)
    goto LABEL_43;
  v17 = a2[2];
  if (v17)
  {
    if (sub_19C4D4494(a3, a6) && (sub_19C521328((int64_t)a2, (uint64_t)a3) & 1) != 0)
    {
      result = sub_19C521328((int64_t)a5, (uint64_t)a6);
      if ((result & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 16))
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        if (!a3[2])
        {
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        v18 = *(_QWORD *)(a1 + 32);
        v19 = a3[4];
        v20 = v18 * v19;
        if ((unsigned __int128)(v18 * (__int128)v19) >> 64 != (v18 * v19) >> 63)
        {
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        if (!*(_QWORD *)(a4 + 16))
        {
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        if (!a6[2])
        {
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        v21 = *(_QWORD *)(a4 + 32);
        v22 = a6[4];
        v23 = v21 * v22;
        if ((unsigned __int128)(v21 * (__int128)v22) >> 64 != (v21 * v22) >> 63)
        {
LABEL_54:
          __break(1u);
          return result;
        }
        v24 = &a7[v20];
        v25 = a2 + 4;
        v26 = 1;
        result = (unint64_t)&a8[v23];
        while (1)
        {
          v27 = *v25++;
          v28 = v26 * v27;
          if ((unsigned __int128)(v26 * (__int128)v27) >> 64 != (v26 * v27) >> 63)
            break;
          v26 = v28;
          if (!--v17)
          {
            if (result < (unint64_t)v24 || result >= (unint64_t)&v24[v28] || (_QWORD *)result != v24)
              return (unint64_t)memmove((void *)result, v24, 8 * v28);
            return result;
          }
        }
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
    }
    result = sub_19C4E68E8(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
    if ((result & 1) == 0)
    {
      v48 = sub_19C520070(a1, (uint64_t)a2, (uint64_t)a3);
      v46 = v29;
      v31 = v30;
      result = sub_19C520070(a4, (uint64_t)a5, (uint64_t)a6);
      v49 = result;
      v47 = v33;
      v34 = a2[4];
      if (v34 < 0)
      {
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      v35 = v32;
      if (!v34)
      {
LABEL_32:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v36 = a1;
      if (!*(_QWORD *)(a1 + 16))
        goto LABEL_45;
      if (!a3[2])
      {
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      if (!*(_QWORD *)(a4 + 16))
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      if (!a6[2])
      {
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      v37 = a7;
      v38 = a3;
      v39 = 0;
      v40 = *(_QWORD *)(v36 + 32);
      v41 = v38[4];
      v42 = *(_QWORD *)(a4 + 32);
      v43 = a6[4];
      while (1)
      {
        v44 = v40 + v39;
        if (__OFADD__(v40, v39))
          break;
        if ((unsigned __int128)(v44 * (__int128)v41) >> 64 != (v44 * v41) >> 63)
          goto LABEL_39;
        v45 = v42 + v39;
        if (__OFADD__(v42, v39))
          goto LABEL_40;
        if ((unsigned __int128)(v45 * (__int128)v43) >> 64 != (v45 * v43) >> 63)
          goto LABEL_41;
        ++v39;
        result = sub_19C4E0FC0(v48, v46, v31, v49, v47, v35, &v37[v44 * v41], &a8[v45 * v43]);
        if (v34 == v39)
          goto LABEL_32;
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
  }
  else if (a8 < a7 || a7 + 1 <= a8 || a8 != a7)
  {
    *a8 = *a7;
  }
  return result;
}

unint64_t sub_19C4E12E0(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _DWORD *a7, _DWORD *a8)
{
  unint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  unint64_t v50;

  result = sub_19C4D4494(a2, a5);
  if ((result & 1) == 0)
    goto LABEL_44;
  v17 = a2[2];
  if (v17)
  {
    if (sub_19C4D4494(a3, a6) && (sub_19C521328((int64_t)a2, (uint64_t)a3) & 1) != 0)
    {
      result = sub_19C521328((int64_t)a5, (uint64_t)a6);
      if ((result & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 16))
        {
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        if (!a3[2])
        {
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
        v18 = *(_QWORD *)(a1 + 32);
        v19 = a3[4];
        v20 = v18 * v19;
        if ((unsigned __int128)(v18 * (__int128)v19) >> 64 != (v18 * v19) >> 63)
        {
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        if (!*(_QWORD *)(a4 + 16))
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        if (!a6[2])
        {
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        v21 = *(_QWORD *)(a4 + 32);
        v22 = a6[4];
        v23 = v21 * v22;
        if ((unsigned __int128)(v21 * (__int128)v22) >> 64 != (v21 * v22) >> 63)
        {
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        v24 = &a7[v20];
        v25 = a2 + 4;
        v26 = 1;
        result = (unint64_t)&a8[v23];
        while (1)
        {
          v27 = *v25++;
          v28 = v26 * v27;
          if ((unsigned __int128)(v26 * (__int128)v27) >> 64 != (v26 * v27) >> 63)
            break;
          v26 = v28;
          if (!--v17)
          {
            if (result < (unint64_t)v24 || result >= (unint64_t)&v24[v28] || (_DWORD *)result != v24)
              return (unint64_t)memmove((void *)result, v24, 4 * v28);
            return result;
          }
        }
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
    }
    result = sub_19C4E6A74(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
    if ((result & 1) == 0)
    {
      result = sub_19C4E3B30(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
      if ((result & 1) == 0)
      {
        v47 = a7;
        v48 = a8;
        v29 = a1;
        v49 = sub_19C520070(a1, (uint64_t)a2, (uint64_t)a3);
        v31 = v30;
        v33 = v32;
        result = sub_19C520070(a4, (uint64_t)a5, (uint64_t)a6);
        v50 = result;
        v36 = a2[4];
        if (v36 < 0)
        {
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        v37 = v34;
        v38 = v35;
        if (!v36)
        {
LABEL_33:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        if (!*(_QWORD *)(v29 + 16))
          goto LABEL_52;
        if (!a3[2])
        {
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        if (!*(_QWORD *)(a4 + 16))
        {
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        if (!a6[2])
        {
LABEL_55:
          __break(1u);
          return result;
        }
        v39 = a6;
        v40 = 0;
        v41 = *(_QWORD *)(v29 + 32);
        v42 = a3[4];
        v43 = *(_QWORD *)(a4 + 32);
        v44 = v39[4];
        while (1)
        {
          v45 = v41 + v40;
          if (__OFADD__(v41, v40))
            break;
          if ((unsigned __int128)(v45 * (__int128)v42) >> 64 != (v45 * v42) >> 63)
            goto LABEL_40;
          v46 = v43 + v40;
          if (__OFADD__(v43, v40))
            goto LABEL_41;
          if ((unsigned __int128)(v46 * (__int128)v44) >> 64 != (v46 * v44) >> 63)
            goto LABEL_42;
          ++v40;
          result = sub_19C4E12E0(v49, v31, v33, v50, v37, v38, &v47[v45 * v42], &v48[v46 * v44]);
          if (v36 == v40)
            goto LABEL_33;
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
    }
  }
  else if (a8 < a7 || a7 + 1 <= a8 || a8 != a7)
  {
    *a8 = *a7;
  }
  return result;
}

unint64_t sub_19C4E1634(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _WORD *a7, _WORD *a8)
{
  unint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  uint64_t v49;
  unint64_t v50;

  result = sub_19C4D4494(a2, a5);
  if ((result & 1) == 0)
    goto LABEL_44;
  v17 = a2[2];
  if (v17)
  {
    if (sub_19C4D4494(a3, a6) && (sub_19C521328((int64_t)a2, (uint64_t)a3) & 1) != 0)
    {
      result = sub_19C521328((int64_t)a5, (uint64_t)a6);
      if ((result & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 16))
        {
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        if (!a3[2])
        {
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
        v18 = *(_QWORD *)(a1 + 32);
        v19 = a3[4];
        v20 = v18 * v19;
        if ((unsigned __int128)(v18 * (__int128)v19) >> 64 != (v18 * v19) >> 63)
        {
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        if (!*(_QWORD *)(a4 + 16))
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        if (!a6[2])
        {
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        v21 = *(_QWORD *)(a4 + 32);
        v22 = a6[4];
        v23 = v21 * v22;
        if ((unsigned __int128)(v21 * (__int128)v22) >> 64 != (v21 * v22) >> 63)
        {
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        v24 = &a7[v20];
        v25 = a2 + 4;
        v26 = 1;
        result = (unint64_t)&a8[v23];
        while (1)
        {
          v27 = *v25++;
          v28 = v26 * v27;
          if ((unsigned __int128)(v26 * (__int128)v27) >> 64 != (v26 * v27) >> 63)
            break;
          v26 = v28;
          if (!--v17)
          {
            if (result < (unint64_t)v24 || result >= (unint64_t)&v24[v28] || (_WORD *)result != v24)
              return (unint64_t)memmove((void *)result, v24, 2 * v28);
            return result;
          }
        }
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
    }
    result = sub_19C4E6C00(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
    if ((result & 1) == 0)
    {
      result = sub_19C4E3ECC(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
      if ((result & 1) == 0)
      {
        v47 = a7;
        v48 = a8;
        v29 = a1;
        v49 = sub_19C520070(a1, (uint64_t)a2, (uint64_t)a3);
        v31 = v30;
        v33 = v32;
        result = sub_19C520070(a4, (uint64_t)a5, (uint64_t)a6);
        v50 = result;
        v36 = a2[4];
        if (v36 < 0)
        {
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        v37 = v34;
        v38 = v35;
        if (!v36)
        {
LABEL_33:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        if (!*(_QWORD *)(v29 + 16))
          goto LABEL_52;
        if (!a3[2])
        {
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        if (!*(_QWORD *)(a4 + 16))
        {
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        if (!a6[2])
        {
LABEL_55:
          __break(1u);
          return result;
        }
        v39 = a6;
        v40 = 0;
        v41 = *(_QWORD *)(v29 + 32);
        v42 = a3[4];
        v43 = *(_QWORD *)(a4 + 32);
        v44 = v39[4];
        while (1)
        {
          v45 = v41 + v40;
          if (__OFADD__(v41, v40))
            break;
          if ((unsigned __int128)(v45 * (__int128)v42) >> 64 != (v45 * v42) >> 63)
            goto LABEL_40;
          v46 = v43 + v40;
          if (__OFADD__(v43, v40))
            goto LABEL_41;
          if ((unsigned __int128)(v46 * (__int128)v44) >> 64 != (v46 * v44) >> 63)
            goto LABEL_42;
          ++v40;
          result = sub_19C4E1634(v49, v31, v33, v50, v37, v38, &v47[v45 * v42], &v48[v46 * v44]);
          if (v36 == v40)
            goto LABEL_33;
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
    }
  }
  else if (a8 < a7 || a7 + 1 <= a8 || a8 != a7)
  {
    *a8 = *a7;
  }
  return result;
}

unint64_t sub_19C4E1988(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _DWORD *a7, _DWORD *a8)
{
  unint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  unint64_t v50;

  result = sub_19C4D4494(a2, a5);
  if ((result & 1) == 0)
    goto LABEL_44;
  v17 = a2[2];
  if (v17)
  {
    if (sub_19C4D4494(a3, a6) && (sub_19C521328((int64_t)a2, (uint64_t)a3) & 1) != 0)
    {
      result = sub_19C521328((int64_t)a5, (uint64_t)a6);
      if ((result & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 16))
        {
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        if (!a3[2])
        {
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
        v18 = *(_QWORD *)(a1 + 32);
        v19 = a3[4];
        v20 = v18 * v19;
        if ((unsigned __int128)(v18 * (__int128)v19) >> 64 != (v18 * v19) >> 63)
        {
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        if (!*(_QWORD *)(a4 + 16))
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        if (!a6[2])
        {
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        v21 = *(_QWORD *)(a4 + 32);
        v22 = a6[4];
        v23 = v21 * v22;
        if ((unsigned __int128)(v21 * (__int128)v22) >> 64 != (v21 * v22) >> 63)
        {
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        v24 = &a7[v20];
        v25 = a2 + 4;
        v26 = 1;
        result = (unint64_t)&a8[v23];
        while (1)
        {
          v27 = *v25++;
          v28 = v26 * v27;
          if ((unsigned __int128)(v26 * (__int128)v27) >> 64 != (v26 * v27) >> 63)
            break;
          v26 = v28;
          if (!--v17)
          {
            if (result < (unint64_t)v24 || result >= (unint64_t)&v24[v28] || (_DWORD *)result != v24)
              return (unint64_t)memmove((void *)result, v24, 4 * v28);
            return result;
          }
        }
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
    }
    result = sub_19C4E6A74(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
    if ((result & 1) == 0)
    {
      result = sub_19C4E4268(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
      if ((result & 1) == 0)
      {
        v47 = a7;
        v48 = a8;
        v29 = a1;
        v49 = sub_19C520070(a1, (uint64_t)a2, (uint64_t)a3);
        v31 = v30;
        v33 = v32;
        result = sub_19C520070(a4, (uint64_t)a5, (uint64_t)a6);
        v50 = result;
        v36 = a2[4];
        if (v36 < 0)
        {
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        v37 = v34;
        v38 = v35;
        if (!v36)
        {
LABEL_33:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        if (!*(_QWORD *)(v29 + 16))
          goto LABEL_52;
        if (!a3[2])
        {
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        if (!*(_QWORD *)(a4 + 16))
        {
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        if (!a6[2])
        {
LABEL_55:
          __break(1u);
          return result;
        }
        v39 = a6;
        v40 = 0;
        v41 = *(_QWORD *)(v29 + 32);
        v42 = a3[4];
        v43 = *(_QWORD *)(a4 + 32);
        v44 = v39[4];
        while (1)
        {
          v45 = v41 + v40;
          if (__OFADD__(v41, v40))
            break;
          if ((unsigned __int128)(v45 * (__int128)v42) >> 64 != (v45 * v42) >> 63)
            goto LABEL_40;
          v46 = v43 + v40;
          if (__OFADD__(v43, v40))
            goto LABEL_41;
          if ((unsigned __int128)(v46 * (__int128)v44) >> 64 != (v46 * v44) >> 63)
            goto LABEL_42;
          ++v40;
          result = sub_19C4E1988(v49, v31, v33, v50, v37, v38, &v47[v45 * v42], &v48[v46 * v44]);
          if (v36 == v40)
            goto LABEL_33;
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
    }
  }
  else if (a8 < a7 || a7 + 1 <= a8 || a8 != a7)
  {
    *a8 = *a7;
  }
  return result;
}

uint64_t sub_19C4E1CDC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t ObjectType;
  _UNKNOWN **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD v15[6];

  v3 = v2;
  v6 = v2[1];
  ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(ObjectType, v6) & 1) != 0
    && swift_isUniquelyReferenced_nonNull())
  {
    v8 = (_UNKNOWN **)v2[1];
  }
  else
  {
    v9 = v2[1];
    v10 = swift_unknownObjectRetain();
    v11 = sub_19C4E9FB4(v10, v9, 0, MEMORY[0x1E0DEB070], (uint64_t)sub_19C4EA6E4, &qword_1EE4234B0, sub_19C5A8470);
    swift_unknownObjectRelease_n();
    v8 = &off_1E3D456D0;
    *v3 = v11;
    v3[1] = (uint64_t)&off_1E3D456D0;
  }
  v12 = swift_getObjectType();
  MEMORY[0x1E0C80A78](v12);
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v13 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v8[5];
  swift_unknownObjectRetain();
  v13(sub_19C4EA6C8, v15, MEMORY[0x1E0DEE9C0] + 8, v12, v8);
  return swift_unknownObjectRelease();
}

uint64_t sub_19C4E1E24(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t ObjectType;
  _UNKNOWN **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD v15[6];

  v3 = v2;
  v6 = v2[1];
  ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(ObjectType, v6) & 1) != 0
    && swift_isUniquelyReferenced_nonNull())
  {
    v8 = (_UNKNOWN **)v2[1];
  }
  else
  {
    v9 = v2[1];
    v10 = swift_unknownObjectRetain();
    v11 = sub_19C4E9FB4(v10, v9, 0, MEMORY[0x1E0DEB188], (uint64_t)sub_19C4EA608, &qword_1EE423498, sub_19C5A8608);
    swift_unknownObjectRelease_n();
    v8 = &off_1E3D456D0;
    *v3 = v11;
    v3[1] = (uint64_t)&off_1E3D456D0;
  }
  v12 = swift_getObjectType();
  MEMORY[0x1E0C80A78](v12);
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v13 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v8[5];
  swift_unknownObjectRetain();
  v13(sub_19C4EA5EC, v15, MEMORY[0x1E0DEE9C0] + 8, v12, v8);
  return swift_unknownObjectRelease();
}

uint64_t sub_19C4E1F6C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t ObjectType;
  _UNKNOWN **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD v15[6];

  v3 = v2;
  v6 = v2[1];
  ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(ObjectType, v6) & 1) != 0
    && swift_isUniquelyReferenced_nonNull())
  {
    v8 = (_UNKNOWN **)v2[1];
  }
  else
  {
    v9 = v2[1];
    v10 = swift_unknownObjectRetain();
    v11 = sub_19C4E9FB4(v10, v9, 0, MEMORY[0x1E0DEE290], (uint64_t)sub_19C4EA570, &qword_1EE423480, sub_19C5A87A0);
    swift_unknownObjectRelease_n();
    v8 = &off_1E3D456D0;
    *v3 = v11;
    v3[1] = (uint64_t)&off_1E3D456D0;
  }
  v12 = swift_getObjectType();
  MEMORY[0x1E0C80A78](v12);
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v13 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v8[5];
  swift_unknownObjectRetain();
  v13(sub_19C4EA554, v15, MEMORY[0x1E0DEE9C0] + 8, v12, v8);
  return swift_unknownObjectRelease();
}

uint64_t sub_19C4E20B4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t ObjectType;
  _UNKNOWN **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD v15[6];

  v3 = v2;
  v6 = v2[1];
  ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(ObjectType, v6) & 1) != 0
    && swift_isUniquelyReferenced_nonNull())
  {
    v8 = (_UNKNOWN **)v2[1];
  }
  else
  {
    v9 = v2[1];
    v10 = swift_unknownObjectRetain();
    v11 = sub_19C4E9FB4(v10, v9, 0, MEMORY[0x1E0DEDBC8], (uint64_t)sub_19C4EA4B8, &qword_1EE423468, sub_19C5A8938);
    swift_unknownObjectRelease_n();
    v8 = &off_1E3D456D0;
    *v3 = v11;
    v3[1] = (uint64_t)&off_1E3D456D0;
  }
  v12 = swift_getObjectType();
  MEMORY[0x1E0C80A78](v12);
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v13 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v8[5];
  swift_unknownObjectRetain();
  v13(sub_19C4EABA4, v15, MEMORY[0x1E0DEE9C0] + 8, v12, v8);
  return swift_unknownObjectRelease();
}

uint64_t sub_19C4E21FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  id v33;
  void *v34;
  _QWORD v35[8];
  uint64_t v36;
  uint64_t v37;
  uint64_t aBlock;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  void *v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  v35[7] = v4 + 16;
  *(_QWORD *)(v4 + 24) = a2;
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  swift_unknownObjectRetain();
  swift_retain();
  v7 = v6(ObjectType, a2);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  v37 = v4;
  if (v8)
  {
    v35[6] = a1;
    aBlock = MEMORY[0x1E0DEE9D8];
    sub_19CAA9FE0();
    v10 = 0;
    do
    {
      v11 = v10 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)(v7 + 8 * v10 + 32));
      sub_19CAA9FBC();
      sub_19CAAA004();
      sub_19CAAA010();
      sub_19CAA9FC8();
      v10 = v11;
    }
    while (v8 != v11);
    v36 = aBlock;
    swift_bridgeObjectRelease();
    v4 = v37;
    v9 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v36 = MEMORY[0x1E0DEE9D8];
  }
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    aBlock = v9;
    sub_19CAA9FE0();
    v14 = 0;
    do
    {
      v15 = v14 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)(v12 + 8 * v14 + 32));
      sub_19CAA9FBC();
      sub_19CAAA004();
      sub_19CAAA010();
      sub_19CAA9FC8();
      v14 = v15;
    }
    while (v13 != v15);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4234A0);
  v16 = swift_dynamicCastClass();
  if (v16)
  {
    v17 = *(void **)(v16 + 16);
    v18 = objc_allocWithZone((Class)MLMultiArray);
    sub_19C4E8EF8();
    v19 = v17;
    v20 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v21 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v42 = sub_19C4EA62C;
    v43 = v4;
    aBlock = MEMORY[0x1E0C809B0];
    v39 = 1107296256;
    v40 = sub_19C4E68A0;
    v41 = &block_descriptor_31;
    v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v23 = objc_msgSend(v18, sel_initWithPixelBuffer_shape_strides_mutableShapedBufferProvider_, v19, v20, v21, v22);
    _Block_release(v22);
    swift_unknownObjectRelease();
    swift_release_n();

LABEL_13:
    return (uint64_t)v23;
  }
  swift_beginAccess();
  v24 = *(_QWORD *)(v4 + 24);
  v25 = swift_getObjectType();
  v26 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
  swift_unknownObjectRetain();
  v27 = v26(v25, v24);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v25, v24);
  v35[2] = sub_19C4E92FC;
  v35[3] = 0;
  v35[4] = v27;
  v35[5] = MEMORY[0x1E0C80A78](v28);
  v29 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t))(v24 + 32);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4234A8);
  v29(&aBlock, sub_19C4EA654, v35, v30, v25, v24);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v32 = aBlock;
  if (aBlock)
  {
    v33 = objc_allocWithZone((Class)MLMultiArray);
    sub_19C4E8EF8();
    v20 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v21 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v42 = sub_19C4EA62C;
    v43 = v37;
    aBlock = MEMORY[0x1E0C809B0];
    v39 = 1107296256;
    v40 = sub_19C4E68A0;
    v41 = &block_descriptor_28;
    v34 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v23 = objc_msgSend(v33, sel_initWithBytesNoCopy_shape_dataType_strides_mutableShapedBufferProvider_, v32, v20, 65600, v21, v34);
    _Block_release(v34);
    swift_unknownObjectRelease();
    swift_release_n();
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_19C4E2710(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t *__return_ptr, _QWORD *(*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, _QWORD *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  id v33;
  void *v34;
  _QWORD v35[8];
  uint64_t v36;
  uint64_t v37;
  uint64_t aBlock;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  void *v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  v35[7] = v4 + 16;
  *(_QWORD *)(v4 + 24) = a2;
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  swift_unknownObjectRetain();
  swift_retain();
  v7 = v6(ObjectType, a2);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  v37 = v4;
  if (v8)
  {
    v35[6] = a1;
    aBlock = MEMORY[0x1E0DEE9D8];
    sub_19CAA9FE0();
    v10 = 0;
    do
    {
      v11 = v10 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)(v7 + 8 * v10 + 32));
      sub_19CAA9FBC();
      sub_19CAAA004();
      sub_19CAAA010();
      sub_19CAA9FC8();
      v10 = v11;
    }
    while (v8 != v11);
    v36 = aBlock;
    swift_bridgeObjectRelease();
    v4 = v37;
    v9 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v36 = MEMORY[0x1E0DEE9D8];
  }
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    aBlock = v9;
    sub_19CAA9FE0();
    v14 = 0;
    do
    {
      v15 = v14 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)(v12 + 8 * v14 + 32));
      sub_19CAA9FBC();
      sub_19CAAA004();
      sub_19CAAA010();
      sub_19CAA9FC8();
      v14 = v15;
    }
    while (v13 != v15);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423488);
  v16 = swift_dynamicCastClass();
  if (v16)
  {
    v17 = *(void **)(v16 + 16);
    v18 = objc_allocWithZone((Class)MLMultiArray);
    sub_19C4E8EF8();
    v19 = v17;
    v20 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v21 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v42 = sub_19C4EA594;
    v43 = v4;
    aBlock = MEMORY[0x1E0C809B0];
    v39 = 1107296256;
    v40 = sub_19C4E68A0;
    v41 = &block_descriptor_22;
    v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v23 = objc_msgSend(v18, sel_initWithPixelBuffer_shape_strides_mutableShapedBufferProvider_, v19, v20, v21, v22);
    _Block_release(v22);
    swift_unknownObjectRelease();
    swift_release_n();

LABEL_13:
    return (uint64_t)v23;
  }
  swift_beginAccess();
  v24 = *(_QWORD *)(v4 + 24);
  v25 = swift_getObjectType();
  v26 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
  swift_unknownObjectRetain();
  v27 = v26(v25, v24);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v25, v24);
  v35[2] = sub_19C4EABBC;
  v35[3] = 0;
  v35[4] = v27;
  v35[5] = MEMORY[0x1E0C80A78](v28);
  v29 = *(void (**)(uint64_t *__return_ptr, _QWORD *(*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, _QWORD *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t))(v24 + 32);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423490);
  v29(&aBlock, sub_19C4E9F74, v35, v30, v25, v24);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v32 = aBlock;
  if (aBlock)
  {
    v33 = objc_allocWithZone((Class)MLMultiArray);
    sub_19C4E8EF8();
    v20 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v21 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v42 = sub_19C4EA594;
    v43 = v37;
    aBlock = MEMORY[0x1E0C809B0];
    v39 = 1107296256;
    v40 = sub_19C4E68A0;
    v41 = &block_descriptor_19;
    v34 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v23 = objc_msgSend(v33, sel_initWithBytesNoCopy_shape_dataType_strides_mutableShapedBufferProvider_, v32, v20, 65568, v21, v34);
    _Block_release(v34);
    swift_unknownObjectRelease();
    swift_release_n();
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_19C4E2C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  id v33;
  void *v34;
  _QWORD v35[8];
  uint64_t v36;
  uint64_t v37;
  uint64_t aBlock;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  void *v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  v35[7] = v4 + 16;
  *(_QWORD *)(v4 + 24) = a2;
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  swift_unknownObjectRetain();
  swift_retain();
  v7 = v6(ObjectType, a2);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  v37 = v4;
  if (v8)
  {
    v35[6] = a1;
    aBlock = MEMORY[0x1E0DEE9D8];
    sub_19CAA9FE0();
    v10 = 0;
    do
    {
      v11 = v10 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)(v7 + 8 * v10 + 32));
      sub_19CAA9FBC();
      sub_19CAAA004();
      sub_19CAAA010();
      sub_19CAA9FC8();
      v10 = v11;
    }
    while (v8 != v11);
    v36 = aBlock;
    swift_bridgeObjectRelease();
    v4 = v37;
    v9 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v36 = MEMORY[0x1E0DEE9D8];
  }
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    aBlock = v9;
    sub_19CAA9FE0();
    v14 = 0;
    do
    {
      v15 = v14 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)(v12 + 8 * v14 + 32));
      sub_19CAA9FBC();
      sub_19CAAA004();
      sub_19CAAA010();
      sub_19CAA9FC8();
      v14 = v15;
    }
    while (v13 != v15);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424170);
  v16 = swift_dynamicCastClass();
  if (v16)
  {
    v17 = *(void **)(v16 + 16);
    v18 = objc_allocWithZone((Class)MLMultiArray);
    sub_19C4E8EF8();
    v19 = v17;
    v20 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v21 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v42 = sub_19C4EA4DC;
    v43 = v4;
    aBlock = MEMORY[0x1E0C809B0];
    v39 = 1107296256;
    v40 = sub_19C4E68A0;
    v41 = &block_descriptor_13;
    v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v23 = objc_msgSend(v18, sel_initWithPixelBuffer_shape_strides_mutableShapedBufferProvider_, v19, v20, v21, v22);
    _Block_release(v22);
    swift_unknownObjectRelease();
    swift_release_n();

LABEL_13:
    return (uint64_t)v23;
  }
  swift_beginAccess();
  v24 = *(_QWORD *)(v4 + 24);
  v25 = swift_getObjectType();
  v26 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
  swift_unknownObjectRetain();
  v27 = v26(v25, v24);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v25, v24);
  v35[2] = sub_19C4EABBC;
  v35[3] = 0;
  v35[4] = v27;
  v35[5] = MEMORY[0x1E0C80A78](v28);
  v29 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t))(v24 + 32);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423478);
  v29(&aBlock, sub_19C4EA504, v35, v30, v25, v24);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v32 = aBlock;
  if (aBlock)
  {
    v33 = objc_allocWithZone((Class)MLMultiArray);
    sub_19C4E8EF8();
    v20 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v21 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v42 = sub_19C4EA4DC;
    v43 = v37;
    aBlock = MEMORY[0x1E0C809B0];
    v39 = 1107296256;
    v40 = sub_19C4E68A0;
    v41 = &block_descriptor_10;
    v34 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v23 = objc_msgSend(v33, sel_initWithBytesNoCopy_shape_dataType_strides_mutableShapedBufferProvider_, v32, v20, 65552, v21, v34);
    _Block_release(v34);
    swift_unknownObjectRelease();
    swift_release_n();
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_19C4E3138(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t *__return_ptr, _QWORD *(*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, _QWORD *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  id v33;
  void *v34;
  _QWORD v35[8];
  uint64_t v36;
  uint64_t v37;
  uint64_t aBlock;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  void *v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  v35[7] = v4 + 16;
  *(_QWORD *)(v4 + 24) = a2;
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  swift_unknownObjectRetain();
  swift_retain();
  v7 = v6(ObjectType, a2);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  v37 = v4;
  if (v8)
  {
    v35[6] = a1;
    aBlock = MEMORY[0x1E0DEE9D8];
    sub_19CAA9FE0();
    v10 = 0;
    do
    {
      v11 = v10 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)(v7 + 8 * v10 + 32));
      sub_19CAA9FBC();
      sub_19CAAA004();
      sub_19CAAA010();
      sub_19CAA9FC8();
      v10 = v11;
    }
    while (v8 != v11);
    v36 = aBlock;
    swift_bridgeObjectRelease();
    v4 = v37;
    v9 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v36 = MEMORY[0x1E0DEE9D8];
  }
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    aBlock = v9;
    sub_19CAA9FE0();
    v14 = 0;
    do
    {
      v15 = v14 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)(v12 + 8 * v14 + 32));
      sub_19CAA9FBC();
      sub_19CAAA004();
      sub_19CAAA010();
      sub_19CAA9FC8();
      v14 = v15;
    }
    while (v13 != v15);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423458);
  v16 = swift_dynamicCastClass();
  if (v16)
  {
    v17 = *(void **)(v16 + 16);
    v18 = objc_allocWithZone((Class)MLMultiArray);
    sub_19C4E8EF8();
    v19 = v17;
    v20 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v21 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v42 = sub_19C4E9F4C;
    v43 = v4;
    aBlock = MEMORY[0x1E0C809B0];
    v39 = 1107296256;
    v40 = sub_19C4E68A0;
    v41 = &block_descriptor_4;
    v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v23 = objc_msgSend(v18, sel_initWithPixelBuffer_shape_strides_mutableShapedBufferProvider_, v19, v20, v21, v22);
    _Block_release(v22);
    swift_unknownObjectRelease();
    swift_release_n();

LABEL_13:
    return (uint64_t)v23;
  }
  swift_beginAccess();
  v24 = *(_QWORD *)(v4 + 24);
  v25 = swift_getObjectType();
  v26 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
  swift_unknownObjectRetain();
  v27 = v26(v25, v24);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v25, v24);
  v35[2] = sub_19C4EABBC;
  v35[3] = 0;
  v35[4] = v27;
  v35[5] = MEMORY[0x1E0C80A78](v28);
  v29 = *(void (**)(uint64_t *__return_ptr, _QWORD *(*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, _QWORD *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t))(v24 + 32);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423460);
  v29(&aBlock, sub_19C4E9F74, v35, v30, v25, v24);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v32 = aBlock;
  if (aBlock)
  {
    v33 = objc_allocWithZone((Class)MLMultiArray);
    sub_19C4E8EF8();
    v20 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v21 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v42 = sub_19C4E9F4C;
    v43 = v37;
    aBlock = MEMORY[0x1E0C809B0];
    v39 = 1107296256;
    v40 = sub_19C4E68A0;
    v41 = &block_descriptor;
    v34 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v23 = objc_msgSend(v33, sel_initWithBytesNoCopy_shape_dataType_strides_mutableShapedBufferProvider_, v32, v20, 131104, v21, v34);
    _Block_release(v34);
    swift_unknownObjectRelease();
    swift_release_n();
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_19C4E364C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64x2_t v19;
  int64x2_t *v20;
  unint64_t v21;
  int64x2_t v22;
  int8x16_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t *v26;
  int64_t v27;
  int64_t v28;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = (uint64_t *)(result + 32);
    v6 = 1;
    v7 = (uint64_t *)(result + 32);
    v8 = *(_QWORD *)(result + 16);
    do
    {
      v9 = *v7++;
      v10 = v6 * v9;
      if ((unsigned __int128)(v6 * (__int128)v9) >> 64 != (v6 * v9) >> 63)
      {
        __break(1u);
        goto LABEL_26;
      }
      v6 = v10;
      --v8;
    }
    while (v8);
    if (!v10)
      return 0;
    v11 = 1;
    while (1)
    {
      v12 = *v5++;
      v13 = v11 * v12;
      if ((unsigned __int128)(v11 * (__int128)v12) >> 64 != (v11 * v12) >> 63)
        break;
      v11 = v13;
      if (!--v4)
      {
        if (!v13)
          return 0;
        goto LABEL_10;
      }
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_10:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = sub_19C4E0D80(v3, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
  {
    v16 = 1;
    goto LABEL_23;
  }
  v16 = *(_QWORD *)(v14 + 32);
  v17 = v15 - 1;
  if (v15 == 1)
    goto LABEL_23;
  if (v15 >= 5)
  {
    v18 = v17 & 0xFFFFFFFFFFFFFFFCLL | 1;
    v19 = vdupq_n_s64(v16);
    v20 = (int64x2_t *)(v14 + 56);
    v21 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    v22 = v19;
    do
    {
      v19 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v19, v20[-1]), (int8x16_t)v19, (int8x16_t)v20[-1]);
      v22 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v22, *v20), (int8x16_t)v22, *(int8x16_t *)v20);
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    v23 = vbslq_s8((int8x16_t)vcgtq_s64(v19, v22), (int8x16_t)v19, (int8x16_t)v22);
    v24 = vextq_s8(v23, v23, 8uLL).u64[0];
    v16 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v23.i64[0], v24), *(int8x8_t *)v23.i8, (int8x8_t)v24);
    if (v17 == (v17 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_23;
  }
  else
  {
    v18 = 1;
  }
  v25 = v15 - v18;
  v26 = (int64_t *)(v14 + 8 * v18 + 32);
  do
  {
    v28 = *v26++;
    v27 = v28;
    if (v16 <= v28)
      v16 = v27;
    --v25;
  }
  while (v25);
LABEL_23:
  result = swift_bridgeObjectRelease();
  if (v16 + 0x4000000000000000 >= 0)
    return 2 * v16;
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_19C4E37E8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64x2_t v19;
  int64x2_t *v20;
  unint64_t v21;
  int64x2_t v22;
  int8x16_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t *v26;
  int64_t v27;
  int64_t v28;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = (uint64_t *)(result + 32);
    v6 = 1;
    v7 = (uint64_t *)(result + 32);
    v8 = *(_QWORD *)(result + 16);
    do
    {
      v9 = *v7++;
      v10 = v6 * v9;
      if ((unsigned __int128)(v6 * (__int128)v9) >> 64 != (v6 * v9) >> 63)
      {
        __break(1u);
        goto LABEL_26;
      }
      v6 = v10;
      --v8;
    }
    while (v8);
    if (!v10)
      return 0;
    v11 = 1;
    while (1)
    {
      v12 = *v5++;
      v13 = v11 * v12;
      if ((unsigned __int128)(v11 * (__int128)v12) >> 64 != (v11 * v12) >> 63)
        break;
      v11 = v13;
      if (!--v4)
      {
        if (!v13)
          return 0;
        goto LABEL_10;
      }
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_10:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = sub_19C4E0D80(v3, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
  {
    v16 = 1;
    goto LABEL_23;
  }
  v16 = *(_QWORD *)(v14 + 32);
  v17 = v15 - 1;
  if (v15 == 1)
    goto LABEL_23;
  if (v15 >= 5)
  {
    v18 = v17 & 0xFFFFFFFFFFFFFFFCLL | 1;
    v19 = vdupq_n_s64(v16);
    v20 = (int64x2_t *)(v14 + 56);
    v21 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    v22 = v19;
    do
    {
      v19 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v19, v20[-1]), (int8x16_t)v19, (int8x16_t)v20[-1]);
      v22 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v22, *v20), (int8x16_t)v22, *(int8x16_t *)v20);
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    v23 = vbslq_s8((int8x16_t)vcgtq_s64(v19, v22), (int8x16_t)v19, (int8x16_t)v22);
    v24 = vextq_s8(v23, v23, 8uLL).u64[0];
    v16 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v23.i64[0], v24), *(int8x8_t *)v23.i8, (int8x8_t)v24);
    if (v17 == (v17 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_23;
  }
  else
  {
    v18 = 1;
  }
  v25 = v15 - v18;
  v26 = (int64_t *)(v14 + 8 * v18 + 32);
  do
  {
    v28 = *v26++;
    v27 = v28;
    if (v16 <= v28)
      v16 = v27;
    --v25;
  }
  while (v25);
LABEL_23:
  result = swift_bridgeObjectRelease();
  if ((unint64_t)(v16 - 0x2000000000000000) >> 62 == 3)
    return 4 * v16;
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_19C4E398C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64x2_t v19;
  int64x2_t *v20;
  unint64_t v21;
  int64x2_t v22;
  int8x16_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t *v26;
  int64_t v27;
  int64_t v28;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = (uint64_t *)(result + 32);
    v6 = 1;
    v7 = (uint64_t *)(result + 32);
    v8 = *(_QWORD *)(result + 16);
    do
    {
      v9 = *v7++;
      v10 = v6 * v9;
      if ((unsigned __int128)(v6 * (__int128)v9) >> 64 != (v6 * v9) >> 63)
      {
        __break(1u);
        goto LABEL_26;
      }
      v6 = v10;
      --v8;
    }
    while (v8);
    if (!v10)
      return 0;
    v11 = 1;
    while (1)
    {
      v12 = *v5++;
      v13 = v11 * v12;
      if ((unsigned __int128)(v11 * (__int128)v12) >> 64 != (v11 * v12) >> 63)
        break;
      v11 = v13;
      if (!--v4)
      {
        if (!v13)
          return 0;
        goto LABEL_10;
      }
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_10:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = sub_19C4E0D80(v3, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
  {
    v16 = 1;
    goto LABEL_23;
  }
  v16 = *(_QWORD *)(v14 + 32);
  v17 = v15 - 1;
  if (v15 == 1)
    goto LABEL_23;
  if (v15 >= 5)
  {
    v18 = v17 & 0xFFFFFFFFFFFFFFFCLL | 1;
    v19 = vdupq_n_s64(v16);
    v20 = (int64x2_t *)(v14 + 56);
    v21 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    v22 = v19;
    do
    {
      v19 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v19, v20[-1]), (int8x16_t)v19, (int8x16_t)v20[-1]);
      v22 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v22, *v20), (int8x16_t)v22, *(int8x16_t *)v20);
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    v23 = vbslq_s8((int8x16_t)vcgtq_s64(v19, v22), (int8x16_t)v19, (int8x16_t)v22);
    v24 = vextq_s8(v23, v23, 8uLL).u64[0];
    v16 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v23.i64[0], v24), *(int8x8_t *)v23.i8, (int8x8_t)v24);
    if (v17 == (v17 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_23;
  }
  else
  {
    v18 = 1;
  }
  v25 = v15 - v18;
  v26 = (int64_t *)(v14 + 8 * v18 + 32);
  do
  {
    v28 = *v26++;
    v27 = v28;
    if (v16 <= v28)
      v16 = v27;
    --v25;
  }
  while (v25);
LABEL_23:
  result = swift_bridgeObjectRelease();
  if ((unint64_t)(v16 - 0x1000000000000000) >> 61 == 7)
    return 8 * v16;
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_19C4E3B30(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  int v16;
  int v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  BNNSNDArrayDescriptor dest;
  BNNSNDArrayDescriptor src;
  _BYTE v24[113];
  _BYTE v25[9];
  _OWORD v26[9];
  __int128 v27;
  __int128 v28;
  _BYTE v29[144];
  __int128 v30;
  __int128 v31;
  _OWORD v32[9];
  __int128 v33;
  __int128 v34;
  _OWORD v35[9];
  __int128 v36;
  __int128 v37;
  _BYTE v38[8];
  _BYTE v39[8];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v16 = sub_19CAA9CBC();
  v17 = sub_19CAA9CBC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C4DCB94(a2, (uint64_t)a3, v16, (uint64_t)v24);
  sub_19C4DCE08((uint64_t)v24, (uint64_t)v32, &qword_1EE4233E8);
  if (sub_19C4DCDEC((uint64_t)v32) == 1)
    return 0;
  v21 = a8;
  v35[8] = v32[8];
  v36 = v33;
  v37 = v34;
  v35[4] = v32[4];
  v35[5] = v32[5];
  v35[6] = v32[6];
  v35[7] = v32[7];
  v35[0] = v32[0];
  v35[1] = v32[1];
  v35[2] = v32[2];
  v35[3] = v32[3];
  *(_QWORD *)&src.flags = *(_QWORD *)&v32[0];
  *(_OWORD *)src.size = *(_OWORD *)((char *)v35 + 8);
  *(_OWORD *)&src.size[2] = *(_OWORD *)((char *)&v35[1] + 8);
  *(_OWORD *)&src.size[4] = *(_OWORD *)((char *)&v35[2] + 8);
  *(_OWORD *)&src.size[6] = *(_OWORD *)((char *)&v35[3] + 8);
  *(_OWORD *)src.stride = *(_OWORD *)((char *)&v35[4] + 8);
  *(_OWORD *)&src.stride[2] = *(_OWORD *)((char *)&v35[5] + 8);
  *(_OWORD *)&src.stride[4] = *(_OWORD *)((char *)&v35[6] + 8);
  src.data_type = v33;
  *(_OWORD *)&src.stride[6] = *(_OWORD *)((char *)&v35[7] + 8);
  sub_19C4DCE08((uint64_t)&v36 + 8, (uint64_t)v38, &qword_1EE4233F0);
  sub_19C4DCE08((uint64_t)v38, (uint64_t)&src.table_data, &qword_1EE4233F0);
  src.table_data_type = v37;
  *(_QWORD *)&src.data_scale = *(_QWORD *)((char *)&v37 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C4DCB94(a5, (uint64_t)a6, v17, (uint64_t)v25);
  sub_19C4DCE08((uint64_t)v25, (uint64_t)v26, &qword_1EE4233E8);
  if (sub_19C4DCDEC((uint64_t)v26) == 1)
    return 0;
  *(_OWORD *)&v29[128] = v26[8];
  v30 = v27;
  v31 = v28;
  *(_OWORD *)&v29[64] = v26[4];
  *(_OWORD *)&v29[80] = v26[5];
  *(_OWORD *)&v29[96] = v26[6];
  *(_OWORD *)&v29[112] = v26[7];
  *(_OWORD *)v29 = v26[0];
  *(_OWORD *)&v29[16] = v26[1];
  *(_OWORD *)&v29[32] = v26[2];
  *(_OWORD *)&v29[48] = v26[3];
  *(_QWORD *)&dest.flags = *(_QWORD *)&v26[0];
  *(_OWORD *)dest.size = *(_OWORD *)&v29[8];
  *(_OWORD *)&dest.size[2] = *(_OWORD *)&v29[24];
  *(_OWORD *)&dest.size[4] = *(_OWORD *)&v29[40];
  *(_OWORD *)&dest.size[6] = *(_OWORD *)&v29[56];
  *(_OWORD *)dest.stride = *(_OWORD *)&v29[72];
  *(_OWORD *)&dest.stride[2] = *(_OWORD *)&v29[88];
  dest.data_type = v27;
  *(_OWORD *)&dest.stride[4] = *(_OWORD *)&v29[104];
  *(_OWORD *)&dest.stride[6] = *(_OWORD *)&v29[120];
  sub_19C4DCE08((uint64_t)&v30 + 8, (uint64_t)v39, &qword_1EE4233F0);
  sub_19C4DCE08((uint64_t)v39, (uint64_t)&dest.table_data, &qword_1EE4233F0);
  dest.table_data_type = v31;
  *(_QWORD *)&dest.data_scale = *(_QWORD *)((char *)&v31 + 4);
  v19 = (void *)(a7 + 4 * sub_19C552864(a1, a3));
  v20 = sub_19C552864(a4, a6);
  src.data = v19;
  dest.data = (void *)(v21 + 4 * v20);
  BNNSCopy(&dest, &src, 0);
  return 1;
}

uint64_t sub_19C4E3ECC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  int v16;
  int v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  BNNSNDArrayDescriptor dest;
  BNNSNDArrayDescriptor src;
  _BYTE v24[113];
  _BYTE v25[9];
  _OWORD v26[9];
  __int128 v27;
  __int128 v28;
  _BYTE v29[144];
  __int128 v30;
  __int128 v31;
  _OWORD v32[9];
  __int128 v33;
  __int128 v34;
  _OWORD v35[9];
  __int128 v36;
  __int128 v37;
  _BYTE v38[8];
  _BYTE v39[8];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v16 = sub_19CAA9D04();
  v17 = sub_19CAA9D04();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C4DCB94(a2, (uint64_t)a3, v16, (uint64_t)v24);
  sub_19C4DCE08((uint64_t)v24, (uint64_t)v32, &qword_1EE4233E8);
  if (sub_19C4DCDEC((uint64_t)v32) == 1)
    return 0;
  v21 = a8;
  v35[8] = v32[8];
  v36 = v33;
  v37 = v34;
  v35[4] = v32[4];
  v35[5] = v32[5];
  v35[6] = v32[6];
  v35[7] = v32[7];
  v35[0] = v32[0];
  v35[1] = v32[1];
  v35[2] = v32[2];
  v35[3] = v32[3];
  *(_QWORD *)&src.flags = *(_QWORD *)&v32[0];
  *(_OWORD *)src.size = *(_OWORD *)((char *)v35 + 8);
  *(_OWORD *)&src.size[2] = *(_OWORD *)((char *)&v35[1] + 8);
  *(_OWORD *)&src.size[4] = *(_OWORD *)((char *)&v35[2] + 8);
  *(_OWORD *)&src.size[6] = *(_OWORD *)((char *)&v35[3] + 8);
  *(_OWORD *)src.stride = *(_OWORD *)((char *)&v35[4] + 8);
  *(_OWORD *)&src.stride[2] = *(_OWORD *)((char *)&v35[5] + 8);
  *(_OWORD *)&src.stride[4] = *(_OWORD *)((char *)&v35[6] + 8);
  src.data_type = v33;
  *(_OWORD *)&src.stride[6] = *(_OWORD *)((char *)&v35[7] + 8);
  sub_19C4DCE08((uint64_t)&v36 + 8, (uint64_t)v38, &qword_1EE4233F0);
  sub_19C4DCE08((uint64_t)v38, (uint64_t)&src.table_data, &qword_1EE4233F0);
  src.table_data_type = v37;
  *(_QWORD *)&src.data_scale = *(_QWORD *)((char *)&v37 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C4DCB94(a5, (uint64_t)a6, v17, (uint64_t)v25);
  sub_19C4DCE08((uint64_t)v25, (uint64_t)v26, &qword_1EE4233E8);
  if (sub_19C4DCDEC((uint64_t)v26) == 1)
    return 0;
  *(_OWORD *)&v29[128] = v26[8];
  v30 = v27;
  v31 = v28;
  *(_OWORD *)&v29[64] = v26[4];
  *(_OWORD *)&v29[80] = v26[5];
  *(_OWORD *)&v29[96] = v26[6];
  *(_OWORD *)&v29[112] = v26[7];
  *(_OWORD *)v29 = v26[0];
  *(_OWORD *)&v29[16] = v26[1];
  *(_OWORD *)&v29[32] = v26[2];
  *(_OWORD *)&v29[48] = v26[3];
  *(_QWORD *)&dest.flags = *(_QWORD *)&v26[0];
  *(_OWORD *)dest.size = *(_OWORD *)&v29[8];
  *(_OWORD *)&dest.size[2] = *(_OWORD *)&v29[24];
  *(_OWORD *)&dest.size[4] = *(_OWORD *)&v29[40];
  *(_OWORD *)&dest.size[6] = *(_OWORD *)&v29[56];
  *(_OWORD *)dest.stride = *(_OWORD *)&v29[72];
  *(_OWORD *)&dest.stride[2] = *(_OWORD *)&v29[88];
  dest.data_type = v27;
  *(_OWORD *)&dest.stride[4] = *(_OWORD *)&v29[104];
  *(_OWORD *)&dest.stride[6] = *(_OWORD *)&v29[120];
  sub_19C4DCE08((uint64_t)&v30 + 8, (uint64_t)v39, &qword_1EE4233F0);
  sub_19C4DCE08((uint64_t)v39, (uint64_t)&dest.table_data, &qword_1EE4233F0);
  dest.table_data_type = v31;
  *(_QWORD *)&dest.data_scale = *(_QWORD *)((char *)&v31 + 4);
  v19 = (void *)(a7 + 2 * sub_19C552864(a1, a3));
  v20 = sub_19C552864(a4, a6);
  src.data = v19;
  dest.data = (void *)(v21 + 2 * v20);
  BNNSCopy(&dest, &src, 0);
  return 1;
}

uint64_t sub_19C4E4268(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  int v16;
  int v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  BNNSNDArrayDescriptor dest;
  BNNSNDArrayDescriptor src;
  _BYTE v24[113];
  _BYTE v25[9];
  _OWORD v26[9];
  __int128 v27;
  __int128 v28;
  _BYTE v29[144];
  __int128 v30;
  __int128 v31;
  _OWORD v32[9];
  __int128 v33;
  __int128 v34;
  _OWORD v35[9];
  __int128 v36;
  __int128 v37;
  _BYTE v38[8];
  _BYTE v39[8];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v16 = sub_19CAA9CD4();
  v17 = sub_19CAA9CD4();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C4DCB94(a2, (uint64_t)a3, v16, (uint64_t)v24);
  sub_19C4DCE08((uint64_t)v24, (uint64_t)v32, &qword_1EE4233E8);
  if (sub_19C4DCDEC((uint64_t)v32) == 1)
    return 0;
  v21 = a8;
  v35[8] = v32[8];
  v36 = v33;
  v37 = v34;
  v35[4] = v32[4];
  v35[5] = v32[5];
  v35[6] = v32[6];
  v35[7] = v32[7];
  v35[0] = v32[0];
  v35[1] = v32[1];
  v35[2] = v32[2];
  v35[3] = v32[3];
  *(_QWORD *)&src.flags = *(_QWORD *)&v32[0];
  *(_OWORD *)src.size = *(_OWORD *)((char *)v35 + 8);
  *(_OWORD *)&src.size[2] = *(_OWORD *)((char *)&v35[1] + 8);
  *(_OWORD *)&src.size[4] = *(_OWORD *)((char *)&v35[2] + 8);
  *(_OWORD *)&src.size[6] = *(_OWORD *)((char *)&v35[3] + 8);
  *(_OWORD *)src.stride = *(_OWORD *)((char *)&v35[4] + 8);
  *(_OWORD *)&src.stride[2] = *(_OWORD *)((char *)&v35[5] + 8);
  *(_OWORD *)&src.stride[4] = *(_OWORD *)((char *)&v35[6] + 8);
  src.data_type = v33;
  *(_OWORD *)&src.stride[6] = *(_OWORD *)((char *)&v35[7] + 8);
  sub_19C4DCE08((uint64_t)&v36 + 8, (uint64_t)v38, &qword_1EE4233F0);
  sub_19C4DCE08((uint64_t)v38, (uint64_t)&src.table_data, &qword_1EE4233F0);
  src.table_data_type = v37;
  *(_QWORD *)&src.data_scale = *(_QWORD *)((char *)&v37 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C4DCB94(a5, (uint64_t)a6, v17, (uint64_t)v25);
  sub_19C4DCE08((uint64_t)v25, (uint64_t)v26, &qword_1EE4233E8);
  if (sub_19C4DCDEC((uint64_t)v26) == 1)
    return 0;
  *(_OWORD *)&v29[128] = v26[8];
  v30 = v27;
  v31 = v28;
  *(_OWORD *)&v29[64] = v26[4];
  *(_OWORD *)&v29[80] = v26[5];
  *(_OWORD *)&v29[96] = v26[6];
  *(_OWORD *)&v29[112] = v26[7];
  *(_OWORD *)v29 = v26[0];
  *(_OWORD *)&v29[16] = v26[1];
  *(_OWORD *)&v29[32] = v26[2];
  *(_OWORD *)&v29[48] = v26[3];
  *(_QWORD *)&dest.flags = *(_QWORD *)&v26[0];
  *(_OWORD *)dest.size = *(_OWORD *)&v29[8];
  *(_OWORD *)&dest.size[2] = *(_OWORD *)&v29[24];
  *(_OWORD *)&dest.size[4] = *(_OWORD *)&v29[40];
  *(_OWORD *)&dest.size[6] = *(_OWORD *)&v29[56];
  *(_OWORD *)dest.stride = *(_OWORD *)&v29[72];
  *(_OWORD *)&dest.stride[2] = *(_OWORD *)&v29[88];
  dest.data_type = v27;
  *(_OWORD *)&dest.stride[4] = *(_OWORD *)&v29[104];
  *(_OWORD *)&dest.stride[6] = *(_OWORD *)&v29[120];
  sub_19C4DCE08((uint64_t)&v30 + 8, (uint64_t)v39, &qword_1EE4233F0);
  sub_19C4DCE08((uint64_t)v39, (uint64_t)&dest.table_data, &qword_1EE4233F0);
  dest.table_data_type = v31;
  *(_QWORD *)&dest.data_scale = *(_QWORD *)((char *)&v31 + 4);
  v19 = (void *)(a7 + 4 * sub_19C552864(a1, a3));
  v20 = sub_19C552864(a4, a6);
  src.data = v19;
  dest.data = (void *)(v21 + 4 * v20);
  BNNSCopy(&dest, &src, 0);
  return 1;
}

uint64_t MLSendableFeatureValue.type.getter()
{
  uint64_t v0;

  return ((uint64_t (*)(_QWORD))((char *)sub_19C4E4624 + 4 * byte_19CAE81A0[*(unsigned __int8 *)(v0 + 16)]))(*(_QWORD *)v0);
}

uint64_t sub_19C4E4624()
{
  return 5;
}

uint64_t sub_19C4E462C()
{
  return 2;
}

uint64_t sub_19C4E4634()
{
  return 6;
}

uint64_t sub_19C4E463C()
{
  return 1;
}

uint64_t sub_19C4E4644()
{
  return 3;
}

uint64_t sub_19C4E464C()
{
  return 7;
}

BOOL MLSendableFeatureValue.isUndefined.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 16) == 0;
}

uint64_t MLSendableFeatureValue.isScalar.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 16) < 5u) & (0x1Au >> *(_BYTE *)(v0 + 16));
}

uint64_t MLSendableFeatureValue.isShapedArray.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 16) < 0xDuLL) & (0x1A00u >> *(_BYTE *)(v0 + 16));
}

uint64_t MLSendableFeatureValue.integerValue.getter()
{
  _BYTE *v0;

  if (v0[16] == 1)
    return *(_QWORD *)v0;
  else
    return 0;
}

uint64_t MLSendableFeatureValue.float16Value.getter()
{
  unsigned __int16 *v0;
  int v1;
  int v2;
  BOOL v3;
  int v4;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 16);
  v3 = v2 == 2;
  v4 = v2 != 2;
  if (!v3)
    v1 = 0;
  return v1 | (v4 << 16);
}

uint64_t MLSendableFeatureValue.floatValue.getter()
{
  unsigned int *v0;
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v4;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 16);
  v3 = v2 == 3;
  v4 = v2 != 3;
  if (!v3)
    v1 = 0;
  return v1 | (v4 << 32);
}

uint64_t MLSendableFeatureValue.doubleValue.getter()
{
  _BYTE *v0;

  if (v0[16] == 4)
    return *(_QWORD *)v0;
  else
    return 0;
}

uint64_t MLSendableFeatureValue.stringValue.getter()
{
  uint64_t *v0;
  uint64_t v1;

  if (*((_BYTE *)v0 + 16) != 5)
    return 0;
  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLSendableFeatureValue.stringArrayValue.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 16) == 6)
    return swift_bridgeObjectRetain();
  else
    return 0;
}

uint64_t MLSendableFeatureValue.stringDictionaryValue.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 16) == 7)
    return swift_bridgeObjectRetain();
  else
    return 0;
}

uint64_t MLSendableFeatureValue.integerDictionaryValue.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 16) == 8)
    return swift_bridgeObjectRetain();
  else
    return 0;
}

void MLSendableFeatureValue.shapedArrayValue<A>(of:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;

  v7 = *(unsigned __int8 *)(v3 + 16);
  if (v7 == 12)
  {
    if (swift_dynamicCastMetatype())
    {
      swift_unknownObjectRetain();
      v8 = (uint64_t *)&unk_1EE423410;
      goto LABEL_11;
    }
  }
  else if (v7 == 11)
  {
    if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
    {
      swift_unknownObjectRetain();
      v8 = (uint64_t *)&unk_1EE423418;
      goto LABEL_11;
    }
  }
  else if (v7 == 9 && swift_dynamicCastMetatype())
  {
    swift_unknownObjectRetain();
    v8 = (uint64_t *)&unk_1EE423420;
LABEL_11:
    __swift_instantiateConcreteTypeFromMangledName(v8);
    type metadata accessor for MLShapedArray(0, a1, a2, v9);
    swift_dynamicCast();
    *(_OWORD *)a3 = v10;
    return;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
}

uint64_t MLSendableFeatureValue.init(undefined:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t MLSendableFeatureValue.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  *(_QWORD *)a2 = (int)result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

{
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 6;
  return result;
}

{
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 7;
  return result;
}

{
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 8;
  return result;
}

void MLSendableFeatureValue.init(_:)(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  *(_QWORD *)a1 = a2.n128_u16[0];
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
}

void MLSendableFeatureValue.init(_:)(uint64_t a1@<X8>, unsigned int a2@<S0>)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 3;
}

void MLSendableFeatureValue.init(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 4;
}

uint64_t MLSendableFeatureValue.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_BYTE *)(a3 + 16) = 5;
  return result;
}

uint64_t MLSendableFeatureValue.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_19C4E7BC0(a1);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 7;
  return result;
}

{
  _QWORD *v3;
  uint64_t result;

  v3 = sub_19C4E7D70(a1);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 8;
  return result;
}

uint64_t MLSendableFeatureValue.init<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for MLShapedArray(0, a1, a2, v6);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423420);
    result = swift_dynamicCast();
    v8 = v13;
    v9 = 9;
LABEL_9:
    *(_OWORD *)a3 = v8;
    *(_BYTE *)(a3 + 16) = v9;
    return result;
  }
  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for MLShapedArray(0, a1, a2, v10);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423428);
    result = swift_dynamicCast();
    v8 = v13;
    v9 = 10;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for MLShapedArray(0, a1, a2, v11);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423418);
    result = swift_dynamicCast();
    v8 = v13;
    v9 = 11;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for MLShapedArray(0, a1, a2, v12);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423410);
    result = swift_dynamicCast();
    v8 = v13;
    v9 = 12;
    goto LABEL_9;
  }
  sub_19CAA9F2C();
  swift_bridgeObjectRelease();
  sub_19CAAA3A0();
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  result = sub_19CAAA0B8();
  __break(1u);
  return result;
}

void MLSendableFeatureValue.init(_:)(void *a1@<X0>, _OWORD *a2@<X8>)
{
  char v4;
  unint64_t v5;
  id v6;
  void *v7;
  unint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  char v79;
  char v80;
  uint64_t v81;
  int64_t i;
  id v83;
  id v84;
  void *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  __int128 v95;
  uint64_t v96;
  _QWORD *v97;
  __int128 v98;
  uint64_t v99;
  _OWORD *v100;
  void *v101;
  int64_t v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE v111[40];
  id v112;
  __int128 v113;
  id v114;
  __int128 v115;
  __int128 v116;
  id v117[2];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  id v124;

  switch((unint64_t)objc_msgSend(a1, sel_type))
  {
    case 0uLL:
      v6 = objc_msgSend(a1, (SEL)&selRef_setAutomaticOutputBackingMode_);
      v7 = a1;
      v8 = (unint64_t)v6;

      v4 = 0;
      *a2 = v8;
      goto LABEL_4;
    case 1uLL:
      v9 = objc_msgSend(a1, sel_int64Value);
      v10 = a1;
      v11 = (unint64_t)v9;

      v4 = 1;
      *a2 = v11;
      goto LABEL_4;
    case 2uLL:
      objc_msgSend(a1, sel_doubleValue);
      v105 = v5;

      v4 = 4;
      *a2 = v105;
      goto LABEL_4;
    case 3uLL:
      v27 = a1;
      v28 = objc_msgSend(a1, sel_stringValue);
      v29 = sub_19CAA98FC();
      v31 = v30;

      *(_QWORD *)&v32 = v29;
      *((_QWORD *)&v32 + 1) = v31;
      v4 = 5;
      *a2 = v32;
      goto LABEL_4;
    case 5uLL:
      v33 = a1;
      v34 = objc_msgSend(a1, sel_multiArrayValue);
      if (!v34)
        goto LABEL_136;
      v35 = v34;
      v36 = (uint64_t)objc_msgSend(v34, sel_dataType);
      if (v36 > 65599)
      {
        if (v36 == 131104)
        {
          sub_19C4DEEC0(v35, (size_t *)&v121);

          v4 = 9;
          *a2 = v121;
          goto LABEL_4;
        }
        if (v36 == 65600)
        {
          sub_19C4DDD58(v35, (size_t *)&v121);

          v4 = 12;
          *a2 = v121;
          goto LABEL_4;
        }
      }
      else
      {
        if (v36 == 65552)
        {
          sub_19C4DE8F0(v35, (size_t *)&v121);

          v4 = 10;
          *a2 = v121;
          goto LABEL_4;
        }
        if (v36 == 65568)
        {
          sub_19C4DE328(v35, (size_t *)&v121);

          v4 = 11;
          *a2 = v121;
          goto LABEL_4;
        }
      }

      goto LABEL_3;
    case 6uLL:
      v101 = a1;
      v12 = objc_msgSend(a1, sel_dictionaryValue);
      sub_19C4E8EF8();
      v13 = sub_19CAA9800();

      v14 = v13 + 64;
      v15 = 1 << *(_BYTE *)(v13 + 32);
      v16 = -1;
      if (v15 < 64)
        v16 = ~(-1 << v15);
      v17 = v16 & *(_QWORD *)(v13 + 64);
      v18 = (unint64_t)(v15 + 63) >> 6;
      swift_bridgeObjectRetain_n();
      v19 = 0;
      v100 = a2;
      break;
    case 7uLL:
      v37 = a1;
      v38 = objc_msgSend(a1, sel_sequenceValue);
      if (!v38)
        goto LABEL_137;
      v39 = v38;
      if (objc_msgSend(v38, (SEL)&selRef_setAutomaticOutputBackingMode_) == (id)3)
      {
        v40 = objc_msgSend(v39, sel_stringValues);
        v41 = sub_19CAA99F8();

        v4 = 6;
        *a2 = (unint64_t)v41;
        goto LABEL_4;
      }

      goto LABEL_3;
    default:

      goto LABEL_3;
  }
  do
  {
    if (v17)
    {
      v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v21 = v20 | (v19 << 6);
    }
    else
    {
      v24 = v19 + 1;
      if (__OFADD__(v19, 1))
      {
        __break(1u);
        goto LABEL_124;
      }
      if (v24 >= v18)
        goto LABEL_70;
      v25 = *(_QWORD *)(v14 + 8 * v24);
      ++v19;
      if (!v25)
      {
        v19 = v24 + 1;
        if (v24 + 1 >= v18)
          goto LABEL_70;
        v25 = *(_QWORD *)(v14 + 8 * v19);
        if (!v25)
        {
          v19 = v24 + 2;
          if (v24 + 2 >= v18)
            goto LABEL_70;
          v25 = *(_QWORD *)(v14 + 8 * v19);
          if (!v25)
          {
            v19 = v24 + 3;
            if (v24 + 3 >= v18)
              goto LABEL_70;
            v25 = *(_QWORD *)(v14 + 8 * v19);
            if (!v25)
            {
              v19 = v24 + 4;
              if (v24 + 4 >= v18)
                goto LABEL_70;
              v25 = *(_QWORD *)(v14 + 8 * v19);
              if (!v25)
              {
                v26 = v24 + 5;
                if (v26 >= v18)
                {
LABEL_70:
                  swift_release();
                  swift_bridgeObjectRelease();
                  v54 = *(_QWORD *)(v13 + 16);
                  if (!v54)
                  {
                    swift_bridgeObjectRelease();
                    v64 = MEMORY[0x1E0DEE9D8];
                    goto LABEL_113;
                  }
                  v110 = MEMORY[0x1E0DEE9D8];
                  sub_19C557080(0, v54, 0);
                  v55 = sub_19C4E8E70(v13);
                  if ((v55 & 0x8000000000000000) == 0)
                  {
                    v57 = v55;
                    if (v55 < 1 << *(_BYTE *)(v13 + 32))
                    {
                      v58 = 0;
                      v99 = v13 + 80;
                      v104 = v13 + 64;
                      v106 = v13;
                      v102 = v54;
                      v103 = v56;
                      while (1)
                      {
                        v59 = v57 >> 6;
                        if ((*(_QWORD *)(v14 + 8 * (v57 >> 6)) & (1 << v57)) == 0)
                          goto LABEL_125;
                        if (*(_DWORD *)(v13 + 36) != v56)
                          goto LABEL_126;
                        sub_19C4E8F34(*(_QWORD *)(v13 + 48) + 40 * v57, (uint64_t)&v121);
                        v124 = *(id *)(*(_QWORD *)(v13 + 56) + 8 * v57);
                        v60 = v124;
                        sub_19C4E8F34((uint64_t)&v121, (uint64_t)&v118);
                        *((_QWORD *)&v120 + 1) = v60;
                        v115 = v118;
                        v116 = v119;
                        *(_OWORD *)v117 = v120;
                        v61 = v60;
                        sub_19C4E9028((uint64_t)&v121);
                        sub_19C4E8F34((uint64_t)&v115, (uint64_t)&v113);
                        v114 = v117[1];
                        swift_dynamicCast();
                        sub_19C4E8F34((uint64_t)&v115, (uint64_t)v111);
                        v112 = v117[1];
                        objc_msgSend(v117[1], sel_doubleValue);
                        v63 = v62;
                        sub_19C4E8F70((uint64_t)v111);
                        sub_19C4E9028((uint64_t)&v115);
                        v64 = v110;
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                        {
                          sub_19C557080(0, *(_QWORD *)(v110 + 16) + 1, 1);
                          v64 = v110;
                        }
                        v66 = *(_QWORD *)(v64 + 16);
                        v65 = *(_QWORD *)(v64 + 24);
                        if (v66 >= v65 >> 1)
                        {
                          sub_19C557080(v65 > 1, v66 + 1, 1);
                          v64 = v110;
                        }
                        *(_QWORD *)(v64 + 16) = v66 + 1;
                        v67 = (_QWORD *)(v64 + 24 * v66);
                        v67[4] = v108;
                        v67[5] = v109;
                        v67[6] = v63;
                        v13 = v106;
                        v68 = 1 << *(_BYTE *)(v106 + 32);
                        if ((uint64_t)v57 >= v68)
                          goto LABEL_127;
                        v14 = v104;
                        v69 = *(_QWORD *)(v104 + 8 * v59);
                        if ((v69 & (1 << v57)) == 0)
                          goto LABEL_128;
                        v56 = v103;
                        if (*(_DWORD *)(v106 + 36) != v103)
                          goto LABEL_129;
                        v70 = v69 & (-2 << (v57 & 0x3F));
                        if (v70)
                        {
                          v57 = __clz(__rbit64(v70)) | v57 & 0xFFFFFFFFFFFFFFC0;
                          v71 = v102;
                        }
                        else
                        {
                          v72 = v59 + 1;
                          v73 = (unint64_t)(v68 + 63) >> 6;
                          v71 = v102;
                          if (v59 + 1 >= v73)
                          {
LABEL_91:
                            v57 = 1 << *(_BYTE *)(v106 + 32);
                          }
                          else
                          {
                            v74 = *(_QWORD *)(v104 + 8 * v72);
                            if (!v74)
                            {
                              do
                              {
                                if (v73 - 2 == v59)
                                  goto LABEL_91;
                                v74 = *(_QWORD *)(v99 + 8 * v59++);
                              }
                              while (!v74);
                              v72 = v59 + 1;
                            }
                            v57 = __clz(__rbit64(v74)) + (v72 << 6);
                          }
                        }
                        if (++v58 == v71)
                          break;
                        if ((v57 & 0x8000000000000000) != 0 || (uint64_t)v57 >= v68)
                          goto LABEL_124;
                      }
                      swift_bridgeObjectRelease();
LABEL_113:
                      a2 = v100;
                      if (*(_QWORD *)(v64 + 16))
                      {
                        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE424150);
                        v93 = sub_19CAAA10C();
                      }
                      else
                      {
                        v93 = MEMORY[0x1E0DEE9E0];
                      }
                      *(_QWORD *)&v121 = v93;
                      v94 = (_QWORD *)swift_bridgeObjectRetain();
                      sub_19C4E8464(v94, 1, &v121);

                      swift_bridgeObjectRelease();
                      *(_QWORD *)&v95 = v121;
                      v4 = 7;
                      *v100 = v95;
                      goto LABEL_4;
                    }
                  }
LABEL_124:
                  __break(1u);
LABEL_125:
                  __break(1u);
LABEL_126:
                  __break(1u);
LABEL_127:
                  __break(1u);
LABEL_128:
                  __break(1u);
LABEL_129:
                  __break(1u);
LABEL_130:
                  __break(1u);
LABEL_131:
                  __break(1u);
LABEL_132:
                  __break(1u);
LABEL_133:
                  __break(1u);
                  goto LABEL_134;
                }
                v25 = *(_QWORD *)(v14 + 8 * v26);
                if (!v25)
                {
                  while (1)
                  {
                    v19 = v26 + 1;
                    if (__OFADD__(v26, 1))
                      break;
                    if (v19 >= v18)
                      goto LABEL_70;
                    v25 = *(_QWORD *)(v14 + 8 * v19);
                    ++v26;
                    if (v25)
                      goto LABEL_31;
                  }
LABEL_134:
                  __break(1u);
                  goto LABEL_135;
                }
                v19 = v26;
              }
            }
          }
        }
      }
LABEL_31:
      v17 = (v25 - 1) & v25;
      v21 = __clz(__rbit64(v25)) + (v19 << 6);
    }
    sub_19C4E8F34(*(_QWORD *)(v13 + 48) + 40 * v21, (uint64_t)&v121);
    v118 = v121;
    v119 = v122;
    *(_QWORD *)&v120 = v123;
    v22 = (void *)sub_19CAA9EFC();
    objc_opt_self();
    v23 = swift_dynamicCastObjCClass();

    sub_19C4E8F70((uint64_t)&v118);
  }
  while (v23);
  swift_release();
  swift_bridgeObjectRelease();
  v42 = 1 << *(_BYTE *)(v13 + 32);
  v43 = -1;
  if (v42 < 64)
    v43 = ~(-1 << v42);
  v44 = v43 & *(_QWORD *)(v13 + 64);
  v45 = (unint64_t)(v42 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  v46 = 0;
  while (v44)
  {
    v47 = __clz(__rbit64(v44));
    v44 &= v44 - 1;
    v48 = v47 | (v46 << 6);
LABEL_45:
    sub_19C4E8F34(*(_QWORD *)(v13 + 48) + 40 * v48, (uint64_t)&v121);
    v118 = v121;
    v119 = v122;
    *(_QWORD *)&v120 = v123;
    v49 = (void *)sub_19CAA9EFC();
    objc_opt_self();
    v50 = swift_dynamicCastObjCClass();

    sub_19C4E8F70((uint64_t)&v118);
    if (!v50)
    {

      swift_release();
      swift_bridgeObjectRelease_n();
LABEL_3:
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      v4 = -1;
      goto LABEL_4;
    }
  }
  v51 = v46 + 1;
  if (__OFADD__(v46, 1))
    goto LABEL_130;
  if (v51 < v45)
  {
    v52 = *(_QWORD *)(v14 + 8 * v51);
    ++v46;
    if (!v52)
    {
      v46 = v51 + 1;
      if (v51 + 1 >= v45)
        goto LABEL_96;
      v52 = *(_QWORD *)(v14 + 8 * v46);
      if (!v52)
      {
        v46 = v51 + 2;
        if (v51 + 2 >= v45)
          goto LABEL_96;
        v52 = *(_QWORD *)(v14 + 8 * v46);
        if (!v52)
        {
          v46 = v51 + 3;
          if (v51 + 3 >= v45)
            goto LABEL_96;
          v52 = *(_QWORD *)(v14 + 8 * v46);
          if (!v52)
          {
            v46 = v51 + 4;
            if (v51 + 4 >= v45)
              goto LABEL_96;
            v52 = *(_QWORD *)(v14 + 8 * v46);
            if (!v52)
            {
              v53 = v51 + 5;
              if (v53 >= v45)
                goto LABEL_96;
              v52 = *(_QWORD *)(v14 + 8 * v53);
              if (!v52)
              {
                while (1)
                {
                  v46 = v53 + 1;
                  if (__OFADD__(v53, 1))
                    break;
                  if (v46 >= v45)
                    goto LABEL_96;
                  v52 = *(_QWORD *)(v14 + 8 * v46);
                  ++v53;
                  if (v52)
                    goto LABEL_64;
                }
LABEL_135:
                __break(1u);
LABEL_136:
                __break(1u);
LABEL_137:
                __break(1u);
                swift_unexpectedError();
                __break(1u);
                JUMPOUT(0x19C4E593CLL);
              }
              v46 = v53;
            }
          }
        }
      }
    }
LABEL_64:
    v44 = (v52 - 1) & v52;
    v48 = __clz(__rbit64(v52)) + (v46 << 6);
    goto LABEL_45;
  }
LABEL_96:
  swift_release();
  swift_bridgeObjectRelease();
  v75 = *(_QWORD *)(v13 + 16);
  if (v75)
  {
    v107 = MEMORY[0x1E0DEE9D8];
    sub_19C557064(0, v75, 0);
    v76 = sub_19C4E8E70(v13);
    v78 = v77;
    v80 = v79 & 1;
    v81 = v107;
    for (i = v75 - 1; ; --i)
    {
      v83 = sub_19C4E8FA4(&v121, v76, v78, v80 & 1, v13);
      v124 = v83;
      sub_19C4E8F34((uint64_t)&v121, (uint64_t)&v118);
      *((_QWORD *)&v120 + 1) = v83;
      v115 = v118;
      v116 = v119;
      *(_OWORD *)v117 = v120;
      v84 = v83;
      sub_19C4E9028((uint64_t)&v121);
      sub_19C4E8F34((uint64_t)&v115, (uint64_t)&v113);
      v114 = v117[1];
      v85 = (void *)sub_19CAA9EFC();
      sub_19C4E8F70((uint64_t)&v113);
      objc_opt_self();
      v86 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_integerValue);

      sub_19C4E8F34((uint64_t)&v115, (uint64_t)v111);
      v112 = v117[1];
      objc_msgSend(v117[1], sel_doubleValue);
      v88 = v87;
      sub_19C4E8F70((uint64_t)v111);
      sub_19C4E9028((uint64_t)&v115);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19C557064(0, *(_QWORD *)(v81 + 16) + 1, 1);
        v81 = v107;
      }
      v90 = *(_QWORD *)(v81 + 16);
      v89 = *(_QWORD *)(v81 + 24);
      if (v90 >= v89 >> 1)
      {
        sub_19C557064(v89 > 1, v90 + 1, 1);
        v81 = v107;
      }
      *(_QWORD *)(v81 + 16) = v90 + 1;
      v91 = v81 + 16 * v90;
      *(_QWORD *)(v91 + 32) = v86;
      *(_QWORD *)(v91 + 40) = v88;
      if (v76 < 0 || v76 >= -(-1 << *(_BYTE *)(v13 + 32)))
        goto LABEL_131;
      if (((*(_QWORD *)(v14 + (((unint64_t)v76 >> 3) & 0xFFFFFFFFFFFFF8)) >> v76) & 1) == 0)
        goto LABEL_132;
      if (*(_DWORD *)(v13 + 36) != v78)
        goto LABEL_133;
      v92 = sub_19CAA9EE4();
      if (!i)
        break;
      v76 = v92;
      v80 = 0;
      v78 = *(_DWORD *)(v13 + 36);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v81 = MEMORY[0x1E0DEE9D8];
  }
  if (*(_QWORD *)(v81 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423438);
    v96 = sub_19CAAA10C();
  }
  else
  {
    v96 = MEMORY[0x1E0DEE9E0];
  }
  *(_QWORD *)&v121 = v96;
  v97 = (_QWORD *)swift_bridgeObjectRetain();
  sub_19C4E8118(v97, 1, &v121);

  swift_bridgeObjectRelease();
  *(_QWORD *)&v98 = v121;
  v4 = 8;
  *a2 = v98;
LABEL_4:
  *((_BYTE *)a2 + 16) = v4;
}

uint64_t static MLSendableFeatureValue.== infix(_:_:)(__int128 *a1)
{
  char v1;
  char v2;
  __int128 v4;
  char v5;

  v1 = *((_BYTE *)a1 + 16);
  v4 = *a1;
  v5 = v1;
  sub_19C4E9304((uint64_t)&v4);
  return v2 & 1;
}

uint64_t sub_19C4E59A8(__int128 *a1)
{
  char v1;
  char v2;
  __int128 v4;
  char v5;

  v1 = *((_BYTE *)a1 + 16);
  v4 = *a1;
  v5 = v1;
  sub_19C4E9304((uint64_t)&v4);
  return v2 & 1;
}

void MLSendableFeatureValue.debugDescription.getter()
{
  sub_19C4E5A28();
}

void sub_19C4E5A28()
{
  __asm { BR              X10 }
}

uint64_t sub_19C4E5A60()
{
  sub_19CAA9F2C();
  sub_19CAA992C();
  type metadata accessor for MLFeatureType(0);
  sub_19CAAA064();
  return 0;
}

void sub_19C4E5FB4()
{
  sub_19C4E5A28();
}

uint64_t sub_19C4E5FEC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  char v20;
  char v21;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(double *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    v19 = sub_19C54B7A4(v16, v17);
    v21 = v20;
    result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(double *)(*(_QWORD *)(a2 + 56) + 8 * v19) != v18)
      return 0;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
  return result;
}

unint64_t sub_19C4E619C(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  double v16;
  char v17;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = 8 * v11;
    v16 = *(double *)(*(_QWORD *)(v3 + 56) + v15);
    result = sub_19C54B808(*(_QWORD *)(*(_QWORD *)(v3 + 48) + v15));
    if ((v17 & 1) == 0 || *(double *)(*(_QWORD *)(a2 + 56) + 8 * result) != v16)
      return 0;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
  return result;
}

void MLFeatureValue.init(_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

id sub_19C4E6364()
{
  uint64_t v0;

  return objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_undefinedFeatureValueWithType_, v0);
}

id sub_19C4E65AC()
{
  uint64_t v0;
  uint64_t v1;
  void *ObjCClassFromMetadata;
  void *v3;
  id v4;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v3 = (void *)sub_19CAA98F0();
  sub_19C4E9C9C(v0, v1, 5);
  v4 = objc_msgSend(ObjCClassFromMetadata, sel_featureValueWithString_, v3);

  return v4;
}

void sub_19C4E6600()
{
  uint64_t v0;
  uint64_t v1;
  void *ObjCClassFromMetadata;
  void *v3;
  id v4;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v3 = (void *)sub_19CAA99EC();
  sub_19C4E9C9C(v0, v1, 6);
  v4 = objc_msgSend((id)objc_opt_self(), sel_sequenceWithStringArray_, v3);

  objc_msgSend(ObjCClassFromMetadata, sel_featureValueWithSequence_, v4);
  JUMPOUT(0x19C4E67C4);
}

void sub_19C4E6688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *ObjCClassFromMetadata;
  void *v16;
  id v17;

  v12 = sub_19C4DD41C(v10);
  sub_19C4E9C9C(v10, v11, 8);
  if (v12[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423440);
    v13 = sub_19CAAA10C();
  }
  else
  {
    v13 = MEMORY[0x1E0DEE9E0];
  }
  a10 = v13;
  v14 = (_QWORD *)swift_bridgeObjectRetain();
  sub_19C4E87E4(v14, 1, &a10);
  swift_bridgeObjectRelease();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  sub_19C4E8EF8();
  sub_19C4E9CD4();
  v16 = (void *)sub_19CAA97F4();
  swift_release();
  v17 = objc_msgSend(ObjCClassFromMetadata, sel_featureValueWithInt64KeyDictionary_, v16);

  if (v17)
    JUMPOUT(0x19C4E67C0);
  __break(1u);
  swift_unexpectedError();
  __break(1u);
  JUMPOUT(0x19C4E6804);
}

void sub_19C4E66D0()
{
  uint64_t v0;
  void *ObjCClassFromMetadata;
  uint64_t v2;
  void *v3;
  id v4;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v2 = swift_unknownObjectRetain();
  v3 = (void *)sub_19C4E2C24(v2, v0);
  v4 = objc_msgSend(ObjCClassFromMetadata, sel_featureValueWithMultiArray_, v3);

  JUMPOUT(0x19C4E6720);
}

uint64_t sub_19C4E6838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _QWORD *))
{
  _QWORD v8[5];

  v8[2] = a1;
  v8[3] = a2;
  swift_beginAccess();
  a5(a4, v8);
  return swift_endAccess();
}

uint64_t sub_19C4E68A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);
  return swift_release();
}

uint64_t sub_19C4E68E8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  vImagePixelCount v16;
  vImagePixelCount v17;
  size_t v18;
  size_t v20;
  __int128 v21;
  vImage_Buffer dest;
  vImage_Buffer src;
  _BYTE v24[40];
  _BYTE v25[40];
  _BYTE v26[8];
  __int128 v27;
  size_t v28;
  char v29;
  _BYTE v30[8];
  vImagePixelCount v31;
  vImagePixelCount v32;
  size_t v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C527E10(a2, (uint64_t)a3, 8, (uint64_t)v24);
  sub_19C4DCE08((uint64_t)v24, (uint64_t)v30, &qword_1EE423470);
  if ((v34 & 1) != 0)
    return 0;
  v16 = v31;
  v17 = v32;
  v18 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C527E10(a5, (uint64_t)a6, 8, (uint64_t)v25);
  sub_19C4DCE08((uint64_t)v25, (uint64_t)v26, &qword_1EE423470);
  if ((v29 & 1) != 0)
    return 0;
  v21 = v27;
  v20 = v28;
  src.data = (void *)(a7 + 8 * sub_19C552864(a1, a3));
  src.height = v16;
  src.width = v17;
  src.rowBytes = v18;
  dest.data = (void *)(a8 + 8 * sub_19C552864(a4, a6));
  *(_OWORD *)&dest.height = v21;
  dest.rowBytes = v20;
  vImageCopyBuffer(&src, &dest, 8uLL, 0x10u);
  return 1;
}

uint64_t sub_19C4E6A74(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  vImagePixelCount v16;
  vImagePixelCount v17;
  size_t v18;
  size_t v20;
  __int128 v21;
  vImage_Buffer dest;
  vImage_Buffer src;
  _BYTE v24[40];
  _BYTE v25[40];
  _BYTE v26[8];
  __int128 v27;
  size_t v28;
  char v29;
  _BYTE v30[8];
  vImagePixelCount v31;
  vImagePixelCount v32;
  size_t v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C527E10(a2, (uint64_t)a3, 4, (uint64_t)v24);
  sub_19C4DCE08((uint64_t)v24, (uint64_t)v30, &qword_1EE423470);
  if ((v34 & 1) != 0)
    return 0;
  v16 = v31;
  v17 = v32;
  v18 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C527E10(a5, (uint64_t)a6, 4, (uint64_t)v25);
  sub_19C4DCE08((uint64_t)v25, (uint64_t)v26, &qword_1EE423470);
  if ((v29 & 1) != 0)
    return 0;
  v21 = v27;
  v20 = v28;
  src.data = (void *)(a7 + 4 * sub_19C552864(a1, a3));
  src.height = v16;
  src.width = v17;
  src.rowBytes = v18;
  dest.data = (void *)(a8 + 4 * sub_19C552864(a4, a6));
  *(_OWORD *)&dest.height = v21;
  dest.rowBytes = v20;
  vImageCopyBuffer(&src, &dest, 4uLL, 0x10u);
  return 1;
}

uint64_t sub_19C4E6C00(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  vImagePixelCount v16;
  vImagePixelCount v17;
  size_t v18;
  size_t v20;
  __int128 v21;
  vImage_Buffer dest;
  vImage_Buffer src;
  _BYTE v24[40];
  _BYTE v25[40];
  _BYTE v26[8];
  __int128 v27;
  size_t v28;
  char v29;
  _BYTE v30[8];
  vImagePixelCount v31;
  vImagePixelCount v32;
  size_t v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C527E10(a2, (uint64_t)a3, 2, (uint64_t)v24);
  sub_19C4DCE08((uint64_t)v24, (uint64_t)v30, &qword_1EE423470);
  if ((v34 & 1) != 0)
    return 0;
  v16 = v31;
  v17 = v32;
  v18 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C527E10(a5, (uint64_t)a6, 2, (uint64_t)v25);
  sub_19C4DCE08((uint64_t)v25, (uint64_t)v26, &qword_1EE423470);
  if ((v29 & 1) != 0)
    return 0;
  v21 = v27;
  v20 = v28;
  src.data = (void *)(a7 + 2 * sub_19C552864(a1, a3));
  src.height = v16;
  src.width = v17;
  src.rowBytes = v18;
  dest.data = (void *)(a8 + 2 * sub_19C552864(a4, a6));
  *(_OWORD *)&dest.height = v21;
  dest.rowBytes = v20;
  vImageCopyBuffer(&src, &dest, 2uLL, 0x10u);
  return 1;
}

uint64_t sub_19C4E6D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  ObjectType = swift_getObjectType();
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 8);
  v12 = v11(ObjectType, a4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  v14 = *(_QWORD *)(v12 + 16);
  if (v14 != *(_QWORD *)(result + 16))
  {
    __break(1u);
    goto LABEL_7;
  }
  v15 = result;
  v16 = sub_19C500C0C(0, v14);
  result = v11(ObjectType, a4);
  v17 = *(_QWORD *)(result + 16);
  if (v17 != *(_QWORD *)(a5 + 16))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v18 = result;
  swift_bridgeObjectRetain();
  result = sub_19C500C0C(0, v17);
  if (!a1)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (*a6)
  {
    a7(v16, v12, v15, result, v18, a5, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_19C4E6EE4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var1;

  a3(&var1);
  if (!v3)
    v4 = var1;
  return v4 & 1;
}

uint64_t sub_19C4E6F40(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var1;

  a3(&var1);
  if (!v3)
    v4 = var1;
  return v4 & 1;
}

uint64_t sub_19C4E6F98(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var1;

  a3(&var1);
  if (!v3)
    v4 = var1;
  return v4 & 1;
}

_QWORD *sub_19C4E6FF4(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  result = a3(&v5);
  if (!v3)
    return (_QWORD *)v5;
  return result;
}

_QWORD *sub_19C4E704C(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  result = a3(&v5);
  if (!v3)
    return (_QWORD *)v5;
  return result;
}

_QWORD *sub_19C4E70A0(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  result = a3(&v5);
  if (!v3)
    return (_QWORD *)v5;
  return result;
}

_QWORD *sub_19C4E70F8(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  result = a3(&v5);
  if (!v3)
    return (_QWORD *)v5;
  return result;
}

_QWORD *sub_19C4E7158(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  result = a3(&v5);
  if (!v3)
    return (_QWORD *)v5;
  return result;
}

_QWORD *sub_19C4E71B4(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  result = a3(&v5);
  if (!v3)
    return (_QWORD *)v5;
  return result;
}

uint64_t sub_19C4E7214(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v8 = *(_QWORD *)(a3 + 8);
  ObjectType = swift_getObjectType();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  swift_unknownObjectRetain();
  v11 = v10(ObjectType, v8);
  swift_unknownObjectRelease();
  v12 = *(_QWORD *)(a3 + 8);
  v13 = swift_getObjectType();
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
  swift_unknownObjectRetain();
  v15 = v14(v13, v12);
  swift_unknownObjectRelease();
  v16 = (a2 - a1) / 8;
  if (!a1)
    v16 = 0;
  v18[0] = a1;
  v18[1] = v16;
  a4(v18, v11, v15);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19C4E7328(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v8 = *(_QWORD *)(a3 + 8);
  ObjectType = swift_getObjectType();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  swift_unknownObjectRetain();
  v11 = v10(ObjectType, v8);
  swift_unknownObjectRelease();
  v12 = *(_QWORD *)(a3 + 8);
  v13 = swift_getObjectType();
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
  swift_unknownObjectRetain();
  v15 = v14(v13, v12);
  swift_unknownObjectRelease();
  v16 = (a2 - a1) / 2;
  if (!a1)
    v16 = 0;
  v18[0] = a1;
  v18[1] = v16;
  a4(v18, v11, v15);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19C4E7438(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v8 = *(_QWORD *)(a3 + 8);
  ObjectType = swift_getObjectType();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  swift_unknownObjectRetain();
  v11 = v10(ObjectType, v8);
  swift_unknownObjectRelease();
  v12 = *(_QWORD *)(a3 + 8);
  v13 = swift_getObjectType();
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
  swift_unknownObjectRetain();
  v15 = v14(v13, v12);
  swift_unknownObjectRelease();
  v16 = (a2 - a1) / 4;
  if (!a1)
    v16 = 0;
  v18[0] = a1;
  v18[1] = v16;
  a4(v18, v11, v15);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19C4E754C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(sub_19C4DD9C8((uint64_t)sub_19C4E9068, 0, a1, a2) + 16);
  if (v2)
  {
    v3 = 0;
    do
    {
      ++v3;
      sub_19CAAA064();
      sub_19CAA992C();
      sub_19CAA992C();
      swift_bridgeObjectRelease();
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_19C4E7654(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(sub_19C4DDAAC((uint64_t)sub_19C4E9084, 0, a1, a2) + 16);
  if (v2)
  {
    v3 = 0;
    do
    {
      ++v3;
      sub_19CAAA064();
      sub_19CAA992C();
      sub_19CAA992C();
      swift_bridgeObjectRelease();
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_19C4E775C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(sub_19C4DDB90((uint64_t)sub_19C4E9208, 0, a1, a2) + 16);
  if (v2)
  {
    v3 = 0;
    do
    {
      ++v3;
      sub_19CAAA064();
      sub_19CAA992C();
      sub_19CAA992C();
      swift_bridgeObjectRelease();
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_19C4E7864(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(sub_19C4DDC74((uint64_t)sub_19C4E9224, 0, a1, a2) + 16);
  if (v2)
  {
    v3 = 0;
    do
    {
      ++v3;
      sub_19CAAA064();
      sub_19CAA992C();
      sub_19CAA992C();
      swift_bridgeObjectRelease();
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return 0;
}

int64_t sub_19C4E796C(uint64_t a1)
{
  unint64_t v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v4;
  int64x2_t v5;
  int64x2_t *v6;
  unint64_t v7;
  int64x2_t v8;
  int8x16_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t *v12;
  int64_t v13;
  int64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v5 = vdupq_n_s64(v2);
      v6 = (int64x2_t *)(a1 + 56);
      v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      v8 = v5;
      do
      {
        v5 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v5, v6[-1]), (int8x16_t)v5, (int8x16_t)v6[-1]);
        v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, *v6), (int8x16_t)v8, *(int8x16_t *)v6);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      v9 = vbslq_s8((int8x16_t)vcgtq_s64(v5, v8), (int8x16_t)v5, (int8x16_t)v8);
      v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      v2 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v9.i64[0], v10), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL))
        return v2;
    }
    else
    {
      v4 = 1;
    }
    v11 = v1 - v4;
    v12 = (int64_t *)(a1 + 8 * v4 + 32);
    do
    {
      v14 = *v12++;
      v13 = v14;
      if (v2 <= v14)
        v2 = v13;
      --v11;
    }
    while (v11);
  }
  return v2;
}

void sub_19C4E7A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  if (*(_QWORD *)(a3 + 16) == *(_QWORD *)(a4 + 16))
  {
    a5(a3, a4);
    __asm { BR              X11 }
  }
  __break(1u);
  JUMPOUT(0x19C4E7AD4);
}

void sub_19C4E7AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_QWORD *)(a3 + 16) == *(_QWORD *)(a4 + 16))
  {
    sub_19C4E37E8(a3, a4);
    __asm { BR              X11 }
  }
  __break(1u);
  JUMPOUT(0x19C4E7BA4);
}

uint64_t sub_19C4E7BC0(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE424150);
  result = sub_19CAAA0E8();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = result + 64;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v17 = *v16;
    result = v16[1];
    v18 = 8 * i;
    v19 = (double)*(uint64_t *)(*(_QWORD *)(a1 + 56) + 8 * i);
    *(_QWORD *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v20 = (_QWORD *)(v3[6] + 16 * i);
    *v20 = v17;
    v20[1] = result;
    *(double *)(v3[7] + v18) = v19;
    v21 = v3[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v23;
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v13 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v9)
        return (uint64_t)v3;
      v14 = *(_QWORD *)(v5 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v9)
          return (uint64_t)v3;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v8 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v9)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

_QWORD *sub_19C4E7D70(uint64_t a1)
{
  _QWORD *result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423438);
  result = (_QWORD *)sub_19CAAA0E8();
  v3 = 0;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v9 | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    v14 = 8 * i;
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    *(_QWORD *)((char *)result + ((i >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << i;
    *(_QWORD *)(result[6] + v14) = v15;
    *(double *)(result[7] + v14) = (double)v16;
    v17 = result[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    result[2] = v19;
    if (v7)
      goto LABEL_4;
LABEL_5:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_24;
    if (v11 >= v8)
      return result;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        return result;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          return result;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
          break;
      }
    }
LABEL_18:
    v7 = (v12 - 1) & v12;
  }
  v13 = v11 + 3;
  if (v13 >= v8)
    return result;
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_18;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      return result;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

_QWORD *sub_19C4E7EF8(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423450);
  result = (_QWORD *)sub_19CAAA0E8();
  v3 = result;
  v4 = 0;
  v28 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v26 = v6;
  v27 = (unint64_t)(v8 + 63) >> 6;
  v11 = (char *)(result + 8);
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v12 | (v4 << 6); ; i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v28 + 48) + 16 * i);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(double *)(*(_QWORD *)(v28 + 56) + 8 * i);
    v21 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
    swift_bridgeObjectRetain();
    result = objc_msgSend(v21, sel_initWithDouble_, v20);
    *(_QWORD *)&v11[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    v22 = (_QWORD *)(v3[6] + 16 * i);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(v3[7] + 8 * i) = result;
    v23 = v3[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v25;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v14 >= v27)
      return v3;
    v15 = *(_QWORD *)(v26 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v27)
        return v3;
      v15 = *(_QWORD *)(v26 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v27)
          return v3;
        v15 = *(_QWORD *)(v26 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_18:
    v10 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v27)
    return v3;
  v15 = *(_QWORD *)(v26 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v27)
      return v3;
    v15 = *(_QWORD *)(v26 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_19C4E8118(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = a1[4];
  v8 = a1[5];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  v11 = sub_19C54B808(v7);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_19C54F1E0();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v21 = 8 * v11;
    *(_QWORD *)(v20[6] + v21) = v7;
    *(_QWORD *)(v20[7] + v21) = v8;
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    v25 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v26 = a1 + 7;
    while (1)
    {
      v27 = *(v26 - 1);
      v28 = *v26;
      v29 = (_QWORD *)*a3;
      v30 = sub_19C54B808(v27);
      v32 = v29[2];
      v33 = (v31 & 1) == 0;
      v23 = __OFADD__(v32, v33);
      v34 = v32 + v33;
      if (v23)
        break;
      v35 = v31;
      if (v29[3] < v34)
      {
        sub_19C54C77C(v34, 1);
        v30 = sub_19C54B808(v27);
        if ((v35 & 1) != (v36 & 1))
          goto LABEL_25;
      }
      if ((v35 & 1) != 0)
        goto LABEL_10;
      v37 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      v38 = 8 * v30;
      *(_QWORD *)(v37[6] + v38) = v27;
      *(_QWORD *)(v37[7] + v38) = v28;
      v39 = v37[2];
      v23 = __OFADD__(v39, 1);
      v40 = v39 + 1;
      if (v23)
        goto LABEL_24;
      v37[2] = v40;
      v26 += 2;
      if (!--v25)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_19C54C77C(v14, a2 & 1);
  v16 = sub_19C54B808(v7);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE423C80);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_19CAAA244();
  __break(1u);
LABEL_26:
  sub_19CAA9F2C();
  sub_19CAA992C();
  sub_19CAAA064();
  sub_19CAA992C();
  sub_19CAAA0B8();
  __break(1u);
}

void sub_19C4E8464(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v8 = a1[4];
  v7 = a1[5];
  v9 = a1[6];
  swift_bridgeObjectRetain();
  v10 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  v12 = sub_19C54B7A4(v8, v7);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    goto LABEL_23;
  v16 = v11;
  if (v10[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_19C54F36C();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v22 = (uint64_t *)(v21[6] + 16 * v12);
    *v22 = v8;
    v22[1] = v7;
    *(_QWORD *)(v21[7] + 8 * v12) = v9;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v27 = a1 + 9;
    while (1)
    {
      v29 = *(v27 - 2);
      v28 = *(v27 - 1);
      v30 = *v27;
      v31 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      v32 = sub_19C54B7A4(v29, v28);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v24 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v24)
        break;
      v37 = v33;
      if (v31[3] < v36)
      {
        sub_19C54CA24(v36, 1);
        v32 = sub_19C54B7A4(v29, v28);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      *v40 = v29;
      v40[1] = v28;
      *(_QWORD *)(v39[7] + 8 * v32) = v30;
      v41 = v39[2];
      v24 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v24)
        goto LABEL_24;
      v39[2] = v42;
      v27 += 3;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_19C54CA24(v15, a2 & 1);
  v17 = sub_19C54B7A4(v8, v7);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE423C80);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_19CAAA244();
  __break(1u);
LABEL_26:
  sub_19CAA9F2C();
  sub_19CAA992C();
  sub_19CAAA064();
  sub_19CAA992C();
  sub_19CAAA0B8();
  __break(1u);
}

void sub_19C4E87E4(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  void *v7;
  void *v8;
  _QWORD *v9;
  id v10;
  id v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  void *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void *v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = (void *)a1[4];
  v8 = (void *)a1[5];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  v10 = v7;
  v11 = v8;
  v13 = sub_19C54BA20((uint64_t)v10);
  v14 = v9[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
    goto LABEL_23;
  v17 = v12;
  if (v9[3] >= v16)
  {
    if ((a2 & 1) != 0)
    {
      if ((v12 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_19C54F518();
      if ((v17 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    v23 = 8 * v13;
    *(_QWORD *)(v22[6] + v23) = v10;
    *(_QWORD *)(v22[7] + v23) = v11;
    v24 = v22[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v26;
    v27 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v28 = (void **)(a1 + 7);
    while (1)
    {
      v29 = *v28;
      v30 = (_QWORD *)*a3;
      v10 = *(v28 - 1);
      v11 = v29;
      v31 = sub_19C54BA20((uint64_t)v10);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v25 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v25)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        sub_19C54CD28(v35, 1);
        v31 = sub_19C54BA20((uint64_t)v10);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = 8 * v31;
      *(_QWORD *)(v38[6] + v39) = v10;
      *(_QWORD *)(v38[7] + v39) = v11;
      v40 = v38[2];
      v25 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v25)
        goto LABEL_24;
      v38[2] = v41;
      v28 += 2;
      if (!--v27)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_19C54CD28(v16, a2 & 1);
  v18 = sub_19C54BA20((uint64_t)v10);
  if ((v17 & 1) == (v19 & 1))
  {
    v13 = v18;
    if ((v17 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v20 = (void *)swift_allocError();
    swift_willThrow();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE423C80);
    if ((swift_dynamicCast() & 1) == 0)
    {

      swift_bridgeObjectRelease_n();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_19C4E8EF8();
  sub_19CAAA244();
  __break(1u);
LABEL_26:
  sub_19CAA9F2C();
  sub_19CAA992C();
  sub_19C4E8EF8();
  sub_19CAAA064();
  sub_19CAA992C();
  sub_19CAAA0B8();
  __break(1u);
}

uint64_t sub_19C4E8B58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(_QWORD *__return_ptr, char *)@<X4>, void (*a6)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t)@<X6>, _BYTE *a7@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t result;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[8];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _BYTE v27[8];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v9 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a6((_QWORD *)((char *)v17 + 1), a1, a2, a3, a4);
  a5(v17, (char *)v17 + 1);
  if (v9)
  {
    v30 = v18;
    sub_19C4CF9C0((uint64_t)&v30);
    v29 = v19;
    sub_19C4CF9C0((uint64_t)&v29);
    v26 = v20;
    v28 = v20;
    sub_19C4CF9C0((uint64_t)&v28);
    sub_19C4DCE08((uint64_t)&v26 + 8, (uint64_t)v27, &qword_1EE421940);
    return sub_19C4CF9C0((uint64_t)v27);
  }
  else
  {
    v25 = v18;
    sub_19C4CF9C0((uint64_t)&v25);
    v24 = v19;
    sub_19C4CF9C0((uint64_t)&v24);
    v21 = v20;
    v23 = v20;
    sub_19C4CF9C0((uint64_t)&v23);
    sub_19C4DCE08((uint64_t)&v21 + 8, (uint64_t)v22, &qword_1EE421940);
    result = sub_19C4CF9C0((uint64_t)v22);
    *a7 = v17[0];
  }
  return result;
}

uint64_t sub_19C4E8CC4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD *)@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v20;
  _BYTE v21[8];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _BYTE v26[8];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[13];
  uint64_t v30;

  v4 = a1;
  v5 = a1[2];
  v16 = a1[1];
  v17 = *a1;
  v6 = a1[3];
  v7 = a1[5];
  v14 = *a2;
  v15 = a1[4];
  v9 = a2[3];
  v12 = a2[4];
  v13 = a2[1];
  v10 = a2[5];
  v30 = a2[2];
  v8 = v30;
  v25 = *((_OWORD *)a2 + 2);
  v27 = v25;
  v28 = v9;
  sub_19C4DCE08((uint64_t)&v25 + 8, (uint64_t)v26, &qword_1EE421940);
  v23 = v6;
  v24 = v5;
  v20 = *((_OWORD *)v4 + 2);
  v22 = v20;
  sub_19C4DCE08((uint64_t)&v20 + 8, (uint64_t)v21, &qword_1EE421940);
  v29[0] = v14;
  v29[1] = v13;
  v29[2] = v8;
  v29[3] = v9;
  v29[4] = v12;
  v29[5] = v10;
  v29[6] = v17;
  v29[7] = v16;
  v29[8] = v5;
  v29[9] = v6;
  v29[10] = v15;
  v29[11] = v7;
  sub_19C4EA73C((uint64_t)&v30);
  sub_19C4EA73C((uint64_t)&v28);
  sub_19C4EA73C((uint64_t)&v27);
  sub_19C4EA73C((uint64_t)v26);
  sub_19C4EA73C((uint64_t)&v24);
  sub_19C4EA73C((uint64_t)&v23);
  sub_19C4EA73C((uint64_t)&v22);
  sub_19C4EA73C((uint64_t)v21);
  LOBYTE(v4) = a3(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a4 = v4 & 1;
  return result;
}

uint64_t sub_19C4E8E70(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

unint64_t sub_19C4E8EF8()
{
  unint64_t result;

  result = qword_1EE422D90;
  if (!qword_1EE422D90)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE422D90);
  }
  return result;
}

uint64_t sub_19C4E8F34(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_19C4E8F70(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

id sub_19C4E8FA4(id result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    sub_19C4E8F34(*(_QWORD *)(a5 + 48) + 40 * a2, (uint64_t)result);
    return *(id *)(*(_QWORD *)(a5 + 56) + 8 * a2);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_19C4E9028(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423430);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19C4E9068@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_19C4E9240(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C5A8FB4, a2);
}

uint64_t sub_19C4E9084@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_19C4E9240(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C5A9840, a2);
}

uint64_t sub_19C4E90A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t *__return_ptr, _QWORD *)@<X4>, void (*a6)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t)@<X6>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t result;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[8];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _BYTE v28[8];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v9 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a6(v18, a1, a2, a3, a4);
  a5(&v17, v18);
  if (v9)
  {
    v31 = v19;
    sub_19C4CF9C0((uint64_t)&v31);
    v30 = v20;
    sub_19C4CF9C0((uint64_t)&v30);
    v27 = v21;
    v29 = v21;
    sub_19C4CF9C0((uint64_t)&v29);
    sub_19C4DCE08((uint64_t)&v27 + 8, (uint64_t)v28, &qword_1EE421940);
    return sub_19C4CF9C0((uint64_t)v28);
  }
  else
  {
    v26 = v19;
    sub_19C4CF9C0((uint64_t)&v26);
    v25 = v20;
    sub_19C4CF9C0((uint64_t)&v25);
    v22 = v21;
    v24 = v21;
    sub_19C4CF9C0((uint64_t)&v24);
    sub_19C4DCE08((uint64_t)&v22 + 8, (uint64_t)v23, &qword_1EE421940);
    result = sub_19C4CF9C0((uint64_t)v23);
    *a7 = v17;
  }
  return result;
}

uint64_t sub_19C4E9208@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_19C4E9240(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C5AA0CC, a2);
}

uint64_t sub_19C4E9224@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_19C4E9240(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C5AA950, a2);
}

uint64_t sub_19C4E9240@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = a1[2];
  v13 = a1[3];
  v6 = v13;
  v14 = v5;
  v8 = a1[5];
  v12 = a1[4];
  v7 = v12;
  v9 = *a1;
  sub_19C4EA73C((uint64_t)&v14);
  sub_19C4EA73C((uint64_t)&v13);
  sub_19C4EA73C((uint64_t)&v12);
  swift_bridgeObjectRetain();
  v10 = a2(v9, v5, v6, v7, v8);
  sub_19C4CF9C0((uint64_t)&v14);
  sub_19C4CF9C0((uint64_t)&v13);
  sub_19C4CF9C0((uint64_t)&v12);
  result = swift_bridgeObjectRelease();
  *a3 = v10;
  return result;
}

uint64_t sub_19C4E92FC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void sub_19C4E9304(uint64_t a1)
{
  __asm { BR              X9 }
}

BOOL sub_19C4E934C()
{
  uint64_t v0;
  char v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (v2)
  {
    sub_19C4E9D20(v5, v3, v2);
    sub_19C4E9C9C(v0, v4, v1);
    sub_19C4E9C9C(v5, v3, v2);
    return 0;
  }
  else
  {
    sub_19C4E9C9C(v0, v4, 0);
    sub_19C4E9C9C(v5, v3, 0);
    return v0 == v5;
  }
}

uint64_t sub_19C4E9C9C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  switch(a3)
  {
    case 5:
    case 6:
    case 7:
    case 8:
      result = swift_bridgeObjectRelease();
      break;
    case 9:
    case 10:
    case 11:
    case 12:
      result = swift_unknownObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_19C4E9CD4()
{
  unint64_t result;
  unint64_t v1;

  result = qword_1EE423448;
  if (!qword_1EE423448)
  {
    v1 = sub_19C4E8EF8();
    result = MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EE423448);
  }
  return result;
}

uint64_t sub_19C4E9D20(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  switch(a3)
  {
    case 5:
    case 6:
    case 7:
    case 8:
      result = swift_bridgeObjectRetain();
      break;
    case 9:
    case 10:
    case 11:
    case 12:
      result = swift_unknownObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for MLSendableFeatureValue()
{
  return &type metadata for MLSendableFeatureValue;
}

uint64_t destroy for MLSendableFeatureValue.Value(uint64_t a1)
{
  return sub_19C4E9C9C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s6CoreML22MLSendableFeatureValueV5ValueOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_19C4E9D20(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s6CoreML22MLSendableFeatureValueV5ValueOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_19C4E9D20(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_19C4E9C9C(v6, v7, v8);
  return a1;
}

uint64_t _s6CoreML22MLSendableFeatureValueV5ValueOwta_0(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_19C4E9C9C(v4, v5, v6);
  return a1;
}

uint64_t _s6CoreML22MLSendableFeatureValueV5ValueOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF4 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 244);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0xC)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s6CoreML22MLSendableFeatureValueV5ValueOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 244;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_19C4E9F08(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_19C4E9F10(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MLSendableFeatureValue.Value()
{
  return &type metadata for MLSendableFeatureValue.Value;
}

uint64_t sub_19C4E9F28()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_19C4E9F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C4E6838(a1, a2, v2, (uint64_t)sub_19C4E9FA0, (void (*)(uint64_t, _QWORD *))sub_19C4E20B4);
}

_QWORD *sub_19C4E9F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_19C4EA5BC(a1, a2, a3);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

_QWORD *sub_19C4E9FA0(_QWORD *a1)
{
  return sub_19C4EA670(a1);
}

uint64_t sub_19C4E9FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t (*a7)(uint64_t, int64_t))
{
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64x2_t v30;
  int64x2_t *v31;
  unint64_t v32;
  int64x2_t v33;
  int8x16_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t *v37;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int64_t v53;
  unint64_t v54;
  unint64_t v55;
  int64x2_t v56;
  int64x2_t *v57;
  unint64_t v58;
  int64x2_t v59;
  int8x16_t v60;
  uint64_t v61;
  unint64_t v62;
  int64_t *v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t result;
  uint64_t (*v70)(uint64_t, int64_t);
  uint64_t v73;
  int64_t v74;
  uint64_t v75;

  v9 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  if (a3)
  {
    v10 = a3;
  }
  else
  {
    ObjectType = swift_getObjectType();
    v12 = v9(ObjectType, a2);
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
    {
      v10 = sub_19CAA9A58();
      *(_QWORD *)(v10 + 16) = v13;
    }
    else
    {
      v10 = MEMORY[0x1E0DEE9D8];
    }
    v74 = v13;
    v75 = 0;
    v73 = v10 + 32;
    sub_19C59373C(&v73, &v75, v12);
    v14 = v75;
    v16 = __OFSUB__(v13, v75);
    v15 = v13 - v75 < 0;
    if (v13 < v75)
      goto LABEL_60;
    *(_QWORD *)(v10 + 16) = v75;
    swift_bridgeObjectRelease();
  }
  v17 = swift_getObjectType();
  v18 = v9(v17, a2);
  v19 = v18;
  v14 = *(_QWORD *)(v18 + 16);
  v70 = a7;
  if (v14)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      v22 = *(_QWORD *)(v18 + 8 * v20 + 32);
      v23 = v21 * v22;
      v24 = (unsigned __int128)(v21 * (__int128)v22) >> 64;
      v16 = __OFSUB__(v24, v23 >> 63);
      v15 = v24 - (v23 >> 63) < 0;
      if (v24 != v23 >> 63)
      {
        __break(1u);
        goto LABEL_56;
      }
      v21 = v23;
      ++v20;
    }
    while (v14 != v20);
    if (v23)
      goto LABEL_13;
    swift_bridgeObjectRelease();
LABEL_29:
    swift_bridgeObjectRetain();
    v40 = swift_unknownObjectRetain();
    v27 = 0;
    v41 = MEMORY[0x1E0DEE9D8];
    goto LABEL_32;
  }
LABEL_13:
  swift_bridgeObjectRetain();
  v25 = sub_19C4E0D80(v19, v10);
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(v25 + 16);
  if (!v26)
  {
    v27 = 0;
    goto LABEL_26;
  }
  v27 = *(_QWORD *)(v25 + 32);
  v28 = v26 - 1;
  if (v26 == 1)
    goto LABEL_26;
  if (v26 >= 5)
  {
    v29 = v28 & 0xFFFFFFFFFFFFFFFCLL | 1;
    v30 = vdupq_n_s64(v27);
    v31 = (int64x2_t *)(v25 + 56);
    v32 = v28 & 0xFFFFFFFFFFFFFFFCLL;
    v33 = v30;
    do
    {
      v30 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v30, v31[-1]), (int8x16_t)v30, (int8x16_t)v31[-1]);
      v33 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v33, *v31), (int8x16_t)v33, *(int8x16_t *)v31);
      v31 += 2;
      v32 -= 4;
    }
    while (v32);
    v34 = vbslq_s8((int8x16_t)vcgtq_s64(v30, v33), (int8x16_t)v30, (int8x16_t)v33);
    v35 = vextq_s8(v34, v34, 8uLL).u64[0];
    v27 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v34.i64[0], v35), *(int8x8_t *)v34.i8, (int8x8_t)v35);
    if (v28 == (v28 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_26;
  }
  else
  {
    v29 = 1;
  }
  v36 = v26 - v29;
  v37 = (int64_t *)(v25 + 8 * v29 + 32);
  do
  {
    v39 = *v37++;
    v38 = v39;
    if (v27 <= v39)
      v27 = v38;
    --v36;
  }
  while (v36);
LABEL_26:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v26)
  {
    if (v27 < 0)
      goto LABEL_64;
    if (!v27)
      goto LABEL_29;
  }
  else
  {
    v27 = 1;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v40 = sub_19CAA9A58();
  v41 = v40;
  *(_QWORD *)(v40 + 16) = v27;
LABEL_32:
  v42 = v41 + 32;
  v73 = v41 + 32;
  v74 = v27;
  MEMORY[0x1E0C80A78](v40);
  (*(void (**)(uint64_t))(a2 + 32))(a5);
  v14 = v73;
  if (v73)
  {
    v16 = __OFSUB__(v42, v73);
    v15 = v42 - v73 < 0;
    if (v42 != v73)
    {
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    *(_QWORD *)(v41 + 16) = v27;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v43 = v9(v17, a2);
    __swift_instantiateConcreteTypeFromMangledName(a6);
    v44 = (_QWORD *)swift_allocObject();
    v14 = *(_QWORD *)(v43 + 16);
    if (v14)
    {
      v45 = (uint64_t *)(v43 + 32);
      v46 = 1;
      while (1)
      {
        v47 = *v45++;
        v48 = v46 * v47;
        v49 = (unsigned __int128)(v46 * (__int128)v47) >> 64;
        v16 = __OFSUB__(v49, v48 >> 63);
        v15 = v49 - (v48 >> 63) < 0;
        if (v49 != v48 >> 63)
          break;
        v46 = v48;
        if (!--v14)
        {
          if (v48)
            goto LABEL_39;
          v53 = 0;
          goto LABEL_53;
        }
      }
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
LABEL_39:
    swift_bridgeObjectRetain();
    v50 = swift_bridgeObjectRetain();
    v51 = sub_19C4E0D80(v50, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v52 = *(_QWORD *)(v51 + 16);
    if (!v52)
    {
      swift_bridgeObjectRelease();
      v53 = 1;
      goto LABEL_53;
    }
    v53 = *(_QWORD *)(v51 + 32);
    v54 = v52 - 1;
    if (v52 != 1)
    {
      if (v52 >= 5)
      {
        v55 = v54 & 0xFFFFFFFFFFFFFFFCLL | 1;
        v56 = vdupq_n_s64(v53);
        v57 = (int64x2_t *)(v51 + 56);
        v58 = v54 & 0xFFFFFFFFFFFFFFFCLL;
        v59 = v56;
        do
        {
          v56 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v56, v57[-1]), (int8x16_t)v56, (int8x16_t)v57[-1]);
          v59 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v59, *v57), (int8x16_t)v59, *(int8x16_t *)v57);
          v57 += 2;
          v58 -= 4;
        }
        while (v58);
        v60 = vbslq_s8((int8x16_t)vcgtq_s64(v56, v59), (int8x16_t)v56, (int8x16_t)v59);
        v61 = vextq_s8(v60, v60, 8uLL).u64[0];
        v53 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v60.i64[0], v61), *(int8x8_t *)v60.i8, (int8x8_t)v61);
        if (v54 == (v54 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_52;
      }
      else
      {
        v55 = 1;
      }
      v62 = v52 - v55;
      v63 = (int64_t *)(v51 + 8 * v55 + 32);
      do
      {
        v65 = *v63++;
        v64 = v65;
        if (v53 <= v65)
          v53 = v64;
        --v62;
      }
      while (v62);
    }
LABEL_52:
    swift_bridgeObjectRelease();
    if (v53 < 0)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
LABEL_53:
    v66 = swift_retain();
    v67 = v70(v66, v53);
    swift_bridgeObjectRelease();
    v68 = *(_QWORD *)(v67 + 16);
    swift_bridgeObjectRelease();
    v16 = __OFSUB__(v53, v68);
    v15 = v53 - v68 < 0;
    if (v53 == v68)
    {
      v44[3] = v43;
      v44[4] = v10;
      v44[2] = v67;
      return (uint64_t)v44;
    }
    goto LABEL_59;
  }
LABEL_61:
  __break(1u);
  if (v15 == v16)
    goto LABEL_65;
  __break(1u);
LABEL_64:
  sub_19CAAA0AC();
  __break(1u);
LABEL_65:
  *(_QWORD *)(v10 + 16) = v14;
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_19C4EA4B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C4E6D8C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD **)(v2 + 40), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C4E1988);
}

uint64_t sub_19C4EA4DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C4E6838(a1, a2, v2, (uint64_t)sub_19C4E9FA0, (void (*)(uint64_t, _QWORD *))sub_19C4E1F6C);
}

uint64_t sub_19C4EA504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_19C4EA520(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_19C4E7158, a3);
}

uint64_t sub_19C4EA520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD)@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;

  result = a3(a1, a2, v4[2], v4[3], v4[4], v4[5]);
  if (!v5)
  {
    *a4 = result;
    a4[1] = v8;
  }
  return result;
}

uint64_t sub_19C4EA554(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C4E7328(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD *, uint64_t, uint64_t))(v2 + 24));
}

uint64_t sub_19C4EA570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C4E6D8C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD **)(v2 + 40), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C4E1634);
}

uint64_t sub_19C4EA594(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C4E6838(a1, a2, v2, (uint64_t)sub_19C4E9FA0, (void (*)(uint64_t, _QWORD *))sub_19C4E1E24);
}

_QWORD *sub_19C4EA5BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;

  result = sub_19C4E71B4(a1, a2, *(_QWORD *(**)(uint64_t *__return_ptr))(v3 + 16));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
  }
  return result;
}

uint64_t sub_19C4EA5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C4E7438(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD *, uint64_t, uint64_t))(v2 + 24));
}

uint64_t sub_19C4EA608(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C4E6D8C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD **)(v2 + 40), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C4E12E0);
}

uint64_t sub_19C4EA62C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C4E6838(a1, a2, v2, (uint64_t)sub_19C4E9FA0, (void (*)(uint64_t, _QWORD *))sub_19C4E1CDC);
}

uint64_t sub_19C4EA654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_19C4EA520(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_19C4E70F8, a3);
}

_QWORD *sub_19C4EA670(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;

  if (*result)
  {
    v2 = *(_QWORD **)(v1 + 24);
    **(_QWORD **)(v1 + 16) = *result;
    v3 = (void *)sub_19CAA99EC();
    result = v3;
    *v2 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_19C4EA6C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C4E7214(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD *, uint64_t, uint64_t))(v2 + 24));
}

uint64_t sub_19C4EA6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C4E6D8C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD **)(v2 + 40), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C4E0FC0);
}

uint64_t sub_19C4EA708@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;

  return sub_19C4E90A0(a1, a2, a3, a4, *(void (**)(uint64_t *__return_ptr, _QWORD *))(v5 + 16), (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C4DD2B4, a5);
}

_QWORD *sub_19C4EA728@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_19C4EA7F4(a1, a2, a3);
}

uint64_t sub_19C4EA73C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_19C4EA764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;

  return sub_19C4E90A0(a1, a2, a3, a4, *(void (**)(uint64_t *__return_ptr, _QWORD *))(v5 + 16), (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C4DD14C, a5);
}

uint64_t sub_19C4EA784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_19C4EA7A0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_19C4E704C, a3);
}

uint64_t sub_19C4EA7A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD)@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  result = a3(a1, a2, v4[2], v4[3], v4[4], v4[5]);
  if (!v5)
    *a4 = result;
  return result;
}

uint64_t sub_19C4EA7D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;

  return sub_19C4E90A0(a1, a2, a3, a4, *(void (**)(uint64_t *__return_ptr, _QWORD *))(v5 + 16), (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C4DCFE4, a5);
}

_QWORD *sub_19C4EA7F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;

  result = sub_19C4E70A0(a1, a2, *(_QWORD *(**)(uint64_t *__return_ptr))(v3 + 16));
  if (!v4)
    *a3 = result;
  return result;
}

uint64_t sub_19C4EA824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;

  return sub_19C4E90A0(a1, a2, a3, a4, *(void (**)(uint64_t *__return_ptr, _QWORD *))(v5 + 16), (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C4DCE7C, a5);
}

uint64_t sub_19C4EA844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_19C4EA7A0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_19C4E6FF4, a3);
}

uint64_t sub_19C4EA860@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_19C4EA8F0(a1, (uint64_t)sub_19C4EAAD0, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t))sub_19C4DD668, a2);
}

uint64_t sub_19C4EA884@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_19C4EA8F0(a1, (uint64_t)sub_19C4EAA74, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t))sub_19C4DD740, a2);
}

uint64_t sub_19C4EA8A8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_19C4EA8F0(a1, (uint64_t)sub_19C4EAA00, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t))sub_19C4DD818, a2);
}

uint64_t sub_19C4EA8CC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_19C4EA8F0(a1, (uint64_t)sub_19C4EA96C, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t))sub_19C4DD8F0, a2);
}

uint64_t sub_19C4EA8F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, _QWORD *, uint64_t, uint64_t)@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[4];

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v10[2] = a1;
  result = a3(a2, v10, v7, v8);
  *a4 = result & 1;
  return result;
}

uint64_t sub_19C4EA938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v5;

  return sub_19C4E8B58(a1, a2, a3, a4, *(void (**)(_QWORD *__return_ptr, char *))(v5 + 16), (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C4DD2B4, a5);
}

uint64_t sub_19C4EA958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_19C4EAA40(a1, a2, a3);
}

uint64_t sub_19C4EA96C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_19C4E8CC4(a1, *(_QWORD **)(v2 + 16), (uint64_t (*)(_QWORD *))sub_19C4E0744, a2);
}

uint64_t sub_19C4EA98C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v5;

  return sub_19C4E8B58(a1, a2, a3, a4, *(void (**)(_QWORD *__return_ptr, char *))(v5 + 16), (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C4DD14C, a5);
}

uint64_t sub_19C4EA9AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_19C4EA9C8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_19C4E6F40, a3);
}

uint64_t sub_19C4EA9C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD)@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  result = a3(a1, a2, v4[2], v4[3], v4[4], v4[5]);
  if (!v5)
    *a4 = result & 1;
  return result;
}

uint64_t sub_19C4EAA00@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_19C4E8CC4(a1, *(_QWORD **)(v2 + 16), (uint64_t (*)(_QWORD *))sub_19C4E0100, a2);
}

uint64_t sub_19C4EAA20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v5;

  return sub_19C4E8B58(a1, a2, a3, a4, *(void (**)(_QWORD *__return_ptr, char *))(v5 + 16), (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C4DCFE4, a5);
}

uint64_t sub_19C4EAA40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = sub_19C4E6F98(a1, a2, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
  if (!v4)
    *a3 = result & 1;
  return result;
}

uint64_t sub_19C4EAA74@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_19C4E8CC4(a1, *(_QWORD **)(v2 + 16), (uint64_t (*)(_QWORD *))sub_19C4DFAC4, a2);
}

uint64_t sub_19C4EAA94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v5;

  return sub_19C4E8B58(a1, a2, a3, a4, *(void (**)(_QWORD *__return_ptr, char *))(v5 + 16), (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))sub_19C4DCE7C, a5);
}

uint64_t sub_19C4EAAB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_19C4EA9C8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_19C4E6EE4, a3);
}

uint64_t sub_19C4EAAD0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_19C4E8CC4(a1, *(_QWORD **)(v2 + 16), (uint64_t (*)(_QWORD *))sub_19C4DF488, a2);
}

uint64_t sub_19C4EAAF0(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_19C4EAB74()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_19C4EAB98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return nullsub_1(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_19C4EABA4(uint64_t a1, uint64_t a2)
{
  return sub_19C4EA5EC(a1, a2);
}

uint64_t sub_19C4EABBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_19C4E92FC(a1, a2, a3);
}

uint64_t sub_19C4EAC24()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_19C4EACA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t result;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 64))(v14, v13);
  v16 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 72);
  result = v16(a4, a5);
  v18 = *(_QWORD *)(v15 + 16);
  if (v18 == *(_QWORD *)(result + 16))
  {
    v19 = (_QWORD *)result;
    v29 = v16;
    v31 = a1;
    v32 = v10;
    v20 = sub_19C500C0C(0, v18);
    v30 = a3;
    v21 = sub_19C51FC18(a3, v20, v15, v19);
    v23 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v21)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v31, a2, a4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v33 = MLShapedArrayProtocol.scalars.getter(a4, a5);
      swift_getAssociatedTypeWitness();
      v24 = sub_19CAA9AA0();
      v25 = v30;
      swift_bridgeObjectRetain();
      v26 = MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEAF38], v24);
      MLShapedArrayProtocol.init<A>(scalars:shape:)((uint64_t)&v33, v25, a4, v24, a5, v26);
      v27 = v32;
      (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v31, v12, a4);
      v23 = v29(a4, a5);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v12, a4);
    }
    return v23;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_19C4EAE9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 80);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = (uint64_t)v3 + *(_QWORD *)(v7 + 96);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v15 = v8;
  v16 = a3;
  v17 = *(_QWORD *)(v7 + 88);
  v18 = a1;
  v19 = a2;
  (*(void (**)(uint64_t (*)(uint64_t, uint64_t), _BYTE *, uint64_t, uint64_t))(v17 + 152))(sub_19C4EB56C, v14, a3, v8);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_19C4EAFA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t (*)(), uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  int v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  void (*v49)(uint64_t (*)(), uint64_t *, uint64_t, uint64_t, uint64_t);
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61[16];
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v5 = v4;
  v58 = a4;
  v9 = *v5;
  v10 = *(_QWORD *)(*v5 + 80);
  v55 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](a1);
  v51 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v52 = (uint64_t)&v47 - v14;
  v57 = *(char **)(v15 - 8);
  MEMORY[0x1E0C80A78](v13);
  v50 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_19CAA9E18();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v56 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v47 - v21;
  v60 = a3;
  v62 = a3;
  v63 = v5;
  v53 = a2;
  v54 = a1;
  v64 = a1;
  v65 = a2;
  v23 = (uint64_t)v5 + *(_QWORD *)(v9 + 96);
  swift_beginAccess();
  v24 = *(_QWORD *)(v9 + 88);
  v25 = *(void (**)(uint64_t (*)(), uint64_t *, uint64_t, uint64_t, uint64_t))(v24 + 160);
  v59 = v17;
  v26 = v66;
  v25((uint64_t (*)())sub_19C4EB4DC, (uint64_t *)v61, v17, v10, v24);
  result = swift_endAccess();
  if (!v26)
  {
    v48 = v5;
    v49 = v25;
    v28 = v55;
    v29 = v56;
    v66 = 0;
    v30 = v59;
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v56, v22, v59);
    v31 = v57;
    v32 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v57 + 6))(v29, 1, v60);
    v33 = *(void (**)(char *, uint64_t))(v18 + 8);
    if (v32 == 1)
    {
      v56 = *(char **)(v18 + 8);
      v57 = v22;
      v33(v29, v30);
      v34 = (uint64_t)v51;
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v51, v23, v10);
      v35 = v48;
      v36 = v10;
      v37 = *(uint64_t *)((char *)v48 + *(_QWORD *)(*v48 + 104));
      swift_bridgeObjectRetain();
      v38 = v52;
      v39 = v24;
      v40 = sub_19C4EACA4(v52, v34, v37, v36, v24);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v34, v36);
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 40))(v23, v38, v36);
      swift_endAccess();
      *(uint64_t *)((char *)v35 + *(_QWORD *)(*v35 + 112)) = v40;
      v41 = swift_bridgeObjectRelease();
      MEMORY[0x1E0C80A78](v41);
      v42 = v60;
      *(&v47 - 6) = v36;
      *(&v47 - 5) = v42;
      v43 = v54;
      *(&v47 - 4) = v39;
      *(&v47 - 3) = v43;
      *(&v47 - 2) = v53;
      swift_beginAccess();
      v49(sub_19C4EB4F8, &v47 - 8, v42, v36, v39);
      swift_endAccess();
      return ((uint64_t (*)(char *, uint64_t))v56)(v57, v59);
    }
    else
    {
      v33(v22, v30);
      v44 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v31 + 4);
      v45 = v50;
      v46 = v60;
      v44(v50, v29, v60);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v44)(v58, v45, v46);
    }
  }
  return result;
}

uint64_t sub_19C4EB340@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t (*a3)(uint64_t)@<X4>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  if (sub_19C4D4494(a1, *(_QWORD **)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 112))))
  {
    swift_getAssociatedTypeWitness();
    v9 = sub_19CAA9E78();
    result = a3(v9);
    if (v5)
      return result;
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a5, v11, 1, a4);
}

uint64_t sub_19C4EB40C()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_19C4EB45C()
{
  sub_19C4EB40C();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReshapedStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReshapedStorage);
}

uint64_t sub_19C4EB48C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_19C4EB49C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_19C4EB4AC()
{
  return 1;
}

uint64_t sub_19C4EB4B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C4EAE9C(a1, a2, a3);
}

uint64_t sub_19C4EB4C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_19C4EAFA4(a1, a2, a3, a4);
}

uint64_t sub_19C4EB4DC@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_19C4EB340(a1, *(_QWORD *)(v2 + 24), *(uint64_t (**)(uint64_t))(v2 + 32), *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_19C4EB4F8()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(uint64_t (**)(uint64_t))(v0 + 40);
  swift_getAssociatedTypeWitness();
  v2 = sub_19CAA9E78();
  return v1(v2);
}

uint64_t sub_19C4EB56C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v7;

  v5 = *(uint64_t (**)(uint64_t))(v2 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x1A1AD44E4](a1, a2, AssociatedTypeWitness);
  return v5(v7);
}

uint64_t sub_19C4EB5E4(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 80);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v27 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v27 - v12, a1, v7);
  v14 = *(_QWORD *)(v6 + 88);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 64))(v7, v14);
  v16 = *(_QWORD *)(result + 16);
  if (v16)
  {
    v17 = (uint64_t *)(result + 32);
    v18 = 1;
    while (1)
    {
      v19 = *v17++;
      v20 = v18 * v19;
      if ((unsigned __int128)(v18 * (__int128)v19) >> 64 != (v18 * v19) >> 63)
        break;
      v18 = v20;
      if (!--v16)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_16;
  }
  v20 = 1;
LABEL_7:
  result = swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(a2 + 16);
  if (v21)
  {
    v22 = (uint64_t *)(a2 + 32);
    v23 = 1;
    while (1)
    {
      v24 = *v22++;
      v25 = v23 * v24;
      if ((unsigned __int128)(v23 * (__int128)v24) >> 64 != (v23 * v24) >> 63)
        break;
      v23 = v25;
      if (!--v21)
        goto LABEL_13;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v25 = 1;
LABEL_13:
  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  if (v20 == v25)
  {
    v26 = sub_19C4EACA4((uint64_t)v11, a1, a2, v7, v14);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))((uint64_t)v3 + *(_QWORD *)(*v3 + 96), v11, v7);
    *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 112)) = v26;
    *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 104)) = a2;
    return (uint64_t)v3;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_19C4EB790(uint64_t a1, unint64_t a2)
{
  swift_allocObject();
  return sub_19C4EB5E4(a1, a2);
}

uint64_t sub_19C4EB7D8(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v31 = (char *)&v24 - v13;
  v36 = a4;
  MEMORY[0x1E0C80A78](v12);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v24 - v16;
  v18 = sub_19CAA9C08();
  if (!v18)
    return sub_19CAA9A4C();
  v19 = v18;
  v25 = v15;
  v39 = sub_19CAAA034();
  v32 = sub_19CAAA040();
  sub_19CAA9FD4();
  v36 = v17;
  result = sub_19CAA9BFC();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))sub_19CAA9C8C();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      sub_19CAAA028();
      sub_19CAA9C38();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

Swift::Int __swiftcall MLShapedArrayProtocol.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFADD__(_, offsetBy);
  result = _ + offsetBy;
  if (v2)
    __break(1u);
  return result;
}

uint64_t MLShapedArrayProtocol.subscript.setter(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v9;
  uint64_t (*v10)(_OWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _OWORD v15[3];

  __swift_instantiateConcreteTypeFromMangledName(qword_1EE422D98);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_19CAE8180;
  *(_QWORD *)(v8 + 32) = a2;
  v9 = a1[1];
  v15[0] = *a1;
  v15[1] = v9;
  v15[2] = a1[2];
  v14 = v8;
  v10 = *(uint64_t (**)(_OWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 112);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424190);
  v12 = sub_19C4D60FC(&qword_1EE423578, (uint64_t *)&unk_1EE424190, MEMORY[0x1E0DEAF50]);
  return v10(v15, &v14, v11, v12, a3, a4);
}

{
  sub_19C4F0E90(a1, a2, a3, a4);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v12;
  _OWORD v13[3];

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423580);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_19CAE8180;
  sub_19C4F0F24(a2, v8 + 32);
  v9 = a1[1];
  v13[0] = *a1;
  v13[1] = v9;
  v13[2] = a1[2];
  v12 = v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423590);
  sub_19C4D60FC(&qword_1EE423598, &qword_1EE423590, MEMORY[0x1E0DEAF50]);
  sub_19C4F0D48(v13, (uint64_t)&v12, a3, v10, a4);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_0(a2);
}

{
  __int128 v6;
  uint64_t (*v7)(_OWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _OWORD v12[3];

  v6 = a1[1];
  v12[0] = *a1;
  v12[1] = v6;
  v12[2] = a1[2];
  v11 = a2;
  v7 = *(uint64_t (**)(_OWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 112);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424190);
  v9 = sub_19C4D60FC(&qword_1EE423578, (uint64_t *)&unk_1EE424190, MEMORY[0x1E0DEAF50]);
  return v7(v12, &v11, v8, v9, a3, a4);
}

void (*MLShapedArrayProtocol.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[8] = a4;
  v9[9] = v4;
  v9[6] = a2;
  v9[7] = a3;
  MLShapedArrayProtocol.subscript.getter(a2, a3, a4);
  return sub_19C4EBBFC;
}

{
  uint64_t v4;
  _QWORD *v9;

  v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[8] = a4;
  v9[9] = v4;
  v9[6] = a2;
  v9[7] = a3;
  MLShapedArrayProtocol.subscript.getter(a2, a3, a4);
  return sub_19C4ED0AC;
}

{
  uint64_t v4;
  _QWORD *v9;
  _QWORD *v10;
  void (*v11)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v9 = malloc(0x58uLL);
  *a1 = v9;
  v9[9] = a4;
  v9[10] = v4;
  v9[7] = a2;
  v9[8] = a3;
  v9[6] = a2;
  v10 = v9 + 6;
  v11 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 104);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424190);
  v13 = sub_19C4D60FC(&qword_1EE423578, (uint64_t *)&unk_1EE424190, MEMORY[0x1E0DEAF50]);
  v11(v10, v12, v13, a3, a4);
  return sub_19C4ED8AC;
}

void sub_19C4EBBFC(_QWORD **a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = (*a1)[3];
  v7 = (*a1)[4];
  v6 = (*a1)[5];
  v8 = (*a1)[8];
  v10 = (*a1)[6];
  v9 = (*a1)[7];
  *(_QWORD *)&v11 = **a1;
  *((_QWORD *)&v11 + 1) = v3;
  v12 = v4;
  v13 = v5;
  v14 = v7;
  v15 = v6;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MLShapedArrayProtocol.subscript.setter(&v11, v10, v9, v8);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    MLShapedArrayProtocol.subscript.setter(&v11, v10, v9, v8);
  }
  free(v2);
}

uint64_t MLShapedArrayProtocol.subscript.setter(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t (*v15)(_OWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _OWORD v20[3];

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423580);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
  *(_QWORD *)(inited + 56) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424180);
  *(_QWORD *)(inited + 64) = &protocol witness table for <> Range<A>;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  v12 = (_QWORD *)sub_19C4EC478(v5, a4, a4, a5);
  v13 = sub_19C553B6C(inited, v12);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE424300);
  swift_arrayDestroy();
  v14 = a1[1];
  v20[0] = *a1;
  v20[1] = v14;
  v20[2] = a1[2];
  v19 = v13;
  v15 = *(uint64_t (**)(_OWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 88);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4232C0);
  v17 = sub_19C4D60FC(&qword_1EE423588, &qword_1EE4232C0, MEMORY[0x1E0DEAF50]);
  return v15(v20, &v19, v16, v17, a4, a5);
}

{
  sub_19C4F0D48(a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
}

void (*MLShapedArrayProtocol.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(_QWORD **a1, char a2)
{
  uint64_t v5;
  _QWORD *v11;

  v11 = malloc(0x58uLL);
  *a1 = v11;
  v11[9] = a5;
  v11[10] = v5;
  v11[7] = a3;
  v11[8] = a4;
  v11[6] = a2;
  MLShapedArrayProtocol.subscript.getter(a2, a3, a4, a5);
  return sub_19C4EBEC8;
}

void sub_19C4EBEC8(_QWORD **a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = (*a1)[3];
  v7 = (*a1)[4];
  v6 = (*a1)[5];
  v8 = (*a1)[9];
  v10 = (*a1)[7];
  v9 = (*a1)[8];
  v11 = (*a1)[6];
  *(_QWORD *)&v12 = **a1;
  *((_QWORD *)&v12 + 1) = v3;
  v13 = v4;
  v14 = v5;
  v15 = v7;
  v16 = v6;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MLShapedArrayProtocol.subscript.setter(&v12, v11, v10, v9, v8);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    MLShapedArrayProtocol.subscript.setter(&v12, v11, v10, v9, v8);
  }
  free(v2);
}

uint64_t MLShapedArrayProtocol.init(arrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = a1;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EE422D98);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_19CAE8180;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = swift_bridgeObjectRetain();
  v8 = MEMORY[0x1A1AD45B0](v7, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 32) = v8;
  v9 = sub_19CAA9AA0();
  v10 = MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEAF38], v9);
  return MLShapedArrayProtocol.init<A>(scalars:shape:)((uint64_t)&v12, v5, a2, v9, a3, v10);
}

void (*sub_19C4EC0C0(void **a1, uint64_t a2, uint64_t a3, uint64_t a4))(void **a1)
{
  *a1 = malloc(0x30uLL);
  MLShapedArrayProtocol.subscript.getter(a2, a3, a4);
  return sub_19C4EC128;
}

void sub_19C4EC128(void **a1)
{
  void *v1;

  v1 = *a1;
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t MLShapedArrayProtocol.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t inited;
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423580);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
  *(_QWORD *)(inited + 56) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424180);
  *(_QWORD *)(inited + 64) = &protocol witness table for <> Range<A>;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  v10 = (_QWORD *)sub_19C4EC478(v4, a3, a3, a4);
  v11 = sub_19C553B6C(inited, v10);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE424300);
  swift_arrayDestroy();
  v16 = v11;
  v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 80);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4232C0);
  v14 = sub_19C4D60FC(&qword_1EE423588, &qword_1EE4232C0, MEMORY[0x1E0DEAF50]);
  v12(&v16, v13, v14, a3, a4);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v8 + 16))((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE424300);
  v9 = sub_19CAA9AAC();
  v10 = (_QWORD *)sub_19C4EC478(v4, a2, a2, a4);
  v11 = sub_19C553B6C(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = v11;
  v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 80);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4232C0);
  v14 = sub_19C4D60FC(&qword_1EE423588, &qword_1EE4232C0, MEMORY[0x1E0DEAF50]);
  v12(&v17, v13, v14, a2, a4);
  return swift_bridgeObjectRelease();
}

uint64_t MLShapedArrayProtocol.count.getter(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(uint64_t (**)(void))(a2 + 64);
  v5 = *(_QWORD *)(v4() + 16);
  swift_bridgeObjectRelease();
  if (!v5)
    return 0;
  result = ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
  if (*(_QWORD *)(result + 16))
  {
    v7 = *(_QWORD *)(result + 32);
    swift_bridgeObjectRelease();
    return v7;
  }
  __break(1u);
  return result;
}

Swift::Int __swiftcall MLShapedArrayProtocol.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t MLShapedArrayProtocol.scalars.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[6];

  v6[2] = a1;
  v6[3] = a2;
  swift_getAssociatedTypeWitness();
  v4 = sub_19CAA9AA0();
  sub_19C4CF69C((uint64_t)sub_19C4EE290, (uint64_t)v6, a1, v4, a2);
  return v6[5];
}

uint64_t MLShapedArrayProtocol.init<A>(scalars:shape:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void (*v11)(uint64_t, uint64_t (*)(_QWORD *, _QWORD *), _QWORD *, uint64_t, uint64_t);
  _QWORD v13[10];

  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  v13[5] = a6;
  v13[6] = a2;
  v13[7] = a1;
  v11 = *(void (**)(uint64_t, uint64_t (*)(_QWORD *, _QWORD *), _QWORD *, uint64_t, uint64_t))(a5 + 56);
  swift_bridgeObjectRetain();
  v11(a2, sub_19C4F01A0, v13, a3, a5);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
}

uint64_t sub_19C4EC478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v5 = v4;
  v10 = *(_QWORD *)(a3 - 8);
  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v44 - v14;
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 64);
  v48 = v16;
  v19 = *(_QWORD *)(v17(v18, v16) + 16);
  swift_bridgeObjectRelease();
  v20 = MEMORY[0x1E0DEE9D8];
  if (!v19)
    return v20;
  v47 = v5;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v21(v15, a1, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for MLShapedArray(0, AssociatedTypeWitness, AssociatedConformanceWitness, v24);
  if (swift_dynamicCast())
  {
    swift_unknownObjectRelease();
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(a2, a4);
    v26 = *(_QWORD *)(v25 + 16);
    if (v26)
    {
      v55 = v20;
      result = sub_19C556FAC(0, v26, 0);
      v28 = 0;
      v20 = v55;
      while (1)
      {
        v29 = *(_QWORD *)(v25 + 8 * v28 + 32);
        if (v29 < 0)
          break;
        v55 = v20;
        v31 = *(_QWORD *)(v20 + 16);
        v30 = *(_QWORD *)(v20 + 24);
        if (v31 >= v30 >> 1)
        {
          result = sub_19C556FAC(v30 > 1, v31 + 1, 1);
          v20 = v55;
        }
        ++v28;
        *(_QWORD *)(v20 + 16) = v31 + 1;
        v32 = v20 + 16 * v31;
        *(_QWORD *)(v32 + 32) = 0;
        *(_QWORD *)(v32 + 40) = v29;
        if (v26 == v28)
          goto LABEL_12;
      }
      __break(1u);
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  v45 = a4;
  v46 = a2;
  v21(v13, a1, a3);
  type metadata accessor for MLShapedArraySlice(0, AssociatedTypeWitness, AssociatedConformanceWitness, v33);
  if (swift_dynamicCast())
  {
    v20 = v58;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    return v20;
  }
  __swift_instantiateConcreteTypeFromMangledName(qword_1EE421948);
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_19CAE8180;
  v35 = v48;
  sub_19CAA9BFC();
  v36 = v55;
  result = sub_19CAA9C2C();
  v37 = v49;
  if (v49 >= v36)
  {
    *(_QWORD *)(v34 + 32) = v36;
    *(_QWORD *)(v34 + 40) = v37;
    sub_19CAA9BFC();
    MLShapedArrayProtocol.subscript.getter(v54, a3, v35);
    v49 = v55;
    v44 = v56;
    v50 = v56;
    v51 = v57;
    v52 = v58;
    v53 = v59;
    v38 = swift_getAssociatedTypeWitness();
    v39 = swift_getAssociatedConformanceWitness();
    v41 = type metadata accessor for MLShapedArraySlice(0, v38, v39, v40);
    v42 = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, v41);
    v43 = sub_19C4EC478(&v49, v46, v41, v45, v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v55 = v34;
    sub_19C503874(v43);
    return v55;
  }
LABEL_17:
  __break(1u);
  return result;
}

BOOL MLShapedArrayProtocol.isScalar.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)((*(uint64_t (**)(void))(a2 + 64))() + 16);
  swift_bridgeObjectRelease();
  return v2 == 0;
}

uint64_t MLShapedArrayProtocol.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(qword_1EE422D98);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_19CAE8180;
  *(_QWORD *)(v6 + 32) = a1;
  v11 = v6;
  v7 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 104);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424190);
  v9 = sub_19C4D60FC(&qword_1EE423578, (uint64_t *)&unk_1EE424190, MEMORY[0x1E0DEAF50]);
  v7(&v11, v8, v9, a2, a3);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v5;
  uint64_t v7;

  v7 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423590);
  sub_19C4D60FC(&qword_1EE423598, &qword_1EE423590, MEMORY[0x1E0DEAF50]);
  return MLShapedArrayProtocol.subscript.getter((uint64_t)&v7, a2, v5, a3);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423580);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_19CAE8180;
  sub_19C4F0F24(a1, v6 + 32);
  v9 = v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423590);
  sub_19C4D60FC(&qword_1EE423598, &qword_1EE423590, MEMORY[0x1E0DEAF50]);
  MLShapedArrayProtocol.subscript.getter((uint64_t)&v9, a2, v7, a3);
  return swift_bridgeObjectRelease();
}

{
  uint64_t (*v5)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = a1;
  v5 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 104);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424190);
  v7 = sub_19C4D60FC(&qword_1EE423578, (uint64_t *)&unk_1EE424190, MEMORY[0x1E0DEAF50]);
  return v5(&v9, v6, v7, a2, a3);
}

{
  uint64_t (*v5)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = a1;
  v5 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 128);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424190);
  v7 = sub_19C4D60FC(&qword_1EE423578, (uint64_t *)&unk_1EE424190, MEMORY[0x1E0DEAF50]);
  return v5(&v9, v6, v7, a2, a3);
}

double sub_19C4ECA94@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  MLShapedArrayProtocol.subscript.getter(a1, *(_QWORD *)(a2 + a1 - 32), *(_QWORD *)(a2 + a1 - 24), *(_QWORD *)(a2 + a1 - 16));
  *a3 = v5;
  a3[1] = v6;
  result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

uint64_t sub_19C4ECAE8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a4 + a3 - 32);
  v6 = *(_QWORD *)(a4 + a3 - 24);
  v7 = *(_QWORD *)(a4 + a3 - 16);
  v8 = a1[3];
  v9 = a1[4];
  v10 = a1[5];
  v12 = *a1;
  v13 = *(_OWORD *)(a1 + 1);
  v14 = v8;
  v15 = v9;
  v16 = v10;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_19C4F0D48(&v12, a3, v5, v6, v7);
}

void (*MLShapedArrayProtocol.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(_QWORD **a1, char a2)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t v14;

  v13 = malloc(0x68uLL);
  *a1 = v13;
  v13[8] = a5;
  v13[9] = a6;
  v13[6] = a3;
  v13[7] = a4;
  v14 = *(_QWORD *)(a4 - 8);
  v13[10] = v6;
  v13[11] = v14;
  v13[12] = malloc(*(_QWORD *)(v14 + 64));
  (*(void (**)(void))(v14 + 16))();
  MLShapedArrayProtocol.subscript.getter(a2, a3, a4, a5);
  return sub_19C4ECC90;
}

void sub_19C4ECC90(_QWORD **a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = (*a1)[3];
  v7 = (*a1)[4];
  v6 = (*a1)[5];
  v8 = (void *)(*a1)[12];
  v12 = (*a1)[11];
  v9 = (*a1)[7];
  v10 = (*a1)[8];
  v11 = (*a1)[6];
  *(_QWORD *)&v13 = **a1;
  *((_QWORD *)&v13 + 1) = v3;
  v14 = v4;
  v15 = v5;
  v16 = v7;
  v17 = v6;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_19C4F0D48(&v13, (uint64_t)v8, v11, v9, v10);
    (*(void (**)(void *, uint64_t))(v12 + 8))(v8, v9);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_19C4F0D48(&v13, (uint64_t)v8, v11, v9, v10);
    (*(void (**)(void *, uint64_t))(v12 + 8))(v8, v9);
  }
  free(v8);
  free(v2);
}

double sub_19C4ECDDC@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  MLShapedArrayProtocol.subscript.getter(*a1, a1[1], *(uint64_t *)((char *)a1 + a2 - 16), *(uint64_t *)((char *)a1 + a2 - 8));
  *a3 = v5;
  a3[1] = v6;
  result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

uint64_t sub_19C4ECE28(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(uint64_t *)((char *)a3 + a4 - 16);
  v5 = *(uint64_t *)((char *)a3 + a4 - 8);
  v6 = *a3;
  v7 = a3[1];
  v8 = a1[3];
  v9 = a1[4];
  v10 = a1[5];
  v12 = *a1;
  v13 = *(_OWORD *)(a1 + 1);
  v14 = v8;
  v15 = v9;
  v16 = v10;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return MLShapedArrayProtocol.subscript.setter(&v12, v6, v7, v4, v5);
}

uint64_t sub_19C4ECF60(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(uint64_t *)((char *)a3 + a4 - 16);
  v5 = *(uint64_t *)((char *)a3 + a4 - 8);
  v6 = *a3;
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v11 = *a1;
  v12 = *(_OWORD *)(a1 + 1);
  v13 = v7;
  v14 = v8;
  v15 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C4F0E90(&v11, v6, v4, v5);
  return swift_bridgeObjectRelease();
}

void sub_19C4ED0AC(_QWORD **a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = (*a1)[3];
  v7 = (*a1)[4];
  v6 = (*a1)[5];
  v8 = (*a1)[8];
  v9 = (*a1)[6];
  v10 = (*a1)[7];
  *(_QWORD *)&v11 = **a1;
  *((_QWORD *)&v11 + 1) = v3;
  v12 = v4;
  v13 = v5;
  v14 = v7;
  v15 = v6;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_19C4F0E90(&v11, v9, v10, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_19C4F0E90(&v11, v9, v10, v8);
  }
  swift_bridgeObjectRelease();
  free(v2);
}

double sub_19C4ED294@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  MLShapedArrayProtocol.subscript.getter(a1, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8));
  *a3 = v5;
  a3[1] = v6;
  result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

uint64_t sub_19C4ED2E4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[40];

  v5 = *(_QWORD *)(a4 + a3 - 16);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  sub_19C4F0F24(a3, (uint64_t)v16);
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v11 = *a1;
  v12 = *(_OWORD *)(a1 + 1);
  v13 = v7;
  v14 = v8;
  v15 = v9;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return MLShapedArrayProtocol.subscript.setter(&v11, (uint64_t)v16, v5, v6);
}

void (*MLShapedArrayProtocol.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = malloc(0x98uLL);
  *a1 = v9;
  v9[17] = a4;
  v9[18] = v4;
  v9[16] = a3;
  sub_19C4F0F24(a2, (uint64_t)(v9 + 6));
  MLShapedArrayProtocol.subscript.getter(a2, a3, a4);
  return sub_19C4ED4FC;
}

void sub_19C4ED4FC(uint64_t **a1, char a2)
{
  uint64_t *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *a1;
  v3 = (__int128 *)(*a1 + 6);
  v5 = **a1;
  v4 = (*a1)[1];
  v7 = (*a1)[2];
  v6 = (*a1)[3];
  v8 = (*a1)[4];
  v9 = (*a1)[5];
  if ((a2 & 1) != 0)
  {
    v10 = v2[17];
    v11 = v2[16];
    sub_19C4F0F68(v3, (uint64_t)(v2 + 11));
    *(_QWORD *)&v14 = v5;
    *((_QWORD *)&v14 + 1) = v4;
    v15 = v7;
    v16 = v6;
    v17 = v8;
    v18 = v9;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MLShapedArrayProtocol.subscript.setter(&v14, (uint64_t)(v2 + 11), v11, v10);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = v2[17];
    v13 = v2[16];
    *(_QWORD *)&v14 = **a1;
    *((_QWORD *)&v14 + 1) = v4;
    v15 = v7;
    v16 = v6;
    v17 = v8;
    v18 = v9;
    MLShapedArrayProtocol.subscript.setter(&v14, (uint64_t)v3, v13, v12);
  }
  free(v2);
}

uint64_t sub_19C4ED6A8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(uint64_t *)((char *)a3 + a4 - 16);
  v5 = *(uint64_t *)((char *)a3 + a4 - 8);
  v6 = *a3;
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v11 = *a1;
  v12 = *(_OWORD *)(a1 + 1);
  v13 = v7;
  v14 = v8;
  v15 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return MLShapedArrayProtocol.subscript.setter(&v11, v6, v4, v5);
}

void sub_19C4ED8AC(_QWORD **a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = (*a1)[3];
  v7 = (*a1)[4];
  v6 = (*a1)[5];
  v8 = (*a1)[9];
  v10 = (*a1)[7];
  v9 = (*a1)[8];
  *(_QWORD *)&v11 = **a1;
  *((_QWORD *)&v11 + 1) = v3;
  v12 = v4;
  v13 = v5;
  v14 = v7;
  v15 = v6;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MLShapedArrayProtocol.subscript.setter(&v11, v10, v9, v8);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    MLShapedArrayProtocol.subscript.setter(&v11, v10, v9, v8);
  }
  free(v2);
}

uint64_t MLShapedArrayProtocol.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;

  sub_19C4F0F80(a1, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void (*MLShapedArrayProtocol.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;
  void (*v13)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v9 = malloc(0x48uLL);
  *a1 = v9;
  v9[3] = a4;
  v9[4] = v4;
  v9[1] = a2;
  v9[2] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[5] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[6] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[7] = malloc(v12);
  v9[8] = malloc(v12);
  *v9 = a2;
  v13 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 128);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424190);
  v15 = sub_19C4D60FC(&qword_1EE423578, (uint64_t *)&unk_1EE424190, MEMORY[0x1E0DEAF50]);
  v13(v9, v14, v15, a3, a4);
  return sub_19C4EDBA4;
}

void sub_19C4EDBA4(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 56);
  v4 = *(void **)(*(_QWORD *)a1 + 64);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 56), v4, v5);
    swift_bridgeObjectRetain();
    sub_19C4F0F80((uint64_t)v3, v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_19C4F0F80((uint64_t)v4, v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

void MLShapedArrayProtocol.subscript.getter(uint64_t a1@<X2>, uint64_t a2@<X3>, _OWORD *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  _QWORD v14[5];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_19CAA9E18();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14[-1] - v8;
  v10 = *(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2) + 16);
  swift_bridgeObjectRelease();
  if (v10)
  {
    sub_19CAA9BFC();
    v11 = v13;
    v14[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235A0);
    v14[4] = &protocol witness table for <> PartialRangeFrom<A>;
    v14[0] = v11;
    MLShapedArrayProtocol.subscript.getter((uint64_t)v14, a1, a2);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
  }
  else
  {
    MLShapedArrayProtocol.scalar.getter(a1, a2, (uint64_t)v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v9, 1, AssociatedTypeWitness) == 1)
    {
      __break(1u);
    }
    else
    {
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      MLShapedArraySlice.init(scalar:)((uint64_t)v9, AssociatedTypeWitness, AssociatedConformanceWitness, a3);
    }
  }
}

uint64_t MLShapedArrayProtocol.scalar.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  v6 = *(_QWORD *)((*(uint64_t (**)(void))(a2 + 64))() + 16);
  swift_bridgeObjectRelease();
  if (v6)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a3, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    MLShapedArrayProtocol.scalars.getter(a1, a2);
    swift_getAssociatedTypeWitness();
    v9 = sub_19CAA9AA0();
    MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEAF50], v9);
    sub_19CAA9C5C();
    return swift_bridgeObjectRelease();
  }
}

uint64_t MLShapedArrayProtocol.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19C4F11FC(a1, a4, a5);
}

uint64_t MLShapedArrayProtocol.scalar.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  sub_19C4F1070(a1, a2, a3);
  swift_getAssociatedTypeWitness();
  v4 = sub_19CAA9E18();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void (*MLShapedArrayProtocol.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v5;
  _QWORD *v9;

  v9 = malloc(0x48uLL);
  *a1 = v9;
  v9[7] = a5;
  v9[8] = v5;
  v9[6] = a4;
  MLShapedArrayProtocol.subscript.getter(a4, a5, v9);
  return sub_19C4EDFC4;
}

void sub_19C4EDFC4(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[6];

  v2 = *a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = (*a1)[3];
  v7 = (*a1)[4];
  v6 = (*a1)[5];
  v8 = (*a1)[7];
  v9 = (*a1)[6];
  v10[0] = **a1;
  v10[1] = v3;
  v10[2] = v4;
  v10[3] = v5;
  v10[4] = v7;
  v10[5] = v6;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_19C4F11FC(v10, v9, v8);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_19C4F11FC(v10, v9, v8);
  }
  free(v2);
}

uint64_t MLShapedArrayProtocol.scalarCount.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(void))(a2 + 64))();
  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = (uint64_t *)(result + 32);
    v5 = 1;
    while (1)
    {
      v6 = *v4++;
      v7 = v5 * v6;
      if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
        break;
      v5 = v7;
      if (!--v3)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    v7 = 1;
LABEL_7:
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

uint64_t sub_19C4EE110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a4 + a3 - 16);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  v6 = swift_bridgeObjectRetain();
  sub_19C4F1408(v6, v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t MLShapedArrayProtocol.scalars.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19C4F1408(a1, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_19C4EE17C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = *(_OWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = v3;
  v11 = v9;
  sub_19C4CF9E8((uint64_t)&v9 + 8, (uint64_t)v10);
  sub_19C4EA73C((uint64_t)&v13);
  sub_19C4EA73C((uint64_t)&v12);
  sub_19C4EA73C((uint64_t)&v11);
  sub_19C4EA73C((uint64_t)v10);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for ScalarSequence(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  MEMORY[0x1A1AD76AC](&unk_19CAE7894, v7);
  result = sub_19CAA9AAC();
  *a2 = result;
  return result;
}

uint64_t sub_19C4EE290@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_19C4EE17C(a1, a2);
}

uint64_t sub_19C4EE2A8(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;

  v60 = a4;
  v61 = a1;
  v62 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v58 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v59 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v57 = (char *)&v54 - v6;
  v7 = *(_QWORD *)(a2 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v63 = MEMORY[0x1E0DEE9D8];
    sub_19C556FAC(0, v7, 0);
    result = v63;
    v9 = (uint64_t *)(a2 + 32);
    while (1)
    {
      v11 = *v9++;
      v10 = v11;
      if (v11 < 0)
        break;
      v63 = result;
      v13 = *(_QWORD *)(result + 16);
      v12 = *(_QWORD *)(result + 24);
      if (v13 >= v12 >> 1)
      {
        sub_19C556FAC(v12 > 1, v13 + 1, 1);
        result = v63;
      }
      *(_QWORD *)(result + 16) = v13 + 1;
      v14 = result + 16 * v13;
      *(_QWORD *)(v14 + 32) = 0;
      *(_QWORD *)(v14 + 40) = v10;
      if (!--v7)
        goto LABEL_7;
    }
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
  }
  else
  {
LABEL_7:
    result = (uint64_t)sub_19C5ADD74((_QWORD *)result);
    v16 = result;
    if (v15)
    {
      v17 = v15;
      v18 = 0;
      v19 = result + 32;
      v55 = result + 8;
      v56 = result + 32;
      v54 = v62 + 6;
      do
      {
        v23 = v17;
        v24 = v17 + 2;
        v25 = v17[2];
        if (v25)
        {
          v26 = v25 - 1;
          v27 = v17[v25 + 3];
          v28 = __OFADD__(v27, 1);
          v29 = v27 + 1;
          if (v28)
            goto LABEL_67;
          if (v25 > *(_QWORD *)(v16 + 16))
            goto LABEL_68;
          if (v29 >= *(_QWORD *)(v19 + 16 * v26 + 8))
          {
            result = swift_bridgeObjectRetain();
            if (v25 != 1)
            {
              v30 = (int64_t *)(v55 + 16 * v25);
              v31 = v25;
              while (v17)
              {
                result = swift_isUniquelyReferenced_nonNull_native();
                if ((result & 1) == 0)
                {
                  result = (uint64_t)sub_19C503550(v17);
                  v17 = (_QWORD *)result;
                }
                v32 = v31 - 1;
                if ((int64_t)(v31 - 1) >= v17[2])
                {
                  __break(1u);
LABEL_61:
                  __break(1u);
LABEL_62:
                  __break(1u);
LABEL_63:
                  __break(1u);
                  goto LABEL_64;
                }
                v17[v31 + 3] = 0;
                v26 = v31 - 2;
                if ((uint64_t)(v31 - 2) >= (uint64_t)*v24)
                  goto LABEL_61;
                v33 = v24[v31];
                v28 = __OFADD__(v33, 1);
                v34 = v33 + 1;
                if (v28)
                  goto LABEL_62;
                if (v26 >= *(_QWORD *)(v16 + 16))
                  goto LABEL_63;
                if (v34 < *v30)
                {
                  v19 = v56;
                  goto LABEL_30;
                }
                v30 -= 2;
                --v31;
                if (v32 == 1)
                  goto LABEL_28;
              }
              goto LABEL_81;
            }
LABEL_28:
            result = swift_bridgeObjectRelease();
            v17 = 0;
            v19 = v56;
          }
          else
          {
            swift_bridgeObjectRetain();
LABEL_30:
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_19C503550(v17);
              v17 = (_QWORD *)result;
            }
            if (v26 >= v17[2])
              goto LABEL_75;
            v35 = v17[v26 + 4];
            v28 = __OFADD__(v35, 1);
            v36 = v35 + 1;
            if (v28)
              goto LABEL_76;
            v17[v26 + 4] = v36;
          }
        }
        else
        {
          result = swift_bridgeObjectRetain();
        }
        v37 = v18 + 1;
        if (__OFADD__(v18, 1))
          goto LABEL_65;
        v38 = *v24;
        v39 = v62[2];
        if (v39 < *v24)
          goto LABEL_66;
        v40 = *v61;
        if (v25)
        {
          if (!v38)
            goto LABEL_69;
          v41 = v23[4];
          v42 = v62[4];
          v20 = v41 * v42;
          if ((unsigned __int128)(v41 * (__int128)v42) >> 64 != (v41 * v42) >> 63)
            goto LABEL_70;
          if (v25 != 1)
          {
            if (v38 < 2)
              goto LABEL_77;
            if (v39 != 1)
            {
              v43 = v23[5];
              v44 = v62[5];
              v45 = v43 * v44;
              if ((unsigned __int128)(v43 * (__int128)v44) >> 64 != (v43 * v44) >> 63)
                goto LABEL_78;
              v28 = __OFADD__(v20, v45);
              v20 += v45;
              if (v28)
                goto LABEL_79;
              if (v25 != 2)
              {
                v46 = v38 >= 3;
                v47 = v38 - 3;
                if (!v46)
                  goto LABEL_80;
                v48 = v39 - 2;
                if (v39 != 2)
                {
                  v49 = v23 + 6;
                  if (v39 <= 2)
                    v39 = 2;
                  v50 = v39 - 2;
                  v51 = v25 - 3;
                  v52 = v54;
                  while (v50)
                  {
                    v53 = *v49 * *v52;
                    if ((unsigned __int128)(*v49 * (__int128)*v52) >> 64 != v53 >> 63)
                      goto LABEL_72;
                    v28 = __OFADD__(v20, v53);
                    v20 += v53;
                    if (v28)
                      goto LABEL_73;
                    if (!v51)
                      goto LABEL_10;
                    if (!v47)
                      goto LABEL_74;
                    ++v52;
                    ++v49;
                    --v47;
                    --v50;
                    --v51;
                    if (!--v48)
                      goto LABEL_10;
                  }
                  goto LABEL_71;
                }
              }
            }
          }
        }
        else
        {
          v20 = 0;
        }
LABEL_10:
        swift_bridgeObjectRelease();
        v21 = v57;
        v22 = v59;
        sub_19CAA9AB8();
        result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v58 + 40))(v40 + *(_QWORD *)(v58 + 72) * v20, v21, v22);
        v18 = v37;
      }
      while (v17);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*MLShapedArrayProtocol.scalars.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = MLShapedArrayProtocol.scalars.getter(a2, a3);
  return sub_19C4EE740;
}

uint64_t sub_19C4EE740(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[2];
  v3 = a1[1];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v5 = swift_bridgeObjectRetain();
    sub_19C4F1408(v5, v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_19C4F1408(v4, v3, v2);
  }
  return swift_bridgeObjectRelease();
}

void (*MLShapedArrayProtocol.scalar.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  swift_getAssociatedTypeWitness();
  v8 = sub_19CAA9E18();
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v11 = malloc(v10);
  v7[6] = v11;
  MLShapedArrayProtocol.scalar.getter(a2, a3, (uint64_t)v11);
  return sub_19C4EE858;
}

void sub_19C4EE858(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[5];
  v4 = (void *)(*a1)[6];
  v5 = (*a1)[3];
  v6 = (*a1)[4];
  v7 = (*a1)[1];
  v8 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[5], v4, v5);
    sub_19C4F1070((uint64_t)v3, v8, v7);
    v9 = *(void (**)(void *, uint64_t))(v6 + 8);
    v9(v3, v5);
  }
  else
  {
    sub_19C4F1070((*a1)[6], v8, v7);
    v9 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v9(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t MLShapedArrayProtocol.fill(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_19C556F60(AssociatedTypeWitness, AssociatedTypeWitness);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  swift_allocObject();
  v8 = sub_19CAA9A1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, a1, AssociatedTypeWitness);
  v13 = sub_19C55283C(v8);
  v10 = sub_19CAA9AA0();
  v11 = MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEAF50], v10);
  MLShapedArrayProtocol.fill<A>(with:)((uint64_t)&v13, a2, v10, a3, v11);
  return swift_bridgeObjectRelease();
}

uint64_t MLShapedArrayProtocol.fill<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = &v22[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for LoopIterator(0, v13, v15, v14);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = &v22[-v18];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  sub_19C5295A0((uint64_t)v12, a3, a5, (uint64_t)v19);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = a5;
  v27 = v19;
  (*(void (**)(uint64_t (*)(uint64_t *, uint64_t, _QWORD *), char *, uint64_t, uint64_t, uint64_t))(a4 + 160))(sub_19C4F14D8, v22, MEMORY[0x1E0DEE9C0] + 8, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t sub_19C4EEB48(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;

  v72 = a4;
  v73 = a1;
  v69 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = sub_19CAA9E18();
  MEMORY[0x1E0C80A78](v12);
  v71 = (uint64_t)&v64 - v13;
  v14 = *(_QWORD *)(a2 + 16);
  result = MEMORY[0x1E0DEE9D8];
  v67 = a6;
  if (v14)
  {
    v74 = MEMORY[0x1E0DEE9D8];
    sub_19C556FAC(0, v14, 0);
    result = v74;
    v16 = (uint64_t *)(a2 + 32);
    while (1)
    {
      v18 = *v16++;
      v17 = v18;
      if (v18 < 0)
        break;
      v74 = result;
      v20 = *(_QWORD *)(result + 16);
      v19 = *(_QWORD *)(result + 24);
      if (v20 >= v19 >> 1)
      {
        sub_19C556FAC(v19 > 1, v20 + 1, 1);
        result = v74;
      }
      *(_QWORD *)(result + 16) = v20 + 1;
      v21 = result + 16 * v20;
      *(_QWORD *)(v21 + 32) = 0;
      *(_QWORD *)(v21 + 40) = v17;
      if (!--v14)
      {
        a6 = v67;
        goto LABEL_8;
      }
    }
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
  }
  else
  {
LABEL_8:
    result = (uint64_t)sub_19C5ADD74((_QWORD *)result);
    v24 = result;
    if (v22)
    {
      v25 = v22;
      v68 = result + 32;
      v65 = result + 8;
      v66 = a8;
      v70 = AssociatedTypeWitness;
      do
      {
        v26 = v25 + 2;
        v27 = v25[2];
        if (v27)
        {
          v28 = v27 - 1;
          v29 = v25 + 4;
          v30 = v25[v27 + 3];
          v31 = __OFADD__(v30, 1);
          v32 = v30 + 1;
          if (v31)
            goto LABEL_67;
          if (v27 > *(_QWORD *)(v24 + 16))
            goto LABEL_68;
          if (v32 >= *(_QWORD *)(v68 + 16 * v28 + 8))
          {
            result = swift_bridgeObjectRetain();
            if (v27 != 1)
            {
              v36 = (int64_t *)(v65 + 16 * v27);
              v37 = v27;
              v33 = v25;
              while (v33)
              {
                result = swift_isUniquelyReferenced_nonNull_native();
                if ((result & 1) == 0)
                {
                  result = (uint64_t)sub_19C503550(v33);
                  v33 = (_QWORD *)result;
                }
                v38 = v37 - 1;
                if ((int64_t)(v37 - 1) >= v33[2])
                {
                  __break(1u);
LABEL_63:
                  __break(1u);
LABEL_64:
                  __break(1u);
LABEL_65:
                  __break(1u);
                  goto LABEL_66;
                }
                v33[v37 + 3] = 0;
                v28 = v37 - 2;
                if ((uint64_t)(v37 - 2) >= (uint64_t)*v26)
                  goto LABEL_63;
                v39 = v26[v37];
                v31 = __OFADD__(v39, 1);
                v40 = v39 + 1;
                if (v31)
                  goto LABEL_64;
                if (v28 >= *(_QWORD *)(v24 + 16))
                  goto LABEL_65;
                if (v40 < *v36)
                {
                  a8 = v66;
                  a6 = v67;
                  goto LABEL_29;
                }
                v36 -= 2;
                --v37;
                if (v38 == 1)
                  goto LABEL_27;
              }
              goto LABEL_82;
            }
LABEL_27:
            result = swift_bridgeObjectRelease();
            v33 = 0;
            a8 = v66;
            a6 = v67;
            v41 = v69;
          }
          else
          {
            swift_bridgeObjectRetain();
            v33 = v25;
LABEL_29:
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_19C503550(v33);
              v33 = (_QWORD *)result;
            }
            v41 = v69;
            if (v28 >= v33[2])
              goto LABEL_76;
            v42 = v33[v28 + 4];
            v31 = __OFADD__(v42, 1);
            v43 = v42 + 1;
            if (v31)
              goto LABEL_77;
            v33[v28 + 4] = v43;
          }
          v44 = *v26;
          v45 = v41[2];
          if (v45 < *v26)
            goto LABEL_69;
          if (!v44)
            goto LABEL_70;
          v46 = *v29;
          v47 = v41[4];
          v34 = *v29 * v47;
          if ((unsigned __int128)(v46 * (__int128)v47) >> 64 != v34 >> 63)
            goto LABEL_71;
          v35 = *v73;
          if (v27 != 1)
          {
            if (v44 < 2)
              goto LABEL_78;
            if (v45 != 1)
            {
              v48 = v25[5];
              v49 = v41[5];
              v50 = v48 * v49;
              if ((unsigned __int128)(v48 * (__int128)v49) >> 64 != (v48 * v49) >> 63)
                goto LABEL_79;
              v31 = __OFADD__(v34, v50);
              v34 += v50;
              if (v31)
                goto LABEL_80;
              if (v27 != 2)
              {
                if (v44 < 3)
                  goto LABEL_81;
                if (v45 != 2)
                {
                  if (v45 <= 2)
                    v55 = 2;
                  else
                    v55 = v41[2];
                  v56 = 3 - v44;
                  v57 = 2 - v55;
                  v58 = 2 - v45;
                  v59 = 3 - v27;
                  v60 = 6;
                  v51 = v70;
                  while (v57 + v60 != 6)
                  {
                    v61 = v25[v60];
                    v62 = v41[v60];
                    v63 = v61 * v62;
                    if ((unsigned __int128)(v61 * (__int128)v62) >> 64 != (v61 * v62) >> 63)
                      goto LABEL_73;
                    v31 = __OFADD__(v34, v63);
                    v34 += v63;
                    if (v31)
                      goto LABEL_74;
                    if (v59 + v60 != 6)
                    {
                      if (v56 + v60 == 6)
                        goto LABEL_75;
                      ++v60;
                      if (v58 + v60 != 6)
                        continue;
                    }
                    swift_bridgeObjectRelease();
                    v25 = v33;
                    goto LABEL_47;
                  }
                  goto LABEL_72;
                }
              }
            }
          }
          swift_bridgeObjectRelease();
          v25 = v33;
        }
        else
        {
          v34 = 0;
          v35 = *v73;
        }
        v51 = v70;
LABEL_47:
        v52 = type metadata accessor for LoopIterator(0, a6, a8, v23);
        v53 = v71;
        sub_19C5296D8(v52, v71);
        v54 = *(_QWORD *)(v51 - 8);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v53, 1, v51);
        if ((_DWORD)result == 1)
          goto LABEL_83;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 40))(v35 + *(_QWORD *)(v54 + 72) * v34, v53, v51);
      }
      while (v25);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

double sub_19C4EEFEC@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, void (*a3)(_OWORD *__return_ptr, _QWORD, _QWORD, _QWORD)@<X3>, _OWORD *a4@<X8>)
{
  __int128 v5;
  double result;
  _OWORD v7[2];
  __int128 v8;

  a3(v7, *a1, *(_QWORD *)((char *)a1 + a2 - 16), *(_QWORD *)((char *)a1 + a2 - 8));
  v5 = v7[1];
  *a4 = v7[0];
  a4[1] = v5;
  result = *(double *)&v8;
  a4[2] = v8;
  return result;
}

uint64_t sub_19C4EF03C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(uint64_t *)((char *)a3 + a4 - 16);
  v5 = *(uint64_t *)((char *)a3 + a4 - 8);
  v6 = *a3;
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v11 = *a1;
  v12 = *(_OWORD *)(a1 + 1);
  v13 = v7;
  v14 = v8;
  v15 = v9;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return MLShapedArrayProtocol.subscript.setter(&v11, v6, v4, v5);
}

uint64_t MLShapedArrayProtocol<>.init(identityMatrixOfSize:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(qword_1EE422D98);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_19CAE8310;
  *(_QWORD *)(v5 + 32) = a1;
  *(_QWORD *)(v5 + 40) = a1;
  return (*(uint64_t (**)(void))(a3 + 56))();
}

{
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(qword_1EE422D98);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_19CAE8310;
  *(_QWORD *)(v5 + 32) = a1;
  *(_QWORD *)(v5 + 40) = a1;
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t sub_19C4EF190(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v15 = a2;
  v16 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v15 - v9;
  v11 = *a1;
  v12 = a1[1];
  sub_19CAA9830();
  sub_19CAA9830();
  swift_getAssociatedConformanceWitness();
  sub_19C5542A4(v11, v12, v15, v16, (uint64_t)v10, (uint64_t)v8, AssociatedTypeWitness);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v13)(v10, AssociatedTypeWitness);
}

uint64_t MLShapedArrayProtocol<>.init(randomScalarsIn:shape:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *AssociatedTypeWitness;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[10];
  uint64_t v23;
  _QWORD v24[2];

  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(a2 + 32);
    v9 = 1;
    do
    {
      v10 = *v8++;
      v11 = v9 * v10;
      if ((unsigned __int128)(v9 * (__int128)v10) >> 64 != (v9 * v10) >> 63)
      {
        __break(1u);
        return result;
      }
      v9 = v11;
      --v7;
    }
    while (v7);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_8;
    __break(1u);
  }
  v9 = 1;
LABEL_8:
  v24[0] = 0;
  v24[1] = v9;
  v12 = MEMORY[0x1E0C80A78](result);
  v22[2] = a3;
  v22[3] = a4;
  v22[4] = v13;
  v22[5] = v14;
  v22[6] = v12;
  v22[9] = v13;
  v23 = v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424180);
  AssociatedTypeWitness = (char *)swift_getAssociatedTypeWitness();
  v17 = sub_19C4F158C();
  v24[0] = sub_19C4EB7D8((void (*)(char *, char *))sub_19C4F1518, (uint64_t)v22, v15, AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], v17, MEMORY[0x1E0DEDD18], v18);
  v19 = sub_19CAA9AA0();
  v20 = MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEAF38], v19);
  MLShapedArrayProtocol.init<A>(scalars:shape:)((uint64_t)v24, a2, a3, v19, a4, v20);
  v21 = sub_19CAA9CA4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v23, v21);
}

{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *AssociatedTypeWitness;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[8];
  uint64_t v22;
  _QWORD v23[2];

  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(a2 + 32);
    v9 = 1;
    do
    {
      v10 = *v8++;
      v11 = v9 * v10;
      if ((unsigned __int128)(v9 * (__int128)v10) >> 64 != (v9 * v10) >> 63)
      {
        __break(1u);
        return result;
      }
      v9 = v11;
      --v7;
    }
    while (v7);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_8;
    __break(1u);
  }
  v9 = 1;
LABEL_8:
  v23[0] = 0;
  v23[1] = v9;
  v12 = MEMORY[0x1E0C80A78](result);
  v21[2] = a3;
  v21[3] = a4;
  v21[4] = v13;
  v21[5] = v12;
  v21[7] = v13;
  v22 = v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424180);
  AssociatedTypeWitness = (char *)swift_getAssociatedTypeWitness();
  v16 = sub_19C4F158C();
  v23[0] = sub_19C4EB7D8((void (*)(char *, char *))sub_19C4F1614, (uint64_t)v21, v14, AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], v16, MEMORY[0x1E0DEDD18], v17);
  v18 = sub_19CAA9AA0();
  v19 = MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEAF38], v18);
  MLShapedArrayProtocol.init<A>(scalars:shape:)((uint64_t)v23, a2, a3, v18, a4, v19);
  v20 = sub_19CAA9CA4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v22, v20);
}

uint64_t sub_19C4EF528(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a3;
  v17 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v14 - v8;
  v10 = *a1;
  v11 = a1[1];
  v15 = v10;
  v19 = 0;
  sub_19C4F1A8C();
  sub_19CAA9EC0();
  v19 = 1;
  sub_19CAA9EC0();
  swift_getAssociatedConformanceWitness();
  sub_19C5542A4(v15, v11, v17, v18, (uint64_t)v9, (uint64_t)v7, AssociatedTypeWitness);
  v12 = *(void (**)(char *, uint64_t))(v16 + 8);
  v12(v7, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v12)(v9, AssociatedTypeWitness);
}

uint64_t MLShapedArrayProtocol.init(repeating:shape:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  _QWORD v7[6];

  v7[2] = a3;
  v7[3] = a4;
  v7[4] = a1;
  (*(void (**)(uint64_t, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(a4 + 56))(a2, sub_19C4F1678, v7, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t sub_19C4EF8F8(_QWORD *a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  char **v37;
  char *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  _QWORD *v47;
  unint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int64_t *v52;
  char *v53;
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  _QWORD *v96;
  char *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;

  v99 = a4;
  v96 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = (_QWORD *)sub_19CAA9E18();
  v84 = *(v13 - 1);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v82 - v18;
  v88 = AssociatedTypeWitness;
  v98 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = MEMORY[0x1E0C80A78](v17);
  v97 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v90 = (uint64_t *)((char *)&v82 - v23);
  v24 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = a8;
  v93 = a6;
  v94 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v94);
  v95 = (char *)&v82 - v28;
  v29 = *(_QWORD *)(a3 + 16);
  if (v29)
  {
    v30 = (uint64_t *)(a3 + 32);
    v31 = 1;
    v32 = *(_QWORD *)(a3 + 16);
    do
    {
      v33 = *v30++;
      v34 = v31 * v33;
      if ((unsigned __int128)(v31 * (__int128)v33) >> 64 != (v31 * v33) >> 63)
        goto LABEL_73;
      v31 = v34;
      --v32;
    }
    while (v32);
  }
  else
  {
    v34 = 1;
  }
  v83 = v13;
  v13 = a1;
  v91 = v16;
  v86 = v27;
  (*(void (**)(char *, _QWORD *, uint64_t))(v24 + 16))(v26, v99, v93);
  v35 = v95;
  sub_19CAA9944();
  if (v29)
  {
    v90 = v13;
    v100 = MEMORY[0x1E0DEE9D8];
    sub_19C556FAC(0, v29, 0);
    v36 = (_QWORD *)v100;
    v37 = (char **)(a3 + 32);
    do
    {
      v38 = *v37++;
      v16 = v38;
      if (((unint64_t)v38 & 0x8000000000000000) != 0)
        goto LABEL_74;
      v100 = (uint64_t)v36;
      v19 = (char *)v36[2];
      v39 = v36[3];
      if ((unint64_t)v19 >= v39 >> 1)
      {
        sub_19C556FAC(v39 > 1, (int64_t)(v19 + 1), 1);
        v36 = (_QWORD *)v100;
      }
      v36[2] = v19 + 1;
      v40 = &v36[2 * (_QWORD)v19];
      v40[4] = 0;
      v40[5] = v16;
      --v29;
    }
    while (v29);
    v41 = sub_19C5ADD74(v36);
    v43 = v42;
    v13 = 0;
    v89 = v41 + 4;
    v99 = v41;
    v87 = v41 + 1;
    v85 = v96 + 6;
    v44 = v88;
    while (v43)
    {
      v47 = v43;
      v48 = v43 + 2;
      v19 = (char *)v43[2];
      if (!v19)
      {
        swift_bridgeObjectRetain();
        goto LABEL_41;
      }
      v49 = v19 - 1;
      v50 = v43[(_QWORD)(v19 - 1) + 4];
      v46 = __OFADD__(v50, 1);
      v51 = v50 + 1;
      if (v46)
        goto LABEL_77;
      if ((unint64_t)v19 > v99[2])
        goto LABEL_78;
      if (v51 < v89[2 * (_QWORD)v49 + 1])
      {
        swift_bridgeObjectRetain();
        goto LABEL_36;
      }
      swift_bridgeObjectRetain();
      if (v19 == (char *)1)
      {
LABEL_34:
        swift_bridgeObjectRelease();
        v43 = 0;
        v44 = v88;
        goto LABEL_41;
      }
      v52 = &v87[2 * (_QWORD)v19];
      v16 = v19;
      while (1)
      {
        if (!v43)
          goto LABEL_91;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v43 = sub_19C503550(v43);
        v53 = v16 - 1;
        if ((uint64_t)(v16 - 1) >= v43[2])
        {
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
          goto LABEL_81;
        }
        v43[(_QWORD)v16 + 3] = 0;
        v49 = v16 - 2;
        if ((uint64_t)(v16 - 2) >= (uint64_t)*v48)
          goto LABEL_70;
        v54 = v48[(_QWORD)v16];
        v46 = __OFADD__(v54, 1);
        v55 = v54 + 1;
        if (v46)
          goto LABEL_71;
        if ((uint64_t)v49 >= v99[2])
          goto LABEL_72;
        if (v55 < *v52)
          break;
        v52 -= 2;
        --v16;
        if (v53 == (char *)1)
          goto LABEL_34;
      }
      v44 = v88;
LABEL_36:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v43 = sub_19C503550(v43);
      if ((uint64_t)v49 >= v43[2])
        goto LABEL_85;
      v56 = v43[(_QWORD)v49 + 4];
      v46 = __OFADD__(v56, 1);
      v57 = v56 + 1;
      if (v46)
      {
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        (*(void (**)(char *, _QWORD *))(v84 + 8))(v16, v83);
        v100 = 0;
        v101 = 0xE000000000000000;
        sub_19CAA9F2C();
        swift_bridgeObjectRelease();
        v100 = 0xD000000000000015;
        v101 = 0x800000019CABAB00;
        v102 = (_QWORD *)v34;
        sub_19CAAA190();
        sub_19CAA992C();
        swift_bridgeObjectRelease();
        sub_19CAA992C();
        swift_bridgeObjectRetain();
        sub_19CAA992C();
        swift_bridgeObjectRelease();
        v80 = v100;
        v79 = v101;
        v102 = v13;
        v100 = sub_19CAAA190();
        v101 = v81;
        sub_19CAA992C();
        v100 = v80;
        v101 = v79;
        swift_bridgeObjectRetain();
        sub_19CAA992C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        while (1)
        {
          sub_19CAAA0B8();
          __break(1u);
LABEL_94:
          (*(void (**)(char *, _QWORD *))(v84 + 8))(v19, v83);
        }
      }
      v43[(_QWORD)v49 + 4] = v57;
LABEL_41:
      swift_getAssociatedConformanceWitness();
      v16 = v91;
      sub_19CAA9E54();
      v58 = v98;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v16, 1, v44) == 1)
        goto LABEL_92;
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v97, v16, v44);
      v59 = *v48;
      v60 = v96[2];
      if (v60 < *v48)
        goto LABEL_75;
      v61 = *v90;
      if (!v19)
      {
        v45 = 0;
        goto LABEL_15;
      }
      if (!v59)
        goto LABEL_79;
      v62 = v47[4];
      v63 = v96[4];
      v45 = v62 * v63;
      if ((unsigned __int128)(v62 * (__int128)v63) >> 64 != (v62 * v63) >> 63)
        goto LABEL_80;
      if (v19 == (char *)1)
        goto LABEL_15;
      if (v59 < 2)
        goto LABEL_87;
      if (v60 == 1)
        goto LABEL_15;
      v64 = v47[5];
      v65 = v96[5];
      v66 = v64 * v65;
      if ((unsigned __int128)(v64 * (__int128)v65) >> 64 != (v64 * v65) >> 63)
        goto LABEL_88;
      v46 = __OFADD__(v45, v66);
      v45 += v66;
      if (v46)
        goto LABEL_89;
      if (v19 != (char *)2)
      {
        v67 = v59 >= 3;
        v68 = v59 - 3;
        if (!v67)
          goto LABEL_90;
        v69 = v60 - 2;
        if (v60 != 2)
        {
          v70 = v47 + 6;
          if (v60 <= 2)
            v60 = 2;
          v71 = v60 - 2;
          v72 = v19 - 3;
          v73 = v85;
          while (v71)
          {
            v74 = *v70 * *v73;
            if ((unsigned __int128)(*v70 * (__int128)*v73) >> 64 != v74 >> 63)
              goto LABEL_82;
            v46 = __OFADD__(v45, v74);
            v45 += v74;
            if (v46)
              goto LABEL_83;
            if (!v72)
              goto LABEL_15;
            if (!v68)
              goto LABEL_84;
            ++v73;
            ++v70;
            --v68;
            --v71;
            --v72;
            if (!--v69)
              goto LABEL_15;
          }
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
          goto LABEL_86;
        }
      }
LABEL_15:
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, char *, uint64_t))(v98 + 40))(v61 + *(_QWORD *)(v98 + 72) * v45, v97, v44);
      v46 = __OFADD__(v13, 1);
      v13 = (_QWORD *)((char *)v13 + 1);
      if (v46)
        goto LABEL_76;
    }
    swift_bridgeObjectRelease();
    v35 = v95;
  }
  else
  {
    swift_getAssociatedConformanceWitness();
    sub_19CAA9E54();
    v75 = v98;
    v76 = v88;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v19, 1, v88) == 1)
      goto LABEL_94;
    v77 = v90;
    (*(void (**)(_QWORD *, char *, uint64_t))(v75 + 32))(v90, v19, v76);
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(v75 + 40))(*v13, v77, v76);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v35, v94);
}

uint64_t sub_19C4F01A0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_19C4EF8F8(a1, a2, *(_QWORD *)(v2 + 48), *(_QWORD **)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t MLShapedArrayProtocol.init(bytesNoCopy:shape:deallocator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;

  v18 = a4;
  v17 = a1;
  v8 = sub_19CAA9608();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v12)
  {
    v13 = sub_19CAA9A58();
    *(_QWORD *)(v13 + 16) = v12;
  }
  else
  {
    v13 = MEMORY[0x1E0DEE9D8];
  }
  v19[1] = v12;
  v20 = 0;
  v19[0] = v13 + 32;
  sub_19C59373C(v19, &v20, a2);
  v14 = v20;
  if (v12 < v20)
  {
    __break(1u);
    __break(1u);
    *(_QWORD *)(v13 + 16) = v14;
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v13 + 16) = v20;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(a5 + 48))(v17, a2, v13, v11, v18, a5);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a3, v8);
  }
  return result;
}

uint64_t MLShapedArrayProtocol.init<A>(converting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD v12[8];

  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 64))(a3, a5);
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  v12[5] = a5;
  v12[6] = a1;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t))(a4 + 56))(v10, sub_19C4F16D8, v12, a2, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

void sub_19C4F03D4(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = a3[2];
  if (v5 != a4[2])
  {
    __break(1u);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = sub_19C500C0C(0, v5);
  if (v5 != a5[2])
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v16 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = sub_19C500C0C(0, v5);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = sub_19CAA98CC();
  if (!v12)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v13 = v12;
  v14 = swift_getAssociatedTypeWitness();
  v15 = sub_19CAA98CC();
  if (v15)
  {
    sub_19C5919D4(v16, a3, a4, v10, a3, a5, v13, v15, AssociatedTypeWitness, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t MLShapedArrayProtocol.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;

  v8 = sub_19CAA9608();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (unint64_t)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v48 - v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = a1;
  if (v17 == objc_msgSend(a1, sel_dataType))
  {
    v49 = v12;
    v51 = a4;
    v19 = objc_msgSend(a1, sel_shape);
    v56 = sub_19C4E8EF8();
    v12 = sub_19CAA99F8();

    v50 = v14;
    if (!(v12 >> 62))
    {
      v20 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v20 = sub_19CAAA0DC();
  swift_bridgeObjectRelease();
LABEL_4:
  v21 = MEMORY[0x1E0DEE9D8];
  v57 = v18;
  v54 = a3;
  v55 = v8;
  v52 = v9;
  v53 = a2;
  if (v20)
  {
    v58 = MEMORY[0x1E0DEE9D8];
    result = sub_19C556FD0(0, v20 & ~(v20 >> 63), 0);
    if (v20 < 0)
    {
      __break(1u);
      goto LABEL_32;
    }
    v23 = 0;
    v24 = v58;
    do
    {
      if ((v12 & 0xC000000000000001) != 0)
        v25 = (id)MEMORY[0x1A1AD4A9C](v23, v12);
      else
        v25 = *(id *)(v12 + 8 * v23 + 32);
      v26 = v25;
      v27 = objc_msgSend(v25, sel_integerValue);

      v58 = v24;
      v29 = *(_QWORD *)(v24 + 16);
      v28 = *(_QWORD *)(v24 + 24);
      if (v29 >= v28 >> 1)
      {
        sub_19C556FD0(v28 > 1, v29 + 1, 1);
        v24 = v58;
      }
      ++v23;
      *(_QWORD *)(v24 + 16) = v29 + 1;
      *(_QWORD *)(v24 + 8 * v29 + 32) = v27;
    }
    while (v20 != v23);
    swift_bridgeObjectRelease();
    v18 = v57;
    v21 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v24 = MEMORY[0x1E0DEE9D8];
  }
  v30 = objc_msgSend(v18, sel_strides);
  v31 = sub_19CAA99F8();

  if (!(v31 >> 62))
  {
    v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v32)
      goto LABEL_17;
LABEL_29:
    swift_bridgeObjectRelease();
    v34 = MEMORY[0x1E0DEE9D8];
LABEL_30:
    v40 = swift_allocObject();
    v41 = v57;
    *(_QWORD *)(v40 + 16) = v57;
    v42 = v50;
    *v50 = nullsub_1;
    v42[1] = v40;
    v43 = v52;
    v44 = v55;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v52 + 104))(v42, *MEMORY[0x1E0CB00D8], v55);
    v45 = objc_retainAutorelease(v41);
    v46 = objc_msgSend(v45, sel_bytes);
    v47 = v49;
    (*(void (**)(unint64_t, _QWORD *, uint64_t))(v43 + 16))(v49, v42, v44);
    (*(void (**)(id, uint64_t, uint64_t, unint64_t, uint64_t))(v54 + 48))(v46, v24, v34, v47, v53);

    return (*(uint64_t (**)(_QWORD *, uint64_t))(v43 + 8))(v42, v44);
  }
  swift_bridgeObjectRetain();
  v32 = sub_19CAAA0DC();
  swift_bridgeObjectRelease();
  if (!v32)
    goto LABEL_29;
LABEL_17:
  v58 = v21;
  result = sub_19C556FD0(0, v32 & ~(v32 >> 63), 0);
  if ((v32 & 0x8000000000000000) == 0)
  {
    v33 = 0;
    v34 = v58;
    do
    {
      if ((v31 & 0xC000000000000001) != 0)
        v35 = (id)MEMORY[0x1A1AD4A9C](v33, v31);
      else
        v35 = *(id *)(v31 + 8 * v33 + 32);
      v36 = v35;
      v37 = objc_msgSend(v35, sel_integerValue);

      v58 = v34;
      v39 = *(_QWORD *)(v34 + 16);
      v38 = *(_QWORD *)(v34 + 24);
      if (v39 >= v38 >> 1)
      {
        sub_19C556FD0(v38 > 1, v39 + 1, 1);
        v34 = v58;
      }
      ++v33;
      *(_QWORD *)(v34 + 16) = v39 + 1;
      *(_QWORD *)(v34 + 8 * v39 + 32) = v37;
    }
    while (v32 != v33);
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
LABEL_32:
  __break(1u);
  return result;
}

void MLShapedArrayProtocol.init(converting:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  id v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  id v16;
  __int128 v17;
  __int128 v18;

  v8 = (uint64_t)objc_msgSend(a1, sel_dataType);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness) == v8)
  {
    MLShapedArrayProtocol.init(_:)(a1, a2, a3, a4);
    return;
  }
  if (v8 > 65599)
  {
    if (v8 == 65600)
    {
      v11 = a1;
      sub_19C4DDD58(v11, (size_t *)&v18);
      v17 = v18;
      v12 = &qword_1EE423410;
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423410);
      v14 = (unint64_t *)&unk_1EE4235A8;
      goto LABEL_12;
    }
    if (v8 == 131104)
    {
      v11 = a1;
      sub_19C4DEEC0(v11, (size_t *)&v18);
      v17 = v18;
      v12 = &qword_1EE423420;
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423420);
      v14 = (unint64_t *)&unk_1EE4235C0;
      goto LABEL_12;
    }
  }
  else
  {
    if (v8 == 65552)
    {
      v11 = a1;
      sub_19C4DE8F0(v11, (size_t *)&v18);
      v17 = v18;
      v12 = &qword_1EE423428;
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423428);
      v14 = (unint64_t *)&unk_1EE4235B0;
LABEL_12:
      v15 = sub_19C4D60FC(v14, v12, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
      MLShapedArrayProtocol.init<A>(converting:)((uint64_t)&v17, a2, v13, a3, v15);

      return;
    }
    if (v8 == 65568)
    {
      v11 = a1;
      sub_19C4DE328(v11, (size_t *)&v18);
      v17 = v18;
      v12 = &qword_1EE423418;
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423418);
      v14 = (unint64_t *)&unk_1EE4235B8;
      goto LABEL_12;
    }
  }
  sub_19CAA9F2C();
  swift_bridgeObjectRelease();
  v16 = objc_msgSend((id)objc_opt_self(), sel_stringForDataType_, objc_msgSend(a1, sel_dataType));
  sub_19CAA98FC();

  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  sub_19CAAA0B8();
  __break(1u);
}

uint64_t sub_19C4F0D48(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t (*v15)(_OWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[3];

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v10 + 16))((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE424300);
  v11 = sub_19CAA9AAC();
  v12 = (_QWORD *)sub_19C4EC478(v5, a3, a3, a5);
  v13 = sub_19C553B6C(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = a1[1];
  v21[0] = *a1;
  v21[1] = v14;
  v21[2] = a1[2];
  v20 = v13;
  v15 = *(uint64_t (**)(_OWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 88);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4232C0);
  v17 = sub_19C4D60FC(&qword_1EE423588, &qword_1EE4232C0, MEMORY[0x1E0DEAF50]);
  return v15(v21, &v20, v16, v17, a3, a5);
}

uint64_t sub_19C4F0E90(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  _OWORD v10[3];

  v6 = a1[1];
  v10[0] = *a1;
  v10[1] = v6;
  v10[2] = a1[2];
  v9 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423590);
  sub_19C4D60FC(&qword_1EE423598, &qword_1EE423590, MEMORY[0x1E0DEAF50]);
  return sub_19C4F0D48(v10, (uint64_t)&v9, a3, v7, a4);
}

uint64_t sub_19C4F0F24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_19C4F0F68(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_19C4F0F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v16 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v16 - v9, a1);
  v17 = a2;
  v12 = *(uint64_t (**)(char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 136);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424190);
  v14 = sub_19C4D60FC(&qword_1EE423578, (uint64_t *)&unk_1EE424190, MEMORY[0x1E0DEAF50]);
  return v12(v10, &v17, v13, v14, a3, a4);
}

uint64_t sub_19C4F1070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[16];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_19CAA9E18();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = &v17[-v10];
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = &v17[-v13];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
    __break(1u);
  }
  else
  {
    v15 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v14, v11, AssociatedTypeWitness);
    MEMORY[0x1E0C80A78](v15);
    *(_QWORD *)&v17[-32] = a2;
    *(_QWORD *)&v17[-24] = a3;
    *(_QWORD *)&v17[-16] = v14;
    (*(void (**)(uint64_t (*)(uint64_t *)))(a3 + 160))(sub_19C4F1AEC);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_19C4F11FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[5];

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = sub_19CAA9E18();
  v25 = *(_QWORD *)(v9 - 8);
  v26 = v9;
  MEMORY[0x1E0C80A78](v9);
  v24 = (uint64_t)&v24 - v10;
  v12 = *a1;
  v11 = a1[1];
  v14 = a1[2];
  v13 = a1[3];
  v15 = a1[4];
  v27 = a1[5];
  v28 = v4;
  v16 = *(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3) + 16);
  swift_bridgeObjectRelease();
  if (v16)
  {
    sub_19CAA9BFC();
    v17 = v29;
    v34[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235A0);
    v34[4] = &protocol witness table for <> PartialRangeFrom<A>;
    *(_QWORD *)&v29 = v12;
    *((_QWORD *)&v29 + 1) = v11;
    v30 = v14;
    v31 = v13;
    v32 = v15;
    v33 = v27;
    v34[0] = v17;
    return MLShapedArrayProtocol.subscript.setter(&v29, (uint64_t)v34, a2, a3);
  }
  else
  {
    *(_QWORD *)&v29 = v12;
    *((_QWORD *)&v29 + 1) = v11;
    v30 = v14;
    v31 = v13;
    v32 = v15;
    v33 = v27;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v21 = type metadata accessor for MLShapedArraySlice(0, AssociatedTypeWitness, AssociatedConformanceWitness, v20);
    v22 = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLShapedArraySlice<A>, v21);
    v23 = v24;
    MLShapedArrayProtocol.scalar.getter(v21, v22, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    sub_19C4F1070(v23, a2, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v23, v26);
  }
}

uint64_t sub_19C4F1408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x1A1AD45B0](a1, AssociatedTypeWitness);
  result = MLShapedArrayProtocol.scalarCount.getter(a2, a3);
  if (v7 == result)
  {
    MEMORY[0x1E0C80A78](result);
    v9 = a2;
    v10 = a3;
    v11 = a1;
    return (*(uint64_t (**)(uint64_t (*)(uint64_t *, uint64_t, _QWORD *)))(a3 + 160))(sub_19C4F1AD0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_19C4F14D8(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;

  return sub_19C4EEB48(a1, a2, a3, v3[6], v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_19C4F14F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C4EF190(a1, a2, *(_QWORD *)(v2 + 48));
}

uint64_t sub_19C4F1518()
{
  swift_getAssociatedTypeWitness();
  return sub_19CAA97E8();
}

unint64_t sub_19C4F158C()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_1EE4241B0;
  if (!qword_1EE4241B0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EE424180);
    v2 = sub_19C4D5AF8();
    v3[0] = MEMORY[0x1E0DEB458];
    v3[1] = v2;
    result = MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEB8C0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EE4241B0);
  }
  return result;
}

uint64_t sub_19C4F15F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C4EF528(a1, a2, *(_QWORD *)(v2 + 40));
}

uint64_t sub_19C4F1614()
{
  swift_getAssociatedTypeWitness();
  return sub_19CAAA07C();
}

uint64_t sub_19C4F1678()
{
  swift_getAssociatedTypeWitness();
  return sub_19CAA9E48();
}

uint64_t sub_19C4F16D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a1;
  v3 = *(_QWORD *)(v2 + 40);
  v5[2] = *(_QWORD *)(v2 + 16);
  v6 = *(_OWORD *)(v2 + 24);
  v7 = v3;
  v8 = a2;
  return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(v3 + 152))(sub_19C4F1A60, v5, MEMORY[0x1E0DEE9C0] + 8, v6);
}

uint64_t sub_19C4F1738()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_19C4F1764()
{
  return 32;
}

__n128 sub_19C4F1770(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_19C4F1784()
{
  return 16;
}

__n128 sub_19C4F1790(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_19C4F179C@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  return sub_19C4EEFEC(a1, a2, (void (*)(_OWORD *__return_ptr, _QWORD, _QWORD, _QWORD))MLShapedArrayProtocol.subscript.getter, a3);
}

uint64_t sub_19C4F17BC()
{
  return 16;
}

__n128 sub_19C4F17C8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_19C4F17DC()
{
  return 16;
}

__n128 sub_19C4F17E8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_19C4F17F4@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  return sub_19C4EEFEC(a1, a2, (void (*)(_OWORD *__return_ptr, _QWORD, _QWORD, _QWORD))MLShapedArrayProtocol.subscript.getter, a3);
}

uint64_t sub_19C4F1814()
{
  return 16;
}

__n128 sub_19C4F1820(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_19C4F182C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return MLShapedArrayProtocol.subscript.getter(*a2, *(uint64_t *)((char *)a2 + a3 - 16), *(uint64_t *)((char *)a2 + a3 - 8));
}

uint64_t sub_19C4F185C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(uint64_t *)((char *)a3 + a4 - 16);
  v6 = *(uint64_t *)((char *)a3 + a4 - 8);
  v7 = *a3;
  swift_bridgeObjectRetain();
  return sub_19C4F0F80(a1, v7, v5, v6);
}

uint64_t sub_19C4F18B4()
{
  return 16;
}

__n128 sub_19C4F18C0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_19C4F18CC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = MLShapedArrayProtocol.scalars.getter(*(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_19C4F1900()
{
  return 16;
}

__n128 sub_19C4F190C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_19C4F1918@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return MLShapedArrayProtocol.scalar.getter(*(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
}

uint64_t sub_19C4F1940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19C4F1070(a1, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
}

uint64_t sub_19C4F1968()
{
  return 16;
}

__n128 sub_19C4F1974(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_19C4F1980@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  return sub_19C4EEFEC(a1, a2, (void (*)(_OWORD *__return_ptr, _QWORD, _QWORD, _QWORD))MLShapedArrayProtocol.subscript.getter, a3);
}

uint64_t sub_19C4F19A0()
{
  return 16;
}

__n128 sub_19C4F19AC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of MLShapedArrayProtocol.init(bytesNoCopy:shape:strides:deallocator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of MLShapedArrayProtocol.init(unsafeUninitializedShape:initializingWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of MLShapedArrayProtocol.shape.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of MLShapedArrayProtocol.strides.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of MLShapedArrayProtocol.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 80))();
}

{
  return (*(uint64_t (**)(void))(a5 + 104))();
}

{
  return (*(uint64_t (**)(void))(a5 + 128))();
}

uint64_t dispatch thunk of MLShapedArrayProtocol.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 88))();
}

{
  return (*(uint64_t (**)(void))(a6 + 112))();
}

{
  return (*(uint64_t (**)(void))(a6 + 136))();
}

uint64_t dispatch thunk of MLShapedArrayProtocol.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 96))();
}

{
  return (*(uint64_t (**)(void))(a6 + 120))();
}

{
  return (*(uint64_t (**)(void))(a6 + 144))();
}

uint64_t dispatch thunk of MLShapedArrayProtocol.withUnsafeShapedBufferPointer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 152))();
}

uint64_t dispatch thunk of MLShapedArrayProtocol.withUnsafeMutableShapedBufferPointer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 160))();
}

void sub_19C4F1A60(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;

  sub_19C4F03D4(a1, a2, a3, a4, *(_QWORD **)(v4 + 48));
}

unint64_t sub_19C4F1A8C()
{
  unint64_t result;

  result = qword_1EE4235C8;
  if (!qword_1EE4235C8)
  {
    result = MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEB460], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EE4235C8);
  }
  return result;
}

uint64_t sub_19C4F1AD0(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return sub_19C4EE2A8(a1, a2, a3, *(_QWORD *)(v3 + 32));
}

uint64_t sub_19C4F1AEC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(v3, v2, AssociatedTypeWitness);
}

void static MLTensor..! prefix(_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

void sub_19C4F1B94()
{
  uint64_t v0;
  uint64_t v2;
  void *v3;
  uint64_t inited;
  uint64_t v5;
  char v6;
  void *v7;

  if (!*(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20))
  {
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v3 = v7;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = v0;
    swift_retain();
    sub_19C522A50(inited, (uint64_t *)(v2 - 160));
    swift_bridgeObjectRelease();
    sub_19C4F382C(v3);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 - 160), *(_QWORD *)(v2 - 136));
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v5 + 32) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D0);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_19CAE8180;
    __asm { BR              X10 }
  }
  v6 = *(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  *(_BYTE *)(v2 - 160) = *(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 159) = v6;
  *(_QWORD *)(v2 - 152) = 0;
  *(_BYTE *)(v2 - 144) = 0;
  *(_BYTE *)(v2 - 96) = 9;
  sub_19C4D893C(v2 - 160, (uint64_t)&v7);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C4F1E1CLL);
}

void static MLTensor..& infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_19C4F1E84()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  if (!*(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20))
    __asm { BR              X10 }
  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  *(_BYTE *)(v2 - 160) = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = 0;
  *(_BYTE *)(v2 - 144) = 0;
  *(_BYTE *)(v2 - 96) = 9;
  sub_19C4D893C(v2 - 160, (uint64_t)&v4);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C4F2290);
}

void static MLTensor..| infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_19C4F2338()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  if (!*(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20))
    __asm { BR              X10 }
  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  *(_BYTE *)(v2 - 160) = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = 0;
  *(_BYTE *)(v2 - 144) = 0;
  *(_BYTE *)(v2 - 96) = 9;
  sub_19C4D893C(v2 - 160, (uint64_t)&v4);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C4F2744);
}

void static MLTensor..^ infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_19C4F27EC()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  if (!*(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20))
    __asm { BR              X10 }
  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  *(_BYTE *)(v2 - 160) = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = 0;
  *(_BYTE *)(v2 - 144) = 0;
  *(_BYTE *)(v2 - 96) = 9;
  sub_19C4D893C(v2 - 160, (uint64_t)&v4);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C4F2BF8);
}

void MLTensor.all(keepRank:)()
{
  sub_19C4F31FC();
}

void MLTensor.all(alongAxes:keepRank:)()
{
  __asm { BR              X10 }
}

{
  MLTensor.all(alongAxes:keepRank:)();
}

void sub_19C4F2CB0(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  if (!*(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20))
    __asm { BR              X9 }
  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  *(_BYTE *)(v2 - 160) = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = 0;
  *(_BYTE *)(v2 - 144) = 0;
  *(_BYTE *)(v2 - 96) = 9;
  sub_19C4D893C(v2 - 160, (uint64_t)&v4);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C4F3160);
}

void MLTensor.any(keepRank:)()
{
  sub_19C4F31FC();
}

void sub_19C4F31FC()
{
  __asm { BR              X11 }
}

uint64_t sub_19C4F3244@<X0>(uint64_t a1@<X8>)
{
  void (*v1)(void);

  sub_19C4D4978(0, *(_QWORD *)(*(_QWORD *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16));
  v1();
  return swift_release();
}

void MLTensor.any(alongAxes:keepRank:)()
{
  __asm { BR              X10 }
}

{
  MLTensor.any(alongAxes:keepRank:)();
}

void sub_19C4F32EC(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  if (!*(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20))
    __asm { BR              X9 }
  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  *(_BYTE *)(v2 - 160) = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = 0;
  *(_BYTE *)(v2 - 144) = 0;
  *(_BYTE *)(v2 - 96) = 9;
  sub_19C4D893C(v2 - 160, (uint64_t)&v4);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C4F379CLL);
}

void sub_19C4F382C(id a1)
{
  if ((unint64_t)a1 >= 2)

}

uint64_t sub_19C4F383C(uint64_t a1)
{
  int64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_19C557100(0, v1, 0);
    __asm { BR              X10 }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_19C4F3948(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v10 = MEMORY[0x1E0DEE9D8];
    sub_19C5570B8(0, v1, 0);
    v2 = v10;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4++;
      v5 = v6;
      v8 = *(_QWORD *)(v10 + 16);
      v7 = *(_QWORD *)(v10 + 24);
      swift_retain();
      if (v8 >= v7 >> 1)
        sub_19C5570B8(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v10 + 16) = v8 + 1;
      *(_QWORD *)(v10 + 8 * v8 + 32) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void MLTensor.reshaped(to:)()
{
  __asm { BR              X9 }
}

uint64_t sub_19C4F3A58()
{
  unint64_t *v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_QWORD **)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  swift_bridgeObjectRetain();
  v6 = sub_19C4D4494(v1, v5);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    v8 = v1[2];
    if (v8)
    {
      swift_bridgeObjectRetain();
      v9 = 0;
      v10 = MEMORY[0x1E0DEE9D8];
      do
      {
        if (v1[v9 + 4] == -1)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v4 - 128) = v10;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_19C556FD0(0, *(_QWORD *)(v10 + 16) + 1, 1);
            v10 = *(_QWORD *)(v4 - 128);
          }
          v12 = *(_QWORD *)(v10 + 16);
          v11 = *(_QWORD *)(v10 + 24);
          if (v12 >= v11 >> 1)
          {
            sub_19C556FD0(v11 > 1, v12 + 1, 1);
            v10 = *(_QWORD *)(v4 - 128);
          }
          *(_QWORD *)(v10 + 16) = v12 + 1;
          *(_QWORD *)(v10 + 8 * v12 + 32) = -1;
        }
        ++v9;
      }
      while (v8 != v9);
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(v10 + 16);
      swift_release();
      swift_bridgeObjectRetain();
      v15 = 0;
      v16 = MEMORY[0x1E0DEE9D8];
      do
      {
        v19 = v1[v15 + 4];
        if (v19 >= 1)
        {
          v20 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v4 - 128) = v16;
          if ((v20 & 1) == 0)
          {
            sub_19C556FD0(0, *(_QWORD *)(v16 + 16) + 1, 1);
            v16 = *(_QWORD *)(v4 - 128);
          }
          v18 = *(_QWORD *)(v16 + 16);
          v17 = *(_QWORD *)(v16 + 24);
          if (v18 >= v17 >> 1)
          {
            sub_19C556FD0(v17 > 1, v18 + 1, 1);
            v16 = *(_QWORD *)(v4 - 128);
          }
          *(_QWORD *)(v16 + 16) = v18 + 1;
          *(_QWORD *)(v16 + 8 * v18 + 32) = v19;
        }
        ++v15;
      }
      while (v8 != v15);
      swift_bridgeObjectRelease();
      v21 = *(_QWORD *)(v16 + 16);
      if (v21)
      {
LABEL_21:
        v22 = 0;
        v23 = 1;
        do
        {
          v24 = *(_QWORD *)(v16 + 8 * v22 + 32);
          v25 = (unsigned __int128)(v23 * (__int128)v24) >> 64;
          v23 *= v24;
          if (v25 != v23 >> 63)
          {
            __break(1u);
            JUMPOUT(0x19C4F3FE4);
          }
          ++v22;
        }
        while (v21 != v22);
        swift_release();
        if (v14 > 1)
          goto LABEL_41;
        if (v14 == 1)
        {
          v26 = sub_19C4F8F78(v2);
          if (v23 == -1)
          {
LABEL_36:
            swift_retain();
            v27 = swift_bridgeObjectRetain();
            sub_19C4F9794(v27, v2);
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_39;
          }
          if (!v23)
            goto LABEL_35;
          goto LABEL_34;
        }
        goto LABEL_37;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0DEE9D8];
      v14 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      swift_release();
      v21 = *(_QWORD *)(v16 + 16);
      if (v21)
        goto LABEL_21;
    }
    swift_release();
    if (v14 > 1)
      goto LABEL_41;
    if (v14 == 1)
    {
      v26 = sub_19C4F8F78(v2);
      v23 = 1;
LABEL_34:
      v26 %= v23;
LABEL_35:
      if (!v26)
        goto LABEL_36;
LABEL_41:
      sub_19CAAA0B8();
      __break(1u);
      JUMPOUT(0x19C4F40B4);
    }
    v23 = 1;
LABEL_37:
    if (sub_19C4F8F78(v2) == v23)
    {
      swift_bridgeObjectRetain();
LABEL_39:
      __asm { BR              X9 }
    }
    goto LABEL_41;
  }
  *v0 = v2;
  return swift_retain();
}

void MLTensor.cast(like:)(uint64_t a1)
{
  __asm { BR              X12 }
}

void sub_19C4F411C()
{
  sub_19C4F4174();
}

void sub_19C4F4174()
{
  __asm { BR              X9 }
}

uint64_t sub_19C4F41B8@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9[23];

  if (*(unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x20) != v2)
  {
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v6 = *(void **)(v4 - 128);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = v3;
    swift_retain();
    sub_19C522A50(inited, v9);
    swift_bridgeObjectRelease();
    sub_19C4F382C(v6);
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v8 + 32) = v3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D0);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_19CAE8180;
    __asm { BR              X10 }
  }
  *a1 = v3;
  return swift_retain();
}

void MLTensor.cast<A>(to:)(uint64_t a1)
{
  sub_19C59E650(a1, 0);
  sub_19C4F4174();
}

void MLTensor.squeezingShape()()
{
  __asm { BR              X10 }
}

uint64_t sub_19C4F44C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v2 = *(_QWORD *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = 0;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if (*(_QWORD *)(v2 + 8 * v4 + 32) == 1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = sub_19C4F9574(0, v5[2] + 1, 1, v5, qword_1EE422D98);
        v7 = v5[2];
        v6 = v5[3];
        if (v7 >= v6 >> 1)
          v5 = sub_19C4F9574((_QWORD *)(v6 > 1), v7 + 1, 1, v5, qword_1EE422D98);
        v5[2] = v7 + 1;
        v5[v7 + 4] = v4;
      }
      ++v4;
    }
    while (v3 != v4);
    swift_bridgeObjectRelease();
    if (v5[2])
      goto LABEL_11;
  }
  else if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
LABEL_11:
    MLTensor.squeezingShape(at:)();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  *v0 = v1;
  return swift_retain();
}

_QWORD *sub_19C4F4620(void (*a1)(_QWORD *__return_ptr, _QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  _QWORD v16[2];
  void (*v17)(_QWORD *__return_ptr, _QWORD);

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v17 = a1;
  do
  {
    v9 = *(_QWORD *)(a3 + 8 * v7 + 32);
    v16[0] = v7;
    v16[1] = v9;
    a1(&v14, v16);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    if ((v15 & 1) == 0)
    {
      v10 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = sub_19C4F9574(0, v8[2] + 1, 1, v8, qword_1EE422D98);
      v12 = v8[2];
      v11 = v8[3];
      if (v12 >= v11 >> 1)
        v8 = sub_19C4F9574((_QWORD *)(v11 > 1), v12 + 1, 1, v8, qword_1EE422D98);
      v8[2] = v12 + 1;
      v8[v12 + 4] = v10;
      a1 = v17;
    }
    ++v7;
  }
  while (v4 != v7);
  swift_bridgeObjectRelease();
  return v8;
}

void MLTensor.squeezingShape(at:)()
{
  __asm { BR              X9 }
}

{
  MLTensor.squeezingShape(at:)();
}

uint64_t sub_19C4F47BC()
{
  uint64_t v0;
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)swift_bridgeObjectRetain();
  v3 = sub_19C55C9B0(v2, v0);
  swift_bridgeObjectRelease();
  if (!v3)
  {
    swift_retain();
    sub_19CAA9F2C();
    swift_bridgeObjectRelease();
    __asm { BR              X10 }
  }
  MLTensor.reshaped(to:)();
  return swift_bridgeObjectRelease();
}

void sub_19C4F488C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = swift_bridgeObjectRetain();
  v2 = MEMORY[0x1E0DEB418];
  MEMORY[0x1A1AD452C](v1, MEMORY[0x1E0DEB418]);
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  MEMORY[0x1A1AD452C](v0, v2);
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAAA0B8();
  __break(1u);
}

void MLTensor.expandingShape(at:)()
{
  MLTensor.expandingShape(at:)();
}

{
  __asm { BR              X9 }
}

uint64_t sub_19C4F49F0()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v2 = swift_bridgeObjectRetain();
  v3 = sub_19C55CF04(v2, v0);
  swift_bridgeObjectRelease();
  if (!v3)
  {
    swift_retain();
    sub_19CAA9F2C();
    swift_bridgeObjectRelease();
    __asm { BR              X10 }
  }
  MLTensor.reshaped(to:)();
  return swift_bridgeObjectRelease();
}

void sub_19C4F4AC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = swift_bridgeObjectRetain();
  v2 = MEMORY[0x1E0DEB418];
  MEMORY[0x1A1AD452C](v1, MEMORY[0x1E0DEB418]);
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  MEMORY[0x1A1AD452C](v0, v2);
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAAA0B8();
  __break(1u);
}

void MLTensor.flattened()()
{
  MLTensor.reshaped(to:)();
}

void sub_19C4F4BBC()
{
  __asm { BR              X9 }
}

uint64_t sub_19C4F4BFC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  BOOL v5;

  v4 = *(_QWORD **)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  swift_bridgeObjectRetain();
  v5 = sub_19C4D4494(v0, v4);
  swift_bridgeObjectRelease();
  if (!v5)
    __asm { BR              X9 }
  *v1 = v2;
  return swift_retain();
}

uint64_t sub_19C4F4CC4()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v2 = swift_bridgeObjectRetain();
  v3 = sub_19C55D09C(v2, v0);
  swift_bridgeObjectRelease();
  if (!v3)
  {
    swift_retain();
    sub_19CAA9F2C();
    swift_bridgeObjectRelease();
    __asm { BR              X9 }
  }
  MLTensor.reshaped(to:)();
  return swift_bridgeObjectRelease();
}

void sub_19C4F4D90()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  MEMORY[0x1A1AD452C](v0, MEMORY[0x1E0DEB418]);
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  sub_19CAAA190();
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  sub_19CAAA0B8();
  __break(1u);
}

void MLTensor.transposed()()
{
  __asm { BR              X11 }
}

uint64_t sub_19C4F4EB0@<X0>(uint64_t a1@<X8>)
{
  sub_19C4F4FBC(0, *(_QWORD *)(*(_QWORD *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16));
  MLTensor.transposed(permutation:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19C4F4F04(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 16);
  if (v2 < 2)
    return (uint64_t)v1;
  v3 = 0;
  v4 = v2 >> 1;
  for (i = v2 + 3; ; --i)
  {
    if (v3 == i - 4)
      goto LABEL_5;
    v6 = v1[2];
    if (v3 >= v6)
      break;
    if (i - 4 >= v6)
      goto LABEL_12;
    v7 = v1[v3 + 4];
    v8 = v1[i];
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_19C503550(v1);
      v1 = (_QWORD *)result;
    }
    v1[v3 + 4] = v8;
    v1[i] = v7;
LABEL_5:
    if (v4 == ++v3)
      return (uint64_t)v1;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_19C4F4FBC(uint64_t result, int64_t a2)
{
  int64_t v2;
  int64_t v4;
  int64_t *v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t i;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15[3];

  v2 = a2 - result;
  if (__OFSUB__(a2, result))
    goto LABEL_22;
  if (v2)
  {
    v4 = result;
    if (v2 <= 0)
    {
      v5 = (int64_t *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_1EE422D98);
      v5 = (int64_t *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v2;
      v5[3] = 2 * (v7 >> 3);
    }
    result = (uint64_t)sub_19C4D4E68(v15, v5 + 4, v2, v4, a2);
    if (result != v2)
      goto LABEL_23;
  }
  else
  {
    v5 = (int64_t *)MEMORY[0x1E0DEE9D8];
  }
  v8 = v5[2];
  if (v8 < 2)
    return (uint64_t)v5;
  v9 = 0;
  v10 = v8 >> 1;
  for (i = v8 + 3; ; --i)
  {
    if (v9 == i - 4)
      goto LABEL_14;
    v12 = v5[2];
    if (v9 >= v12)
      break;
    if (i - 4 >= v12)
      goto LABEL_21;
    v13 = v5[v9 + 4];
    v14 = v5[i];
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_19C503550(v5);
      v5 = (int64_t *)result;
    }
    v5[v9 + 4] = v14;
    v5[i] = v13;
LABEL_14:
    if (v10 == ++v9)
      return (uint64_t)v5;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_19C4F5110(int64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t i;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)sub_19C5A82A8(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v4[2];
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v5 < 2)
    return (uint64_t)v4;
  v7 = 0;
  v8 = v5 >> 1;
  for (i = v5 + 1; ; --i)
  {
    if (v7 == i - 2)
      goto LABEL_5;
    v10 = v4[2];
    if (v7 >= v10)
      break;
    if (i - 2 >= v10)
      goto LABEL_12;
    v11 = *(_OWORD *)&v4[2 * i];
    v12 = *(_OWORD *)&v4[2 * v7 + 4];
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_19C503578(v4);
      v4 = (_QWORD *)result;
    }
    *(_OWORD *)&v4[2 * v7 + 4] = v11;
    *(_OWORD *)&v4[2 * i] = v12;
LABEL_5:
    if (v8 == ++v7)
      return (uint64_t)v4;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

void MLTensor.transposed(permutation:)()
{
  __asm { BR              X11 }
}

{
  MLTensor.transposed(permutation:)();
}

void sub_19C4F5260(uint64_t a1@<X8>)
{
  uint64_t v2;

  if (*(_QWORD *)(*(_QWORD *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16) >= a1)
  {
    if (a1)
      __asm { BR              X2 }
    __asm { BR              X9 }
  }
  while (1)
  {
    sub_19CAAA0B8();
    __break(1u);
  }
}

void MLTensor.replacing(with:where:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

void sub_19C4F5788()
{
  uint64_t v0;
  uint64_t v2;
  char v3;
  uint64_t v4;

  if (!*(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20))
    __asm { BR              X9 }
  v3 = *(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  *(_BYTE *)(v2 - 160) = *(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = 0;
  *(_BYTE *)(v2 - 144) = 0;
  *(_BYTE *)(v2 - 96) = 9;
  sub_19C4D893C(v2 - 160, (uint64_t)&v4);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C4F5DE0);
}

void MLTensor.replacing<A>(with:where:)()
{
  MEMORY[0x1E0C80A78]();
  __asm { BR              X9 }
}

void sub_19C4F5EF4()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unsigned int v6;
  uint64_t v7;

  v5 = *(_BYTE *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v6 = *(unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v4 - 160) = v6;
  *(_BYTE *)(v4 - 159) = v5;
  *(_QWORD *)(v4 - 152) = &unk_1E3D48A30;
  *(_BYTE *)(v4 - 144) = 1;
  *(_BYTE *)(v4 - 96) = 9;
  v7 = v4 - 160;
  if (v6 >= 9)
  {
    sub_19C4F9E38(v7);
    sub_19C59E650(v2, 1);
    *(_QWORD *)(v0 + 64) = v1;
    __asm { BR              X9 }
  }
  sub_19C4D893C(v7, v0 + 184);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C4F67A8);
}

void sub_19C4F6888(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16))
    __asm { BR              X12 }
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C4F6D14);
}

void MLTensor.init<A>(concatenating:alongAxis:)()
{
  uint64_t v0;

  if ((sub_19CAA9C20() & 1) == 0)
  {
    sub_19CAA9C5C();
    if ((~v0 & 0xF000000000000007) != 0)
      __asm { BR              X10 }
    __break(1u);
    JUMPOUT(0x19C4F72C8);
  }
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C4F7400);
}

uint64_t sub_19C4F74A0(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16))
    __asm { BR              X12 }
  return 512;
}

uint64_t sub_19C4F76DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = a3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v16 = MEMORY[0x1E0DEE9D8];
    sub_19C55712C(0, v6, 0);
    v7 = v16;
    v8 = a1 + 32;
    do
    {
      v8 += 8;
      __swift_instantiateConcreteTypeFromMangledName(qword_1EE422D98);
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_19CAE8180;
      *(_QWORD *)(v9 + 32) = a2;
      swift_retain();
      MLTensor.expandingShape(at:)();
      swift_release();
      swift_bridgeObjectRelease();
      v15 = v7;
      v11 = *(_QWORD *)(v7 + 16);
      v10 = *(_QWORD *)(v7 + 24);
      if (v11 >= v10 >> 1)
        sub_19C55712C(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v7 + 16) = v11 + 1;
      *(_QWORD *)(v7 + 8 * v11 + 32) = v14;
      --v6;
    }
    while (v6);
    v5 = a3;
  }
  sub_19C4F6888(v7);
  result = swift_bridgeObjectRelease();
  *v5 = v15;
  return result;
}

uint64_t MLTensor.init<A>(stacking:alongAxis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X7>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  uint64_t result;
  _QWORD v11[6];

  v11[2] = a2;
  v9 = sub_19C4EB7D8((void (*)(char *, char *))sub_19C4FA01C, (uint64_t)v11, a3, (char *)&type metadata for MLTensor, MEMORY[0x1E0DEDCE8], a4, MEMORY[0x1E0DEDD18], a5);
  sub_19C4F6888(v9);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  *a6 = v11[5];
  return result;
}

uint64_t sub_19C4F78D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(qword_1EE422D98);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_19CAE8180;
  *(_QWORD *)(v3 + 32) = a2;
  MLTensor.expandingShape(at:)();
  return swift_bridgeObjectRelease();
}

void MLTensor.concatenated(with:alongAxis:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;

  v2 = *a1;
  v3 = *v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19CAE8310;
  *(_QWORD *)(inited + 32) = v3;
  *(_QWORD *)(inited + 40) = v2;
  swift_retain();
  swift_retain();
  sub_19C4F6888(inited);
}

uint64_t MLTensor.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_19C4F76DC(a1, 0, &v4);
  *a2 = v4;
  return result;
}

uint64_t sub_19C4F7A1C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_19C4F76DC(a1, 0, &v4);
  *a2 = v4;
  return result;
}

uint64_t MLTensor.init<A>(_:alongAxis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v12, a1);
  MLTensor.init<A>(stacking:alongAxis:)((uint64_t)v12, a2, a3, a4, v13, &v16);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a3);
  *a5 = v16;
  return result;
}

void MLTensor.unstacked(alongAxis:)()
{
  __asm { BR              X9 }
}

void sub_19C4F7B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[8];
  char v7;

  v3 = *(_QWORD *)(*(_QWORD *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  v6[0] = v0;
  v6[1] = v3;
  v7 = 6;
  if (-v3 <= v0 && v3 > v0)
  {
    sub_19C4F9E38((uint64_t)v6);
    v6[0] = v1;
    __asm { BR              X10 }
  }
  sub_19C4D893C((uint64_t)v6, (uint64_t)&v5);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C4F7D90);
}

void MLTensor.split(count:alongAxis:)()
{
  __asm { BR              X9 }
}

void sub_19C4F7DF8()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  *(_QWORD *)(v3 - 152) = v1;
  *(_QWORD *)(v3 - 144) = v4;
  *(_BYTE *)(v3 - 88) = 6;
  v5 = v3 - 152;
  if (-v4 <= v1 && v4 > v1)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X9 }
  }
  sub_19C4D893C(v5, (uint64_t)&v7);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C4F8350);
}

void MLTensor.split(sizes:alongAxis:)()
{
  __asm { BR              X10 }
}

void sub_19C4F83D8(int a1@<W8>)
{
  uint64_t v1;

  if (*(_QWORD *)(*(_QWORD *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16))
    __asm { BR              X9 }
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C4F89BCLL);
}

void MLTensor.reversed(alongAxes:)()
{
  MLTensor.reversed(alongAxes:)();
}

{
  __asm { BR              X10 }
}

uint64_t sub_19C4F8A84@<X0>(unsigned int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(*(_QWORD *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  if (v4)
  {
    v5 = (uint64_t *)(*(_QWORD *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 32);
    v6 = 1;
    do
    {
      v7 = *v5++;
      v8 = v6 * v7;
      if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
      {
        __break(1u);
        JUMPOUT(0x19C4F8E78);
      }
      v6 = v8;
      --v4;
    }
    while (v4);
    if (v8 != 1)
    {
      v10 = a1;
      if (*(_QWORD *)(v2 + 16))
      {
        swift_bridgeObjectRetain();
        swift_retain();
        v11 = swift_bridgeObjectRetain();
        sub_19C4F9948(v11, v1);
        swift_bridgeObjectRelease_n();
        swift_release();
        __asm { BR              X10 }
      }
      __asm { BR              X9 }
    }
  }
  *v3 = v1;
  return swift_retain();
}

uint64_t sub_19C4F8F78(unint64_t a1)
{
  return ((uint64_t (*)(void))((char *)&loc_19C4F8F84 + dword_19C4F8FF4[a1 >> 62]))();
}

uint64_t sub_19C4F8F94(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  if (!v1)
    return 1;
  v2 = (uint64_t *)(*(_QWORD *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 32);
  v3 = 1;
  do
  {
    v4 = *v2++;
    result = v3 * v4;
    if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
    {
      __break(1u);
      JUMPOUT(0x19C4F8FF4);
    }
    v3 = result;
    --v1;
  }
  while (v1);
  return result;
}

_QWORD *sub_19C4F9004(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19C4F9574(a1, a2, a3, a4, qword_1EE422D98);
}

_QWORD *sub_19C4F9010(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE424250);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_19C4F9C3C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_19C4F911C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19C4F9360(a1, a2, a3, a4, qword_1EE421948);
}

_QWORD *sub_19C4F9128(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4233A0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_19C4F9D2C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_19C4F9248(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_19C4F9F2C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_19C4F9354(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19C4F9360(a1, a2, a3, a4, &qword_1EE4235F0);
}

_QWORD *sub_19C4F9360(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
          memmove(v14, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_19C4FA038(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_19C4F9468(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235E8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_19C4FA120(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_19C4F9574(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_19C4FA208(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_19C4F967C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4242C0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_19C4FA2F0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_19C4F9788(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19C4F9360(a1, a2, a3, a4, (uint64_t *)&unk_1EE424230);
}

uint64_t sub_19C4F9794(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    sub_19C556FD0(0, v3, 0);
    v6 = 0;
    result = v17;
    v7 = a1 + 32;
    v8 = (a2 & 0x3FFFFFFFFFFFFFFFLL) + 24;
    v9 = (a2 & 0x3FFFFFFFFFFFFFFFLL) + 16;
    v10 = a2 + 40;
    do
    {
      v11 = *(_QWORD *)(v7 + 8 * v6);
      if (v11 == -1)
        __asm { BR              X9 }
      v18 = result;
      v13 = *(_QWORD *)(result + 16);
      v12 = *(_QWORD *)(result + 24);
      if (v13 >= v12 >> 1)
      {
        v15 = v9;
        v16 = v8;
        v14 = v10;
        sub_19C556FD0(v12 > 1, v13 + 1, 1);
        v10 = v14;
        v9 = v15;
        v8 = v16;
        result = v18;
      }
      ++v6;
      *(_QWORD *)(result + 16) = v13 + 1;
      *(_QWORD *)(result + 8 * v13 + 32) = v11;
    }
    while (v6 != v3);
  }
  return result;
}

uint64_t sub_19C4F9948(uint64_t a1, uint64_t a2)
{
  int64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_19C556FD0(0, v2, 0);
    __asm { BR              X9 }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_19C4F9AE0(uint64_t a1, uint64_t a2)
{
  int64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_19C5570D4(0, v2, 0);
    __asm { BR              X10 }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_19C4F9C3C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_19CAAA118();
  __break(1u);
  return result;
}

uint64_t sub_19C4F9D2C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235F8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_19CAAA118();
  __break(1u);
  return result;
}

uint64_t sub_19C4F9E38(uint64_t a1)
{
  destroy for InputError(a1);
  return a1;
}

uint64_t sub_19C4F9E6C(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return swift_release();
  return result;
}

uint64_t sub_19C4F9E84(_QWORD *a1)
{
  return ((uint64_t (*)(void))((char *)sub_19C4F9EA8 + 4 * byte_19CAE838C[*a1 >> 62]))();
}

BOOL sub_19C4F9EA8@<W0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(*(_QWORD *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16) == a1;
}

void sub_19C4F9ED8()
{
  sub_19C4F4174();
}

uint64_t sub_19C4F9F2C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_19CAAA118();
  __break(1u);
  return result;
}

uint64_t sub_19C4FA01C(uint64_t a1)
{
  uint64_t v1;

  return sub_19C4F78D8(a1, *(_QWORD *)(v1 + 16));
}

char *sub_19C4FA038(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_19CAAA118();
  __break(1u);
  return result;
}

char *sub_19C4FA120(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_19CAAA118();
  __break(1u);
  return result;
}

char *sub_19C4FA208(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_19CAAA118();
  __break(1u);
  return result;
}

uint64_t sub_19C4FA2F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_19CAAA118();
  __break(1u);
  return result;
}

uint64_t MLTensor.ResizeMethod.hash(into:)()
{
  _BYTE *v0;

  if (*v0 == 2)
    return sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2B0();
}

uint64_t static MLTensor.ResizeMethod.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  char v3;
  int v4;

  v2 = *a1;
  v3 = v2 == 2;
  v4 = *a2;
  if (v4 != 2)
    v3 = 0;
  if (v2 != 2 && v4 != 2)
    v3 = ((v2 & 1) == 0) ^ v4;
  return v3 & 1;
}

uint64_t MLTensor.ResizeMethod.hashValue.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  sub_19CAAA298();
  sub_19CAAA2A4();
  if (v1 != 2)
    sub_19CAAA2B0();
  return sub_19CAAA2C8();
}

uint64_t sub_19C4FA4D0()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  sub_19CAAA298();
  sub_19CAAA2A4();
  if (v1 != 2)
    sub_19CAAA2B0();
  return sub_19CAAA2C8();
}

uint64_t sub_19C4FA53C()
{
  _BYTE *v0;

  if (*v0 == 2)
    return sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2B0();
}

uint64_t sub_19C4FA588()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  sub_19CAAA298();
  sub_19CAAA2A4();
  if (v1 != 2)
    sub_19CAAA2B0();
  return sub_19CAAA2C8();
}

uint64_t sub_19C4FA5F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  char v3;
  int v4;

  v2 = *a1;
  v3 = v2 == 2;
  v4 = *a2;
  if (v4 != 2)
    v3 = 0;
  if (v2 != 2 && v4 != 2)
    v3 = ((v2 & 1) == 0) ^ v4;
  return v3 & 1;
}

uint64_t MLTensor.ResizeMethod.description.getter()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;

  v1 = *v0;
  v2 = 0xD000000000000018;
  if ((v1 & 1) == 0)
    v2 = 0x7261656E696C6962;
  if (v1 == 2)
    return 0x4E7473657261656ELL;
  else
    return v2;
}

uint64_t sub_19C4FA694()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;

  v1 = *v0;
  v2 = 0xD000000000000018;
  if ((v1 & 1) == 0)
    v2 = 0x7261656E696C6962;
  if (v1 == 2)
    return 0x4E7473657261656ELL;
  else
    return v2;
}

void MLTensor.resized(to:method:)()
{
  __asm { BR              X9 }
}

void sub_19C4FA760()
{
  uint64_t v0;
  uint64_t v2;
  char v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 168) = v4;
  *(_BYTE *)(v2 - 167) = v3;
  *(_QWORD *)(v2 - 160) = &unk_1E3D48860;
  *(_BYTE *)(v2 - 152) = 1;
  *(_BYTE *)(v2 - 104) = 9;
  v5 = v2 - 168;
  if (v4 >= 9)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C4FADC4);
}

int64_t sub_19C4FAE24(int64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (!result)
      v3 = 0;
    if (v2 >= v3)
      return a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_19C4FAE68(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;

  v2 = result;
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD **)v1;
  v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(), *(_QWORD *)v1 = v4, (result & 1) == 0))
  {
    v9 = v4;
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v8 = *(_QWORD *)(v1 + 8);
  sub_19CAAA1FC();
  swift_unknownObjectRetain();
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    result = MEMORY[0x1E0DEE9D8];
  }
  v9 = *(_QWORD **)(result + 16);
  if (v8 + 8 * v6 + 8 * v7 == result + 8 * (_QWORD)v9 + 32)
    goto LABEL_31;
  result = swift_release();
  while (1)
  {
    if (v7 >= v2)
      goto LABEL_28;
    v9 = *(_QWORD **)v1;
LABEL_9:
    v7 = *(_QWORD *)(v1 + 16);
    v10 = v5 - v7;
    if (__OFSUB__(v5, v7))
    {
      __break(1u);
      goto LABEL_35;
    }
    v11 = *(_QWORD *)(v1 + 8);
    if (v10 <= v2 ? v2 : v5 - v7)
      break;
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v5 >= v7)
      goto LABEL_17;
LABEL_30:
    __break(1u);
LABEL_31:
    v19 = *(_QWORD *)(result + 24);
    result = swift_release();
    v20 = (v19 >> 1) - (_QWORD)v9;
    v21 = __OFADD__(v7, v20);
    v7 += v20;
    if (v21)
      goto LABEL_40;
  }
  __swift_instantiateConcreteTypeFromMangledName(qword_1EE422D98);
  v4 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v4);
  v13 = result - 32;
  if (result < 32)
    v13 = result - 25;
  v4[2] = v10;
  v4[3] = 2 * (v13 >> 3);
  if (v5 < v7)
    goto LABEL_30;
LABEL_17:
  if ((v10 & 0x8000000000000000) == 0)
  {
    v14 = (unint64_t)(v4 + 4);
    v15 = (_QWORD *)(v11 + 8 * v7);
    if (v15 >= &v4[v10 + 4] || v14 >= (unint64_t)&v15[v10])
    {
      memcpy(v4 + 4, v15, 8 * v10);
      if (!__OFSUB__(0, v7))
      {
        v17 = v4[2];
        v18 = v7 + v17;
        if (!__OFADD__(v7, v17))
        {
          if (v18 >= v7)
          {
            result = swift_unknownObjectRelease();
            if ((v18 & 0x8000000000000000) == 0)
            {
              *(_QWORD *)(v1 + 8) = v14 - 8 * v7;
              *(_QWORD *)(v1 + 16) = v7;
              *(_QWORD *)(v1 + 24) = (2 * v18) | 1;
LABEL_28:
              *(_QWORD *)v1 = v4;
              return result;
            }
            goto LABEL_38;
          }
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
LABEL_41:
  result = sub_19CAAA118();
  __break(1u);
  return result;
}

uint64_t sub_19C4FB0D4(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  char *__dst;

  v6 = v4[2];
  v7 = v4[3] >> 1;
  v8 = v7 - v6;
  if (__OFSUB__(v7, v6))
  {
    __break(1u);
    goto LABEL_32;
  }
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 16);
  v30 = __OFSUB__(v11, a2);
  v12 = v11 - a2;
  if (v30)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v15 = v8 - a2;
  if (__OFSUB__(v8, a2))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v30 = __OFSUB__(v15, v14);
  v16 = v15 - v14;
  if (v30)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v38 = v16;
  __dst = (char *)(v10 + 32);
  v18 = sub_19C4FB608(v8);
  v37 = (char *)(v10 + 32 + 8 * a2 + 8 * a3);
  if (v18)
  {
    v36 = a4;
    if (a2 < 0)
      goto LABEL_46;
    v19 = v18;
    v20 = v4[2];
    v21 = (char *)(v4[1] + 8 * v20);
    v22 = &v21[8 * a2];
    if (__dst != v21 || __dst >= v22)
      memmove(__dst, v21, 8 * a2);
    v36(v10 + 32 + 8 * a2, a3);
    if (v14 < 0)
      goto LABEL_46;
    v23 = &v22[8 * v38];
    if (v37 != v23 || v37 >= &v23[8 * v14])
      memmove(v37, v23, 8 * v14);
    *(_QWORD *)(v19 + 16) = 0;
    swift_release();
LABEL_26:
    swift_retain();
    result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v20))
    {
      v34 = *(_QWORD *)(v10 + 16);
      v30 = __OFADD__(v20, v34);
      v35 = v20 + v34;
      if (!v30)
      {
        if (v35 >= v20)
        {
          if ((v35 & 0x8000000000000000) == 0)
          {
            *v4 = v10;
            v4[1] = &__dst[-8 * v20];
            v4[2] = v20;
            v4[3] = (2 * v35) | 1;
            return result;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v25 = (void (*)(char *, uint64_t))a4;
  v20 = v4[2];
  v26 = v20 + a2;
  if (__OFADD__(v20, a2))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v26 < v20)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (__OFSUB__(v26, v20))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v27 = v4[1];
  memcpy(__dst, (const void *)(v27 + 8 * v20), 8 * a2);
  v25(&__dst[8 * a2], a3);
  v28 = v26 + v38;
  if (__OFADD__(v26, v38))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v29 = v4[3] >> 1;
  v30 = __OFSUB__(v29, v28);
  v31 = v29 < v28;
  v32 = v29 - v28;
  if (v31)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (!v30)
  {
    memcpy(v37, (const void *)(v27 + 8 * v28), 8 * v32);
    goto LABEL_26;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  result = sub_19CAAA118();
  __break(1u);
  return result;
}

uint64_t sub_19C4FB344(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = v3 >> 1;
  v5 = __OFSUB__(v3 >> 1, v2);
  v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v7)
    return result;
  sub_19CAAA1FC();
  swift_unknownObjectRetain();
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    result = MEMORY[0x1E0DEE9D8];
  }
  v8 = *(_QWORD *)(result + 16);
  v5 = __OFADD__(v8, v7);
  v9 = v8 + v7;
  if (v5)
    goto LABEL_13;
  *(_QWORD *)(result + 16) = v9;
  result = swift_release();
  v10 = v4 + v7;
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v1 + 24) = v3 & 1 | (2 * v10);
  return result;
}

uint64_t sub_19C4FB3F8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  uint64_t v29;

  v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_34:
    if (v8 >= v7)
      goto LABEL_21;
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_37;
  }
  v7 = a2;
  v6 = result;
  if ((a6 & 1) == 0)
    goto LABEL_34;
  sub_19CAAA1FC();
  swift_unknownObjectRetain();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    v11 = MEMORY[0x1E0DEE9D8];
  }
  v12 = *(_QWORD *)(v11 + 16);
  v13 = a4 + 8 * a5 + 8 * v8;
  if (v13 == v11 + 8 * v12 + 32)
  {
    v15 = *(_QWORD *)(v11 + 24);
    result = swift_release();
    v16 = (v15 >> 1) - v12;
    v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    swift_release();
    v14 = v8;
  }
  swift_unknownObjectRetain();
  v17 = swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      v17 = MEMORY[0x1E0DEE9D8];
    }
    v18 = *(_QWORD *)(v17 + 16);
    if (v13 == v17 + 8 * v18 + 32)
    {
      v20 = *(_QWORD *)(v17 + 24);
      result = swift_release();
      v21 = (v20 >> 1) - v18;
      v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
      result = swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    v17 = MEMORY[0x1E0DEE9D8];
  }
  v19 = *(_QWORD *)(v17 + 16);
  if (v13 == v17 + 8 * v19 + 32)
  {
    v23 = *(_QWORD *)(v17 + 24);
    result = swift_release();
    v24 = (v23 >> 1) - v19;
    v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22)
      goto LABEL_21;
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7)
    v25 = v7;
  else
    v25 = v8;
  if (v25 <= v6)
    v26 = v6;
  else
    v26 = v25;
  if (!v26)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(qword_1EE422D98);
  v27 = (_QWORD *)swift_allocObject();
  v28 = _swift_stdlib_malloc_size(v27);
  v29 = v28 - 32;
  if (v28 < 32)
    v29 = v28 - 25;
  v27[2] = v6;
  v27[3] = 2 * (v29 >> 3);
  return (uint64_t)v27;
}

uint64_t (*sub_19C4FB5F8())(_QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t sub_19C4FB608(uint64_t a1)
{
  _QWORD *v1;
  int64_t isUniquelyReferenced_nonNull;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!(_DWORD)isUniquelyReferenced_nonNull)
    return 0;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_20;
  }
  v8 = v1[1];
  if ((v5 & 1) == 0)
    goto LABEL_8;
  sub_19CAAA1FC();
  swift_unknownObjectRetain();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
  }
  v10 = *(_QWORD *)(v9 + 16);
  if (v8 + 8 * v6 + 8 * v7 != v9 + 8 * v10 + 32)
  {
    swift_release();
LABEL_8:
    v11 = v7;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v9 + 24);
  result = swift_release();
  v14 = (v12 >> 1) - v10;
  v15 = __OFADD__(v7, v14);
  v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < a1)
      return 0;
    sub_19CAAA1FC();
    swift_unknownObjectRetain();
    a1 = swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = MEMORY[0x1E0DEE9D8];
    }
    v16 = v8 + 8 * v6 - a1;
    v17 = v16 - 32;
    v18 = v16 - 25;
    if (v17 >= 0)
      v18 = v17;
    isUniquelyReferenced_nonNull = v7 + (v18 >> 3);
    if (!__OFADD__(v7, v18 >> 3))
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (isUniquelyReferenced_nonNull >= v4)
        return a1;
LABEL_21:
      sub_19C4FB774(isUniquelyReferenced_nonNull, v4, 0);
      return a1;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

unint64_t sub_19C4FB774(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  const void *v11;
  uint64_t v13;
  uint64_t v14;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_17;
  }
  v6 = a3 - v4;
  if (__OFSUB__(a3, v4))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v6)
    goto LABEL_14;
  v7 = *v3;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = __OFSUB__(v8, a2);
  v10 = v8 - a2;
  if (v9)
    goto LABEL_18;
  if (v10 < 0)
  {
LABEL_21:
    result = sub_19CAAA118();
    __break(1u);
    return result;
  }
  result = v7 + 32 + 8 * result + 8 * a3;
  v11 = (const void *)(v7 + 32 + 8 * a2);
  if ((const void *)result != v11 || result >= (unint64_t)v11 + 8 * v10)
    result = (unint64_t)memmove((void *)result, v11, 8 * v10);
  v13 = *(_QWORD *)(v7 + 16);
  v9 = __OFADD__(v13, v6);
  v14 = v13 + v6;
  if (v9)
    goto LABEL_19;
  *(_QWORD *)(v7 + 16) = v14;
LABEL_14:
  if (a3 > 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

uint64_t sub_19C4FB864(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _OWORD *v30;
  __int128 *v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  v5 = (v3 >> 1) - v4;
  if (__OFSUB__(v3 >> 1, v4))
    goto LABEL_57;
  v43 = *(_QWORD *)(result + 16);
  if (v43 == a2)
    return result;
  if (v43 <= a2)
    goto LABEL_58;
  v6 = (uint64_t *)v2;
  v42 = result + 32;
  v7 = *(_QWORD *)(result + 32 + 8 * a2);
  v46 = a2 + 1;
  v41 = result + 48;
  while (!__OFADD__(v5, 1))
  {
    v47 = sub_19C4FB3F8(v5, v5 + 1, *v6, v6[1], v4, v3);
    v8 = (void (*)(uint64_t, uint64_t))sub_19C4FB5F8();
    v9 = v6;
    sub_19C4FB0D4(&v47, v5, 0, v8);
    swift_release();
    result = swift_release();
    v4 = v6[2];
    v3 = v6[3];
    v10 = (v3 >> 1) - v4;
    if (__OFSUB__(v3 >> 1, v4))
      goto LABEL_52;
    v44 = v3 >> 1;
    v45 = v5 + 1;
    v11 = v6[1];
    if ((v3 & 1) != 0)
    {
      v12 = (v3 >> 1) - v4;
      v13 = v5;
      v14 = v6[3];
      sub_19CAAA1FC();
      swift_unknownObjectRetain();
      v15 = swift_dynamicCastClass();
      if (!v15)
      {
        swift_unknownObjectRelease();
        v15 = MEMORY[0x1E0DEE9D8];
      }
      v16 = *(_QWORD *)(v15 + 16);
      if (v11 + 8 * v4 + 8 * v12 == v15 + 8 * v16 + 32)
      {
        v18 = v11;
        v19 = v4;
        v20 = *(_QWORD *)(v15 + 24);
        result = swift_release();
        v21 = (v20 >> 1) - v16;
        v22 = __OFADD__(v12, v21);
        v17 = v12 + v21;
        if (v22)
          goto LABEL_56;
        v10 = v12;
        v4 = v19;
        v11 = v18;
        v6 = v9;
        v3 = v14;
        v5 = v13;
        if (v13 >= v17)
        {
LABEL_41:
          v23 = 0;
          goto LABEL_42;
        }
      }
      else
      {
        result = swift_release();
        v17 = v12;
        v3 = v14;
        v5 = v13;
        v10 = v12;
        if (v13 >= v12)
          goto LABEL_41;
      }
    }
    else
    {
      v17 = (v3 >> 1) - v4;
      if (v5 >= v10)
        goto LABEL_41;
    }
    *(_QWORD *)(v11 + 8 * v4 + 8 * v5) = v7;
    if (v46 != v43)
    {
      if (v46 <= v43)
        v24 = v43;
      else
        v24 = v46;
      v25 = v43 + ~v46;
      if (v25 >= v17 + ~v5)
        v25 = v17 + ~v5;
      if (v25 >= v24 - v46)
        v25 = v24 - v46;
      v26 = v25 + 1;
      if (v26 > 0xA)
      {
        v27 = 8 * v46;
        if (v11 + 8 * v5 + 8 * v4 - (v42 + 8 * v46) + 8 >= 0x20)
        {
          v28 = v26 & 3;
          if ((v26 & 3) == 0)
            v28 = 4;
          v29 = v26 - v28;
          v46 += v29;
          v45 += v29;
          v30 = (_OWORD *)(v11 + 8 * v5 + 8 * v4 + 24);
          v31 = (__int128 *)(v41 + v27);
          do
          {
            v32 = *v31;
            *(v30 - 1) = *(v31 - 1);
            *v30 = v32;
            v30 += 2;
            v31 += 2;
            v29 -= 4;
          }
          while (v29);
        }
      }
      v33 = 0;
      v34 = v24 - v46;
      v35 = v17 - v45;
      while (v34 != v33)
      {
        v7 = *(_QWORD *)(v42 + 8 * v46 + 8 * v33);
        v23 = v35 != v33;
        if (v35 == v33)
        {
          v46 += v33 + 1;
          v5 = v17;
          goto LABEL_42;
        }
        *(_QWORD *)(v11 + 8 * v45 + 8 * v4 + 8 * v33++) = v7;
        if (!(v46 - v43 + v33))
        {
          v7 = 0;
          v5 = v45 + v33;
          goto LABEL_38;
        }
      }
      goto LABEL_50;
    }
    v7 = 0;
    v23 = 1;
    v5 = v45;
LABEL_38:
    v46 = v43;
LABEL_42:
    v36 = v5 - v10;
    if (__OFSUB__(v5, v10))
      goto LABEL_53;
    if (v36)
    {
      v37 = v3;
      sub_19CAAA1FC();
      swift_unknownObjectRetain();
      result = swift_dynamicCastClass();
      if (!result)
      {
        swift_unknownObjectRelease();
        result = MEMORY[0x1E0DEE9D8];
      }
      v38 = *(_QWORD *)(result + 16);
      v22 = __OFADD__(v38, v36);
      v39 = v38 + v36;
      if (v22)
        goto LABEL_54;
      *(_QWORD *)(result + 16) = v39;
      result = swift_release();
      v40 = v44 + v36;
      if (__OFADD__(v44, v36))
        goto LABEL_55;
      if ((v40 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_50:
        __break(1u);
        break;
      }
      v3 = v37 & 1 | (2 * v40);
      v6[3] = v3;
    }
    if (v23)
      return result;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

uint64_t sub_19C4FBC38(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  char *v27;
  size_t v28;

  v3 = v1[2];
  v2 = v1[3];
  v4 = (v2 >> 1) - v3;
  if (__OFSUB__(v2 >> 1, v3))
  {
    __break(1u);
    goto LABEL_34;
  }
  v6 = *(_QWORD *)(a1 + 16);
  if ((v2 & 1) == 0)
    goto LABEL_7;
  v7 = v1[1];
  sub_19CAAA1FC();
  swift_unknownObjectRetain();
  v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
    v8 = MEMORY[0x1E0DEE9D8];
  }
  v9 = *(_QWORD *)(v8 + 16);
  if (v7 + 8 * v3 + 8 * v4 != v8 + 8 * v9 + 32)
  {
    swift_release();
LABEL_7:
    v10 = v4;
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(v8 + 24);
  swift_release();
  v12 = (v11 >> 1) - v9;
  v13 = __OFADD__(v4, v12);
  v10 = v4 + v12;
  if (v13)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_9:
  v14 = v4 + v6;
  if (__OFADD__(v4, v6))
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v10 < v14)
  {
    if (v10 + 0x4000000000000000 < 0)
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v15 = 2 * v10;
    if (v15 > v14)
      v14 = v15;
  }
  result = sub_19C4FAE68(v14);
  v18 = v1[2];
  v17 = v1[3];
  v19 = (v17 >> 1) - v18;
  if (__OFSUB__(v17 >> 1, v18))
    goto LABEL_35;
  v20 = (char *)(v1[1] + 8 * v18 + 8 * v19);
  if ((v17 & 1) == 0)
  {
LABEL_20:
    v23 = v19;
    goto LABEL_22;
  }
  sub_19CAAA1FC();
  swift_unknownObjectRetain();
  v21 = swift_dynamicCastClass();
  if (!v21)
  {
    swift_unknownObjectRelease();
    v21 = MEMORY[0x1E0DEE9D8];
  }
  v22 = *(_QWORD *)(v21 + 16);
  if (v20 != (char *)(v21 + 8 * v22 + 32))
  {
    result = swift_release();
    goto LABEL_20;
  }
  v24 = *(_QWORD *)(v21 + 24);
  result = swift_release();
  v25 = (v24 >> 1) - v22;
  v13 = __OFADD__(v19, v25);
  v23 = v19 + v25;
  if (v13)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    result = sub_19CAAA118();
    __break(1u);
    return result;
  }
LABEL_22:
  v26 = v23 - v19;
  if (__OFSUB__(v23, v19))
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (!v6)
    goto LABEL_30;
  if (v26 < v6)
    goto LABEL_37;
  v27 = (char *)(a1 + 32);
  v28 = 8 * v6;
  if (a1 + 32 < (unint64_t)&v20[8 * v6] && v20 < &v27[v28])
    goto LABEL_42;
  result = (uint64_t)memcpy(v20, v27, v28);
  if (v6 <= 0)
    goto LABEL_30;
  if (__OFADD__(v19, v6))
    goto LABEL_39;
  result = sub_19C4FB344(v19 + v6);
LABEL_30:
  if (v6 == v26)
    return sub_19C4FB864(a1, v6);
  return result;
}

unint64_t sub_19C4FBEA4()
{
  unint64_t result;

  result = qword_1EE423600;
  if (!qword_1EE423600)
  {
    result = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLTensor.ResizeMethod, &type metadata for MLTensor.ResizeMethod);
    atomic_store(result, (unint64_t *)&qword_1EE423600);
  }
  return result;
}

uint64_t _s12ResizeMethodOwet(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = (v6 + 2147483646) & 0x7FFFFFFF;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_19C4FBF38 + 4 * byte_19CAE83D0[v4]))();
  }
}

uint64_t _s12ResizeMethodOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_19C4FBFF0 + 4 * byte_19CAE83DA[v5]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_19C4FC024 + 4 * byte_19CAE83D5[v5]))();
}

uint64_t sub_19C4FC024(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C4FC02C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19C4FC034);
  return result;
}

uint64_t sub_19C4FC040(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19C4FC048);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_19C4FC04C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C4FC054(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C4FC060(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_BYTE *sub_19C4FC07C(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for MLTensor.ResizeMethod()
{
  return &type metadata for MLTensor.ResizeMethod;
}

_QWORD *sub_19C4FC0A4(_QWORD *result)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v1[2];
  v3 = v1[3];
  v4 = (v3 >> 1) - v2;
  if (__OFSUB__(v3 >> 1, v2))
    goto LABEL_48;
  v5 = result[4];
  v35 = result[3] >> 1;
  if (v5 == v35)
    return result;
  v6 = result[2];
  if (v5 < v6 || v5 >= v35)
    goto LABEL_49;
  v8 = v5 + 1;
  v9 = *(_QWORD *)(result[1] + 8 * v5);
  v28 = result[1];
  v29 = result[2];
  v30 = v1;
  while (!__OFADD__(v4, 1))
  {
    v36 = sub_19C4FB3F8(v4, v4 + 1, *v1, v1[1], v2, v3);
    v10 = (void (*)(uint64_t, uint64_t))sub_19C4FB5F8();
    sub_19C4FB0D4(&v36, v4, 0, v10);
    swift_release();
    result = (_QWORD *)swift_release();
    v2 = v1[2];
    v3 = v1[3];
    v11 = (v3 >> 1) - v2;
    if (__OFSUB__(v3 >> 1, v2))
      goto LABEL_43;
    v31 = v4 + 1;
    v32 = v3 >> 1;
    v12 = v1[1];
    if ((v3 & 1) != 0)
    {
      v33 = v4;
      v13 = v1[2];
      sub_19CAAA1FC();
      swift_unknownObjectRetain();
      v14 = swift_dynamicCastClass();
      if (!v14)
      {
        swift_unknownObjectRelease();
        v14 = MEMORY[0x1E0DEE9D8];
      }
      v15 = *(_QWORD *)(v14 + 16);
      if (v12 + 8 * v13 + 8 * v11 == v14 + 8 * v15 + 32)
      {
        v17 = *(_QWORD *)(v14 + 24);
        result = (_QWORD *)swift_release();
        v18 = (v17 >> 1) - v15;
        v19 = __OFADD__(v11, v18);
        v16 = v11 + v18;
        if (v19)
          goto LABEL_47;
        v6 = v29;
      }
      else
      {
        result = (_QWORD *)swift_release();
        v16 = v11;
      }
      v2 = v13;
      v4 = v33;
      if (v33 >= v16)
      {
LABEL_32:
        v20 = 0;
        goto LABEL_33;
      }
    }
    else
    {
      v16 = (v3 >> 1) - v2;
      if (v4 >= v11)
        goto LABEL_32;
    }
    *(_QWORD *)(v12 + 8 * v2 + 8 * v4) = v9;
    if (v8 != v35)
    {
      v21 = 0;
      v22 = ~v4 + v16;
      while (v8 >= v6 && v8 + v21 < v35)
      {
        v9 = *(_QWORD *)(v28 + 8 * v8 + 8 * v21);
        v20 = v22 != v21;
        if (v22 == v21)
        {
          v8 += v21 + 1;
          v4 = v16;
          goto LABEL_33;
        }
        *(_QWORD *)(v12 + 8 * v4 + 8 * v2 + 8 + 8 * v21++) = v9;
        if (!(v8 - v35 + v21))
        {
          v9 = 0;
          v4 = v31 + v21;
          v8 = v35;
          goto LABEL_33;
        }
      }
      goto LABEL_41;
    }
    v9 = 0;
    v20 = 1;
    v4 = v31;
    v8 = v35;
LABEL_33:
    v23 = v4 - v11;
    if (__OFSUB__(v4, v11))
      goto LABEL_44;
    v1 = v30;
    if (v23)
    {
      v34 = v4;
      v24 = v2;
      sub_19CAAA1FC();
      swift_unknownObjectRetain();
      result = (_QWORD *)swift_dynamicCastClass();
      if (!result)
      {
        swift_unknownObjectRelease();
        result = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      v25 = result[2];
      v19 = __OFADD__(v25, v23);
      v26 = v25 + v23;
      if (v19)
        goto LABEL_45;
      result[2] = v26;
      result = (_QWORD *)swift_release();
      v27 = v32 + v23;
      if (__OFADD__(v32, v23))
        goto LABEL_46;
      if ((v27 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_41:
        __break(1u);
        break;
      }
      v3 = v3 & 1 | (2 * v27);
      v30[3] = v3;
      v6 = v29;
      v2 = v24;
      v4 = v34;
    }
    if (v20)
      return result;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

_QWORD *sub_19C4FC3B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  _QWORD v36[5];

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_38;
  }
  v8 = v4[2];
  v7 = v4[3];
  v9 = (v7 >> 1) - v8;
  if (__OFSUB__(v7 >> 1, v8))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((v7 & 1) == 0)
  {
LABEL_8:
    v15 = v9;
    goto LABEL_10;
  }
  v12 = v4[1];
  sub_19CAAA1FC();
  swift_unknownObjectRetain();
  v13 = swift_dynamicCastClass();
  if (!v13)
  {
    swift_unknownObjectRelease();
    v13 = MEMORY[0x1E0DEE9D8];
  }
  v14 = *(_QWORD *)(v13 + 16);
  if (v12 + 8 * v8 + 8 * v9 != v13 + 8 * v14 + 32)
  {
    swift_release();
    goto LABEL_8;
  }
  v16 = *(_QWORD *)(v13 + 24);
  swift_release();
  v17 = (v16 >> 1) - v14;
  v18 = __OFADD__(v9, v17);
  v15 = v9 + v17;
  if (v18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_10:
  v19 = v9 + v6;
  if (__OFADD__(v9, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v15 < v19)
  {
    if (v15 + 0x4000000000000000 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v20 = 2 * v15;
    if (v20 > v19)
      v19 = v20;
  }
  result = (_QWORD *)sub_19C4FAE68(v19);
  v23 = v4[2];
  v22 = v4[3];
  v24 = (v22 >> 1) - v23;
  if (__OFSUB__(v22 >> 1, v23))
    goto LABEL_40;
  v25 = (char *)(v4[1] + 8 * v23 + 8 * v24);
  if ((v22 & 1) == 0)
  {
LABEL_21:
    v28 = v24;
    goto LABEL_23;
  }
  sub_19CAAA1FC();
  swift_unknownObjectRetain();
  v26 = swift_dynamicCastClass();
  if (!v26)
  {
    swift_unknownObjectRelease();
    v26 = MEMORY[0x1E0DEE9D8];
  }
  v27 = *(_QWORD *)(v26 + 16);
  if (v25 != (char *)(v26 + 8 * v27 + 32))
  {
    result = (_QWORD *)swift_release();
    goto LABEL_21;
  }
  v29 = *(_QWORD *)(v26 + 24);
  result = (_QWORD *)swift_release();
  v30 = (v29 >> 1) - v27;
  v18 = __OFADD__(v24, v30);
  v28 = v24 + v30;
  if (v18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_23:
  v31 = v28 - v24;
  if (__OFSUB__(v28, v24))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v5 == a3)
  {
    if (v6 <= 0)
    {
      v6 = 0;
      v5 = a3;
      goto LABEL_34;
    }
    goto LABEL_42;
  }
  if (v31 < v6)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v6 < 0)
    goto LABEL_48;
  v32 = (char *)(a2 + 8 * a3);
  v33 = 8 * v6;
  if (v32 < &v25[8 * v6] && v25 < &v32[v33])
    goto LABEL_48;
  result = memcpy(v25, v32, v33);
  if (v6)
  {
    if (__OFADD__(v24, v6))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      result = (_QWORD *)sub_19CAAA118();
      __break(1u);
      return result;
    }
    result = (_QWORD *)sub_19C4FB344(v24 + v6);
  }
LABEL_34:
  if (v6 == v31)
  {
    v36[0] = a1;
    v36[1] = a2;
    v36[2] = a3;
    v36[3] = a4;
    v36[4] = v5;
    return sub_19C4FC0A4(v36);
  }
  return result;
}

void MLTensor.clamped(to:)()
{
  __asm { BR              X9 }
}

{
  sub_19C4FC9CC();
}

{
  sub_19C4FC9CC();
}

void sub_19C4FC6D8()
{
  uint64_t v0;
  uint64_t v2;
  char v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  void *v9;

  v3 = *(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 176) = v4;
  *(_BYTE *)(v2 - 175) = v3;
  *(_QWORD *)(v2 - 168) = &unk_1E3D487B8;
  *(_BYTE *)(v2 - 160) = 1;
  *(_BYTE *)(v2 - 112) = 9;
  v5 = v2 - 176;
  if (v4 >= 9)
  {
    sub_19C4F9E38(v5);
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v6 = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = v0;
    swift_retain();
    sub_19C522A50(inited, (uint64_t *)(v2 - 176));
    swift_bridgeObjectRelease();
    sub_19C4F382C(v6);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 - 176), *(_QWORD *)(v2 - 152));
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v8 + 32) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D0);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_19CAE8180;
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v9);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C4FC994);
}

void sub_19C4FC9CC()
{
  __asm { BR              X11 }
}

uint64_t sub_19C4FCA18()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t *);
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  _BYTE *v6;
  int v7;
  __int16 v8;
  char *v9;
  uint64_t inited;
  uint64_t v12;

  v4 = v0 & 0x3FFFFFFFFFFFFFFFLL;
  v5 = (unsigned __int8 *)(v4 + 32);
  v6 = (_BYTE *)(v4 + 33);
  v7 = *v5;
  if (v7 != 10)
  {
    if (*v6)
      v8 = 256;
    else
      v8 = 0;
    v9 = (char *)&loc_19C4FCAAC + 4 * byte_19CAE8490[sub_19C52481C(266, v8 | (unsigned __int16)v7)];
    __asm { BR              X10 }
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423608);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
  *(_DWORD *)(inited + 32) = v3;
  sub_19C4FCF90(MEMORY[0x1E0DEE9D8], inited, (uint64_t *)(v2 - 64));
  v12 = *(_QWORD *)(v2 - 64);
  v1(v2 - 56, &v12);
  return swift_release();
}

void MLTensor.softmax(alongAxis:)()
{
  __asm { BR              X9 }
}

void sub_19C4FCC24()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D48888;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4 >= 9)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X9 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C4FCF60);
}

uint64_t sub_19C4FCF90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[7];

  v20[6] = a2;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(a1 + 32);
    v7 = 1;
    v8 = *(_QWORD *)(a1 + 16);
    while (1)
    {
      v9 = *v6++;
      v10 = v7 * v9;
      if ((unsigned __int128)(v7 * (__int128)v9) >> 64 != (v7 * v9) >> 63)
        break;
      v7 = v10;
      if (!--v8)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_11;
  }
  v10 = 1;
LABEL_7:
  if (v10 == *(_QWORD *)(a2 + 16))
  {
    MEMORY[0x1E0C80A78](a1);
    if (qword_1EE422E80 == -1)
    {
LABEL_9:
      sub_19CAAA37C();
      v11 = (void *)v20[5];
      sub_19C522A50(MEMORY[0x1E0DEE9D8], v20);
      sub_19C4F382C(v11);
      v12 = v20[4];
      v13 = __swift_project_boxed_opaque_existential_1(v20, v20[3]);
      MEMORY[0x1E0C80A78](v13);
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t)))(v12 + 8))(a1, 10, sub_19C4FD750);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
      result = swift_bridgeObjectRelease();
      *a3 = v14;
      return result;
    }
LABEL_11:
    swift_once();
    goto LABEL_9;
  }
  v20[0] = 0;
  v20[1] = 0xE000000000000000;
  sub_19CAA9F2C();
  sub_19CAA992C();
  if (v5)
  {
    v16 = (uint64_t *)(a1 + 32);
    v17 = 1;
    while (1)
    {
      v18 = *v16++;
      v19 = v17 * v18;
      if ((unsigned __int128)(v17 * (__int128)v18) >> 64 != (v17 * v18) >> 63)
        break;
      v17 = v19;
      if (!--v5)
        goto LABEL_18;
    }
    __break(1u);
  }
LABEL_18:
  sub_19CAAA190();
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  sub_19CAAA190();
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  result = sub_19CAAA0B8();
  __break(1u);
  return result;
}

uint64_t sub_19C4FD294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[7];

  v20[6] = a2;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(a1 + 32);
    v7 = 1;
    v8 = *(_QWORD *)(a1 + 16);
    while (1)
    {
      v9 = *v6++;
      v10 = v7 * v9;
      if ((unsigned __int128)(v7 * (__int128)v9) >> 64 != (v7 * v9) >> 63)
        break;
      v7 = v10;
      if (!--v8)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_11;
  }
  v10 = 1;
LABEL_7:
  if (v10 == *(_QWORD *)(a2 + 16))
  {
    MEMORY[0x1E0C80A78](a1);
    if (qword_1EE422E80 == -1)
    {
LABEL_9:
      sub_19CAAA37C();
      v11 = (void *)v20[5];
      sub_19C522A50(MEMORY[0x1E0DEE9D8], v20);
      sub_19C4F382C(v11);
      v12 = v20[4];
      v13 = __swift_project_boxed_opaque_existential_1(v20, v20[3]);
      MEMORY[0x1E0C80A78](v13);
      v14 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(uint64_t, uint64_t)))(v12 + 8))(a1, 0, sub_19C4FD71C);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
      result = swift_bridgeObjectRelease();
      *a3 = v14;
      return result;
    }
LABEL_11:
    swift_once();
    goto LABEL_9;
  }
  v20[0] = 0;
  v20[1] = 0xE000000000000000;
  sub_19CAA9F2C();
  sub_19CAA992C();
  if (v5)
  {
    v16 = (uint64_t *)(a1 + 32);
    v17 = 1;
    while (1)
    {
      v18 = *v16++;
      v19 = v17 * v18;
      if ((unsigned __int128)(v17 * (__int128)v18) >> 64 != (v17 * v18) >> 63)
        break;
      v17 = v19;
      if (!--v5)
        goto LABEL_18;
    }
    __break(1u);
  }
LABEL_18:
  sub_19CAAA190();
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  sub_19CAAA190();
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  result = sub_19CAAA0B8();
  __break(1u);
  return result;
}

void *sub_19C4FD598(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (result)
    v3 = (a2 - (uint64_t)result) / 4;
  else
    v3 = 0;
  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    if (v3 < v4)
    {
      __break(1u);
LABEL_14:
      result = (void *)sub_19CAAA118();
      __break(1u);
      return result;
    }
    if (result)
    {
      if (a3 + 32 >= (unint64_t)result + 4 * v4 || a3 + 32 + 4 * v4 <= (unint64_t)result)
        return memcpy(result, (const void *)(a3 + 32), 4 * v4);
      goto LABEL_14;
    }
  }
  return result;
}

void *sub_19C4FD654(void *result, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  int64_t v5;

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v5 = a2 - (_QWORD)result;
    if (!result)
      v5 = 0;
    if (v5 < v4)
    {
      __break(1u);
LABEL_13:
      result = (void *)sub_19CAAA118();
      __break(1u);
      return result;
    }
    if (result)
    {
      if (a3 + 32 >= (unint64_t)result + v4 || a3 + 32 + v4 <= (unint64_t)result)
        return memcpy(result, (const void *)(a3 + 32), v4);
      goto LABEL_13;
    }
  }
  return result;
}

void *sub_19C4FD700(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C4FD654(a1, a2, **(_QWORD **)(v2 + 16));
}

uint64_t sub_19C4FD71C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C5A508C(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

void *sub_19C4FD734(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C4FD598(a1, a2, **(_QWORD **)(v2 + 16));
}

uint64_t sub_19C4FD750(uint64_t a1, uint64_t a2)
{
  return sub_19C4FD71C(a1, a2);
}

void pointwiseMax(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_19C4FD7AC()
{
  unint64_t v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FD7E0 + dword_19C4FDCA4[v0 >> 62]))(v1);
}

void sub_19C4FD7F0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  swift_bridgeObjectRetain();
  v4 = sub_19C55C558(v0, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
    __asm { BR              X10 }
  __asm { BR              X10 }
}

uint64_t sub_19C4FDB88()
{
  int v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FDC04 + dword_19C4FDCE4[v0]))(v1);
}

uint64_t sub_19C4FDBDC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FDC04 + dword_19C4FDCE4[v1]))(v2);
}

void sub_19C4FDBE4()
{
  JUMPOUT(0x19C4FDBECLL);
}

void sub_19C4FDC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = swift_bridgeObjectRetain();
  *(_QWORD *)(v31 - 160) = v30;
  *(_QWORD *)(v31 - 152) = v32;
  *(_BYTE *)(v31 - 96) = 1;
  sub_19C4D893C(v31 - 160, (uint64_t)&a30);
  sub_19C4D783C();
  JUMPOUT(0x19C4FDC88);
}

void pointwiseMin(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_19C4FDD3C()
{
  unint64_t v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FDD70 + dword_19C4FE234[v0 >> 62]))(v1);
}

void sub_19C4FDD80()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  swift_bridgeObjectRetain();
  v4 = sub_19C55C558(v0, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
    __asm { BR              X10 }
  __asm { BR              X10 }
}

uint64_t sub_19C4FE118()
{
  int v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FE194 + dword_19C4FE274[v0]))(v1);
}

uint64_t sub_19C4FE16C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FE194 + dword_19C4FE274[v1]))(v2);
}

void sub_19C4FE174()
{
  JUMPOUT(0x19C4FE17CLL);
}

void sub_19C4FE1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = swift_bridgeObjectRetain();
  *(_QWORD *)(v31 - 160) = v30;
  *(_QWORD *)(v31 - 152) = v32;
  *(_BYTE *)(v31 - 96) = 1;
  sub_19C4D893C(v31 - 160, (uint64_t)&a30);
  sub_19C4D783C();
  JUMPOUT(0x19C4FE218);
}

void static MLTensor.+ infix<A>(_:_:)(uint64_t a1)
{
  sub_19C4FF990(a1);
}

{
  sub_19C500164(a1);
}

void sub_19C4FE290()
{
  __asm { BR              X9 }
}

uint64_t sub_19C4FE2D8()
{
  unint64_t v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FE30C + *((int *)qword_19C4FE7D0 + (v0 >> 62))))(v1);
}

void sub_19C4FE31C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  swift_bridgeObjectRetain();
  v4 = sub_19C55C558(v0, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
    __asm { BR              X10 }
  __asm { BR              X10 }
}

uint64_t sub_19C4FE6B4()
{
  unsigned int v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FE730 + *((int *)qword_19C4FE810 + v0)))(v1);
}

uint64_t sub_19C4FE708()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;

  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FE730 + *((int *)qword_19C4FE810 + v1)))(v2);
}

void sub_19C4FE710()
{
  JUMPOUT(0x19C4FE718);
}

void sub_19C4FE740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = swift_bridgeObjectRetain();
  *(_QWORD *)(v31 - 160) = v30;
  *(_QWORD *)(v31 - 152) = v32;
  *(_BYTE *)(v31 - 96) = 1;
  sub_19C4D893C(v31 - 160, (uint64_t)&a30);
  sub_19C4D783C();
  JUMPOUT(0x19C4FE7B4);
}

uint64_t static MLTensor.+ infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  return sub_19C5003A4(a1, a2, (uint64_t (*)(_QWORD *))sub_19C4FE290);
}

uint64_t static MLTensor.+= infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  return sub_19C5003E8(a1, a2, (void (*)(uint64_t *__return_ptr, _QWORD *))sub_19C4FE290);
}

void static MLTensor.- infix<A>(_:_:)(uint64_t a1)
{
  sub_19C4FF990(a1);
}

{
  sub_19C500164(a1);
}

void sub_19C4FE850()
{
  __asm { BR              X9 }
}

uint64_t sub_19C4FE898()
{
  unint64_t v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FE8CC + *((int *)qword_19C4FED90 + (v0 >> 62))))(v1);
}

void sub_19C4FE8DC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  swift_bridgeObjectRetain();
  v4 = sub_19C55C558(v0, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
    __asm { BR              X10 }
  __asm { BR              X10 }
}

uint64_t sub_19C4FEC74()
{
  unsigned int v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FECF0 + *((int *)qword_19C4FEDD0 + v0)))(v1);
}

uint64_t sub_19C4FECC8()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;

  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FECF0 + *((int *)qword_19C4FEDD0 + v1)))(v2);
}

void sub_19C4FECD0()
{
  JUMPOUT(0x19C4FECD8);
}

void sub_19C4FED00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = swift_bridgeObjectRetain();
  *(_QWORD *)(v31 - 160) = v30;
  *(_QWORD *)(v31 - 152) = v32;
  *(_BYTE *)(v31 - 96) = 1;
  sub_19C4D893C(v31 - 160, (uint64_t)&a30);
  sub_19C4D783C();
  JUMPOUT(0x19C4FED74);
}

uint64_t static MLTensor.- infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  return sub_19C5003A4(a1, a2, (uint64_t (*)(_QWORD *))sub_19C4FE850);
}

uint64_t static MLTensor.-= infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  return sub_19C5003E8(a1, a2, (void (*)(uint64_t *__return_ptr, _QWORD *))sub_19C4FE850);
}

void static MLTensor.* infix<A>(_:_:)(uint64_t a1)
{
  sub_19C4FF990(a1);
}

{
  sub_19C500164(a1);
}

void sub_19C4FEE10()
{
  __asm { BR              X9 }
}

uint64_t sub_19C4FEE58()
{
  unint64_t v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FEE8C + *((int *)qword_19C4FF350 + (v0 >> 62))))(v1);
}

void sub_19C4FEE9C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  swift_bridgeObjectRetain();
  v4 = sub_19C55C558(v0, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
    __asm { BR              X10 }
  __asm { BR              X10 }
}

uint64_t sub_19C4FF234()
{
  unsigned int v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FF2B0 + *((int *)qword_19C4FF390 + v0)))(v1);
}

uint64_t sub_19C4FF288()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;

  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FF2B0 + *((int *)qword_19C4FF390 + v1)))(v2);
}

void sub_19C4FF290()
{
  JUMPOUT(0x19C4FF298);
}

void sub_19C4FF2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = swift_bridgeObjectRetain();
  *(_QWORD *)(v31 - 160) = v30;
  *(_QWORD *)(v31 - 152) = v32;
  *(_BYTE *)(v31 - 96) = 1;
  sub_19C4D893C(v31 - 160, (uint64_t)&a30);
  sub_19C4D783C();
  JUMPOUT(0x19C4FF334);
}

uint64_t static MLTensor.* infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  return sub_19C5003A4(a1, a2, (uint64_t (*)(_QWORD *))sub_19C4FEE10);
}

uint64_t static MLTensor.*= infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  return sub_19C5003E8(a1, a2, (void (*)(uint64_t *__return_ptr, _QWORD *))sub_19C4FEE10);
}

void static MLTensor./ infix<A>(_:_:)(uint64_t a1)
{
  sub_19C4FF990(a1);
}

{
  sub_19C500164(a1);
}

void sub_19C4FF3D0()
{
  __asm { BR              X9 }
}

uint64_t sub_19C4FF418()
{
  unint64_t v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FF44C + *((int *)qword_19C4FF910 + (v0 >> 62))))(v1);
}

void sub_19C4FF45C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  swift_bridgeObjectRetain();
  v4 = sub_19C55C558(v0, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
    __asm { BR              X10 }
  __asm { BR              X10 }
}

uint64_t sub_19C4FF7F4()
{
  unsigned int v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FF870 + *((int *)qword_19C4FF950 + v0)))(v1);
}

uint64_t sub_19C4FF848()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;

  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FF870 + *((int *)qword_19C4FF950 + v1)))(v2);
}

void sub_19C4FF850()
{
  JUMPOUT(0x19C4FF858);
}

void sub_19C4FF880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = swift_bridgeObjectRetain();
  *(_QWORD *)(v31 - 160) = v30;
  *(_QWORD *)(v31 - 152) = v32;
  *(_BYTE *)(v31 - 96) = 1;
  sub_19C4D893C(v31 - 160, (uint64_t)&a30);
  sub_19C4D783C();
  JUMPOUT(0x19C4FF8F4);
}

uint64_t static MLTensor./ infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  return sub_19C5003A4(a1, a2, (uint64_t (*)(_QWORD *))sub_19C4FF3D0);
}

uint64_t static MLTensor./= infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  return sub_19C5003E8(a1, a2, (void (*)(uint64_t *__return_ptr, _QWORD *))sub_19C4FF3D0);
}

void static MLTensor.% infix<A>(_:_:)(uint64_t a1)
{
  sub_19C4FF990(a1);
}

{
  sub_19C500164(a1);
}

void sub_19C4FF990(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)MEMORY[0x1E0C80A78](a1);
  sub_19C59E650(v1, 1);
  __asm { BR              X10 }
}

uint64_t sub_19C4FFA1C(__int16 a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  char *v12;
  uint64_t v13;

  v9 = *(unsigned __int8 *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  if (v9 != a1)
  {
    v10 = a1 & 0x1FF;
    if (*(_BYTE *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 0x21))
      v11 = 256;
    else
      v11 = 0;
    v12 = (char *)&loc_19C4FFA9C + 4 * byte_19CAE84A0[sub_19C52481C(v10, v11 | (unsigned __int16)v9)];
    __asm { BR              X10 }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v3);
  nullsub_1(v3, v2, v13);
  MLTensor.init<A>(_:scalarType:)(v5, v3, (_QWORD *)(v8 - 80));
  *(_QWORD *)(v8 - 88) = *(_QWORD *)(v8 - 80);
  v1(v8 - 88);
  return swift_release();
}

void sub_19C4FFBC8()
{
  __asm { BR              X9 }
}

uint64_t sub_19C4FFC10()
{
  unint64_t v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C4FFC44 + *((int *)qword_19C500108 + (v0 >> 62))))(v1);
}

void sub_19C4FFC54()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  swift_bridgeObjectRetain();
  v4 = sub_19C55C558(v0, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
    __asm { BR              X10 }
  __asm { BR              X10 }
}

uint64_t sub_19C4FFFEC()
{
  unsigned int v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C500068 + *((int *)qword_19C500148 + v0)))(v1);
}

uint64_t sub_19C500040()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;

  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C500068 + *((int *)qword_19C500148 + v1)))(v2);
}

void sub_19C500048()
{
  JUMPOUT(0x19C500050);
}

void sub_19C500078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = swift_bridgeObjectRetain();
  *(_QWORD *)(v31 - 160) = v30;
  *(_QWORD *)(v31 - 152) = v32;
  *(_BYTE *)(v31 - 96) = 1;
  sub_19C4D893C(v31 - 160, (uint64_t)&a30);
  sub_19C4D783C();
  JUMPOUT(0x19C5000ECLL);
}

void sub_19C500164(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1);
  v2 = *v1;
  sub_19C59E650(v3, 1);
  __asm { BR              X10 }
}

uint64_t sub_19C5001EC(__int16 a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *(unsigned __int8 *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  if (v9 != a1)
  {
    v10 = a1 & 0x1FF;
    if (*(_BYTE *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 0x21))
      v11 = 256;
    else
      v11 = 0;
    v12 = (char *)&loc_19C50026C + 4 * byte_19CAE84B0[sub_19C52481C(v10, v11 | (unsigned __int16)v9)];
    __asm { BR              X10 }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v4, v3);
  nullsub_1(v3, v2, v13);
  MLTensor.init<A>(_:scalarType:)(v5, v3, (_QWORD *)(v8 - 72));
  v14 = *(_QWORD *)(v8 - 72);
  *(_QWORD *)(v8 - 88) = v6;
  *(_QWORD *)(v8 - 80) = v14;
  v1(v8 - 88);
  return swift_release();
}

uint64_t static MLTensor.% infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  return sub_19C5003A4(a1, a2, (uint64_t (*)(_QWORD *))sub_19C4FFBC8);
}

uint64_t sub_19C5003A4(uint64_t *a1, _QWORD *a2, uint64_t (*a3)(_QWORD *))
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *a1;
  v5[0] = *a2;
  v5[1] = v3;
  return a3(v5);
}

uint64_t static MLTensor.%= infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  return sub_19C5003E8(a1, a2, (void (*)(uint64_t *__return_ptr, _QWORD *))sub_19C4FFBC8);
}

uint64_t sub_19C5003E8(uint64_t *a1, _QWORD *a2, void (*a3)(uint64_t *__return_ptr, _QWORD *))
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;

  v4 = *a1;
  v6[0] = *a2;
  v6[1] = v4;
  a3(&v7, v6);
  result = swift_release();
  *a1 = v7;
  return result;
}

void MLTensor.pow<A>(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1);
  v3 = *v1;
  sub_19C59E650(v2, 1);
  __asm { BR              X10 }
}

uint64_t sub_19C5004D0(__int16 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  char *v11;
  uint64_t v12;

  v8 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  if (v8 != a1)
  {
    v9 = a1 & 0x1FF;
    if (*(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21))
      v10 = 256;
    else
      v10 = 0;
    v11 = (char *)&loc_19C500550 + 4 * byte_19CAE84C0[sub_19C52481C(v9, v10 | (unsigned __int16)v8)];
    __asm { BR              X10 }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v3, v2);
  nullsub_1(v2, v5, v12);
  MLTensor.init<A>(_:scalarType:)(v4, v2, (_QWORD *)(v7 - 80));
  *(_QWORD *)(v7 - 88) = *(_QWORD *)(v7 - 80);
  MLTensor.pow(_:)();
  return swift_release();
}

void MLTensor.pow(_:)()
{
  __asm { BR              X9 }
}

uint64_t sub_19C5006C4()
{
  unint64_t v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C5006F8 + dword_19C500BBC[v0 >> 62]))(v1);
}

void sub_19C500708()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  swift_bridgeObjectRetain();
  v4 = sub_19C55C558(v0, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
    __asm { BR              X10 }
  __asm { BR              X10 }
}

uint64_t sub_19C500AA0()
{
  int v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C500B1C + dword_19C500BFC[v0]))(v1);
}

uint64_t sub_19C500AF4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C500B1C + dword_19C500BFC[v1]))(v2);
}

void sub_19C500AFC()
{
  JUMPOUT(0x19C500B04);
}

void sub_19C500B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = swift_bridgeObjectRetain();
  *(_QWORD *)(v31 - 160) = v30;
  *(_QWORD *)(v31 - 152) = v32;
  *(_BYTE *)(v31 - 96) = 1;
  sub_19C4D893C(v31 - 160, (uint64_t)&a30);
  sub_19C4D783C();
  JUMPOUT(0x19C500BA0);
}

uint64_t sub_19C500C0C(unint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t *v5;
  unint64_t v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_19CAAA0AC();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x1E0DEE9D8];
  result = sub_19CAA9A58();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = vdupq_n_s64(a1);
  v8 = (int64x2_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t sub_19C500CF4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  if (a2 < 0)
  {
    result = sub_19CAAA0AC();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424190);
      v4 = (_QWORD *)sub_19CAA9A58();
      v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v4 + 6;
          do
          {
            *v7++ = a1;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x1E0DEE9D8];
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_19C500DE4(unint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t result;
  unint64_t *v7;
  unint64_t v8;
  int64x2_t v9;
  int64x2_t v10;
  double *v11;
  unint64_t v12;
  double *v13;
  unint64_t v14;

  if ((a3 & 0x8000000000000000) != 0)
  {
    result = sub_19CAAA0AC();
    __break(1u);
    return result;
  }
  if (!a3)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423610);
  result = sub_19CAA9A58();
  *(_QWORD *)(result + 16) = a3;
  v7 = (unint64_t *)(result + 32);
  if (a3 < 4)
  {
    v8 = 0;
LABEL_9:
    v14 = a3 - v8;
    do
    {
      *v7 = a1;
      v7[1] = a2;
      v7 += 2;
      --v14;
    }
    while (v14);
    return result;
  }
  v8 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  v7 += 2 * (a3 & 0xFFFFFFFFFFFFFFFCLL);
  v9 = vdupq_n_s64(a1);
  v10 = vdupq_n_s64(a2);
  v11 = (double *)(result + 64);
  v12 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v13 = v11 - 4;
    vst2q_f64(v13, *(float64x2x2_t *)v9.i8);
    vst2q_f64(v11, *(float64x2x2_t *)v9.i8);
    v11 += 8;
    v12 -= 4;
  }
  while (v12);
  if (v8 != a3)
    goto LABEL_9;
  return result;
}

void MLTensor.tiled(multiples:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (*(uint64_t *)(a1 + 32) < 1)
      goto LABEL_10;
    if (v2 != 1)
    {
      v3 = 5;
      while (1)
      {
        v4 = v3 - 3;
        if (__OFADD__(v3 - 4, 1))
        {
          __break(1u);
          JUMPOUT(0x19C5012E8);
        }
        if (*(uint64_t *)(a1 + 8 * v3) < 1)
          break;
        ++v3;
        if (v4 == v2)
          goto LABEL_8;
      }
LABEL_10:
      sub_19CAAA0B8();
      __break(1u);
      JUMPOUT(0x19C501360);
    }
  }
LABEL_8:
  __asm { BR              X10 }
}

void MLTensor.bandPart(lowerBandCount:upperBandCount:)()
{
  __asm { BR              X9 }
}

void sub_19C5013E0()
{
  uint64_t v0;
  void *v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5[9];
  void *v6;
  __int128 v7;
  char v8;
  char v9;

  if (*(_QWORD *)(*(_QWORD *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16) > 1uLL)
  {
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v2 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = v0;
    swift_retain();
    sub_19C522A50(inited, v5);
    swift_bridgeObjectRelease();
    sub_19C4F382C(v2);
    __swift_project_boxed_opaque_existential_1(v5, v5[3]);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v4 + 32) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D0);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_19CAE8180;
    __asm { BR              X10 }
  }
  v6 = *(void **)(*(_QWORD *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  v7 = xmmword_19CAE84D0;
  v8 = 2;
  v9 = 4;
  sub_19C4D893C((uint64_t)&v6, (uint64_t)v5);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C5016B8);
}

void MLTensor.cumulativeProduct(alongAxis:)()
{
  __asm { BR              X10 }
}

uint64_t sub_19C501720@<X0>(int a1@<W8>)
{
  _QWORD *v1;
  uint64_t v2;

  if (*(_QWORD *)(*(_QWORD *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16))
    __asm { BR              X9 }
  *v1 = v2;
  return swift_retain();
}

uint64_t sub_19C501798()
{
  uint64_t v0;
  uint64_t v1;

  if (!*(_BYTE *)(v1 + 48))
    JUMPOUT(0x19C501A74);
  return ((uint64_t (*)(void))((char *)&loc_19C5017B8 + *((int *)qword_19C501D20 + v0)))();
}

void sub_19C5017A0()
{
  JUMPOUT(0x19C5017A8);
}

uint64_t sub_19C5017C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  if (-v4 <= v1 && v4 > v1)
    return ((uint64_t (*)(void))((char *)&loc_19C501804 + *((int *)qword_19C501D50 + v0)))();
  *(_QWORD *)(v3 - 160) = 0;
  *(_QWORD *)(v3 - 152) = 0xE000000000000000;
  sub_19CAA9F2C();
  v7 = swift_bridgeObjectRelease();
  *(_QWORD *)(v3 - 160) = 0xD000000000000020;
  *(_QWORD *)(v3 - 152) = 0x800000019CABB3E0;
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C501B20 + *((int *)qword_19C501D30 + v0)))(v7);
}

void sub_19C501814()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  void *v9;

  v4 = *(_QWORD *)(*(_QWORD *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  *(_QWORD *)(v3 - 160) = v1;
  *(_QWORD *)(v3 - 152) = v4;
  *(_BYTE *)(v3 - 96) = 6;
  if (-v4 <= v1 && v4 > v1)
  {
    sub_19C4F9E38(v3 - 160);
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v6 = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = v2;
    swift_retain();
    sub_19C522A50(inited, (uint64_t *)(v3 - 160));
    swift_bridgeObjectRelease();
    sub_19C4F382C(v6);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v3 - 160), *(_QWORD *)(v3 - 136));
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v8 + 32) = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D0);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_19CAE8180;
    __asm { BR              X9 }
  }
  sub_19C4D893C(v3 - 160, (uint64_t)&v9);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C501D00);
}

void sub_19C501ACC()
{
  uint64_t v0;

  sub_19C59EBA4(*(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20));
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  JUMPOUT(0x19C501CF4);
}

uint64_t sub_19C501B30()
{
  uint64_t v0;
  uint64_t v1;

  sub_19CAAA190();
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  v1 = sub_19CAA992C();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C501C58 + *((int *)qword_19C501D40 + v0)))(v1);
}

void sub_19C501B84()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(v0 + 49))
    v1 = 256;
  else
    v1 = 0;
  v2 = sub_19C59EBA4(v1 | *(unsigned __int8 *)(v0 + 48));
  v4 = v3;
  sub_19CAA992C(v2);
  swift_bridgeObjectRelease(v4);
  sub_19CAA992C(0xD000000000000013);
  JUMPOUT(0x19C501CD4);
}

void sub_19C501B90()
{
  JUMPOUT(0x19C501B9CLL);
}

uint64_t sub_19C501BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_19CAAA190(MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB478]);
  v3 = v2;
  sub_19CAA992C(v1);
  swift_bridgeObjectRelease(v3);
  v4 = sub_19CAA992C(3943982);
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C501C58 + *((int *)qword_19C501D40 + v0)))(v4);
}

void sub_19C501C00()
{
  JUMPOUT(0x19C501C08);
}

void sub_19C501C68()
{
  sub_19CAAA190();
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  JUMPOUT(0x19C501CD4);
}

void MLTensor.cumulativeSum(alongAxis:)()
{
  __asm { BR              X10 }
}

uint64_t sub_19C501DC8@<X0>(int a1@<W8>)
{
  _QWORD *v1;
  uint64_t v2;

  if (*(_QWORD *)(*(_QWORD *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16))
    __asm { BR              X9 }
  *v1 = v2;
  return swift_retain();
}

uint64_t sub_19C501E40()
{
  uint64_t v0;
  uint64_t v1;

  if (!*(_BYTE *)(v1 + 48))
    JUMPOUT(0x19C50211CLL);
  return ((uint64_t (*)(void))((char *)&loc_19C501E60 + *((int *)qword_19C5023C8 + v0)))();
}

void sub_19C501E48()
{
  JUMPOUT(0x19C501E50);
}

uint64_t sub_19C501E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  if (-v4 <= v1 && v4 > v1)
    return ((uint64_t (*)(void))((char *)&loc_19C501EAC + *((int *)qword_19C5023F8 + v0)))();
  *(_QWORD *)(v3 - 160) = 0;
  *(_QWORD *)(v3 - 152) = 0xE000000000000000;
  sub_19CAA9F2C();
  v7 = swift_bridgeObjectRelease();
  *(_QWORD *)(v3 - 160) = 0xD000000000000020;
  *(_QWORD *)(v3 - 152) = 0x800000019CABB3E0;
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C5021C8 + *((int *)qword_19C5023D8 + v0)))(v7);
}

void sub_19C501EBC()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  void *v9;

  v4 = *(_QWORD *)(*(_QWORD *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  *(_QWORD *)(v3 - 160) = v1;
  *(_QWORD *)(v3 - 152) = v4;
  *(_BYTE *)(v3 - 96) = 6;
  if (-v4 <= v1 && v4 > v1)
  {
    sub_19C4F9E38(v3 - 160);
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v6 = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = v2;
    swift_retain();
    sub_19C522A50(inited, (uint64_t *)(v3 - 160));
    swift_bridgeObjectRelease();
    sub_19C4F382C(v6);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v3 - 160), *(_QWORD *)(v3 - 136));
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v8 + 32) = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D0);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_19CAE8180;
    __asm { BR              X9 }
  }
  sub_19C4D893C(v3 - 160, (uint64_t)&v9);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C5023A8);
}

void sub_19C502174()
{
  uint64_t v0;

  sub_19C59EBA4(*(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20));
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  JUMPOUT(0x19C50239CLL);
}

uint64_t sub_19C5021D8()
{
  uint64_t v0;
  uint64_t v1;

  sub_19CAAA190();
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  v1 = sub_19CAA992C();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C502300 + *((int *)qword_19C5023E8 + v0)))(v1);
}

void sub_19C50222C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(v0 + 49))
    v1 = 256;
  else
    v1 = 0;
  v2 = sub_19C59EBA4(v1 | *(unsigned __int8 *)(v0 + 48));
  v4 = v3;
  sub_19CAA992C(v2);
  swift_bridgeObjectRelease(v4);
  sub_19CAA992C(0xD000000000000013);
  JUMPOUT(0x19C50237CLL);
}

void sub_19C502238()
{
  JUMPOUT(0x19C502244);
}

uint64_t sub_19C5022A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_19CAAA190(MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB478]);
  v3 = v2;
  sub_19CAA992C(v1);
  swift_bridgeObjectRelease(v3);
  v4 = sub_19CAA992C(3943982);
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C502300 + *((int *)qword_19C5023E8 + v0)))(v4);
}

void sub_19C5022A8()
{
  JUMPOUT(0x19C5022B0);
}

void sub_19C502310()
{
  sub_19CAAA190();
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  JUMPOUT(0x19C50237CLL);
}

void MLTensor.topK(_:)()
{
  __asm { BR              X10 }
}

void sub_19C502474(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 8 * v5 + 24);
    if ((v6 & 0x8000000000000000) == 0)
    {
      if ((v1 & 0x8000000000000000) == 0 && v6 > v1)
        __asm { BR              X9 }
      *(_QWORD *)(v3 - 136) = MEMORY[0x1E0DEB418];
      *(_QWORD *)(v3 - 160) = v1;
      *(_QWORD *)(v3 - 104) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424180);
      *(_QWORD *)(v3 - 128) = 0;
      *(_QWORD *)(v3 - 120) = v6;
      *(_BYTE *)(v3 - 96) = 10;
      sub_19C4D893C(v3 - 160, (uint64_t)&v7);
      sub_19C4D783C();
      sub_19CAAA0B8();
      __break(1u);
      JUMPOUT(0x19C50289CLL);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  JUMPOUT(0x19C5027C8);
}

uint64_t MLTensor.PaddingMode.hash(into:)()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 4) == 1)
    return sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2BC();
}

uint64_t static MLTensor.PaddingMode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  v2 = *(float *)a1;
  v3 = *(float *)a2;
  v4 = *(unsigned __int8 *)(a2 + 4);
  if (*(_BYTE *)(a1 + 4) != 1)
    return (v4 & 1) == 0 && v2 == v3;
  v5 = LODWORD(v3) == 0;
  if (v3 == 0.0)
    v6 = *(unsigned __int8 *)(a2 + 4);
  else
    v6 = 0;
  if (v5)
    v4 = 0;
  if (v2 == 0.0)
    return v6;
  else
    return v4;
}

uint64_t MLTensor.PaddingMode.hashValue.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 4);
  sub_19CAAA298();
  sub_19CAAA2A4();
  if (v1 != 1)
    sub_19CAAA2BC();
  return sub_19CAAA2C8();
}

uint64_t sub_19C502A10()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 4);
  sub_19CAAA298();
  sub_19CAAA2A4();
  if (v1 != 1)
    sub_19CAAA2BC();
  return sub_19CAAA2C8();
}

uint64_t sub_19C502A88(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  v2 = *(float *)a1;
  v3 = *(float *)a2;
  v4 = *(unsigned __int8 *)(a2 + 4);
  if (*(_BYTE *)(a1 + 4) != 1)
    return (v4 & 1) == 0 && v2 == v3;
  v5 = LODWORD(v3) == 0;
  if (v3 == 0.0)
    v6 = *(unsigned __int8 *)(a2 + 4);
  else
    v6 = 0;
  if (v5)
    v4 = 0;
  if (v2 == 0.0)
    return v6;
  else
    return v4;
}

uint64_t MLTensor.PaddingMode.description.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 4) != 1)
    return 0x746E6174736E6F63;
  if (*(_DWORD *)v0)
    return 0x697274656D6D7973;
  return 0x697463656C666572;
}

uint64_t sub_19C502B44()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 4) != 1)
    return 0x746E6174736E6F63;
  if (*(_DWORD *)v0)
    return 0x697274656D6D7973;
  return 0x697463656C666572;
}

void MLTensor.padded(forSizes:with:)(uint64_t a1, float a2)
{
  uint64_t *v2;
  float v3;
  char v4;
  uint64_t v5;

  v5 = *v2;
  v3 = a2;
  v4 = 0;
  MLTensor.padded(forSizes:mode:)(a1, (uint64_t)&v3);
}

void MLTensor.padded(forSizes:mode:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 >> 62;
  if ((*(_BYTE *)(a2 + 4) & 1) == 0)
    __asm { BR              X11 }
  __asm { BR              X10 }
}

void sub_19C502C88(uint64_t a1@<X8>)
{
  uint64_t v2;

  if (*(_QWORD *)(*(_QWORD *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16) >= a1)
    __asm { BR              X10 }
  JUMPOUT(0x19C5031B0);
}

void sub_19C503100()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  MEMORY[0x1A1AD452C](v0, MEMORY[0x1E0DEB418]);
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  JUMPOUT(0x19C503198);
}

void sub_19C503138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_bridgeObjectRetain(v1);
  v3 = MEMORY[0x1A1AD452C](v2, MEMORY[0x1E0DEB418]);
  v5 = v4;
  sub_19CAA992C(v3);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v5);
  sub_19CAA992C(11872);
  JUMPOUT(0x19C503198);
}

void MLTensor.argsort(alongAxis:descendingOrder:)()
{
  __asm { BR              X9 }
}

void sub_19C50327C()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  *(_QWORD *)(v3 - 160) = v1;
  *(_QWORD *)(v3 - 152) = v4;
  *(_BYTE *)(v3 - 96) = 6;
  v5 = v3 - 160;
  if (-v4 <= v1 && v4 > v1)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v7);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C503530);
}

_QWORD *sub_19C503550(_QWORD *a1)
{
  return sub_19C4F9004(0, a1[2], 0, a1);
}

_QWORD *sub_19C503564(_QWORD *a1)
{
  return sub_19C4F911C(0, a1[2], 0, a1);
}

_QWORD *sub_19C503578(_QWORD *a1)
{
  return sub_19C4F9788(0, a1[2], 0, a1);
}

_QWORD *sub_19C50358C(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *result;
  int64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    result = sub_19C4F9004(result, v13, 1, v5);
    v5 = result;
  }
  v14 = &v5[a1 + 4];
  if (!v9)
    goto LABEL_20;
  v15 = v5[2];
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_26;
  if ((v17 & 0x8000000000000000) == 0)
  {
    result = v14 + 1;
    v18 = &v5[a2 + 4];
    if (v14 + 1 != v18 || result >= &v18[v17])
      result = memmove(result, v18, 8 * v17);
    v19 = v5[2];
    v16 = __OFADD__(v19, v9);
    v20 = v19 + v9;
    if (!v16)
    {
      v5[2] = v20;
LABEL_20:
      *v14 = a3;
      *(_QWORD *)v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (_QWORD *)sub_19CAAA118();
  __break(1u);
  return result;
}

_QWORD *sub_19C5036EC(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  int64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  _QWORD *result;
  int64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  if (v7 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v10 = a3;
  v11 = a3 - v9;
  if (__OFSUB__(a3, v9))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v12 = v7 + v11;
  if (__OFADD__(v7, v11))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v12 > v6[3] >> 1)
  {
    if (v7 <= v12)
      v15 = v7 + v11;
    else
      v15 = v7;
    result = sub_19C4F9004(result, v15, 1, v6);
    v6 = result;
  }
  v16 = &v6[a1 + 4];
  v17 = (unint64_t)&v16[v10];
  if (!v11)
  {
LABEL_20:
    if (v10 < 1)
    {
LABEL_23:
      *(_QWORD *)v4 = v6;
      return result;
    }
    while (v10)
    {
      *v16++ = a4;
      --v10;
      if ((unint64_t)v16 >= v17)
        goto LABEL_23;
    }
    __break(1u);
    goto LABEL_25;
  }
  v18 = v6[2];
  v19 = __OFSUB__(v18, a2);
  v20 = v18 - a2;
  if (v19)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = &v6[a2 + 4];
    if ((_QWORD *)v17 != v21 || v17 >= (unint64_t)&v21[v20])
      result = memmove(&v16[v10], v21, 8 * v20);
    v22 = v6[2];
    v19 = __OFADD__(v22, v11);
    v23 = v22 + v11;
    if (v19)
      goto LABEL_31;
    v6[2] = v23;
    goto LABEL_20;
  }
LABEL_32:
  result = (_QWORD *)sub_19CAAA118();
  __break(1u);
  return result;
}

uint64_t sub_19C503874(uint64_t a1)
{
  return sub_19C503B38(a1, (uint64_t (*)(void))sub_19C4F911C);
}

uint64_t sub_19C503880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_19C4F9004(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_19CAAA118();
  __break(1u);
  return result;
}

uint64_t sub_19C5039C4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_19C4F9128(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235F8);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_19CAAA118();
  __break(1u);
  return result;
}

uint64_t sub_19C503B38(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v5 + v3 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v4 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v3)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v8 = *(_QWORD *)(v4 + 16);
  if ((*(_QWORD *)(v4 + 24) >> 1) - v8 < v3)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = (void *)(v4 + 16 * v8 + 32);
  if (a1 + 32 < (unint64_t)v9 + 16 * v3 && (unint64_t)v9 < a1 + 32 + 16 * v3)
    goto LABEL_21;
  memcpy(v9, (const void *)(a1 + 32), 16 * v3);
  if (!v3)
  {
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v2 = v4;
    return result;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v11, v3);
  v13 = v11 + v3;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v13;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = sub_19CAAA118();
  __break(1u);
  return result;
}

uint64_t sub_19C503C88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_19C4F9468(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[4 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 32 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_19CAAA118();
  __break(1u);
  return result;
}

uint64_t sub_19C503DCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_19C4F9248(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[v8 + 4];
  if (a1 + 32 < v9 + 8 * v2 && v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_19CAAA118();
  __break(1u);
  return result;
}

char *sub_19C503F1C(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)sub_19C4F9004(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[8 * a1 + 32];
    v15 = &v4[8 * a2 + 32];
    if (a1 != a2 || result >= &v15[8 * v14])
      result = (char *)memmove(result, v15, 8 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)sub_19CAAA118();
  __break(1u);
  return result;
}

unint64_t sub_19C504078()
{
  unint64_t result;

  result = qword_1EE423618;
  if (!qword_1EE423618)
  {
    result = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLTensor.PaddingMode, &type metadata for MLTensor.PaddingMode);
    atomic_store(result, (unint64_t *)&qword_1EE423618);
  }
  return result;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t _s11PaddingModeOwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s11PaddingModeOwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_19C50411C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_19C504138(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    *(_BYTE *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLTensor.PaddingMode()
{
  return &type metadata for MLTensor.PaddingMode;
}

void static MLTensor..== infix<A>(_:_:)(uint64_t a1)
{
  sub_19C505F24(a1);
}

void sub_19C504174()
{
  __asm { BR              X9 }
}

uint64_t sub_19C5041BC()
{
  unint64_t v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C5041F0 + dword_19C5046DC[v0 >> 62]))(v1);
}

void sub_19C504200()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  swift_bridgeObjectRetain();
  v4 = sub_19C55C558(v0, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
    __asm { BR              X9 }
  __asm { BR              X9 }
}

uint64_t sub_19C5045D0()
{
  int v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C50463C + dword_19C50473C[v0]))(v1);
}

uint64_t sub_19C504614()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C50463C + dword_19C50473C[v1]))(v2);
}

void sub_19C50461C()
{
  JUMPOUT(0x19C504624);
}

void sub_19C50464C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = swift_bridgeObjectRetain();
  *(_QWORD *)(v27 - 160) = v26;
  *(_QWORD *)(v27 - 152) = v28;
  *(_BYTE *)(v27 - 96) = 1;
  sub_19C4D893C(v27 - 160, (uint64_t)&a26);
  sub_19C4D783C();
  JUMPOUT(0x19C5046B4);
}

uint64_t static MLTensor..== infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  return sub_19C5003A4(a1, a2, (uint64_t (*)(_QWORD *))sub_19C504174);
}

void static MLTensor..!= infix<A>(_:_:)(uint64_t a1)
{
  sub_19C505F24(a1);
}

void sub_19C504764()
{
  __asm { BR              X9 }
}

uint64_t sub_19C5047AC()
{
  unint64_t v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C5047E0 + dword_19C504CCC[v0 >> 62]))(v1);
}

void sub_19C5047F0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  swift_bridgeObjectRetain();
  v4 = sub_19C55C558(v0, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
    __asm { BR              X9 }
  __asm { BR              X9 }
}

uint64_t sub_19C504BC0()
{
  int v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C504C2C + dword_19C504D2C[v0]))(v1);
}

uint64_t sub_19C504C04()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C504C2C + dword_19C504D2C[v1]))(v2);
}

void sub_19C504C0C()
{
  JUMPOUT(0x19C504C14);
}

void sub_19C504C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = swift_bridgeObjectRetain();
  *(_QWORD *)(v27 - 160) = v26;
  *(_QWORD *)(v27 - 152) = v28;
  *(_BYTE *)(v27 - 96) = 1;
  sub_19C4D893C(v27 - 160, (uint64_t)&a26);
  sub_19C4D783C();
  JUMPOUT(0x19C504CA4);
}

uint64_t static MLTensor..!= infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  return sub_19C5003A4(a1, a2, (uint64_t (*)(_QWORD *))sub_19C504764);
}

void static MLTensor..> infix<A>(_:_:)(uint64_t a1)
{
  sub_19C505F24(a1);
}

void sub_19C504D54()
{
  __asm { BR              X9 }
}

uint64_t sub_19C504D9C()
{
  unint64_t v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C504DD0 + dword_19C5052BC[v0 >> 62]))(v1);
}

void sub_19C504DE0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  swift_bridgeObjectRetain();
  v4 = sub_19C55C558(v0, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
    __asm { BR              X9 }
  __asm { BR              X9 }
}

uint64_t sub_19C5051B0()
{
  int v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C50521C + dword_19C50531C[v0]))(v1);
}

uint64_t sub_19C5051F4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C50521C + dword_19C50531C[v1]))(v2);
}

void sub_19C5051FC()
{
  JUMPOUT(0x19C505204);
}

void sub_19C50522C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = swift_bridgeObjectRetain();
  *(_QWORD *)(v27 - 160) = v26;
  *(_QWORD *)(v27 - 152) = v28;
  *(_BYTE *)(v27 - 96) = 1;
  sub_19C4D893C(v27 - 160, (uint64_t)&a26);
  sub_19C4D783C();
  JUMPOUT(0x19C505294);
}

uint64_t static MLTensor..> infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  return sub_19C5003A4(a1, a2, (uint64_t (*)(_QWORD *))sub_19C504D54);
}

void static MLTensor..>= infix<A>(_:_:)(uint64_t a1)
{
  sub_19C505F24(a1);
}

void sub_19C505344()
{
  __asm { BR              X9 }
}

uint64_t sub_19C50538C()
{
  unint64_t v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C5053C0 + dword_19C5058AC[v0 >> 62]))(v1);
}

void sub_19C5053D0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  swift_bridgeObjectRetain();
  v4 = sub_19C55C558(v0, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
    __asm { BR              X9 }
  __asm { BR              X9 }
}

uint64_t sub_19C5057A0()
{
  int v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C50580C + dword_19C50590C[v0]))(v1);
}

uint64_t sub_19C5057E4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C50580C + dword_19C50590C[v1]))(v2);
}

void sub_19C5057EC()
{
  JUMPOUT(0x19C5057F4);
}

void sub_19C50581C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = swift_bridgeObjectRetain();
  *(_QWORD *)(v27 - 160) = v26;
  *(_QWORD *)(v27 - 152) = v28;
  *(_BYTE *)(v27 - 96) = 1;
  sub_19C4D893C(v27 - 160, (uint64_t)&a26);
  sub_19C4D783C();
  JUMPOUT(0x19C505884);
}

uint64_t static MLTensor..>= infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  return sub_19C5003A4(a1, a2, (uint64_t (*)(_QWORD *))sub_19C505344);
}

void static MLTensor..< infix<A>(_:_:)(uint64_t a1)
{
  sub_19C505F24(a1);
}

void sub_19C505934()
{
  __asm { BR              X9 }
}

uint64_t sub_19C50597C()
{
  unint64_t v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C5059B0 + dword_19C505E9C[v0 >> 62]))(v1);
}

void sub_19C5059C0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  swift_bridgeObjectRetain();
  v4 = sub_19C55C558(v0, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
    __asm { BR              X9 }
  __asm { BR              X9 }
}

uint64_t sub_19C505D90()
{
  int v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C505DFC + dword_19C505EFC[v0]))(v1);
}

uint64_t sub_19C505DD4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C505DFC + dword_19C505EFC[v1]))(v2);
}

void sub_19C505DDC()
{
  JUMPOUT(0x19C505DE4);
}

void sub_19C505E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = swift_bridgeObjectRetain();
  *(_QWORD *)(v27 - 160) = v26;
  *(_QWORD *)(v27 - 152) = v28;
  *(_BYTE *)(v27 - 96) = 1;
  sub_19C4D893C(v27 - 160, (uint64_t)&a26);
  sub_19C4D783C();
  JUMPOUT(0x19C505E74);
}

uint64_t static MLTensor..< infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  return sub_19C5003A4(a1, a2, (uint64_t (*)(_QWORD *))sub_19C505934);
}

void static MLTensor..<= infix<A>(_:_:)(uint64_t a1)
{
  sub_19C505F24(a1);
}

void sub_19C505F24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)MEMORY[0x1E0C80A78](a1);
  sub_19C59E650(v1, 1);
  __asm { BR              X10 }
}

uint64_t sub_19C505FB0(__int16 a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  char *v12;
  uint64_t v13;

  v9 = *(unsigned __int8 *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  if (v9 != a1)
  {
    v10 = a1 & 0x1FF;
    if (*(_BYTE *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 0x21))
      v11 = 256;
    else
      v11 = 0;
    v12 = (char *)&loc_19C506030 + 4 * byte_19CAE8590[sub_19C52481C(v10, v11 | (unsigned __int16)v9)];
    __asm { BR              X10 }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v3);
  nullsub_1(v3, v2, v13);
  MLTensor.init<A>(_:scalarType:)(v5, v3, (_QWORD *)(v8 - 80));
  *(_QWORD *)(v8 - 88) = *(_QWORD *)(v8 - 80);
  v1(v8 - 88);
  return swift_release();
}

void sub_19C50615C()
{
  __asm { BR              X9 }
}

uint64_t sub_19C5061A4()
{
  unint64_t v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C5061D8 + dword_19C5066C4[v0 >> 62]))(v1);
}

void sub_19C5061E8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  swift_bridgeObjectRetain();
  v4 = sub_19C55C558(v0, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
    __asm { BR              X9 }
  __asm { BR              X9 }
}

uint64_t sub_19C5065B8()
{
  int v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C506624 + dword_19C506724[v0]))(v1);
}

uint64_t sub_19C5065FC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C506624 + dword_19C506724[v1]))(v2);
}

void sub_19C506604()
{
  JUMPOUT(0x19C50660CLL);
}

void sub_19C506634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = swift_bridgeObjectRetain();
  *(_QWORD *)(v27 - 160) = v26;
  *(_QWORD *)(v27 - 152) = v28;
  *(_BYTE *)(v27 - 96) = 1;
  sub_19C4D893C(v27 - 160, (uint64_t)&a26);
  sub_19C4D783C();
  JUMPOUT(0x19C50669CLL);
}

uint64_t static MLTensor..<= infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  return sub_19C5003A4(a1, a2, (uint64_t (*)(_QWORD *))sub_19C50615C);
}

uint64_t sub_19C506740(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v38 = MEMORY[0x1E0DEE9D8];
  sub_19C556FD0(0, v6, 0);
  v7 = v6;
  v34 = v5;
  v35 = v4;
  v37 = a1;
  if (v6)
  {
    v8 = (_QWORD *)(a1 + 32);
    v9 = (uint64_t *)(a2 + 32);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = a2;
    while (v4)
    {
      if (!v5)
        goto LABEL_42;
      v12 = *v9;
      if (!*v9)
        goto LABEL_43;
      if (*v8 == 0x8000000000000000 && v12 == -1)
        goto LABEL_44;
      v14 = *v8 / v12;
      if (v14 <= 1)
        v15 = 1;
      else
        v15 = v14;
      v17 = *(_QWORD *)(v38 + 16);
      v16 = *(_QWORD *)(v38 + 24);
      if (v17 >= v16 >> 1)
      {
        v32 = v11;
        result = sub_19C556FD0(v16 > 1, v17 + 1, 1);
        v11 = v32;
      }
      --v5;
      *(_QWORD *)(v38 + 16) = v17 + 1;
      *(_QWORD *)(v38 + 8 * v17 + 32) = v15;
      --v4;
      ++v9;
      ++v8;
      if (!--v6)
        goto LABEL_21;
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = a2;
LABEL_21:
    if (v35 <= v34)
    {
LABEL_40:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v38;
    }
    v18 = 0;
    if (v7 <= v34)
      v19 = v34;
    else
      v19 = v7;
    v20 = v19 - v7;
    v21 = v35 - v7;
    v22 = 8 * v7 + 32;
    v23 = v37 + v22;
    v24 = v11 + v22;
    while (v21 != v18)
    {
      if (v34 - v7 == v18)
        goto LABEL_40;
      if (v20 == v18)
        goto LABEL_46;
      v25 = *(_QWORD *)(v24 + 8 * v18);
      if (!v25)
        goto LABEL_47;
      v26 = *(_QWORD *)(v23 + 8 * v18);
      if (v26 == 0x8000000000000000 && v25 == -1)
        goto LABEL_48;
      v28 = v26 / v25;
      if (v28 <= 1)
        v29 = 1;
      else
        v29 = v28;
      v31 = *(_QWORD *)(v38 + 16);
      v30 = *(_QWORD *)(v38 + 24);
      if (v31 >= v30 >> 1)
      {
        v33 = v11;
        v36 = v20;
        result = sub_19C556FD0(v30 > 1, v31 + 1, 1);
        v20 = v36;
        v11 = v33;
      }
      *(_QWORD *)(v38 + 16) = v31 + 1;
      *(_QWORD *)(v38 + 8 * v31 + 32) = v29;
      if (v21 == ++v18)
        goto LABEL_40;
    }
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

void MLTensor.gathering(atIndices:alongAxis:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD v3[2];

  v2 = *v1;
  v3[0] = *a1;
  v3[1] = v2;
  MLTensor.gathering(atIndices:alongAxis:batchDimensionCount:)((uint64_t)v3);
}

void MLTensor.gathering(atIndices:alongAxis:batchDimensionCount:)(uint64_t a1)
{
  __asm { BR              X9 }
}

void sub_19C506A3C()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D48A00;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if ((v4 - 1) <= 7)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X9 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C5070C8);
}

void MLTensor.gathering(atIndices:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD v3[2];

  v2 = *v1;
  v3[0] = *a1;
  v3[1] = v2;
  sub_19C507174((uint64_t)v3);
}

void sub_19C507174(uint64_t a1)
{
  __asm { BR              X9 }
}

void sub_19C5071C0()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D489D0;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if ((v4 - 1) <= 7)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X9 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C507AF8);
}

void MLTensor.replacing<A>(atIndices:with:alongAxis:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1);
  v3 = *v1;
  sub_19C59E650(v2, 1);
  __asm { BR              X10 }
}

uint64_t sub_19C507C90(__int16 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  if (v9 != a1)
  {
    v10 = a1 & 0x1FF;
    if (*(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21))
      v11 = 256;
    else
      v11 = 0;
    v12 = (char *)&loc_19C507D10 + 4 * byte_19CAE85A4[sub_19C52481C(v10, v11 | (unsigned __int16)v9)];
    __asm { BR              X10 }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v3, v2);
  nullsub_1(v2, v5, v13);
  MLTensor.init<A>(_:scalarType:)(v4, v2, (_QWORD *)(v8 - 96));
  v14 = *(_QWORD *)(v8 - 96);
  *(_QWORD *)(v8 - 112) = v6;
  *(_QWORD *)(v8 - 104) = v14;
  sub_19C507E4C(v8 - 104);
  return swift_release();
}

void sub_19C507E4C(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_19C507EA0()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_19C507ED0 + dword_19C50879C[v0 >> 62]))();
}

uint64_t sub_19C507EE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  int v28;
  uint64_t v29;

  if (a9 != *(_QWORD *)(*(_QWORD *)((v27 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16))
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_19C507F28 + dword_19C5087AC[v28]))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27);
  v29 = swift_retain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C508088 + dword_19C5087DC[v28]))(v29);
}

void sub_19C508098()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20) - 1 <= 7)
    __asm { BR              X9 }
  *(_QWORD *)(v2 - 176) = 0;
  *(_QWORD *)(v2 - 168) = 0xE000000000000000;
  sub_19CAA9F2C();
  v3 = *(_QWORD *)(v2 - 168);
  *(_QWORD *)(v2 - 176) = *(_QWORD *)(v2 - 176);
  *(_QWORD *)(v2 - 168) = v3;
  sub_19CAA992C();
  __asm { BR              X9 }
}

void sub_19C50868C()
{
  uint64_t v0;

  sub_19C59EBA4(*(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20));
  sub_19CAA992C();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  JUMPOUT(0x19C5085F0);
}

void sub_19C508728()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(v0 + 49))
    v1 = 256;
  else
    v1 = 0;
  v2 = sub_19C59EBA4(v1 | *(unsigned __int8 *)(v0 + 48));
  v4 = v3;
  sub_19CAA992C(v2);
  swift_bridgeObjectRelease(v4);
  sub_19CAA992C(11872);
  JUMPOUT(0x19C5085F0);
}

void sub_19C508734()
{
  JUMPOUT(0x19C508740);
}

void MLTensor.replacing(with:atIndices:alongAxis:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD v3[2];

  v2 = *v1;
  v3[0] = *a1;
  v3[1] = v2;
  sub_19C507E4C((uint64_t)v3);
}

BOOL sub_19C5088C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t sub_19C5088D8@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_19C508BFC(*a1);
  *a2 = result;
  return result;
}

void sub_19C508900(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void sub_19C50890C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E3D44660;
}

uint64_t sub_19C50891C()
{
  char *v0;

  return qword_19CAE86D8[*v0];
}

uint64_t sub_19C508934(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a3 >> 1;
  v7 = (a3 >> 1) - a2;
  if (!__OFSUB__(a3 >> 1, a2))
  {
    v8 = a6 >> 1;
    if (__OFSUB__(a6 >> 1, a5))
      goto LABEL_20;
    if (v7 != (a6 >> 1) - a5)
      return 0;
    if (!v7)
      return 1;
    v9 = (uint64_t *)(result + 8 * a2);
    if (v9 == (uint64_t *)(a4 + 8 * a5) || v6 == a2)
      return 1;
    if (v6 <= a2)
      goto LABEL_22;
    v10 = a2 + 1;
    v11 = *v9;
    if (v6 == a2)
      return 1;
    v12 = a5;
    if (v8 == a5)
      return 0;
    while (v12 >= a5 && v12 < v8)
    {
      if (v11 != *(_QWORD *)(a4 + 8 * v12))
        return 0;
      if (v6 == v10)
        return 1;
      if (v10 >= v6)
        goto LABEL_21;
      v11 = *(_QWORD *)(result + 8 * v10++);
      if (v8 == ++v12)
        return 0;
    }
    __break(1u);
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for ReductionKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ReductionKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_19C508AE4 + 4 * byte_19CAE85B5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_19C508B18 + 4 * byte_19CAE85B0[v4]))();
}

uint64_t sub_19C508B18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C508B20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19C508B28);
  return result;
}

uint64_t sub_19C508B34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19C508B3CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_19C508B40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C508B48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReductionKind()
{
  return &type metadata for ReductionKind;
}

unint64_t sub_19C508B68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE423620;
  if (!qword_1EE423620)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE423628);
    result = MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE423620);
  }
  return result;
}

unint64_t sub_19C508BB8()
{
  unint64_t result;

  result = qword_1EE423630;
  if (!qword_1EE423630)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE86AC, &type metadata for ReductionKind);
    atomic_store(result, (unint64_t *)&qword_1EE423630);
  }
  return result;
}

unint64_t sub_19C508BFC(unint64_t result)
{
  if (result >= 7)
    return 7;
  return result;
}

uint64_t sub_19C508C0C()
{
  return sub_19C5094D8();
}

uint64_t sub_19C508C28()
{
  return sub_19C509558();
}

uint64_t sub_19C508C44()
{
  return sub_19C5095AC();
}

unint64_t sub_19C508C60@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_19C510FB0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_19C508C88()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_19C508CA4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19C508CCC + 4 * byte_19CAE8710[*v0]))(7561825, 0xE300000000000000);
}

uint64_t sub_19C508CCC()
{
  return 1818846563;
}

uint64_t sub_19C508CDC()
{
  return 0x726F6F6C66;
}

uint64_t sub_19C508CF0()
{
  return 0x65746167656ELL;
}

uint64_t sub_19C508D04()
{
  return 0x646E756F72;
}

uint64_t sub_19C508D18()
{
  return 1852270963;
}

uint64_t sub_19C508D28(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19C508D54 + 4 * byte_19CAE8716[a1]))(1936679777, 0xE400000000000000);
}

uint64_t sub_19C508D54()
{
  return 1752066419;
}

uint64_t sub_19C508D60()
{
  return 0x68736F6361;
}

uint64_t sub_19C508D74()
{
  return 1852404577;
}

uint64_t sub_19C508D80()
{
  return 1851880545;
}

uint64_t sub_19C508D8C()
{
  return 0x686E617461;
}

uint64_t sub_19C508DA0()
{
  return 7565155;
}

uint64_t sub_19C508DB0()
{
  return 1752395619;
}

uint64_t sub_19C508DBC()
{
  return 7370853;
}

uint64_t sub_19C508DCC()
{
  return 846231653;
}

uint64_t sub_19C508DD8()
{
  return 6778732;
}

uint64_t sub_19C508DE8()
{
  return 0x636F727069636572;
}

uint64_t sub_19C508E04()
{
  return 0x7472717372;
}

uint64_t sub_19C508E18()
{
  return 7235955;
}

uint64_t sub_19C508E2C()
{
  return 1953657203;
}

uint64_t sub_19C508E38()
{
  return 0x657261757173;
}

uint64_t sub_19C508E4C()
{
  return 7233908;
}

uint64_t sub_19C508E5C()
{
  return 1752064372;
}

uint64_t sub_19C508E6C()
{
  return sub_19C5094D8();
}

uint64_t sub_19C508E88()
{
  return sub_19C509558();
}

uint64_t sub_19C508EA4()
{
  return sub_19C5095AC();
}

unint64_t sub_19C508EC0@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_19C510FC0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_19C508EE8()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_19C508F04()
{
  unsigned __int8 *v0;

  return sub_19C508D28(*v0);
}

uint64_t sub_19C508F0C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_19C508F38()
{
  sub_19CAAA298();
  sub_19CAA9920();
  sub_19CAA9920();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C508FB4()
{
  sub_19CAA9920();
  sub_19CAA9920();
  return sub_19CAAA2A4();
}

uint64_t sub_19C509004()
{
  sub_19CAAA298();
  sub_19CAA9920();
  sub_19CAA9920();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50907C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

BOOL sub_19C5090A8(uint64_t a1, uint64_t a2)
{
  return sub_19C50E1EC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_BYTE *)(a2 + 32));
}

uint64_t sub_19C5090F0()
{
  sub_19CAAA298();
  sub_19CAA9920();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C509150()
{
  sub_19CAA9920();
  return sub_19CAAA2A4();
}

uint64_t sub_19C509190()
{
  sub_19CAAA298();
  sub_19CAA9920();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

void sub_19C5091EC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

unint64_t sub_19C5091F4()
{
  return 0xD000000000000019;
}

uint64_t sub_19C509210()
{
  return 0x206C616369676F6CLL;
}

uint64_t sub_19C509230()
{
  return sub_19C5094D8();
}

uint64_t sub_19C50924C()
{
  return sub_19C509558();
}

uint64_t sub_19C509268()
{
  return sub_19C5095AC();
}

unint64_t sub_19C509284@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_19C510FD0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_19C5092AC()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_19C5092C8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19C5092F0 + 4 * byte_19CAE8729[*v0]))(6579297, 0xE300000000000000);
}

uint64_t sub_19C5092F0()
{
  return 0x6E6F7369766964;
}

uint64_t sub_19C509308()
{
  return 0x6D756D6978616DLL;
}

uint64_t sub_19C509330()
{
  return 0x6F6C75646F6DLL;
}

uint64_t sub_19C509344()
{
  return 0x696C7069746C756DLL;
}

uint64_t sub_19C509368()
{
  return 0x7265776F70;
}

uint64_t sub_19C50937C()
{
  return 0x7463617274627573;
}

uint64_t sub_19C50939C()
{
  return sub_19C5094D8();
}

uint64_t sub_19C5093B8()
{
  return sub_19C509558();
}

uint64_t sub_19C5093D4()
{
  return sub_19C5095AC();
}

unint64_t sub_19C5093F0()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_19C50940C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19C509438 + 4 * byte_19CAE8731[*v0]))(0x6C61757165, 0xE500000000000000);
}

uint64_t sub_19C509438()
{
  return 0x72657461657267;
}

uint64_t sub_19C509450()
{
  return 0x5F72657461657267;
}

uint64_t sub_19C509474()
{
  return 1936942444;
}

uint64_t sub_19C509484()
{
  return 0x7571655F7373656CLL;
}

uint64_t sub_19C5094A0()
{
  return 0x617571655F746F6ELL;
}

uint64_t sub_19C5094BC()
{
  return sub_19C5094D8();
}

uint64_t sub_19C5094D8()
{
  sub_19CAAA298();
  sub_19CAA9920();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50953C()
{
  return sub_19C509558();
}

uint64_t sub_19C509558()
{
  sub_19CAA9920();
  return sub_19CAAA2A4();
}

uint64_t sub_19C509590()
{
  return sub_19C5095AC();
}

uint64_t sub_19C5095AC()
{
  sub_19CAAA298();
  sub_19CAA9920();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t *sub_19C50960C@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

unint64_t sub_19C509624()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_19C509640()
{
  return 0x206C616369676F6CLL;
}

uint64_t sub_19C509688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  sub_19CAAA298();
  sub_19CAA9920();
  v4 = *(_QWORD *)(a3 + 16);
  sub_19CAAA2A4();
  if (v4)
  {
    v5 = a3 + 32;
    do
    {
      v5 += 8;
      sub_19CAAA2A4();
      --v4;
    }
    while (v4);
  }
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50971C()
{
  uint64_t *v0;

  return sub_19C509688(*v0, v0[1], v0[2]);
}

uint64_t sub_19C50972C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  sub_19CAA9920();
  v2 = *(_QWORD *)(v1 + 16);
  sub_19CAAA2A4();
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19CAAA2A4();
      --v2;
    }
    while (v2);
  }
  return sub_19CAAA2A4();
}

uint64_t sub_19C509790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  sub_19CAAA298();
  sub_19CAA9920();
  v2 = *(_QWORD *)(v1 + 16);
  sub_19CAAA2A4();
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19CAAA2A4();
      --v2;
    }
    while (v2);
  }
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C509824()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19C509854
                                                            + 4 * byte_19CAE8737[*(unsigned __int8 *)(v0 + 24)]))(0x6D756D6978616DLL, 0xE700000000000000);
}

uint64_t sub_19C509854()
{
  return 0x6D756D696E696DLL;
}

uint64_t sub_19C509868()
{
  return 1851876717;
}

uint64_t sub_19C509878()
{
  return 0x746375646F7270;
}

uint64_t sub_19C50988C()
{
  return 7173491;
}

uint64_t sub_19C50989C()
{
  return 0x78616D677261;
}

uint64_t sub_19C5098B0()
{
  return 0x6E696D677261;
}

uint64_t sub_19C5098C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  _QWORD *v4;
  int v5;
  char v7;
  uint64_t result;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = *(_QWORD **)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 24);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    return sub_19C4D4494(v2, v4) & (v3 == v5);
  v7 = sub_19CAAA1E4();
  result = 0;
  if ((v7 & 1) != 0)
    return sub_19C4D4494(v2, v4) & (v3 == v5);
  return result;
}

uint64_t sub_19C509944(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  sub_19CAAA298();
  sub_19CAAA2A4();
  v3 = *(_QWORD *)(a2 + 16);
  sub_19CAAA2A4();
  if (v3)
  {
    v4 = a2 + 32;
    do
    {
      v4 += 8;
      sub_19CAAA2A4();
      --v3;
    }
    while (v3);
  }
  sub_19CAA9920();
  return sub_19CAAA2C8();
}

uint64_t sub_19C5099E0()
{
  unsigned __int8 *v0;

  return sub_19C509944(*v0, *((_QWORD *)v0 + 1));
}

uint64_t sub_19C5099F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 8);
  sub_19CAAA2A4();
  v2 = *(_QWORD *)(v1 + 16);
  sub_19CAAA2A4();
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19CAAA2A4();
      --v2;
    }
    while (v2);
  }
  return sub_19CAA9920();
}

uint64_t sub_19C509A60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 8);
  sub_19CAAA298();
  sub_19CAAA2A4();
  v2 = *(_QWORD *)(v1 + 16);
  sub_19CAAA2A4();
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19CAAA2A4();
      --v2;
    }
    while (v2);
  }
  sub_19CAA9920();
  return sub_19CAAA2C8();
}

uint64_t sub_19C509AF4()
{
  _BYTE *v0;

  if (*v0)
    return 29295;
  else
    return 6581857;
}

uint64_t sub_19C509B1C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*a1 != *a2)
    return 0;
  v3 = *((_QWORD *)a1 + 2);
  v2 = *((_QWORD *)a1 + 3);
  v5 = *((_QWORD *)a2 + 2);
  v4 = *((_QWORD *)a2 + 3);
  if (!sub_19C4D4494(*((_QWORD **)a1 + 1), *((_QWORD **)a2 + 1)))
    return 0;
  if (v3 == v5 && v2 == v4)
    return 1;
  else
    return sub_19CAAA1E4();
}

uint64_t sub_19C509BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_19CAAA298();
  v1 = *(_QWORD *)(v0 + 16);
  sub_19C509DC8();
  v2 = *(_QWORD *)(v1 + 16);
  sub_19CAAA2A4();
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19CAAA2A4();
      --v2;
    }
    while (v2);
  }
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C509C30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  sub_19C509DC8();
  v2 = *(_QWORD *)(v1 + 16);
  sub_19CAAA2A4();
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19CAAA2A4();
      --v2;
    }
    while (v2);
  }
  return sub_19CAAA2A4();
}

uint64_t sub_19C509C98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  sub_19CAAA298();
  sub_19C509DC8();
  v2 = *(_QWORD *)(v1 + 16);
  sub_19CAAA2A4();
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19CAAA2A4();
      --v2;
    }
    while (v2);
  }
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C509D28()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 8))
    return 0x6D726F66696E75;
  else
    return 0x6E5F6D6F646E6172;
}

uint64_t sub_19C509D70(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return sub_19C50E7B4((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_19C509DC8()
{
  sub_19CAAA2A4();
  sub_19CAAA2BC();
  return sub_19CAAA2BC();
}

BOOL sub_19C509E54(uint64_t a1, uint64_t a2)
{
  return sub_19C50E728(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t sub_19C509E6C()
{
  sub_19CAAA298();
  sub_19C509DC8();
  return sub_19CAAA2C8();
}

uint64_t sub_19C509EB8()
{
  return sub_19C509DC8();
}

uint64_t sub_19C509EC4()
{
  sub_19CAAA298();
  sub_19C509DC8();
  return sub_19CAAA2C8();
}

uint64_t sub_19C509F0C()
{
  sub_19CAAA298();
  sub_19CAAA2B0();
  sub_19CAAA2B0();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  return sub_19CAAA2C8();
}

uint64_t sub_19C509FB8()
{
  sub_19CAAA2B0();
  sub_19CAAA2B0();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19C50A048()
{
  sub_19CAAA298();
  sub_19CAAA2B0();
  sub_19CAAA2B0();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50A0F8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_19C50E8EC((unsigned __int8 *)v5, (unsigned __int8 *)v7) & 1;
}

uint64_t sub_19C50A140()
{
  return sub_19C50AAB0();
}

uint64_t sub_19C50A15C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  v1 = v0[4];
  v2 = *(_QWORD *)(v1 + 16);
  sub_19CAAA2A4();
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19CAAA2A4();
      --v2;
    }
    while (v2);
  }
  v4 = v0[5];
  v5 = *(_QWORD *)(v4 + 16);
  sub_19CAAA2A4();
  if (v5)
  {
    v6 = v4 + 32;
    do
    {
      v6 += 8;
      sub_19CAAA2A4();
      --v5;
    }
    while (v5);
  }
  v7 = v0[6];
  v8 = *(_QWORD *)(v7 + 16);
  result = sub_19CAAA2A4();
  if (v8)
  {
    v10 = v7 + 32;
    do
    {
      v10 += 8;
      result = sub_19CAAA2A4();
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_19C50A244()
{
  sub_19CAAA298();
  sub_19C50A15C();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50A284()
{
  sub_19CAAA298();
  sub_19C50A15C();
  return sub_19CAAA2C8();
}

BOOL sub_19C50A2BC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return sub_19C50E328((uint64_t)v5, (uint64_t)v7);
}

uint64_t sub_19C50A314()
{
  sub_19CAAA298();
  sub_19CAA9920();
  sub_19CAA9920();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50A378()
{
  sub_19CAA9920();
  return sub_19CAA9920();
}

uint64_t sub_19C50A3B4()
{
  sub_19CAAA298();
  sub_19CAA9920();
  sub_19CAA9920();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50A414(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = sub_19CAAA1E4(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
      return 1;
    else
      return sub_19CAAA1E4();
  }
  return result;
}

uint64_t sub_19C50A4A4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if ((a3 & 1) != 0)
  {
    sub_19CAAA2A4();
    v5 = *(_QWORD *)(a2 + 16);
    result = sub_19CAAA2A4();
    if (v5)
    {
      v6 = a2 + 32;
      do
      {
        v6 += 8;
        result = sub_19CAAA2A4();
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    sub_19CAAA2A4();
    return sub_19CAAA2A4();
  }
  return result;
}

uint64_t sub_19C50A510(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_19CAAA298();
  if ((a2 & 1) != 0)
  {
    sub_19CAAA2A4();
    v4 = *(_QWORD *)(a1 + 16);
    sub_19CAAA2A4();
    if (v4)
    {
      v5 = a1 + 32;
      do
      {
        v5 += 8;
        sub_19CAAA2A4();
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    sub_19CAAA2A4();
    sub_19CAAA2A4();
  }
  return sub_19CAAA2C8();
}

uint64_t sub_19C50A5AC()
{
  sub_19CAAA298();
  sub_19CAA9920();
  sub_19CAA9920();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50A628()
{
  sub_19CAA9920();
  sub_19CAA9920();
  return sub_19CAAA2A4();
}

uint64_t sub_19C50A678()
{
  sub_19CAAA298();
  sub_19CAA9920();
  sub_19CAA9920();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

BOOL sub_19C50A6F0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_19C50E4E4(v5, v7);
}

uint64_t sub_19C50A738()
{
  uint64_t v0;

  return sub_19C50A510(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_19C50A744(uint64_t a1)
{
  uint64_t v1;

  return sub_19C50A4A4(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t sub_19C50A750()
{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 8);
  sub_19CAAA298();
  if (v2 == 1)
  {
    sub_19CAAA2A4();
    v3 = *(_QWORD *)(v1 + 16);
    sub_19CAAA2A4();
    if (v3)
    {
      v4 = v1 + 32;
      do
      {
        v4 += 8;
        sub_19CAAA2A4();
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    sub_19CAAA2A4();
    sub_19CAAA2A4();
  }
  return sub_19CAAA2C8();
}

BOOL sub_19C50A7EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;

  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD **)a2;
  v6 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8) != 1)
    return (v4 == v5) & ~v6;
  if ((v6 & 1) != 0)
    return sub_19C4D4494(v4, v5);
  return 0;
}

uint64_t sub_19C50A82C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[2];
  uint64_t v6;
  char v7;

  sub_19C50E8D4(v0, (uint64_t)v5);
  sub_19C50E8D4(v5, (uint64_t)&v6);
  if ((v7 & 1) != 0)
  {
    v1 = v6;
    sub_19CAAA2A4();
    v2 = *(_QWORD *)(v1 + 16);
    sub_19CAAA2A4();
    if (v2)
    {
      v3 = v1 + 32;
      do
      {
        v3 += 8;
        sub_19CAAA2A4();
        --v2;
      }
      while (v2);
    }
  }
  else
  {
    sub_19CAAA2A4();
    sub_19CAAA2A4();
  }
  sub_19CAAA2A4();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19C50A914()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_19C50A940()
{
  sub_19CAAA298();
  sub_19C50A82C();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50A998()
{
  return sub_19C50A82C();
}

uint64_t sub_19C50A9D8()
{
  sub_19CAAA298();
  sub_19C50A82C();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50AA2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_19C50AA58(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return sub_19C50E3C4((uint64_t *)v5, (uint64_t *)v7) & 1;
}

uint64_t sub_19C50AAB0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  sub_19CAAA298();
  v2 = *(_QWORD *)(v1 + 16);
  sub_19CAAA2A4();
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19CAAA2A4();
      --v2;
    }
    while (v2);
  }
  sub_19CAA9920();
  sub_19CAA9920();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50AB40()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  sub_19CAAA2A4();
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19CAAA2A4();
      --v2;
    }
    while (v2);
  }
  sub_19CAA9920();
  return sub_19CAA9920();
}

uint64_t sub_19C50ABC4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  sub_19CAAA298();
  v2 = *(_QWORD *)(v1 + 16);
  sub_19CAAA2A4();
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19CAAA2A4();
      --v2;
    }
    while (v2);
  }
  sub_19CAA9920();
  sub_19CAA9920();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50AC64()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_19C50AC90(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_19C50E604((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_19C50ACD8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_19C50AD04()
{
  sub_19CAAA298();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50ADB4()
{
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19C50AE40()
{
  sub_19CAAA298();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50AEEC(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_19C50E568(v7, v8) & 1;
}

_QWORD *sub_19C50AF30@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

uint64_t sub_19C50AF50()
{
  _BYTE *v0;

  if (*v0)
    return 0x646F72706D7563;
  else
    return 0x6D75736D7563;
}

uint64_t sub_19C50AF88()
{
  sub_19CAAA298();
  sub_19CAA9920();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50B000()
{
  sub_19CAA9920();
  sub_19CAAA2A4();
  return sub_19CAAA2A4();
}

uint64_t sub_19C50B048()
{
  sub_19CAAA298();
  sub_19CAA9920();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50B0BC()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 16))
    return 0x646F72706D7563;
  else
    return 0x6D75736D7563;
}

BOOL sub_19C50B0F4(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v7;
  _BOOL8 result;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    if (v2 != v4)
      return 0;
    return v3 == v5;
  }
  v7 = sub_19CAAA1E4();
  result = 0;
  if ((v7 & 1) != 0 && ((v2 ^ v4) & 1) == 0)
    return v3 == v5;
  return result;
}

uint64_t sub_19C50B17C()
{
  sub_19CAAA298();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50B22C()
{
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  sub_19CAAA2A4();
  return sub_19CAAA2A4();
}

uint64_t sub_19C50B2C0()
{
  sub_19CAAA298();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

BOOL sub_19C50B36C(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_19C50E28C(v7, v8);
}

uint64_t sub_19C50B3B0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;

  result = MEMORY[0x1E0DEE9D8];
  v8 = MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      __swift_instantiateConcreteTypeFromMangledName(qword_1EE422D98);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_19CAE8310;
      *(_QWORD *)(inited + 32) = v6;
      *(_QWORD *)(inited + 40) = v5;
      sub_19C503880(inited);
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

_QWORD *sub_19C50B494()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t *v5;
  _QWORD *v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = *(unsigned __int8 *)(v0 + 36);
  v2 = *(_QWORD *)(v0 + 40);
  sub_19CAAA298();
  if (v1 == 1)
  {
    sub_19CAAA2A4();
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
LABEL_3:
      result = (_QWORD *)swift_bridgeObjectRetain();
      v5 = (uint64_t *)(v2 + 40);
      v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v7 = v6[2];
        v8 = v7 + 2;
        if (__OFADD__(v7, 2))
          break;
        v9 = *(v5 - 1);
        v10 = *v5;
        result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
        if (!(_DWORD)result || (v11 = v6[3], v12 = v11 >> 1, (uint64_t)(v11 >> 1) < v8))
        {
          if (v7 <= v8)
            v13 = v7 + 2;
          else
            v13 = v7;
          result = sub_19C4F9004(result, v13, 1, v6);
          v6 = result;
          v11 = result[3];
          v12 = v11 >> 1;
        }
        v14 = v6[2];
        v15 = v14 + 1;
        if (v12 <= v14)
        {
          result = sub_19C4F9004((_QWORD *)(v11 > 1), v14 + 1, 1, v6);
          v6 = result;
          v11 = result[3];
          v12 = v11 >> 1;
        }
        v6[2] = v15;
        v6[v14 + 4] = v9;
        if ((uint64_t)v12 < (uint64_t)(v14 + 2))
        {
          result = sub_19C4F9004((_QWORD *)(v11 > 1), v14 + 2, 1, v6);
          v6 = result;
        }
        v5 += 2;
        v6[2] = v14 + 2;
        v6[v15 + 4] = v10;
        if (!--v3)
        {
          swift_bridgeObjectRelease();
          goto LABEL_19;
        }
      }
      __break(1u);
      return result;
    }
  }
  else
  {
    sub_19CAAA2A4();
    sub_19CAAA2BC();
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
      goto LABEL_3;
  }
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_19:
  sub_19CAAA2A4();
  v16 = v6[2];
  if (v16)
  {
    v17 = v6 + 4;
    do
    {
      ++v17;
      sub_19CAAA2A4();
      --v16;
    }
    while (v16);
  }
  swift_bridgeObjectRelease();
  return (_QWORD *)sub_19CAAA2C8();
}

uint64_t sub_19C50B670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 40);
  if (*(_BYTE *)(v0 + 36) == 1)
  {
    sub_19CAAA2A4();
  }
  else
  {
    sub_19CAAA2A4();
    sub_19CAAA2BC();
  }
  v2 = sub_19C50B3B0(v1);
  v3 = *(_QWORD *)(v2 + 16);
  sub_19CAAA2A4();
  if (v3)
  {
    v4 = v2 + 32;
    do
    {
      v4 += 8;
      sub_19CAAA2A4();
      --v3;
    }
    while (v3);
  }
  return swift_bridgeObjectRelease();
}

_QWORD *sub_19C50B718()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t *v5;
  _QWORD *v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = *(unsigned __int8 *)(v0 + 36);
  v2 = *(_QWORD *)(v0 + 40);
  sub_19CAAA298();
  if (v1 == 1)
  {
    sub_19CAAA2A4();
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
LABEL_3:
      result = (_QWORD *)swift_bridgeObjectRetain();
      v5 = (uint64_t *)(v2 + 40);
      v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v7 = v6[2];
        v8 = v7 + 2;
        if (__OFADD__(v7, 2))
          break;
        v9 = *(v5 - 1);
        v10 = *v5;
        result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
        if (!(_DWORD)result || (v11 = v6[3], v12 = v11 >> 1, (uint64_t)(v11 >> 1) < v8))
        {
          if (v7 <= v8)
            v13 = v7 + 2;
          else
            v13 = v7;
          result = sub_19C4F9004(result, v13, 1, v6);
          v6 = result;
          v11 = result[3];
          v12 = v11 >> 1;
        }
        v14 = v6[2];
        v15 = v14 + 1;
        if (v12 <= v14)
        {
          result = sub_19C4F9004((_QWORD *)(v11 > 1), v14 + 1, 1, v6);
          v6 = result;
          v11 = result[3];
          v12 = v11 >> 1;
        }
        v6[2] = v15;
        v6[v14 + 4] = v9;
        if ((uint64_t)v12 < (uint64_t)(v14 + 2))
        {
          result = sub_19C4F9004((_QWORD *)(v11 > 1), v14 + 2, 1, v6);
          v6 = result;
        }
        v5 += 2;
        v6[2] = v14 + 2;
        v6[v15 + 4] = v10;
        if (!--v3)
        {
          swift_bridgeObjectRelease();
          goto LABEL_19;
        }
      }
      __break(1u);
      return result;
    }
  }
  else
  {
    sub_19CAAA2A4();
    sub_19CAAA2BC();
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
      goto LABEL_3;
  }
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_19:
  sub_19CAAA2A4();
  v16 = v6[2];
  if (v16)
  {
    v17 = v6 + 4;
    do
    {
      ++v17;
      sub_19CAAA2A4();
      --v16;
    }
    while (v16);
  }
  swift_bridgeObjectRelease();
  return (_QWORD *)sub_19CAAA2C8();
}

uint64_t sub_19C50B8F0()
{
  sub_19CAAA298();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  sub_19CAAA2A4();
  sub_19CAAA2B0();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50B9A4()
{
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  sub_19CAAA2A4();
  return sub_19CAAA2B0();
}

uint64_t sub_19C50BA3C()
{
  sub_19CAAA298();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19CAA9920();
  swift_bridgeObjectRelease();
  sub_19CAAA2A4();
  sub_19CAAA2B0();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50BAEC(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  _OWORD v8[2];

  v2 = a1[1];
  v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(__int128 *)((char *)a1 + 25);
  v3 = a2[1];
  v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(__int128 *)((char *)a2 + 25);
  return sub_19C50E68C((uint64_t)&v5, (uint64_t)&v7) & 1;
}

uint64_t sub_19C50BB34()
{
  return 0x726568746167;
}

uint64_t sub_19C50BB48()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 16);
  sub_19CAAA298();
  if ((v1 & 1) == 0)
    sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50BBC0()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 16) & 1) == 0)
    sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2A4();
}

uint64_t sub_19C50BC1C()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 16);
  sub_19CAAA298();
  if ((v1 & 1) == 0)
    sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50BC90()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 16))
    return 0x6E5F726568746167;
  else
    return 0x726568746167;
}

uint64_t sub_19C50BCCC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;

  v2 = *a1;
  v3 = *a2;
  if ((a1[2] & 1) != 0)
  {
    if (v2 == v3)
      return *((unsigned __int8 *)a2 + 16);
    else
      return 0;
  }
  else
  {
    v5 = (v2 == v3) & ~*((unsigned __int8 *)a2 + 16);
    if (a1[1] == a2[1])
      return v5;
    else
      return 0;
  }
}

uint64_t sub_19C50BD0C()
{
  sub_19CAAA298();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50BD5C()
{
  sub_19CAAA2A4();
  return sub_19CAAA2A4();
}

uint64_t sub_19C50BD98()
{
  sub_19CAAA298();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

BOOL sub_19C50BDE4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_19C50BDF8()
{
  return 0x72657474616373;
}

uint64_t sub_19C50BE10()
{
  sub_19CAAA298();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50BE78()
{
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2A4();
}

uint64_t sub_19C50BEC0()
{
  sub_19CAAA298();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

unint64_t sub_19C50BF24()
{
  return 0xD000000000000012;
}

BOOL sub_19C50BF40(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(unsigned __int8 *)(a1 + 8) == (unint64_t)*(unsigned __int8 *)(a2 + 8);
}

uint64_t sub_19C50BF60()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 32);
  sub_19CAAA298();
  sub_19CAAA2A4();
  if (v1 != 2)
    sub_19CAAA2B0();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50BFF4()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 32) == 2)
  {
    sub_19CAAA2A4();
  }
  else
  {
    sub_19CAAA2A4();
    sub_19CAAA2B0();
  }
  sub_19CAAA2A4();
  return sub_19CAAA2A4();
}

uint64_t sub_19C50C05C()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 32);
  sub_19CAAA298();
  sub_19CAAA2A4();
  if (v1 != 2)
    sub_19CAAA2B0();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50C0E8()
{
  uint64_t v0;
  int v1;
  unint64_t v2;

  v1 = *(unsigned __int8 *)(v0 + 32);
  v2 = 0xD000000000000018;
  if ((v1 & 1) == 0)
    v2 = 0x7261656E696C6962;
  if (v1 == 2)
    return 0x4E7473657261656ELL;
  else
    return v2;
}

BOOL sub_19C50C154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  _BOOL8 result;
  _BOOL4 v9;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 32);
  if (v4 == 2)
  {
    if (v6 != 2 || v3 != v5)
      return 0;
    return v2 == *(_QWORD *)(a2 + 24);
  }
  result = 0;
  v9 = (v4 & 1) == 0;
  if (v6 != 2 && ((v9 ^ v6) & 1) != 0 && v3 == v5)
    return v2 == *(_QWORD *)(a2 + 24);
  return result;
}

uint64_t sub_19C50C1B0(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    sub_19CAAA2A4();
    return sub_19CAAA2A4();
  }
  else
  {
    sub_19CAAA2A4();
    sub_19CAAA2BC();
    return sub_19CAAA2BC();
  }
}

uint64_t sub_19C50C224()
{
  return 0x6974617669746361;
}

uint64_t sub_19C50C240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50C254, (uint64_t (*)(void))sub_19C50C298);
}

unint64_t sub_19C50C254()
{
  unint64_t result;

  result = qword_1EE423638;
  if (!qword_1EE423638)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8818, &type metadata for ActivationOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423638);
  }
  return result;
}

unint64_t sub_19C50C298()
{
  unint64_t result;

  result = qword_1EE423640;
  if (!qword_1EE423640)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE87B0, &type metadata for ActivationOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423640);
  }
  return result;
}

unint64_t sub_19C50C2E0()
{
  unint64_t result;

  result = qword_1EE423648;
  if (!qword_1EE423648)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE87F0, &type metadata for ActivationOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423648);
  }
  return result;
}

uint64_t sub_19C50C324()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  sub_19CAAA298();
  sub_19C50C1B0((uint64_t)v4, v1, v2);
  return sub_19CAAA2C8();
}

uint64_t sub_19C50C370(uint64_t a1)
{
  uint64_t v1;

  return sub_19C50C1B0(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t sub_19C50C37C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  sub_19CAAA298();
  sub_19C50C1B0((uint64_t)v4, v1, v2);
  return sub_19CAAA2C8();
}

uint64_t sub_19C50C3C4()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 8))
    return 0x78616D74666F73;
  else
    return 0x706D616C63;
}

uint64_t sub_19C50C3FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if ((a1[1] & 1) != 0)
  {
    if (v2 == v3)
      return *((unsigned __int8 *)a2 + 8);
    else
      return 0;
  }
  else
  {
    return (a2[1] & 1) == 0 && *(float *)&v2 == *(float *)&v3 && *((float *)&v2 + 1) == *((float *)&v3 + 1);
  }
}

uint64_t sub_19C50C454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50C468, (uint64_t (*)(void))sub_19C50C4AC);
}

unint64_t sub_19C50C468()
{
  unint64_t result;

  result = qword_1EE423650;
  if (!qword_1EE423650)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE88C4, &type metadata for ResizeOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423650);
  }
  return result;
}

unint64_t sub_19C50C4AC()
{
  unint64_t result;

  result = qword_1EE423658;
  if (!qword_1EE423658)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE885C, &type metadata for ResizeOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423658);
  }
  return result;
}

unint64_t sub_19C50C4F4()
{
  unint64_t result;

  result = qword_1EE423660;
  if (!qword_1EE423660)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE889C, &type metadata for ResizeOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423660);
  }
  return result;
}

uint64_t sub_19C50C538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50C54C, (uint64_t (*)(void))sub_19C50C590);
}

unint64_t sub_19C50C54C()
{
  unint64_t result;

  result = qword_1EE423668;
  if (!qword_1EE423668)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8970, &type metadata for ScatterOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423668);
  }
  return result;
}

unint64_t sub_19C50C590()
{
  unint64_t result;

  result = qword_1EE423670;
  if (!qword_1EE423670)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8908, &type metadata for ScatterOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423670);
  }
  return result;
}

unint64_t sub_19C50C5D8()
{
  unint64_t result;

  result = qword_1EE423678;
  if (!qword_1EE423678)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8948, &type metadata for ScatterOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423678);
  }
  return result;
}

uint64_t sub_19C50C61C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50C630, (uint64_t (*)(void))sub_19C50C674);
}

unint64_t sub_19C50C630()
{
  unint64_t result;

  result = qword_1EE423680;
  if (!qword_1EE423680)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8A1C, &type metadata for GatherOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423680);
  }
  return result;
}

unint64_t sub_19C50C674()
{
  unint64_t result;

  result = qword_1EE423688;
  if (!qword_1EE423688)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE89B4, &type metadata for GatherOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423688);
  }
  return result;
}

unint64_t sub_19C50C6BC()
{
  unint64_t result;

  result = qword_1EE423690;
  if (!qword_1EE423690)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE89F4, &type metadata for GatherOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423690);
  }
  return result;
}

uint64_t sub_19C50C700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50C714, (uint64_t (*)(void))sub_19C50C758);
}

unint64_t sub_19C50C714()
{
  unint64_t result;

  result = qword_1EE423698;
  if (!qword_1EE423698)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8AC8, &type metadata for ReverseOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423698);
  }
  return result;
}

unint64_t sub_19C50C758()
{
  unint64_t result;

  result = qword_1EE4236A0;
  if (!qword_1EE4236A0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8A60, &type metadata for ReverseOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4236A0);
  }
  return result;
}

unint64_t sub_19C50C7A0()
{
  unint64_t result;

  result = qword_1EE4236A8;
  if (!qword_1EE4236A8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8AA0, &type metadata for ReverseOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4236A8);
  }
  return result;
}

uint64_t sub_19C50C7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50C7F8, (uint64_t (*)(void))sub_19C50C83C);
}

unint64_t sub_19C50C7F8()
{
  unint64_t result;

  result = qword_1EE4236B0;
  if (!qword_1EE4236B0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8B74, &type metadata for SplitOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4236B0);
  }
  return result;
}

unint64_t sub_19C50C83C()
{
  unint64_t result;

  result = qword_1EE4236B8;
  if (!qword_1EE4236B8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8B0C, &type metadata for SplitOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4236B8);
  }
  return result;
}

unint64_t sub_19C50C884()
{
  unint64_t result;

  result = qword_1EE4236C0;
  if (!qword_1EE4236C0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8B4C, &type metadata for SplitOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4236C0);
  }
  return result;
}

uint64_t sub_19C50C8C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50C8DC, (uint64_t (*)(void))sub_19C50C920);
}

unint64_t sub_19C50C8DC()
{
  unint64_t result;

  result = qword_1EE4236C8;
  if (!qword_1EE4236C8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8C20, &type metadata for ConcatOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4236C8);
  }
  return result;
}

unint64_t sub_19C50C920()
{
  unint64_t result;

  result = qword_1EE4236D0;
  if (!qword_1EE4236D0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8BB8, &type metadata for ConcatOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4236D0);
  }
  return result;
}

unint64_t sub_19C50C968()
{
  unint64_t result;

  result = qword_1EE4236D8;
  if (!qword_1EE4236D8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8BF8, &type metadata for ConcatOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4236D8);
  }
  return result;
}

uint64_t sub_19C50C9AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50C9C0, (uint64_t (*)(void))sub_19C50CA04);
}

unint64_t sub_19C50C9C0()
{
  unint64_t result;

  result = qword_1EE4236E0;
  if (!qword_1EE4236E0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8CCC, &type metadata for SelectOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4236E0);
  }
  return result;
}

unint64_t sub_19C50CA04()
{
  unint64_t result;

  result = qword_1EE4236E8;
  if (!qword_1EE4236E8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8C64, &type metadata for SelectOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4236E8);
  }
  return result;
}

unint64_t sub_19C50CA4C()
{
  unint64_t result;

  result = qword_1EE4236F0;
  if (!qword_1EE4236F0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8CA4, &type metadata for SelectOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4236F0);
  }
  return result;
}

uint64_t sub_19C50CA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50CAA4, (uint64_t (*)(void))sub_19C50CAE8);
}

unint64_t sub_19C50CAA4()
{
  unint64_t result;

  result = qword_1EE4236F8;
  if (!qword_1EE4236F8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8D78, &type metadata for SliceOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4236F8);
  }
  return result;
}

unint64_t sub_19C50CAE8()
{
  unint64_t result;

  result = qword_1EE423700;
  if (!qword_1EE423700)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8D10, &type metadata for SliceOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423700);
  }
  return result;
}

unint64_t sub_19C50CB30()
{
  unint64_t result;

  result = qword_1EE423708;
  if (!qword_1EE423708)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8D50, &type metadata for SliceOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423708);
  }
  return result;
}

uint64_t sub_19C50CB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50CB88, (uint64_t (*)(void))sub_19C50CBCC);
}

unint64_t sub_19C50CB88()
{
  unint64_t result;

  result = qword_1EE423710;
  if (!qword_1EE423710)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8E24, &type metadata for TransposeOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423710);
  }
  return result;
}

unint64_t sub_19C50CBCC()
{
  unint64_t result;

  result = qword_1EE423718;
  if (!qword_1EE423718)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8DBC, &type metadata for TransposeOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423718);
  }
  return result;
}

unint64_t sub_19C50CC14()
{
  unint64_t result;

  result = qword_1EE423720;
  if (!qword_1EE423720)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8DFC, &type metadata for TransposeOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423720);
  }
  return result;
}

uint64_t sub_19C50CC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50CC6C, (uint64_t (*)(void))sub_19C50CCB0);
}

unint64_t sub_19C50CC6C()
{
  unint64_t result;

  result = qword_1EE423728;
  if (!qword_1EE423728)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8ED0, &type metadata for ReshapeOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423728);
  }
  return result;
}

unint64_t sub_19C50CCB0()
{
  unint64_t result;

  result = qword_1EE423730;
  if (!qword_1EE423730)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8E68, &type metadata for ReshapeOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423730);
  }
  return result;
}

unint64_t sub_19C50CCF8()
{
  unint64_t result;

  result = qword_1EE423738;
  if (!qword_1EE423738)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8EA8, &type metadata for ReshapeOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423738);
  }
  return result;
}

uint64_t sub_19C50CD3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50CD50, (uint64_t (*)(void))sub_19C50CD94);
}

unint64_t sub_19C50CD50()
{
  unint64_t result;

  result = qword_1EE423740;
  if (!qword_1EE423740)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8F7C, &type metadata for CastOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423740);
  }
  return result;
}

unint64_t sub_19C50CD94()
{
  unint64_t result;

  result = qword_1EE423748;
  if (!qword_1EE423748)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8F14, &type metadata for CastOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423748);
  }
  return result;
}

unint64_t sub_19C50CDDC()
{
  unint64_t result;

  result = qword_1EE423750;
  if (!qword_1EE423750)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8F54, &type metadata for CastOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423750);
  }
  return result;
}

uint64_t sub_19C50CE20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50CE34, (uint64_t (*)(void))sub_19C50CE78);
}

unint64_t sub_19C50CE34()
{
  unint64_t result;

  result = qword_1EE423758;
  if (!qword_1EE423758)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9028, &type metadata for ArgumentSortOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423758);
  }
  return result;
}

unint64_t sub_19C50CE78()
{
  unint64_t result;

  result = qword_1EE423760;
  if (!qword_1EE423760)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE8FC0, &type metadata for ArgumentSortOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423760);
  }
  return result;
}

unint64_t sub_19C50CEC0()
{
  unint64_t result;

  result = qword_1EE423768;
  if (!qword_1EE423768)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9000, &type metadata for ArgumentSortOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423768);
  }
  return result;
}

uint64_t sub_19C50CF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50CF18, (uint64_t (*)(void))sub_19C50CF5C);
}

unint64_t sub_19C50CF18()
{
  unint64_t result;

  result = qword_1EE423770;
  if (!qword_1EE423770)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE90D4, &type metadata for PadOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423770);
  }
  return result;
}

unint64_t sub_19C50CF5C()
{
  unint64_t result;

  result = qword_1EE423778;
  if (!qword_1EE423778)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE906C, &type metadata for PadOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423778);
  }
  return result;
}

unint64_t sub_19C50CFA4()
{
  unint64_t result;

  result = qword_1EE423780;
  if (!qword_1EE423780)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE90AC, &type metadata for PadOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423780);
  }
  return result;
}

uint64_t sub_19C50CFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50CFFC, (uint64_t (*)(void))sub_19C50D040);
}

unint64_t sub_19C50CFFC()
{
  unint64_t result;

  result = qword_1EE423788;
  if (!qword_1EE423788)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9180, &type metadata for TopKOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423788);
  }
  return result;
}

unint64_t sub_19C50D040()
{
  unint64_t result;

  result = qword_1EE423790;
  if (!qword_1EE423790)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9118, &type metadata for TopKOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423790);
  }
  return result;
}

unint64_t sub_19C50D088()
{
  unint64_t result;

  result = qword_1EE423798;
  if (!qword_1EE423798)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9158, &type metadata for TopKOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423798);
  }
  return result;
}

uint64_t sub_19C50D0CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50D0E0, (uint64_t (*)(void))sub_19C50D124);
}

unint64_t sub_19C50D0E0()
{
  unint64_t result;

  result = qword_1EE4237A0;
  if (!qword_1EE4237A0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE922C, &type metadata for CumulativeOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4237A0);
  }
  return result;
}

unint64_t sub_19C50D124()
{
  unint64_t result;

  result = qword_1EE4237A8;
  if (!qword_1EE4237A8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE91C4, &type metadata for CumulativeOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4237A8);
  }
  return result;
}

unint64_t sub_19C50D16C()
{
  unint64_t result;

  result = qword_1EE4237B0;
  if (!qword_1EE4237B0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9204, &type metadata for CumulativeOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4237B0);
  }
  return result;
}

uint64_t sub_19C50D1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50D1C4, (uint64_t (*)(void))sub_19C50D208);
}

unint64_t sub_19C50D1C4()
{
  unint64_t result;

  result = qword_1EE4237B8;
  if (!qword_1EE4237B8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE92D8, &type metadata for BandPartOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4237B8);
  }
  return result;
}

unint64_t sub_19C50D208()
{
  unint64_t result;

  result = qword_1EE4237C0;
  if (!qword_1EE4237C0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9270, &type metadata for BandPartOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4237C0);
  }
  return result;
}

unint64_t sub_19C50D250()
{
  unint64_t result;

  result = qword_1EE4237C8;
  if (!qword_1EE4237C8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE92B0, &type metadata for BandPartOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4237C8);
  }
  return result;
}

uint64_t sub_19C50D294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50D2A8, (uint64_t (*)(void))sub_19C50D2EC);
}

unint64_t sub_19C50D2A8()
{
  unint64_t result;

  result = qword_1EE4237D0;
  if (!qword_1EE4237D0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9384, &type metadata for TileOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4237D0);
  }
  return result;
}

unint64_t sub_19C50D2EC()
{
  unint64_t result;

  result = qword_1EE4237D8;
  if (!qword_1EE4237D8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE931C, &type metadata for TileOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4237D8);
  }
  return result;
}

unint64_t sub_19C50D334()
{
  unint64_t result;

  result = qword_1EE4237E0;
  if (!qword_1EE4237E0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE935C, &type metadata for TileOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4237E0);
  }
  return result;
}

uint64_t sub_19C50D378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50D38C, (uint64_t (*)(void))sub_19C50D3D0);
}

unint64_t sub_19C50D38C()
{
  unint64_t result;

  result = qword_1EE4237E8;
  if (!qword_1EE4237E8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9430, &type metadata for ReductionOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4237E8);
  }
  return result;
}

unint64_t sub_19C50D3D0()
{
  unint64_t result;

  result = qword_1EE4237F0;
  if (!qword_1EE4237F0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE93C8, &type metadata for ReductionOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4237F0);
  }
  return result;
}

unint64_t sub_19C50D418()
{
  unint64_t result;

  result = qword_1EE4237F8;
  if (!qword_1EE4237F8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9408, &type metadata for ReductionOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4237F8);
  }
  return result;
}

uint64_t sub_19C50D45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50D470, (uint64_t (*)(void))sub_19C50D4B4);
}

unint64_t sub_19C50D470()
{
  unint64_t result;

  result = qword_1EE423800;
  if (!qword_1EE423800)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE94DC, &type metadata for BinaryComparisonOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423800);
  }
  return result;
}

unint64_t sub_19C50D4B4()
{
  unint64_t result;

  result = qword_1EE423808;
  if (!qword_1EE423808)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9474, &type metadata for BinaryComparisonOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423808);
  }
  return result;
}

unint64_t sub_19C50D4FC()
{
  unint64_t result;

  result = qword_1EE423810;
  if (!qword_1EE423810)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE94B4, &type metadata for BinaryComparisonOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423810);
  }
  return result;
}

uint64_t sub_19C50D540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50D554, (uint64_t (*)(void))sub_19C50D598);
}

unint64_t sub_19C50D554()
{
  unint64_t result;

  result = qword_1EE423818;
  if (!qword_1EE423818)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9588, &type metadata for UnaryFloatingPointArithmeticOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423818);
  }
  return result;
}

unint64_t sub_19C50D598()
{
  unint64_t result;

  result = qword_1EE423820;
  if (!qword_1EE423820)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9520, &type metadata for UnaryFloatingPointArithmeticOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423820);
  }
  return result;
}

unint64_t sub_19C50D5E0()
{
  unint64_t result;

  result = qword_1EE423828;
  if (!qword_1EE423828)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9560, &type metadata for UnaryFloatingPointArithmeticOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423828);
  }
  return result;
}

uint64_t sub_19C50D624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50D638, (uint64_t (*)(void))sub_19C50D67C);
}

unint64_t sub_19C50D638()
{
  unint64_t result;

  result = qword_1EE423830;
  if (!qword_1EE423830)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9634, &type metadata for UnaryArithmeticOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423830);
  }
  return result;
}

unint64_t sub_19C50D67C()
{
  unint64_t result;

  result = qword_1EE423838;
  if (!qword_1EE423838)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE95CC, &type metadata for UnaryArithmeticOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423838);
  }
  return result;
}

unint64_t sub_19C50D6C4()
{
  unint64_t result;

  result = qword_1EE423840;
  if (!qword_1EE423840)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE960C, &type metadata for UnaryArithmeticOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423840);
  }
  return result;
}

uint64_t sub_19C50D708()
{
  sub_19CAAA298();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50D748()
{
  return sub_19CAAA2A4();
}

uint64_t sub_19C50D76C()
{
  sub_19CAAA298();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

_QWORD *sub_19C50D7A8@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

uint64_t sub_19C50D7BC()
{
  return 0x74756C6F766E6F63;
}

uint64_t sub_19C50D7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50D7F0, (uint64_t (*)(void))sub_19C50D834);
}

unint64_t sub_19C50D7F0()
{
  unint64_t result;

  result = qword_1EE423848;
  if (!qword_1EE423848)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE96E0, &type metadata for ConvolutionOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423848);
  }
  return result;
}

unint64_t sub_19C50D834()
{
  unint64_t result;

  result = qword_1EE423850;
  if (!qword_1EE423850)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9678, &type metadata for ConvolutionOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423850);
  }
  return result;
}

unint64_t sub_19C50D87C()
{
  unint64_t result;

  result = qword_1EE423858;
  if (!qword_1EE423858)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE96B8, &type metadata for ConvolutionOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423858);
  }
  return result;
}

uint64_t sub_19C50D8C0()
{
  sub_19CAAA298();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C50D97C()
{
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2A4();
}

uint64_t sub_19C50DA0C()
{
  sub_19CAAA298();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

BOOL sub_19C50DAC4(int64x2_t *a1, int64x2_t *a2)
{
  _BOOL8 result;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*a1, *a2), (int32x4_t)vceqq_s64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].i64[1] == a2[2].i64[1]&& a1[2].i64[0] == a2[2].i64[0])
  {
    return a1[3].i64[0] == a2[3].i64[0];
  }
  return result;
}

uint64_t sub_19C50DB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50DB44, (uint64_t (*)(void))sub_19C50DB88);
}

unint64_t sub_19C50DB44()
{
  unint64_t result;

  result = qword_1EE423860;
  if (!qword_1EE423860)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE978C, &type metadata for BinaryArithmeticOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423860);
  }
  return result;
}

unint64_t sub_19C50DB88()
{
  unint64_t result;

  result = qword_1EE423868;
  if (!qword_1EE423868)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9724, &type metadata for BinaryArithmeticOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423868);
  }
  return result;
}

unint64_t sub_19C50DBD0()
{
  unint64_t result;

  result = qword_1EE423870;
  if (!qword_1EE423870)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9764, &type metadata for BinaryArithmeticOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423870);
  }
  return result;
}

uint64_t sub_19C50DC14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50DC28, (uint64_t (*)(void))sub_19C50DC6C);
}

unint64_t sub_19C50DC28()
{
  unint64_t result;

  result = qword_1EE423878;
  if (!qword_1EE423878)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9838, &type metadata for MatrixMultiplicationOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423878);
  }
  return result;
}

unint64_t sub_19C50DC6C()
{
  unint64_t result;

  result = qword_1EE423880;
  if (!qword_1EE423880)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE97D0, &type metadata for MatrixMultiplicationOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423880);
  }
  return result;
}

unint64_t sub_19C50DCB4()
{
  unint64_t result;

  result = qword_1EE423888;
  if (!qword_1EE423888)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9810, &type metadata for MatrixMultiplicationOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423888);
  }
  return result;
}

uint64_t sub_19C50DCF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50DD0C, (uint64_t (*)(void))sub_19C50DD50);
}

unint64_t sub_19C50DD0C()
{
  unint64_t result;

  result = qword_1EE423890;
  if (!qword_1EE423890)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE98E4, &type metadata for ReductionLogicalOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423890);
  }
  return result;
}

unint64_t sub_19C50DD50()
{
  unint64_t result;

  result = qword_1EE423898;
  if (!qword_1EE423898)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE987C, &type metadata for ReductionLogicalOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423898);
  }
  return result;
}

unint64_t sub_19C50DD98()
{
  unint64_t result;

  result = qword_1EE4238A0;
  if (!qword_1EE4238A0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE98BC, &type metadata for ReductionLogicalOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4238A0);
  }
  return result;
}

uint64_t sub_19C50DDDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50DDF0, (uint64_t (*)(void))sub_19C50DE34);
}

unint64_t sub_19C50DDF0()
{
  unint64_t result;

  result = qword_1EE4238A8;
  if (!qword_1EE4238A8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9990, &type metadata for BinaryLogicalOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4238A8);
  }
  return result;
}

unint64_t sub_19C50DE34()
{
  unint64_t result;

  result = qword_1EE4238B0;
  if (!qword_1EE4238B0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9928, &type metadata for BinaryLogicalOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4238B0);
  }
  return result;
}

unint64_t sub_19C50DE7C()
{
  unint64_t result;

  result = qword_1EE4238B8;
  if (!qword_1EE4238B8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9968, &type metadata for BinaryLogicalOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4238B8);
  }
  return result;
}

uint64_t sub_19C50DEC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50DED4, (uint64_t (*)(void))sub_19C50DF18);
}

unint64_t sub_19C50DED4()
{
  unint64_t result;

  result = qword_1EE4238C0;
  if (!qword_1EE4238C0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9A3C, &type metadata for UnaryLogicalOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4238C0);
  }
  return result;
}

unint64_t sub_19C50DF18()
{
  unint64_t result;

  result = qword_1EE4238C8;
  if (!qword_1EE4238C8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE99D4, &type metadata for UnaryLogicalOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4238C8);
  }
  return result;
}

unint64_t sub_19C50DF60()
{
  unint64_t result;

  result = qword_1EE4238D0;
  if (!qword_1EE4238D0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9A14, &type metadata for UnaryLogicalOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4238D0);
  }
  return result;
}

uint64_t sub_19C50DFA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C50DFB8(a1, a2, a3, (uint64_t (*)(void))sub_19C50DFE8, (uint64_t (*)(void))sub_19C50E02C);
}

uint64_t sub_19C50DFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_19C50DFE8()
{
  unint64_t result;

  result = qword_1EE4238D8;
  if (!qword_1EE4238D8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9AE8, &type metadata for StatelessRandomOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4238D8);
  }
  return result;
}

unint64_t sub_19C50E02C()
{
  unint64_t result;

  result = qword_1EE4238E0;
  if (!qword_1EE4238E0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9A80, &type metadata for StatelessRandomOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4238E0);
  }
  return result;
}

unint64_t sub_19C50E074()
{
  unint64_t result;

  result = qword_1EE4238E8;
  if (!qword_1EE4238E8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9AC0, &type metadata for StatelessRandomOperator);
    atomic_store(result, (unint64_t *)&qword_1EE4238E8);
  }
  return result;
}

unint64_t sub_19C50E0BC()
{
  unint64_t result;

  result = qword_1EE4238F0;
  if (!qword_1EE4238F0)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9B50, &type metadata for StatelessRandomOperator.DistributionKind);
    atomic_store(result, (unint64_t *)&qword_1EE4238F0);
  }
  return result;
}

uint64_t sub_19C50E100(uint64_t a1, uint64_t a2)
{
  float v2;
  int64x2_t *v3;
  float v4;
  int v5;
  int64x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t *v12;
  int64x2_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int32x2_t v20;
  _BOOL4 v22;

  v2 = *(float *)(a1 + 32);
  v3 = *(int64x2_t **)(a1 + 40);
  v4 = *(float *)(a2 + 32);
  v5 = *(unsigned __int8 *)(a2 + 36);
  v6 = *(int64x2_t **)(a2 + 40);
  if (*(_BYTE *)(a1 + 36) == 1)
  {
    if (v2 == 0.0)
    {
      if (v4 != 0.0)
        LOBYTE(v5) = 0;
      if ((v5 & 1) == 0)
        return 0;
    }
    else
    {
      if (v4 == 0.0)
        v5 = 0;
      if (v5 != 1)
        return 0;
    }
  }
  else
  {
    if (v2 != v4)
      LOBYTE(v5) = 1;
    if ((v5 & 1) != 0)
      return 0;
  }
  v7 = v3[1].i64[0];
  if (!v7)
    return 1;
  v8 = v6[1].i64[0];
  if (!v8)
    return 1;
  if (v3[2].i64[0] != v6[2].i64[0] || v3[2].i64[1] != v6[2].i64[1])
    return 0;
  if (v7 == 1 || v8 == 1)
    return 1;
  v12 = v3 + 3;
  v13 = v6 + 3;
  v14 = v8 - 2;
  v15 = v7 - 2;
  do
  {
    v16 = v14;
    v17 = *v12++;
    v18 = v17;
    v19 = *v13++;
    v20 = vmovn_s64(vceqq_s64(v18, v19));
    v22 = v15-- != 0;
    if ((v20.i8[0] & v20.i8[4] & 1) == 0)
      break;
    if (!v22)
      break;
    v14 = v16 - 1;
  }
  while (v16);
  return v20.i8[0] & v20.i8[4] & 1;
}

BOOL sub_19C50E1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  char v14;
  _BOOL8 result;
  char v16;

  if (a1 == a6 && a2 == a7 || (v14 = sub_19CAAA1E4(), result = 0, (v14 & 1) != 0))
  {
    if (a3 == a8 && a4 == a9)
      return a5 == a10;
    v16 = sub_19CAAA1E4();
    result = 0;
    if ((v16 & 1) != 0)
      return a5 == a10;
  }
  return result;
}

BOOL sub_19C50E28C(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  _BOOL8 result;
  char v8;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_19CAAA1E4(), result = 0, (v5 & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3])
      return a1[4] == a2[4] && a1[5] == a2[5];
    v8 = sub_19CAAA1E4();
    result = 0;
    if ((v8 & 1) != 0)
      return a1[4] == a2[4] && a1[5] == a2[5];
  }
  return result;
}

BOOL sub_19C50E328(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  BOOL v5;

  v4 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if ((v4 || (sub_19CAAA1E4() & 1) != 0)
    && (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) ? (v5 = *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)) : (v5 = 0),
        (v5 || (sub_19CAAA1E4() & 1) != 0)
     && sub_19C4D4494(*(_QWORD **)(a1 + 32), *(_QWORD **)(a2 + 32))
     && sub_19C4D4494(*(_QWORD **)(a1 + 40), *(_QWORD **)(a2 + 40))))
  {
    return sub_19C4D4494(*(_QWORD **)(a1 + 48), *(_QWORD **)(a2 + 48));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19C50E3C4(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  char v7;
  uint64_t v9[2];
  uint64_t v10[2];
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  char v14;

  sub_19C50E8D4(a1, (uint64_t)v10);
  sub_19C50E8D4(a2, (uint64_t)v9);
  sub_19C50E8D4(v10, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v4 = v11;
    sub_19C50E8D4(v9, (uint64_t)&v13);
    if (v14 != 1 || !sub_19C4D4494(v4, v13))
      goto LABEL_14;
  }
  else
  {
    v5 = v11;
    sub_19C50E8D4(v9, (uint64_t)&v13);
    v6 = 0;
    if ((v14 & 1) != 0 || v5 != v13)
      return v6 & 1;
  }
  if (a1[2] != a2[2])
  {
LABEL_14:
    v6 = 0;
    return v6 & 1;
  }
  if (a1[3] == a2[3] && a1[4] == a2[4] || (v7 = sub_19CAAA1E4(), v6 = 0, (v7 & 1) != 0))
  {
    if (a1[5] == a2[5] && a1[6] == a2[6])
      v6 = 1;
    else
      v6 = sub_19CAAA1E4();
  }
  return v6 & 1;
}

BOOL sub_19C50E4E4(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  _BOOL8 result;
  char v8;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_19CAAA1E4(), result = 0, (v5 & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3])
      return a1[4] == a2[4];
    v8 = sub_19CAAA1E4();
    result = 0;
    if ((v8 & 1) != 0)
      return a1[4] == a2[4];
  }
  return result;
}

uint64_t sub_19C50E568(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  uint64_t result;

  if (*a1 != *a2 || a1[1] != a2[1])
    return 0;
  v4 = a1[2] == a2[2] && a1[3] == a2[3];
  if (v4 || (v5 = sub_19CAAA1E4(), result = 0, (v5 & 1) != 0))
  {
    if (a1[4] == a2[4] && a1[5] == a2[5])
      return 1;
    else
      return sub_19CAAA1E4();
  }
  return result;
}

uint64_t sub_19C50E604(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  char v5;
  uint64_t result;

  if (!sub_19C4D4494(*(_QWORD **)a1, *(_QWORD **)a2))
    return 0;
  v4 = *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  if (v4 || (v5 = sub_19CAAA1E4(), result = 0, (v5 & 1) != 0))
  {
    if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24) && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32))
      return 1;
    else
      return sub_19CAAA1E4();
  }
  return result;
}

uint64_t sub_19C50E68C(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  char v5;
  char v6;
  BOOL v7;
  char v8;

  v4 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v4 || (v5 = sub_19CAAA1E4(), v6 = 0, (v5 & 1) != 0))
  {
    v7 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
    if (v7 || (v8 = sub_19CAAA1E4(), v6 = 0, (v8 & 1) != 0))
    {
      if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32))
        v6 = ((*(_BYTE *)(a1 + 40) & 1) == 0) ^ *(_BYTE *)(a2 + 40);
      else
        v6 = 0;
    }
  }
  return v6 & 1;
}

BOOL sub_19C50E728(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _BOOL4 v4;
  _BOOL4 v5;
  _BOOL4 v7;

  if (a2)
  {
    v4 = *((float *)&a1 + 1) == *((float *)&a3 + 1);
    if (*(float *)&a1 != *(float *)&a3)
      v4 = 0;
    if (a4 != 1)
      v4 = 0;
    v5 = HIDWORD(a1) == HIDWORD(a3);
    if ((_DWORD)a1 != (_DWORD)a3)
      v5 = 0;
    if (a4 != 2)
      v5 = 0;
    if (a2 == 1)
      return v4;
    else
      return v5;
  }
  else
  {
    v7 = *((float *)&a1 + 1) == *((float *)&a3 + 1);
    if (*(float *)&a1 != *(float *)&a3)
      v7 = 0;
    return !a4 && v7;
  }
}

uint64_t sub_19C50E7B4(uint64_t a1, uint64_t a2)
{
  float v4;
  float v5;
  int v6;
  BOOL v7;
  float v8;
  float v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  char v16;
  float v17;
  float v18;
  char v19;

  sub_19C50E8D4((uint64_t *)a1, (uint64_t)&v13);
  sub_19C50E8D4((uint64_t *)a2, (uint64_t)&v12);
  sub_19C50E8D4(&v13, (uint64_t)&v14);
  if (!v16)
  {
    v5 = v14;
    v4 = v15;
    sub_19C50E8D4(&v12, (uint64_t)&v17);
    v6 = 0;
    if (v19)
      goto LABEL_14;
    goto LABEL_6;
  }
  if (v16 != 1)
  {
    v9 = v14;
    v8 = v15;
    sub_19C50E8D4(&v12, (uint64_t)&v17);
    v6 = 0;
    if (v19 != 2 || LODWORD(v9) != LODWORD(v17))
      goto LABEL_14;
    v7 = LODWORD(v8) == LODWORD(v18);
    goto LABEL_11;
  }
  v5 = v14;
  v4 = v15;
  sub_19C50E8D4(&v12, (uint64_t)&v17);
  v6 = 0;
  if (v19 == 1)
  {
LABEL_6:
    if (v5 != v17)
      goto LABEL_14;
    v7 = v4 == v18;
LABEL_11:
    v6 = v7;
  }
LABEL_14:
  v10 = v6 & sub_19C4D4494(*(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16));
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
    return v10;
  else
    return 0;
}

uint64_t sub_19C50E8D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a1 + 8);
  *(_QWORD *)a2 = v2;
  return a2;
}

uint64_t sub_19C50E8EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result;
  BOOL v5;
  char v6;

  if (((*a1 ^ *a2) & 1) != 0 || ((a1[1] ^ a2[1]) & 1) != 0)
    return 0;
  v5 = *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1) && *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2);
  if (v5 || (v6 = sub_19CAAA1E4(), result = 0, (v6 & 1) != 0))
  {
    if (*((_QWORD *)a1 + 3) == *((_QWORD *)a2 + 3) && *((_QWORD *)a1 + 4) == *((_QWORD *)a2 + 4))
      return 1;
    else
      return sub_19CAAA1E4();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SplitOperator.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_19C50E9CC(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_19C50E9CC(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for SplitOperator.Kind(uint64_t a1)
{
  return sub_19C50E9E8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_19C50E9E8(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t assignWithCopy for SplitOperator.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_19C50E9CC(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_19C50E9E8(v5, v6);
  return a1;
}

uint64_t assignWithTake for SplitOperator.Kind(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_19C50E9E8(v5, v6);
  return a1;
}

uint64_t sub_19C50EA88(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SplitOperator.Kind()
{
  return &type metadata for SplitOperator.Kind;
}

uint64_t __swift_memcpy9_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for StatelessRandomOperator.DistributionKind()
{
  return &type metadata for StatelessRandomOperator.DistributionKind;
}

uint64_t destroy for StatelessRandomOperator()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StatelessRandomOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StatelessRandomOperator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for StatelessRandomOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StatelessRandomOperator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StatelessRandomOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StatelessRandomOperator()
{
  return &type metadata for StatelessRandomOperator;
}

uint64_t sub_19C50ED08()
{
  return 0;
}

ValueMetadata *type metadata accessor for UnaryLogicalOperator()
{
  return &type metadata for UnaryLogicalOperator;
}

uint64_t getEnumTagSinglePayload for BinaryLogicalOperator(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BinaryLogicalOperator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_19C50EDFC + 4 * byte_19CAE8743[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_19C50EE30 + 4 * byte_19CAE873E[v4]))();
}

uint64_t sub_19C50EE30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C50EE38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19C50EE40);
  return result;
}

uint64_t sub_19C50EE4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19C50EE54);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_19C50EE58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C50EE60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BinaryLogicalOperator()
{
  return &type metadata for BinaryLogicalOperator;
}

uint64_t initializeWithCopy for ReductionLogicalOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ReductionLogicalOperator(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ReductionLogicalOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ReductionLogicalOperator()
{
  return &type metadata for ReductionLogicalOperator;
}

uint64_t destroy for MatrixMultiplicationOperator()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MatrixMultiplicationOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MatrixMultiplicationOperator(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MatrixMultiplicationOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MatrixMultiplicationOperator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MatrixMultiplicationOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MatrixMultiplicationOperator()
{
  return &type metadata for MatrixMultiplicationOperator;
}

uint64_t getEnumTagSinglePayload for BinaryArithmeticOperator(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BinaryArithmeticOperator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_19C50F260 + 4 * byte_19CAE874D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_19C50F294 + 4 * byte_19CAE8748[v4]))();
}

uint64_t sub_19C50F294(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C50F29C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19C50F2A4);
  return result;
}

uint64_t sub_19C50F2B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19C50F2B8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_19C50F2BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C50F2C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BinaryArithmeticOperator()
{
  return &type metadata for BinaryArithmeticOperator;
}

uint64_t getEnumTagSinglePayload for ConvolutionOperator(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConvolutionOperator(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConvolutionOperator()
{
  return &type metadata for ConvolutionOperator;
}

ValueMetadata *type metadata accessor for UnaryArithmeticOperator()
{
  return &type metadata for UnaryArithmeticOperator;
}

uint64_t getEnumTagSinglePayload for UnaryFloatingPointArithmeticOperator(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEE)
    goto LABEL_17;
  if (a2 + 18 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 18) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 18;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 18;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 18;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x13;
  v8 = v6 - 19;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UnaryFloatingPointArithmeticOperator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 18 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 18) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xED)
    return ((uint64_t (*)(void))((char *)&loc_19C50F43C + 4 * byte_19CAE8757[v4]))();
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_19C50F470 + 4 * byte_19CAE8752[v4]))();
}

uint64_t sub_19C50F470(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C50F478(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19C50F480);
  return result;
}

uint64_t sub_19C50F48C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19C50F494);
  *(_BYTE *)result = a2 + 18;
  return result;
}

uint64_t sub_19C50F498(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C50F4A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnaryFloatingPointArithmeticOperator()
{
  return &type metadata for UnaryFloatingPointArithmeticOperator;
}

uint64_t _s6CoreML23UnaryArithmeticOperatorOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6CoreML23UnaryArithmeticOperatorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_19C50F598 + 4 * byte_19CAE8761[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_19C50F5CC + 4 * byte_19CAE875C[v4]))();
}

uint64_t sub_19C50F5CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C50F5D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19C50F5DCLL);
  return result;
}

uint64_t sub_19C50F5E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19C50F5F0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_19C50F5F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C50F5FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BinaryComparisonOperator()
{
  return &type metadata for BinaryComparisonOperator;
}

uint64_t destroy for ReductionOperator()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ReductionOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ReductionOperator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ReductionOperator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReductionOperator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReductionOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReductionOperator()
{
  return &type metadata for ReductionOperator;
}

ValueMetadata *type metadata accessor for TileOperator()
{
  return &type metadata for TileOperator;
}

uint64_t destroy for BandPartOperator()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BandPartOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for BandPartOperator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for BandPartOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BandPartOperator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BandPartOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BandPartOperator()
{
  return &type metadata for BandPartOperator;
}

uint64_t initializeWithCopy for CumulativeOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CumulativeOperator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for CumulativeOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for CumulativeOperator()
{
  return &type metadata for CumulativeOperator;
}

uint64_t initializeWithCopy for TopKOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TopKOperator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for TopKOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for TopKOperator()
{
  return &type metadata for TopKOperator;
}

uint64_t destroy for PadOperator()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PadOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PadOperator(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PadOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLModelStructure.Program.Operation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLModelStructure.Program.Operation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PadOperator()
{
  return &type metadata for PadOperator;
}

uint64_t initializeWithCopy for ArgumentSortOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ArgumentSortOperator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ArgumentSortOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArgumentSortOperator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArgumentSortOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ArgumentSortOperator()
{
  return &type metadata for ArgumentSortOperator;
}

uint64_t initializeWithCopy for CastOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CastOperator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

__n128 __swift_memcpy34_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CastOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for CastOperator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 34))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CastOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 34) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CastOperator()
{
  return &type metadata for CastOperator;
}

ValueMetadata *type metadata accessor for ReshapeOperator()
{
  return &type metadata for ReshapeOperator;
}

ValueMetadata *type metadata accessor for TransposeOperator()
{
  return &type metadata for TransposeOperator;
}

uint64_t destroy for SliceOperator()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for SliceOperator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SliceOperator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SliceOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SliceOperator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SliceOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SliceOperator()
{
  return &type metadata for SliceOperator;
}

_QWORD *initializeWithCopy for SelectOperator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SelectOperator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for SelectOperator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s6CoreML24ReductionLogicalOperatorVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_19C510590(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SelectOperator()
{
  return &type metadata for SelectOperator;
}

uint64_t _s6CoreML24ReductionLogicalOperatorVwxx_0()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ConcatOperator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ConcatOperator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

_QWORD *assignWithTake for ConcatOperator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for ConcatOperator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConcatOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConcatOperator()
{
  return &type metadata for ConcatOperator;
}

uint64_t destroy for SplitOperator(uint64_t a1)
{
  sub_19C50E9E8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SplitOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_19C50E9CC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SplitOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_19C50E9CC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_19C50E9E8(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SplitOperator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_19C50E9E8(v6, v7);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRelease();
  v8 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SplitOperator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SplitOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SplitOperator()
{
  return &type metadata for SplitOperator;
}

uint64_t _s6CoreML12TileOperatorVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s6CoreML12TileOperatorVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s6CoreML12TileOperatorVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *_s6CoreML12TileOperatorVwta_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s6CoreML12TileOperatorVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_19C510B98(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReverseOperator()
{
  return &type metadata for ReverseOperator;
}

uint64_t getEnumTagSinglePayload for GatherOperator(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GatherOperator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_19C510C7C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GatherOperator()
{
  return &type metadata for GatherOperator;
}

uint64_t getEnumTagSinglePayload for ScatterOperator(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 7;
  v5 = v3 - 7;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScatterOperator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 250;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 6;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScatterOperator()
{
  return &type metadata for ScatterOperator;
}

uint64_t destroy for ResizeOperator()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ResizeOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ResizeOperator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ResizeOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResizeOperator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResizeOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResizeOperator()
{
  return &type metadata for ResizeOperator;
}

uint64_t _s6CoreML13SplitOperatorV4KindOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s6CoreML13SplitOperatorV4KindOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivationOperator()
{
  return &type metadata for ActivationOperator;
}

unint64_t sub_19C510F6C()
{
  unint64_t result;

  result = qword_1EE4238F8;
  if (!qword_1EE4238F8)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9F94, &type metadata for SplitOperator.Kind);
    atomic_store(result, (unint64_t *)&qword_1EE4238F8);
  }
  return result;
}

unint64_t sub_19C510FB0(unint64_t result)
{
  if (result >= 6)
    return 6;
  return result;
}

unint64_t sub_19C510FC0(unint64_t result)
{
  if (result >= 0x13)
    return 19;
  return result;
}

unint64_t sub_19C510FD0(unint64_t result)
{
  if (result >= 8)
    return 8;
  return result;
}

uint64_t _s6CoreML20UnaryLogicalOperatorOwet_0(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s6CoreML20UnaryLogicalOperatorOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_19C511070 + 4 * byte_19CAE8766[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_19C511090 + 4 * byte_19CAE876B[v4]))();
}

_BYTE *sub_19C511070(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_19C511090(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_19C511098(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_19C5110A0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_19C5110A8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_19C5110B0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ConvolutionOperator.Kind()
{
  return &type metadata for ConvolutionOperator.Kind;
}

ValueMetadata *type metadata accessor for CumulativeOperator.Kind()
{
  return &type metadata for CumulativeOperator.Kind;
}

uint64_t _s6CoreML24ReductionLogicalOperatorV4KindOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_19C511130 + 4 * byte_19CAE8775[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_19C511164 + 4 * byte_19CAE8770[v4]))();
}

uint64_t sub_19C511164(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C51116C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19C511174);
  return result;
}

uint64_t sub_19C511180(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19C511188);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_19C51118C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C511194(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReductionLogicalOperator.Kind()
{
  return &type metadata for ReductionLogicalOperator.Kind;
}

uint64_t storeEnumTagSinglePayload for ReductionOperator.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_19C5111FC + 4 * byte_19CAE877F[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_19C511230 + 4 * byte_19CAE877A[v4]))();
}

uint64_t sub_19C511230(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C511238(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19C511240);
  return result;
}

uint64_t sub_19C51124C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19C511254);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_19C511258(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C511260(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReductionOperator.Kind()
{
  return &type metadata for ReductionOperator.Kind;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ScatterOperator.Kind(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ScatterOperator.Kind(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ScatterOperator.Kind()
{
  return &type metadata for ScatterOperator.Kind;
}

unint64_t sub_19C5112E4()
{
  unint64_t result;

  result = qword_1EE423900;
  if (!qword_1EE423900)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9FFC, &type metadata for ScatterOperator.Kind);
    atomic_store(result, (unint64_t *)&qword_1EE423900);
  }
  return result;
}

unint64_t sub_19C51132C()
{
  unint64_t result;

  result = qword_1EE423908;
  if (!qword_1EE423908)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAEA0DC, &type metadata for ReductionOperator.Kind);
    atomic_store(result, (unint64_t *)&qword_1EE423908);
  }
  return result;
}

unint64_t sub_19C511374()
{
  unint64_t result;

  result = qword_1EE423910;
  if (!qword_1EE423910)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAEA17C, &type metadata for ReductionLogicalOperator.Kind);
    atomic_store(result, (unint64_t *)&qword_1EE423910);
  }
  return result;
}

unint64_t sub_19C5113BC()
{
  unint64_t result;

  result = qword_1EE423918;
  if (!qword_1EE423918)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAEA244, &type metadata for CumulativeOperator.Kind);
    atomic_store(result, (unint64_t *)&qword_1EE423918);
  }
  return result;
}

unint64_t sub_19C511404()
{
  unint64_t result;

  result = qword_1EE423920;
  if (!qword_1EE423920)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAEA2E4, &type metadata for ConvolutionOperator.Kind);
    atomic_store(result, (unint64_t *)&qword_1EE423920);
  }
  return result;
}

uint64_t sub_19C511498(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v22;
  uint64_t v23;

  v5 = a2 - result;
  if (__OFSUB__(a2, result))
    goto LABEL_22;
  v6 = result;
  result = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v22 = MEMORY[0x1E0DEE9D8];
    result = sub_19C557148(0, v5 & ~(v5 >> 63), 0);
    if (a2 < v6 || v5 < 0)
      goto LABEL_23;
    result = v22;
    v8 = v6 + 4;
    v10 = a4;
    v9 = a5;
    v11 = a3;
    while (v8 - a2 != 4)
    {
      if (v6 < 0)
        goto LABEL_17;
      v12 = v8 - 4;
      if ((unint64_t)(v8 - 4) >= *(_QWORD *)(*(_QWORD *)v11 + 16))
        goto LABEL_18;
      if (v12 >= *(_QWORD *)(*(_QWORD *)v10 + 16))
        goto LABEL_19;
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 8 * v8);
      v14 = *(_QWORD *)(*(_QWORD *)v10 + 8 * v8);
      if (v14 < v13)
        goto LABEL_20;
      if (v12 >= *(_QWORD *)(*(_QWORD *)v9 + 16))
        goto LABEL_21;
      v15 = *(_QWORD *)(*(_QWORD *)v9 + 8 * v8);
      v23 = result;
      v17 = *(_QWORD *)(result + 16);
      v16 = *(_QWORD *)(result + 24);
      if (v17 >= v16 >> 1)
      {
        sub_19C557148(v16 > 1, v17 + 1, 1);
        v11 = a3;
        v10 = a4;
        v9 = a5;
        result = v23;
      }
      *(_QWORD *)(result + 16) = v17 + 1;
      v18 = (_QWORD *)(result + 24 * v17);
      v18[4] = v13;
      v18[5] = v14;
      v18[6] = v15;
      if (++v8 - a2 == 4)
        return result;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  return result;
}

uint64_t sub_19C511624(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_19C556FD0(0, v2, 0);
    result = v9;
    v4 = (uint64_t *)(a1 + 48);
    do
    {
      v6 = *v4;
      v4 += 3;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_19C556FD0(v7 > 1, v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_QWORD *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_19C5116E0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v34 = MEMORY[0x1E0DEE9D8];
  sub_19C556FD0(0, v6, 0);
  v7 = v6;
  v31 = v4;
  v33 = a1;
  v30 = v5;
  if (v6)
  {
    v8 = (_QWORD *)(a1 + 32);
    v9 = (_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = v7;
    v12 = a2;
    while (v4)
    {
      if (!v5)
        goto LABEL_28;
      v13 = *v8 - *v9;
      if (__OFSUB__(*v8, *v9))
        goto LABEL_29;
      v15 = *(_QWORD *)(v34 + 16);
      v14 = *(_QWORD *)(v34 + 24);
      if (v15 >= v14 >> 1)
      {
        v28 = v12;
        result = sub_19C556FD0(v14 > 1, v15 + 1, 1);
        v12 = v28;
      }
      --v5;
      *(_QWORD *)(v34 + 16) = v15 + 1;
      *(_QWORD *)(v34 + 8 * v15 + 32) = v13;
      --v4;
      ++v9;
      ++v8;
      if (!--v11)
        goto LABEL_14;
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v12 = a2;
LABEL_14:
    if (v31 <= v30)
    {
LABEL_26:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v34;
    }
    v16 = 0;
    if (v7 <= v30)
      v17 = v30;
    else
      v17 = v7;
    v18 = v17 - v7;
    v19 = v31 - v7;
    v20 = 8 * v7 + 32;
    v21 = v33 + v20;
    v22 = v12 + v20;
    while (v19 != v16)
    {
      if (v30 - v7 == v16)
        goto LABEL_26;
      if (v18 == v16)
        goto LABEL_31;
      v23 = *(_QWORD *)(v21 + 8 * v16);
      v24 = *(_QWORD *)(v22 + 8 * v16);
      v25 = v23 - v24;
      if (__OFSUB__(v23, v24))
        goto LABEL_32;
      v27 = *(_QWORD *)(v34 + 16);
      v26 = *(_QWORD *)(v34 + 24);
      if (v27 >= v26 >> 1)
      {
        v29 = v12;
        v32 = v18;
        result = sub_19C556FD0(v26 > 1, v27 + 1, 1);
        v18 = v32;
        v12 = v29;
      }
      *(_QWORD *)(v34 + 16) = v27 + 1;
      *(_QWORD *)(v34 + 8 * v27 + 32) = v25;
      if (v19 == ++v16)
        goto LABEL_26;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

void sub_19C511910(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

void sub_19C511958()
{
  uint64_t v0;
  uint64_t v2;
  void *v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(*(_QWORD *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16))
  {
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v3 = *(void **)(v2 - 144);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = v0;
    swift_retain();
    sub_19C522A50(inited, &v6);
    swift_bridgeObjectRelease();
    sub_19C4F382C(v3);
    v5 = swift_bridgeObjectRetain();
    sub_19C514554(v5, v2 - 144);
    swift_bridgeObjectRelease();
    if (sub_19C55D7F4(*(_QWORD *)(v2 - 112), *(_QWORD *)(v2 - 104), *(_QWORD *)(v2 - 96)))
      __asm { BR              X10 }
    swift_retain();
    sub_19CAA9F2C();
    sub_19CAA992C();
    __asm { BR              X10 }
  }
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C511D0CLL);
}

__n128 _MLTensorRange._mlTensorRange.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  v3 = v1[1].n128_u8[8];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u8[8] = v3;
  return result;
}

__n128 sub_19C511D58@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  v3 = v1[1].n128_u8[8];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u8[8] = v3;
  return result;
}

uint64_t sub_19C511D74(uint64_t a1)
{
  return sub_19C514430(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t Int._mlTensorRange.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

void sub_19C511DA8(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 24) = 0;
}

uint64_t Range<>._mlTensorRange.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 1;
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

__n128 sub_19C511DD0@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 1;
  a1[1].n128_u8[8] = 1;
  return result;
}

uint64_t ClosedRange<>._mlTensorRange.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 1;
  *(_BYTE *)(a3 + 24) = 2;
  return result;
}

__n128 sub_19C511E00@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 1;
  a1[1].n128_u8[8] = 2;
  return result;
}

double PartialRangeFrom<>._mlTensorRange.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = a1;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a2 + 8) = xmmword_19CAEA310;
  *(_BYTE *)(a2 + 24) = 3;
  return result;
}

double sub_19C511E38@<D0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  double result;

  *(_QWORD *)a1 = *v1;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 8) = xmmword_19CAEA310;
  *(_BYTE *)(a1 + 24) = 3;
  return result;
}

double PartialRangeUpTo<>._mlTensorRange.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = a1;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a2 + 8) = xmmword_19CAEA310;
  *(_BYTE *)(a2 + 24) = 4;
  return result;
}

double sub_19C511E74@<D0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  double result;

  *(_QWORD *)a1 = *v1;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 8) = xmmword_19CAEA310;
  *(_BYTE *)(a1 + 24) = 4;
  return result;
}

double PartialRangeThrough<>._mlTensorRange.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = a1;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a2 + 8) = xmmword_19CAEA310;
  *(_BYTE *)(a2 + 24) = 5;
  return result;
}

double sub_19C511EB0@<D0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  double result;

  *(_QWORD *)a1 = *v1;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 8) = xmmword_19CAEA310;
  *(_BYTE *)(a1 + 24) = 5;
  return result;
}

uint64_t static MLTensorRangeExpression<>.fillAll.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  a1[3] = (uint64_t)&type metadata for _MLTensorRange;
  a1[4] = (uint64_t)&protocol witness table for _MLTensorRange;
  result = swift_allocObject();
  *a1 = result;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 40) = 6;
  return result;
}

uint64_t sub_19C511F28()
{
  return swift_deallocObject();
}

uint64_t static MLTensorRangeExpression<>.newAxis.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_19C511F48(1, a1);
}

uint64_t static MLTensorRangeExpression<>.squeezeAxis.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_19C511F48(2, a1);
}

uint64_t sub_19C511F48@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  a2[3] = (uint64_t)&type metadata for _MLTensorRange;
  a2[4] = (uint64_t)&protocol witness table for _MLTensorRange;
  result = swift_allocObject();
  *a2 = result;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = a1;
  *(_BYTE *)(result + 40) = 6;
  return result;
}

uint64_t static MLTensorRangeExpression<>.index(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  a2[3] = (uint64_t)&type metadata for _MLTensorRange;
  a2[4] = (uint64_t)&protocol witness table for _MLTensorRange;
  result = swift_allocObject();
  *a2 = result;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = a1;
  *(_BYTE *)(result + 40) = 0;
  return result;
}

uint64_t static MLTensorRangeExpression<>.range(_:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_19C51200C(a1, a2, a3, 1, a4);
}

uint64_t static MLTensorRangeExpression<>.closedRange(_:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_19C51200C(a1, a2, a3, 2, a4);
}

uint64_t sub_19C51200C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t result;

  a5[3] = (uint64_t)&type metadata for _MLTensorRange;
  a5[4] = (uint64_t)&protocol witness table for _MLTensorRange;
  result = swift_allocObject();
  *a5 = result;
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = a3;
  *(_BYTE *)(result + 40) = a4;
  return result;
}

uint64_t static MLTensorRangeExpression<>.partialRangeFrom(_:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_19C512098(a1, a2, 3, a3);
}

uint64_t static MLTensorRangeExpression<>.partialRangeUpTo(_:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_19C512098(a1, a2, 4, a3);
}

{
  return sub_19C512098(a1, a2, 5, a3);
}

uint64_t sub_19C512098@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  a4[3] = (uint64_t)&type metadata for _MLTensorRange;
  a4[4] = (uint64_t)&protocol witness table for _MLTensorRange;
  result = swift_allocObject();
  *a4 = result;
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = a3;
  return result;
}

uint64_t MLTensor.IndexPath.start.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLTensor.IndexPath.end.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLTensor.IndexPath.strides.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLTensor.IndexPath.beginMask.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t MLTensor.IndexPath.endMask.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t MLTensor.IndexPath.ellipsisMask.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t MLTensor.IndexPath.newAxisMask.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t MLTensor.IndexPath.squeezeAxisMask.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t MLTensor.IndexPath.init(begin:end:strides:beginMask:endMask:ellipsisMask:newAxisMask:squeezeAxisMask:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  return result;
}

uint64_t MLTensor.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  _QWORD v30[3];
  char v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[9];

  v4 = *v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v29 = *v3;
    v35 = MEMORY[0x1E0DEE9D8];
    sub_19C557164(0, v5, 0);
    v8 = a3 + 32;
    do
    {
      sub_19C5143A8(v8, (uint64_t)v36);
      sub_19C5143A8((uint64_t)v36, (uint64_t)v32);
      v9 = v33;
      if (v33)
      {
        v10 = v34;
        __swift_project_boxed_opaque_existential_1(v32, v33);
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v30, v9, v10);
        v11 = v30[0];
        v12 = v30[1];
        v13 = v30[2];
        v14 = v31;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
      }
      else
      {
        sub_19C5143F0((uint64_t)v32);
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = -1;
      }
      sub_19C5143F0((uint64_t)v36);
      v6 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19C557164(0, *(_QWORD *)(v6 + 16) + 1, 1);
        v6 = v35;
      }
      v16 = *(_QWORD *)(v6 + 16);
      v15 = *(_QWORD *)(v6 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_19C557164(v15 > 1, v16 + 1, 1);
        v6 = v35;
      }
      *(_QWORD *)(v6 + 16) = v16 + 1;
      v17 = v6 + 32 * v16;
      *(_QWORD *)(v17 + 32) = v11;
      *(_QWORD *)(v17 + 40) = v12;
      *(_QWORD *)(v17 + 48) = v13;
      *(_BYTE *)(v17 + 56) = v14;
      v8 += 40;
      --v5;
    }
    while (v5);
    v4 = v29;
  }
  v36[0] = &unk_1E3D48AD8;
  sub_19C503C88(v6);
  v18 = v36[0];
  v19 = *(_QWORD *)(v36[0] + 16);
  if (v19)
  {
    swift_bridgeObjectRetain();
    v20 = (_BYTE *)(v18 + 56);
    v21 = MEMORY[0x1E0DEE9D8];
    do
    {
      if (*v20 == 6 && !(*((_QWORD *)v20 - 2) | *((_QWORD *)v20 - 1) | *((_QWORD *)v20 - 3)))
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v36[0] = v21;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_19C557164(0, *(_QWORD *)(v21 + 16) + 1, 1);
          v21 = v36[0];
        }
        v23 = *(_QWORD *)(v21 + 16);
        v22 = *(_QWORD *)(v21 + 24);
        if (v23 >= v22 >> 1)
        {
          sub_19C557164(v22 > 1, v23 + 1, 1);
          v21 = v36[0];
        }
        *(_QWORD *)(v21 + 16) = v23 + 1;
        v24 = v21 + 32 * v23;
        *(_QWORD *)(v24 + 40) = 0;
        *(_QWORD *)(v24 + 48) = 0;
        *(_QWORD *)(v24 + 32) = 0;
        *(_BYTE *)(v24 + 56) = 6;
      }
      v20 += 32;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = MEMORY[0x1E0DEE9D8];
  }
  v26 = *(_QWORD *)(v21 + 16);
  swift_release();
  if (v26 <= 1
    && (sub_19C5146FC(v18, v36),
        swift_bridgeObjectRelease(),
        v27 = *(_QWORD *)(v36[0] + 16),
        v27 == *(_QWORD *)(v36[1] + 16))
    && v27 == *(_QWORD *)(v36[2] + 16))
  {
    v32[0] = v4;
    swift_retain();
    sub_19C513658(v36);
    sub_19C514D88((uint64_t)v36);
    return swift_release();
  }
  else
  {
    result = sub_19CAAA0B8();
    __break(1u);
  }
  return result;
}

uint64_t MLTensor.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];
  char v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;

  v7 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235E8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19CAE8310;
  sub_19C5143A8(a1, (uint64_t)v45);
  v9 = v46;
  if (v46)
  {
    v10 = v47;
    __swift_project_boxed_opaque_existential_1(v45, v46);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v10 + 8))(&v40, v9, v10);
    v11 = v41;
    v12 = v42;
    *(_OWORD *)(inited + 32) = v40;
    *(_QWORD *)(inited + 48) = v11;
    *(_BYTE *)(inited + 56) = v12;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v45);
  }
  else
  {
    sub_19C5143F0((uint64_t)v45);
    *(_QWORD *)(inited + 32) = 0;
    *(_QWORD *)(inited + 40) = 0;
    *(_QWORD *)(inited + 48) = 0;
    *(_BYTE *)(inited + 56) = -1;
  }
  *(_QWORD *)(inited + 64) = 0;
  *(_QWORD *)(inited + 72) = 0;
  *(_QWORD *)(inited + 80) = 0;
  *(_BYTE *)(inited + 88) = 6;
  v13 = *(_QWORD *)(a4 + 16);
  v14 = MEMORY[0x1E0DEE9D8];
  if (v13)
  {
    v36 = inited;
    v37 = v7;
    v44 = MEMORY[0x1E0DEE9D8];
    sub_19C557164(0, v13, 0);
    v15 = a4 + 32;
    do
    {
      sub_19C5143A8(v15, (uint64_t)v45);
      sub_19C5143A8((uint64_t)v45, (uint64_t)&v40);
      v16 = v42;
      if (v42)
      {
        v17 = v43;
        __swift_project_boxed_opaque_existential_1(&v40, v42);
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v17 + 8))(v38, v16, v17);
        v18 = v38[0];
        v19 = v38[1];
        v20 = v38[2];
        v21 = v39;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v40);
      }
      else
      {
        sub_19C5143F0((uint64_t)&v40);
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = -1;
      }
      sub_19C5143F0((uint64_t)v45);
      v14 = v44;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19C557164(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v44;
      }
      v23 = *(_QWORD *)(v14 + 16);
      v22 = *(_QWORD *)(v14 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_19C557164(v22 > 1, v23 + 1, 1);
        v14 = v44;
      }
      *(_QWORD *)(v14 + 16) = v23 + 1;
      v24 = v14 + 32 * v23;
      *(_QWORD *)(v24 + 32) = v18;
      *(_QWORD *)(v24 + 40) = v19;
      *(_QWORD *)(v24 + 48) = v20;
      *(_BYTE *)(v24 + 56) = v21;
      v15 += 40;
      --v13;
    }
    while (v13);
    v7 = v37;
    inited = v36;
  }
  v45[0] = inited;
  sub_19C503C88(v14);
  v25 = v45[0];
  v26 = *(_QWORD *)(v45[0] + 16);
  if (v26)
  {
    swift_bridgeObjectRetain();
    v27 = (_BYTE *)(v25 + 56);
    v28 = MEMORY[0x1E0DEE9D8];
    do
    {
      if (*v27 == 6 && !(*((_QWORD *)v27 - 2) | *((_QWORD *)v27 - 1) | *((_QWORD *)v27 - 3)))
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v45[0] = v28;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_19C557164(0, *(_QWORD *)(v28 + 16) + 1, 1);
          v28 = v45[0];
        }
        v30 = *(_QWORD *)(v28 + 16);
        v29 = *(_QWORD *)(v28 + 24);
        if (v30 >= v29 >> 1)
        {
          sub_19C557164(v29 > 1, v30 + 1, 1);
          v28 = v45[0];
        }
        *(_QWORD *)(v28 + 16) = v30 + 1;
        v31 = v28 + 32 * v30;
        *(_QWORD *)(v31 + 40) = 0;
        *(_QWORD *)(v31 + 48) = 0;
        *(_QWORD *)(v31 + 32) = 0;
        *(_BYTE *)(v31 + 56) = 6;
      }
      v27 += 32;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = MEMORY[0x1E0DEE9D8];
  }
  v33 = *(_QWORD *)(v28 + 16);
  swift_release();
  if (v33 <= 1
    && (sub_19C5146FC(v25, v45),
        swift_bridgeObjectRelease(),
        v34 = *(_QWORD *)(v45[0] + 16),
        v34 == *(_QWORD *)(v45[1] + 16))
    && v34 == *(_QWORD *)(v45[2] + 16))
  {
    *(_QWORD *)&v40 = v7;
    swift_retain();
    sub_19C513658(v45);
    sub_19C514D88((uint64_t)v45);
    return swift_release();
  }
  else
  {
    result = sub_19CAAA0B8();
    __break(1u);
  }
  return result;
}

uint64_t MLTensor.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  char v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;

  v9 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235E8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19CAE83C0;
  sub_19C5143A8(a1, (uint64_t)v51);
  v11 = v52;
  if (v52)
  {
    v12 = v53;
    __swift_project_boxed_opaque_existential_1(v51, v52);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v12 + 8))(&v46, v11, v12);
    v13 = v47;
    v14 = v48;
    *(_OWORD *)(inited + 32) = v46;
    *(_QWORD *)(inited + 48) = v13;
    *(_BYTE *)(inited + 56) = v14;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
  }
  else
  {
    sub_19C5143F0((uint64_t)v51);
    *(_QWORD *)(inited + 32) = 0;
    *(_QWORD *)(inited + 40) = 0;
    *(_QWORD *)(inited + 48) = 0;
    *(_BYTE *)(inited + 56) = -1;
  }
  sub_19C5143A8(a2, (uint64_t)v51);
  v15 = v52;
  if (v52)
  {
    v16 = v53;
    __swift_project_boxed_opaque_existential_1(v51, v52);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v16 + 8))(&v46, v15, v16);
    v17 = v47;
    v18 = v48;
    *(_OWORD *)(inited + 64) = v46;
    *(_QWORD *)(inited + 80) = v17;
    *(_BYTE *)(inited + 88) = v18;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
  }
  else
  {
    sub_19C5143F0((uint64_t)v51);
    *(_QWORD *)(inited + 64) = 0;
    *(_QWORD *)(inited + 72) = 0;
    *(_QWORD *)(inited + 80) = 0;
    *(_BYTE *)(inited + 88) = -1;
  }
  *(_QWORD *)(inited + 96) = 0;
  *(_QWORD *)(inited + 104) = 0;
  *(_QWORD *)(inited + 112) = 0;
  *(_BYTE *)(inited + 120) = 6;
  v19 = *(_QWORD *)(a5 + 16);
  v20 = MEMORY[0x1E0DEE9D8];
  if (v19)
  {
    v42 = inited;
    v43 = v9;
    v50 = MEMORY[0x1E0DEE9D8];
    sub_19C557164(0, v19, 0);
    v21 = a5 + 32;
    do
    {
      sub_19C5143A8(v21, (uint64_t)v51);
      sub_19C5143A8((uint64_t)v51, (uint64_t)&v46);
      v22 = v48;
      if (v48)
      {
        v23 = v49;
        __swift_project_boxed_opaque_existential_1(&v46, v48);
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v23 + 8))(v44, v22, v23);
        v24 = v44[0];
        v25 = v44[1];
        v26 = v44[2];
        v27 = v45;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v46);
      }
      else
      {
        sub_19C5143F0((uint64_t)&v46);
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = -1;
      }
      sub_19C5143F0((uint64_t)v51);
      v20 = v50;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19C557164(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v20 = v50;
      }
      v29 = *(_QWORD *)(v20 + 16);
      v28 = *(_QWORD *)(v20 + 24);
      if (v29 >= v28 >> 1)
      {
        sub_19C557164(v28 > 1, v29 + 1, 1);
        v20 = v50;
      }
      *(_QWORD *)(v20 + 16) = v29 + 1;
      v30 = v20 + 32 * v29;
      *(_QWORD *)(v30 + 32) = v24;
      *(_QWORD *)(v30 + 40) = v25;
      *(_QWORD *)(v30 + 48) = v26;
      *(_BYTE *)(v30 + 56) = v27;
      v21 += 40;
      --v19;
    }
    while (v19);
    v9 = v43;
    inited = v42;
  }
  v51[0] = inited;
  sub_19C503C88(v20);
  v31 = v51[0];
  v32 = *(_QWORD *)(v51[0] + 16);
  if (v32)
  {
    swift_bridgeObjectRetain();
    v33 = (_BYTE *)(v31 + 56);
    v34 = MEMORY[0x1E0DEE9D8];
    do
    {
      if (*v33 == 6 && !(*((_QWORD *)v33 - 2) | *((_QWORD *)v33 - 1) | *((_QWORD *)v33 - 3)))
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v51[0] = v34;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_19C557164(0, *(_QWORD *)(v34 + 16) + 1, 1);
          v34 = v51[0];
        }
        v36 = *(_QWORD *)(v34 + 16);
        v35 = *(_QWORD *)(v34 + 24);
        if (v36 >= v35 >> 1)
        {
          sub_19C557164(v35 > 1, v36 + 1, 1);
          v34 = v51[0];
        }
        *(_QWORD *)(v34 + 16) = v36 + 1;
        v37 = v34 + 32 * v36;
        *(_QWORD *)(v37 + 40) = 0;
        *(_QWORD *)(v37 + 48) = 0;
        *(_QWORD *)(v37 + 32) = 0;
        *(_BYTE *)(v37 + 56) = 6;
      }
      v33 += 32;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
  }
  else
  {
    v34 = MEMORY[0x1E0DEE9D8];
  }
  v39 = *(_QWORD *)(v34 + 16);
  swift_release();
  if (v39 <= 1
    && (sub_19C5146FC(v31, v51),
        swift_bridgeObjectRelease(),
        v40 = *(_QWORD *)(v51[0] + 16),
        v40 == *(_QWORD *)(v51[1] + 16))
    && v40 == *(_QWORD *)(v51[2] + 16))
  {
    *(_QWORD *)&v46 = v9;
    swift_retain();
    sub_19C513658(v51);
    sub_19C514D88((uint64_t)v51);
    return swift_release();
  }
  else
  {
    result = sub_19CAAA0B8();
    __break(1u);
  }
  return result;
}

uint64_t MLTensor.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  char v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];
  uint64_t v58;
  uint64_t v59;

  v11 = *v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235E8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19CAEA320;
  sub_19C5143A8(a1, (uint64_t)v57);
  v13 = v58;
  if (v58)
  {
    v14 = v59;
    __swift_project_boxed_opaque_existential_1(v57, v58);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v14 + 8))(&v52, v13, v14);
    v15 = v53;
    v16 = v54;
    *(_OWORD *)(inited + 32) = v52;
    *(_QWORD *)(inited + 48) = v15;
    *(_BYTE *)(inited + 56) = v16;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v57);
  }
  else
  {
    sub_19C5143F0((uint64_t)v57);
    *(_QWORD *)(inited + 32) = 0;
    *(_QWORD *)(inited + 40) = 0;
    *(_QWORD *)(inited + 48) = 0;
    *(_BYTE *)(inited + 56) = -1;
  }
  sub_19C5143A8(a2, (uint64_t)v57);
  v17 = v58;
  if (v58)
  {
    v18 = v59;
    __swift_project_boxed_opaque_existential_1(v57, v58);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v18 + 8))(&v52, v17, v18);
    v19 = v53;
    v20 = v54;
    *(_OWORD *)(inited + 64) = v52;
    *(_QWORD *)(inited + 80) = v19;
    *(_BYTE *)(inited + 88) = v20;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v57);
  }
  else
  {
    sub_19C5143F0((uint64_t)v57);
    *(_QWORD *)(inited + 64) = 0;
    *(_QWORD *)(inited + 72) = 0;
    *(_QWORD *)(inited + 80) = 0;
    *(_BYTE *)(inited + 88) = -1;
  }
  sub_19C5143A8(a3, (uint64_t)v57);
  v21 = v58;
  if (v58)
  {
    v22 = v59;
    __swift_project_boxed_opaque_existential_1(v57, v58);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v22 + 8))(&v52, v21, v22);
    v23 = v53;
    v24 = v54;
    *(_OWORD *)(inited + 96) = v52;
    *(_QWORD *)(inited + 112) = v23;
    *(_BYTE *)(inited + 120) = v24;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v57);
  }
  else
  {
    sub_19C5143F0((uint64_t)v57);
    *(_QWORD *)(inited + 96) = 0;
    *(_QWORD *)(inited + 104) = 0;
    *(_QWORD *)(inited + 112) = 0;
    *(_BYTE *)(inited + 120) = -1;
  }
  *(_QWORD *)(inited + 128) = 0;
  *(_QWORD *)(inited + 136) = 0;
  *(_QWORD *)(inited + 144) = 0;
  *(_BYTE *)(inited + 152) = 6;
  v25 = *(_QWORD *)(a6 + 16);
  v26 = MEMORY[0x1E0DEE9D8];
  if (v25)
  {
    v48 = inited;
    v49 = v11;
    v56 = MEMORY[0x1E0DEE9D8];
    sub_19C557164(0, v25, 0);
    v27 = a6 + 32;
    do
    {
      sub_19C5143A8(v27, (uint64_t)v57);
      sub_19C5143A8((uint64_t)v57, (uint64_t)&v52);
      v28 = v54;
      if (v54)
      {
        v29 = v55;
        __swift_project_boxed_opaque_existential_1(&v52, v54);
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v29 + 8))(v50, v28, v29);
        v30 = v50[0];
        v31 = v50[1];
        v32 = v50[2];
        v33 = v51;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v52);
      }
      else
      {
        sub_19C5143F0((uint64_t)&v52);
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = -1;
      }
      sub_19C5143F0((uint64_t)v57);
      v26 = v56;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19C557164(0, *(_QWORD *)(v26 + 16) + 1, 1);
        v26 = v56;
      }
      v35 = *(_QWORD *)(v26 + 16);
      v34 = *(_QWORD *)(v26 + 24);
      if (v35 >= v34 >> 1)
      {
        sub_19C557164(v34 > 1, v35 + 1, 1);
        v26 = v56;
      }
      *(_QWORD *)(v26 + 16) = v35 + 1;
      v36 = v26 + 32 * v35;
      *(_QWORD *)(v36 + 32) = v30;
      *(_QWORD *)(v36 + 40) = v31;
      *(_QWORD *)(v36 + 48) = v32;
      *(_BYTE *)(v36 + 56) = v33;
      v27 += 40;
      --v25;
    }
    while (v25);
    v11 = v49;
    inited = v48;
  }
  v57[0] = inited;
  sub_19C503C88(v26);
  v37 = v57[0];
  v38 = *(_QWORD *)(v57[0] + 16);
  if (v38)
  {
    swift_bridgeObjectRetain();
    v39 = (_BYTE *)(v37 + 56);
    v40 = MEMORY[0x1E0DEE9D8];
    do
    {
      if (*v39 == 6 && !(*((_QWORD *)v39 - 2) | *((_QWORD *)v39 - 1) | *((_QWORD *)v39 - 3)))
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v57[0] = v40;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_19C557164(0, *(_QWORD *)(v40 + 16) + 1, 1);
          v40 = v57[0];
        }
        v42 = *(_QWORD *)(v40 + 16);
        v41 = *(_QWORD *)(v40 + 24);
        if (v42 >= v41 >> 1)
        {
          sub_19C557164(v41 > 1, v42 + 1, 1);
          v40 = v57[0];
        }
        *(_QWORD *)(v40 + 16) = v42 + 1;
        v43 = v40 + 32 * v42;
        *(_QWORD *)(v43 + 40) = 0;
        *(_QWORD *)(v43 + 48) = 0;
        *(_QWORD *)(v43 + 32) = 0;
        *(_BYTE *)(v43 + 56) = 6;
      }
      v39 += 32;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease();
  }
  else
  {
    v40 = MEMORY[0x1E0DEE9D8];
  }
  v45 = *(_QWORD *)(v40 + 16);
  swift_release();
  if (v45 <= 1
    && (sub_19C5146FC(v37, v57),
        swift_bridgeObjectRelease(),
        v46 = *(_QWORD *)(v57[0] + 16),
        v46 == *(_QWORD *)(v57[1] + 16))
    && v46 == *(_QWORD *)(v57[2] + 16))
  {
    *(_QWORD *)&v52 = v11;
    swift_retain();
    sub_19C513658(v57);
    sub_19C514D88((uint64_t)v57);
    return swift_release();
  }
  else
  {
    result = sub_19CAAA0B8();
    __break(1u);
  }
  return result;
}

uint64_t MLTensor.subscript.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  _QWORD v27[3];
  char v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[9];

  v2 = *v1;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v26 = *v1;
    v32 = MEMORY[0x1E0DEE9D8];
    sub_19C557164(0, v3, 0);
    v5 = a1 + 32;
    do
    {
      sub_19C5143A8(v5, (uint64_t)v33);
      sub_19C5143A8((uint64_t)v33, (uint64_t)v29);
      v6 = v30;
      if (v30)
      {
        v7 = v31;
        __swift_project_boxed_opaque_existential_1(v29, v30);
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v27, v6, v7);
        v8 = v27[0];
        v9 = v27[1];
        v10 = v27[2];
        v11 = v28;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
      }
      else
      {
        sub_19C5143F0((uint64_t)v29);
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = -1;
      }
      sub_19C5143F0((uint64_t)v33);
      v12 = v32;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19C557164(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = v32;
      }
      v14 = *(_QWORD *)(v12 + 16);
      v13 = *(_QWORD *)(v12 + 24);
      v15 = v14 + 1;
      if (v14 >= v13 >> 1)
      {
        sub_19C557164(v13 > 1, v14 + 1, 1);
        v12 = v32;
      }
      *(_QWORD *)(v12 + 16) = v15;
      v16 = v12 + 32 * v14;
      *(_QWORD *)(v16 + 32) = v8;
      *(_QWORD *)(v16 + 40) = v9;
      *(_QWORD *)(v16 + 48) = v10;
      *(_BYTE *)(v16 + 56) = v11;
      v5 += 40;
      --v3;
    }
    while (v3);
    v2 = v26;
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9D8];
    v15 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    v17 = MEMORY[0x1E0DEE9D8];
    if (!v15)
      goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  v18 = (_BYTE *)(v12 + 56);
  v17 = MEMORY[0x1E0DEE9D8];
  do
  {
    if (*v18 == 6 && !(*((_QWORD *)v18 - 2) | *((_QWORD *)v18 - 1) | *((_QWORD *)v18 - 3)))
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v33[0] = v17;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_19C557164(0, *(_QWORD *)(v17 + 16) + 1, 1);
        v17 = v33[0];
      }
      v20 = *(_QWORD *)(v17 + 16);
      v19 = *(_QWORD *)(v17 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_19C557164(v19 > 1, v20 + 1, 1);
        v17 = v33[0];
      }
      *(_QWORD *)(v17 + 16) = v20 + 1;
      v21 = v17 + 32 * v20;
      *(_QWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 32) = 0;
      *(_BYTE *)(v21 + 56) = 6;
    }
    v18 += 32;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
LABEL_23:
  v23 = *(_QWORD *)(v17 + 16);
  swift_release();
  if (v23 <= 1
    && (sub_19C5146FC(v12, v33),
        swift_bridgeObjectRelease(),
        v24 = *(_QWORD *)(v33[0] + 16),
        v24 == *(_QWORD *)(v33[1] + 16))
    && v24 == *(_QWORD *)(v33[2] + 16))
  {
    v29[0] = v2;
    swift_retain();
    sub_19C513658(v33);
    sub_19C514D88((uint64_t)v33);
    return swift_release();
  }
  else
  {
    result = sub_19CAAA0B8();
    __break(1u);
  }
  return result;
}

void sub_19C513658(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;

  v42 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v41 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = *(_QWORD *)(*a1 + 16);
  v35 = *v1 >> 62;
  if (!v2)
LABEL_58:
    __asm { BR              X9 }
  v3 = 0;
  v37 = a1[5];
  v39 = -v2;
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v36 = *(_QWORD *)(*a1 + 16);
  while (1)
  {
    v40 = v3;
    if (v3 > 0x40)
      break;
    v7 = 0x8000000000000000;
    if (v3 != 64)
      v7 = 1 << v3;
    if ((v37 & v7) != 0)
LABEL_11:
      __asm { BR              X9 }
    v8 = a1[6];
    if (v3 == 64)
    {
      if (v8 < 0)
        goto LABEL_14;
LABEL_7:
      v6 = 63;
      goto LABEL_19;
    }
    v6 = v3;
    if ((v8 & (1 << v3)) != 0)
      goto LABEL_14;
LABEL_19:
    if (((a1[7] >> v6) & 1) != 0)
    {
      v12 = v5[2];
      v13 = v34;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_19C4F9004(0, v34[2] + 1, 1, v34);
      v15 = v13[2];
      v14 = v13[3];
      if (v15 >= v14 >> 1)
        v13 = sub_19C4F9004((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
      v13[2] = v15 + 1;
      v13[v15 + 4] = v12;
      v3 = v40;
    }
    else
    {
      v13 = v34;
    }
    if (v3 > 0x40 || (v16 = v3, v3 == 64))
      v16 = 63;
    if (((a1[3] >> v16) & 1) == 0)
      __asm { BR              X9 }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = sub_19C4F9004(0, v5[2] + 1, 1, v5);
    v18 = v5[2];
    v17 = v5[3];
    if (v18 >= v17 >> 1)
      v5 = sub_19C4F9004((_QWORD *)(v17 > 1), v18 + 1, 1, v5);
    v5[2] = v18 + 1;
    v5[v18 + 4] = 0;
    if (v40 > 0x40 || (v19 = v40, v40 == 64))
      v19 = 63;
    v34 = v13;
    if (((a1[4] >> v19) & 1) != 0)
      __asm { BR              X9 }
    v20 = a1[1];
    if (v40 >= *(_QWORD *)(v20 + 16))
    {
      __break(1u);
      JUMPOUT(0x19C514284);
    }
    v21 = v5[v18 + 4];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
    {
      __break(1u);
      JUMPOUT(0x19C51428CLL);
    }
    v24 = *(_QWORD *)(v20 + 8 * v40 + 32);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    v26 = v42;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v26 = sub_19C4F9004(0, v42[2] + 1, 1, v42);
    v28 = v26[2];
    v27 = v26[3];
    if (v28 >= v27 >> 1)
      v26 = sub_19C4F9004((_QWORD *)(v27 > 1), v28 + 1, 1, v26);
    v26[2] = v28 + 1;
    v26[v28 + 4] = v25;
    v42 = v26;
    v29 = a1[2];
    if (v40 >= *(_QWORD *)(v29 + 16))
    {
      __break(1u);
      JUMPOUT(0x19C514268);
    }
    v30 = *(_QWORD *)(v29 + 8 * v40 + 32);
    v31 = v41;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v31 = sub_19C4F9004(0, v41[2] + 1, 1, v41);
    v33 = v31[2];
    v32 = v31[3];
    if (v33 >= v32 >> 1)
      v31 = sub_19C4F9004((_QWORD *)(v32 > 1), v33 + 1, 1, v31);
    v31[2] = v33 + 1;
    v31[v33 + 4] = v30;
    v41 = v31;
LABEL_3:
    v3 = v40 + 1;
    ++v39;
    if (v40 + 1 == v36)
      goto LABEL_58;
  }
  if (v37 < 0)
    goto LABEL_11;
  if ((a1[6] & 0x8000000000000000) != 0)
  {
LABEL_14:
    v9 = v5[2];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = sub_19C4F9004(0, v4[2] + 1, 1, v4);
    v11 = v4[2];
    v10 = v4[3];
    if (v11 >= v10 >> 1)
      v4 = sub_19C4F9004((_QWORD *)(v10 > 1), v11 + 1, 1, v4);
    v4[2] = v11 + 1;
    v4[v11 + 4] = v9;
    goto LABEL_3;
  }
  goto LABEL_7;
}

uint64_t sub_19C5143A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_19C5143F0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423928);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19C514430(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  return ((uint64_t (*)(void))((char *)sub_19C51444C + 4 * byte_19CAEA330[a4]))();
}

BOOL sub_19C51444C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  return !a8 && a1 == a5;
}

uint64_t sub_19C514554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v2 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    sub_19C556FD0(0, v4, 0);
    v6 = v20;
    v19 = v2;
    v7 = (uint64_t *)(v2 + 32);
    v8 = *(_QWORD *)(v20 + 16);
    v9 = v4;
    do
    {
      v11 = *v7;
      v7 += 3;
      v10 = v11;
      v12 = *(_QWORD *)(v20 + 24);
      if (v8 >= v12 >> 1)
        sub_19C556FD0(v12 > 1, v8 + 1, 1);
      *(_QWORD *)(v20 + 16) = v8 + 1;
      *(_QWORD *)(v20 + 8 * v8++ + 32) = v10;
      --v9;
    }
    while (v9);
    sub_19C556FD0(0, v4, 0);
    v13 = *(_QWORD *)(v5 + 16);
    v2 = v19;
    v14 = (uint64_t *)(v19 + 40);
    do
    {
      v16 = *v14;
      v14 += 3;
      v15 = v16;
      v17 = *(_QWORD *)(v5 + 24);
      if (v13 >= v17 >> 1)
        sub_19C556FD0(v17 > 1, v13 + 1, 1);
      *(_QWORD *)(v5 + 16) = v13 + 1;
      *(_QWORD *)(v5 + 8 * v13++ + 32) = v15;
      --v4;
    }
    while (v4);
  }
  else
  {
    v6 = MEMORY[0x1E0DEE9D8];
  }
  result = sub_19C511624(v2);
  strcpy((char *)a2, "transformation");
  *(_BYTE *)(a2 + 15) = -18;
  *(_QWORD *)(a2 + 16) = 0x6563696C73;
  *(_QWORD *)(a2 + 24) = 0xE500000000000000;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = result;
  return result;
}

uint64_t sub_19C5146FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    goto LABEL_121;
  v4 = (_BYTE *)(a1 + 56);
  v5 = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)(a1 + 16);
  do
  {
    if (*v4 == 6 && !(*((_QWORD *)v4 - 2) | *((_QWORD *)v4 - 1) | *((_QWORD *)v4 - 3)))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_19C557164(0, *(_QWORD *)(v5 + 16) + 1, 1);
      v8 = *(_QWORD *)(v5 + 16);
      v7 = *(_QWORD *)(v5 + 24);
      if (v8 >= v7 >> 1)
        sub_19C557164(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v5 + 16) = v8 + 1;
      v9 = v5 + 32 * v8;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_BYTE *)(v9 + 56) = 6;
    }
    v4 += 32;
    --v6;
  }
  while (v6);
  v10 = *(_QWORD *)(v5 + 16);
  swift_release();
  if (v10 >= 2)
    goto LABEL_121;
  v11 = (_QWORD *)sub_19C500C0C(0, v2);
  v12 = (_QWORD *)sub_19C500C0C(0, v2);
  result = sub_19C500C0C(1uLL, v2);
  v14 = (_QWORD *)result;
  v43 = 0;
  v44 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v15 = 0;
  v16 = (_BYTE *)(a1 + 56);
  while (2)
  {
    v29 = *((_QWORD *)v16 - 3);
    v30 = *((_QWORD *)v16 - 2);
    v31 = *((_QWORD *)v16 - 1);
    switch(*v16)
    {
      case 0:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = sub_19C503550(v11);
        if (v15 >= v11[2])
          goto LABEL_107;
        v11[v15 + 4] = v29;
        v32 = __OFADD__(v29, 1);
        v33 = v29 + 1;
        if (v32)
          goto LABEL_111;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_19C503550(v12);
          v12 = (_QWORD *)result;
        }
        if (v15 >= v12[2])
          goto LABEL_115;
        v12[v15 + 4] = v33;
        v34 = 1 << v15;
        if (v15 >= 0x40)
          v34 = 0;
        v43 |= v34;
        goto LABEL_33;
      case 1:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = sub_19C503550(v11);
        if (v15 >= v11[2])
          goto LABEL_109;
        v11[v15 + 4] = v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = sub_19C503550(v12);
        if (v15 >= v12[2])
          goto LABEL_113;
        v12[v15 + 4] = v30;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_19C503550(v14);
          v14 = (_QWORD *)result;
        }
        if (v15 >= v14[2])
          goto LABEL_117;
        goto LABEL_101;
      case 2:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = sub_19C503550(v11);
        if (v15 >= v11[2])
          goto LABEL_104;
        v11[v15 + 4] = v29;
        if (v30 == -1)
        {
          v38 = 1 << v15;
          if (v15 >= 0x40)
            v38 = 0;
          v44 |= v38;
        }
        else
        {
          if (__OFADD__(v30, 1))
            goto LABEL_119;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v12 = sub_19C503550(v12);
          if (v15 >= v12[2])
            goto LABEL_120;
          v12[v15 + 4] = v30 + 1;
        }
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_19C503550(v14);
          v14 = (_QWORD *)result;
        }
        if (v15 >= v14[2])
          goto LABEL_118;
LABEL_101:
        v14[v15 + 4] = v31;
        goto LABEL_33;
      case 3:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = sub_19C503550(v11);
        if (v15 >= v11[2])
          goto LABEL_105;
        v11[v15 + 4] = v29;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_19C503550(v14);
          v14 = (_QWORD *)result;
        }
        if (v15 >= v14[2])
          goto LABEL_112;
        v14[v15 + 4] = v30;
LABEL_72:
        v35 = 1 << v15;
        if (v15 >= 0x40)
          v35 = 0;
        v44 |= v35;
        goto LABEL_33;
      case 4:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = sub_19C503550(v12);
        if (v15 >= v12[2])
        {
          __break(1u);
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          sub_19CAAA0B8();
          __break(1u);
          JUMPOUT(0x19C514D6CLL);
        }
        v12[v15 + 4] = v29;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_19C503550(v14);
          v14 = (_QWORD *)result;
        }
        if (v15 >= v14[2])
          goto LABEL_110;
LABEL_92:
        v14[v15 + 4] = v30;
        v37 = 1 << v15;
        if (v15 >= 0x40)
          v37 = 0;
        v42 |= v37;
LABEL_33:
        ++v15;
        v16 += 32;
        if (v2 != v15)
          continue;
        *a2 = v11;
        a2[1] = v12;
        a2[2] = v14;
        a2[3] = v42;
        a2[4] = v44;
        a2[5] = v40;
        a2[6] = v41;
        a2[7] = v43;
        return result;
      case 5:
        v32 = __OFADD__(v29, 1);
        v36 = v29 + 1;
        if (v32)
          goto LABEL_106;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = sub_19C503550(v12);
        if (v15 >= v12[2])
          goto LABEL_114;
        v12[v15 + 4] = v36;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_19C503550(v14);
          v14 = (_QWORD *)result;
        }
        if (v15 < v14[2])
          goto LABEL_92;
        goto LABEL_116;
      case 6:
        v17 = v31 | v30 | v29;
        v18 = 1 << v15;
        if (v15 >= 0x40)
          v18 = 0;
        v20 = v40;
        v19 = v41;
        v21 = v18 | v40;
        v22 = 1 << v15;
        if (v15 >= 0x40)
          v22 = 0;
        v23 = v22 | v41;
        v24 = 1 << v15;
        if (v15 >= 0x40)
          v24 = 0;
        v25 = v43;
        v26 = v24 | v43;
        v27 = v29 == 1 && (v31 | v30) == 0;
        if (v27)
          v28 = v43;
        else
          v28 = v26;
        if (!v27)
          v23 = v41;
        if (v17)
          v25 = v28;
        v43 = v25;
        if (v17)
          v19 = v23;
        else
          v20 = v21;
        v40 = v20;
        v41 = v19;
        goto LABEL_33;
      default:
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_19C503550(v11);
          v11 = (_QWORD *)result;
        }
        if (v15 >= v11[2])
          goto LABEL_108;
        v11[v15 + 4] = 0;
        goto LABEL_72;
    }
  }
}

uint64_t sub_19C514D88(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _MLTensorRange()
{
  return &type metadata for _MLTensorRange;
}

uint64_t dispatch thunk of MLTensorRangeExpression._mlTensorRange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t _s9IndexPathVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s9IndexPathVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s9IndexPathVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s9IndexPathVwta(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t _s9IndexPathVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s9IndexPathVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLTensor.IndexPath()
{
  return &type metadata for MLTensor.IndexPath;
}

uint64_t _s6CoreML14_MLTensorRangeV4KindOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s6CoreML14_MLTensorRangeV4KindOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 250;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_19C5150CC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 5u)
    return *(unsigned __int8 *)(a1 + 24);
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t sub_19C5150E4(uint64_t result, unsigned int a2)
{
  uint64_t v2;

  v2 = a2 - 6;
  if (a2 >= 6)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    LOBYTE(a2) = 6;
    *(_QWORD *)result = v2;
  }
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _MLTensorRange.Kind()
{
  return &type metadata for _MLTensorRange.Kind;
}

uint64_t sub_19C515110(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void MLTensor.sum(keepRank:)()
{
  sub_19C5165C8();
}

void MLTensor.sum(alongAxes:keepRank:)()
{
  __asm { BR              X9 }
}

{
  MLTensor.sum(alongAxes:keepRank:)();
}

void sub_19C5151C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9[36];

  v4 = swift_bridgeObjectRetain();
  v5 = sub_19C55C6F4(v4, v1, 1);
  swift_bridgeObjectRelease();
  if (v5)
  {
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v6 = *(void **)(v3 - 160);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = v0;
    swift_retain();
    sub_19C522A50(inited, v9);
    swift_bridgeObjectRelease();
    sub_19C4F382C(v6);
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v8 + 32) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D0);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_19CAE8180;
    __asm { BR              X9 }
  }
  __asm { BR              X10 }
}

void sub_19C5154D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *(_QWORD *)(*(_QWORD *)((v32 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  *(_QWORD *)(v34 - 160) = v33;
  *(_QWORD *)(v34 - 152) = v35;
  *(_BYTE *)(v34 - 96) = 7;
  sub_19C4D893C(v34 - 160, (uint64_t)&a32);
  swift_bridgeObjectRetain();
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C5155D0);
}

void sub_19C5154F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *(_QWORD *)(*(_QWORD *)(v32 + 24) + 16);
  *(_QWORD *)(v33 - 160) = a12;
  *(_QWORD *)(v33 - 152) = v34;
  *(_BYTE *)(v33 - 96) = 7;
  sub_19C4D893C(v33 - 160, (uint64_t)&a32);
  swift_bridgeObjectRetain();
  sub_19C4D783C();
  JUMPOUT(0x19C5155A4);
}

void sub_19C515500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = *(_QWORD *)(*(_QWORD *)(v32 + 40) + 16);
  *(_QWORD *)(v34 - 160) = v33;
  *(_QWORD *)(v34 - 152) = v35;
  *(_BYTE *)(v34 - 96) = 7;
  sub_19C4D893C(v34 - 160, &a32);
  v36 = swift_bridgeObjectRetain(v33);
  sub_19C4D783C(v36);
  JUMPOUT(0x19C5155A4);
}

void sub_19C515508()
{
  JUMPOUT(0x19C515510);
}

void sub_19C515554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = *(_QWORD *)(*(_QWORD *)(v32 + 40) + 16);
  *(_QWORD *)(v33 - 160) = a12;
  *(_QWORD *)(v33 - 152) = v34;
  *(_BYTE *)(v33 - 96) = 7;
  sub_19C4D893C(v33 - 160, &a32);
  v35 = swift_bridgeObjectRetain(a12);
  sub_19C4D783C(v35);
  JUMPOUT(0x19C5155A4);
}

void MLTensor.mean(keepRank:)()
{
  sub_19C5165C8();
}

void MLTensor.mean(alongAxes:keepRank:)()
{
  __asm { BR              X9 }
}

{
  MLTensor.mean(alongAxes:keepRank:)();
}

void sub_19C5156A8()
{
  uint64_t v0;
  uint64_t v2;
  char v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D483C8;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4 >= 9)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X9 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C515B6CLL);
}

void MLTensor.min(keepRank:)()
{
  sub_19C5165C8();
}

void MLTensor.min(alongAxes:keepRank:)()
{
  __asm { BR              X9 }
}

{
  MLTensor.min(alongAxes:keepRank:)();
}

void sub_19C515C54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9[36];

  v4 = swift_bridgeObjectRetain();
  v5 = sub_19C55C6F4(v4, v1, 1);
  swift_bridgeObjectRelease();
  if (v5)
  {
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v6 = *(void **)(v3 - 160);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = v0;
    swift_retain();
    sub_19C522A50(inited, v9);
    swift_bridgeObjectRelease();
    sub_19C4F382C(v6);
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v8 + 32) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D0);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_19CAE8180;
    __asm { BR              X9 }
  }
  __asm { BR              X10 }
}

void sub_19C515F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *(_QWORD *)(*(_QWORD *)((v32 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  *(_QWORD *)(v34 - 160) = v33;
  *(_QWORD *)(v34 - 152) = v35;
  *(_BYTE *)(v34 - 96) = 7;
  sub_19C4D893C(v34 - 160, (uint64_t)&a32);
  swift_bridgeObjectRetain();
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51605CLL);
}

void sub_19C515F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *(_QWORD *)(*(_QWORD *)(v32 + 24) + 16);
  *(_QWORD *)(v33 - 160) = a12;
  *(_QWORD *)(v33 - 152) = v34;
  *(_BYTE *)(v33 - 96) = 7;
  sub_19C4D893C(v33 - 160, (uint64_t)&a32);
  swift_bridgeObjectRetain();
  sub_19C4D783C();
  JUMPOUT(0x19C516030);
}

void sub_19C515F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = *(_QWORD *)(*(_QWORD *)(v32 + 40) + 16);
  *(_QWORD *)(v34 - 160) = v33;
  *(_QWORD *)(v34 - 152) = v35;
  *(_BYTE *)(v34 - 96) = 7;
  sub_19C4D893C(v34 - 160, &a32);
  v36 = swift_bridgeObjectRetain(v33);
  sub_19C4D783C(v36);
  JUMPOUT(0x19C516030);
}

void sub_19C515F94()
{
  JUMPOUT(0x19C515F9CLL);
}

void sub_19C515FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = *(_QWORD *)(*(_QWORD *)(v32 + 40) + 16);
  *(_QWORD *)(v33 - 160) = a12;
  *(_QWORD *)(v33 - 152) = v34;
  *(_BYTE *)(v33 - 96) = 7;
  sub_19C4D893C(v33 - 160, &a32);
  v35 = swift_bridgeObjectRetain(a12);
  sub_19C4D783C(v35);
  JUMPOUT(0x19C516030);
}

void MLTensor.max(keepRank:)()
{
  sub_19C5165C8();
}

void MLTensor.max(alongAxes:keepRank:)()
{
  __asm { BR              X9 }
}

{
  MLTensor.max(alongAxes:keepRank:)();
}

void sub_19C516134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9[36];

  v4 = swift_bridgeObjectRetain();
  v5 = sub_19C55C6F4(v4, v1, 1);
  swift_bridgeObjectRelease();
  if (v5)
  {
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v6 = *(void **)(v3 - 160);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = v0;
    swift_retain();
    sub_19C522A50(inited, v9);
    swift_bridgeObjectRelease();
    sub_19C4F382C(v6);
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v8 + 32) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D0);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_19CAE8180;
    __asm { BR              X9 }
  }
  __asm { BR              X10 }
}

void sub_19C51643C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *(_QWORD *)(*(_QWORD *)((v32 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  *(_QWORD *)(v34 - 160) = v33;
  *(_QWORD *)(v34 - 152) = v35;
  *(_BYTE *)(v34 - 96) = 7;
  sub_19C4D893C(v34 - 160, (uint64_t)&a32);
  swift_bridgeObjectRetain();
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51653CLL);
}

void sub_19C516464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *(_QWORD *)(*(_QWORD *)(v32 + 24) + 16);
  *(_QWORD *)(v33 - 160) = a12;
  *(_QWORD *)(v33 - 152) = v34;
  *(_BYTE *)(v33 - 96) = 7;
  sub_19C4D893C(v33 - 160, (uint64_t)&a32);
  swift_bridgeObjectRetain();
  sub_19C4D783C();
  JUMPOUT(0x19C516510);
}

void sub_19C51646C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = *(_QWORD *)(*(_QWORD *)(v32 + 40) + 16);
  *(_QWORD *)(v34 - 160) = v33;
  *(_QWORD *)(v34 - 152) = v35;
  *(_BYTE *)(v34 - 96) = 7;
  sub_19C4D893C(v34 - 160, &a32);
  v36 = swift_bridgeObjectRetain(v33);
  sub_19C4D783C(v36);
  JUMPOUT(0x19C516510);
}

void sub_19C516474()
{
  JUMPOUT(0x19C51647CLL);
}

void sub_19C5164C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = *(_QWORD *)(*(_QWORD *)(v32 + 40) + 16);
  *(_QWORD *)(v33 - 160) = a12;
  *(_QWORD *)(v33 - 152) = v34;
  *(_BYTE *)(v33 - 96) = 7;
  sub_19C4D893C(v33 - 160, &a32);
  v35 = swift_bridgeObjectRetain(a12);
  sub_19C4D783C(v35);
  JUMPOUT(0x19C516510);
}

void MLTensor.product(keepRank:)()
{
  sub_19C5165C8();
}

void sub_19C5165C8()
{
  __asm { BR              X11 }
}

uint64_t sub_19C516610@<X0>(uint64_t a1@<X8>)
{
  void (*v1)(void);

  sub_19C4D4978(0, *(_QWORD *)(*(_QWORD *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16));
  v1();
  return swift_release();
}

void MLTensor.product(alongAxes:keepRank:)()
{
  __asm { BR              X9 }
}

{
  MLTensor.product(alongAxes:keepRank:)();
}

void sub_19C5166B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9[36];

  v4 = swift_bridgeObjectRetain();
  v5 = sub_19C55C6F4(v4, v1, 1);
  swift_bridgeObjectRelease();
  if (v5)
  {
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v6 = *(void **)(v3 - 160);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = v0;
    swift_retain();
    sub_19C522A50(inited, v9);
    swift_bridgeObjectRelease();
    sub_19C4F382C(v6);
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v8 + 32) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D0);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_19CAE8180;
    __asm { BR              X9 }
  }
  __asm { BR              X10 }
}

void sub_19C5169C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *(_QWORD *)(*(_QWORD *)((v32 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  *(_QWORD *)(v34 - 160) = v33;
  *(_QWORD *)(v34 - 152) = v35;
  *(_BYTE *)(v34 - 96) = 7;
  sub_19C4D893C(v34 - 160, (uint64_t)&a32);
  swift_bridgeObjectRetain();
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C516AC0);
}

void sub_19C5169E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *(_QWORD *)(*(_QWORD *)(v32 + 24) + 16);
  *(_QWORD *)(v33 - 160) = a12;
  *(_QWORD *)(v33 - 152) = v34;
  *(_BYTE *)(v33 - 96) = 7;
  sub_19C4D893C(v33 - 160, (uint64_t)&a32);
  swift_bridgeObjectRetain();
  sub_19C4D783C();
  JUMPOUT(0x19C516A94);
}

void sub_19C5169F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = *(_QWORD *)(*(_QWORD *)(v32 + 40) + 16);
  *(_QWORD *)(v34 - 160) = v33;
  *(_QWORD *)(v34 - 152) = v35;
  *(_BYTE *)(v34 - 96) = 7;
  sub_19C4D893C(v34 - 160, &a32);
  v36 = swift_bridgeObjectRetain(v33);
  sub_19C4D783C(v36);
  JUMPOUT(0x19C516A94);
}

void sub_19C5169F8()
{
  JUMPOUT(0x19C516A00);
}

void sub_19C516A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = *(_QWORD *)(*(_QWORD *)(v32 + 40) + 16);
  *(_QWORD *)(v33 - 160) = a12;
  *(_QWORD *)(v33 - 152) = v34;
  *(_BYTE *)(v33 - 96) = 7;
  sub_19C4D893C(v33 - 160, &a32);
  v35 = swift_bridgeObjectRetain(a12);
  sub_19C4D783C(v35);
  JUMPOUT(0x19C516A94);
}

uint64_t MLTensor.argmax()()
{
  return sub_19C5170F0((uint64_t)&unk_1E3D485D0, (void (*)(_QWORD, _QWORD))MLTensor.argmax(alongAxis:keepRank:));
}

void MLTensor.argmax(alongAxis:keepRank:)()
{
  __asm { BR              X9 }
}

void sub_19C516BA0()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  *(_QWORD *)(v3 - 160) = v1;
  *(_QWORD *)(v3 - 152) = v4;
  *(_BYTE *)(v3 - 96) = 6;
  v5 = v3 - 160;
  if (-v4 <= v1 && v4 > v1)
  {
    sub_19C4F9E38(v5);
    __swift_instantiateConcreteTypeFromMangledName(qword_1EE422D98);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v7 + 32) = (v4 & (v1 >> 63)) + v1;
    __asm { BR              X9 }
  }
  sub_19C4D893C(v5, v3 - 232);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51708CLL);
}

uint64_t MLTensor.argmin()()
{
  return sub_19C5170F0((uint64_t)&unk_1E3D485F8, (void (*)(_QWORD, _QWORD))MLTensor.argmin(alongAxis:keepRank:));
}

uint64_t sub_19C5170F0(uint64_t a1, void (*a2)(_QWORD, _QWORD))
{
  MLTensor.reshaped(to:)();
  a2(0, 0);
  return swift_release();
}

void MLTensor.argmin(alongAxis:keepRank:)()
{
  __asm { BR              X9 }
}

void sub_19C5171A0()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  *(_QWORD *)(v3 - 160) = v1;
  *(_QWORD *)(v3 - 152) = v4;
  *(_BYTE *)(v3 - 96) = 6;
  v5 = v3 - 160;
  if (-v4 <= v1 && v4 > v1)
  {
    sub_19C4F9E38(v5);
    __swift_instantiateConcreteTypeFromMangledName(qword_1EE422D98);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v7 + 32) = (v4 & (v1 >> 63)) + v1;
    __asm { BR              X9 }
  }
  sub_19C4D893C(v5, v3 - 232);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51768CLL);
}

void static MLTensor.- prefix(_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

void sub_19C517720()
{
  uint64_t v0;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  void *v9;

  v3 = *(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D48128;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v6 = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = v0;
    swift_retain();
    sub_19C522A50(inited, (uint64_t *)(v2 - 160));
    swift_bridgeObjectRelease();
    sub_19C4F382C(v6);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 - 160), *(_QWORD *)(v2 - 136));
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v8 + 32) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D0);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_19CAE8180;
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v9);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C5179BCLL);
}

void MLTensor.abs()()
{
  __asm { BR              X9 }
}

void sub_19C517A20()
{
  uint64_t v0;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  void *v9;

  v3 = *(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D48158;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v6 = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = v0;
    swift_retain();
    sub_19C522A50(inited, (uint64_t *)(v2 - 160));
    swift_bridgeObjectRelease();
    sub_19C4F382C(v6);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 - 160), *(_QWORD *)(v2 - 136));
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v8 + 32) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D0);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_19CAE8180;
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v9);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C517CBCLL);
}

void MLTensor.acos()()
{
  __asm { BR              X9 }
}

void sub_19C517D20()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D482A8;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51802CLL);
}

void MLTensor.acosh()()
{
  __asm { BR              X9 }
}

void sub_19C5180A0()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D48480;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C5183ACLL);
}

void MLTensor.asin()()
{
  __asm { BR              X9 }
}

void sub_19C518420()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D482D8;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51872CLL);
}

void MLTensor.asinh()()
{
  __asm { BR              X9 }
}

void sub_19C5187A0()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D484B0;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C518AACLL);
}

void MLTensor.atan()()
{
  __asm { BR              X9 }
}

void sub_19C518B20()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D48308;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C518E2CLL);
}

void MLTensor.atanh()()
{
  __asm { BR              X9 }
}

void sub_19C518EA0()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D484E0;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C5191ACLL);
}

void MLTensor.ceil()()
{
  __asm { BR              X9 }
}

void sub_19C519220()
{
  uint64_t v0;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  void *v9;

  v3 = *(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D48338;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v6 = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = v0;
    swift_retain();
    sub_19C522A50(inited, (uint64_t *)(v2 - 160));
    swift_bridgeObjectRelease();
    sub_19C4F382C(v6);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 - 160), *(_QWORD *)(v2 - 136));
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v8 + 32) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D0);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_19CAE8180;
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v9);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C5194BCLL);
}

void MLTensor.cos()()
{
  __asm { BR              X9 }
}

void sub_19C519520()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D48188;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C519838);
}

void MLTensor.cosh()()
{
  __asm { BR              X9 }
}

void sub_19C5198AC()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D48368;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C519BB8);
}

void MLTensor.exp()()
{
  __asm { BR              X9 }
}

void sub_19C519C2C()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D481B8;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C519F38);
}

void MLTensor.exp2()()
{
  __asm { BR              X9 }
}

void sub_19C519FAC()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D48398;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51A2B8);
}

void MLTensor.floor()()
{
  __asm { BR              X9 }
}

void sub_19C51A32C()
{
  uint64_t v0;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  void *v9;

  v3 = *(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D48510;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v6 = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = v0;
    swift_retain();
    sub_19C522A50(inited, (uint64_t *)(v2 - 160));
    swift_bridgeObjectRelease();
    sub_19C4F382C(v6);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 - 160), *(_QWORD *)(v2 - 136));
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v8 + 32) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D0);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_19CAE8180;
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v9);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51A5C8);
}

void MLTensor.log()()
{
  __asm { BR              X9 }
}

void sub_19C51A62C()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D481E8;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51A944);
}

void MLTensor.reciprocal()()
{
  __asm { BR              X9 }
}

void sub_19C51A9B8()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D47F48;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51ACC4);
}

void MLTensor.round()()
{
  __asm { BR              X9 }
}

void sub_19C51AD38()
{
  uint64_t v0;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  void *v9;

  v3 = *(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D48540;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v6 = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = v0;
    swift_retain();
    sub_19C522A50(inited, (uint64_t *)(v2 - 160));
    swift_bridgeObjectRelease();
    sub_19C4F382C(v6);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 - 160), *(_QWORD *)(v2 - 136));
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v8 + 32) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D0);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_19CAE8180;
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v9);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51AFD4);
}

void MLTensor.rsqrt()()
{
  __asm { BR              X9 }
}

void sub_19C51B038()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D48570;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51B344);
}

void MLTensor.sign()()
{
  __asm { BR              X9 }
}

void sub_19C51B3B8()
{
  uint64_t v0;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  void *v9;

  v3 = *(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D483F0;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v6 = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = v0;
    swift_retain();
    sub_19C522A50(inited, (uint64_t *)(v2 - 160));
    swift_bridgeObjectRelease();
    sub_19C4F382C(v6);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 - 160), *(_QWORD *)(v2 - 136));
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_19CAE8180;
    *(_QWORD *)(v8 + 32) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D0);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_19CAE8180;
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v9);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51B654);
}

void MLTensor.sin()()
{
  __asm { BR              X9 }
}

void sub_19C51B6B8()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D48248;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51B9C4);
}

void MLTensor.sinh()()
{
  __asm { BR              X9 }
}

void sub_19C51BA38()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D48420;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51BD44);
}

void MLTensor.squareRoot()()
{
  __asm { BR              X9 }
}

void sub_19C51BDB8()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D47F78;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51C0C4);
}

void MLTensor.squared()()
{
  __asm { BR              X9 }
}

void sub_19C51C138()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D488B0;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51C444);
}

void MLTensor.tan()()
{
  __asm { BR              X9 }
}

void sub_19C51C4B8()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D48278;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51C7C4);
}

void MLTensor.tanh()()
{
  __asm { BR              X9 }
}

void sub_19C51C838()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D48450;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  v5 = v2 - 160;
  if (v4)
  {
    sub_19C4F9E38(v5);
    __asm { BR              X10 }
  }
  sub_19C4D893C(v5, (uint64_t)&v6);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51CB44);
}

uint64_t destroy for OperationDescriptor(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OperationDescriptor(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for OperationDescriptor(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for OperationDescriptor(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OperationDescriptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OperationDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OperationDescriptor()
{
  return &type metadata for OperationDescriptor;
}

uint64_t sub_19C51CEAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 1;
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 1;
  v6 = *(unsigned __int8 *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = a2 + 32;
  v8 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(v7 + 16);
  if (v10 == *(_QWORD *)(v8 + 16))
  {
    v22 = a1 + 32;
    v11 = (unsigned __int8 *)(a2 + 40);
    v12 = 1;
    while (1)
    {
      v13 = *v11;
      if (v10 && v7 != v8)
      {
        if (*(_QWORD *)(v7 + 32) != *(_QWORD *)(v8 + 32))
          goto LABEL_16;
        v14 = 0;
        v15 = v8 + 40;
        v16 = v10 - 1;
        while (v16 != v14)
        {
          v17 = *(_QWORD *)(v7 + 8 * v14 + 40);
          v18 = *(_QWORD *)(v15 + 8 * v14++);
          if (v17 != v18)
            goto LABEL_16;
        }
      }
      swift_bridgeObjectRelease();
      if (v6 != v13)
        break;
      if (v12 == v2 || v12 == v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      v19 = v12 + 1;
      v20 = 16 * v12;
      v6 = *(unsigned __int8 *)(v22 + v20 + 8);
      v7 = *(_QWORD *)(v22 + v20);
      swift_bridgeObjectRetain();
      v11 = (unsigned __int8 *)(v9 + v20 + 8);
      v8 = *(_QWORD *)(v9 + v20);
      v10 = *(_QWORD *)(v7 + 16);
      v12 = v19;
      if (v10 != *(_QWORD *)(v8 + 16))
        goto LABEL_16;
    }
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_19C51D02C()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  result = sub_19CAA983C();
  v2 = v0[5];
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = v2 + 32;
    do
    {
      v6 = *(_QWORD *)(v5 + 16 * v4);
      sub_19CAAA2A4();
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        v8 = v6 + 32;
        do
        {
          v8 += 8;
          sub_19CAAA2A4();
          --v7;
        }
        while (v7);
      }
      ++v4;
      result = sub_19CAAA2A4();
    }
    while (v4 != v3);
  }
  v9 = v0[6];
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v11 = 0;
    v12 = v9 + 32;
    do
    {
      v13 = *(_QWORD *)(v12 + 16 * v11);
      sub_19CAAA2A4();
      v14 = *(_QWORD *)(v13 + 16);
      if (v14)
      {
        v15 = v13 + 32;
        do
        {
          v15 += 8;
          sub_19CAAA2A4();
          --v14;
        }
        while (v14);
      }
      ++v11;
      result = sub_19CAAA2A4();
    }
    while (v11 != v10);
  }
  return result;
}

uint64_t sub_19C51D168()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_19CAAA298();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  sub_19CAA983C();
  v1 = v0[5];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = v1 + 32;
    do
    {
      v5 = *(_QWORD *)(v4 + 16 * v3);
      sub_19CAAA2A4();
      v6 = *(_QWORD *)(v5 + 16);
      if (v6)
      {
        v7 = v5 + 32;
        do
        {
          v7 += 8;
          sub_19CAAA2A4();
          --v6;
        }
        while (v6);
      }
      ++v3;
      sub_19CAAA2A4();
    }
    while (v3 != v2);
  }
  v8 = v0[6];
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = 0;
    v11 = v8 + 32;
    do
    {
      v12 = *(_QWORD *)(v11 + 16 * v10);
      sub_19CAAA2A4();
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        v14 = v12 + 32;
        do
        {
          v14 += 8;
          sub_19CAAA2A4();
          --v13;
        }
        while (v13);
      }
      ++v10;
      sub_19CAAA2A4();
    }
    while (v10 != v9);
  }
  return sub_19CAAA2C8();
}

uint64_t sub_19C51D2BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_19CAAA298();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  sub_19CAA983C();
  v1 = v0[5];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = v1 + 32;
    do
    {
      v5 = *(_QWORD *)(v4 + 16 * v3);
      sub_19CAAA2A4();
      v6 = *(_QWORD *)(v5 + 16);
      if (v6)
      {
        v7 = v5 + 32;
        do
        {
          v7 += 8;
          sub_19CAAA2A4();
          --v6;
        }
        while (v6);
      }
      ++v3;
      sub_19CAAA2A4();
    }
    while (v3 != v2);
  }
  v8 = v0[6];
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = 0;
    v11 = v8 + 32;
    do
    {
      v12 = *(_QWORD *)(v11 + 16 * v10);
      sub_19CAAA2A4();
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        v14 = v12 + 32;
        do
        {
          v14 += 8;
          sub_19CAAA2A4();
          --v13;
        }
        while (v13);
      }
      ++v10;
      sub_19CAAA2A4();
    }
    while (v10 != v9);
  }
  return sub_19CAAA2C8();
}

unint64_t sub_19C51D40C()
{
  unint64_t result;

  result = qword_1EE423938;
  if (!qword_1EE423938)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAEA494, &type metadata for OperationDescriptor);
    atomic_store(result, (unint64_t *)&qword_1EE423938);
  }
  return result;
}

uint64_t sub_19C51D450(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v2 = a1[5];
  v3 = a2[5];
  if (*(_QWORD *)(v2 + 16) != *(_QWORD *)(v3 + 16))
    goto LABEL_6;
  v5 = a1[6];
  v6 = a2[6];
  if (*(_QWORD *)(v5 + 16) != *(_QWORD *)(v6 + 16))
    goto LABEL_6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v7 = sub_19CAA9848();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  if (v7 != sub_19CAA9848())
    goto LABEL_6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = sub_19C51CEAC(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = sub_19C51CEAC(v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_6:
    v9 = 0;
  }
  return v9 & 1;
}

uint64_t MLTensor.init<A>(randomNormal:mean:standardDeviation:seed:scalarType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  time_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t result;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  time_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40[3];
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char v44;
  uint64_t v45;
  time_t v46;
  __int16 v47;
  uint64_t v48;
  unint64_t v49;

  v14 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v18 & 1) != 0 && (v15 = time(0), v15 < 0))
  {
    result = sub_19CAAA0AC();
    __break(1u);
  }
  else
  {
    v33 = a4;
    v34 = v15;
    v35 = a6;
    v36 = a1;
    v19 = a3;
    v37 = a7;
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v20 = v43;
    sub_19C522A50(MEMORY[0x1E0DEE9D8], v40);
    sub_19C4F382C(v20);
    v21 = v41;
    v22 = v42;
    v30[1] = __swift_project_boxed_opaque_existential_1(v40, v41);
    v32 = v14;
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v23(v17, a2, a5);
    sub_19C51E968();
    v31 = a2;
    sub_19CAA97DC();
    v24 = v39;
    v23(v17, a3, a5);
    sub_19CAA97DC();
    v25 = v38;
    v26 = sub_19C59E650(v33, 0);
    v43 = (void *)(v24 | (v25 << 32));
    v44 = 0;
    v45 = v36;
    v46 = v34;
    v47 = v26 & 0x1FF;
    v48 = 0x6D6F646E6172;
    v49 = 0xE600000000000000;
    v27 = (*(uint64_t (**)(void **, uint64_t, uint64_t))(v22 + 16))(&v43, v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v28(v19, a5);
    v28(v31, a5);
    result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v40);
    *v37 = v27;
  }
  return result;
}

uint64_t MLTensor.init<A>(randomUniform:in:seed:scalarType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  time_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  float v21;
  uint64_t v22;
  float v23;
  __int16 v24;
  uint64_t v25;
  uint64_t result;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  time_t v30;
  uint64_t v31;
  uint64_t *v32;
  float v33;
  uint64_t v34[3];
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  time_t v40;
  __int16 v41;
  uint64_t v42;
  unint64_t v43;

  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v16 & 1) == 0 || (v13 = time(0), (v13 & 0x8000000000000000) == 0))
  {
    v28 = a3;
    v29 = a5;
    v30 = v13;
    v31 = a1;
    v32 = a6;
    if (qword_1EE422E80 != -1)
      swift_once();
    sub_19CAAA37C();
    v17 = (void *)v37;
    sub_19C522A50(MEMORY[0x1E0DEE9D8], v34);
    sub_19C4F382C(v17);
    v18 = v35;
    v19 = v36;
    v27 = __swift_project_boxed_opaque_existential_1(v34, v35);
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v20(v15, a2, a4);
    sub_19C51E968();
    sub_19CAA97DC();
    v21 = *(float *)&v37;
    v22 = sub_19CAA9CA4();
    v20(v15, a2 + *(int *)(v22 + 36), a4);
    sub_19CAA97DC();
    v23 = v33;
    if (v21 <= v33)
    {
      v24 = sub_19C59E650(v28, 0);
      v37 = LODWORD(v21) | ((unint64_t)LODWORD(v23) << 32);
      v38 = 1;
      v39 = v31;
      v40 = v30;
      v41 = v24 & 0x1FF;
      v42 = 0x6D6F646E6172;
      v43 = 0xE600000000000000;
      v25 = (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v19 + 16))(&v37, v18, v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(a2, v22);
      result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
      *v32 = v25;
      return result;
    }
    __break(1u);
  }
  result = sub_19CAAA0AC();
  __break(1u);
  return result;
}

uint64_t MLTensor.init<A>(randomUniform:in:seed:scalarType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, time_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, _BYTE *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  void *v48;
  uint64_t v49;
  void (*v50)(_BYTE *, uint64_t, _BYTE *);
  char v51;
  uint64_t v52;
  void (*v53)(_BYTE *, _BYTE *);
  uint64_t v54;
  _BYTE *v55;
  int v56;
  BOOL v57;
  BOOL v58;
  _BYTE *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  _BYTE *v63;
  char v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  int v68;
  _BYTE *v69;
  char v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  char v74;
  _BYTE *v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  __int16 v84;
  uint64_t v85;
  uint64_t result;
  char v87;
  uint64_t v88;
  _BYTE *v89;
  char v90;
  char v91;
  uint64_t v92;
  _BYTE *v93;
  char v94;
  char v95;
  int v96;
  int v97;
  _BYTE *v98;
  int v99;
  _BYTE *v100;
  _BYTE *v101;
  char v102;
  int v103;
  _BYTE v104[12];
  int v105;
  _BYTE *v106;
  _BYTE *v107;
  uint64_t AssociatedTypeWitness;
  _BYTE *v109;
  uint64_t v110;
  _BYTE *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  _BYTE *v119;
  _BYTE *v120;
  _BYTE *v121;
  _BYTE *v122;
  _BYTE *v123;
  uint64_t v124;
  _BYTE *v125;
  time_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129[3];
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  time_t v135;
  __int16 v136;
  uint64_t v137;
  unint64_t v138;

  v116 = a7;
  v115 = a5;
  v126 = a3;
  v127 = a2;
  v110 = *(_QWORD *)(*(_QWORD *)(a8 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v109 = &v104[-v15];
  v124 = *((_QWORD *)a6 - 1);
  v16 = MEMORY[0x1E0C80A78](v14);
  v106 = &v104[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = MEMORY[0x1E0C80A78](v16);
  v123 = &v104[-v19];
  v20 = MEMORY[0x1E0C80A78](v18);
  v122 = &v104[-v21];
  v22 = MEMORY[0x1E0C80A78](v20);
  v125 = &v104[-v23];
  v24 = MEMORY[0x1E0C80A78](v22);
  v107 = &v104[-v25];
  v26 = MEMORY[0x1E0C80A78](v24);
  v111 = &v104[-v27];
  v28 = MEMORY[0x1E0C80A78](v26);
  v119 = &v104[-v29];
  v30 = MEMORY[0x1E0C80A78](v28);
  v121 = &v104[-v31];
  v32 = MEMORY[0x1E0C80A78](v30);
  v34 = &v104[-v33];
  v35 = MEMORY[0x1E0C80A78](v32);
  v37 = (uint64_t)&v104[-v36];
  v38 = MEMORY[0x1E0C80A78](v35);
  v120 = &v104[-v39];
  v40 = MEMORY[0x1E0C80A78](v38);
  v42 = (unint64_t)&v104[-v41];
  v43 = MEMORY[0x1E0C80A78](v40);
  v45 = &v104[-v44];
  MEMORY[0x1E0C80A78](v43);
  v47 = &v104[-v46];
  if ((a4 & 1) != 0)
  {
    v126 = time(0);
    if (v126 < 0)
      goto LABEL_77;
  }
  v117 = a1;
  v118 = a9;
  if (qword_1EE422E80 != -1)
    swift_once();
  sub_19CAAA37C();
  v48 = (void *)v132;
  sub_19C522A50(MEMORY[0x1E0DEE9D8], v129);
  sub_19C4F382C(v48);
  v113 = v131;
  v114 = v130;
  v112 = __swift_project_boxed_opaque_existential_1(v129, v130);
  v49 = v124;
  v50 = *(void (**)(_BYTE *, uint64_t, _BYTE *))(v124 + 16);
  v50(v47, v127, a6);
  v51 = sub_19CAA9EB4();
  v50(v45, (uint64_t)v47, a6);
  if ((v51 & 1) == 0)
  {
    v53 = *(void (**)(_BYTE *, _BYTE *))(v49 + 8);
    v59 = v45;
LABEL_12:
    v53(v59, a6);
    goto LABEL_13;
  }
  v52 = sub_19CAA9EA8();
  v53 = *(void (**)(_BYTE *, _BYTE *))(v49 + 8);
  v53(v45, a6);
  if (v52 <= 32)
  {
LABEL_13:
    v55 = v121;
    goto LABEL_14;
  }
  v50((_BYTE *)v42, (uint64_t)v47, a6);
  LODWORD(v132) = 0x80000000;
  if ((sub_19CAA9EB4() & 1) != 0)
  {
    v54 = sub_19CAA9EA8();
    v55 = v121;
    if (v54 >= 32)
    {
      sub_19C51E9AC();
      sub_19CAA9E90();
      v95 = sub_19CAA9860();
      v53(v120, a6);
      v53((_BYTE *)v42, a6);
      if ((v95 & 1) != 0)
        goto LABEL_61;
    }
    else
    {
      v56 = sub_19CAA9E9C();
      v53((_BYTE *)v42, a6);
      v58 = __OFSUB__((_DWORD)v132, v56);
      v57 = (int)v132 - v56 < 0;
      if ((int)v132 > v56)
        goto LABEL_61;
    }
    goto LABEL_14;
  }
  v87 = sub_19CAA9EB4();
  v88 = sub_19CAA9EA8();
  if ((v87 & 1) == 0)
  {
    if (v88 < 32)
    {
      v96 = sub_19CAA9E9C();
      v53((_BYTE *)v42, a6);
      v58 = __OFSUB__((_DWORD)v132, v96);
      v57 = (int)v132 - v96 < 0;
      v55 = v121;
      if ((int)v132 > v96)
        goto LABEL_61;
      goto LABEL_14;
    }
    v59 = (_BYTE *)v42;
    goto LABEL_12;
  }
  if (v88 <= 32)
    goto LABEL_67;
  sub_19C51E9AC();
  v89 = v120;
  sub_19CAA9E90();
  v90 = sub_19CAA9860();
  v53(v89, a6);
  v53((_BYTE *)v42, a6);
  v55 = v121;
  if ((v90 & 1) != 0)
    goto LABEL_61;
LABEL_14:
  v60 = sub_19CAA9EA8();
  v50((_BYTE *)v37, (uint64_t)v47, a6);
  v42 = (unint64_t)v125;
  if (v60 < 33)
  {
    v67 = sub_19CAA9EA8();
    v53((_BYTE *)v37, a6);
    if (v67 != 32 || (sub_19CAA9EB4() & 1) != 0)
      goto LABEL_27;
  }
  else
  {
    v53((_BYTE *)v37, a6);
  }
  v50(v34, (uint64_t)v47, a6);
  LODWORD(v132) = 0x7FFFFFFF;
  v61 = sub_19CAA9EB4();
  v62 = sub_19CAA9EA8();
  if ((v61 & 1) == 0)
  {
    if (v62 > 31)
      goto LABEL_25;
LABEL_23:
    v68 = sub_19CAA9E9C();
    v53(v34, a6);
    if ((int)v132 < v68)
      goto LABEL_24;
    goto LABEL_27;
  }
  if (v62 <= 32)
    goto LABEL_23;
  sub_19C51E9AC();
  v63 = v120;
  sub_19CAA9E90();
  v64 = sub_19CAA9860();
  v65 = v63;
  v42 = (unint64_t)v125;
  v53(v65, a6);
  v66 = v34;
  while (1)
  {
    v53(v66, a6);
    if ((v64 & 1) == 0)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    v128 = 0x7FFFFFFF;
    v69 = v120;
    (*(void (**)(_BYTE *, _BYTE *, _BYTE *))(v124 + 32))(v120, v34, a6);
    sub_19C51E9AC();
    v34 = v111;
    sub_19CAA9E90();
    v64 = sub_19CAA9860();
    v53(v34, a6);
    v66 = v69;
    v42 = (unint64_t)v125;
  }
LABEL_27:
  v34 = (_BYTE *)sub_19CAA9E9C();
  v53(v47, a6);
  v121 = *(_BYTE **)(*(_QWORD *)(a8 + 32) + 8);
  v47 = (_BYTE *)sub_19CAA98A8();
  v50(v55, v127 + *((int *)v47 + 9), a6);
  v70 = sub_19CAA9EB4();
  v71 = v119;
  v50(v119, (uint64_t)v55, a6);
  if ((v70 & 1) == 0)
  {
    v53(v71, a6);
    v37 = (uint64_t)v122;
    goto LABEL_34;
  }
  v72 = sub_19CAA9EA8();
  v53(v71, a6);
  v37 = (uint64_t)v122;
  if (v72 <= 32)
    goto LABEL_34;
  v50((_BYTE *)v42, (uint64_t)v55, a6);
  LODWORD(v132) = 0x80000000;
  if ((sub_19CAA9EB4() & 1) != 0)
  {
    if (sub_19CAA9EA8() < 32)
      goto LABEL_65;
    sub_19C51E9AC();
    v73 = v120;
    sub_19CAA9E90();
    v74 = sub_19CAA9860();
    v75 = v73;
    v37 = (uint64_t)v122;
    v53(v75, a6);
    v53((_BYTE *)v42, a6);
    if ((v74 & 1) != 0)
      goto LABEL_66;
    goto LABEL_34;
  }
  v91 = sub_19CAA9EB4();
  v92 = sub_19CAA9EA8();
  v58 = __OFSUB__(v92, 32);
  v57 = v92 - 32 < 0;
  if ((v91 & 1) == 0)
  {
    while (v57 != v58)
    {
      v42 = (unint64_t)v125;
LABEL_65:
      v97 = sub_19CAA9E9C();
      v53((_BYTE *)v42, a6);
      if ((int)v132 <= v97)
        goto LABEL_34;
LABEL_66:
      __break(1u);
LABEL_67:
      swift_getAssociatedConformanceWitness();
      sub_19CAAA220();
      v98 = v120;
      sub_19CAAA1D8();
      v105 = sub_19CAA9860();
      v53(v98, a6);
      v80 = v107;
      (*(void (**)(_BYTE *, unint64_t, _BYTE *))(v124 + 32))(v107, v42, a6);
      v55 = v121;
      if ((v105 & 1) != 0)
        goto LABEL_75;
      v105 = v132;
      v99 = sub_19CAA9E9C();
      v53(v80, a6);
      v58 = __OFSUB__(v105, v99);
      v57 = v105 - v99 < 0;
      if (v105 <= v99)
        goto LABEL_14;
LABEL_61:
      __break(1u);
    }
    v53(v125, a6);
LABEL_34:
    v76 = sub_19CAA9EA8();
    v50((_BYTE *)v37, (uint64_t)v55, a6);
    if (v76 < 33)
    {
      v82 = sub_19CAA9EA8();
      v53((_BYTE *)v37, a6);
      if (v82 != 32 || (sub_19CAA9EB4() & 1) != 0)
        goto LABEL_46;
    }
    else
    {
      v53((_BYTE *)v37, a6);
    }
    v50(v123, (uint64_t)v55, a6);
    LODWORD(v132) = 0x7FFFFFFF;
    v77 = sub_19CAA9EB4();
    v78 = sub_19CAA9EA8();
    if ((v77 & 1) != 0)
    {
      if (v78 > 32)
      {
        sub_19C51E9AC();
        v79 = v120;
        v80 = a6;
        sub_19CAA9E90();
        v81 = v123;
        goto LABEL_45;
      }
    }
    else if (v78 > 31)
    {
      v128 = 0x7FFFFFFF;
      v81 = v120;
      (*(void (**)(_BYTE *, _BYTE *, _BYTE *))(v124 + 32))(v120, v123, a6);
      sub_19C51E9AC();
      v79 = v111;
      v80 = a6;
      sub_19CAA9E90();
LABEL_45:
      v37 = sub_19CAA9860();
      v53(v79, a6);
      v53(v81, a6);
      if ((v37 & 1) != 0)
      {
LABEL_74:
        __break(1u);
LABEL_75:
        v53(v80, a6);
        __break(1u);
        goto LABEL_76;
      }
LABEL_46:
      v80 = v55;
      v37 = sub_19CAA9E9C();
      v53(v55, a6);
      if ((int)v37 >= (int)v34)
      {
        v84 = sub_19C59E650(v115, 0);
        v132 = v34 | ((unint64_t)v37 << 32);
        v133 = 2;
        v134 = v117;
        v135 = v126;
        v136 = v84 & 0x1FF;
        v137 = 0x6D6F646E6172;
        v138 = 0xE600000000000000;
        v85 = (*(uint64_t (**)(unint64_t *, uint64_t))(v113 + 16))(&v132, v114);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, _BYTE *))(*((_QWORD *)v47 - 1) + 8))(v127, v47);
        result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v129);
        *v118 = v85;
        return result;
      }
      __break(1u);
      goto LABEL_74;
    }
    v83 = v123;
    sub_19CAA9E9C();
    v53(v83, a6);
    goto LABEL_46;
  }
  if (v92 > 32)
  {
    sub_19C51E9AC();
    v93 = v120;
    sub_19CAA9E90();
    v42 = (unint64_t)v125;
    v94 = sub_19CAA9860();
    v53(v93, a6);
    v53((_BYTE *)v42, a6);
    v37 = (uint64_t)v122;
    if ((v94 & 1) != 0)
      goto LABEL_66;
    goto LABEL_34;
  }
  swift_getAssociatedConformanceWitness();
  sub_19CAAA220();
  v100 = v120;
  sub_19CAAA1D8();
  v101 = v125;
  v102 = sub_19CAA9860();
  v53(v100, a6);
  v37 = (uint64_t)v106;
  (*(void (**)(_BYTE *, _BYTE *, _BYTE *))(v124 + 32))(v106, v101, a6);
  if ((v102 & 1) == 0)
  {
    v42 = v132;
    v103 = sub_19CAA9E9C();
    v53((_BYTE *)v37, a6);
    v37 = (uint64_t)v122;
    if ((int)v42 > v103)
      goto LABEL_66;
    goto LABEL_34;
  }
LABEL_76:
  v53((_BYTE *)v37, a6);
  __break(1u);
LABEL_77:
  result = sub_19CAAA0AC();
  __break(1u);
  return result;
}

unint64_t sub_19C51E968()
{
  unint64_t result;

  result = qword_1EE423940;
  if (!qword_1EE423940)
  {
    result = MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEB190], MEMORY[0x1E0DEB188]);
    atomic_store(result, (unint64_t *)&qword_1EE423940);
  }
  return result;
}

unint64_t sub_19C51E9AC()
{
  unint64_t result;

  result = qword_1EE423948;
  if (!qword_1EE423948)
  {
    result = MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEDC00], MEMORY[0x1E0DEDBC8]);
    atomic_store(result, (unint64_t *)&qword_1EE423948);
  }
  return result;
}

void MLTensor.matmul(_:)()
{
  __asm { BR              X9 }
}

uint64_t sub_19C51EA44()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_19C51EA74 + *((int *)qword_19C51F400 + (v0 >> 62))))();
}

uint64_t sub_19C51EA84@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v22 = *(_QWORD *)(*(_QWORD *)((v18 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  if (a1 == 1)
  {
    if (v22 == 2)
    {
      swift_retain();
      swift_retain();
      MLTensor.expandingShape(at:)();
      v23 = swift_release();
      v17 = *(_QWORD *)(v21 - 160);
    }
    else
    {
      if (v22 != 1)
      {
        swift_retain();
        swift_retain_n();
        MLTensor.expandingShape(at:)();
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(qword_1EE422D98);
        v41 = swift_allocObject();
        *(_OWORD *)(v41 + 16) = xmmword_19CAE8180;
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_19C51ECD8 + *((int *)qword_19C51F420 + v19)))(v41, v33, v34, v35, v36, v37, v38, v39, a2, a3, a4, a5, a6, a7, a8, v41, a10, a11, a12,
                 a13,
                 a14,
                 a15,
                 a16,
                 a17);
      }
      swift_retain();
      swift_retain_n();
      MLTensor.expandingShape(at:)();
      swift_release();
      v17 = *(_QWORD *)(v21 - 160);
      MLTensor.expandingShape(at:)();
      v23 = swift_release_n();
    }
  }
  else if (a1 == 2 && v22 == 1)
  {
    swift_retain();
    swift_retain();
    MLTensor.expandingShape(at:)();
    v23 = swift_release();
  }
  else
  {
    if (v22 == 1)
    {
      swift_retain();
      swift_retain_n();
      MLTensor.expandingShape(at:)();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(qword_1EE422D98);
      v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = xmmword_19CAE8180;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_19C51EBC0 + *((int *)qword_19C51F410 + v20)))(v40, v25, v26, v27, v28, v29, v30, v31, a2, a3, a4, a5, a6, a7, a8, v40, a10, a11, a12,
               a13,
               a14,
               a15,
               a16,
               a17);
    }
    swift_retain();
    v23 = swift_retain();
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C51ED1C + *((int *)qword_19C51F430 + (v17 >> 62))))(v23);
}

uint64_t sub_19C51ED2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v36 = *(_QWORD *)(*(_QWORD *)((v32 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  if (v36 > 8)
  {
    *(_QWORD *)(v35 - 160) = v36;
    *(_OWORD *)(v33 + 8) = xmmword_19CAEA520;
    *(_BYTE *)(v35 - 136) = 3;
    *(_BYTE *)(v35 - 96) = 4;
    sub_19C4D893C(v35 - 160, (uint64_t)&a32);
    sub_19C4D783C();
    sub_19CAAA0B8();
    __break(1u);
    JUMPOUT(0x19C51F3F0);
  }
  return ((uint64_t (*)(void))((char *)&loc_19C51ED64 + *((int *)qword_19C51F440 + (v34 >> 62))))();
}

uint64_t sub_19C51ED74@<X0>(unsigned int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) + 16);
  if ((unint64_t)(v4 - 9) < 0xFFFFFFFFFFFFFFF9)
  {
    *(_QWORD *)(v3 - 160) = v4;
    *(_OWORD *)(v1 + 8) = xmmword_19CAEA510;
    JUMPOUT(0x19C51F298);
  }
  return ((uint64_t (*)(void))((char *)&loc_19C51EDB0 + *((int *)qword_19C51F450 + a1)))();
}

uint64_t sub_19C51EDC0()
{
  unsigned int v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C51EDF4 + *((int *)qword_19C51F460 + v0)))(v1);
}

uint64_t sub_19C51EE04()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(_QWORD *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  swift_bridgeObjectRetain();
  v4 = sub_19C55D954(v0, 0, v3, 0);
  swift_bridgeObjectRelease();
  v5 = swift_bridgeObjectRelease();
  if (v4)
    return ((uint64_t (*)(uint64_t))((char *)&loc_19C51EE64 + *((int *)qword_19C51F470 + v1)))(v5);
  else
    return ((uint64_t (*)(uint64_t))((char *)&loc_19C51F2D4 + *((int *)qword_19C51F490 + v1)))(v5);
}

uint64_t sub_19C51EE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v9;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_19C51EEB0 + *((int *)qword_19C51F480 + v9)))(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_19C51EEC4@<X0>(unsigned int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  unsigned int v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[3];
  uint64_t v31;
  uint64_t v32;

  v26 = v2;
  if (v1)
    v7 = 256;
  else
    v7 = 0;
  v8 = v7 | a1;
  if (*(_BYTE *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x21))
    v9 = 256;
  else
    v9 = 0;
  v10 = sub_19C52481C(v8, v9 | *(unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x20));
  *(_BYTE *)(v6 - 160) = v10;
  v11 = (v10 >> 8) & 1;
  *(_BYTE *)(v6 - 159) = BYTE1(v10) & 1;
  *(_QWORD *)(v6 - 152) = &unk_1E3D48768;
  *(_BYTE *)(v6 - 144) = 1;
  *(_BYTE *)(v6 - 96) = 9;
  if (v10 < 9u)
  {
    sub_19C4D893C(v6 - 160, (uint64_t)v30);
    sub_19C4D783C();
    JUMPOUT(0x19C51F314);
  }
  v12 = v10;
  v25 = v4;
  sub_19C4F9E38(v6 - 160);
  v30[0] = v28;
  sub_19C4F4174();
  v13 = *(_QWORD *)(v6 - 160);
  v30[0] = v5;
  sub_19C4F4174();
  v14 = *(_QWORD *)(v6 - 160);
  if (qword_1EE422E80 != -1)
    swift_once();
  sub_19CAAA37C();
  v15 = *(void **)(v6 - 160);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19CAE8310;
  *(_QWORD *)(inited + 32) = v13;
  *(_QWORD *)(inited + 40) = v14;
  swift_retain();
  swift_retain();
  sub_19C522A50(inited, v30);
  swift_bridgeObjectRelease();
  sub_19C4F382C(v15);
  v17 = v31;
  v18 = v32;
  __swift_project_boxed_opaque_existential_1(v30, v31);
  *(_WORD *)(v6 - 160) = 0;
  *(_QWORD *)(v6 - 152) = 0x676C616E696CLL;
  *(_QWORD *)(v6 - 144) = 0xE600000000000000;
  *(_QWORD *)(v6 - 136) = 0x6C756D74616DLL;
  *(_QWORD *)(v6 - 128) = 0xE600000000000000;
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_19CAE8310;
  *(_QWORD *)(v19 + 32) = v13;
  *(_QWORD *)(v19 + 40) = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4235D0);
  v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_19CAE8180;
  *(_QWORD *)(v20 + 32) = v26;
  *(_BYTE *)(v20 + 40) = v12;
  *(_BYTE *)(v20 + 41) = v11;
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
  swift_retain();
  swift_retain();
  v22 = v21(v6 - 160, v19, v20, v17, v18);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v22 + 16))
  {
    __break(1u);
    JUMPOUT(0x19C51F26CLL);
  }
  v23 = *(_QWORD *)(v22 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v27 + 16))
  {
    MLTensor.squeezingShape(at:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v23 = v29;
  }
  else
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  *v25 = v23;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

void sub_19C51F1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 16);
  swift_release(v16);
  *(_QWORD *)(a16 + 32) = v18 - 2;
  JUMPOUT(0x19C51ED10);
}

void sub_19C51F21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 16);
  swift_release(v17);
  *(_QWORD *)(a16 + 32) = v18 - 1;
  JUMPOUT(0x19C51ED10);
}

uint64_t sub_19C51F2E4()
{
  unsigned int v0;
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C51F360 + *((int *)qword_19C51F4A0 + v0)))(v1);
}

uint64_t sub_19C51F338()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;

  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return ((uint64_t (*)(uint64_t))((char *)&loc_19C51F360 + *((int *)qword_19C51F4A0 + v1)))(v2);
}

void sub_19C51F340()
{
  JUMPOUT(0x19C51F348);
}

void sub_19C51F370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = swift_bridgeObjectRetain();
  *(_QWORD *)(v33 - 160) = v32;
  *(_QWORD *)(v33 - 152) = v34;
  *(_BYTE *)(v33 - 96) = 2;
  sub_19C4D893C(v33 - 160, (uint64_t)&a32);
  sub_19C4D783C();
  JUMPOUT(0x19C51F3E4);
}

void conv2D(_:weight:stride:padding:dilation:groupCount:)(uint64_t a1)
{
  __asm { BR              X9 }
}

void sub_19C51F518()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  uint64_t v5;

  v3 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
  v4 = *(unsigned __int8 *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  *(_BYTE *)(v2 - 160) = v4;
  *(_BYTE *)(v2 - 159) = v3;
  *(_QWORD *)(v2 - 152) = &unk_1E3D47E18;
  *(_BYTE *)(v2 - 144) = 1;
  *(_BYTE *)(v2 - 96) = 9;
  if (v4 >= 9)
  {
    sub_19C4F9E38(v2 - 160);
    __asm { BR              X9 }
  }
  sub_19C4D893C(v2 - 160, (uint64_t)&v5);
  sub_19C4D783C();
  sub_19CAAA0B8();
  __break(1u);
  JUMPOUT(0x19C51FAC0);
}

_QWORD *sub_19C51FB40(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = result[2];
  v2 = result[3] >> 1;
  if (v1 != v2)
  {
    if (v1 < v2)
    {
      v3 = result[6];
      v4 = result[7] >> 1;
      if (v3 == v4)
        goto LABEL_4;
      v6 = result[2];
      while (v3 < v4)
      {
        v7 = *(_QWORD *)(result[1] + 8 * v6);
        v8 = *(_QWORD *)(result[5] + 8 * v3);
        v5 = v8 < v7;
        if (v8 >= v7 || v2 - 1 == v6)
          goto LABEL_5;
        if (v6 + 1 < v1 || v6 + 1 >= v2)
          goto LABEL_17;
        ++v3;
        ++v6;
        if (v4 == v3)
          goto LABEL_5;
      }
      __break(1u);
LABEL_17:
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_4:
  v5 = 1;
LABEL_5:
  sub_19C5214B4((uint64_t)result);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return (_QWORD *)v5;
}

uint64_t sub_19C51FC18(unint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD v41[2];
  int64_t v42;

  v11 = a1;
  v12 = *(_QWORD *)(a3 + 16);
  if (v12)
  {
    v13 = (uint64_t *)(a3 + 32);
    v14 = 1;
    do
    {
      v15 = *v13++;
      v16 = v14 * v15;
      if ((unsigned __int128)(v14 * (__int128)v15) >> 64 != (v14 * v15) >> 63)
      {
        __break(1u);
        goto LABEL_60;
      }
      v14 = v16;
      --v12;
    }
    while (v12);
    v5 = *(_QWORD *)(a1 + 16);
    if (!v5)
      goto LABEL_16;
    goto LABEL_6;
  }
  v16 = 1;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
LABEL_6:
    v12 = a1 + 32;
    v17 = 1;
    v18 = v5;
    while (1)
    {
      v19 = *(_QWORD *)v12;
      v12 += 8;
      v20 = v17 * v19;
      if ((unsigned __int128)(v17 * (__int128)v19) >> 64 != (v17 * v19) >> 63)
        break;
      v17 = v20;
      if (!--v18)
      {
        if (v16 != v20)
          goto LABEL_17;
        goto LABEL_10;
      }
    }
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
LABEL_16:
  if (v16 != 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_10:
  v4 = (_QWORD *)sub_19C500C0C(0, v5);
  if (v16 <= 1)
  {
    swift_bridgeObjectRetain();
    if (v5)
    {
      v6 = (_QWORD *)sub_19CAA9A58();
      v6[2] = v5;
LABEL_19:
      v41[1] = v5;
      v42 = 0;
      v41[0] = v6 + 4;
      sub_19C59373C(v41, &v42, v11);
      v12 = v42;
      if (v5 < v42)
      {
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      v6[2] = v42;
      swift_bridgeObjectRelease();
      v12 = v4[2];
      if (v5 != v12)
      {
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      if (v5 != v6[2])
      {
        __break(1u);
LABEL_23:
        v24 = v35;
        v25 = v36;
        v26 = v34;
        goto LABEL_24;
      }
      goto LABEL_56;
    }
LABEL_18:
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  v6 = (_QWORD *)sub_19C500C0C(1uLL, v5);
  v21 = sub_19C5202D4((_QWORD *)a2, a3, a4);
  v24 = v21;
  v25 = v22;
  v7 = v23;
  v26 = *(_QWORD **)(v22 + 16);
  if (v26)
  {
    v37 = v21 + 32;
    v38 = v22 + 32;
    v39 = v23 + 32;
    v40 = v11 + 32;
    swift_bridgeObjectRetain();
    v11 = 0;
    a2 = 0;
    v35 = v24;
    v36 = v25;
    v34 = v26;
    while (1)
    {
      v12 = *(_QWORD *)(v25 + 16);
      if (a2 >= v12)
        break;
      v12 = *(_QWORD *)(v24 + 16);
      if (a2 >= v12)
        goto LABEL_71;
      v12 = *(_QWORD *)(v38 + 8 * a2);
      if (v12 != 1)
      {
        if (v11 == v5)
        {
LABEL_50:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_52:
          swift_bridgeObjectRelease();
          return 0;
        }
        v27 = *(_QWORD *)(v37 + 8 * a2);
        if (v11 <= v5)
          v28 = v5;
        else
          v28 = v11;
        while (v28 != v11)
        {
          v29 = *(_QWORD *)(v40 + 8 * v11);
          if (!v29)
            goto LABEL_62;
          if (v12 == 0x8000000000000000 && v29 == -1)
            goto LABEL_68;
          v30 = (uint64_t)v12 / v29;
          if ((uint64_t)v12 % v29)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            goto LABEL_52;
          }
          v12 = *(_QWORD *)(v7 + 16);
          if (a2 >= v12)
            goto LABEL_63;
          v31 = *(_QWORD *)(v39 + 8 * a2);
          v32 = v30 * v31;
          v12 = (unsigned __int128)(v30 * (__int128)v31) >> 64;
          if (v12 != v32 >> 63)
            goto LABEL_64;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v6 = sub_19C503550(v6);
          v12 = v6[2];
          if (v11 >= v12)
            goto LABEL_65;
          v12 = (unint64_t)&v6[v11];
          *(_QWORD *)(v12 + 32) = v32;
          if (!v30)
            goto LABEL_66;
          v12 = 0x8000000000000000;
          if (v27 == 0x8000000000000000 && v30 == -1)
            goto LABEL_69;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_19C503550(v4);
          v12 = v4[2];
          if (v11 >= v12)
            goto LABEL_67;
          v4[v11++ + 4] = v27 / v30;
          if (v30 == 1)
            goto LABEL_23;
          v27 %= v30;
          v12 = v30;
          if (v5 == v11)
            goto LABEL_50;
        }
        goto LABEL_61;
      }
LABEL_24:
      if ((_QWORD *)++a2 == v26)
      {
        swift_bridgeObjectRelease();
        goto LABEL_54;
      }
    }
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
LABEL_54:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = v4[2];
  if (v5 != v12)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  v12 = v6[2];
  if (v5 != v12)
  {
LABEL_75:
    __break(1u);
    if (v5 < (uint64_t)v12)
      __break(1u);
    v6[2] = v12;
    result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
LABEL_56:
  swift_bridgeObjectRetain();
  return (uint64_t)v4;
}

uint64_t sub_19C520070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v6 = *(_QWORD *)(a1 + 16);
  sub_19CAAA1FC();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v7 = swift_dynamicCastClass();
  if (!v7)
  {
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x1E0DEE9D8];
  }
  v8 = *(_QWORD *)(v7 + 16);
  swift_release();
  if (v8 == v6 - (v6 != 0))
  {
    v9 = swift_dynamicCastClass();
    if (!v9)
    {
      swift_bridgeObjectRelease();
      v9 = MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v9 = sub_19C4D45C4(a1, a1 + 32, v6 != 0, (2 * v6) | 1);
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x1E0DEE9D8];
  }
  v12 = *(_QWORD *)(v11 + 16);
  swift_release();
  if (v12 == v10 - (v10 != 0))
  {
    v13 = swift_dynamicCastClass();
    if (!v13)
    {
      swift_bridgeObjectRelease();
      v13 = MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = sub_19C4D45C4(a2, a2 + 32, v10 != 0, (2 * v10) | 1);
  }
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a3 + 16);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v15 = swift_dynamicCastClass();
  if (!v15)
  {
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x1E0DEE9D8];
  }
  v16 = *(_QWORD *)(v15 + 16);
  swift_release();
  if (v16 == v14 - (v14 != 0))
  {
    v17 = swift_dynamicCastClass();
    if (!v17)
    {
      swift_bridgeObjectRelease();
      v17 = MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = sub_19C4D45C4(a3, a3 + 32, v14 != 0, (2 * v14) | 1);
  }
  result = swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(v13 + 16);
  if (v19 == *(_QWORD *)(v9 + 16))
  {
    if (v19 == *(_QWORD *)(v17 + 16))
      return v9;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_19C5202D4(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t result;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;

  v7 = a3;
  v8 = a2;
  v9 = a1;
  v10 = *(_QWORD *)(a2 + 16);
  if (!v10)
    goto LABEL_40;
  if (v10 > a3[2])
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    v4 = sub_19C4F9004(0, v4[2] + 1, 1, v4);
    goto LABEL_27;
  }
  if (v10 > a1[2])
    goto LABEL_47;
  v11 = a1 + 4;
  v41 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  v12 = v9 + 4;
  v13 = v7 + 4;
  v14 = v41;
  v15 = 0;
  v5 = 0;
  v16 = 0;
  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v6 = 1;
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v38 = v8;
  v39 = v11;
  v40 = v13;
  do
  {
    v17 = *(_QWORD *)(v8 + 8 * v16 + 32);
    v3 = v13[v16];
    v18 = v12[v16];
    if (!v15)
      goto LABEL_10;
    if ((unsigned __int128)(v17 * (__int128)v3) >> 64 != (v17 * v3) >> 63)
      goto LABEL_45;
    if (v15 != v17 * v3)
    {
      v42 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = sub_19C4F9004(0, v4[2] + 1, 1, v4);
      v21 = v4[2];
      v20 = v4[3];
      if (v21 >= v20 >> 1)
        v4 = sub_19C4F9004((_QWORD *)(v20 > 1), v21 + 1, 1, v4);
      v4[2] = v21 + 1;
      v4[v21 + 4] = v6;
      v22 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v22 = sub_19C4F9004(0, v43[2] + 1, 1, v43);
      v24 = v22[2];
      v23 = v22[3];
      if (v24 >= v23 >> 1)
        v22 = sub_19C4F9004((_QWORD *)(v23 > 1), v24 + 1, 1, v22);
      v22[2] = v24 + 1;
      v22[v24 + 4] = v15;
      v7 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = sub_19C4F9004(0, v42[2] + 1, 1, v42);
      v26 = v7[2];
      v25 = v7[3];
      v13 = v40;
      v14 = v41;
      v12 = v39;
      v43 = v22;
      if (v26 >= v25 >> 1)
      {
        v27 = sub_19C4F9004((_QWORD *)(v25 > 1), v26 + 1, 1, v7);
        v12 = v39;
        v13 = v40;
        v14 = v41;
        v7 = v27;
      }
      v7[2] = v26 + 1;
      v7[v26 + 4] = v5;
      v5 = v18;
      v6 = v17;
      v8 = v38;
    }
    else
    {
LABEL_10:
      if ((unsigned __int128)(v6 * (__int128)v17) >> 64 != (v6 * v17) >> 63)
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      v19 = v5 * v17;
      if ((unsigned __int128)(v5 * (__int128)v17) >> 64 != (v5 * v17) >> 63)
        goto LABEL_43;
      v5 = v19 + v18;
      if (__OFADD__(v19, v18))
        goto LABEL_44;
      v6 *= v17;
    }
    ++v16;
    v15 = v3;
  }
  while (v14 != v16);
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_48;
LABEL_27:
  v29 = v4[2];
  v28 = v4[3];
  v9 = v7;
  if (v29 >= v28 >> 1)
    v4 = sub_19C4F9004((_QWORD *)(v28 > 1), v29 + 1, 1, v4);
  v4[2] = v29 + 1;
  v4[v29 + 4] = v6;
  v30 = v43;
  v31 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v30 = sub_19C4F9004(0, v43[2] + 1, 1, v43);
  v33 = v30[2];
  v32 = v30[3];
  if (v33 >= v32 >> 1)
    v30 = sub_19C4F9004((_QWORD *)(v32 > 1), v33 + 1, 1, v30);
  v30[2] = v33 + 1;
  v30[v33 + 4] = v3;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_19C4F9004(0, v9[2] + 1, 1, v9);
    v9 = (_QWORD *)result;
  }
  v36 = v9[2];
  v35 = v9[3];
  v37 = v36 + 1;
  if (v36 >= v35 >> 1)
  {
    result = (uint64_t)sub_19C4F9004((_QWORD *)(v35 > 1), v36 + 1, 1, v9);
    v9 = (_QWORD *)result;
  }
  v9[2] = v37;
  v9[v36 + 4] = v5;
  if (v31[2] == v37)
  {
    if (v37 == v30[2])
      return (uint64_t)v9;
    __break(1u);
LABEL_40:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (uint64_t)v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_19C520710(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_19C52F38C(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_19C520778(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_19C520778(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  char v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t i;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *__dst;

  v3 = a1[1];
  result = sub_19CAAA184();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v83 = 0;
      v84 = *a1;
      for (i = 1; i != v3; ++i)
      {
        v86 = *(_QWORD *)(v84 + 16 * i + 8);
        v87 = v83;
        do
        {
          v88 = v84 + v87;
          if (v86 >= *(_QWORD *)(v84 + v87 + 8))
            break;
          if (!v84)
            goto LABEL_140;
          v89 = *(_QWORD *)(v88 + 16);
          *(_OWORD *)(v88 + 16) = *(_OWORD *)v88;
          *(_QWORD *)v88 = v89;
          *(_QWORD *)(v88 + 8) = v86;
          v87 -= 16;
        }
        while (v87 != -16);
        v83 += 16;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v6 = result;
  v99 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v12 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_102:
      v90 = v12;
      v101 = v9;
      if (v13 >= 2)
      {
        v91 = *v99;
        do
        {
          v92 = v13 - 2;
          if (v13 < 2)
            goto LABEL_131;
          if (!v91)
            goto LABEL_144;
          v93 = v90;
          v94 = *(_QWORD *)&v90[16 * v92 + 32];
          v95 = *(_QWORD *)&v90[16 * v13 + 24];
          sub_19C520E44((char *)(v91 + 16 * v94), (char *)(v91 + 16 * *(_QWORD *)&v90[16 * v13 + 16]), v91 + 16 * v95, __dst);
          if (v1)
            break;
          if (v95 < v94)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v93 = sub_19C521314((uint64_t)v93);
          if (v92 >= *((_QWORD *)v93 + 2))
            goto LABEL_133;
          v96 = &v93[16 * v92 + 32];
          *(_QWORD *)v96 = v94;
          *((_QWORD *)v96 + 1) = v95;
          v97 = *((_QWORD *)v93 + 2);
          if (v13 > v97)
            goto LABEL_134;
          memmove(&v93[16 * v13 + 16], &v93[16 * v13 + 32], 16 * (v97 - v13));
          v90 = v93;
          *((_QWORD *)v93 + 2) = v97 - 1;
          v13 = v97 - 1;
        }
        while (v97 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v101 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v101 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423950);
    v8 = sub_19CAA9A58();
    *(_QWORD *)(v8 + 16) = v7;
    v101 = v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v100 = *a1 + 40;
  v98 = *a1 - 16;
  v12 = (char *)MEMORY[0x1E0DEE9D8];
  v102 = v6;
  v103 = v3;
  v104 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(_QWORD *)(v11 + 16 * v10 + 8);
      v16 = *(_QWORD *)(v11 + 16 * v14 + 8);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (uint64_t *)(v100 + 16 * v14);
        v18 = v15;
        while (1)
        {
          v20 = *v17;
          v17 += 2;
          v19 = v20;
          if (v15 < v16 == v20 >= v18)
            break;
          ++v10;
          v18 = v19;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14)
          goto LABEL_137;
        if (v14 < v10)
        {
          v21 = (__int128 *)(v98 + 16 * v10);
          v22 = v10;
          v23 = v14;
          v24 = (__int128 *)(v11 + 16 * v14);
          do
          {
            if (v23 != --v22)
            {
              if (!v11)
                goto LABEL_143;
              v25 = *v24;
              *v24 = *v21;
              *v21 = v25;
            }
            ++v23;
            --v21;
            ++v24;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_135;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v26 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_138;
    if (v26 >= v3)
      v26 = v3;
    if (v26 < v14)
      break;
    if (v10 != v26)
    {
      v27 = (_QWORD *)(v11 + 16 * v10);
      do
      {
        v28 = *(_QWORD *)(v11 + 16 * v10 + 8);
        v29 = v14;
        v30 = v27;
        do
        {
          if (v28 >= *(v30 - 1))
            break;
          if (!v11)
            goto LABEL_141;
          v31 = *v30;
          *(_OWORD *)v30 = *((_OWORD *)v30 - 1);
          *(v30 - 1) = v28;
          *(v30 - 2) = v31;
          v30 -= 2;
          ++v29;
        }
        while (v10 != v29);
        ++v10;
        v27 += 2;
      }
      while (v10 != v26);
      v10 = v26;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_19C5210CC(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v33 = *((_QWORD *)v12 + 2);
    v32 = *((_QWORD *)v12 + 3);
    v13 = v33 + 1;
    v11 = v104;
    if (v33 >= v32 >> 1)
    {
      v82 = sub_19C5210CC((char *)(v32 > 1), v33 + 1, 1, v12);
      v11 = v104;
      v12 = v82;
    }
    *((_QWORD *)v12 + 2) = v13;
    v34 = v12 + 32;
    v35 = &v12[16 * v33 + 32];
    *(_QWORD *)v35 = v14;
    *((_QWORD *)v35 + 1) = v10;
    if (v33)
    {
      while (1)
      {
        v36 = v13 - 1;
        if (v13 >= 4)
        {
          v41 = &v34[16 * v13];
          v42 = *((_QWORD *)v41 - 8);
          v43 = *((_QWORD *)v41 - 7);
          v47 = __OFSUB__(v43, v42);
          v44 = v43 - v42;
          if (v47)
            goto LABEL_119;
          v46 = *((_QWORD *)v41 - 6);
          v45 = *((_QWORD *)v41 - 5);
          v47 = __OFSUB__(v45, v46);
          v39 = v45 - v46;
          v40 = v47;
          if (v47)
            goto LABEL_120;
          v48 = v13 - 2;
          v49 = &v34[16 * v13 - 32];
          v51 = *(_QWORD *)v49;
          v50 = *((_QWORD *)v49 + 1);
          v47 = __OFSUB__(v50, v51);
          v52 = v50 - v51;
          if (v47)
            goto LABEL_122;
          v47 = __OFADD__(v39, v52);
          v53 = v39 + v52;
          if (v47)
            goto LABEL_125;
          if (v53 >= v44)
          {
            v71 = &v34[16 * v36];
            v73 = *(_QWORD *)v71;
            v72 = *((_QWORD *)v71 + 1);
            v47 = __OFSUB__(v72, v73);
            v74 = v72 - v73;
            if (v47)
              goto LABEL_129;
            v64 = v39 < v74;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v65 = *((_QWORD *)v12 + 4);
            v66 = *((_QWORD *)v12 + 5);
            v47 = __OFSUB__(v66, v65);
            v58 = v66 - v65;
            v59 = v47;
            goto LABEL_77;
          }
          v38 = *((_QWORD *)v12 + 4);
          v37 = *((_QWORD *)v12 + 5);
          v47 = __OFSUB__(v37, v38);
          v39 = v37 - v38;
          v40 = v47;
        }
        if ((v40 & 1) != 0)
          goto LABEL_121;
        v48 = v13 - 2;
        v54 = &v34[16 * v13 - 32];
        v56 = *(_QWORD *)v54;
        v55 = *((_QWORD *)v54 + 1);
        v57 = __OFSUB__(v55, v56);
        v58 = v55 - v56;
        v59 = v57;
        if (v57)
          goto LABEL_124;
        v60 = &v34[16 * v36];
        v62 = *(_QWORD *)v60;
        v61 = *((_QWORD *)v60 + 1);
        v47 = __OFSUB__(v61, v62);
        v63 = v61 - v62;
        if (v47)
          goto LABEL_127;
        if (__OFADD__(v58, v63))
          goto LABEL_128;
        if (v58 + v63 >= v39)
        {
          v64 = v39 < v63;
LABEL_83:
          if (v64)
            v36 = v48;
          goto LABEL_85;
        }
LABEL_77:
        if ((v59 & 1) != 0)
          goto LABEL_123;
        v67 = &v34[16 * v36];
        v69 = *(_QWORD *)v67;
        v68 = *((_QWORD *)v67 + 1);
        v47 = __OFSUB__(v68, v69);
        v70 = v68 - v69;
        if (v47)
          goto LABEL_126;
        if (v70 < v58)
          goto LABEL_15;
LABEL_85:
        v75 = v36 - 1;
        if (v36 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11)
          goto LABEL_142;
        v76 = v12;
        v77 = &v34[16 * v75];
        v78 = *(_QWORD *)v77;
        v79 = &v34[16 * v36];
        v80 = *((_QWORD *)v79 + 1);
        sub_19C520E44((char *)(v11 + 16 * *(_QWORD *)v77), (char *)(v11 + 16 * *(_QWORD *)v79), v11 + 16 * v80, __dst);
        if (v1)
          goto LABEL_93;
        if (v80 < v78)
          goto LABEL_116;
        if (v36 > *((_QWORD *)v76 + 2))
          goto LABEL_117;
        *(_QWORD *)v77 = v78;
        *(_QWORD *)&v34[16 * v75 + 8] = v80;
        v81 = *((_QWORD *)v76 + 2);
        if (v36 >= v81)
          goto LABEL_118;
        v12 = v76;
        v13 = v81 - 1;
        memmove(&v34[16 * v36], v79 + 16, 16 * (v81 - 1 - v36));
        *((_QWORD *)v76 + 2) = v81 - 1;
        v11 = v104;
        if (v81 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v102;
    v3 = v103;
    if (v10 >= v103)
    {
      v9 = v101;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = sub_19CAAA0AC();
  __break(1u);
  return result;
}

uint64_t sub_19C520E44(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t result;
  char *v23;
  const void *v24;
  char *v25;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v25 = __src;
  v24 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v18 = &v4[16 * v13];
      v23 = v18;
      v25 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v19 = (char *)(a3 - 16);
        do
        {
          v20 = v19 + 16;
          if (*((_QWORD *)v18 - 1) >= *((_QWORD *)v6 - 1))
          {
            v23 = v18 - 16;
            if (v20 < v18 || v19 >= v18 || v20 != v18)
              *(_OWORD *)v19 = *((_OWORD *)v18 - 1);
            v21 = v6;
            v18 -= 16;
            if (v6 <= v7)
              break;
          }
          else
          {
            v21 = v6 - 16;
            if (v20 != v6 || v19 >= v6)
              *(_OWORD *)v19 = *(_OWORD *)v21;
            v25 = v6 - 16;
            if (v21 <= v7)
              break;
          }
          v19 -= 16;
          v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_44:
      sub_19C5211C4((void **)&v25, &v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v23 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      v15 = v4;
      while (1)
      {
        if (*((_QWORD *)v6 + 1) >= *((_QWORD *)v15 + 1))
        {
          v4 = v15 + 16;
          v17 = v15;
          v16 = v6;
          if (v7 == v15)
          {
            v15 += 16;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v15 += 16;
          }
        }
        else
        {
          v16 = v6 + 16;
          v17 = v6;
          if (v7 == v6 && v7 < v16)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v17;
LABEL_22:
        v7 += 16;
        if (v15 < v14)
        {
          v6 = v16;
          if ((unint64_t)v16 < a3)
            continue;
        }
        v24 = v4;
        v25 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = sub_19CAAA118();
  __break(1u);
  return result;
}

char *sub_19C5210CC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EE421948);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_19C5211C4(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_19CAAA118();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_19C52126C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)sub_19CAAA118();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_19C521314(uint64_t a1)
{
  return sub_19C5210CC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_19C521328(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = (_QWORD *)sub_19C5A82A8(a1, a2);
  sub_19C520710((uint64_t *)&v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v11[2];
  if (!v4)
  {
    v8 = 1;
LABEL_10:
    swift_release();
    return v8;
  }
  if (v11[5] != 1)
  {
    v8 = 0;
    goto LABEL_10;
  }
  v5 = v11 + 4;
  v6 = 1;
  while (1)
  {
    v7 = *v5 * v6;
    if ((unsigned __int128)(*v5 * (__int128)v6) >> 64 != v7 >> 63)
      break;
    v8 = --v4 == 0;
    if (v4)
    {
      v9 = v5[3];
      v5 += 2;
      v6 = v7;
      if (v9 == v7)
        continue;
    }
    goto LABEL_10;
  }
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_19C521410(int64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  _QWORD v10[8];

  if ((sub_19C521328(a1, a2) & 1) != 0)
  {
    v3 = sub_19C52799C(1, a2);
    v4 = *(_QWORD *)(a2 + 16);
    v10[0] = v3;
    v10[1] = v5;
    v10[2] = v6;
    v10[3] = v7;
    v10[4] = a2;
    v10[5] = a2 + 32;
    v10[6] = v4 != 0;
    v10[7] = (2 * v4) | 1;
    swift_bridgeObjectRetain_n();
    v8 = sub_19C51FB40(v10);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_19C5214B4(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t sub_19C5214E8()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for ComputeStreams();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = sub_19C53AFEC(MEMORY[0x1E0DEE9D8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423980);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = v0;
  off_1EE423958 = (_UNKNOWN *)result;
  return result;
}

uint64_t sub_19C52154C()
{
  uint64_t result;

  result = sub_19C521568();
  qword_1EE431808 = result;
  return result;
}

uint64_t sub_19C521568()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  id *v3;
  id *v4;
  int v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  id v9;
  unint64_t v10;

  v0 = _s6CoreML15MLComputeDeviceO17allComputeDevicesSayACGvgZ_0();
  v1 = MEMORY[0x1E0DEE9D8];
  v10 = MEMORY[0x1E0DEE9D8];
  v2 = *(_QWORD *)(v0 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = (id *)(v0 + 40);
    v4 = (id *)(v0 + 40);
    do
    {
      v5 = *(unsigned __int8 *)v4;
      v4 += 2;
      if (!v5)
      {
        v6 = *(v3 - 1);
        MEMORY[0x1A1AD4508]();
        if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_19CAA9A40();
        sub_19CAA9A7C();
        sub_19CAA9A10();
      }
      v3 = v4;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    v1 = v10;
  }
  result = swift_bridgeObjectRelease();
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = sub_19CAAA0DC();
    result = swift_bridgeObjectRelease();
    if (!v8)
      goto LABEL_15;
  }
  else
  {
    v8 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v8)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      return v8;
    }
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    v9 = (id)MEMORY[0x1A1AD4A9C](0, v1);
    goto LABEL_14;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v9 = *(id *)(v1 + 32);
LABEL_14:
    v8 = (uint64_t)v9;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

id sub_19C5216D0()
{
  id result;

  result = sub_19C5216EC();
  qword_1EE431810 = (uint64_t)result;
  return result;
}

id sub_19C5216EC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  id *v3;
  id *v4;
  int v5;
  id v6;
  id result;
  void *v8;
  BOOL v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;

  v0 = _s6CoreML15MLComputeDeviceO17allComputeDevicesSayACGvgZ_0();
  v1 = MEMORY[0x1E0DEE9D8];
  v14 = MEMORY[0x1E0DEE9D8];
  v2 = *(_QWORD *)(v0 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = (id *)(v0 + 40);
    v4 = (id *)(v0 + 40);
    do
    {
      v5 = *(unsigned __int8 *)v4;
      v4 += 2;
      if (v5 == 1)
      {
        v6 = *(v3 - 1);
        result = objc_msgSend(v6, sel_metalDevice);
        if (!result)
          goto LABEL_27;
        v8 = result;
        if (qword_1EE422E40 != -1)
          swift_once();
        if (byte_1EE4317CA == 1)
        {
          v9 = MPSSupportsMTLDevice(v8);

          v10 = swift_unknownObjectRelease();
          if (v9)
          {
            MEMORY[0x1A1AD4508](v10);
            if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              sub_19CAA9A40();
            sub_19CAA9A7C();
            sub_19CAA9A10();
          }
          else
          {

          }
        }
        else
        {

          swift_unknownObjectRelease();
        }
      }
      v3 = v4;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    v1 = v14;
  }
  result = (id)swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_18;
LABEL_23:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v13 = sub_19CAAA0DC();
  result = (id)swift_bridgeObjectRelease();
  if (!v13)
    goto LABEL_23;
LABEL_18:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v11 = (id)MEMORY[0x1A1AD4A9C](0, v1);
    goto LABEL_21;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v1 + 32);
LABEL_21:
    v12 = v11;
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_19C52190C(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  _QWORD *v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  BOOL v24;
  id v25;
  uint64_t v26;
  void *v27;
  int v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  char v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_signpost_type_t v37;
  char v38;
  void *v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint8_t *v42;
  os_signpost_id_t v43;
  os_signpost_type_t v44;
  char *v45;
  uint8_t *v46;
  void (*v47)(char *, char *, uint64_t);
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t *v61;
  NSObject *v62;
  char *v63;
  os_signpost_type_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t *v73;
  NSObject *v74;
  char *v75;
  os_signpost_type_t v76;
  char *v77;
  uint64_t v78;
  const char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint8_t *v83;
  os_signpost_id_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint8_t *v88;
  os_signpost_id_t v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  char *v93;
  char *v94;
  uint64_t v95;
  int v96;
  void (*v97)(char *, uint64_t);
  char *v98;
  uint64_t v99;
  char *v100;
  os_unfair_lock_s *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  _UNKNOWN **v112;

  v104 = a2;
  v3 = sub_19CAA9764();
  v99 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x1E0C80A78](v3);
  v93 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v94 = (char *)&v91 - v6;
  v106 = sub_19CAA9740();
  v7 = *(_QWORD *)(v106 - 8);
  v8 = MEMORY[0x1E0C80A78](v106);
  v98 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v100 = (char *)&v91 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v91 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v91 - v15;
  v17 = *a1;
  if (qword_1EE422E68 != -1)
    swift_once();
  v18 = off_1EE423958;
  v19 = (os_unfair_lock_s *)((char *)off_1EE423958 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)off_1EE423958 + 6);
  v20 = v18[2];
  if ((unint64_t)v17 > 1)
  {
    v22 = objc_msgSend(v17, sel_metalDevice);
    if (v22)
    {
      v23 = v22;
      if (qword_1EE422E40 != -1)
        swift_once();
      if (byte_1EE4317CA == 1)
      {
        v24 = MPSSupportsMTLDevice(v23);
        swift_unknownObjectRelease();
        if (v24)
          goto LABEL_17;
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    if (qword_1EE422E70 != -1)
      swift_once();
    v25 = (id)qword_1EE431808;
    sub_19C4F382C(v17);
  }
  else
  {
    if (qword_1EE422E70 != -1)
      swift_once();
    v21 = (id)qword_1EE431808;
  }
LABEL_17:
  v26 = v7;
  v105 = swift_unknownObjectRetain();
  MLComputeDevice.init(device:)((uint64_t)&v110);
  v27 = (void *)v110;
  v28 = BYTE8(v110);
  v103 = v20 + 16;
  swift_beginAccess();
  v29 = *(_QWORD *)(v20 + 16);
  if (*(_QWORD *)(v29 + 16))
  {
    v30 = v27;
    v31 = sub_19C54B840(v27, v28);
    if ((v32 & 1) != 0)
    {
      sub_19C4F0F24(*(_QWORD *)(v29 + 56) + 40 * v31, (uint64_t)&v107);
    }
    else
    {
      v109 = 0;
      v107 = 0u;
      v108 = 0u;
    }

    if (*((_QWORD *)&v108 + 1))
    {
      sub_19C4F0F68(&v107, (uint64_t)&v110);
      swift_endAccess();
      swift_unknownObjectRelease();

      sub_19C4F0F68(&v110, (uint64_t)v104);
LABEL_49:
      os_unfair_lock_unlock(v19);
      return;
    }
  }
  else
  {
    v109 = 0;
    v107 = 0u;
    v108 = 0u;
  }
  v102 = v3;
  v33 = v14;
  sub_19C522A0C((uint64_t)&v107);
  swift_endAccess();
  if (qword_1EE422E60 != -1)
    swift_once();
  v34 = sub_19CAA9758();
  v35 = __swift_project_value_buffer(v34, (uint64_t)qword_1EE4317F0);
  sub_19CAA9734();
  v95 = v35;
  v36 = sub_19CAA974C();
  v37 = sub_19CAA9D64();
  v38 = sub_19CAA9DDC();
  v101 = v19;
  v96 = v28;
  if ((v38 & 1) != 0)
  {
    v39 = v27;
    v40 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    v41 = v106;
    v40(v33, v16, v106);
    v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v42 = 0;
    v43 = sub_19CAA9728();
    v44 = v37;
    v45 = v33;
    _os_signpost_emit_with_name_impl(&dword_19C486000, v36, v44, v43, "Compute stream creation", "", v42, 2u);
    v46 = v42;
    v47 = v40;
    v27 = v39;
    MEMORY[0x1A1AD7790](v46, -1, -1);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v33, v41);
  }
  else
  {

    v47 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    v41 = v106;
    v45 = v33;
  }
  v47(v45, v16, v41);
  sub_19CAA9788();
  swift_allocObject();
  sub_19CAA977C();
  v48 = *(void (**)(char *, uint64_t))(v26 + 8);
  v48(v16, v41);
  objc_opt_self();
  v49 = swift_dynamicCastObjCClass();
  v50 = v102;
  v97 = v48;
  v92 = v47;
  if (v49)
  {
    v51 = (void *)v49;
    v52 = type metadata accessor for MetalComputeStream();
    v53 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423970);
    v54 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423978);
    v55 = swift_allocObject();
    *(_DWORD *)(v55 + 16) = 0;
    *(_QWORD *)(v54 + 16) = v55;
    swift_unknownObjectRetain_n();
    *(_QWORD *)(v54 + 24) = sub_19C53B134(MEMORY[0x1E0DEE9D8]);
    *(_QWORD *)(v53 + 24) = v54;
    v56 = objc_msgSend(v51, sel_metalDevice);
    if (v56)
    {
      v57 = v56;
      type metadata accessor for MetalDevice();
      swift_allocObject();
      v58 = sub_19C533970(v57);
      v19 = v101;
      if (v58)
      {
        v59 = v58;
        swift_unknownObjectRelease();
        *(_QWORD *)(v53 + 16) = v59;
        v111 = v52;
        v112 = &off_1E3D467D8;
        *(_QWORD *)&v110 = v53;
        swift_beginAccess();
        v60 = v27;
        swift_retain();
        sub_19C522504((uint64_t)&v110, v27, v96);
        swift_endAccess();
        v61 = v104;
        v104[3] = v52;
        v61[4] = (uint64_t)&off_1E3D467D8;
        swift_unknownObjectRelease();
        *v61 = v53;
        v62 = sub_19CAA974C();
        v63 = v100;
        sub_19CAA9770();
        v64 = sub_19CAA9D58();
        if ((sub_19CAA9DDC() & 1) == 0)
        {

          v97(v63, v106);
          swift_unknownObjectRelease();

          swift_release();
          goto LABEL_49;
        }
        v104 = (uint64_t *)v60;
        swift_retain();
        v65 = v94;
        sub_19CAA9794();
        swift_release();
        v66 = v99;
        v67 = v102;
        if ((*(unsigned int (**)(char *, uint64_t))(v99 + 88))(v65, v102) == *MEMORY[0x1E0DF2190])
        {
          v68 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v67);
          v68 = "";
        }
        v80 = v63;
        v81 = v63;
        v82 = v106;
        v92(v45, v80, v106);
        v83 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v83 = 0;
        v84 = sub_19CAA9728();
        _os_signpost_emit_with_name_impl(&dword_19C486000, v62, v64, v84, "Compute stream creation", v68, v83, 2u);
        MEMORY[0x1A1AD7790](v83, -1, -1);

        v85 = v81;
        goto LABEL_47;
      }
    }
    else
    {
      __break(1u);
    }
    if (qword_1EE422E38 != -1)
      swift_once();
    if ((byte_1EE4317C9 & 1) != 0)
    {
      *(_QWORD *)&v110 = 0;
      *((_QWORD *)&v110 + 1) = 0xE000000000000000;
      sub_19CAA9F2C();
      sub_19CAA992C();
      LOBYTE(v107) = 1;
      sub_19CAAA064();
LABEL_59:
      sub_19CAA992C();
    }
  }
  else
  {
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
    {
      if (qword_1EE422E70 != -1)
        swift_once();
      v69 = (void *)qword_1EE431808;
      v70 = type metadata accessor for BNNSComputeStream();
      swift_allocObject();
      v71 = sub_19C55ED48(v69);
      v111 = v70;
      v112 = &off_1E3D45F18;
      *(_QWORD *)&v110 = v71;
      swift_beginAccess();
      v72 = v27;
      swift_retain();
      sub_19C522504((uint64_t)&v110, v27, v96);
      swift_endAccess();
      v73 = v104;
      v104[3] = v70;
      v73[4] = (uint64_t)&off_1E3D45F18;
      *v73 = v71;
      v74 = sub_19CAA974C();
      v75 = v98;
      sub_19CAA9770();
      v76 = sub_19CAA9D58();
      if ((sub_19CAA9DDC() & 1) == 0)
      {

        v97(v75, v106);
        swift_unknownObjectRelease();

LABEL_48:
        swift_release();
        v19 = v101;
        goto LABEL_49;
      }
      v104 = (uint64_t *)v72;
      swift_retain();
      v77 = v93;
      sub_19CAA9794();
      swift_release();
      v78 = v99;
      if ((*(unsigned int (**)(char *, uint64_t))(v99 + 88))(v77, v50) == *MEMORY[0x1E0DF2190])
      {
        v79 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v78 + 8))(v77, v50);
        v79 = "";
      }
      v86 = v75;
      v87 = v75;
      v82 = v106;
      v92(v45, v86, v106);
      v88 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v88 = 0;
      v89 = sub_19CAA9728();
      _os_signpost_emit_with_name_impl(&dword_19C486000, v74, v76, v89, "Compute stream creation", v79, v88, 2u);
      MEMORY[0x1A1AD7790](v88, -1, -1);

      v85 = v87;
LABEL_47:
      v90 = v97;
      v97(v85, v82);
      v90(v45, v82);
      swift_unknownObjectRelease();

      goto LABEL_48;
    }
    *(_QWORD *)&v110 = 0;
    *((_QWORD *)&v110 + 1) = 0xE000000000000000;
    sub_19CAA9F2C();
    swift_bridgeObjectRelease();
    sub_19CAA9F44();
    if (qword_1EE422E38 != -1)
      swift_once();
    if ((byte_1EE4317C9 & 1) != 0)
    {
      *(_QWORD *)&v110 = 0;
      *((_QWORD *)&v110 + 1) = 0xE000000000000000;
      sub_19CAA9F2C();
      sub_19CAA992C();
      sub_19CAA992C();
      sub_19CAA992C();
      goto LABEL_59;
    }
  }
  sub_19CAAA0B8();
  __break(1u);
}

void sub_19C522504(uint64_t a1, void *a2, char a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  __int128 v8[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_19C4F0F68((__int128 *)a1, (uint64_t)v8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v7 = *v3;
    *v3 = 0x8000000000000000;
    sub_19C550AE4(v8, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v7;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_19C522A0C(a1);
    sub_19C522844(a2, a3, (uint64_t)v8);
    sub_19C522A0C((uint64_t)v8);
  }

}

uint64_t sub_19C5225B0()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ComputeStreams()
{
  return objc_opt_self();
}

uint64_t initializeBufferWithCopyOfBuffer for MLComputeDevice(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = v3;
  return a1;
}

void destroy for MLComputeDevice(id *a1)
{

}

uint64_t assignWithCopy for MLComputeDevice(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  void *v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v6 = v3;

  return a1;
}

uint64_t assignWithTake for MLComputeDevice(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;

  return a1;
}

ValueMetadata *type metadata accessor for ComputeStreams.ComputeStreamKey()
{
  return &type metadata for ComputeStreams.ComputeStreamKey;
}

uint64_t sub_19C5226B4()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_19CAAA298();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  v2 = v1;
  sub_19CAA9DC4();

  return sub_19CAAA2C8();
}

void sub_19C522728()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  v2 = v1;
  sub_19CAA9DC4();

}

uint64_t sub_19C52278C()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_19CAAA298();
  sub_19CAAA2A4();
  sub_19CAAA2A4();
  v2 = v1;
  sub_19CAA9DC4();

  return sub_19CAAA2C8();
}

unint64_t sub_19C522800()
{
  unint64_t result;

  result = qword_1EE423960;
  if (!qword_1EE423960)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAEA594, &type metadata for ComputeStreams.ComputeStreamKey);
    atomic_store(result, (unint64_t *)&qword_1EE423960);
  }
  return result;
}

double sub_19C522844@<D0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  double result;
  uint64_t v14;
  __int128 v15[2];

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_19C54B840(a1, a2);
  v10 = v9;
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v4;
    v14 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_19C54F00C();
      v12 = v14;
    }

    sub_19C4F0F68((__int128 *)(*(_QWORD *)(v12 + 56) + 40 * v8), (uint64_t)v15);
    sub_19C58AC28(v8, v12);
    *v4 = v12;
    swift_bridgeObjectRelease();
    sub_19C4F0F68(v15, a3);
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

BOOL sub_19C522938(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  int v4;
  id v5;
  id v6;
  char v7;

  v2 = *(void **)a1;
  v3 = *(void **)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 8) == 1)
    {
      if (v4 != 1)
        return 0;
    }
    else if (v4 != 2)
    {
      return 0;
    }
  }
  else if (*(_BYTE *)(a2 + 8))
  {
    return 0;
  }
  sub_19C5229D0();
  v5 = v3;
  v6 = v2;
  v7 = sub_19CAA9DB8();

  return (v7 & 1) != 0;
}

unint64_t sub_19C5229D0()
{
  unint64_t result;

  result = qword_1EE423BB0;
  if (!qword_1EE423BB0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE423BB0);
  }
  return result;
}

uint64_t sub_19C522A0C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423968);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_19C522A50(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  if (qword_1EE422E80 != -1)
    swift_once();
  sub_19CAAA37C();
  v4 = v8;
  type metadata accessor for ComputeStreams();
  if (v8)
  {
    sub_19C52190C(&v8, a2);
    v5 = v4;
  }
  else
  {
    sub_19C522B64(a1, (uint64_t *)&v8);
    v6 = v8;
    v7 = v8;
    sub_19C52190C(&v7, a2);
    sub_19C4F382C(0);
    v5 = v6;
  }
  sub_19C4F382C(v5);
}

uint64_t sub_19C522B14()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(qword_1EE4239A0);
  swift_allocObject();
  result = sub_19CAAA370();
  qword_1EE431818 = result;
  return result;
}

uint64_t sub_19C522B64@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  unint64_t v6;
  uint64_t inited;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  id v11;
  id v12;
  char v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t *v20;
  uint64_t v21;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
  {
LABEL_22:
    *a2 = 1;
    return result;
  }
  v3 = result;
  v20 = a2;
  swift_bridgeObjectRetain();
  v4 = 0;
  while (1)
  {
    v6 = *(_QWORD *)(v3 + 8 * v4 + 32);
    if ((v6 >> 62) - 1 < 2)
      goto LABEL_6;
    if (v6 >> 62 != 3)
      break;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424080);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19CAE8180;
    *(_QWORD *)(inited + 32) = *(_QWORD *)(v6 + 16);
    swift_retain();
    swift_retain_n();
    sub_19C522B64(&v21, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    v8 = v21;
    if (qword_1EE422E78 != -1)
      swift_once();
    v9 = (void *)qword_1EE431810;
    if ((unint64_t)qword_1EE431810 <= 1)
      v10 = 1;
    else
      v10 = qword_1EE431810;
    if (v8)
    {
      if (v8 == 1)
      {
        v11 = (id)qword_1EE431810;
        if ((unint64_t)v9 < 2)
        {
          sub_19C4F382C((id)v10);
          sub_19C4F382C((id)1);
LABEL_30:
          swift_bridgeObjectRelease();
          v17 = (void *)qword_1EE431810;
          if ((unint64_t)qword_1EE431810 <= 1)
            v18 = 1;
          else
            v18 = qword_1EE431810;
          *v20 = v18;
          v19 = v17;
          return swift_release_n();
        }
        v8 = 1;
        goto LABEL_4;
      }
      if (v10 >= 2)
      {
        sub_19C5229D0();
        v12 = v9;
        sub_19C522F30((id)v8);
        sub_19C522F30((id)v10);
        v13 = sub_19CAA9DB8();
        sub_19C4F382C((id)v10);
        sub_19C4F382C((id)v8);
        sub_19C4F382C((id)v10);
        sub_19C4F382C((id)v8);
        if ((v13 & 1) != 0)
          goto LABEL_30;
        goto LABEL_5;
      }
    }
    v5 = (id)qword_1EE431810;
LABEL_4:
    sub_19C4F382C((id)v10);
    sub_19C4F382C((id)v8);
LABEL_5:
    swift_release_n();
LABEL_6:
    if (v2 == ++v4)
    {
      result = swift_bridgeObjectRelease();
      a2 = v20;
      goto LABEL_22;
    }
  }
  swift_retain();
  swift_bridgeObjectRelease();
  if (qword_1EE422E78 != -1)
    swift_once();
  v14 = (void *)qword_1EE431810;
  if ((unint64_t)qword_1EE431810 <= 1)
    v15 = 1;
  else
    v15 = qword_1EE431810;
  *v20 = v15;
  v16 = v14;
  return swift_release();
}

void withMLTensorComputePolicy<A>(_:_:)(void **a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  v1 = *a1;
  if (qword_1EE422E80 != -1)
    swift_once();
  sub_19CAAA37C();
  sub_19C522F30(v1);
  sub_19C522F30(v1);
  sub_19C4F382C(v3);
  MEMORY[0x1E0C80A78](v2);
  sub_19CAAA388();
  sub_19C4F382C(v1);
  sub_19C4F382C(v1);
}

id sub_19C522F30(id result)
{
  if ((unint64_t)result >= 2)
    return result;
  return result;
}

uint64_t sub_19C522F40()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t withMLTensorComputePolicy<A>(_:_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a1;
  v5[5] = a3;
  v5[8] = *a2;
  return swift_task_switch();
}

uint64_t sub_19C522F84()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;

  if (qword_1EE422E80 != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(void **)(v0 + 64);
  v7 = *(_OWORD *)(v0 + 40);
  sub_19CAAA37C();
  v3 = *(void **)(v0 + 16);
  sub_19C522F30(v1);
  sub_19C522F30(v1);
  sub_19C4F382C(v3);
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = v1;
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v4;
  *(_QWORD *)(v4 + 16) = v2;
  *(_OWORD *)(v4 + 24) = v7;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v5;
  *v5 = v0;
  v5[1] = sub_19C5230B0;
  return sub_19CAAA394();
}

uint64_t sub_19C5230B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc();
  sub_19C4F382C(*(id *)(v2 + 24));
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19C52312C()
{
  uint64_t v0;

  sub_19C4F382C(*(id *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19C523160()
{
  uint64_t v0;

  sub_19C4F382C(*(id *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19C523194(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_19C5231F8;
  return v6(a1);
}

uint64_t sub_19C5231F8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_19C523240(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v4 = *(int **)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_19C5231F8;
  v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v6 = (_QWORD *)swift_task_alloc();
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_19C5231F8;
  return v8(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for MLComputePolicy(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 2)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void destroy for MLComputePolicy(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 2)

}

void **assignWithCopy for MLComputePolicy(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  id v7;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 >= 2)
  {
    if ((unint64_t)v4 >= 2)
    {
      *a1 = v4;
      v7 = v4;

      return a1;
    }

    v4 = *a2;
    goto LABEL_6;
  }
  if ((unint64_t)v4 < 2)
  {
LABEL_6:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  v5 = v4;
  return a1;
}

void **assignWithTake for MLComputePolicy(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 >= 2)
  {
    if (v4 >= 2)
    {
      *a1 = (void *)v4;

      return a1;
    }

  }
  *a1 = (void *)v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for MLComputePolicy(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MLComputePolicy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLComputeContext()
{
  return &type metadata for MLComputeContext;
}

uint64_t sub_19C523494(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t)v2 + *(_QWORD *)(v3 + 96);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 88) + 72))(v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRetain();
  v11 = sub_19C523F10(v10, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return v11;
}

uint64_t sub_19C523598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)v3 + 88);
  v8 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v9 = a3;
  v10 = v5;
  v11 = a1;
  v12 = a2;
  swift_beginAccess();
  (*(void (**)(uint64_t (*)(), uint64_t *, uint64_t, uint64_t, uint64_t))(v5 + 160))(sub_19C4EB4F8, &v7, a3, v8, v5);
  return swift_endAccess();
}

uint64_t type metadata accessor for TransposedStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TransposedStorage);
}

uint64_t sub_19C523648()
{
  sub_19C523F00();
  return swift_bridgeObjectRetain();
}

uint64_t sub_19C523660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C523598(a1, a2, a3);
}

uint64_t sub_19C523674(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = sub_19CAAA28C();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_19C5239EC(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_19C52376C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423A28);
  result = sub_19CAA9F14();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = sub_19CAAA28C();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_19C5239EC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_19C52376C();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_19C523B0C();
      goto LABEL_14;
    }
    sub_19C523CA0();
  }
  v8 = *v3;
  result = sub_19CAAA28C();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = sub_19CAAA238();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

void *sub_19C523B0C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423A28);
  v2 = *v0;
  v3 = sub_19CAA9F08();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_19C523CA0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423A28);
  result = sub_19CAA9F14();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = sub_19CAAA28C();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_19C523F00()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
}

uint64_t sub_19C523F10(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t result;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    sub_19C556FD0(0, v3, 0);
    result = v13;
    v6 = (unint64_t *)(a1 + 32);
    v7 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v9 = *v6++;
      v8 = v9;
      if (v9 >= v7)
        break;
      v10 = *(_QWORD *)(a2 + 32 + 8 * v8);
      v14 = result;
      v12 = *(_QWORD *)(result + 16);
      v11 = *(_QWORD *)(result + 24);
      if (v12 >= v11 >> 1)
      {
        sub_19C556FD0(v11 > 1, v12 + 1, 1);
        result = v14;
      }
      *(_QWORD *)(result + 16) = v12 + 1;
      *(_QWORD *)(result + 8 * v12 + 32) = v10;
      if (!--v3)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_19C523FF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_19CAA9BA8();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_19C523674(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_19C524060(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);

  v3 = v2;
  v6 = *(_QWORD *)v2;
  v7 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v11(v10, a1, v7);
  v12 = *(_QWORD *)(v6 + 88);
  v22 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 64);
  v13 = *(_QWORD *)(v22(v7, v12) + 16);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 16);
  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v13 == v14)
  {
    v16 = swift_bridgeObjectRetain();
    v17 = sub_19C523FF0(v16);
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v17 + 16);
    result = swift_bridgeObjectRelease();
    if (v18 == v13)
    {
      v11(&v3[*(_QWORD *)(*(_QWORD *)v3 + 96)], a1, v7);
      *(_QWORD *)&v3[*(_QWORD *)(*(_QWORD *)v3 + 104)] = a2;
      swift_bridgeObjectRetain();
      v19 = v22(v7, v12);
      v20 = sub_19C523F10(a2, v19);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v3[*(_QWORD *)(*(_QWORD *)v3 + 112)] = v20;
      return (uint64_t)v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_19C5241D8(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return sub_19C524060(a1, a2);
}

uint64_t sub_19C524220(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;
  _QWORD v17[11];
  unint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17[9] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17[10] = AssociatedTypeWitness;
  v5 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17[8] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v17[7] = (char *)v17 - v8;
  v17[6] = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v11);
  v12 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v13 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  sub_19CAA9C5C();
  if ((~v18 & 0xF000000000000007) != 0)
  {
    v17[1] = v12;
    v17[2] = v13;
    v17[3] = a2;
    v17[4] = v11;
    v17[5] = v10;
    v16 = (char *)&loc_19C5243E8 + dword_19C5246B4[v18 >> 62];
    v17[0] = v14;
    __asm { BR              X10 }
  }
  return 512;
}

void sub_19C52456C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_19C4F9E6C(v0);
  sub_19CAA9E54();
  if ((v1 & ~*(_QWORD *)(v2 - 88)) != 0)
    JUMPOUT(0x19C52459CLL);
  JUMPOUT(0x19C524518);
}

void sub_19C5245B0()
{
  uint64_t v0;
  unsigned int v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v4 = *(unsigned __int8 *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  if ((v2 & 1) == 0)
  {
    if ((*(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x21) & 1) != 0
      && (v1 - 9 < 3 || (v4 - 9) < 3 || *(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20) && v1))
    {
      goto LABEL_25;
    }
    goto LABEL_17;
  }
  if ((*(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x21) & 1) != 0)
    goto LABEL_17;
  if ((v4 - 9) < 3)
    goto LABEL_4;
  if (v1 - 9 < 3)
LABEL_25:
    JUMPOUT(0x19C524570);
  if (!v1 || !*(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20))
  {
LABEL_17:
    if (qword_1EE422E88 != -1)
      swift_once();
    v5 = *(_QWORD *)(v3 + 2608);
    if (*(_QWORD *)(v5 + 16) <= (unint64_t)v1)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(*(_QWORD *)(v5 + 8 * v1 + 32) + 16) > v4)
    {
      goto LABEL_25;
    }
    __break(1u);
    JUMPOUT(0x19C5246B4);
  }
LABEL_4:
  sub_19C52456C();
}

double sub_19C5246D4()
{
  uint64_t v0;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(qword_1EE423A38);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 12;
  *(_OWORD *)(v0 + 16) = xmmword_19CAEA680;
  *(_QWORD *)(v0 + 32) = &unk_1E3D46F80;
  *(_QWORD *)(v0 + 40) = &unk_1E3D46D18;
  *(_QWORD *)(v0 + 48) = &unk_1E3D46D88;
  *(_QWORD *)(v0 + 56) = &unk_1E3D46DC0;
  *(_QWORD *)(v0 + 64) = &unk_1E3D46DF8;
  *(_QWORD *)(v0 + 72) = &unk_1E3D46E30;
  *(_QWORD *)(v0 + 80) = &unk_1E3D46E68;
  *(_QWORD *)(v0 + 88) = &unk_1E3D46EA0;
  *(_QWORD *)(v0 + 96) = &unk_1E3D46ED8;
  *(_QWORD *)(v0 + 104) = &unk_1E3D46F10;
  *(_QWORD *)(v0 + 112) = &unk_1E3D46F48;
  *(_QWORD *)(v0 + 120) = &unk_1E3D46D50;
  off_1EE423A30 = (_UNKNOWN *)v0;
  return result;
}

uint64_t sub_19C524788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  return sub_19C5A4C64((uint64_t)v10, a3, a4, a2, a5);
}

uint64_t sub_19C52481C(uint64_t result, __int16 a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a2;
  v3 = result;
  if ((result & 0x100) != 0)
  {
    if ((a2 & 0x100) != 0)
      goto LABEL_16;
    if ((a2 - 9) >= 3u)
    {
      if ((result - 9) < 3u)
      {
        v4 = 256;
        return v4 | v3;
      }
      if (!(_BYTE)result || !(_BYTE)a2)
        goto LABEL_16;
    }
    v4 = 0;
    v3 = a2;
    return v4 | v3;
  }
  if ((a2 & 0x100) != 0)
  {
    if ((result - 9) < 3u)
      goto LABEL_4;
    if (a2 - 9 < 3)
    {
      v4 = 256;
      v3 = a2;
      return v4 | v3;
    }
    if ((_BYTE)a2 && (_BYTE)result)
    {
LABEL_4:
      v4 = 0;
      return v4 | v3;
    }
  }
LABEL_16:
  if (qword_1EE422E88 != -1)
    result = swift_once();
  if (*((_QWORD *)off_1EE423A30 + 2) <= (unint64_t)v3)
  {
    __break(1u);
  }
  else
  {
    v5 = *((_QWORD *)off_1EE423A30 + v3 + 4);
    if (*(_QWORD *)(v5 + 16) > (unint64_t)v2)
    {
      v6 = v5 + 2 * v2;
      v3 = *(_BYTE *)(v6 + 32);
      if (*(_BYTE *)(v6 + 33))
        v4 = 256;
      else
        v4 = 0;
      return v4 | v3;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_19C52494C(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    sub_19C556FF4(0, v1, 0);
    v2 = v12;
    v4 = (__int128 *)(a1 + 32);
    do
    {
      v8 = *v4;
      v12 = v2;
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_19C556FF4(v5 > 1, v6 + 1, 1);
        v2 = v12;
      }
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424180);
      v11 = &protocol witness table for <> Range<A>;
      v9 = v8;
      *(_QWORD *)(v2 + 16) = v6 + 1;
      sub_19C4F0F68(&v9, v2 + 40 * v6 + 32);
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_19C524A44(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    sub_19CAA9FE0();
    v4 = a1 + 32;
    do
    {
      v4 += 8;
      sub_19CAA9BB4();
      sub_19CAA9FBC();
      sub_19CAAA004();
      sub_19CAAA010();
      sub_19CAA9FC8();
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

uint64_t MLMultiArray.init<A>(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_19C526AE0(a1, a2, a3);
  (*(void (**)(void *, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v5;
}

id MLMultiArray.init<A>(_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  uint64_t AssociatedConformanceWitness;
  uint64_t v41;
  char *v42;
  int v43;
  int v44;
  char *v46;
  _QWORD *v47;
  char v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char v59;
  uint64_t v60;
  char *v61;
  char v62;
  uint64_t v63;
  char v64;
  int v65;
  char *v66;
  char *v67;
  char v68;
  uint64_t v69;
  int v70;
  int v71;
  BOOL v72;
  id v73;
  uint64_t v75;
  id v76;
  uint64_t v77;
  char *v78;
  uint64_t AssociatedTypeWitness;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  _DWORD *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  char *v97;
  int v98;
  id v99[3];

  v92 = a3;
  v99[1] = *(id *)MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 24) + 16);
  v7 = *(char **)(a3 + 8);
  swift_getAssociatedTypeWitness();
  v80 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v83 = (char *)&v75 - v8;
  v9 = swift_checkMetadataState();
  v94 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v78 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v85 = (char *)&v75 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v97 = (char *)&v75 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v90 = (char *)&v75 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v87 = (char *)&v75 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v86 = (char *)&v75 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v75 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v75 - v25;
  v27 = sub_19CAA9E18();
  v28 = MEMORY[0x1E0C80A78](v27);
  v93 = (char *)&v75 - v29;
  v30 = *((_QWORD *)a2 - 1);
  MEMORY[0x1E0C80A78](v28);
  v82 = (char *)&v75 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = v7;
  v95 = swift_getAssociatedTypeWitness();
  v81 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95);
  v33 = (char *)&v75 - v32;
  v84 = a1;
  v34 = sub_19CAA9C08();
  v96 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424000);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_19CAEA690;
  *(_QWORD *)(v35 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v34);
  v99[0] = (id)v35;
  sub_19CAA9A10();
  sub_19C4E8EF8();
  v36 = (void *)sub_19CAA99EC();
  swift_bridgeObjectRelease();
  v99[0] = 0;
  v37 = objc_msgSend(v96, sel_initWithShape_dataType_error_, v36, 131104, v99);

  v38 = v37;
  if (!v37)
  {
    v73 = v99[0];
    sub_19CAA95C0();

    swift_willThrow();
    (*(void (**)(uint64_t, char *))(v30 + 8))(v84, a2);
    return v38;
  }
  v39 = v99[0];
  v76 = v37;
  v89 = objc_msgSend(objc_retainAutorelease(v37), sel_dataPointer);
  v77 = v30;
  (*(void (**)(char *, uint64_t, char *))(v30 + 16))(v82, v84, a2);
  sub_19CAA9944();
  v82 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v91 = v33;
  v92 = AssociatedConformanceWitness;
  v41 = 0;
  v88 = v24;
  while (1)
  {
    v46 = v93;
    sub_19CAA9E54();
    v47 = (_QWORD *)v94;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v46, 1, v9) == 1)
      break;
    v96 = (id)v47[4];
    ((void (*)(char *, char *, uint64_t))v96)(v26, v46, v9);
    v48 = sub_19CAA9EB4();
    v49 = (void (*)(char *, char *, uint64_t))v47[2];
    v49(v24, v26, v9);
    if ((v48 & 1) == 0)
    {
      v51 = (void (*)(char *, uint64_t))v47[1];
      v51(v24, v9);
      goto LABEL_12;
    }
    v50 = sub_19CAA9EA8();
    v51 = (void (*)(char *, uint64_t))v47[1];
    v51(v24, v9);
    if (v50 <= 32)
      goto LABEL_12;
    v52 = v86;
    v49(v86, v26, v9);
    LODWORD(v99[0]) = 0x80000000;
    if ((sub_19CAA9EB4() & 1) != 0)
    {
      if (sub_19CAA9EA8() >= 32)
      {
        sub_19C51E9AC();
        v53 = v87;
        sub_19CAA9E90();
        goto LABEL_27;
      }
      goto LABEL_32;
    }
    v62 = sub_19CAA9EB4();
    v63 = sub_19CAA9EA8();
    if ((v62 & 1) == 0)
    {
      if (v63 >= 32)
      {
        v51(v86, v9);
        v24 = v88;
        goto LABEL_12;
      }
      v52 = v86;
LABEL_32:
      v65 = sub_19CAA9E9C();
      v51(v52, v9);
      v24 = v88;
      if (SLODWORD(v99[0]) > v65)
        goto LABEL_43;
      goto LABEL_12;
    }
    if (v63 > 32)
    {
      sub_19C51E9AC();
      v53 = v87;
      sub_19CAA9E90();
      v52 = v86;
LABEL_27:
      v64 = sub_19CAA9860();
      v51(v53, v9);
      v51(v52, v9);
      v24 = v88;
      if ((v64 & 1) != 0)
        goto LABEL_43;
      goto LABEL_12;
    }
    swift_getAssociatedConformanceWitness();
    sub_19CAAA220();
    v66 = v87;
    sub_19CAAA1D8();
    v67 = v86;
    v68 = sub_19CAA9860();
    v51(v66, v9);
    v56 = (uint64_t)v78;
    ((void (*)(char *, char *, uint64_t))v96)(v78, v67, v9);
    if ((v68 & 1) != 0)
      goto LABEL_42;
    v69 = v56;
    v70 = (int)v99[0];
    v71 = sub_19CAA9E9C();
    v51((char *)v69, v9);
    v72 = v70 <= v71;
    v24 = v88;
    if (!v72)
      goto LABEL_43;
LABEL_12:
    v54 = sub_19CAA9EA8();
    v55 = v90;
    v49(v90, v26, v9);
    if (v54 < 33)
    {
      v56 = sub_19CAA9EA8();
      v51(v55, v9);
      if (v56 != 32 || (sub_19CAA9EB4() & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      v51(v55, v9);
    }
    v49(v97, v26, v9);
    LODWORD(v99[0]) = 0x7FFFFFFF;
    v56 = sub_19CAA9EB4();
    v57 = sub_19CAA9EA8();
    if ((v56 & 1) != 0)
    {
      if (v57 > 32)
      {
        sub_19C51E9AC();
        v56 = (uint64_t)v87;
        sub_19CAA9E90();
        v58 = v97;
        v59 = sub_19CAA9860();
        v51((char *)v56, v9);
        v60 = (uint64_t)v58;
        goto LABEL_22;
      }
    }
    else if (v57 > 31)
    {
      v98 = 0x7FFFFFFF;
      v56 = (uint64_t)v87;
      ((void (*)(char *, char *, uint64_t))v96)(v87, v97, v9);
      sub_19C51E9AC();
      v61 = v85;
      sub_19CAA9E90();
      v59 = sub_19CAA9860();
      v51(v61, v9);
      v60 = v56;
LABEL_22:
      v51((char *)v60, v9);
      v24 = v88;
      if ((v59 & 1) != 0)
        goto LABEL_41;
      goto LABEL_4;
    }
    v42 = v97;
    v43 = sub_19CAA9E9C();
    v51(v42, v9);
    v24 = v88;
    if (SLODWORD(v99[0]) < v43)
      goto LABEL_41;
LABEL_4:
    v44 = sub_19CAA9E9C();
    v51(v26, v9);
    v89[v41] = v44;
    if (__OFADD__(v41++, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      v51((char *)v56, v9);
LABEL_43:
      __break(1u);
    }
  }
  (*(void (**)(uint64_t, char *))(v77 + 8))(v84, v82);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v91, v95);
  return v76;
}

id MLMultiArray.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  _DWORD *v16;
  uint64_t v17;
  id v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24[2];

  v24[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v21 - v8;
  v23 = a1;
  v10 = sub_19CAA9C08();
  v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424000);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_19CAEA690;
  *(_QWORD *)(v12 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v10);
  v24[0] = (id)v12;
  sub_19CAA9A10();
  sub_19C4E8EF8();
  v13 = (void *)sub_19CAA99EC();
  swift_bridgeObjectRelease();
  v24[0] = 0;
  v14 = objc_msgSend(v11, sel_initWithShape_dataType_error_, v13, 65568, v24);

  if (v14)
  {
    v15 = v24[0];
    v16 = objc_msgSend(objc_retainAutorelease(v14), sel_dataPointer);
    v21 = v4;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v23, a2);
    sub_19CAA9944();
    swift_getAssociatedConformanceWitness();
    v17 = 0;
    while (1)
    {
      sub_19CAA9E54();
      if ((BYTE4(v24[0]) & 1) != 0)
        break;
      v16[v17] = v24[0];
      if (__OFADD__(v17++, 1))
      {
        __break(1u);
        break;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, a2);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v9, AssociatedTypeWitness);
  }
  else
  {
    v19 = v24[0];
    sub_19CAA95C0();

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v23, a2);
  }
  return v14;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  id v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v21 - v8;
  v24 = a1;
  v10 = sub_19CAA9C08();
  v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE424000);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_19CAEA690;
  *(_QWORD *)(v12 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v10);
  v25 = (id)v12;
  sub_19CAA9A10();
  sub_19C4E8EF8();
  v13 = (void *)sub_19CAA99EC();
  swift_bridgeObjectRelease();
  v25 = 0;
  v14 = objc_msgSend(v11, sel_initWithShape_dataType_error_, v13, 65600, &v25);

  if (v14)
  {
    v15 = v25;
    v16 = objc_msgSend(objc_retainAutorelease(v14), sel_dataPointer);
    v22 = v4;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v24, a2);
    sub_19CAA9944();
    swift_getAssociatedConformanceWitness();
    v17 = 0;
    while (1)
    {
      sub_19CAA9E54();
      if ((v26 & 1) != 0)
        break;
      v16[v17] = v25;
      if (__OFADD__(v17++, 1))
      {
        __break(1u);
        break;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, a2);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, AssociatedTypeWitness);
  }
  else
  {
    v19 = v25;
    sub_19CAA95C0();

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v24, a2);
  }
  return v14;
}

MLMultiArray __swiftcall MLMultiArray.init(shape:dataType:strides:)(Swift::OpaquePointer shape, MLMultiArrayDataType dataType, Swift::OpaquePointer strides)
{
  id v5;
  void *v6;
  void *v7;
  objc_class *v8;
  StorageManager *v9;
  NSArray *v10;
  objc_class *v11;
  MLMultiArray result;

  sub_19C524A44((uint64_t)shape._rawValue);
  swift_bridgeObjectRelease();
  sub_19C524A44((uint64_t)strides._rawValue);
  swift_bridgeObjectRelease();
  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_19C4E8EF8();
  v6 = (void *)sub_19CAA99EC();
  swift_bridgeObjectRelease();
  v7 = (void *)sub_19CAA99EC();
  swift_bridgeObjectRelease();
  v8 = (objc_class *)objc_msgSend(v5, sel_initWithShape_dataType_strides_, v6, dataType, v7);

  v11 = v8;
  result._shape = v10;
  result._storageManager.__ptr_.__value_ = v9;
  result.super.isa = v11;
  return result;
}

uint64_t sub_19C525BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v10[7];

  swift_projectBox();
  v10[2] = a4;
  v10[3] = a5;
  v10[4] = a1;
  v10[5] = a2;
  swift_beginAccess();
  (*(void (**)(id (*)(uint64_t, uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t, uint64_t))(a5 + 160))(sub_19C527274, v10, MEMORY[0x1E0DEE9C0] + 8, a4, a5);
  return swift_endAccess();
}

id sub_19C525C64(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  id result;
  void *v8;

  swift_getAssociatedTypeWitness();
  result = (id)sub_19CAA98CC();
  if (result)
  {
    *a4 = result;
    v8 = (void *)sub_19CAA99EC();
    result = v8;
    *a5 = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_19C525CFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = type metadata accessor for MLShapedArray(0, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
  if (!swift_dynamicCast())
    return 0;
  v9 = v11;
  type metadata accessor for CVBuffer(0);
  MLShapedArray.withPixelBufferIfAvailable<A>(_:)((void (*)(void))sub_19C526AB8, v6, v7, (uint64_t)&v10);
  swift_unknownObjectRelease();
  return v10;
}

uint64_t MLMultiArray.withUnsafeBytes<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t result;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];
  id v26;

  v23 = a4;
  v5 = v4;
  v24 = sub_19CAA9E18();
  v9 = *(_QWORD *)(v24 - 8);
  v10 = MEMORY[0x1E0C80A78](v24);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v22 - v13;
  v15 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))((char *)&v22 - v13, 1, 1, a3);
  v26 = 0;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a3;
  v16[3] = v14;
  v16[4] = a1;
  v16[5] = a2;
  v16[6] = &v26;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_19C527058;
  *(_QWORD *)(v17 + 24) = v16;
  aBlock[4] = sub_19C527078;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19C52618C;
  aBlock[3] = &block_descriptor_0;
  v18 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_getBytesWithHandler_, v18);
  _Block_release(v18);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v5 & 1) != 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (v26)
  {
    v20 = v26;
    swift_willThrow();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v24);
    return swift_release();
  }
  v21 = v24;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v24);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, a3);
  if ((_DWORD)result == 1)
    goto LABEL_8;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v23, v12, a3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v21);
  return swift_release();
}

uint64_t sub_19C5260A0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v12 = sub_19CAA9E18();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v17 - v14;
  a4(a1, a1 + a2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 56))(v15, 0, 1, a7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 40))(a3, v15, v12);
}

uint64_t sub_19C52618C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

uint64_t MLMultiArray.withUnsafeMutableBytes<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t result;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];
  id v26;

  v23 = a4;
  v5 = v4;
  v24 = sub_19CAA9E18();
  v9 = *(_QWORD *)(v24 - 8);
  v10 = MEMORY[0x1E0C80A78](v24);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v22 - v13;
  v15 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))((char *)&v22 - v13, 1, 1, a3);
  v26 = 0;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a3;
  v16[3] = v14;
  v16[4] = a1;
  v16[5] = a2;
  v16[6] = &v26;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_19C5270C0;
  *(_QWORD *)(v17 + 24) = v16;
  aBlock[4] = sub_19C527078;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19C526664;
  aBlock[3] = &block_descriptor_12;
  v18 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_getMutableBytesWithHandler_, v18);
  _Block_release(v18);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v5 & 1) != 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (v26)
  {
    v20 = v26;
    swift_willThrow();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v24);
    return swift_release();
  }
  v21 = v24;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v24);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, a3);
  if ((_DWORD)result == 1)
    goto LABEL_8;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v23, v12, a3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v21);
  return swift_release();
}

uint64_t sub_19C52641C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;

  v33 = a1;
  v34 = a5;
  v32 = a2;
  v13 = sub_19CAA9E18();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v35 = (char *)&v26 - v15;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = sub_19CAAA0DC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v17 = MEMORY[0x1E0DEE9D8];
  v31 = v14;
  if (!v16)
  {
LABEL_13:
    v25 = v35;
    v34(v33, v33 + v32, v17);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 56))(v25, 0, 1, a8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 40))(a4, v25, v13);
  }
  v30 = a6;
  v36 = MEMORY[0x1E0DEE9D8];
  result = sub_19C556FD0(0, v16 & ~(v16 >> 63), 0);
  if ((v16 & 0x8000000000000000) == 0)
  {
    v26 = a7;
    v27 = v13;
    v28 = a8;
    v29 = a4;
    v19 = 0;
    v17 = v36;
    do
    {
      if ((a3 & 0xC000000000000001) != 0)
        v20 = (id)MEMORY[0x1A1AD4A9C](v19, a3);
      else
        v20 = *(id *)(a3 + 8 * v19 + 32);
      v21 = v20;
      v22 = objc_msgSend(v20, sel_integerValue, v26);

      v36 = v17;
      v24 = *(_QWORD *)(v17 + 16);
      v23 = *(_QWORD *)(v17 + 24);
      if (v24 >= v23 >> 1)
      {
        sub_19C556FD0(v23 > 1, v24 + 1, 1);
        v17 = v36;
      }
      ++v19;
      *(_QWORD *)(v17 + 16) = v24 + 1;
      *(_QWORD *)(v17 + 8 * v24 + 32) = v22;
    }
    while (v16 != v19);
    a8 = v28;
    a4 = v29;
    v13 = v27;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_19C526644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_19C526664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  sub_19C4E8EF8();
  v6 = sub_19CAA99F8();
  v5(a2, a3, v6);
  return swift_bridgeObjectRelease();
}

id MLMultiArray.withUnsafeBufferPointer<A, B>(ofType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_19C526710(a1, a2, a3, a4, a5, a6, (uint64_t)sub_19C5270E0, (uint64_t (*)(uint64_t))MLMultiArray.withUnsafeBytes<A>(_:));
}

id MLMultiArray.withUnsafeMutableBufferPointer<A, B>(ofType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_19C526710(a1, a2, a3, a4, a5, a6, (uint64_t)sub_19C5270E0, (uint64_t (*)(uint64_t))MLMultiArray.withUnsafeMutableBytes<A>(_:));
}

id sub_19C526710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t))
{
  void *v8;
  uint64_t v9;
  id result;

  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(a4, a6);
  result = objc_msgSend(v8, sel_dataType);
  if ((id)v9 == result)
  {
    MEMORY[0x1E0C80A78](result);
    return (id)a8(a7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL sub_19C5267E8(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_19C5267F8()
{
  return sub_19CAAA2A4();
}

BOOL sub_19C52681C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_19C5267E8(*a1, *a2);
}

uint64_t sub_19C526828()
{
  return sub_19C526898();
}

uint64_t sub_19C526840()
{
  return sub_19C5267F8();
}

uint64_t sub_19C526848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C5268E8(a1, a2, a3, (void (*)(_BYTE *, _QWORD))sub_19C5267F8);
}

void UnsafeBufferPointer.init(_:)(void *a1, uint64_t a2)
{
  sub_19C52695C(a1, a2, (SEL *)&selRef_bytes, (void (*)(id, id, uint64_t))MEMORY[0x1E0DEA588], (uint64_t (*)(_QWORD, uint64_t))_s31MLMultiArrayUnsafeBufferPointerOMa, (uint64_t)&unk_19CAEA830);
}

uint64_t sub_19C526898()
{
  sub_19CAAA298();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C5268DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C5268E8(a1, a2, a3, (void (*)(_BYTE *, _QWORD))sub_19C527290);
}

uint64_t sub_19C5268E8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, _QWORD))
{
  unsigned __int8 *v4;
  _BYTE v7[72];

  sub_19CAAA298();
  a4(v7, *v4);
  return sub_19CAAA2C8();
}

void UnsafeMutableBufferPointer.init(_:)(void *a1, uint64_t a2)
{
  sub_19C52695C(a1, a2, (SEL *)&selRef_mutableBytes, (void (*)(id, id, uint64_t))MEMORY[0x1E0DEB988], (uint64_t (*)(_QWORD, uint64_t))_s38MLMultiArrayUnsafeMutableBufferPointerOMa, (uint64_t)&unk_19CAEA7F0);
}

void sub_19C52695C(void *a1, uint64_t a2, SEL *a3, void (*a4)(id, id, uint64_t), uint64_t (*a5)(_QWORD, uint64_t), uint64_t a6)
{
  id v12;
  char v13;
  id v14;
  id v15;
  uint64_t v16;
  char *v17;

  v12 = objc_msgSend(a1, sel_dataType);
  if (v12 == (id)65568)
  {
    if (a2 != MEMORY[0x1E0DEB188])
      goto LABEL_7;
LABEL_9:
    v14 = objc_msgSend(a1, sel_count);
    v15 = objc_retainAutorelease(a1);
    a4(objc_msgSend(v15, *a3), v14, a2);

    return;
  }
  if (v12 == (id)131104)
  {
    if (a2 != MEMORY[0x1E0DEDBC8])
      goto LABEL_7;
    goto LABEL_9;
  }
  if (v12 != (id)65600)
  {
    v13 = 1;
    goto LABEL_11;
  }
  if (a2 == MEMORY[0x1E0DEB070])
    goto LABEL_9;
LABEL_7:
  v13 = 0;
LABEL_11:
  v16 = a5(0, a2);
  MEMORY[0x1A1AD76AC](a6, v16);
  swift_allocError();
  *v17 = v13;
  swift_willThrow();

}

id sub_19C526AB8@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return a1;
}

uint64_t sub_19C526AE0(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  char *v10;
  _QWORD *v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, _QWORD *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t AssociatedConformanceWitness;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  char *v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  id v49;
  uint64_t aBlock;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t);
  void *v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  _QWORD *v55;

  v5 = a1;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v45 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_allocBox();
  v46 = v6;
  v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v43 = v10;
  v44 = v9;
  v9(v10, (uint64_t)v5, a2);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a2;
  v11[3] = a3;
  v47 = v11;
  v48 = v8;
  v11[4] = v8;
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 64);
  swift_retain();
  v13 = v12(a2, a3);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = MEMORY[0x1E0DEE9D8];
  v49 = v5;
  if (v14)
  {
    aBlock = MEMORY[0x1E0DEE9D8];
    sub_19CAA9FE0();
    v16 = 0;
    do
    {
      v17 = v16 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)(v13 + 8 * v16 + 32));
      sub_19CAA9FBC();
      sub_19CAAA004();
      sub_19CAAA010();
      sub_19CAA9FC8();
      v16 = v17;
    }
    while (v14 != v17);
    v18 = aBlock;
    swift_bridgeObjectRelease();
    v5 = v49;
    v15 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x1E0DEE9D8];
  }
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 72))(a2, a3);
  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
  {
    v42 = v18;
    aBlock = v15;
    sub_19CAA9FE0();
    v21 = 0;
    do
    {
      v22 = v21 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)(v19 + 8 * v21 + 32));
      sub_19CAA9FBC();
      sub_19CAAA004();
      sub_19CAAA010();
      sub_19CAA9FC8();
      v21 = v22;
    }
    while (v20 != v22);
    swift_bridgeObjectRelease();
    v5 = v49;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v23 = sub_19C525CFC((uint64_t)v5);
  if (v23)
  {
    v24 = (void *)v23;
    v25 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    sub_19C4E8EF8();
    v26 = v24;
    v27 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v28 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v54 = sub_19C527268;
    v55 = v47;
    aBlock = MEMORY[0x1E0C809B0];
    v51 = 1107296256;
    v52 = sub_19C4E68A0;
    v53 = &block_descriptor_21;
    v29 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v30 = objc_msgSend(v25, sel_initWithPixelBuffer_shape_strides_mutableShapedBufferProvider_, v26, v27, v28, v29);
    _Block_release(v29);
    swift_release();
    swift_release();

LABEL_15:
    return (uint64_t)v30;
  }
  v31 = v43;
  swift_beginAccess();
  v32 = v45;
  v33 = v44(v45, (uint64_t)v31, a2);
  MEMORY[0x1E0C80A78](v33);
  *(&v42 - 2) = a2;
  *(&v42 - 1) = a3;
  v34 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, _QWORD *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t))(a3 + 152);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = sub_19CAA98E4();
  v34(&aBlock, sub_19C4E92FC, &v42 - 4, v36, a2, a3);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v32, a2);
  result = sub_19CAA98CC();
  if (result)
  {
    v38 = result;
    v49 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    sub_19C4E8EF8();
    v27 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v40 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness);
    v28 = (void *)sub_19CAA99EC();
    swift_bridgeObjectRelease();
    v54 = sub_19C527268;
    v55 = v47;
    aBlock = MEMORY[0x1E0C809B0];
    v51 = 1107296256;
    v52 = sub_19C4E68A0;
    v53 = &block_descriptor_18;
    v41 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v30 = objc_msgSend(v49, sel_initWithBytesNoCopy_shape_dataType_strides_mutableShapedBufferProvider_, v38, v27, v40, v28, v41);
    _Block_release(v41);
    swift_release();
    swift_release();
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_19C527048()
{
  return swift_deallocObject();
}

uint64_t sub_19C527058(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C5260A0(a1, a2, *(_QWORD *)(v2 + 24), *(void (**)(uint64_t, uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 16));
}

uint64_t sub_19C527068()
{
  return swift_deallocObject();
}

uint64_t sub_19C527078()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_19C5270B0()
{
  return swift_deallocObject();
}

uint64_t sub_19C5270C0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  return sub_19C52641C(a1, a2, a3, *(_QWORD *)(v3 + 24), *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 16));
}

uint64_t sub_19C5270D0()
{
  return swift_deallocObject();
}

uint64_t sub_19C5270E0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!result)
  {
    v4 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(result, v4);
  }
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 72);
  if (v3)
  {
    if (a2 - result != 0x8000000000000000 || v3 != -1)
    {
      v4 = (a2 - result) / v3;
      return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(result, v4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _s31MLMultiArrayUnsafeBufferPointerOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s31MLMultiArrayUnsafeBufferPointerOMn);
}

uint64_t _s38MLMultiArrayUnsafeMutableBufferPointerOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s38MLMultiArrayUnsafeMutableBufferPointerOMn);
}

uint64_t sub_19C52715C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_19C527168(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_19C5271B4 + 4 * byte_19CAEA6A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_19C5271E8 + 4 * byte_19CAEA6A0[v4]))();
}

uint64_t sub_19C5271E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C5271F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19C5271F8);
  return result;
}

uint64_t sub_19C527204(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19C52720CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_19C527210(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C527218(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_19C527224()
{
  JUMPOUT(0x1A1AD76ACLL);
}

void sub_19C527234()
{
  JUMPOUT(0x1A1AD76ACLL);
}

uint64_t sub_19C527244()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19C527268(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_19C525BC8(a1, a2, v2[4], v2[2], v2[3]);
}

id sub_19C527274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_19C525C64(a1, a2, a3, *(_QWORD **)(v3 + 32), *(_QWORD **)(v3 + 40));
}

uint64_t MLComputeDevice.init(device:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (result)
  {
    v3 = 0;
LABEL_7:
    *(_QWORD *)a1 = result;
    *(_BYTE *)(a1 + 8) = v3;
    return result;
  }
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (result)
  {
    v3 = 1;
    goto LABEL_7;
  }
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (result)
  {
    v3 = 2;
    goto LABEL_7;
  }
  sub_19CAA9F2C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423BA0);
  sub_19CAA9908();
  swift_bridgeObjectRelease();
  sub_19CAA992C();
  result = sub_19CAAA0B8();
  __break(1u);
  return result;
}

uint64_t MLComputeDevice.description.getter()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, sel_description);
  v2 = sub_19CAA98FC();

  return v2;
}

id MLComputeDevice.underlyingDevice.getter()
{
  id *v0;

  return *v0;
}

void MLComputeDevice.hash(into:)()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_19CAAA2A4();
  v2 = v1;
  sub_19CAA9DC4();

}

uint64_t MLComputeDevice.hashValue.getter()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_19CAAA298();
  sub_19CAAA2A4();
  v2 = v1;
  sub_19CAA9DC4();

  return sub_19CAAA2C8();
}

uint64_t sub_19C527524()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_19CAAA298();
  sub_19CAAA2A4();
  v2 = v1;
  sub_19CAA9DC4();

  return sub_19CAAA2C8();
}

uint64_t sub_19C527584()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, sel_description);
  v2 = sub_19CAA98FC();

  return v2;
}

uint64_t _s6CoreML15MLComputeDeviceO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  int v4;
  char v5;
  id v6;
  id v7;

  v2 = *(void **)a1;
  v3 = *(void **)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 8) == 1)
    {
      if (v4 != 1)
        goto LABEL_6;
LABEL_8:
      sub_19C5229D0();
      v6 = v3;
      v7 = v2;
      v5 = sub_19CAA9DB8();

      return v5 & 1;
    }
    if (v4 == 2)
      goto LABEL_8;
  }
  else if (!*(_BYTE *)(a2 + 8))
  {
    goto LABEL_8;
  }
LABEL_6:
  v5 = 0;
  return v5 & 1;
}

uint64_t _s6CoreML15MLComputeDeviceO17allComputeDevicesSayACGvgZ_0()
{
  NSArray *v0;
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t result;
  unint64_t v17;

  v0 = MLAllComputeDevices();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423BA0);
  v1 = sub_19CAA99F8();

  if (v1 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain_n();
    v2 = sub_19CAAA0DC();
    swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      v17 = v1 & 0xC000000000000001;
      v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v4 = 4;
      v5 = v1;
      while (1)
      {
        v6 = v4 - 4;
        if (v17)
        {
          v1 = MEMORY[0x1A1AD4A9C](v4 - 4, v1);
          v7 = v4 - 3;
          if (__OFADD__(v6, 1))
            goto LABEL_21;
        }
        else
        {
          v1 = *(_QWORD *)(v1 + 8 * v4);
          swift_unknownObjectRetain();
          v7 = v4 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_21:
            __break(1u);
            goto LABEL_22;
          }
        }
        objc_opt_self();
        v8 = swift_dynamicCastObjCClass();
        if (v8)
        {
          v9 = v8;
          v10 = 0;
        }
        else
        {
          objc_opt_self();
          v11 = swift_dynamicCastObjCClass();
          if (v11)
          {
            v9 = v11;
            v10 = 1;
          }
          else
          {
            objc_opt_self();
            v12 = swift_dynamicCastObjCClass();
            if (!v12)
            {
              swift_unknownObjectRetain();
              sub_19CAA9F2C();
              swift_unknownObjectRetain();
              sub_19CAA9908();
              swift_bridgeObjectRelease();
              sub_19CAA992C();
              result = sub_19CAAA0B8();
              __break(1u);
              return result;
            }
            v9 = v12;
            v10 = 2;
          }
        }
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = sub_19C4F9010(0, v3[2] + 1, 1, v3);
        v14 = v3[2];
        v13 = v3[3];
        if (v14 >= v13 >> 1)
          v3 = sub_19C4F9010((_QWORD *)(v13 > 1), v14 + 1, 1, v3);
        v3[2] = v14 + 1;
        v15 = &v3[2 * v14];
        v15[4] = v9;
        *((_BYTE *)v15 + 40) = v10;
        swift_unknownObjectRelease();
        ++v4;
        v1 = v5;
        if (v7 == v2)
          goto LABEL_24;
      }
    }
  }
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_24:
  swift_bridgeObjectRelease_n();
  return (uint64_t)v3;
}

unint64_t sub_19C527948()
{
  unint64_t result;

  result = qword_1EE423BA8;
  if (!qword_1EE423BA8)
  {
    result = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLComputeDevice, &type metadata for MLComputeDevice);
    atomic_store(result, (unint64_t *)&qword_1EE423BA8);
  }
  return result;
}

ValueMetadata *type metadata accessor for MLComputeDevice()
{
  return &type metadata for MLComputeDevice;
}

uint64_t sub_19C52799C(uint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) == 0)
    return a2;
  __break(1u);
  return result;
}

uint64_t sub_19C5279DC(uint64_t a1)
{
  sub_19CAA9E0C();
  sub_19CAA9E0C();
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_19CAA98B4();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423400);
    if (!swift_dynamicCast()
      || (__swift_instantiateConcreteTypeFromMangledName(qword_1EE423BC8), (swift_dynamicCast() & 1) == 0))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423408);
      if (swift_dynamicCast())
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423BC0);
        swift_dynamicCast();
      }
    }
  }
  return a1;
}

void sub_19C527B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  __asm { BR              X11 }
}

vImage_Error sub_19C527B70@<X0>(vImage_Buffer *src@<X3>, void *a2@<X0>, vImagePixelCount a3@<X1>, vImagePixelCount a4@<X2>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  vImage_Buffer v14;

  v14.data = a2;
  v14.height = a3;
  v14.width = a4;
  v14.rowBytes = (size_t)src;
  *(_QWORD *)(v12 - 40) = a5;
  *(_QWORD *)(v12 - 32) = a6;
  *(_QWORD *)(v12 - 24) = a7;
  *(_QWORD *)(v12 - 16) = a8;
  return vImageCopyBuffer(&v14, (const vImage_Buffer *)(v12 - 40), *(_QWORD *)(*(_QWORD *)(a9 - 8) + 64), 0x10u);
}

void sub_19C527C08()
{
  sub_19CAAA0B8();
  __break(1u);
}

uint64_t sub_19C527C54(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _BYTE v38[40];
  _BYTE v39[40];
  _BYTE v40[8];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _BYTE v45[8];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  v17 = sub_19C5279DC(a7);
  if (v19 == 1)
    return 0;
  v20 = v19;
  v34 = v18;
  v35 = v17;
  v36 = a6;
  v33 = *(_QWORD *)(a9 - 8);
  v21 = *(_QWORD *)(v33 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C527E10(a2, (uint64_t)a3, v21, (uint64_t)v38);
  sub_19C52809C((uint64_t)v38, (uint64_t)v45);
  if ((v49 & 1) != 0)
    return 0;
  v31 = v47;
  v32 = v46;
  v29 = *(_QWORD *)(a10 - 8);
  v30 = v48;
  v22 = *(_QWORD *)(v29 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19C527E10(a5, (uint64_t)v36, v22, (uint64_t)v39);
  sub_19C52809C((uint64_t)v39, (uint64_t)v40);
  if ((v44 & 1) != 0)
    return 0;
  v24 = v41;
  v28 = v42;
  v25 = v43;
  v26 = a7 + *(_QWORD *)(v33 + 72) * sub_19C552864(a1, a3);
  v27 = sub_19C552864(a4, v36);
  sub_19C527B34(v26, v32, v31, v30, a8 + *(_QWORD *)(v29 + 72) * v27, v24, v28, v25, v35, v34, v20);
  return 1;
}

uint64_t sub_19C527E10@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];

  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(a1 + 32);
    if (*(_QWORD *)(a1 + 32))
    {
      if (v7 != 1)
      {
        v15 = 5;
        do
        {
          v16 = v15 - 3;
          if (__OFADD__(v15 - 4, 1))
          {
            __break(1u);
            goto LABEL_32;
          }
          if (!*(_QWORD *)(a1 + 8 * v15))
            goto LABEL_4;
          ++v15;
        }
        while (v16 != v7);
        v17 = v7 - 1;
        swift_bridgeObjectRelease();
        v18 = *(_QWORD *)(a2 + 16);
        v19 = (uint64_t *)(a2 + 32);
        v33[0] = a2;
        v33[1] = a2;
        v33[2] = a2 + 32;
        v33[3] = v18 != 0;
        v33[4] = (2 * v18) | 1;
        swift_bridgeObjectRetain();
        v20 = sub_19C4DC3C0((uint64_t)v33);
        swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
        {
          if (v7 > *(_QWORD *)(a2 + 16))
          {
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
          if (v19[v17] == 1)
          {
            v21 = *(_QWORD *)(a1 + 16);
            v10 = 1;
            if (v21 >= 2)
            {
              v22 = (v21 - 1) & 0x7FFFFFFFFFFFFFFFLL;
              if (v22)
              {
                v23 = 1;
                v24 = (uint64_t *)(a1 + 32);
                while (1)
                {
                  v25 = *v24++;
                  v10 = v23 * v25;
                  if ((unsigned __int128)(v23 * (__int128)v25) >> 64 != (v23 * v25) >> 63)
                    break;
                  v23 = v10;
                  if (!--v22)
                    goto LABEL_19;
                }
LABEL_32:
                __break(1u);
                goto LABEL_33;
              }
            }
LABEL_19:
            v26 = v7 - 2;
            v27 = *(_QWORD *)(a2 + 16);
            if ((uint64_t)(v7 - 2) >= v27)
            {
LABEL_34:
              __break(1u);
              goto LABEL_35;
            }
            v28 = v19[v26];
            v29 = v10 * v28;
            if ((unsigned __int128)(v10 * (__int128)v28) >> 64 != (v10 * v28) >> 63)
            {
LABEL_35:
              __break(1u);
              goto LABEL_36;
            }
            if (!v27)
            {
LABEL_36:
              __break(1u);
              goto LABEL_37;
            }
            v30 = *(_QWORD *)(a1 + 16);
            if (!v30)
            {
LABEL_37:
              __break(1u);
              goto LABEL_38;
            }
            v31 = *v19 * *v8;
            if ((unsigned __int128)(*v19 * (__int128)*v8) >> 64 != v31 >> 63)
            {
LABEL_38:
              __break(1u);
              goto LABEL_39;
            }
            if (v29 == v31)
            {
              if (v7 <= v30)
              {
                v11 = v8[v17];
                swift_bridgeObjectRelease();
                v32 = v19[v26];
                result = swift_bridgeObjectRelease();
                v12 = v32 * a3;
                if ((unsigned __int128)(v32 * (__int128)a3) >> 64 == (v32 * a3) >> 63)
                {
                  if ((v10 & 0x8000000000000000) == 0 && (v11 & 0x8000000000000000) == 0)
                  {
                    v13 = 0;
                    goto LABEL_6;
                  }
                  goto LABEL_41;
                }
LABEL_40:
                __break(1u);
LABEL_41:
                result = sub_19CAAA0AC();
                __break(1u);
                return result;
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
          }
        }
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
    }
  }
LABEL_4:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_5:
  result = swift_bridgeObjectRelease();
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 1;
LABEL_6:
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 16) = v11;
  *(_QWORD *)(a4 + 24) = v12;
  *(_BYTE *)(a4 + 32) = v13;
  return result;
}

uint64_t sub_19C52809C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_19C5280E4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_19C528138(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = result;
  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v6 = (uint64_t *)(result + 32);
    v7 = 1;
    do
    {
      v8 = *v6++;
      v9 = v7 * v8;
      if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
      {
        __break(1u);
        return result;
      }
      v7 = v9;
      --v5;
    }
    while (v5);
    if (v9)
      goto LABEL_6;
    v14 = 0;
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = sub_19C4E0D80(v4, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = sub_19C4E796C(v10);
    v13 = v12;
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
      v14 = 1;
    else
      v14 = v11;
  }
  MEMORY[0x1E0C80A78](v14);
  v15 = sub_19C528300();
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = v15;
    v16 = sub_19CAAA040();
    MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEC730], v16);
    swift_allocObject();
    a2 = sub_19C52872C(v4, a2, (uint64_t)&v17, v16);
    swift_release();
  }
  return a2;
}

uint64_t sub_19C528300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_19CAA9A64();
  if (!v0)
  {
    swift_bridgeObjectRetain();
    v1 = sub_19CAA9F5C();
    swift_bridgeObjectRelease();
    if (!v1)
    {
      v2 = sub_19CAA9AA0();
      MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEAF50], v2);
      v1 = sub_19CAAA214();
    }
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_19C5283A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, uint64_t);
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  if (result)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a7 - 8) + 72);
    if (!v9)
    {
LABEL_12:
      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    if (a2 - result == 0x8000000000000000 && v9 == -1)
      goto LABEL_13;
  }
  ObjectType = swift_getObjectType();
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 8);
  v12 = (_QWORD *)v11(ObjectType, a4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  v13 = v12[2];
  if (v13 != *(_QWORD *)(result + 16))
  {
    __break(1u);
    goto LABEL_11;
  }
  v14 = (_QWORD *)result;
  v15 = sub_19C500C0C(0, v13);
  result = v11(ObjectType, a4);
  v16 = *(_QWORD *)(result + 16);
  if (v16 != a5[2])
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v17 = (_QWORD *)result;
  swift_bridgeObjectRetain();
  v18 = sub_19C500C0C(0, v16);
  result = sub_19CAA98CC();
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v19 = result;
  result = sub_19CAA98CC();
  if (result)
  {
    sub_19C5919D4(v15, v12, v14, v18, v17, a5, v19, result, a7, a7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_19C52855C()
{
  swift_beginAccess();
  swift_retain();
  sub_19CAA9FEC();
  return swift_release();
}

uint64_t sub_19C528600()
{
  swift_beginAccess();
  sub_19CAAA040();
  sub_19CAA9FF8();
  return swift_endAccess();
}

uint64_t sub_19C52869C()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_19C5286C8()
{
  sub_19C52869C();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for StandardStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StandardStorage);
}

uint64_t sub_19C5286F4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_19C5286FC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_19C528704()
{
  return sub_19C52855C();
}

uint64_t sub_19C528718()
{
  return sub_19C528600();
}

uint64_t sub_19C52872C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v5 = v4;
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_19CAA9FB0();
  result = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v30 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  v30 = a1;
  v31 = a2;
  v32 = v16;
  v33 = v10;
  if (v17)
  {
    v18 = (uint64_t *)(a1 + 32);
    v19 = 1;
    do
    {
      v20 = *v18++;
      v21 = v19 * v20;
      if ((unsigned __int128)(v19 * (__int128)v20) >> 64 != (v19 * v20) >> 63)
      {
        __break(1u);
        goto LABEL_14;
      }
      v19 = v21;
      --v17;
    }
    while (v17);
    if (v21)
      goto LABEL_6;
    v27 = 0;
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22 = sub_19C4E0D80(a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = v4;
    v24 = sub_19C4E796C(v22);
    v26 = v25;
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
      v27 = 1;
    else
      v27 = v24;
    v5 = v23;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v12, a3, a4);
  sub_19CAA99B0();
  MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEC5D0], v13);
  v28 = sub_19CAA9AAC();
  result = sub_19CAAA01C();
  if (v27 == result)
  {
    v29 = v31;
    v5[3] = v30;
    v5[4] = v29;
    v5[2] = v28;
    return (uint64_t)v5;
  }
  else
  {
LABEL_14:
    __break(1u);
  }
  return result;
}

uint64_t sub_19C528948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocObject();
  return sub_19C52872C(a1, a2, a3, a4);
}

uint64_t sub_19C5289B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD v29[2];
  uint64_t v30;

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  if (a3)
  {
    v5 = a3;
  }
  else
  {
    ObjectType = swift_getObjectType();
    v7 = v4(ObjectType, a2);
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      v5 = sub_19CAA9A58();
      *(_QWORD *)(v5 + 16) = v8;
    }
    else
    {
      v5 = MEMORY[0x1E0DEE9D8];
    }
    v29[1] = v8;
    v30 = 0;
    v29[0] = v5 + 32;
    sub_19C59373C(v29, &v30, v7);
    v9 = v30;
    v10 = v8 < v30;
    if (v8 < v30)
    {
LABEL_19:
      __break(1u);
      if (v10)
        __break(1u);
      *(_QWORD *)(v5 + 16) = v9;
      result = swift_bridgeObjectRelease();
      __break(1u);
      return result;
    }
    *(_QWORD *)(v5 + 16) = v30;
    swift_bridgeObjectRelease();
  }
  v11 = swift_getObjectType();
  v12 = v4(v11, a2);
  v13 = v12;
  v9 = *(_QWORD *)(v12 + 16);
  if (v9)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      v16 = *(_QWORD *)(v12 + 8 * v14 + 32);
      v17 = v15 * v16;
      v18 = (unsigned __int128)(v15 * (__int128)v16) >> 64;
      v10 = v18 < v17 >> 63;
      if (v18 != v17 >> 63)
      {
        __break(1u);
        goto LABEL_19;
      }
      v15 = v17;
      ++v14;
    }
    while (v9 != v14);
    if (v17)
      goto LABEL_13;
    swift_bridgeObjectRelease();
    v23 = 0;
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRetain();
    v19 = sub_19C4E0D80(v13, v5);
    swift_bridgeObjectRelease();
    v20 = sub_19C4E796C(v19);
    v22 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
      v23 = 1;
    else
      v23 = v20;
  }
  MEMORY[0x1E0C80A78](v23);
  v24 = sub_19C528300();
  v25 = v4(v11, a2);
  v29[0] = v24;
  v26 = sub_19CAAA040();
  MEMORY[0x1A1AD76AC](MEMORY[0x1E0DEC730], v26);
  swift_allocObject();
  v27 = sub_19C52872C(v25, v5, (uint64_t)v29, v26);
  swift_release();
  return v27;
}

uint64_t sub_19C528C3C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t result;
  _OWORD v9[2];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v5 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 56);
  ObjectType = swift_getObjectType();
  v9[1] = *(_OWORD *)(v2 + 16);
  v10 = v5;
  v11 = *(_OWORD *)(v2 + 40);
  v12 = a1;
  result = (*(uint64_t (**)(uint64_t (*)(uint64_t, uint64_t), _OWORD *, uint64_t, uint64_t))(v11 + 32))(sub_19C528CD4, v9, MEMORY[0x1E0DEE9C0] + 8, ObjectType);
  *a2 = v6;
  return result;
}

uint64_t sub_19C528CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19C5283A0(a1, a2, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD **)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 16));
}

uint64_t sub_19C528CF4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t (*v3)(void);

  v3 = *(uint64_t (**)(void))(v2 + 40);
  *a2 = *(_QWORD *)(v2 + 32);
  return v3();
}

uint64_t sub_19C528D1C()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;

  AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_19C528DC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    v16 = AssociatedTypeWitness;
    v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t sub_19C528EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(v3 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t sub_19C528F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_19C528FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_19C529078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_19C529114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_19C5291B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = *(_QWORD *)(v6 + 64) + v12;
  if (a2 <= v11)
    goto LABEL_23;
  v14 = (v13 & ~v12) + *(_QWORD *)(v9 + 64);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v7 >= v10)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, AssociatedTypeWitness);
      }
      return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_23;
LABEL_14:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v19 = v14;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v11 + v18 + 1;
}

void sub_19C529360(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v12 = 0u;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for LoopIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LoopIterator);
}

uint64_t sub_19C5295A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v19 = a3;
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v18 - v12;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v14(a4, a1, a2);
  v14((uint64_t)v9, a1, a2);
  sub_19CAA9944();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  v16 = type metadata accessor for LoopIterator(0, a2, v19, v15);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a4 + *(int *)(v16 + 36), v13, AssociatedTypeWitness);
}

uint64_t sub_19C5296D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v22 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v19 = (char *)&v19 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v9 = sub_19CAA9E18();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v19 - v11;
  v13 = *(int *)(a1 + 36);
  v23 = v2;
  v14 = v2 + v13;
  swift_getAssociatedConformanceWitness();
  sub_19CAA9E54();
  v15 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v22, v23, v4);
    v16 = v19;
    sub_19CAA9944();
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 40))(v14, v16, AssociatedTypeWitness);
    return sub_19CAA9E54();
  }
  else
  {
    v18 = v24;
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v24, v12, v8);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v8);
  }
}

void MLModelConfiguration.optimizationHints.getter(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  id v4;
  id v5;
  char v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;

  v2 = v1;
  v4 = objc_msgSend(v2, sel_optimizationHints);
  v5 = objc_msgSend(v4, sel_reshapeFrequency);

  if (v5)
  {
    if (v5 != (id)1)
    {
      sub_19CAA9F2C();
      sub_19CAA992C();
      v12 = objc_msgSend(v2, sel_optimizationHints);
      objc_msgSend(v12, sel_reshapeFrequency);

      sub_19CAAA190();
      sub_19CAA992C();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(v2, sel_optimizationHints);
  v8 = objc_msgSend(v7, sel_specializationStrategy);

  if ((unint64_t)v8 <= 1)
  {
    v9 = objc_msgSend(v2, sel_optimizationHints);
    objc_msgSend(v9, sel_hotHandDuration);
    v11 = v10;

    *(_BYTE *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v11;
    *(_BYTE *)(a1 + 16) = (_BYTE)v8;
    return;
  }
  sub_19CAA9F2C();
  sub_19CAA992C();
  v13 = objc_msgSend(v2, sel_optimizationHints);
  objc_msgSend(v13, sel_specializationStrategy);

  sub_19CAAA190();
  sub_19CAA992C();
  swift_bridgeObjectRelease();
LABEL_9:
  sub_19CAAA0B8();
  __break(1u);
}

void MLModelConfiguration.optimizationHints.setter(double *a1)
{
  void *v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;

  v2 = *(unsigned __int8 *)a1;
  v3 = a1[1];
  v4 = *((unsigned __int8 *)a1 + 16);
  v5 = objc_msgSend(v1, sel_optimizationHints);
  objc_msgSend(v5, sel_setReshapeFrequency_, v2);

  v6 = objc_msgSend(v1, sel_optimizationHints);
  objc_msgSend(v6, sel_setSpecializationStrategy_, v4);

  v7 = objc_msgSend(v1, sel_optimizationHints);
  objc_msgSend(v7, sel_setHotHandDuration_, v3);

}

void (*MLModelConfiguration.optimizationHints.modify(uint64_t a1))(unsigned __int8 *a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  MLModelConfiguration.optimizationHints.getter(a1);
  return sub_19C529C84;
}

void sub_19C529C84(unsigned __int8 *a1)
{
  void *v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;

  v1 = (void *)*((_QWORD *)a1 + 3);
  v2 = *a1;
  v3 = *((double *)a1 + 1);
  v4 = a1[16];
  v5 = objc_msgSend(v1, sel_optimizationHints);
  objc_msgSend(v5, sel_setReshapeFrequency_, v2);

  v6 = objc_msgSend(v1, sel_optimizationHints);
  objc_msgSend(v6, sel_setSpecializationStrategy_, v4);

  v7 = objc_msgSend(v1, sel_optimizationHints);
  objc_msgSend(v7, sel_setHotHandDuration_, v3);

}

double sub_19C529D54@<D0>(uint64_t a1@<X8>)
{
  double result;
  char v3;
  _BYTE v4[8];
  double v5;
  char v6;

  MLModelConfiguration.optimizationHints.getter((uint64_t)v4);
  result = v5;
  v3 = v6;
  *(_BYTE *)a1 = v4[0];
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = v3;
  return result;
}

double sub_19C529D9C(uint64_t a1)
{
  double v1;
  char v2;
  double result;
  double v4[2];
  char v5;

  v1 = *(double *)(a1 + 8);
  v2 = *(_BYTE *)(a1 + 16);
  LOBYTE(v4[0]) = *(_BYTE *)a1;
  v4[1] = v1;
  v5 = v2;
  MLModelConfiguration.optimizationHints.setter(v4);
  return result;
}

uint64_t sub_19C529DE0(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x1E0DEE9D8];
    if (!v2)
      return v3;
    v11 = MEMORY[0x1E0DEE9D8];
    result = sub_19C556FD0(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v11;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x1A1AD4A9C](v5, a1);
      else
        v6 = *(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      v8 = objc_msgSend(v6, sel_integerValue);

      v10 = *(_QWORD *)(v11 + 16);
      v9 = *(_QWORD *)(v11 + 24);
      if (v10 >= v9 >> 1)
        sub_19C556FD0(v9 > 1, v10 + 1, 1);
      ++v5;
      *(_QWORD *)(v11 + 16) = v10 + 1;
      *(_QWORD *)(v11 + 8 * v10 + 32) = v8;
      if (v2 == v5)
        return v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = sub_19CAAA0DC();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t MLStateConstraint.bufferShape.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, sel_bufferShape);
  sub_19C4E8EF8();
  v2 = sub_19CAA99F8();

  v3 = sub_19C529DE0(v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t MLComputePlan.DeviceUsage.supported.getter()
{
  return swift_bridgeObjectRetain();
}

id MLComputePlan.DeviceUsage.preferred.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  char v3;

  v2 = *(void **)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  return v2;
}

uint64_t sub_19C529FDC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t result;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = (unint64_t)a1;
  v4 = objc_msgSend(a1, sel_supportedComputeDevices);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423BA0);
  v5 = sub_19CAA99F8();

  if (v5 >> 62)
    goto LABEL_20;
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      v23 = MEMORY[0x1E0DEE9D8];
      sub_19C55719C(0, v6 & ~(v6 >> 63), 0);
      if (v6 < 0)
        break;
      v19 = a2;
      v20 = v2;
      v7 = 0;
      v8 = v23;
      while (v6 != v7)
      {
        if ((v5 & 0xC000000000000001) != 0)
          MEMORY[0x1A1AD4A9C](v7, v5);
        else
          swift_unknownObjectRetain();
        objc_opt_self();
        v9 = swift_dynamicCastObjCClass();
        if (v9)
        {
          v10 = v9;
          a2 = 0;
        }
        else
        {
          objc_opt_self();
          v11 = swift_dynamicCastObjCClass();
          if (v11)
          {
            v10 = v11;
            a2 = 1;
          }
          else
          {
            objc_opt_self();
            v12 = swift_dynamicCastObjCClass();
            if (!v12)
              goto LABEL_24;
            v10 = v12;
            a2 = 2;
          }
        }
        v23 = v8;
        v2 = *(_QWORD *)(v8 + 16);
        v13 = *(_QWORD *)(v8 + 24);
        if (v2 >= v13 >> 1)
        {
          sub_19C55719C(v13 > 1, v2 + 1, 1);
          v8 = v23;
        }
        ++v7;
        *(_QWORD *)(v8 + 16) = v2 + 1;
        v14 = v8 + 16 * v2;
        *(_QWORD *)(v14 + 32) = v10;
        *(_BYTE *)(v14 + 40) = a2;
        if (v6 == v7)
        {
          swift_bridgeObjectRelease();
          a2 = v19;
          v2 = v20;
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_20:
      swift_bridgeObjectRetain();
      v6 = sub_19CAAA0DC();
      swift_bridgeObjectRelease();
      if (!v6)
        goto LABEL_21;
    }
    __break(1u);
LABEL_24:
    sub_19CAA9F2C();
    sub_19CAA9908();
    swift_bridgeObjectRelease();
    sub_19CAA992C();
    result = sub_19CAAA0B8();
    __break(1u);
  }
  else
  {
LABEL_21:
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x1E0DEE9D8];
LABEL_22:
    v15 = objc_msgSend((id)v2, sel_preferredComputeDevice);
    result = MLComputeDevice.init(device:)((uint64_t)&v21);
    v17 = v21;
    v18 = v22;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v17;
    *(_BYTE *)(a2 + 16) = v18;
    *(_QWORD *)(a2 + 24) = v2;
  }
  return result;
}

double MLComputePlan.Cost.weight.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

id MLComputePlan.modelStructure.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(void **)(v1 + 24);
  v4 = *(void **)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 24) = v5;
  return sub_19C52A2E4(v2, v3, v4, v5);
}

id sub_19C52A2E4(uint64_t a1, void *a2, void *a3, unsigned __int8 a4)
{
  id result;

  if (a4 >= 2u)
  {
    if (a4 != 2)
      return result;
    a2 = a3;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t static MLComputePlan.load(asset:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return swift_task_switch();
}

uint64_t sub_19C52A35C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[16];
  v1 = v0[17];
  v3 = (void *)objc_opt_self();
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_19C52A418;
  v4 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_19C52A548;
  v5[3] = &block_descriptor_1;
  v5[4] = v4;
  objc_msgSend(v3, sel_loadModelAsset_configuration_completionHandler_, v2, v1, v5);
  return swift_continuation_await();
}

uint64_t sub_19C52A418()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 144) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_19C52A478()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  char v5;
  __int128 v7;
  uint64_t v8;
  char v9;

  v1 = *(void **)(v0 + 120);
  type metadata accessor for MLComputePlan();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 48) = v1;
  v3 = v1;
  sub_19C58C5C0(objc_msgSend(v3, sel_modelStructure), (uint64_t)&v7);

  v4 = v8;
  v5 = v9;
  *(_OWORD *)(v2 + 16) = v7;
  *(_QWORD *)(v2 + 32) = v4;
  *(_BYTE *)(v2 + 40) = v5;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_19C52A50C()
{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19C52A548(uint64_t result, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  id v6;

  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE423C80);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 40) = a2;
    v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for MLComputePlan()
{
  return objc_opt_self();
}

uint64_t static MLComputePlan.load(contentsOf:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return swift_task_switch();
}

uint64_t sub_19C52A60C()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[17];
  v2 = (void *)objc_opt_self();
  v3 = sub_19CAA95D8();
  v0[18] = v3;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_19C52A6D4;
  v4 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_19C52A548;
  v5[3] = &block_descriptor_2;
  v5[4] = v4;
  objc_msgSend(v2, sel_loadContentsOfURL_configuration_completionHandler_, v3, v1, v5);
  return swift_continuation_await();
}

uint64_t sub_19C52A6D4()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 152) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_19C52A734()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  char v5;
  __int128 v7;
  uint64_t v8;
  char v9;

  v1 = *(void **)(v0 + 120);

  type metadata accessor for MLComputePlan();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 48) = v1;
  v3 = v1;
  sub_19C58C5C0(objc_msgSend(v3, sel_modelStructure), (uint64_t)&v7);

  v4 = v8;
  v5 = v9;
  *(_OWORD *)(v2 + 16) = v7;
  *(_QWORD *)(v2 + 32) = v4;
  *(_BYTE *)(v2 + 40) = v5;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_19C52A7D0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 144);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_19C52A810(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = objc_msgSend(*(id *)(v2 + 48), sel_estimatedCostOfMLProgramOperation_, *(_QWORD *)(a1 + 40));
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, sel_weight);
    v7 = v6;

  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)a2 = v7;
  *(_BYTE *)(a2 + 8) = v5 == 0;
}

id sub_19C52A888@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  unsigned __int8 v10;
  uint64_t v11;

  result = objc_msgSend(*(id *)(v2 + 48), sel_computeDeviceUsageForNeuralNetworkLayer_, *(_QWORD *)(a1 + 48));
  if (result)
  {
    result = (id)sub_19C529FDC(result, (uint64_t)v9);
    v5 = v9[0];
    v6 = v9[1];
    v7 = v10;
    v8 = v11;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  *a2 = v5;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = v8;
  return result;
}

id sub_19C52A8FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  unsigned __int8 v10;
  uint64_t v11;

  result = objc_msgSend(*(id *)(v2 + 48), sel_computeDeviceUsageForMLProgramOperation_, *(_QWORD *)(a1 + 40));
  if (result)
  {
    result = (id)sub_19C529FDC(result, (uint64_t)v9);
    v5 = v9[0];
    v6 = v9[1];
    v7 = v10;
    v8 = v11;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  *a2 = v5;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = v8;
  return result;
}

uint64_t MLComputePlan.deinit()
{
  uint64_t v0;

  sub_19C52A99C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40));

  return v0;
}

void sub_19C52A99C(uint64_t a1, void *a2, void *a3, unsigned __int8 a4)
{
  if (a4 >= 2u)
  {
    if (a4 != 2)
      return;
    a2 = a3;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

}

uint64_t MLComputePlan.__deallocating_deinit()
{
  uint64_t v0;

  sub_19C52A99C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40));

  return swift_deallocClassInstance();
}

void MLComputePlan.DeviceUsage.supportState(for:)(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  id v4;

  v4 = objc_msgSend(*(id *)(v2 + 24), sel_supportInfoForComputeDevice_, *a1);
  if (v4)
    sub_19C52AA84(v4, a2);
  else
    *a2 = 16;
}

void sub_19C52AA84(void *a1@<X0>, char *a2@<X8>)
{
  id v4;
  char v5;
  char v6;

  if (objc_msgSend(a1, sel_state))
  {
    v4 = objc_msgSend(a1, sel_state);

    MLComputePlan.DeviceUsage.Reason.Category.init(rawValue:)((Swift::Int)v4);
    v5 = v6;
    if (v6 == 15)
      v5 = 16;
  }
  else
  {

    v5 = 15;
  }
  *a2 = v5;
}

uint64_t MLComputePlan.DeviceUsage.SupportState.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19C52AB38 + 4 * byte_19CAEAA18[*v0]))(0x6574726F70707553, 0xE900000000000064);
}

unint64_t sub_19C52AB38()
{
  return 0xD000000000000011;
}

void sub_19C52AC54()
{
  JUMPOUT(0x19C52AC68);
}

uint64_t MLComputePlan.DeviceUsage.SupportState.hash(into:)()
{
  _BYTE *v0;

  if (*v0 != 15)
    sub_19CAAA2A4();
  return sub_19CAAA2A4();
}

BOOL static MLComputePlan.DeviceUsage.SupportState.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 15)
    return (_DWORD)v3 == 15;
  if ((_DWORD)v3 == 15)
    return 0;
  return qword_19CAEAD68[v2] == qword_19CAEAD68[v3];
}

BOOL static MLComputePlan.DeviceUsage.Reason.== infix(_:_:)(char *a1, char *a2)
{
  return qword_19CAEAD68[*a1] == qword_19CAEAD68[*a2];
}

uint64_t MLComputePlan.DeviceUsage.SupportState.hashValue.getter()
{
  char *v0;
  uint64_t v1;

  v1 = *v0;
  sub_19CAAA298();
  if (v1 != 15)
    sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C52AD98()
{
  char *v0;
  uint64_t v1;

  v1 = *v0;
  sub_19CAAA298();
  if (v1 != 15)
    sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C52ADFC()
{
  _BYTE *v0;

  if (*v0 != 15)
    sub_19CAAA2A4();
  return sub_19CAAA2A4();
}

uint64_t sub_19C52AE48()
{
  char *v0;
  uint64_t v1;

  v1 = *v0;
  sub_19CAAA298();
  if (v1 != 15)
    sub_19CAAA2A4();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

BOOL sub_19C52AEB0(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 15)
    return (_DWORD)v3 == 15;
  if ((_DWORD)v3 == 15)
    return 0;
  return qword_19CAEAD68[v2] == qword_19CAEAD68[v3];
}

void MLComputePlan.DeviceUsage.Reason.category.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t _s6CoreML13MLComputePlanC11DeviceUsageV6ReasonV11descriptionSSvg_0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_19C52AF44 + 4 * byte_19CAEAA28[*v0]))(0xD00000000000002DLL, 0x800000019CABBFF0);
}

unint64_t sub_19C52AF44()
{
  return 0xD000000000000011;
}

void sub_19C52AFFC()
{
  JUMPOUT(0x19C52B008);
}

CoreML::MLComputePlan::DeviceUsage::Reason::Category_optional __swiftcall MLComputePlan.DeviceUsage.Reason.Category.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue <= 299)
  {
    v2 = 1;
    switch(rawValue)
    {
      case 100:
LABEL_11:
        *v1 = v2;
        return (CoreML::MLComputePlan::DeviceUsage::Reason::Category_optional)rawValue;
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
        goto LABEL_23;
      case 110:
        *v1 = 2;
        return (CoreML::MLComputePlan::DeviceUsage::Reason::Category_optional)rawValue;
      case 120:
        *v1 = 3;
        return (CoreML::MLComputePlan::DeviceUsage::Reason::Category_optional)rawValue;
      case 130:
        *v1 = 4;
        return (CoreML::MLComputePlan::DeviceUsage::Reason::Category_optional)rawValue;
      default:
        switch(rawValue)
        {
          case 200:
            *v1 = 5;
            return (CoreML::MLComputePlan::DeviceUsage::Reason::Category_optional)rawValue;
          case 201:
          case 202:
          case 203:
          case 204:
          case 205:
          case 206:
          case 207:
          case 208:
          case 209:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
            goto LABEL_23;
          case 210:
            *v1 = 6;
            return (CoreML::MLComputePlan::DeviceUsage::Reason::Category_optional)rawValue;
          case 220:
            *v1 = 7;
            return (CoreML::MLComputePlan::DeviceUsage::Reason::Category_optional)rawValue;
          case 230:
            *v1 = 8;
            return (CoreML::MLComputePlan::DeviceUsage::Reason::Category_optional)rawValue;
          default:
            if (rawValue != 1)
              goto LABEL_23;
            v2 = 0;
            goto LABEL_11;
        }
    }
  }
  switch(rawValue)
  {
    case 300:
      *v1 = 9;
      break;
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
      goto LABEL_23;
    case 310:
      *v1 = 10;
      break;
    case 320:
      *v1 = 11;
      break;
    case 330:
      *v1 = 12;
      break;
    case 340:
      *v1 = 13;
      break;
    default:
      if (rawValue == 400)
        *v1 = 14;
      else
LABEL_23:
        *v1 = 15;
      break;
  }
  return (CoreML::MLComputePlan::DeviceUsage::Reason::Category_optional)rawValue;
}

uint64_t MLComputePlan.DeviceUsage.Reason.hash(into:)()
{
  return sub_19CAAA2A4();
}

uint64_t MLComputePlan.DeviceUsage.Reason.hashValue.getter()
{
  sub_19CAAA298();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C52B1D4()
{
  sub_19CAAA298();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

uint64_t sub_19C52B220()
{
  return sub_19CAAA2A4();
}

uint64_t sub_19C52B254()
{
  sub_19CAAA298();
  sub_19CAAA2A4();
  return sub_19CAAA2C8();
}

BOOL sub_19C52B29C(char *a1, char *a2)
{
  return qword_19CAEAD68[*a1] == qword_19CAEAD68[*a2];
}

uint64_t MLComputePlan.DeviceUsage.Reason.Category.rawValue.getter()
{
  char *v0;

  return qword_19CAEAD68[*v0];
}

CoreML::MLComputePlan::DeviceUsage::Reason::Category_optional sub_19C52B2D4(Swift::Int *a1)
{
  return MLComputePlan.DeviceUsage.Reason.Category.init(rawValue:)(*a1);
}

void sub_19C52B2DC(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_19CAEAD68[*v1];
}

unint64_t sub_19C52B2F8()
{
  unint64_t result;

  result = qword_1EE423C60;
  if (!qword_1EE423C60)
  {
    result = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLComputePlan.DeviceUsage.SupportState, &type metadata for MLComputePlan.DeviceUsage.SupportState);
    atomic_store(result, (unint64_t *)&qword_1EE423C60);
  }
  return result;
}

unint64_t sub_19C52B340()
{
  unint64_t result;

  result = qword_1EE423C68;
  if (!qword_1EE423C68)
  {
    result = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLComputePlan.DeviceUsage.Reason, &type metadata for MLComputePlan.DeviceUsage.Reason);
    atomic_store(result, (unint64_t *)&qword_1EE423C68);
  }
  return result;
}

unint64_t sub_19C52B388()
{
  unint64_t result;

  result = qword_1EE423C70;
  if (!qword_1EE423C70)
  {
    result = MEMORY[0x1A1AD76AC](&protocol conformance descriptor for MLComputePlan.DeviceUsage.Reason.Category, &type metadata for MLComputePlan.DeviceUsage.Reason.Category);
    atomic_store(result, (unint64_t *)&qword_1EE423C70);
  }
  return result;
}

uint64_t method lookup function for MLComputePlan()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MLComputePlan.estimatedCost(of:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of MLComputePlan.deviceUsage(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

void destroy for MLComputePlan.DeviceUsage(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for MLComputePlan.DeviceUsage(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  void *v5;
  id v6;
  id v7;

  v3 = *(void **)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  v5 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  v6 = v3;
  v7 = v5;
  return a1;
}

uint64_t assignWithCopy for MLComputePlan.DeviceUsage(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  v6 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  v7 = v4;

  v8 = *(void **)(a2 + 24);
  v9 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  v10 = v8;

  return a1;
}

uint64_t assignWithTake for MLComputePlan.DeviceUsage(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v4;

  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for MLModelStructure.Program.Block(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLModelStructure.Program.Block(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLComputePlan.DeviceUsage()
{
  return &type metadata for MLComputePlan.DeviceUsage;
}

ValueMetadata *type metadata accessor for MLComputePlan.Cost()
{
  return &type metadata for MLComputePlan.Cost;
}

uint64_t getEnumTagSinglePayload for MLComputePlan.DeviceUsage.SupportState(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
  {
    v6 = *a1;
    v7 = v6 >= 0xF;
    v8 = v6 - 15;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 15;
    if (a2 + 15 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_19C52B640 + 4 * byte_19CAEAA9E[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for MLComputePlan.DeviceUsage.SupportState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 15;
  if (a3 + 15 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF1)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_19C52B6E8 + 4 * byte_19CAEAAA8[v5]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_19C52B71C + 4 * byte_19CAEAAA3[v5]))();
}

uint64_t sub_19C52B71C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C52B724(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19C52B72CLL);
  return result;
}

uint64_t sub_19C52B738(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19C52B740);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_19C52B744(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C52B74C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C52B758(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 0xF)
    return v1 - 14;
  else
    return 0;
}

_BYTE *sub_19C52B76C(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 14;
  return result;
}

ValueMetadata *type metadata accessor for MLComputePlan.DeviceUsage.SupportState()
{
  return &type metadata for MLComputePlan.DeviceUsage.SupportState;
}

ValueMetadata *type metadata accessor for MLComputePlan.DeviceUsage.Reason()
{
  return &type metadata for MLComputePlan.DeviceUsage.Reason;
}

uint64_t _s6CoreML13MLComputePlanC11DeviceUsageV6ReasonV8CategoryOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6CoreML13MLComputePlanC11DeviceUsageV6ReasonV8CategoryOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_19C52B880 + 4 * byte_19CAEAAB2[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_19C52B8B4 + 4 * byte_19CAEAAAD[v4]))();
}

uint64_t sub_19C52B8B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C52B8BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19C52B8C4);
  return result;
}

uint64_t sub_19C52B8D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19C52B8D8);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_19C52B8DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19C52B8E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MLComputePlan.DeviceUsage.Reason.Category()
{
  return &type metadata for MLComputePlan.DeviceUsage.Reason.Category;
}

uint64_t sub_19C52B900()
{
  return swift_initClassMetadata2();
}

uint64_t sub_19C52B95C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t sub_19C52B964(void (*a1)(char *, char *))
{
  uint64_t v1;
  char *BaseAddress;
  size_t DataSize;
  char *v5;

  CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(v1 + 16), 1uLL);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(v1 + 16));
  DataSize = CVPixelBufferGetDataSize(*(CVPixelBufferRef *)(v1 + 16));
  if (BaseAddress)
    v5 = &BaseAddress[DataSize];
  else
    v5 = 0;
  a1(BaseAddress, v5);
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(v1 + 16), 1uLL);
}

uint64_t sub_19C52B9F0(void (*a1)(char *, char *))
{
  uint64_t v1;
  char *BaseAddress;
  size_t DataSize;
  char *v5;

  CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(v1 + 16), 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(v1 + 16));
  DataSize = CVPixelBufferGetDataSize(*(CVPixelBufferRef *)(v1 + 16));
  if (BaseAddress)
    v5 = &BaseAddress[DataSize];
  else
    v5 = 0;
  a1(BaseAddress, v5);
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(v1 + 16), 0);
}

void sub_19C52BA7C(void (*a1)(void))
{
  uint64_t v1;
  id v3;

  v3 = *(id *)(v1 + 16);
  a1();

}

uint64_t sub_19C52BADC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_19C52BB08()
{
  sub_19C52BADC();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PixelBufferStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PixelBufferStorage);
}

uint64_t sub_19C52BB34()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_19C52BB40(void (*a1)(char *, char *))
{
  return sub_19C52B964(a1);
}

uint64_t sub_19C52BB54(void (*a1)(char *, char *))
{
  return sub_19C52B9F0(a1);
}

unint64_t sub_19C52BB68(uint64_t a1)
{
  unint64_t result;

  result = sub_19C52BB8C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_19C52BB8C()
{
  unint64_t result;

  result = qword_1EE423C90;
  if (!qword_1EE423C90)
  {
    result = MEMORY[0x1A1AD76AC](&unk_19CAE9708, &type metadata for BinaryArithmeticOperator);
    atomic_store(result, (unint64_t *)&qword_1EE423C90);
  }
  return result;
}

void sub_19C52BBD0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  if ((a2 & 0xC000000000000001) == 0)
  {
    v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
    {
      if (v5 != 1)
      {
        v6 = *(void **)(a2 + 40);
        v7 = *(id *)(a2 + 32);
        v8 = v6;
        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    JUMPOUT(0x19C52BE2CLL);
  }
  MEMORY[0x1A1AD4A9C](0, a2);
  MEMORY[0x1A1AD4A9C](1, a2);
LABEL_5:
  __asm { BR              X10 }
}

uint64_t sub_19C52BE4C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_19C52BE64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[2];
  v2 = *(_QWORD *)(v1 + 16);
  v0[3] = v2;
  swift_unownedRetainStrong();
  v3 = *(_QWORD *)(v1 + 24);
  v4 = swift_task_alloc();
  v0[4] = v4;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v3;
  v5 = (_QWORD *)swift_task_alloc();
  v0[5] = v5;
  *v5 = v0;
  v5[1] = sub_19C52BF18;
  return sub_19CAAA1A8();
}

uint64_t sub_19C52BF18()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19C52BF80()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19C52BF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD aBlock[6];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE424430);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v9 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v10 + v9, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v12 = *(void **)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  aBlock[4] = sub_19C52C34C;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19C52C38C;
  aBlock[3] = &block_descriptor_2;
  v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v12, sel_notifyListener_atValue_block_, v11, a3, v13);
  _Block_release(v13);
  return swift_release();
}

uint64_t sub_19C52C0DC()
{
  swift_unownedRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MetalAsyncEvent()
{
  return objc_opt_self();
}

uint64_t sub_19C52C120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  swift_unownedRetainStrong();
  v2 = *(_QWORD *)(v1 + 32);
  swift_unknownObjectRetain();
  swift_release();
  return v2;
}

uint64_t sub_19C52C15C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  swift_unownedRetainStrong();
  v2 = *(_QWORD *)(v1 + 24);
  swift_unownedRetainStrong();
  v3 = *(_QWORD *)(v2 + 16);
  swift_release();
  swift_release();
  return v3;
}

uint64_t sub_19C52C1AC()
{
  uint64_t v0;

  v0 = *(_QWORD *)(swift_unownedRetainStrong() + 48);
  swift_release();
  return v0;
}

uint64_t sub_19C52C1D8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

id sub_19C52C1E0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(v0 + 16);
  swift_unownedRetainStrong();
  v2 = objc_msgSend(*(id *)(v1 + 32), sel_signaledValue);
  swift_release();
  return v2;
}

uint64_t sub_19C52C224()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_19C5231F8;
  v2[2] = v0;
  return swift_task_switch();
}

uint64_t sub_19C52C280(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  swift_unownedRetainStrong();
  v4 = *(_QWORD *)(v3 + 32);
  swift_unknownObjectRetain();
  swift_release();
  objc_msgSend(a1, sel_encodeWaitForEvent_value_, v4, *(_QWORD *)(v1 + 24));
  return swift_unknownObjectRelease();
}

uint64_t sub_19C52C2E0(uint64_t a1)
{
  uint64_t v1;

  return sub_19C52BF88(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_19C52C2E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE424430);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_19C52C34C()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE424430);
  return sub_19CAA9AD0();
}

uint64_t sub_19C52C38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5 = swift_unknownObjectRetain();
  v4(v5, a3);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unint64_t sub_19C52C3F4(unint64_t result, unint64_t a2, uint64_t (*a3)(unint64_t))
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;

  if (result != a2)
  {
    v4 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v5 = *v3;
      v6 = *(_QWORD *)(*v3 + 16);
      if (v6 > result)
      {
        if (v6 > a2)
        {
          v9 = *(_QWORD *)(v5 + 32 + 8 * result);
          v10 = *(_QWORD *)(v5 + 32 + 8 * a2);
          swift_retain();
          swift_retain();
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = a3(v5);
            v5 = result;
          }
          if (*(_QWORD *)(v5 + 16) > v4)
          {
            *(_QWORD *)(v5 + 32 + 8 * v4) = v10;
            result = swift_release();
            if (*(_QWORD *)(v5 + 16) > a2)
            {
              *(_QWORD *)(v5 + 32 + 8 * a2) = v9;
              result = swift_release();
              *v3 = v5;
              return result;
            }
LABEL_15:
            __break(1u);
            return result;
          }
LABEL_14:
          __break(1u);
          goto LABEL_15;
        }
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_19C52C4DC()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for MetalBufferAllocator();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = sub_19C551770(MEMORY[0x1E0DEE9D8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE423CC8);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = v0;
  off_1EE423CB0 = (_UNKNOWN *)result;
  return result;
}

uint64_t sub_19C52C540@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_signpost_type_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint8_t *v29;
  os_signpost_id_t v30;
  uint8_t *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t *v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  char isUniquelyReferenced_nonNull_native;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  char *v46;
  os_signpost_type_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  char *v51;
  uint8_t *v52;
  os_signpost_id_t v53;
  void (*v54)(char *, uint64_t);
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  int v61;
  void (*v62)(char *, uint64_t);
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;

  v64 = a3;
  v65 = a5;
  v63 = a4;
  v66 = a7;
  v10 = sub_19CAA9764();
  v57 = *(_QWORD *)(v10 - 8);
  v58 = v10;
  MEMORY[0x1E0C80A78](v10);
  v59 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_19CAA9740();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v67 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v56 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v56 - v19;
  if (qword_1EE422E60 != -1)
    swift_once();
  v61 = a6 & 1;
  v21 = sub_19CAA9758();
  v22 = __swift_project_value_buffer(v21, (uint64_t)qword_1EE4317F0);
  sub_19CAA9734();
  v60 = v22;
  v23 = sub_19CAA974C();
  v24 = sub_19CAA9D64();
  if ((sub_19CAA9DDC() & 1) != 0)
  {
    v62 = (void (*)(char *, uint64_t))a2;
    v25 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v25(v18, v20, v12);
    v26 = v18;
    v27 = v12;
    v28 = a1;
    v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v29 = 0;
    v30 = sub_19CAA9728();
    _os_signpost_emit_with_name_impl(&dword_19C486000, v23, v24, v30, "GPU :: Storage allocation", "", v29, 2u);
    v31 = v29;
    a1 = v28;
    v12 = v27;
    v18 = v26;
    MEMORY[0x1A1AD7790](v31, -1, -1);

    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
    v32 = v25;
    a2 = (uint64_t)v62;
  }
  else
  {

    v32 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  }
  v56 = v32;
  v32(v18, v20, v12);
  sub_19CAA9788();
  swift_allocObject();
  sub_19CAA977C();
  v62 = *(void (**)(char *, uint64_t))(v13 + 8);
  v62(v20, v12);
  v33 = *a1;
  v34 = *(void **)(a2 + 24);
  v35 = objc_msgSend(v34, sel_registryID);
  v36 = (uint64_t *)(v33 + 16);
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v33 + 16) + 16) && (sub_19C552148((uint64_t)v35), (v37 & 1) != 0))
  {
    swift_endAccess();
    swift_retain();
  }
  else
  {
    swift_endAccess();
    type metadata accessor for MetalBufferAllocator.DeviceBufferAllocator();
    swift_allocObject();
    v38 = swift_retain();
    v39 = sub_19C530D8C(v38, 100);
    swift_release();
    swift_retain();
    v40 = objc_msgSend(v34, sel_registryID);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v68 = *v36;
    *v36 = 0x8000000000000000;
    sub_19C550EC8((uint64_t)v39, (uint64_t)v40, isUniquelyReferenced_nonNull_native);
    *v36 = v68;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  v42 = v59;
  v43 = v63 & 0x1FF;
  swift_retain();
  v44 = sub_19C52CA54(a2, v64, v43, v65, v61);
  swift_release_n();
  *v66 = v44;
  v45 = sub_19CAA974C();
  v46 = v67;
  sub_19CAA9770();
  v47 = sub_19CAA9D58();
  if ((sub_19CAA9DDC() & 1) != 0)
  {
    swift_retain();
    sub_19CAA9794();
    swift_release();
    v49 = v57;
    v48 = v58;
    if ((*(unsigned int (**)(char *, uint64_t))(v57 + 88))(v42, v58) == *MEMORY[0x1E0DF2190])
    {
      v50 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v49 + 8))(v42, v48);
      v50 = "";
    }
    v56(v18, v46, v12);
    v51 = v46;
    v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v52 = 0;
    v53 = sub_19CAA9728();
    _os_signpost_emit_with_name_impl(&dword_19C486000, v45, v47, v53, "GPU :: Storage allocation", v50, v52, 2u);
    MEMORY[0x1A1AD7790](v52, -1, -1);

    v54 = v62;
    v62(v51, v12);
    v54(v18, v12);
  }
  else
  {

    v62(v46, v12);
  }
  return swift_release();
}

uint64_t sub_19C52CA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  id v49;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t result;
  id v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD v83[3];
  uint64_t v84;

  v6 = v5;
  LODWORD(v7) = a5;
  if (qword_1EE422E48 != -1)
    goto LABEL_142;
  while (1)
  {
    if (byte_1EE4317CB != 1)
      goto LABEL_98;
    v12 = *(_QWORD *)(a2 + 16);
    if (v12)
    {
      v13 = (uint64_t *)(a2 + 32);
      v14 = 1;
      while (1)
      {
        v15 = *v13++;
        v16 = v14 * v15;
        if ((unsigned __int128)(v14 * (__int128)v15) >> 64 != (v14 * v15) >> 63)
          goto LABEL_130;
        v14 = v16;
        if (!--v12)
          goto LABEL_9;
      }
    }
    v16 = 1;
LABEL_9:
    if (a3 > 0xAu)
      v17 = 8;
    else
      v17 = qword_19CAEAF58[(char)a3];
    v18 = v16 * v17;
    if ((unsigned __int128)(v16 * (__int128)v17) >> 64 != (v16 * v17) >> 63)
      goto LABEL_147;
    v82 = v16 * v17;
    v74 = a4;
    v73 = v7;
    v71 = a2;
    v72 = a3;
    v70 = a1;
    if ((v7 & 1) == 0)
    {
      if (!a4)
        goto LABEL_150;
      if (a4 == -1 && v18 == 0x8000000000000000)
        goto LABEL_158;
      v19 = v18 % a4;
      if (!(v18 % a4))
        goto LABEL_27;
      v20 = v18 + a4;
      if (__OFADD__(v18, a4))
        goto LABEL_153;
      v18 = v20 - v19;
      if (!__OFSUB__(v20, v19))
        goto LABEL_27;
      __break(1u);
    }
    v21 = getpagesize();
    if (v18 > v21)
    {
      if (!v21)
        goto LABEL_157;
      v22 = v18 % v21;
      if (v22)
      {
        v23 = v18 + v21;
        if (__OFADD__(v18, v21))
          goto LABEL_159;
        v18 = v23 - v22;
        if (__OFSUB__(v23, v22))
          goto LABEL_160;
      }
LABEL_27:
      v82 = v18;
    }
    swift_beginAccess();
    a1 = v6[3];
    v24 = (_QWORD *)v6[4];
    v75 = v6;
    v25 = v6[5];
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v18;
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = sub_19C530E9C;
    *(_QWORD *)(v7 + 24) = v26;
    v6 = (_QWORD *)swift_allocObject();
    v6[2] = sub_19C530ED4;
    v6[3] = v7;
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    swift_beginAccess();
    v27 = v24 + 4;
    v77 = (uint64_t *)(a1 + 16);
    v28 = v25;
    v80 = v25 + 32;
    v81 = v24 + 5;
    v76 = v24 + 8;
    a4 = -1;
    v78 = v28;
    v79 = a1;
LABEL_31:
    a3 = a4 + 1;
    if (!__OFADD__(a4, 1))
      break;
LABEL_141:
    __break(1u);
LABEL_142:
    swift_once();
  }
  v29 = v28;
  v7 = v24[2];
  if (a3 < v7)
  {
    while ((a3 & 0x8000000000000000) == 0)
    {
      a2 = a4 + 1;
      if ((unint64_t)(a4 + 1) >= v24[2])
        goto LABEL_132;
      v30 = (void (*)(uint64_t *__return_ptr, _QWORD *))v6[2];
      v83[0] = v81[a4];
      v30(&v84, v83);
      if ((v84 & 1) != 0)
      {
        if (++a4 >= v7)
          goto LABEL_97;
        v32 = v24[2];
        if (a4 >= v32)
          goto LABEL_144;
        v33 = v27[a4];
        if (a1)
        {
          v34 = sub_19C52F874(v33, (uint64_t)v27, v32, v77);
          if ((v35 & 1) != 0)
            goto LABEL_97;
          if ((v34 & 0x8000000000000000) != 0)
            goto LABEL_146;
        }
        else if (*v27 == v33)
        {
          v34 = 0;
        }
        else
        {
          if (v32 == 1)
            goto LABEL_97;
          if (*v81 == v33)
          {
            v34 = 1;
          }
          else
          {
            if (v32 == 2)
              goto LABEL_97;
            if (v24[6] == v33)
            {
              v34 = 2;
            }
            else
            {
              if (v32 == 3)
                goto LABEL_97;
              if (v24[7] != v33)
              {
                v36 = 0;
                while (v32 - 4 != v36)
                {
                  v37 = v76[v36++];
                  if (v37 == v33)
                  {
                    v34 = v36 + 3;
                    if (v36 + 3 < 0)
                      goto LABEL_146;
                    goto LABEL_61;
                  }
                }
                goto LABEL_97;
              }
              v34 = 3;
            }
          }
        }
LABEL_61:
        if (v34 >= *(_QWORD *)(v29 + 16))
          goto LABEL_145;
        v38 = 0;
        a3 = *(_QWORD *)(*(_QWORD *)(v80 + 8 * v34) + 24);
        if ((a4 & 0x8000000000000000) == 0)
        {
          while (1)
          {
            v39 = v24[2];
            if (a4 >= v39)
              goto LABEL_135;
            v7 = v27[a4];
            if (a1)
            {
              v40 = sub_19C52F874(v27[a4], (uint64_t)v27, v39, v77);
              if ((v41 & 1) != 0)
                goto LABEL_97;
              if ((v40 & 0x8000000000000000) != 0)
                goto LABEL_137;
            }
            else if (*v27 == v7)
            {
              v40 = 0;
            }
            else
            {
              if (v39 == 1)
                goto LABEL_97;
              if (*v81 == v7)
              {
                v40 = 1;
              }
              else
              {
                if (v39 == 2)
                  goto LABEL_97;
                if (v24[6] == v7)
                {
                  v40 = 2;
                }
                else
                {
                  if (v39 == 3)
                    goto LABEL_97;
                  if (v24[7] != v7)
                  {
                    v42 = 0;
                    while (v39 - 4 != v42)
                    {
                      v43 = v76[v42++];
                      if (v43 == v7)
                      {
                        v40 = v42 + 3;
                        if (v42 + 3 < 0)
                          goto LABEL_137;
                        goto LABEL_83;
                      }
                    }
LABEL_96:
                    if (v38 == 0x7FFFFFFFFFFFFFFFLL)
                      goto LABEL_154;
                    goto LABEL_97;
                  }
                  v40 = 3;
                }
              }
            }
LABEL_83:
            if (v40 >= *(_QWORD *)(v29 + 16))
              goto LABEL_136;
            v44 = *(_QWORD **)(v80 + 8 * v40);
            if (v38 >= v44[3])
              goto LABEL_96;
            if (v38 < 0)
              goto LABEL_138;
            v45 = v44[4] + v38;
            v46 = v44[2];
            if (v45 < v46)
              v46 = 0;
            a1 = v82;
            if (v82 + 0x4000000000000000 < 0)
              goto LABEL_139;
            a2 = 2 * v82;
            if (2 * v82 < v82)
              goto LABEL_140;
            v47 = v24;
            v48 = (id)v44[v45 - v46 + 5];
            v49 = objc_msgSend((id)swift_unknownObjectRetain(), sel_allocatedSize);
            if ((uint64_t)v49 >= v82 && (uint64_t)v49 < a2)
            {
              swift_beginAccess();
              sub_19C52E240(v7, v38);
              swift_endAccess();
              v66 = objc_msgSend(v48, sel_allocatedSize);
              swift_release();
              swift_release();
              swift_release_n();
              swift_release_n();
              swift_unknownObjectRelease();
              v67 = v75[11];
              v68 = __OFSUB__(v67, v66);
              v69 = v67 - (_QWORD)v66;
              if (v68)
                goto LABEL_161;
              v75[11] = v69;
              return (uint64_t)v48;
            }
            ++v38;
            swift_unknownObjectRelease();
            v28 = v78;
            a1 = v79;
            v24 = v47;
            if (v38 >= a3)
              goto LABEL_31;
            v29 = v78;
            if (a4 < 0)
              goto LABEL_134;
          }
        }
        goto LABEL_134;
      }
      v31 = a4 + 2;
      if (__OFADD__(a2, 1))
        goto LABEL_133;
      ++a4;
      if (v31 >= v7)
        goto LABEL_97;
    }
    goto LABEL_131;
  }
LABEL_97:
  swift_release();
  swift_release();
  swift_release_n();
  swift_release_n();
  a4 = v74;
  v6 = v75;
  LODWORD(v7) = v73;
  a2 = v71;
  a3 = v72;
  a1 = v70;
LABEL_98:
  v51 = v6[12];
  if (v51 >= 1 && (uint64_t)objc_msgSend(*(id *)(a1 + 24), sel_currentAllocatedSize) >= v51)
  {
    swift_beginAccess();
    sub_19C52E660();
    swift_endAccess();
    v6[11] = 0;
  }
  v52 = *(void **)(a1 + 24);
  v53 = *(_QWORD *)(a2 + 16);
  if (v53)
  {
    v54 = (uint64_t *)(a2 + 32);
    v55 = 1;
    while (1)
    {
      v56 = *v54++;
      v57 = v55 * v56;
      if ((unsigned __int128)(v55 * (__int128)v56) >> 64 != (v55 * v56) >> 63)
        break;
      v55 = v57;
      if (!--v53)
        goto LABEL_107;
    }
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
    goto LABEL_141;
  }
  v57 = 1;
LABEL_107:
  if (a3 > 0xAu)
    v58 = 8;
  else
    v58 = qword_19CAEAF58[(char)a3];
  v59 = v57 * v58;
  if ((unsigned __int128)(v57 * (__int128)v58) >> 64 != (v57 * v58) >> 63)
  {
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
    goto LABEL_152;
  }
  if ((v7 & 1) != 0)
    goto LABEL_120;
  if (!a4)
    goto LABEL_148;
  if (a4 == -1 && v59 == 0x8000000000000000)
  {
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
  v60 = v59 % a4;
  if (!(v59 % a4))
    goto LABEL_125;
  v61 = v59 + a4;
  if (__OFADD__(v59, a4))
    goto LABEL_149;
  v59 = v61 - v60;
  if (__OFSUB__(v61, v60))
  {
    __break(1u);
LABEL_120:
    v62 = getpagesize();
    if (v59 <= v62)
      goto LABEL_125;
    if (v62)
    {
      v63 = v59 % v62;
      if (!v63)
        goto LABEL_125;
      v64 = v59 + v62;
      if (!__OFADD__(v59, v62))
      {
        v59 = v64 - v63;
        if (!__OFSUB__(v64, v63))
          goto LABEL_125;
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
        goto LABEL_162;
      }
LABEL_155:
      __break(1u);
      goto LABEL_156;
    }
    goto LABEL_151;
  }
LABEL_125:
  v48 = objc_msgSend(v52, sel_newBufferWithLength_options_, v59, 512);
  if (v48)
    return (uint64_t)v48;
LABEL_162:
  if (qword_1EE422E38 != -1)
    swift_once();
  if (byte_1EE4317C9 == 1)
  {
    v83[0] = 0;
    v83[1] = 0xE000000000000000;
    sub_19CAA9F2C();
    sub_19CAA992C();
    sub_19CAAA064();
    sub_19CAA992C();
  }
  result = sub_19CAAA0B8();
  __break(1u);
  return result;
}

