@implementation ZL36copyPixelBufferToTensorFunctionTablev

_QWORD *___ZL36copyPixelBufferToTensorFunctionTablev_block_invoke()
{
  _QWORD *result;
  int v1;
  uint64_t v2;
  int v3;

  v3 = 1111970369;
  v2 = 30;
  v1 = 52;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5Copy32BGRA_BGRTensor_CompDtypeFLOAT_CompPackFmt32;
  v3 = 1111970369;
  v2 = 20;
  v1 = 52;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5Copy32BGRA_RGBTensor_CompDtypeFLOAT_CompPackFmt32;
  v3 = 32;
  v2 = 30;
  v1 = 52;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5Copy32ARGB_BGRTensor_CompDtypeFLOAT_CompPackFmt32;
  v3 = 32;
  v2 = 20;
  v1 = 52;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5Copy32ARGB_RGBTensor_CompDtypeFLOAT_CompPackFmt32;
  v3 = 1278226488;
  v2 = 10;
  v1 = 52;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5CopyOneComponent8_GrayTensor_CompDtypeFLOAT_CompPackFmt32;
  v3 = 1278226536;
  v2 = 40;
  v1 = 52;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5CopyOneComponent16Half_GrayTensor_CompDtypeFLOAT_CompPackFmt32;
  v3 = 1278226536;
  v2 = 40;
  v1 = 28;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5CopyOneComponent16Half_GrayTensor_CompDtypeFLOAT_CompPackFmt16;
  v3 = 1111970369;
  v2 = 30;
  v1 = 28;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5Copy32BGRA_BGRTensor_CompDtypeFLOAT_CompPackFmt16;
  v3 = 1111970369;
  v2 = 20;
  v1 = 28;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5Copy32BGRA_RGBTensor_CompDtypeFLOAT_CompPackFmt16;
  v3 = 32;
  v2 = 30;
  v1 = 28;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5Copy32ARGB_BGRTensor_CompDtypeFLOAT_CompPackFmt16;
  v3 = 32;
  v2 = 20;
  v1 = 28;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5Copy32ARGB_RGBTensor_CompDtypeFLOAT_CompPackFmt16;
  v3 = 1278226488;
  v2 = 10;
  v1 = 28;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5CopyOneComponent8_GrayTensor_CompDtypeFLOAT_CompPackFmt16;
  v3 = 1278226488;
  v2 = 10;
  v1 = 0;
  result = std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1);
  result[5] = MLE5CopyOneComponent8_GrayTensor_CompDtypeUINT_CompPackFmt8;
  return result;
}

@end
